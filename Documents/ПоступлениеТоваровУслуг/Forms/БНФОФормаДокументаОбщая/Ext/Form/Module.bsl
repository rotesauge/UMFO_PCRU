

&НаКлиенте
Процедура pcru_ex_ЭтоОсновноеСредствоВместо(Команда)
	Если ЭтаФорма.Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ЭтаФорма.Элементы.Товары.ТекущиеДанные.СчетУчета  = pcru_УМФО.ПолучитьСчетОС(ЭтаФорма.Элементы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция  ПолучитьСчетОС(Номенклатура)
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОсновныеСредства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОсновныеСредства КАК ОсновныеСредства
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС.ОС КАК ПринятиеКУчетуОСОС
		|		ПО ПринятиеКУчетуОСОС.ОсновноеСредство = ОсновныеСредства.Ссылка
		|ГДЕ
		|	ОсновныеСредства.НаименованиеПолное = &НаименованиеПолное
		|	И ПринятиеКУчетуОСОС.Ссылка ЕСТЬ NULL";
		Запрос.УстановитьПараметр("НаименованиеПолное",Номенклатура.НаименованиеПолное);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОССсылка =  Выборка.Ссылка;
		Иначе
			ОС = Справочники.ОсновныеСредства.СоздатьЭлемент();
			ОС.Наименование =  Номенклатура.Наименование;
			ОС.НаименованиеПолное = Номенклатура.НаименованиеПолное; 
			ОС.ГруппаОС = Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств;
			ОС.БНФОГруппаФинансовогоУчета = Справочники.БНФОГруппыФинансовогоУчетаАктивов.НайтиПоКоду("00060401");
			ОС.Записать();
			ОССсылка = ОС.Ссылка;
		КонецЕсли;	 
		НОБ = Номенклатура.ПолучитьОбъект();
		НОБ.БНФОГруппаФинансовогоУчета = Справочники.БНФОГруппыФинансовогоУчетаАктивов.НайтиПоНаименованию("Основные средства (кроме земля)");
		НОБ.Записать();
		Счет60415 = pcru_УМФО.ПолучитьСчетПоАналитике("60415",ОССсылка);
		Если ЗначениеЗаполнено(Счет60415) Тогда
			Возврат Счет60415;
		Иначе	
			pcru_УМФО.Открыть60401(ОССсылка);
			Возврат pcru_УМФО.ПолучитьСчетПоАналитике("60415",ОССсылка);
		КонецЕсли; 
	Исключение
		Ошибка=ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки; 	
КонецФункции

&НаКлиенте
Процедура pcru_ex_ТоварыНоменклатураПриИзмененииПосле(Элемент)
	Элемент.Родитель.ТекущиеДанные.СчетУчета = ПолучитьСчетМатериалы();
	Элемент.Родитель.ТекущиеДанные.СчетУчетаНДС = ПолучитьСчетМатериалы();
КонецПроцедуры

&НаСервере
Функция  ПолучитьСчетМатериалы()
	Возврат Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6100881000000000000100000");
КонецФункции


&НаСервере
Процедура ПриИзмененииРеквизитов()
	Если ЗначениеЗаполнено(ЭтотОбъект.Объект.Контрагент) и ЗначениеЗаполнено(ЭтотОбъект.Объект.ДоговорКонтрагента) Тогда
		ЭтотОбъект.Объект.СчетУчетаРасчетовСКонтрагентом  = pcru_УМФО.ПолучитьСчетПоАналитике("60311",ЭтотОбъект.Объект.Контрагент,ЭтотОбъект.Объект.ДоговорКонтрагента);
		Если не ЗначениеЗаполнено(ЭтотОбъект.Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
			ЭтотОбъект.Объект.СчетУчетаРасчетовСКонтрагентом =  pcru_УМФО.Открыть60311(ЭтотОбъект.Объект.Контрагент,ЭтотОбъект.Объект.ДоговорКонтрагента,"000000059");
		КонецЕсли; 
		ЭтотОбъект.Объект.СчетУчетаРасчетовПоАвансам  = pcru_УМФО.ПолучитьСчетПоАналитике("60312",ЭтотОбъект.Объект.Контрагент,ЭтотОбъект.Объект.ДоговорКонтрагента);
		ЭтотОбъект.Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ЭтотОбъект.Объект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	КонецЕсли; 
	ПоступлениеТоваровУслугФормы.УстановитьПорядокУчетаРасчетов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура pcru_ex_КонтрагентПриИзмененииПосле(Элемент)
	ПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура pcru_ex_ДоговорКонтрагентаПриИзмененииПосле(Элемент)
	ПриИзмененииРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура pcru_ex_РазбитьУслугиВместо(Команда)
	РазбитьУслугиНаСервере();
КонецПроцедуры

&НаСервере
Процедура РазбитьУслугиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест КАК КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.Коэффициент КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
	|	ПоступлениеТоваровУслугТовары.Цена КАК Цена,
	|	ПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СчетУчета КАК СчетУчета,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПоступлениеТоваровУслугТовары.ЦенаВРознице КАК ЦенаВРознице,
	|	ПоступлениеТоваровУслугТовары.СуммаВРознице КАК СуммаВРознице,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
	|	ПоступлениеТоваровУслугТовары.ОтражениеВУСН КАК ОтражениеВУСН,
	|	ПоступлениеТоваровУслугТовары.Контрагент КАК Контрагент,
	|	ПоступлениеТоваровУслугТовары.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПоступлениеТоваровУслугТовары.СчетРасчетов КАК СчетРасчетов,
	|	ПоступлениеТоваровУслугТовары.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.КиЗ_ГИСМ КАК КиЗ_ГИСМ
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.СчетУчета.Владелец.Код = &Код
	|	И ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Код","60415");
	Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивЦен = Новый Массив;
	ОбщаяЦена = 0; 
	Пока Выборка.Следующий() Цикл
		ОбщаяЦена=ОбщаяЦена+Выборка.Сумма;	
		Стр = Новый Структура;
		Стр.Вставить("СчетУчета",Выборка.СчетУчета);
		Стр.Вставить("Сумма",Выборка.Сумма);
		Стр.Вставить("Номенклатура",Выборка.Номенклатура);
		МассивЦен.Добавить(Стр);
	КонецЦикла;
	
	Если МассивЦен.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугУслуги.Содержание КАК Содержание,
		|	СУММА(ПоступлениеТоваровУслугУслуги.Количество) КАК Количество,
		|	СУММА(ПоступлениеТоваровУслугУслуги.Цена) КАК Цена,
		|	СУММА(ПоступлениеТоваровУслугУслуги.Сумма) КАК Сумма,
		|	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ПоступлениеТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат КАК СчетЗатрат,
		|	ПоступлениеТоваровУслугУслуги.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
		|	ПоступлениеТоваровУслугУслуги.Субконто1 КАК Субконто1,
		|	ПоступлениеТоваровУслугУслуги.Субконто2 КАК Субконто2,
		|	ПоступлениеТоваровУслугУслуги.Субконто3 КАК Субконто3,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ КАК СчетЗатратНУ,
		|	ПоступлениеТоваровУслугУслуги.СубконтоНУ1 КАК СубконтоНУ1,
		|	ПоступлениеТоваровУслугУслуги.СубконтоНУ2 КАК СубконтоНУ2,
		|	ПоступлениеТоваровУслугУслуги.СубконтоНУ3 КАК СубконтоНУ3,
		|	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ПоступлениеТоваровУслугУслуги.ОтражениеВУСН КАК ОтражениеВУСН,
		|	ПоступлениеТоваровУслугУслуги.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ПоступлениеТоваровУслугУслуги.БНФОСтатьяЗатрат КАК БНФОСтатьяЗатрат,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто1 КАК БНФОСубконто1,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто2 КАК БНФОСубконто2,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто3 КАК БНФОСубконто3,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ1 КАК БНФОСубконтоНУ1,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ2 КАК БНФОСубконтоНУ2,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ3 КАК БНФОСубконтоНУ3,
		|	ПоступлениеТоваровУслугУслуги.БНФОСчетДоходов КАК БНФОСчетДоходов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.Номенклатура,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
		|	ПоступлениеТоваровУслугУслуги.СтавкаНДС,
		|	ПоступлениеТоваровУслугУслуги.СубконтоНУ2,
		|	ПоступлениеТоваровУслугУслуги.Содержание,
		|	ПоступлениеТоваровУслугУслуги.ПодразделениеЗатрат,
		|	ПоступлениеТоваровУслугУслуги.Субконто2,
		|	ПоступлениеТоваровУслугУслуги.Субконто3,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ,
		|	ПоступлениеТоваровУслугУслуги.Субконто1,
		|	ПоступлениеТоваровУслугУслуги.СубконтоНУ1,
		|	ПоступлениеТоваровУслугУслуги.СпособУчетаНДС,
		|	ПоступлениеТоваровУслугУслуги.БНФОСтатьяЗатрат,
		|	ПоступлениеТоваровУслугУслуги.ОтражениеВУСН,
		|	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто1,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто2,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ3,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто3,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ1,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ2,
		|	ПоступлениеТоваровУслугУслуги.СубконтоНУ3,
		|	ПоступлениеТоваровУслугУслуги.БНФОСчетДоходов";
		Запрос.УстановитьПараметр("Ссылка",ЭтотОбъект.Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		ЭтотОбъект.Объект.Услуги.Очистить();
		Пока Выборка.Следующий() Цикл
			ЦенаДоРазбивки  =  Выборка.Цена;
			СуммаДоРазбивки =  Выборка.Сумма;
			НдсДоРазбивки   =  Выборка.СуммаНДС;
			
			ЦенаНакопленная = 0;
			СуммаНакопленная = 0;
			НдсНакопленная = 0;
			
			ПоследняяСтрокаМассива = МассивЦен.Количество();
			ТекСтрока = 0;
			Для каждого СТрокаМассива Из МассивЦен Цикл
				ТекСтрока                   = ТекСтрока + 1;
				СтрокаУслуги                = ЭтотОбъект.Объект.Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУслуги,Выборка);
				ЦенаНакопленная             = ЦенаНакопленная + СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Цена;
				СуммаНакопленная            = СуммаНакопленная + СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Сумма;
				НдсНакопленная              = НдсНакопленная + СТрокаМассива.Сумма/ОбщаяЦена * Выборка.СуммаНДС;
				Если ТекСтрока              = ПоследняяСтрокаМассива Тогда
					СтрокаУслуги.Цена       = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Цена     + ?((ЦенаНакопленная  - ЦенаДоРазбивки)>0, (ЦенаНакопленная  - ЦенаДоРазбивки),  - (ЦенаНакопленная  - ЦенаДоРазбивки));
					СтрокаУслуги.Сумма      = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Сумма    + ?((СуммаНакопленная - СуммаДоРазбивки)>0,(СуммаНакопленная - СуммаДоРазбивки), - (СуммаНакопленная - СуммаДоРазбивки));
					СтрокаУслуги.СуммаНДС   = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.СуммаНДС + ?((НдсНакопленная   - НдсДоРазбивки)>0,  (НдсНакопленная   - НдсДоРазбивки),   - (НдсНакопленная   - НдсДоРазбивки));
				Иначе	
					СтрокаУслуги.Цена       = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Цена;
					СтрокаУслуги.Сумма      = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Сумма;
					СтрокаУслуги.СуммаНДС   = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.СуммаНДС;
				КонецЕсли;   
				СтрокаУслуги.Цена           = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Цена;
				СтрокаУслуги.Сумма          = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.Сумма;
				СтрокаУслуги.СуммаНДС       = СТрокаМассива.Сумма/ОбщаяЦена * Выборка.СуммаНДС;
				СтрокаУслуги.СчетЗатрат     = СТрокаМассива.СчетУчета;
				СтрокаУслуги.СчетЗатратНУ   = СТрокаМассива.СчетУчета;
				СтрокаУслуги.БНФОСубконто1   = СТрокаМассива.Номенклатура;
				СтрокаУслуги.БНФОСубконто2   = Справочники.Склады.НайтиПоНаименованию("Основной склад");
				СтрокаУслуги.БНФОСубконто3   = ЭтотОбъект.Объект.Ссылка;
				СтрокаУслуги.БНФОСубконтоНУ1 = СТрокаМассива.Номенклатура;
				СтрокаУслуги.БНФОСубконтоНУ2 = Справочники.Склады.НайтиПоНаименованию("Основной склад");
				СтрокаУслуги.БНФОСубконтоНУ3 = ЭтотОбъект.Объект.Ссылка;
				СтрокаУслуги.Субконто1 = СТрокаМассива.Номенклатура;
         		СтрокаУслуги.Субконто2 = Справочники.Склады.НайтиПоНаименованию("Основной склад");
        		СтрокаУслуги.Субконто3  = ЭтотОбъект.Объект.Ссылка;
        		СтрокаУслуги.СубконтоНУ1 = СТрокаМассива.Номенклатура;
         		СтрокаУслуги.СубконтоНУ2  = Справочники.Склады.НайтиПоНаименованию("Основной склад");
         		СтрокаУслуги.СубконтоНУ3 = ЭтотОбъект.Объект.Ссылка;				
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли;
	
	
	
	//ИндексТекущейУслуги = ЭтаФорма.Элементы.Услуги.ТекущаяСтрока;
	//Если ИндексТекущейУслуги = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	//КоличествоТоваров = ЭтотОбъект.Объект.Товары.Количество();
	//Для Сч = 1 По КоличествоТоваров - 1 Цикл
	//	Нстр = ЭтотОбъект.Объект.Услуги.Добавить(); 
	//	ЗаполнитьЗначенияСвойств(Нстр,ЭтотОбъект.Объект.Услуги[ИндексТекущейУслуги]);
	//	Нстр.Цена = Нстр.Цена/КоличествоТоваров;
	//	Нстр.Сумма = Нстр.Сумма/КоличествоТоваров;
	//КонецЦикла;
	//ЭтотОбъект.Объект.Услуги[ИндексТекущейУслуги].Цена = ЭтотОбъект.Объект.Услуги[ИндексТекущейУслуги].Цена/КоличествоТоваров;
КонецПроцедуры 



