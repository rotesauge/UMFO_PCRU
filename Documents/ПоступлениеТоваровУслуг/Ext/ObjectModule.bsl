&НаСервере
Функция ПолучитьОсновнойДоговор(Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	И ОсновныеДоговорыКонтрагента.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Владелец);
	Запрос.УстановитьПараметр("Организация", Справочники.Организации.НайтиПоИНН("7838492459"));
	Выборка = Запрос.Выполнить().Выгрузить();
	Попытка
		Возврат Выборка[0].Договор  ;
	Исключение
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецПопытки; 
	
КонецФункции


&После("ПередЗаписью")
Процедура pcru_ex_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Попытка 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктуальныеДокументыЭДО.ОбъектУчета КАК ОбъектУчета,
		|	//АктуальныеДокументыЭДО.ВидЭлектронногоДокумента КАК ВидДокумента,
		|	АктуальныеДокументыЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК АктуальныеДокументыЭДО
		|ГДЕ
		|	АктуальныеДокументыЭДО.ОбъектУчета = &ОбъектыУчета";
		Запрос.УстановитьПараметр("ОбъектыУчета", ЭтотОбъект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МассивЭД = Новый Массив;
			МассивЭД.Добавить(pcru_ex_ПрисоединенныйФайл(Выборка.ЭлектронныйДокумент));
			//ТаблицаИнформацияОТоваре = ОбменСКонтрагентамиВнутренний.ПолучитьИнформациюОТоваре(МассивЭД);
			ТаблицаИнформацияОТоваре = Новый Массив;
			
			//Грузополучатель = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "Грузополучатель");
			Если Не ЗначениеЗаполнено(ЭтотОбъект.ПодразделениеОрганизации) Тогда
				//ЭтотОбъект.ПодразделениеОрганизации = ПолучитьПодразделениеизЭД(pcru_ex_ПрисоединенныйФайл(Выборка.ЭлектронныйДокумент));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
				ЭтотОбъект.Контрагент = Выборка.ЭлектронныйДокумент.Контрагент;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЭтотОбъект.ДоговорКонтрагента) Тогда
				ЭтотОбъект.ДоговорКонтрагента = ПолучитьОсновнойДоговор(ЭтотОбъект.Контрагент);
			КонецЕсли; 
			Индекс = 0;
			Для каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					Запрос1 = Новый Запрос;
					Запрос1.Текст = "ВЫБРАТЬ
					|	Номенклатура.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Номенклатура КАК Номенклатура
					|ГДЕ
					|	Номенклатура.НаименованиеПолное ПОДОБНО &НаименованиеПолное";
					Запрос1.УстановитьПараметр("НаименованиеПолное", ТаблицаИнформацияОТоваре[Индекс].Наименование);
					Выборка1 = Запрос1.Выполнить().Выбрать();
					Если Выборка1.Следующий() Тогда
						ОбНом = Выборка1.Ссылка.ПолучитьОбъект();
						Если Не ЗначениеЗаполнено(ОбНом.БНФОГруппаФинансовогоУчета) Тогда
							ОбНом.БНФОГруппаФинансовогоУчета = Справочники.БНФОГруппыФинансовогоУчетаАктивов.НайтиПоНаименованию("Материалы");
						КонецЕсли;  
						Если Не ЗначениеЗаполнено(ОбНом.ЕдиницаИзмерения) Тогда
							ОбНом.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796 "); 
						КонецЕсли;
						ОбНом.Записать();
						Ном = ОбНом.Ссылка;
					Иначе
						ОбНом = Справочники.Номенклатура.СоздатьЭлемент();
						ОбНом.БНФОГруппаФинансовогоУчета = Справочники.БНФОГруппыФинансовогоУчетаАктивов.НайтиПоНаименованию("Материалы");
						ОбНом.Наименование = ТаблицаИнформацияОТоваре[Индекс].Наименование;
						ОбНом.НаименованиеПолное =  ТаблицаИнформацияОТоваре[Индекс].Наименование;
						ОбНом.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиСоздатьЭлементыТовар();
						ОбНом.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796 ");
						ОбНом.Записать();
						Ном = ОбНом.Ссылка;
					КонецЕсли;
					СтрокаТЧ.Номенклатура = Ном; 
					СтрокаТЧ.СчетУчета = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6100881000000000000100000");
					СтрокаТЧ.СчетУчетаНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
					//СтрокаТЧ.Контрагент = Справочники.Контрагенты;
					//СтрокаТЧ.ДоговорКонтрагента = ЭтотОбъект.ДоговорКонтрагента;
					СтрокаТЧ.СпособУчетаНДС =Перечисления.СпособыУчетаНДС.Распределяется;
				КонецЕсли; 
				//++ Севрюгин А.А
				Если не ЗначениеЗаполнено(СтрокаТЧ.СчетУчета)  Тогда
					СтрокаТЧ.СчетУчета = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6100881000000000000100000");
				КонецЕсли; 
				
				Если не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС)  Тогда
					СтрокаТЧ.СчетУчетаНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	            КонецЕсли; 

				Если не ЗначениеЗаполнено(СтрокаТЧ.СпособУчетаНДС)  Тогда
					СтрокаТЧ.СпособУчетаНДС =Перечисления.СпособыУчетаНДС.Распределяется;
				КонецЕсли; 
				// Правка от 25.04.2019 13:40:48  Севрюгин А.А.  
				//-- Севрюгин А.А		
				Индекс = Индекс +1;
				
				//Для КОМУСА способ учета НДС Распределяемый
				Если Контрагент.ИНН = "7721793895"	Тогда
					Если СтрокаТЧ.СпособУчетаНДС <> Перечисления.СпособыУчетаНДС.Распределяется Тогда
						СтрокаТЧ.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
					КонецЕсли;
				КонецЕсли;
								
			КонецЦикла; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
				ЭтотОбъект.Организация = pcru_УМФО.Организация();
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом) Тогда
				ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом = pcru_УМФО.ПолучитьСчетПоАналитике("60311",Выборка.ЭлектронныйДокумент.Контрагент);
				ЭтотОбъект.СпособЗачетаАвансов  = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект.СчетУчетаРасчетовПоАвансам) Тогда
				ЭтотОбъект.СчетУчетаРасчетовПоАвансам = pcru_УМФО.ПолучитьСчетПоАналитике("60312",Выборка.ЭлектронныйДокумент.Контрагент);
				ЭтотОбъект.СпособЗачетаАвансов  = Перечисления.СпособыЗачетаАвансов.Автоматически;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ЭтотОбъект.БНФОПризнакДоверительногоУправления) Тогда
				ЭтотОбъект.БНФОПризнакДоверительногоУправления  = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
			КонецЕсли; 
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	
	//Для ЮТС услуги
	Если Контрагент.ИНН = "7707545675" Тогда
		Для Каждого Строка Из Услуги Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Содержание = СокрЛП(ВРег(Строка.Содержание));			
				Если СтрЧислоВхождений(Содержание, ВРег("Внутренние железнодорожные билеты")) > 0 ИЛИ СтрЧислоВхождений(Содержание, ВРег("Услуги РЖД")) > 0 Тогда
					Строка.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00000000044");
				КонецЕсли;
				Если СтрЧислоВхождений(Содержание, ВРег("Электронный а/б внутренний")) > 0 ИЛИ СтрЧислоВхождений(Содержание, ВРег("Такса ZZ")) > 0 Тогда
					Строка.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00000000041");
				КонецЕсли;
				Если СтрЧислоВхождений(Содержание, ВРег("Сбор УФС")) > 0 ИЛИ СтрЧислоВхождений(Содержание, ВРег("Сервисный сбор")) > 0 Тогда
					Строка.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00000000042");
				КонецЕсли;
				Если СтрЧислоВхождений(Содержание, ВРег("Проживание в гостинице")) > 0 ИЛИ СтрЧислоВхождений(Содержание, ВРег("Ранний заезд")) > 0 Тогда
					Строка.Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00000000050");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьПодразделениеизЭД(ТекЭД)
	
	//Если ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(ТекЭД.ТипЭлементаВерсииЭД) Тогда
	//	ЭД = ТекЭД.ЭлектронныйДокументВладелец;
	//Иначе
	//	ЭД = ТекЭД;
	//КонецЕсли;
	ЭД = ТекЭД;
	ДопИнформацияПоЭД = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭД, , Истина);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ДанныеЭД.Записать(ИмяФайла);
		Текст = Новый ТекстовыйДокумент; 
		Текст.Прочитать(ИмяФайла); 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Наименование КАК Наименование,
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			КодПодразделения = СтрПолучитьСтроку(СтрЗаменить(Выборка.Наименование," ",Символы.ПС),1);
			Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл 
				Стр = Текст.ПолучитьСтроку(НомерСтроки); 
				Если СтрЧислоВхождений(Стр,КодПодразделения) > 0  Тогда
					Возврат Выборка.Ссылка;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();	
	
КонецФункции // ПолучитьПодразделениеизЭД()


//&Вместо("УстановитьСтатусДокумента")
Процедура pcru_ex_УстановитьСтатусДокумента()
		Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
		
	//Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
	//	//Запись из формы документа
	//	Попытка
	//	СтатусДокумента = ?(ДополнительныеСвойства.СтатусДокумента,
	//		Перечисления.СтатусыДокументовПоступления.ОригиналПолучен, 
	//		Перечисления.СтатусыДокументовПоступления.ОригиналНеПолучен);
	//	Исключение
	//		СтатусДокумента = ДополнительныеСвойства.СтатусДокумента;
	//	КонецПопытки;	
	//		Если НЕ ДополнительныеСвойства.ТребуетсяСчетФактура Тогда
	//		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
	//	ИначеЕсли ДополнительныеСвойства.ЕстьСчетФактура Тогда
	//		Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
	//			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Проведен;
	//		ИначеЕсли ПометкаУдаления Тогда
	//			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
	//		Иначе
	//			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеПроведен;
	//		КонецЕсли;
	//	Иначе
	//		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ПредъявляетНДС, УчетАгентскогоНДС");
	//		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
	//			ИЛИ НЕ РеквизитыДоговора.ПредъявляетНДС
	//			ИЛИ РеквизитыДоговора.УчетАгентскогоНДС Тогда 
	//			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
	//		Иначе
	//			СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе
	//	// Необходимо сделать запись состояния счета фактуры для случаев "Отсутствует", "Не требуется".
	//	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ЭтотОбъект.Ссылка);
	//	Если ЗначениеЗаполнено(СчетФактура) Тогда
	//		// Движения по статусам сформирует счет-фактура
	//		Возврат;
	//	КонецЕсли;
	//	
	//	СтатусДокумента = Неопределено;
	//	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "ПредъявляетНДС, УчетАгентскогоНДС, ВидДоговора");
	//	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
	//		ИЛИ НЕ РеквизитыДоговора.ПредъявляетНДС
	//		ИЛИ РеквизитыДоговора.УчетАгентскогоНДС 
	//		ИЛИ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом 
	//		ИЛИ НДСНеВыделять
	//		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
	//		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.НеТребуется;
	//	Иначе
	//		СтатусСчетаФактуры = Перечисления.СтатусыСчетаФактуры.Отсутствует;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//УстановленСтатусДокумента = Истина;
	//РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ЭтотОбъект.Ссылка, СтатусДокумента,,СтатусСчетаФактуры);
	//

	 Если ПроведениеСервер.ГрупповоеПерепроведение(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("СтатусДокумента")
		И УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(ЭтотОбъект.Ссылка) <> Неопределено Тогда
		// Записываем из списка документов. Движения по статусам сформирует счет-фактура.
		Возврат;
	КонецЕсли;
	
	Статусы = Новый Структура("СтатусДокумента, СтатусСчетаФактуры");
	ЗаполнитьЗначенияСвойств(Статусы, ДополнительныеСвойства);
	
	Если Статусы.СтатусСчетаФактуры = Неопределено Или ПометкаУдаления Тогда
		// При записи из формы не определили статус счета-фактуры. Рассчитаем его по реквизитам документа.
		Статусы.СтатусСчетаФактуры = СтатусСчетаФактурыПоУмолчанию();
	КонецЕсли;
	
	УстановленСтатусДокумента = Истина;
	РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ЭтотОбъект.Ссылка, Статусы.СтатусДокумента);
	

КонецПроцедуры


Функция pcru_ex_ПрисоединенныйФайл(ВладелецФайла, ТипЭлементаВерсииЭД = Неопределено,СообщатьОбОшибке = Ложь) Экспорт
	
	Перем ПрисоединенныйФайл;
	
	Если ТипЭлементаВерсииЭД = Неопределено Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СообщениеЭДО.Ссылка
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент = &ВладелецФайла
	|	И СообщениеЭДО.ВидСообщения = &ТипЭлементаВерсииЭД";
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД",ТипЭлементаВерсииЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ПрисоединенныйФайл = Выборка.Ссылка;
	ИначеЕсли СообщатьОбОшибке Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл документа %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВладелецФайла);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
		Операция, ТекстОшибки, ТекстОшибки, "ОбменСКонтрагентами", ВладелецФайла);
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции
