
&Вместо("ЗаполнитьНаОснованииИсправления")
Процедура pcru_ex_ЗаполнитьНаОснованииИсправления(Основание)
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
		"ДокументПоступления,ИсправляемыйДокументПоступления,ВидОперации,Дата,ДоговорКонтрагента");
	
	ИсходныйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(РеквизитыОснования.ДокументПоступления);
	//Если НЕ ЗначениеЗаполнено(ИсходныйДокумент) Тогда
	//	ВызватьИсключение НСтр("ru = 'Не определен исправляемый документ'");
	//КонецЕсли;
	
	КодВидаОперацииОснования = "";
	НомерИсправленияСФ       = 0;
	ПереопределятьПараметрыИсходногоДокумента = Ложь;
	ПовторнаяКорректировкаСчетаФактуры = Ложь; 
	
	Дата = РеквизитыОснования.Дата;
	ДоговорКонтрагента = РеквизитыОснования.ДоговорКонтрагента;
	ДокументОснование = Основание;
	СтрокаОснования = ДокументыОснования.Добавить();
	СтрокаОснования.ДокументОснование = Основание;
	ИсправляемыйСчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(
		РеквизитыОснования.ИсправляемыйДокументПоступления, "СчетФактураПолученный");
	
	Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
		Если ТипЗнч(ИсходныйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			ПовторнаяКорректировкаСчетаФактуры = Истина;
		КонецЕсли;
	ИначеЕсли РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		Исправление = Истина;
		ДатаИсправления = Дата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПоступления", РеквизитыОснования.ДокументПоступления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураИсходный.Ссылка.КодВидаОперации КАК КодВидаОперации,
	|	СчетФактураИсходный.Ссылка КАК Ссылка,
	|	СчетФактураИсходный.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	СчетФактураИсходный.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактураИсходный.Ссылка.Исправление КАК Исправление,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорректировочныйСчетФактура,
	|	СчетФактураИсходный.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураИсходный.Ссылка.ДатаИсправления КАК ДатаИсправления,
	|	СчетФактураИсходный.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураИсходный.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	СчетФактураИсходный.УчитыватьИсправлениеИсходногоДокумента КАК УчитыватьИсправлениеИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураИсходный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураИсходный.Ссылка.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)
	|			ТОГДА СчетФактураИсходный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураИсходный.Ссылка.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	ВЫБОР
	|		КОГДА СчетФактураИсходный.Ссылка.Дата >= ДАТАВРЕМЯ(2015, 1, 1)
	|			ТОГДА СчетФактураИсходный.Ссылка.КодВидаОперацииНаУменьшение
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодВидаОперацииУменьшение,
	|	СчетФактураИсходный.Ссылка.Продавец КАК Продавец,
	|	СчетФактураИсходный.Ссылка.КППКонтрагента,
	|	СчетФактураИсходный.Ссылка.ИННКонтрагента
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураИсходный
	|ГДЕ
	|	(СчетФактураИсходный.ДокументОснование = &ДокументПоступления
	|			ИЛИ СчетФактураИсходный.Ссылка = &ДокументПоступления)
	|	И НЕ СчетФактураИсходный.Ссылка.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		//ВызватьИсключение НСтр("ru = 'Не определен исправляемый счет-фактура'");
	Иначе
		ТаблицаПоСчетуФактуре = РезультатЗапроса.Выгрузить();
		РеквизитыИсходногоСчетаФактуры = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаПоСчетуФактуре[0]);
			
		Если ПовторнаяКорректировкаСчетаФактуры Тогда
			
			// Перенесем входящие реквизиты корректируемого счета-фактуры в табличную часть 
			// (реквизиты корректировочного счета-фактуры заносятся как реквизиты исходного)
			
			СтрокаОснования.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
			СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
			
			Если РеквизитыИсходногоСчетаФактуры.Исправление Тогда
				СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
				СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
				СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
			КонецЕсли;
			
		Иначе
			
			Если РеквизитыИсходногоСчетаФактуры.КорректировочныйСчетФактура Тогда
				
				// Исправление корректировочного счета-фактуры
				
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
				ЗаполнитьЗначенияСвойств(СтрокаОснования, РеквизитыИсходногоСчетаФактуры, 
					"НомерИсходногоДокумента,ДатаИсходногоДокумента,УчитыватьИсправлениеИсходногоДокумента,
					|НомерИсправленияИсходногоДокумента,ДатаИсправленияИсходногоДокумента");
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыИсходногоСчетаФактуры,
					"НомерВходящегоДокумента,ДатаВходящегоДокумента");
				
			ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				// Корректировка счета-фактуры
				
				СтрокаОснования.НомерИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерИсходногоДокумента;
				СтрокаОснования.ДатаИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаИсходногоДокумента;

				Если РеквизитыИсходногоСчетаФактуры.Исправление Тогда
					СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента = Истина;
					СтрокаОснования.НомерИсправленияИсходногоДокумента = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
					СтрокаОснования.ДатаИсправленияИсходногоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаИсправления;
				КонецЕсли;
				
			Иначе
				
				// Исправление обычного счета-фактуры
				
				НомерВходящегоДокумента = РеквизитыИсходногоСчетаФактуры.НомерВходящегоДокумента;
				ДатаВходящегоДокумента  = РеквизитыИсходногоСчетаФактуры.ДатаВходящегоДокумента;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыИсходногоСчетаФактуры, "Продавец");
			
			НомерИсправленияСФ       = РеквизитыИсходногоСчетаФактуры.НомерИсправления;
			КодВидаОперацииОснования = РеквизитыИсходногоСчетаФактуры.КодВидаОперации;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Исправление Тогда
		НомерИсправления = НомерИсправленияСФ + 1;
	КонецЕсли;
	
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(Дата);
	КодВидаОперации = ПолучитьКодВидаОперации(КодВидаОперацииОснования);
	Если ВерсияКодовВидовОпераций > 1 Тогда 
		КодВидаОперацииНаУменьшение = "18";
	КонецЕсли;
	
	Если ПустаяСтрока(КППКонтрагента)
		И ТипЗнч(Основание) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(Основание, "Грузоотправитель");
	КонецЕсли;
	
	ПараметрыСчетаФактуры = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыСчетаФактуры, , "Продавец");

КонецПроцедуры
