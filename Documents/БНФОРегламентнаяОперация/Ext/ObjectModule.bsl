
&Вместо("СформироватьДвижения")
Процедура pcru_ex_СформироватьДвижения(СтруктураШапкиДокумента, Отказ, Ошибки)

	// Как правило, алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета.
	// Есть исключения для отдельных регл. операций. Они описаны ниже.
	Движения.БНФОБанковский.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	СхемаРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураШапкиДокумента.ВидОперации, "СхемаРасчета");
	
	Если СхемаРасчета = "СверткаПарныхСчетовАналитическогоУчета" Тогда
		// Свертка парных счетов расчетов с контрагентами.
		СверткаПарныхСчетовРасчетовСКонтрагентами(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СхемаРасчета = "ПереоценкаВалютныхСредств" Тогда
		// ПЕРЕОЦЕНКА
		ПереоценкаВалютныхСредств(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	// {++НФО}

	ИначеЕсли СхемаРасчета = "РасчетНалогаНаПрибыль" Тогда
		
		ВыполнитьРасчетНалогаНаПрибыль(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	// {Исключить ПРОФ}	
		БНФОНалоговыйУчетОбособленныхПодразделений.ПроведениеПересчетаОНАиОНО(СтруктураШапкиДокумента, Движения, Отказ, Ошибки);
	// {/Исключить ПРОФ}
		
	ИначеЕсли СхемаРасчета = "РасчетНормируемыхРасходов" Тогда
		
		РасчетНормируемыхРасходов(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	// РЕГЛАМЕНТНЫЕ ОПЕРАЦИИ ПО УСН
	ИначеЕсли СхемаРасчета = "ПризнаниеРасходовНаПриобретениеОСДляУСН" Тогда 
		
		ПризнаниеРасходовНаПриобретениеОСУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СхемаРасчета = "ПризнаниеРасходовНаПриобретениеНМАДляУСН" Тогда 
		
		ПризнаниеРасходовНаПриобретениеНМАУСН(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СхемаРасчета = "РасчетНалогаУСН" Тогда
		
		НачислитьНалогУСН(СтруктураШапкиДокумента, Отказ, Ошибки);
	// {/++НФО}
		
	ИначеЕсли СхемаРасчета = "ПереносОстатковДоходовРасходовНаСчетаПрошлогоГода" Тогда
		// Закрытие года
		ВыполнитьПереносОстатковДоходовРасходовНаСчетаПрошлогоГода(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СхемаРасчета = "ПрибыльУбытокПрошлогоГода" Тогда
		// Закрытие года
		ВыполнитьПрибыльУбытокПрошлогоГода(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	// {++НФО}
	ИначеЕсли СхемаРасчета = "СписаниеУбытковПрошлыхЛет" Тогда
		// Убыток прошлых лет
		СписаниеУбытковПрошлыхЛет(СтруктураШапкиДокумента, Отказ);
	// {/++НФО}
	

		
	ИначеЕсли СхемаРасчета = "КонтрольОстатковНеСоответствующихПризнакуСчета" Тогда
		
		ВыполнитьКонтрольОстатковНеСоответствующихПризнакуСчета(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СхемаРасчета = "КонтрольОстатковНаСчетахБезПризнакаСчета" Тогда
		
		ВыполнитьКонтрольОстатковНаСчетахБезПризнакаСчета(СтруктураШапкиДокумента, Отказ);
		
	// {++НФО}	
	ИначеЕсли СхемаРасчета = "ЗакрытиеСделокНСО" Тогда
		// Закрытие сделок НСО.
		ВыполнитьЗакрытиеСделокНСО(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СхемаРасчета = "СписаниеПроцентовПоСделкамНСО" Тогда
		// Списание процентов по сделкам НСО.
		ВыполнитьСписаниеПроцентовПоСделкамНСО(СтруктураШапкиДокумента, Отказ);	
		
	ИначеЕсли СхемаРасчета = "СписаниеПроцентовПоДепозитам" Тогда
		// Списание процентов по депозитам.
		ВыполнитьСписаниеПроцентовПоДепозитам(СтруктураШапкиДокумента, Отказ);	
		
	ИначеЕсли СхемаРасчета = "ЗаполнениеКредитныхРейтинговОбъектовУчета" Тогда
		// Заполнение кредитных рейтингов объектов учета.
		ВыполнитьЗаполнениеКредитныхРейтинговОбъектовУчета(СтруктураШапкиДокумента, Отказ);	
		
	// {/++НФО}	
	ИначеЕсли СхемаРасчета = "КорректировкаСтоимостиНоменклатуры" Тогда
		// КОРРЕКТИРОВКА СТОИМОСТИ НОМЕНКЛАТУРЫ
		КорректировкаСтоимостиНоменклатуры(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли СхемаРасчета = "ЗаполнениеСвязанныхСторонОбъектовУчета" Тогда
		// Заполнение связанных сторон объектов учета.
		ВыполнитьЗаполнениеСвязанныхСторонОбъектовУчета(СтруктураШапкиДокумента, Отказ);	
		
	ИначеЕсли СхемаРасчета = "НачислениеПроцентныхРасходовПоДоговорамАренды" Тогда
		// Распределение косвенных расходов
		ВыполнитьНачислениеПроцентныхРасходовПоДоговорамАренды(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СхемаРасчета = "ПризнаниеВНУАрендныхПлатежей" Тогда 
		// Признание в НУ лизинговых платежей
		ВыполнитьПризнаниеВНУАрендныхПлатежей(СтруктураШапкиДокумента, Отказ, Ошибки);
		
	ИначеЕсли СхемаРасчета = "ВвестиТиповуюОперацию" Тогда	
		
		ВыполнитьВводТиповойОперации(СтруктураШапкиДокумента, Отказ);	
		
//	#Вставка
	ИначеЕсли СхемаРасчета = "ПризнаниеВБУАрендныхПлатежей" Тогда
		pcru_ВыполнитьПризнаниеВБУАрендныхПлатежей(СтруктураШапкиДокумента, Отказ, Ошибки);
//	#КонецВставки
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Эта операция в данный момент не поддерживается'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
//	#Вставка
	Если СхемаРасчета = "ПризнаниеВБУАрендныхПлатежей" ИЛИ СхемаРасчета = "НачислениеПроцентныхРасходовПоДоговорамАренды" Тогда
		pcru_ex_ПереаспределитьДвижения(СтруктураШапкиДокумента.Дата, Отказ);
	КонецЕсли;
//	#КонецВставки
	
	Если Не Отказ Тогда
		Движения.БНФОБанковский.Записывать = Ложь;
		Попытка
			Движения.БНФОБанковский.Записать(Ложь);
		Исключение
			Отказ = Истина;         		
			
			МассивОшибок = ПолучитьСообщенияПользователю(Истина);
			Для каждого Ошибка Из МассивОшибок Цикл				
				ТекстОшибки = Ошибка.Текст;            				
				ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки, ТекстОшибки, "e1cib/list/Документ.БНФОРегламентнаяОперация");			 				
				Ошибка.Сообщить();
			КонецЦикла;      		
			
		КонецПопытки;
	КонецЕсли;


КонецПроцедуры

Процедура pcru_ВыполнитьПризнаниеВБУАрендныхПлатежей(СтруктураШапкиДокумента, Отказ, Ошибки)
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ПараметрыПроведения = Документы.БНФОРегламентнаяОперация.pcru_ПодготовитьПараметрыПризнаниеВБУАрендныхПлатежей(СтруктураШапкиДокумента, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ		
	pcru_СформироватьДвиженияПризнаниеВБУАрендныхПлатежей(
		ПараметрыПроведения.РеквизитыРегламентнойОперации,
		ПараметрыПроведения.ДанныеПризнаниеВБУАрендныхПлатежей, 
		Движения, Отказ);	

КонецПроцедуры

// Процедура - Сформировать движения признание ВНУЛизинговых платежей
//
// Параметры:
//  ТаблицаРеквизиты - 	ТаблицаЗначений -  таблица с реквизитами
//  ТаблицаЛизинговыхПлатежей - ТаблицаЗначений	 -   данные таблицы платежей, см.  Документы.БНФОРегламентнаяОперация.ПолучитьДанныеКомпоновки
//  Движения - КоллекцияДвижений  - коллекция движений документа
//  Отказ - Булево - признак отказа
//
Процедура  pcru_СформироватьДвиженияПризнаниеВБУАрендныхПлатежей(ТаблицаРеквизиты, ТаблицаЛизинговыхПлатежей, Движения, Отказ) Экспорт 
	
	Параметры = pcru_ПодготовитьПараметрыПризнаниеВБУАрендныхПлатежей(ТаблицаЛизинговыхПлатежей);
	
	Если Параметры.ТаблицаЛизинговыхПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = ТаблицаРеквизиты[0];
	
	Для каждого СтрокаТаблицы из Параметры.ТаблицаЛизинговыхПлатежей Цикл
		
		Проводка = Движения.БНФОБанковский.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		Проводка.Сумма       = 0;
		
		// Дт 71802
		
		Проводка.СчетДт = СтрокаТаблицы.СчетУчетаЗатрат;
		Проводка.СчетАналитическогоУчетаДт = СтрокаТаблицы.СчетАналитическогоУчетаЗатрат;
		
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СтатьяЗатрат); 		
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = Проводка.Сумма;
		КонецЕсли;
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт 	= СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		// Кт 60805
		
		Проводка.СчетКт = СтрокаТаблицы.pcru_СчетУчетаРасчетов;
		Проводка.СчетАналитическогоУчетаКт = СтрокаТаблицы.pcru_СчетАналитическогоУчетаРасчетов;
		
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент); 
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТаблицы.Договор); 		
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаТаблицы.ОбъектАренды); 
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);		
				
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт 			= СтрокаТаблицы.ВалютаРасчетов;
			Проводка.ВалютнаяСуммаКт 	= 0;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаПроводкиБУ;
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт 	= СтрокаТаблицы.ПодразделениеРасчетов;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = Проводка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.БНФОБанковский.Записывать = Истина;			

КонецПроцедуры

Функция pcru_ПодготовитьПараметрыПризнаниеВБУАрендныхПлатежей(ТаблицаЛизинговыхПлатежей)

	Параметры = Новый Структура;
	
	// Подготовка таблицы :
	СписокОбязательныхКолонок = ""
	
	+ "Контрагент,"                  		// <СправочникСсылка.Контрагенты>
	+ "Договор,"             				// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "СтатьяЗатрат,"  						//  <СправочникСсылка.ПрочиеДоходыРасходы>
	+ "ВалютаРасчетов,"                 	// <СправочникСсылка.Вылюты>
	+ "Подразделение,"         				// <СправочникСсылка.ПодразделенияОрганизаций>
	+ "ПодразделениеРасчетов,"         		// <СправочникСсылка.ПодразделенияОрганизаций>
	+ "СчетУчетаЗатрат,"               		// <ПланСчетовСсылка.БНФОБанковский>
	+ "СчетАналитическогоУчетаЗатрат,"		// <СправочникСсылка.БНФОСчетаАналитическогоУчета>
	+ "СчетУчетаРасчетов,"              	// <ПланСчетовСсылка.БНФОБанковский>
	+ "СчетАналитическогоУчетаРасчетов,"	// <СправочникСсылка.БНФОСчетаАналитическогоУчета>
	+ "pcru_СчетУчетаРасчетов,"              	// <ПланСчетовСсылка.БНФОБанковский>
	+ "pcru_СчетАналитическогоУчетаРасчетов,"	// <СправочникСсылка.БНФОСчетаАналитическогоУчета>
	+ "ОбъектАренды,"
	+ "СуммаПроводкиБУ,"           			// <Число(15,2)>  	
	+ "Содержание"        					// <Строка> 
	;
	Параметры.Вставить("ТаблицаЛизинговыхПлатежей", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаЛизинговыхПлатежей, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура pcru_ex_ПереаспределитьДвижения(Период, Отказ)
	
	Если Движения.БНФОБанковский.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.Ссылка КАК Ссылка,
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.Подразделение КАК Подразделение,
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.ProcessCode КАК ProcessCode,
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.ТипЗатрат КАК ТипЗатрат,
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.Процент КАК Процент,
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.БратьОстаток КАК БратьОстаток
	|ИЗ
	|	РегистрСведений.pcru_ex_РаспределениеСуммПоФинансовойАренде.СрезПоследних(&Период, ) КАК pcru_ex_РаспределениеСуммПоФинансовойАрендеСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.pcru_ex_СпособыРаспределенияСуммПоФинансовойАренде.Список КАК pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок
	|		ПО (pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.Ссылка = pcru_ex_РаспределениеСуммПоФинансовойАрендеСрезПоследних.СпособРаспределения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.ТипЗатрат,
	|	pcru_ex_СпособыРаспределенияСуммПоФинансовойАрендеСписок.БратьОстаток";

	Запрос.УстановитьПараметр("Период", Период);
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТЗТипыЗатрат = ТЗ.Скопировать();
	ТЗТипыЗатрат.Свернуть("ТипЗатрат");
	ТЗТипыЗатрат.Сортировать("ТипЗатрат");
	СуммаПроводки = Движения.БНФОБанковский.Итог("Сумма");
	
	ТаблицаИзмененыхПроводок = Движения.БНФОБанковский.Выгрузить().СкопироватьКолонки();
	
	ОстаточнаяСумма = СуммаПроводки / 2;
	
	Для Каждого Проводка Из Движения.БНФОБанковский.Выгрузить() Цикл
		Для Каждого СтрокаТипЗатрат Из ТЗТипыЗатрат Цикл
			МассивПроводок = Тз.НайтиСтроки(Новый Структура("ТипЗатрат", СтрокаТипЗатрат.ТипЗатрат));
			Для Каждого Строка Из МассивПроводок Цикл
				НоваяПроводка = ТаблицаИзмененыхПроводок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка,,"Сумма,СуммаНУДт,СуммаНУКт,СуммаПРДт,СуммаПРКт,СуммаВРДт,СуммаВРКт");
				
				НоваяПроводка.СубконтоДт2 = Строка.ProcessCode;
				НоваяПроводка.СубконтоДт3 = СтрокаТипЗатрат.ТипЗатрат;
				
				Если НЕ Строка.БратьОстаток Тогда
					НоваяПроводка.Сумма = СуммаПроводки / 2 / 100 * Строка.Процент;
					ОстаточнаяСумма = ОстаточнаяСумма - НоваяПроводка.Сумма;
				Иначе
					Если ОстаточнаяСумма <= 0 Тогда
						НоваяПроводка.Сумма = СуммаПроводки - СуммаПроводки / 2;
					Иначе
						НоваяПроводка.Сумма = ОстаточнаяСумма;
						ОстаточнаяСумма =  ОстаточнаяСумма - НоваяПроводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
				СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяПроводка.СчетДт);
				Если СвойстваСчетаДт.НалоговыйУчет Тогда					
					ЭтоНеПринимаемыйРасходНУ = НалоговыйУчет.ЭтоНепринимаемыйРасходНУ(НоваяПроводка.СубконтоДт1, НоваяПроводка.СубконтоДт2, НоваяПроводка.СубконтоДт3);
					Если ЭтоНеПринимаемыйРасходНУ Тогда
						НоваяПроводка.СуммаПРДт = НоваяПроводка.Сумма;
					Иначе
						НоваяПроводка.СуммаНУДт = НоваяПроводка.Сумма;
					КонецЕсли;
				КонецЕсли;
				
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					НоваяПроводка.ПодразделениеДт = Строка.Подразделение;
				КонецЕсли;

				СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НоваяПроводка.СчетКт);
				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					ЭтоНеПринимаемыйРасходНУ = НалоговыйУчет.ЭтоНепринимаемыйРасходНУ(НоваяПроводка.СубконтоКт1, НоваяПроводка.СубконтоКт2, НоваяПроводка.СубконтоКт3);
					Если ЭтоНеПринимаемыйРасходНУ Тогда
						НоваяПроводка.СуммаПРКт = НоваяПроводка.Сумма;
					Иначе
						НоваяПроводка.СуммаНУКт = НоваяПроводка.Сумма;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Движения.БНФОБанковский.Очистить();
	Для Каждого Строка Из ТаблицаИзмененыхПроводок Цикл
		Проводка = Движения.БНФОБанковский.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Строка);
		
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Строка.СубконтоДт1);
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Строка.СубконтоДт2);
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, Строка.СубконтоДт3);
		
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Строка.СубконтоКт1);
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Строка.СубконтоКт2);
		БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", Строка.СубконтоКт3);
	КонецЦикла;

КонецПроцедуры

	
