
//&Вместо("ЗаполнитьПоДокументуОснованию")
Процедура pcru_ex_ЗаполнитьПоДокументуОснованию(Основание, ВидОперацииЗаполнения)
	//
	//ВалютаРегламентированногоУчета = Справочники.Валюты.НайтиПоКоду("643");
	//
	//Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) <> Тип("Структура") Тогда
	//	ДокументСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(Основание, Ложь);
	//
	//	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
	//		И НЕ Документы.ОтчетКомиссионераОПродажах.ДокументСозданПоПравиламПостановления914(Основание) Тогда
	//		
	//		ЭтотОбъект.Организация = Основание.Организация;
	//		ТекстСообщения = 
	//			НСтр("ru='В отчете комиссионера указан покупатель, отличный от комиссионера. 
	//				|В этом случае в качестве основания следует указывать счет-фактуру покупателя!'");
	//		ВызватьИсключение ТекстСообщения;
	//		
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ЭтотОбъект.Организация = Основание.Организация;
	//ЭтотОбъект.ДокументРеализации = Основание;
	//ЗаполнитьСвойстваШапки();
	//Документы.КорректировкаРеализации.ЗаполнитьПоДокументу(ЭтотОбъект);
	//ЭтотОбъект.КорректироватьБУиНУ = Истина;//Документ.ДоступнаКорректировкаБУиНУ(ЭтотОбъект.ДокументРеализации);
	//ЭтотОбъект.КорректироватьНДС = Истина;
	//
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
	//	ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	//	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Грузоотправитель, Грузополучатель, ОтпускПроизвел, СопроводительныеДокументы");
	//	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов);
	//КонецЕсли;
	//
	//ПараметрыИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
	//	?(ВидОперацииЗаполнения <> Неопределено, ВидОперацииЗаполнения, ВидОперации), ДокументРеализации, ИсправляемыйДокументРеализации);
	//ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыИсправления);
	//
	//Если КорректироватьБУиНУ Тогда
	//	ДокументРеализацииСсылка = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	//	
	//	РеквизитыДокументаРеализации = Неопределено;
	//	Если ЗначениеЗаполнено(ДокументРеализацииСсылка) Тогда
	//		РеквизитыДокументаРеализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРеализацииСсылка, "Дата");
	//	КонецЕсли;
	//	ДатаДокументаРеализации	= ?(РеквизитыДокументаРеализации <> Неопределено, РеквизитыДокументаРеализации.Дата, '00010101');
	//	
	//	Если ЗначениеЗаполнено(ДокументРеализацииСсылка) 
	//		И Год(ДатаДокументаРеализации) < Год(Дата) Тогда
	//		
	//		Если НЕ ЗначениеЗаполнено(СтатьяПрочихДоходовИРасходов) Тогда
	//			СтатьяПрочихДоходовИРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ИсправительныеЗаписиПоОперациямПрошлыхЛет");
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура pcru_ex_ОбработкаПроведения(Отказ, РежимПроведения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БНФОДоговорыКредитовИДепозитов.Номер КАК Номер,
	|	БНФОДоговорыКредитовИДепозитов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БНФОДоговорыКредитовИДепозитов КАК БНФОДоговорыКредитовИДепозитов
	|ГДЕ
	|	БНФОДоговорыКредитовИДепозитов.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент",Контрагент );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Ндог = 	Выборка.Номер;
	КонецЦикла;
	Для каждого Проводка Из  Движения.БНФОБанковский Цикл
		Если Лев(Проводка.СчетДт.Код,1) = "7" Тогда
			Если ЗначениеЗаполнено(Ндог)  Тогда
				Нск =  1;
				Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
						ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(Ндог);
						Если ДатаВыплаты <> Неопределено Тогда
							Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
								БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092")); 
							Иначе
								БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093")); 
							КонецЕсли;
						КонецЕсли; 
					КонецЕсли;
					Нск = Нск + 1;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		Если Лев(Проводка.СчетКт.Код,1) = "7" Тогда
			Если ЗначениеЗаполнено(Ндог)  Тогда
				Нск =  1;
				Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
						ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(Ндог);
						Если ДатаВыплаты <> Неопределено Тогда
							Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
								БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092")); 
							Иначе
								БНФОБухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093")); 
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Нск = Нск + 1;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	Движения.БНФОБанковский.Записывать = Истина;
	Движения.Записать();
	
КонецПроцедуры

//&Перед("ОбработкаПроведения")
//Процедура pcru_ex_ОбработкаПроведения(Отказ, РежимПроведения)
//	ЭтоЗагрузкаИзНав = Ложь;
//	Если ДополнительныеСвойства.Свойство("ЭтоЗагрузкаИзНав",ЭтоЗагрузкаИзНав) Тогда
//		ЭтоЗагрузкаИзНавЕсли = ДополнительныеСвойства.ЭтоЗагрузкаИзНав;
//	КонецЕсли; 
//	Если Не ЭтоЗагрузкаИзНавЕсли Тогда
//		Запрос = Новый Запрос;
//		Запрос.Текст = "ВЫБРАТЬ
//		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Ссылка КАК Ссылка
//		|ИЗ
//		|	Справочник.pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий КАК pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий
//		|ГДЕ
//		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Результат ПОДОБНО ""Задание Выполняется..""";
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Отказ = Истина;
//			Сообщить("Идет загрузка из НАВ проведение ");
//			Возврат;
//		КонецЕсли;  
//	КонецЕсли; 	
//КонецПроцедуры
