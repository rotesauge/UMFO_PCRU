//&Вместо("РаспознатьВыписки")
//Функция Расш_РаспознатьВыписки(Выписки, УчастникиОпераций, Настройки) Экспорт
//	
//	РаспознанныеВыписки = Новый Соответствие; // Ключ - идентификатор выписки; Значение - см. НовыйРаспознаннаяВыписка()
//	
//	ПравилаОпределенияХозяйственныхОпераций = НовыйПравилаОпределенияХозяйственныхОпераций();
//	ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(ПравилаОпределенияХозяйственныхОпераций);
//	
//	Для Каждого КлючИЗначение Из Выписки Цикл
//		
//		Выписка = КлючИЗначение.Значение;
//		
//		РаспознаннаяВыписка = НовыйРаспознаннаяВыписка(Выписка.Идентификатор, УчастникиОпераций);
//		РаспознанныеВыписки.Вставить(Выписка.Идентификатор, РаспознаннаяВыписка);
//		
//		Если Не БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
//		НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
//		
//		// Определим хозяйственные операции
//		ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
//		ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
//		ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций             = УчастникиОпераций;
//		
//		Для Каждого Операция Из Выписка.Операции Цикл
//			
//			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
//			
//			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
//				Или ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
//			
//			РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация(
//			ПараметрыОпределенияХозяйственнойОперации,
//			ПравилаОпределенияХозяйственныхОпераций);
//			//++Севрюгин
//			Попытка
//				Если Операция.ПлательщикРеквизиты.КПП <> "" Тогда
////					ПодготовитьПредупрежденияПриВыбореСсылок(РаспознаннаяОперация, ПараметрыОпределенияХозяйственнойОперации);
//				Иначе
//					Операция.ПлательщикРеквизиты.КПП = "000000000";
//					Операция.РеквизитыПлатежаВБюджет.ПлательщикКПП = "000000000";
//				КонецЕсли;
//			Исключение
////				ПодготовитьПредупрежденияПриВыбореСсылок(РаспознаннаяОперация, ПараметрыОпределенияХозяйственнойОперации);
//			КонецПопытки; 
//			//--
//		КонецЦикла;
//		НайтиСчетНаОплатуПокупателю(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
//	КонецЦикла;
//	
//	Возврат РаспознанныеВыписки;
//	
//КонецФункции


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьМассивСлов(Строкадлязаменны)
	Масс = новый Массив;
	тмп  = СтрЗаменить(Строкадлязаменны," ",Символы.ПС);
	тмп  = СтрЗаменить(тмп,":",Символы.ПС);
	тмп  = СтрЗаменить(тмп,".",Символы.ПС);
	тмп  = СтрЗаменить(тмп,",",Символы.ПС);
	тмп  = СтрЗаменить(тмп,";",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"0",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"1",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"2",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"3",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"4",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"5",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"6",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"7",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"8",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"9",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"(",Символы.ПС);
	тмп  = СтрЗаменить(тмп,")",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"/",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"?",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"!",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"@",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"#",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"%",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"^",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"&",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"*",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"№",Символы.ПС);
	Для Счетчик = 1 По СтрЧислоСтрок(тмп) Цикл
		ТекСтрока = СтрПолучитьСтроку(тмп, Счетчик);
		Если СтрДлина(ТекСтрока) > 1  Тогда
			Масс.Добавить( ТекСтрока);
		КонецЕсли; 
	КонецЦикла;
	Возврат Масс;
КонецФункции // ПолучитьМассивСлов()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция НайтиФиоВСтроке(СтрокаСФио)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтрЧислоВхождений(СтрокаСФио,Выборка.Наименование) > 0  Тогда
			Возврат Выборка.ссылка;
		КонецЕсли; 
	КонецЦикла;
КонецФункции // НайтиФиоВСтроке()


&После("РазобратьНазначениеПлатежа")
Процедура pcru_ex_РазобратьНазначениеПлатежа(ДанныеИзБанка)
	
	Для каждого СтрокаТЧ Из ДанныеИзБанка.Документы Цикл
		Если  СтрЧислоВхождений(СтрокаТЧ.НазначениеПлатежа, ВРег("Перевод собственных средств")) > 0
			ИЛИ СтрЧислоВхождений(СтрокаТЧ.НазначениеПлатежа, ВРег("Перевод на другой счет организации")) > 0
			ИЛИ СтрЧислоВхождений(СтрокаТЧ.НазначениеПлатежа, ВРег("Перевод средств на основании")) > 0 Тогда
			продолжить;
		КонецЕсли;	
		Если СтрокаТЧ.ПлательщикИНН = "" Тогда
			Ссылка_на_контрагента = Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЧ.ПлательщикРеквизиты.Наименование);
			Если ЗначениеЗаполнено(Ссылка_на_контрагента) Тогда
				СтрокаТЧ.ПлательщикИНН = Ссылка_на_контрагента.ИНН;
			Иначе 
				Ссылка_на_контрагента = НайтиФиоВСтроке(СтрокаТЧ.НазначениеПлатежа);
				Если ЗначениеЗаполнено(Ссылка_на_контрагента) Тогда
					НачатьТранзакцию();
					Попытка
						СтрокаТЧ.ПлательщикИНН = Ссылка_на_контрагента.ИНН;	
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
					КонецПопытки; 				
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

//&Вместо("ЗаписатьДокумент")
Функция pcru_ex_ЗаписатьДокумент(Документ, Проводить)
	
	Попытка
		Если не Документ.pcru_ex_НеОчищатьРаспределениеПриПроведении Тогда
			Документ.пкру_РаспределениеЗатрат.Очистить();
		КонецЕсли; 
	Исключение
		
	КонецПопытки;
	
	Попытка
		Если Документ.ДокументОснование <> Неопределено Тогда
			Документ.pcru_ex_СтатьяДоходовРасходов  = Документ.ДокументОснование.pcru_ex_СтатьяДоходовРасходов;
			//Документ.пкру_РаспределениеЗатрат.Очистить();
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				Для каждого СтрокаТЧ Из Документ.ДокументОснование.пкру_РаспределениеЗатрат Цикл
					СтрокаРЗ =  Документ.пкру_РаспределениеЗатрат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРЗ,СтрокаТЧ);
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли; 
	Исключение
	КонецПопытки; 
	
	//Документ.ПодразделениеОрганизации  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	//Документ.ПодразделениеДт  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	//
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810400000000944" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000500000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810603300479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000100000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810703200479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000200000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810803100479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000300000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810903000479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000400000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702978803000479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050197800000000000100000");
		КонецЕсли;
		
		
		//Если СтрЧислоВхождений(Документ.НазначениеПлатежа,"@@") > 0 Тогда
		//	Возврат;
		//КонецЕсли;  
		
		
		НазначениеПлатежаДляПоиска = ВРег(СокрЛП(Документ.НазначениеПлатежа));
		Пока Истина Цикл
			КоличествоДвухПробелов = СтрЧислоВхождений(НазначениеПлатежаДляПоиска, "  ");
			НазначениеПлатежаДляПоиска = СтрЗаменить(НазначениеПлатежаДляПоиска, "  ", " ");
			Если КоличествоДвухПробелов = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//	
		//	Оплата по счетам № SPOS/18/04981 от 22.08.2018г., SPOS/18/04982 от 22.08.2018г.за тонер. Сумма 17163-00 В т.ч. НДС  (18%) 2618-08
		//	Оплата по счету № 42 от 20.08.2018г. аренда за сентярь 2018г. Сумма 30000-00 Без налога (НДС)
		//	Оплата аренды за сентябрь 2018г. Сумма 30500-00 Без налога (НДС)
		//	Оплата по реестру № 38 от 29.08.2018г. за канцелярию Сумма 125490-69 В т.ч. НДС  (18%) 19142-65
		//	Оплата по договору 17-1.3/3051 за услуги по договору Бокс-сервис Сумма 1820-00 В т.ч. НДС  (18%) 277-63
		//	плата по счету № 18433 от 02.08.2018 г.  доплата за услуги по договору 01115/ПФ-П от 01.11.2015г. за июль 2018г. Сумма 116743-32 В т.ч. НДС  (18%) 17808-30
		//Оплата за телематические услуги связи по счету 3326 от 16.08.2018г. по договору IIS-1948A/2017 от 10.05.2017г. за август 2018г. Сумма 5000-00 В т.ч. НДС  (18%) 762-71	
		//++ Севрюгин А.А  Ticket#1021198
		
		Если  ЗначениеЗаполнено(Документ.Контрагент) Тогда
			Если Документ.СчетОрганизации.НомерСчета = "40702810903000479930" Тогда
				Если (СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата по счетам")) > 0
					ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата по счету")) > 0 
					ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата аренды")) > 0 
					ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата аренды")) > 0 
					ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата по реестру")) > 0 
					ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата по договору")) > 0
					ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата за")) > 0 
					ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("плата по счету")) > 0)
					И СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("алимент")) = 0
					И СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("ГПХ")) = 0 Тогда
					Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
					Документ.ПодразделениеДт = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
					Документ.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
					Если Документ.РасшифровкаПлатежа.Количество()  > 0 Тогда
						Стр = Документ.РасшифровкаПлатежа[0];
					Иначе 
						Стр =  Документ.РасшифровкаПлатежа.Добавить();
					КонецЕсли;  
					_60311 = pcru_УМФО.ПолучитьСчетПоАналитике("60311",Документ.ДоговорКонтрагента);
					_60312 = pcru_УМФО.ПолучитьСчетПоАналитике("60312",Документ.ДоговорКонтрагента);
					
					Если _60311.Пустая() Тогда
						_60311 = pcru_УМФО.ПолучитьСчетПоАналитике("60311",Документ.Контрагент);
						_60312 = pcru_УМФО.ПолучитьСчетПоАналитике("60312",Документ.Контрагент);
						Если _60311.Пустая() Тогда					
							Если ЗначениеЗаполнено(Документ.ДоговорКонтрагента)  Тогда
								pcru_УМФО.Открыть60311(Документ.Контрагент,Документ.ДоговорКонтрагента,"121 MKT expenses");
							Иначе
								Запрос = Новый Запрос;
								Запрос.Текст = "ВЫБРАТЬ
								|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
								|ИЗ
								|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
								|ГДЕ
								|	ДоговорыКонтрагентов.Владелец = &Владелец";
								Запрос.УстановитьПараметр("Владелец",Документ.Контрагент );
								Выборка = Запрос.Выполнить().Выбрать();
								Если Выборка.Следующий() Тогда
									ДоговорКонтрагента1  =  Выборка.Ссылка;
								Иначе 
									ДогОб = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
									Если ТипЗнч(Документ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
										ДогОб.Владелец = Документ.Контрагент.АЭ_Контрагент;	 
									Иначе	 	
										ДогОб.Владелец = Документ.Контрагент;	 
									КонецЕсли;  						
									
									ДогОб.Наименование = "ОСновной";
									ДогОб.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
									ДогОб.Записать();
									ДоговорКонтрагента1  =  ДогОб.Ссылка;
								КонецЕсли;
								pcru_УМФО.Открыть60311(Документ.Контрагент,ДоговорКонтрагента1,"121 MKT expenses");
								Документ.ДоговорКонтрагента =  ДоговорКонтрагента1;
							КонецЕсли; 
							
							_60311 = pcru_УМФО.ПолучитьСчетПоАналитике("60311",Документ.ДоговорКонтрагента);
							_60312 = pcru_УМФО.ПолучитьСчетПоАналитике("60312",Документ.ДоговорКонтрагента);
						КонецЕсли;  
					КонецЕсли;
					Стр.СчетУчетаРасчетовСКонтрагентом  =  _60312;
					Стр.СчетУчетаРасчетовПоАвансам  =  _60311;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли; 
		
		
		
		
				
		//++ Севрюгин А.А  30.11.2022 10:53:09   DEV1C-537
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия за исходящие платежи в рублях, переданные по системе Банк-Клиент")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Филиал ""Северная столица"" АО ""Райффайзенбанк"" в г. Санкт-Петербурге");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04990 Рез-ЮЛ_прочие расчеты");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281000531030000114011");
			
			
			//Прочие доходы и расходы: 14011 Расходы на услуги по переводам денежных средств, включая услуги платежных и расчетных систем
			//Счет дебета: 7170281000531030000114011
			//Process code: 9905-Support processes
			//Тип затрат: Тип затрат 1
			
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСтатьяДоходовИРасходов) Тогда
				Документ.БНФОСтатьяДоходовИРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы на услуги по переводам денежных средств, включая услуги платежных и расчетных систем");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт1) Тогда
				Документ.БНФОСубконтоДт1  = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы на услуги по переводам денежных средств, включая услуги платежных и расчетных систем");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт2) Тогда
				Документ.БНФОСубконтоДт2  = Справочники.БНФОСубконто.НайтиПоКоду("000000053");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт3) Тогда
				Документ.БНФОСубконтоДт3  = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 1");
				
			КонецЕсли;
			
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы по расчетному и кассовому обслуживанию");			
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента; 
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 1");
				
			КонецЕсли;
		КонецЕсли;
		//-- Севрюгин А.А  30.11.2022 10:53:29 Администратор
		
		
		//++ Севрюгин А.А  30.11.2022 3:34:47   DEV1C-538
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("210721/22/77003-ИП")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04910 Рез-ФЛ_взыскание по судебным решениям");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("УФК по г.Москве (Преображенский РОСП ГУФССП России по Москве, л/с 05731A20460)");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");			
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				
			КонецЕсли;
		КонецЕсли;
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("49574/20/77003-ИП")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04910 Рез-ФЛ_взыскание по судебным решениям");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("УФК по г.Москве (Преображенский РОСП ГУФССП России по Москве, л/с 05731A20460)");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");			
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				
			КонецЕсли;
		КонецЕсли;
		
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("8445/20/77003-ИП")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04910 Рез-ФЛ_взыскание по судебным решениям");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("УФК по г.Москве (Преображенский РОСП ГУФССП России по Москве, л/с 05731A20460)");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");			
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента; 
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				
			КонецЕсли;
		КонецЕсли;     
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("8445/20/77003-ИП")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04910 Рез-ФЛ_взыскание по судебным решениям");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("УФК по г.Москве (Преображенский РОСП ГУФССП России по Москве, л/с 05731A20460)");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");		
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				
			КонецЕсли;
		КонецЕсли;
		
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("70340/22/77049-ИП")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04910 Рез-ФЛ_взыскание по судебным решениям");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("УФК по г. Москве (МОСП по ВАП № 2 ГУФССП России по г. Москве л/с 0573D00160)");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента; 
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				
			КонецЕсли;
		КонецЕсли;
		
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("27192/19/77049-ИП")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032381000101005340500000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04910 Рез-ФЛ_взыскание по судебным решениям");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Авдюхина Наталья Николаевна");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");	
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				
			КонецЕсли;
		КонецЕсли;
		
		
		//-- Севрюгин А.А  30.11.2022 3:35:06 Администратор
		
		ЭтоВО = Ложь;
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("{VO70060}")) > 0  Тогда
			ЭтоВО = Истина;
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000005");
			Документ.pcru_ex_СтатьяДоходовРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("WINIARCZYK PIOTR PAWEL");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000023");//Наименованию("70060 Расчеты, связанные с выплатой резидентом нерезиденту заработной платы и других видов оплаты тр");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
	         	Документ.пкру_РаспределениеЗатрат.Очистить();
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт; 
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		//-- Севрюгин А.А
		//	назанчение платежа	кост центр	статья	тип затрат	сумма
		//Перечисление заработной платы	2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА	01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором	Тип затрат 2	сумма списания
		//Оплата Отпускные на основании 				
		//Перечисление пособия				
		//Оплата Заработная плата на основании 				
		//Перечисление отпускных				
		//Перечисление по договору ГПХ				
		//Перечисление пособия по уходу за ребенком				
		//Налог на доходы физических лиц	если сверху статья доходов расходов 01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором	то как зп (выше)		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление з/п")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление отпускных")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление заработной платы")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление аванса")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление премии")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Компенсация транспорта")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Расчет при увольнении")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление пособия")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление по больничному листу")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата Отпускные на основании ПЛАТЕЖНАЯ ВЕДОМОСТЬ")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата Заработная плата на основании ПЛАТЕЖНАЯ ВЕДОМОСТЬ")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата Больничные на основании ПЛАТЕЖНАЯ ВЕДОМОСТЬ")) > 0 
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата Премия на основании ПЛАТЕЖНАЯ ВЕДОМОСТЬ")) > 0 
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата Аванс на основании ПЛАТЕЖНАЯ ВЕДОМОСТЬ")) > 0  Тогда
			Если не ЭтоВО Тогда
				
				Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
				Документ.РасшифровкаПлатежа.Очистить();
				Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000005");
				Документ.ПодразделениеОрганизации       = Документ.ПодразделениеДт;
				Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04850 Рез-ФЛ_оплата труда");
				Документ.pcru_ex_СтатьяДоходовРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");
				//
				//Документ.пкру_РаспределениеЗатрат.Очистить();
				Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
					СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
					СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
					СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");
					СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
					СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
				КонецЕсли; 
				
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		//++ Севрюгин А.А  01.09.2022 13:35:14   SD-24187
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРЕГ("Перечисление")) > 0 И СтрЧислоВхождений(НазначениеПлатежаДляПоиска,ВРЕГ("больничного")) > 0  Тогда
			//  6030681001000000000000000
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.pcru_ex_СтатьяДоходовРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.03.00 HR DEPARTMENT/ОТДЕЛ ПЕРСОНАЛА");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04850 Рез-ФЛ_оплата труда");
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000400000");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				Документ.пкру_РаспределениеЗатрат.Очистить();
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
			КонецЕсли;
			Результат = ЗаписатьДокумент(Документ, Проводить);
			Возврат Результат;
		КонецЕсли;
		
		//-- Севрюгин А.А  01.09.2022 13:35:45 Администратор
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление агентского вознаграждения")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Выплата агентского вознаграждения")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата по договору ГПХ")) > 0 
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("по договору ГПХ")) > 0 Тогда
			Документ.ВидОперации	=  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000028");
			Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перечисление агентского вознаграждения")) > 0
				ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Выплата агентского вознаграждения")) > 0 тогда
				Документ.pcru_ex_СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("71421  Comission CA-own business-new production-first part/Комиссия за выдачу займа");
				//Документ.пкру_РаспределениеЗатрат.Очистить();
				Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
					СтрокаРаспределения                      = Документ.пкру_РаспределениеЗатрат.Добавить();
					СтрокаРаспределения.пкру_CostCentr       = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00-000005");
					Документ.ПодразделениеДт               = СтрокаРаспределения.пкру_CostCentr;
					Документ.ПодразделениеОрганизации      = СтрокаРаспределения.пкру_CostCentr;
					СтрокаРаспределения.пкру_СтатьяРасходов  = Документ.pcru_ex_СтатьяДоходовРасходов;
					СтрокаРаспределения.ТипЗатрат            = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
					СтрокаРаспределения.Сумма                = Документ.СуммаДокумента;
				КонецЕсли;
			Иначе	
				Документ.pcru_ex_СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");
				//Документ.пкру_РаспределениеЗатрат.Очистить();
				Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
					СтрокаРаспределения                      = Документ.пкру_РаспределениеЗатрат.Добавить();
					СтрокаРаспределения.пкру_CostCentr       = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000005");
					Документ.ПодразделениеДт               = СтрокаРаспределения.пкру_CostCentr;
					Документ.ПодразделениеОрганизации      = СтрокаРаспределения.пкру_CostCentr;
					СтрокаРаспределения.пкру_СтатьяРасходов  = Документ.pcru_ex_СтатьяДоходовРасходов;
					СтрокаРаспределения.ТипЗатрат            = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
					СтрокаРаспределения.Сумма                = Документ.СуммаДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Налог на доходы физических лиц")) > 0 Тогда
			Документ.ВидОперации	=  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ
			|	СписаниеСРасчетногоСчета.Ссылка КАК СписаниеСРасчетногоСчета,
			|	СписаниеСРасчетногоСчета.Контрагент КАК Контрагент,
			|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
			|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
			|  IsNull(БНФОСчетаАналитическогоУчета.Ссылка,Значение(Справочник.БНФОСчетаАналитическогоУчета.ПустаяСсылка)) КАК СчетАналитическогоУчета
			|	ИЗ
			|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций.ДополнительныеРеквизиты КАК ПодразделенияОрганизацийДополнительныеРеквизиты
			|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БНФОСчетаАналитическогоУчета КАК БНФОСчетаАналитическогоУчета
			|					ПО (БНФОСчетаАналитическогоУчета.Код = ПодразделенияОрганизацийДополнительныеРеквизиты.Значение.Наименование)
			|				ПО (ПодразделенияОрганизаций.Ссылка = ПодразделенияОрганизацийДополнительныеРеквизиты.Ссылка)
			|			ПО (ПОДСТРОКА(ПодразделенияОрганизаций.Наименование, 1, 7) = ПОДСТРОКА(РегистрацииВНалоговомОргане.НаименованиеОбособленногоПодразделения, 1, 7))
			|		ПО (РегистрацииВНалоговомОргане.КПП = СписаниеСРасчетногоСчета.Контрагент.КПП)
			|ГДЕ
			|	СписаниеСРасчетногоСчета.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка",Документ.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если ЗначениеЗаполнено(Выборка.СчетАналитическогоУчета)  Тогда
					Документ.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетАналитическогоУчета;
				Иначе                                                                                                 //6030281000100000003800000
					Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030281000100000003800000");
					Документ.БНФОСубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				КонецЕсли; 
				//
				Если ЗначениеЗаполнено(Выборка.РегистрацияВНалоговомОргане)  Тогда
					Документ.БНФОСубконтоДт2 = Выборка.РегистрацияВНалоговомОргане;
				Иначе 
					Документ.БНФОСубконтоДт2 = Справочники.РегистрацииВНалоговомОргане.НайтиПоНаименованию("ФНС 7810 КПП 781001001 (20000)");
				КонецЕсли;
				//
				Если ЗначениеЗаполнено(Выборка.Подразделение)  Тогда
					Документ.ПодразделениеОрганизации = Выборка.Подразделение;
					Документ.ПодразделениеДт = Выборка.Подразделение;
				Иначе 
					Документ.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					Документ.ПодразделениеДт = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				КонецЕсли; 
			Иначе
				//			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030281000100000003800000");
				Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030281000100000003800000");
				Документ.БНФОСубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
				Документ.БНФОСубконтоДт2 = Справочники.РегистрацииВНалоговомОргане.НайтиПоНаименованию("ФНС 7810 КПП 781001001 (20000)");
				Документ.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				Документ.ПодразделениеДт = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			
			Если Документ.pcru_ex_СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором") Тогда
				Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
					СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
					СтрокаРаспределения.пкру_CostCentr      = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000005"); 
					СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01111 Basic wage/ Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором");
					СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
					СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		//
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия за исходящий платеж")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия за исходящие платежи")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия третьих банков за исходящий платеж")) > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Документ.СчетУчетаРасчетовСКонтрагентом) Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281000531030000114011");
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000039");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСтатьяДоходовИРасходов) Тогда
				Документ.БНФОСтатьяДоходовИРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт1) Тогда
				Документ.БНФОСубконтоДт1  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт2) Тогда
				Документ.БНФОСубконтоДт2  = Справочники.БНФОСубконто.НайтиПоКоду("000000053");
			КонецЕсли;
			Если Документ.СчетОрганизации.НомерСчета = "40702810603300479930" Тогда
				Документ.ПодразделениеДт  = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");
				Документ.БНФОСубконтоДт2  = Справочники.БНФОСубконто.НайтиПоКоду("000000052");
				//
				Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
					СтрокаРаспределения = Документ.пкру_РаспределениеЗатрат.Добавить();
					СтрокаРаспределения.пкру_CostCentr = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");
					СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы по расчетному и кассовому обслуживанию");
					СтрокаРаспределения.ТипЗатрат =  Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
					СтрокаРаспределения.Сумма = Документ.СуммаДокумента;
				КонецЕсли;
			КонецЕсли;
			Если Документ.СчетОрганизации.НомерСчета = "40702810903000479930" Тогда
				Документ.ПодразделениеДт  = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
				//Если не Документ.pcru_ex_НеОчищатьРаспределениеПриПроведении Тогда
				Попытка
					Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
						СтрокаРаспределения = Документ.пкру_РаспределениеЗатрат.Добавить();
						СтрокаРаспределения.пкру_CostCentr = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");
						СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы по расчетному и кассовому обслуживанию");
						СтрокаРаспределения.ТипЗатрат =  Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
						СтрокаРаспределения.Сумма = Документ.СуммаДокумента/2;
						Документ.ПодразделениеДт  = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
						СтрокаРаспределения = Документ.пкру_РаспределениеЗатрат.Добавить();
						СтрокаРаспределения.пкру_CostCentr = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");
						СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы по расчетному и кассовому обслуживанию");
						СтрокаРаспределения.ТипЗатрат =  Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 1");
						СтрокаРаспределения.Сумма = Документ.СуммаДокумента/2;
					КонецЕсли;		
				Исключение
					СтрокаРаспределения = Документ.пкру_РаспределениеЗатрат.Добавить();
					СтрокаРаспределения.пкру_CostCentr = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");
					СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы по расчетному и кассовому обслуживанию");
					СтрокаРаспределения.ТипЗатрат =  Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
					СтрокаРаспределения.Сумма = Документ.СуммаДокумента/2;
					Документ.ПодразделениеДт  = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
					СтрокаРаспределения = Документ.пкру_РаспределениеЗатрат.Добавить();
					СтрокаРаспределения.пкру_CostCentr = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000019");
					СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("14011 Расходы по расчетному и кассовому обслуживанию");
					СтрокаРаспределения.ТипЗатрат =  Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 1");
					СтрокаРаспределения.Сумма = Документ.СуммаДокумента/2;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли; 
		
		//++ Севрюгин А.А  30.11.2022 4:02:18   
		//ЭтоКомиссияВО = Ложь;
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия третьих банков за исходящий платеж в валюте")) > 0 или
			СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия за исходящий платеж в валюте")) > 0  Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка;
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Филиал ""Северная столица"" АО ""Райффайзенбанк"" в г. Санкт-Петербурге");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04990 Рез-ЮЛ_прочие расчеты");
			
			
			//Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr      = Документ.ПодразделениеДт;
				
				СтрокаРаспределения.Сумма               = Документ.СуммаДокумента; 
				СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 1");
				
			КонецЕсли;
		КонецЕсли;
		//-- Севрюгин А.А  30.11.2022 4:02:24 Администратор

		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Госпошлина по делам ,рассматриваемым в судах общей юрисдикции")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Госпошлина по делам, рассматриваемым в судах общей юрисдикции")) > 0 Тогда
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031281000000056714000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000030");
			Документ.БНФОСубконтоДт1                = Справочники.Контрагенты.НайтиПоНаименованию("Уплата Госпошлины по судебным делам");
			Документ.ПодразделениеДт                = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000100");
			Документ.pcru_ex_СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01407 Госпошлина");
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01407 Госпошлина");
				СтрокаРаспределения.ТипЗатрат =  Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 1");
				СтрокаРаспределения.Сумма = Документ.СуммаДокумента;
			КонецЕсли; 
		КонецЕсли; 
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия за ведение текущего (расчетного) счета")) > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Документ.СчетУчетаРасчетовСКонтрагентом) Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281000531010000114011");
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000039");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСтатьяДоходовИРасходов) Тогда
				Документ.БНФОСтатьяДоходовИРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт1) Тогда
				Документ.БНФОСубконтоДт1  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт2) Тогда
				Документ.БНФОСубконтоДт2  = Справочники.БНФОСубконто.НайтиПоКоду("000000053");
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия за подготовку копии")) > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Документ.СчетУчетаРасчетовСКонтрагентом) Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281000531020000114011");
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000039");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСтатьяДоходовИРасходов) Тогда
				Документ.БНФОСтатьяДоходовИРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт1) Тогда
				Документ.БНФОСубконтоДт1  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт2) Тогда
				Документ.БНФОСубконтоДт2  = Справочники.БНФОСубконто.НайтиПоКоду("000000045");
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Комиссия за заверение документов")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Возмещение суммы НДС")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Cумма НДС по комиссии")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Ком.за осуществ.вал.контроля")) > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Документ.СчетУчетаРасчетовСКонтрагентом) Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031281000000055814000000");
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000039");
				Документ.ВидОперации	=  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику; 
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСтатьяДоходовИРасходов) Тогда
				Документ.БНФОСтатьяДоходовИРасходов  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт1) Тогда
				Документ.БНФОСубконтоДт1  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000078");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Документ.БНФОСубконтоДт2) Тогда
				Документ.БНФОСубконтоДт2  = Справочники.БНФОСубконто.НайтиПоКоду("000000053");
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Выдача займа по договору процентного займа")) > 0 Тогда
			Документ.ВидОперации =  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту;
			Темп = СтрПолучитьСтроку(СтрЗаменить(Документ.НазначениеПлатежа,"№",символы.ПС),2);
			Если Лев(Темп,1)= " " Тогда
				НомерДоговора	= Сред(Темп,2,10);
			КонецЕсли; 
			Если Лев(Темп,1)= "0" Тогда
				НомерДоговора	= Сред(Темп,1,10);
			КонецЕсли; 
			
			Стр = pcru_CRM.ЗагрузитьКонтрагентаИзНАВ(НомерДоговора);
			Если ТипЗнч(Стр) = Тип("Строка") Тогда
				Проводить = False;
				Результат = ЗаписатьДокумент(Документ, Проводить);
				Возврат Результат;
			КонецЕсли; 
			Организация = Справочники.Организации.НайтиПоКоду("000000001");
			СтранаРегистрации = Справочники.СтраныМира.Россия;
			Родитель = Справочники.Контрагенты.НайтиПоКоду("000000096");
			ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо; 
			
			Если Стр.Контрагент.АЭ_ИндивидуальныйПредприниматель  Тогда
				СчетУчетаРасчетовСКонтрагентом  = Стр._49401_1;
			Иначе
				СчетУчетаРасчетовСКонтрагентом  = Стр._48801_1;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)  Тогда
				НовУслСС  = Стр.УсловиеЗайма;
				НовДогСС  = Стр.ДоговорКонтрагента;
				Документ.Контрагент  = Стр.Контрагент;
				Документ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				
				Документ.РасшифровкаПлатежа.Очистить();
				СтрокаРасшифровки = Документ.РасшифровкаПлатежа.Добавить();
				СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически; 
				СтрокаРасшифровки.СуммаПлатежа = Документ.СуммаДокумента;
				СтрокаРасшифровки.КурсВзаиморасчетов = 1;
				СтрокаРасшифровки.СуммаВзаиморасчетов=  Документ.СуммаДокумента;
				СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
				СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам     = СчетУчетаРасчетовСКонтрагентом;
				СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
				//			СтрокаРасшифровки.РаспределятьРасходыУСН = Ложь;
				СтрокаРасшифровки.ВидПлатежаПоКредитамЗаймам =  Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
				СтрокаРасшифровки.БНФОДоговорКредитаДепозита = НовУслСС;
				Если Стр.Контрагент.АЭ_ИндивидуальныйПредприниматель  Тогда
					Документ.СтатьяДвиженияДенежныхСредств        = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000051");
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000051");
				Иначе
					Документ.СтатьяДвиженияДенежныхСредств        = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Возврат излишне уплаченных средств")) > 0 Тогда		
			Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000000001");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
			Документ.ВидОперации	=  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание; 		
		КонецЕсли; 
		
		Если  СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Возврат излишнее перечисленных денежных средств")) > 0 Тогда		
			Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			Документ.ВидОперации	=  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание; 
		КонецЕсли; 
		
		ЭтоПереводСС = Ложь;
		
		Если  СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перевод собственных средств")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перевод на другой счет организации")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перевод средств на основании")) > 0 Тогда
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000043");
			ЭтоПереводСС = Истина;
			
			//		Документ.СчетУчетаРасчетовСКонтрагентом = pcru_УМФО.ПолучитьСчетПоАналитике("20501",Документ.СчетКонтрагента);
			Документ.ВидОперации	=  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет; 
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810400000000944" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000500000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810603300479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000100000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810703200479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000200000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810803100479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000300000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810903000479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000400000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702978803000479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050197800000000000100000");
			КонецЕсли;
			
			
			
			
		КонецЕсли; 
		
		Если  СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Размещение средств во вклад (депозит)")) > 0  Тогда
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04530 Рез-ЮЛ_депозиты");
			Документ.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.БНФОПеречислениеНаДепозиты;
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БНФОДоговорыКредитовИДепозитов.Номер КАК Номер,
			|	БНФОДоговорыКредитовИДепозитов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БНФОДоговорыКредитовИДепозитов КАК БНФОДоговорыКредитовИДепозитов
			|ГДЕ
			|	БНФОДоговорыКредитовИДепозитов.Контрагент = &Контрагент";
			Запрос.УстановитьПараметр("Контрагент",Документ.Контрагент );
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если  СтрЧислоВхождений(НазначениеПлатежаДляПоиска, Выборка.Номер)>0 Тогда
					Документ.СубконтоДт1                    = Выборка.Ссылка;
					Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04530 Рез-ЮЛ_депозиты");
					Для каждого Стррсш Из Документ.РасшифровкаПлатежа Цикл
						_20601                                    = pcru_УМФО.ПолучитьСчетПоАналитике("20601",Выборка.Ссылка);
						Если Не ЗначениеЗаполнено(Стррсш.БНФОДоговорКредитаДепозита) Тогда
							Стррсш.БНФОДоговорКредитаДепозита         = Выборка.Ссылка;
						КонецЕсли; 
						Если Не ЗначениеЗаполнено(Стррсш.СчетУчетаРасчетовСКонтрагентом) Тогда
							Стррсш.СчетУчетаРасчетовСКонтрагентом     = _20601;
						КонецЕсли; 
						Если Не ЗначениеЗаполнено(Стррсш.СтатьяДвиженияДенежныхСредств) Тогда
							Стррсш.СтатьяДвиженияДенежныхСредств      = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("04530 Рез-ЮЛ_депозиты");
						КонецЕсли; 
						Если Не ЗначениеЗаполнено(Стррсш.СуммаВзаиморасчетов ) Тогда
							Стррсш.СуммаВзаиморасчетов                = Документ.СуммаДокумента;
						КонецЕсли; 
						
						Если Не ЗначениеЗаполнено(Стррсш.ВидПлатежаПоКредитамЗаймам) Тогда
							Стррсш.ВидПлатежаПоКредитамЗаймам         = Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
						КонецЕсли; 
						
						Если Не ЗначениеЗаполнено(Стррсш.ВидПлатежаПоКредитамЗаймам) Тогда
							Стррсш.ДоговорКонтрагента         = Документ.ДоговорКонтрагента;
						КонецЕсли; 
						
						Если Не ЗначениеЗаполнено(Стррсш.СуммаПлатежа) Тогда
							Стррсш.СуммаПлатежа         = Документ.СуммаДокумента;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		
		Если СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Оплата ВЫПЛАТА ИЗ БЮДЖЕТА РФ")) > 0 ИЛИ
			СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Выплата пособия по ходу за ребенком")) > 0 Тогда
			Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			Документ.pcru_ex_СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000235");
			Документ.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030681001000000000000000");
			Документ.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000041");
			Документ.ПодразделениеДт = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000005");
			
			Если НЕ Документ.pcru_ex_НеМенятьРаспределениеПриПроведении Тогда
				СтрокаРаспределения = Документ.пкру_РаспределениеЗатрат.Добавить();
				СтрокаРаспределения.пкру_CostCentr = Документ.ПодразделениеДт;
				СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000235");
				СтрокаРаспределения.ТипЗатрат =  Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 2");
				СтрокаРаспределения.Сумма = Документ.СуммаДокумента;
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		
		////incom	
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810400000000944" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000500000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810603300479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000100000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810703200479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000200000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810803100479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000300000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810903000479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000400000");
		КонецЕсли;
		
		Если Документ.СчетОрганизации.НомерСчета = "40702978803000479930" Тогда
			Документ.СчетБанк   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050197800000000000100000");
		КонецЕсли;
		
		ЭтоПереводСС = Ложь;
		
		Если  СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перевод собственных средств")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перевод на другой счет организации")) > 0
			ИЛИ СтрЧислоВхождений(НазначениеПлатежаДляПоиска, ВРег("Перевод средств на основании")) > 0 Тогда
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000043");
			ЭтоПереводСС = Истина;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810400000000944" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000500000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810603300479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000100000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810703200479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000200000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810803100479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000300000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702810903000479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050181000000000000400000");
			КонецЕсли;
			
			Если Документ.СчетКонтрагента.НомерСчета = "40702978803000479930" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом   = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050197800000000000100000");
			КонецЕсли;
			
			
			
			//		Документ.СчетУчетаРасчетовСКонтрагентом = pcru_УМФО.ПолучитьСчетПоАналитике("20501",Документ.СчетКонтрагента);
			Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета; 	
		КонецЕсли; 
		
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810703200479930" или Документ.СчетОрганизации.НомерСчета = "40702810803100479930" Тогда
			
			Если Не ЭтоПереводСС Тогда
				
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
				Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
				//		Если ЗначениеЗаполнено(Документ.Контрагент)  Тогда
				Попытка
					Если Документ.Контрагент.Наименование <> "КИВИ Банк (акционерное общество)" 
						и Документ.Контрагент.Наименование <> "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР НКО (АО)" Тогда
						Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
					КонецЕсли;
				Исключение
					
				КонецПопытки;
				//		КонецЕсли; 
				Документ.ПодразделениеОрганизации  = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
				
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		//	
		
		
		Если Документ.СчетОрганизации.НомерСчета = "40702810703200479930" Тогда
			//	Если ЗначениеЗаполнено(Документ.Контрагент)  Тогда
			Попытка
				Если Документ.Контрагент.ИНН = "3123011520" Тогда
					Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
					Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000007890000");
					Документ.БНФОСубконтоКт1 = Документ.Контрагент;
					Документ.БНФОСубконтоКт2 = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("00-000781");   
					Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000067");	
				КонецЕсли; 
				Если  Документ.Контрагент.ИНН = "7707033412" Тогда
					Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
					Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");//6031281000000069400000000");
					Документ.БНФОСубконтоКт1 = Документ.Контрагент;
					Документ.БНФОСубконтоКт2 = Справочники.ДоговорыКонтрагентов.НайтиПоКоду("000000277");  
					Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000067");	
				КонецЕсли; 
			Исключение
			КонецПопытки;
			//	КонецЕсли;
		КонецЕсли; 
		
		
		Попытка
			Если Документ.Контрагент.Наименование = "КИВИ Банк (акционерное общество)" 
				и Документ.Контрагент.Наименование = "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР НКО (АО)" Тогда
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
				//	Контрагент	Статья доходов
				//КИВИ Банк (акционерное общество)	04640 Рез-ФЛ_расчеты по микрозаймам с привлечением третьих лиц 00-000067
				//ЭЛЕКСНЕТ АО НКО (МОСКЛИРИНГЦЕНТР)	04640 Рез-ФЛ_расчеты по микрозаймам с привлечением третьих лиц
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000067");	
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		
		
		//
		//Если Документ.ВидОперации =  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		//	Документ.СтатьяДвиженияДенежныхСредств  = СправочникЫи.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000043");
		//КонецЕсли; 
		
		
		//Если  СтрЧислоВхождений(Врег(Документ.НазначениеПлатежа),"ДОЛГ")>0 или СтрЧислоВхождений(Врег(Документ.НазначениеПлатежа),"ВЗЫСК")>0 Тогда
		//Если  СтрЧислоВхождений(Врег(Документ.НазначениеПлатежа),"МОНОЛИТ")>0 Тогда "ВСЕ НА МЕДУЗУ!!"  
		Если Документ.СчетОрганизации.НомерСчета = "40702810803100479930"  Тогда
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000047");
		КонецЕсли; 
		
		
		
		//40702810603300479930
		Если Документ.СчетОрганизации.НомерСчета = "40702810603300479930"  Тогда
			
			Если СтрЧислоВхождений(Документ.НазначениеПлатежа,"ВОЗВРАТ СРЕДСТВ ПО ПРИЧИНЕ")>0 Тогда
				Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
			КонецЕсли;
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Документ.НазначениеПлатежа,"ВОЗВРАТ")>0 или СтрЧислоВхождений(Документ.НазначениеПлатежа,"озврат")>0) и
			(СтрЧислоВхождений(Документ.НазначениеПлатежа,"ПП")>0 или СтрЧислоВхождений(Документ.НазначениеПлатежа,"ПЛАТ.ПОР.")>0) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
			|ГДЕ
			|	СписаниеСРасчетногоСчета.НомерВходящегоДокумента = &НомерВходящегоДокумента";
			Запрос.УстановитьПараметр("НомерВходящегоДокумента",Документ.НомерВходящегоДокумента);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Рез = Неопределено;
			Пока Выборка.Следующий() Цикл
				Рез = Выборка.Ссылка;
			КонецЦикла;
			//Рез = pcru_УМФО.НайтиСписаниеВСтроке(Документ.НазначениеПлатежа);
			
			Если ЗначениеЗаполнено(Рез) Тогда
				Если Рез.РасшифровкаПлатежа.Количество() = 0 Тогда
					Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
					Документ.РасшифровкаПлатежа.Очистить();
					Документ.СчетУчетаРасчетовСКонтрагентом = Рез.СчетУчетаРасчетовСКонтрагентом;
					Документ.СтатьяДвиженияДенежныхСредств  = Рез.СтатьяДвиженияДенежныхСредств;
					
					
					//СтрокаРасшифровки = Документ.РасшифровкаПлатежа.Добавить();
					////  СтрокаРасшифровки.ДоговорКонтрагента = НовДогСС;
					//СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически; 
					////	СтрокаРасшифровки.Сделка =
					//СтрокаРасшифровки.СуммаПлатежа = Рез.СуммаДокумента;
					//СтрокаРасшифровки.КурсВзаиморасчетов = 1;
					//СтрокаРасшифровки.СуммаВзаиморасчетов=  Рез.СуммаДокумента;
					////СтрокаРасшифровки.СтавкаНДС =
					////СтрокаРасшифровки.СуммаНДС =
					//СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
					//СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = Рез.СчетУчетаРасчетовСКонтрагентом;
					//СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам     = Рез.СчетУчетаРасчетовСКонтрагентом;
					//СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
					////СтрокаРасшифровки.РасходыУСН =
					////СтрокаРасшифровки.НДСУСН =
					//		СтрокаРасшифровки.РаспределятьРасходыУСН = Ложь;
					//		СтрокаРасшифровки.ВидПлатежаПоКредитамЗаймам =  Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					//НовУслСС  = Справочники.БНФОДоговорыКредитовИДепозитов.НайтиПоРеквизиту("Номер",НомерДоговора);
					//СтрокаРасшифровки.БНФОДоговорКредитаДепозита = ДанныеДляЗаполнения.БНФОДоговорКредитаДепозита;		
					
				иначе
					
					Документ.СчетУчетаРасчетовСКонтрагентом = Рез.СчетУчетаРасчетовСКонтрагентом;
					Документ.СтатьяДвиженияДенежныхСредств  = Рез.СтатьяДвиженияДенежныхСредств;
					
					ДанныеДляЗаполнения =  Рез.РасшифровкаПлатежа[0];
					Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом;
					Документ.РасшифровкаПлатежа.Очистить();
					СтрокаРасшифровки = Документ.РасшифровкаПлатежа.Добавить();
					//  СтрокаРасшифровки.ДоговорКонтрагента = НовДогСС;
					СтрокаРасшифровки.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически; 
					//	СтрокаРасшифровки.Сделка =
					СтрокаРасшифровки.СуммаПлатежа = ДанныеДляЗаполнения.СуммаПлатежа;
					СтрокаРасшифровки.КурсВзаиморасчетов = 1;
					СтрокаРасшифровки.СуммаВзаиморасчетов=  ДанныеДляЗаполнения.СуммаПлатежа;
					//СтрокаРасшифровки.СтавкаНДС =
					//СтрокаРасшифровки.СуммаНДС =
					СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
					Если ЗначениеЗаполнено(ДанныеДляЗаполнения.СчетУчетаРасчетовСКонтрагентом)  Тогда
						СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ДанныеДляЗаполнения.СчетУчетаРасчетовСКонтрагентом;
					иначе 
						СтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = Документ.СчетУчетаРасчетовСКонтрагентом;
					КонецЕсли; 
					СтрокаРасшифровки.БНФОВидПлатежаПоКредитамЗаймам   = Перечисления.ВидыПлатежейПоКредитамЗаймам.БНФОПрочее;
					
					СтрокаРасшифровки.СчетУчетаРасчетовПоАвансам     = ДанныеДляЗаполнения.СчетУчетаРасчетовПоАвансам;
					СтрокаРасшифровки.КратностьВзаиморасчетов = 1;
					//СтрокаРасшифровки.РасходыУСН =
					//СтрокаРасшифровки.НДСУСН =
					//	СтрокаРасшифровки.РаспределятьРасходыУСН = Ложь;
					//	СтрокаРасшифровки.ВидПлатежаПоКредитамЗаймам =  Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга;
					//НовУслСС  = Справочники.БНФОДоговорыКредитовИДепозитов.НайтиПоРеквизиту("Номер",НомерДоговора);
					СтрокаРасшифровки.БНФОДоговорКредитаДепозита = ДанныеДляЗаполнения.БНФОДоговорКредитаДепозита;	
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если не ЗначениеЗаполнено(Документ.Контрагент)  Тогда
				Документ.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("Физ лицо");
			КонецЕсли;
			
		КонецЕсли;
		
		//++ Севрюгин А.А  26.02.2020 10:50:11   DEV1C-304
		Если Документ.СчетОрганизации.НомерСчета = "40701810355000000143"  Тогда
			Если СтрЧислоВхождений(Документ.НазначениеПлатежа,"//Приложение//Займы")>0 Тогда
				Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
				Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000002000000");
				Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000037");
				Документ.Контрагент = Справочники.Контрагенты.НайтиПоКоду("00-000020");
			КонецЕсли;
		КонецЕсли; 
		//-- Севрюгин А.А  26.02.2020 10:50:11 Администратор
		
		
		
		
		Если СтрЧислоВхождений(Документ.НазначениеПлатежа,"18210803010011050110")>0 Тогда
			Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
			Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031281000000056714000000");
			Документ.СтатьяДвиженияДенежныхСредств  = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000030");	
			
			
			
			Документ.пкру_РаспределениеЗатрат.Очистить();
			СтрокаРаспределения                     = Документ.пкру_РаспределениеЗатрат.Добавить();
			СтрокаРаспределения.пкру_CostCentr      = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.07.00 COLLECTIONS DEPARTMENT/КОЛЛЕКТОРСКИЙ ОТДЕЛ");
			СтрокаРаспределения.пкру_СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("01407 Госпошлина");
			СтрокаРаспределения.ТипЗатрат           = Справочники.БНФОСубконто.НайтиПоНаименованию("Тип затрат 1");
			СтрокаРаспределения.Сумма               = Документ.СуммаДокумента;
		КонецЕсли; 
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Если СтрЧислоВхождений(Документ.НазначениеПлатежа,"Зачисление процентов, начисленных на остаток на счете")>0 Тогда
			Документ.ВидОперации	=  Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
			//Если Документ.СчетОрганизации.НомерСчета = "40702810603300479930" Тогда	
			//	СчетАналитическогоУчетаРассч = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050781000000000000300000");
			//ИНачеЕсли Документ.СчетОрганизации.НомерСчета = "40702810703200479930" Тогда	
			//	СчетАналитическогоУчетаРассч = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050781000000000000200000");
			//ИНачеЕсли Документ.СчетОрганизации.НомерСчета = "40702810803100479930" Тогда	
			//	СчетАналитическогоУчетаРассч = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050781000000000000100000");
			//ИНаче	
			//	СчетАналитическогоУчетаРассч = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("2050781000000000000000000");
			//КонецЕсли;
			Документ.СчетУчетаРасчетовСКонтрагентом  = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311200000000024");
			//Документ.СчетБанк = СчетАналитическогоУчетаРассч;
			Документ.СтатьяДвиженияДенежныхСредств =  Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("00-000044");
			Документ.БНФОСубконтоКт1  = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000233");
			Документ.БНФОСубконтоКт2  = Справочники.БНФОСубконто.НайтиПоКоду("000000092");
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		
	КонецЕсли;
	
	
	
	// Вставить содержимое метода.
	Результат = ЗаписатьДокумент(Документ, Проводить);
	Возврат Результат;
КонецФункции

&Вместо("СоздатьДокументы")
Функция pcru_ex_СоздатьДокументы(Выписка, РаспознаннаяВыписка, Настройки, Отбор)
	
	РезультатСозданияДокументов = Новый Соответствие; // Ключ - идентификатор операции, значение - см. НовыйРезультатЗаписиДокумента()
	
	СохранятьДанныеАвтозаполнения = СохранятьДанныеАвтозаполненияДокументов();
	
	Для Каждого Операция Из Выписка.Операции Цикл
		
		Если Отбор <> Неопределено И Отбор.Найти(Операция.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РаспознаннаяОперация = РаспознаннаяВыписка.Операции.Найти(Операция.Идентификатор, "Идентификатор");
		Если РаспознаннаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХозяйственнаяОперация = РаспознаннаяОперация.ХозяйственнаяОперация;
		Если ХозяйственнаяОперация = Неопределено 
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
			И Не ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// Записывать такой документ не имеет смысла
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
			// 1. Может быть "распознана" пользователем. В этом случае следует записать результат его работы.
			// 2. Банковский документ может быть создан вручную, при загрузке получаем только отметку подтверждения выпиской банка.
			ОбъектДокумента = РаспознаннаяОперация.Ссылка.ПолучитьОбъект();
			
			Если Операция.ПоступилоСписано = "Списано"
				И ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
				// Если документ уже подтвержден выпиской банка, то отметку не изменяем, чтобы не устанавливалась
				// "модифицированность" документа, т.к. в ЗаписатьДокумент() если документ модифицирован,
				// он обязательно будет перезаписан, а это замедляет загрузку Выписки и сбивает Последовательность документов.
				// А также может привести к тому, что у документов будет отменено проведение, если в Настройках не установлено,
				// что документы нужно Проводить после загрузки.
				Если ОбъектДокумента.НеПодтвержденоВыпискойБанка Тогда
					ОбъектДокумента.НеПодтвержденоВыпискойБанка = Ложь;
				КонецЕсли;
				
				// Документ "Списание с расчетного счета" может быть создан на основании документа "Платежное поручение",
				// до выгрузки платежа в банк.
				// Дата банковского документа при этом будет такой же, как в платежном поручении.
				// При загрузке выписки необходимо привести дату банковского документа в соответствие с датой исполнения платежа.
				Если ЗначениеЗаполнено(Операция.ДатаИсполнения)
					И НачалоДня(Операция.ДатаИсполнения) <> НачалоДня(ОбъектДокумента.Дата) Тогда
					ВремяДокумента = ОбъектДокумента.Дата - НачалоДня(ОбъектДокумента.Дата);
					ОбъектДокумента.Дата = Операция.ДатаИсполнения + ВремяДокумента;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СохранятьДанныеАвтозаполнения Тогда
			ОбъектДокумента = РанееЗаполненныйОбъект(ХозяйственнаяОперация, Настройки);
		Иначе
			ОбъектДокумента = Неопределено;
		КонецЕсли;
		
		Если ОбъектДокумента = Неопределено Тогда
			ТипСсылки = ТипДокументаОперацииВыписки(Операция);
			Если ТипСсылки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(ТипСсылки));
			Если МенеджерДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбъектДокумента = МенеджерДокумента.СоздатьДокумент();
			ДанныеЗаполнения = НовыйДанныеЗаполнения(
			Операция,
			РаспознаннаяОперация.ПлатежноеПоручение,
			ХозяйственнаяОперация,
			РаспознаннаяВыписка.ВладелецСчета);
			ОбъектДокумента.Заполнить(ДанныеЗаполнения);
		КонецЕсли;
		Если СохранятьДанныеАвтозаполнения Тогда
			СохранитьДанныеАвтозаполненияДокумента(ОбъектДокумента, ХозяйственнаяОперация);
		КонецЕсли;
		
		// Начало изменений (Аудит-Эскорт, СИМ, 14.12.2018) >>
		Если ТипЗнч(ХозяйственнаяОперация) = Тип("Структура") И ХозяйственнаяОперация.Свойство("АЭ_ОтражатьВОперативномУчете") Тогда
			СтруктураОтражатьВОперативномУчете = Новый Структура("АЭ_ОтражатьВОперативномУчете", ХозяйственнаяОперация.АЭ_ОтражатьВОперативномУчете);
			ЗаполнитьЗначенияСвойств(ОбъектДокумента, СтруктураОтражатьВОперативномУчете);
		КонецЕсли;
		// Конец изменений (Аудит-Эскорт, СИМ, 14.12.2018) <<
		
		Проводить = ЗначениеНастройкиСозданияДокументов(Настройки, "ПроводитьДокумент", ТипЗнч(ОбъектДокумента.Ссылка));
		РезультатСозданияДокумента = pcru_ex_ЗаписатьДокумент(ОбъектДокумента, Проводить);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокумента.Ссылка) Тогда
			РаспознаннаяОперация.Ссылка = РезультатСозданияДокумента.Ссылка;
		КонецЕсли;
		
		РезультатСозданияДокументов.Вставить(Операция.Идентификатор, РезультатСозданияДокумента);
		
	КонецЦикла;
	
	Возврат РезультатСозданияДокументов;
	
КонецФункции



