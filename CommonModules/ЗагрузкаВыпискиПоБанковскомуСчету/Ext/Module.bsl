//&Вместо("РаспознатьВыписки")
//Функция Расш_РаспознатьВыписки(Выписки, УчастникиОпераций, Настройки) Экспорт
//	
//	РаспознанныеВыписки = Новый Соответствие; // Ключ - идентификатор выписки; Значение - см. НовыйРаспознаннаяВыписка()
//	
//	ПравилаОпределенияХозяйственныхОпераций = НовыйПравилаОпределенияХозяйственныхОпераций();
//	ЗаполнитьПредопределенныеПравилаОпределенияХозяйственныхОпераций(ПравилаОпределенияХозяйственныхОпераций);
//	
//	Для Каждого КлючИЗначение Из Выписки Цикл
//		
//		Выписка = КлючИЗначение.Значение;
//		
//		РаспознаннаяВыписка = НовыйРаспознаннаяВыписка(Выписка.Идентификатор, УчастникиОпераций);
//		РаспознанныеВыписки.Вставить(Выписка.Идентификатор, РаспознаннаяВыписка);
//		
//		Если Не БанковскийСчетВыпискиОпределен(РаспознаннаяВыписка, УчастникиОпераций) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		НайтиПлатежныеПоручения(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
//		НайтиРанееСозданныеДокументы(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
//		
//		// Определим хозяйственные операции
//		ПараметрыОпределенияХозяйственнойОперации = НовыйПараметрыОпределенияХозяйственнойОперации();
//		ПараметрыОпределенияХозяйственнойОперации.ВладелецСчета                 = РаспознаннаяВыписка.ВладелецСчета;
//		ПараметрыОпределенияХозяйственнойОперации.УчастникиОпераций             = УчастникиОпераций;
//		
//		Для Каждого Операция Из Выписка.Операции Цикл
//			
//			РаспознаннаяОперация = НайтиПоИдентификатору(РаспознаннаяВыписка.Операции, Операция.Идентификатор);
//			
//			Если ЗначениеЗаполнено(РаспознаннаяОперация.ПлатежноеПоручение)
//				Или ЗначениеЗаполнено(РаспознаннаяОперация.Ссылка) Тогда
//				Продолжить;
//			КонецЕсли;
//			
//			ЗаполнитьПараметрыОпределенияХозяйственнойОперации(ПараметрыОпределенияХозяйственнойОперации, Операция);
//			
//			РаспознаннаяОперация.ХозяйственнаяОперация = ХозяйственнаяОперация(
//			ПараметрыОпределенияХозяйственнойОперации,
//			ПравилаОпределенияХозяйственныхОпераций);
//			//++Севрюгин
//			Попытка
//				Если Операция.ПлательщикРеквизиты.КПП <> "" Тогда
////					ПодготовитьПредупрежденияПриВыбореСсылок(РаспознаннаяОперация, ПараметрыОпределенияХозяйственнойОперации);
//				Иначе
//					Операция.ПлательщикРеквизиты.КПП = "000000000";
//					Операция.РеквизитыПлатежаВБюджет.ПлательщикКПП = "000000000";
//				КонецЕсли;
//			Исключение
////				ПодготовитьПредупрежденияПриВыбореСсылок(РаспознаннаяОперация, ПараметрыОпределенияХозяйственнойОперации);
//			КонецПопытки; 
//			//--
//		КонецЦикла;
//		НайтиСчетНаОплатуПокупателю(РаспознаннаяВыписка, Выписка, УчастникиОпераций);
//	КонецЦикла;
//	
//	Возврат РаспознанныеВыписки;
//	
//КонецФункции

//&Вместо("РаспознанныеДанныеИзБанка")
//Функция Расш1_РаспознанныеДанныеИзБанка(ИмяФайла, Настройки, СведенияОВладельцеБанковскогоСчетаИзКонтекста, ОдиночныйРазделительСтрок)
//	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	РезультатЧтенияФайла = ОбменСБанкомВФормате1С.ПрочитатьФайл(ИмяФайла, Настройки.Кодировка, ОдиночныйРазделительСтрок);
//	
//	Для каждого СтрокаТЧ Из РезультатЧтенияФайла.ДанныеИзБанка.Документы Цикл
//		Если СтрокаТЧ.ПлательщикИНН = "" Тогда
//			Ссылка_на_контрагента = Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЧ.ПлательщикРеквизиты.Наименование);
//			Если ЗначениеЗаполнено(Ссылка_на_контрагента) Тогда
//				СтрокаТЧ.ПлательщикИНН = Ссылка_на_контрагента.ИНН;
//			Иначе 
//				Ссылка_на_контрагента = НайтиФиоВСтроке(СтрокаТЧ.НазначениеПлатежа);
//				Если ЗначениеЗаполнено(Ссылка_на_контрагента) Тогда
//					Попытка
//						НачатьТранзакцию();
//						СтрокаТЧ.ПлательщикИНН = Ссылка_на_контрагента.ИНН;	
//						ЗафиксироватьТранзакцию();
//					Исключение
//						ОтменитьТранзакцию();
//					КонецПопытки; 				
//				КонецЕсли; 
//			КонецЕсли; 
//		КонецЕсли; 
//	КонецЦикла; 
//	
//	
//	Если Не ОдиночныйРазделительСтрок Тогда
//		// Данные могут быть прочитаны неверно, если файл фактически содержит одиночный разделитель
//		ДанныеФайлаПовреждены = 
//		(РезультатЧтенияФайла.Протокол.Найти("ФайлСодержитНачальныйТег", "КодСобытия") = Неопределено)
//		И (РезультатЧтенияФайла.Протокол.Найти("ФайлСодержитСтрокиДоНачальногоТега", "КодСобытия") <> Неопределено);
//		Если ДанныеФайлаПовреждены Тогда
//			// Предпримем попытку прочитать файл с одиночным разделителем строк
//			РезультатЧтенияФайла = ОбменСБанкомВФормате1С.ПрочитатьФайл(ИмяФайла, Настройки.Кодировка, Истина);
//		КонецЕсли;
//	КонецЕсли;
//	
//	РазобратьНазначениеПлатежа(РезультатЧтенияФайла.ДанныеИзБанка);
//	
//	Если СведенияОВладельцеБанковскогоСчетаИзКонтекста = Неопределено Тогда
//		СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
//		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
//		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
//	КонецЕсли;
//	
//	УчастникиОпераций = ИдентификацияУчастниковБанковскихОпераций.НовыйУчастникиОпераций();
//	
//	ИдентификаторыУчастниковОпераций = ЗаполнитьИдентификаторыУчастниковОперацийПоДаннымИзБанка(
//	УчастникиОпераций,
//	РезультатЧтенияФайла.ДанныеИзБанка);
//	ИдентификацияУчастниковБанковскихОпераций.НайтиВИнформационнойБазе(УчастникиОпераций, СведенияОВладельцеБанковскогоСчетаИзКонтекста);
//	
//	ПротоколГруппировкиВыписки = НовыйПротоколГруппировкиВыписки();
//	Выписки = ВыпискиПоБанковскимСчетам(
//	РезультатЧтенияФайла.ДанныеИзБанка,
//	УчастникиОпераций,
//	ИдентификаторыУчастниковОпераций,
//	ПротоколГруппировкиВыписки);
//	ИдентификаторыУчастниковОпераций = Неопределено; // Все данные помещены в коллекцию Выписки; использовать ИдентификаторыУчастниковОпераций более не следует
//	
//	РаспознанныеВыписки = РаспознатьВыписки(Выписки, УчастникиОпераций);
//	
//	Возврат НовыйРаспознанныеДанныеИзБанка(
//	Выписки,
//	РаспознанныеВыписки,
//	УчастникиОпераций,
//	Настройки,
//	РезультатЧтенияФайла.Протокол,
//	ПротоколГруппировкиВыписки);
//	
//	
//КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПолучитьМассивСлов(Строкадлязаменны)
	Масс = новый Массив;
	тмп  = СтрЗаменить(Строкадлязаменны," ",Символы.ПС);
	тмп  = СтрЗаменить(тмп,":",Символы.ПС);
	тмп  = СтрЗаменить(тмп,".",Символы.ПС);
	тмп  = СтрЗаменить(тмп,",",Символы.ПС);
	тмп  = СтрЗаменить(тмп,";",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"0",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"1",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"2",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"3",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"4",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"5",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"6",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"7",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"8",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"9",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"(",Символы.ПС);
	тмп  = СтрЗаменить(тмп,")",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"/",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"?",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"!",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"@",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"#",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"%",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"^",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"&",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"*",Символы.ПС);
	тмп  = СтрЗаменить(тмп,"№",Символы.ПС);
	Для Счетчик = 1 По СтрЧислоСтрок(тмп) Цикл
		ТекСтрока = СтрПолучитьСтроку(тмп, Счетчик);
		Если СтрДлина(ТекСтрока) > 1  Тогда
			Масс.Добавить( ТекСтрока);
		КонецЕсли; 
	КонецЦикла;
	Возврат Масс;
КонецФункции // ПолучитьМассивСлов()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция НайтиФиоВСтроке(СтрокаСФио)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтрЧислоВхождений(СтрокаСФио,Выборка.Наименование) > 0  Тогда
			Возврат Выборка.ссылка;
		КонецЕсли; 
	КонецЦикла;
КонецФункции // НайтиФиоВСтроке()


&После("РазобратьНазначениеПлатежа")
Процедура pcru_ex_РазобратьНазначениеПлатежа(ДанныеИзБанка)
		Для каждого СтрокаТЧ Из ДанныеИзБанка.Документы Цикл
		Если СтрокаТЧ.ПлательщикИНН = "" Тогда
			Ссылка_на_контрагента = Справочники.Контрагенты.НайтиПоНаименованию(СтрокаТЧ.ПлательщикРеквизиты.Наименование);
			Если ЗначениеЗаполнено(Ссылка_на_контрагента) Тогда
				СтрокаТЧ.ПлательщикИНН = Ссылка_на_контрагента.ИНН;
			Иначе 
				Ссылка_на_контрагента = НайтиФиоВСтроке(СтрокаТЧ.НазначениеПлатежа);
				Если ЗначениеЗаполнено(Ссылка_на_контрагента) Тогда
					НачатьТранзакцию();
					Попытка
						СтрокаТЧ.ПлательщикИНН = Ссылка_на_контрагента.ИНН;	
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
					КонецПопытки; 				
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры



