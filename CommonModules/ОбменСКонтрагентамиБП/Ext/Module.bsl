
&Вместо("ЗаполнитьДокументКорректировкиПоступления")
Процедура pcru_ex_ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДокумента, ОписаниеОшибки = "")
	ДанныеЗаполнения = ДанныеДокумента.Шапка;
	РежимЗаписи      = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если Документ.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе // создаем новый
		
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ЗаполнениеДокументов.Заполнить(ДокументОбъект, ДанныеЗаполнения);
		
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьСвойстваШапки();
	
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДокументОбъект.НомерИсправления = ДанныеЗаполнения.НомерИсправления;
		ДокументОбъект.ДатаИсправления = ДанныеЗаполнения.ДатаИсправления;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерИсходногоДокумента")
		И ЗначениеЗаполнено(ДанныеЗаполнения.НомерИсходногоДокумента) Тогда
		ДокументОбъект.НомерИсходногоДокумента = ДанныеЗаполнения.НомерИсходногоДокумента;
		ДокументОбъект.ДатаИсходногоДокумента  = ДанныеЗаполнения.ДатаИсходногоДокумента;
		Если ДанныеЗаполнения.УчитыватьИсправлениеИсходногоДокумента Тогда
			ДокументОбъект.НомерИсправленияИсходногоДокумента = ДанныеЗаполнения.НомерИсправленияИсходногоДокумента;
			ДокументОбъект.ДатаИсправленияИсходногоДокумента  = ДанныеЗаполнения.ДатаИсправленияИсходногоДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ДокументПоступления = ДокументОбъект.ДокументПоступления;
	Если Не ЗначениеЗаполнено(ДокументПоступления) И ДанныеЗаполнения.Свойство("Основание") Тогда
		ДокументПоступления = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	// Заполненим корректировку поступления данными основания
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		ДокументОбъект.Заполнить(ДокументПоступления);
	КонецЕсли;
	
	// Заполним табличные части данными корректировки
	ТабличныеЧастиДляЗаполения = Новый Структура("Товары, Услуги");
	СтрокиТабличнойЧастиДляПерезаполнения = Новый Структура("Товары, Услуги",
	"Количество, Цена, Сумма, СуммаНДС, НомерГТД, СтранаПроисхождения", 
	"Количество, Цена, Сумма, СуммаНДС, Содержание");
	Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги", "", "");
	Иначе
		СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Товары, Услуги",
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения", 
		"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СодержаниеДоИзменения");
	КонецЕсли;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
		
		ИмяТЧ = ТабличнаяЧасть.Ключ;
		
		СтруктураПоиска = Новый Структура("Номенклатура, СтавкаНДС");
		
		Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
			РезультатПоискаДанныхЗаполнения = ДанныеДокумента[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоискаДанныхЗаполнения.Количество() > 0 Тогда
				
				СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ]);
				
				// Удалим обработанную строку из данных заполнения
				ДанныеДокумента[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим новые строки в документ
		Если ДанныеДокумента[ИмяТЧ].Количество() > 0 Тогда
			
			Для Каждого СтрокаДанныхЗаполнения Из ДанныеДокумента[ИмяТЧ] Цикл
				
				НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
				//++ Севрюгин А.А  05.03.2020 16:28:49
				//		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения, , СтрокиТабличнойЧастиДляПерезаполненияНового[ИмяТЧ]);
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения);
				//-- Севрюгин А.А  05.03.2020 16:28:49 Администратор
				
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&Вместо("НайтиОрганизациюПоДаннымЭД")
Процедура pcru_ex_НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, ДеревоДанных, ВидУчастника, ОписаниеОшибки = "")
	// Так как контрагенты иногда генерят  левые кпп то ищем только по инн 
	Организация = Неопределено;
	ПодразделениеОрганизации = Неопределено;
	
	ИНН = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН");
	КПП = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.КПП = &КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КПП КАК КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоИНН = Результат[1].Выбрать();
	Если ВыборкаПоИНН.Следующий() Тогда 
		Организация = ВыборкаПоИНН.Ссылка;
	КонецЕсли;
	ВыборкаПоИННКПП= Результат[0].Выбрать();
	
	Если ВыборкаПоИННКПП.Следующий() Тогда 
		ПодразделениеОрганизации = ВыборкаПоИННКПП.Ссылка;
	КонецЕсли;
	
	// иногда и инн левый (если будем использовать несколько организаций это спасет)
	// не самое верное решение,  но поможет избежать не нужных задержек в документообороте
	Если Не ЗначениеЗаполнено(Организация) Тогда
		 	Текст = "В документе контрагента "+
		          ДанныеОбъекта.Контрагент+ Символы.НПП+
				  " № "+ 
				  ДанныеОбъекта.НомерВходящегоДокумента+ Символы.НПП+
				  " от даты "+ 
				  ДанныеОбъекта.ДатаВходящегоДокумента+
				  "Неправильно указан ИНН(Наш)"
				  + Символы.НПП
				  + Символы.НПП
				  + Символы.НПП
				  +"Видимо контрагент не надежный";

		
		pcru_ex_Почта.ОтправкаПочтыРасшир("pcru-finance@profi-credit.ru","Ошибка элекстонного документооборота с контрагентами",Текст);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Организации.Ссылка КАК Организация,
		               |	ПодразделенияОрганизаций.Ссылка КАК Подразделение
		               |ИЗ
		               |	Справочник.Организации КАК Организации
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		               |		ПО (ПодразделенияОрганизаций.Владелец = Организации.Ссылка)
		               |			И (ПодразделенияОрганизаций.КПП = Организации.КПП)
		               |ГДЕ
		               |	НЕ Организации.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Организация = Выборка.Организация;
			ПодразделениеОрганизации =  Выборка.Подразделение;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		//Текст = "В документе контрагента "+
		//          ДанныеОбъекта.Контрагент+ Символы.НПП+
		//		  " № "+ 
		//		  ДанныеОбъекта.НомерВходящегоДокумента+ Символы.НПП+
		//		  " от даты "+ 
		//		  ДанныеОбъекта.ДатаВходящегоДокумента+ Символы.НПП+
		//		  "Неправильно указан КПП";
		//pcru_ex_Почта.ОтправкаПочтыРасшир("pcru-finance@profi-credit.ru","Ошибка элекстонного документооборота с контрагентами",Текст);
		
		ДанныеОбъекта.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации);
	КонецЕсли;
	
	
КонецПроцедуры

&Вместо("ЗаполнитьДокументСчетФактураПолученный")
Процедура pcru_ex_ЗаполнитьДокументСчетФактураПолученный(Документ, ДанныеДокумента, ОписаниеОшибки = "")
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
		ДокументОбъект = Документ.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	Иначе// создаем новый
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		// вручную переопределим, если требуется
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДокумента);
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.Заполнить(ДокументОбъект);
		ДокументОбъект.ВидСчетаФактуры = ДанныеДокумента.ВидСчетаФактуры;
		ДокументОбъект.КодВидаОперации = ДанныеДокумента.КодВидаОперации;
	КонецЕсли;
	
	ДокументОбъект.ДокументыОснования.Очистить();
	Для Каждого ДокументОснование Из ДанныеДокумента.ДокументыОснования Цикл
		
		Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный 
			И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументОбъект.ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
	КонецЦикла;
	
	ДокументОбъект.ДокументОснование = ?(ДокументОбъект.ДокументыОснования.Количество()>0, ДокументОбъект.ДокументыОснования[0].ДокументОснование, Неопределено);
	Если ТипЗнч(ДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ДокументОбъект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокументОснование, "ДоговорКонтрагента");
		
	КонецЕсли;
	
	ДокументОбъект.КодСпособаПолучения = 2;
	ДокументОбъект.НомерВходящегоДокумента = ДанныеДокумента.НомерВходящегоДокумента;
	ДокументОбъект.ДатаВходящегоДокумента  = ДанныеДокумента.ДатаВходящегоДокумента;
	ДокументОбъект.НомерИсходногоДокумента = ДанныеДокумента.НомерИсходногоДокумента;
	ДокументОбъект.ДатаИсходногоДокумента  = ДанныеДокумента.ДатаИсходногоДокумента;
	Если ДанныеДокумента.Свойство("Исправление") Тогда
		ДокументОбъект.Исправление       = ДанныеДокумента.Исправление;
		ДокументОбъект.НомерИсправления  = ДанныеДокумента.НомерИсправления;
		ДокументОбъект.ДатаИсправления   = ДанныеДокумента.ДатаИсправления;
	КонецЕсли;
	
	Если ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если ДокументОбъект.ДокументыОснования.Количество()>0 Тогда
			ОснованиеСчетаФактуры = ДокументОбъект.ДокументыОснования[0];
			ОснованиеСчетаФактуры.НомерИсходногоДокумента = ДанныеДокумента.НомерИсходногоДокумента;
			ОснованиеСчетаФактуры.ДатаИсходногоДокумента  = ДанныеДокумента.ДатаИсходногоДокумента;
			ОснованиеСчетаФактуры.УчитыватьИсправлениеИсходногоДокумента = ДанныеДокумента.Свойство("УчитыватьИсправлениеИсходногоДокумента") И ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента;
			ОснованиеСчетаФактуры.СуммаУвеличение    = ДанныеДокумента.СуммаУвеличение;
			ОснованиеСчетаФактуры.СуммаУменьшение    = ДанныеДокумента.СуммаУменьшение;
			ОснованиеСчетаФактуры.СуммаНДСУвеличение = ДанныеДокумента.СуммаНДСУвеличение;
			ОснованиеСчетаФактуры.СуммаНДСУменьшение = ДанныеДокумента.СуммаНДСУменьшение;
			
			Если ДанныеДокумента.Свойство("УчитыватьИсправлениеИсходногоДокумента")
				И ДанныеДокумента.УчитыватьИсправлениеИсходногоДокумента Тогда
				ОснованиеСчетаФактуры.НомерИсправленияИсходногоДокумента = ДанныеДокумента.НомерИсправленияИсходногоДокумента;
				ОснованиеСчетаФактуры.ДатаИсправленияИсходногоДокумента  = ДанныеДокумента.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Отражение вычета НДС по умолчанию
	СтруктураПараметров	= Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДокументОбъект);
	ДокументОбъект.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
	
	ДокументОбъект.СуммаУвеличение    = ДанныеДокумента.СуммаУвеличение;
	ДокументОбъект.СуммаУменьшение    = ДанныеДокумента.СуммаУменьшение;
	ДокументОбъект.СуммаНДСУвеличение = ДанныеДокумента.СуммаНДСУвеличение;
	ДокументОбъект.СуммаНДСУменьшение = ДанныеДокумента.СуммаНДСУменьшение;
	Если ДанныеДокумента.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		ДокументОбъект.СуммаДокумента     = ?(ДанныеДокумента.СуммаУвеличение = Неопределено, 0, ДанныеДокумента.СуммаУвеличение)
											- ?(ДанныеДокумента.СуммаУменьшение = Неопределено, 0, ДанныеДокумента.СуммаУменьшение);
		ДокументОбъект.СуммаНДСДокумента     = ?(ДанныеДокумента.СуммаНДСУвеличение = Неопределено, 0, ДанныеДокумента.СуммаНДСУвеличение)
											- ?(ДанныеДокумента.СуммаНДСУменьшение = Неопределено, 0, ДанныеДокумента.СуммаНДСУменьшение);
	Иначе
		ДокументОбъект.СуммаДокумента     = ДанныеДокумента.СуммаДокумента;
		ДокументОбъект.СуммаНДСДокумента  = ДанныеДокумента.СуммаНДСДокумента;
	КонецЕсли;
	
	Если ДанныеДокумента.Свойство("Авансы") Тогда
		ДокументОбъект.Авансы.Загрузить(ДанныеДокумента.Авансы);
	КонецЕсли;
	
	ЗаполнитьСчетаФактурыВыданныеПокупателям(ДокументОбъект, ДанныеДокумента);
	
	
	
	ДокументОбъект.Записать(РежимЗаписи);
	
//	ЗаписатьДокумент(ДокументОбъект, РежимЗаписи);
	
	//Если НЕ ЗначениеЗаполнено(Документ) Тогда
	//	Документ = ДокументОбъект.Ссылка;
	//КонецЕсли;

	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Документ = ДокументОбъект.Ссылка;
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ОпределитьУчастниковПоДаннымЭД_2019")
Процедура pcru_ex_ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта, ОписаниеОшибки = "")
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	
	Если ДанныеОбъекта.Свойство("ЭтоПеревыставленныйСФНаКомиссионныеЗакупки")
			И ДанныеОбъекта.ЭтоПеревыставленныйСФНаКомиссионныеЗакупки Тогда
		ДанныеОбъекта.Вставить("Контрагент", КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОКомиссионере"));
	Иначе
		Для каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
			ДанныеОбъекта.Вставить("Контрагент", КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки"));
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		Если ДанныеОбъекта.Свойство("ЭтоПеревыставленныйСФНаКомиссионныеПродажи")
				И ДанныеОбъекта.ЭтоПеревыставленныйСФНаКомиссионныеПродажи Тогда
			ДанныеОбъекта.Вставить("Покупатель", КонтрагентПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Иначе
			НайтиОрганизациюПоДаннымЭД(ДанныеОбъекта, СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки", ОписаниеОшибки);
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	СведенияОГрузоотправителе = ДеревоДанных.Строки.Найти("СведенияОГрузоотправителе", "ПолныйПуть");
	Для каждого СтрокаГрузоотправителя Из СведенияОГрузоотправителе.Строки Цикл
		ГрузоотправительОнЖе = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.ОнЖе");
		Если ГрузоотправительОнЖе = Истина Тогда
			ДанныеОбъекта.Вставить("Грузоотправитель", ДанныеОбъекта.Контрагент);
		Иначе
			ДанныеОбъекта.Вставить("Грузоотправитель",
				КонтрагентПоДаннымЭД(СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.Грузоотправитель"));
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	СведенияОГрузополучателе = ДеревоДанных.Строки.Найти("СведенияОГрузополучателе", "ПолныйПуть");
	Для каждого СтрокаГрузополучателя Из СведенияОГрузополучателе.Строки Цикл
		ДанныеОбъекта.Вставить("Грузополучатель", КонтрагентПоДаннымЭД(СтрокаГрузополучателя, "СведенияОГрузополучателе.НомерСтроки"));
		Прервать;
	КонецЦикла;

	#Вставка
	Если СтрНайти(ДанныеОбъекта.Контрагент, "Комус") > 0 Тогда
		Для каждого СтрокаГрузополучателя Из СведенияОГрузополучателе.Строки Цикл
			ОрганизацияПодразделениеНаименование = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СтрокаГрузополучателя, "СведенияОГрузополучателе.НомерСтроки.ТипУчастника.ЮЛ.НаименованиеОрганизации");
			ОрганизацияПодразделениеНаименование = СтрЗаменить(ОрганизацияПодразделениеНаименование, ДанныеОбъекта.Организация, "");
			МассивДанных = СтрРазделить(ОрганизацияПодразделениеНаименование, " ", Ложь);
			Если МассивДанных.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;			
			ПодразделениеКод = СтрЗаменить(МассивДанных[0], "-", "");
			ДанныеОбъекта.Вставить("ПодразделениеОрганизации", НайтиПодразделение(ПодразделениеКод));
			Прервать;
		КонецЦикла;
	КонецЕсли;
	#КонецВставки
КонецПроцедуры

Функция НайтиПодразделение(ПодразделениеКод)
	
	ИскомоеПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(ПодразделениеКод);
	Если ЗначениеЗаполнено(ИскомоеПодразделение) Тогда
		Возврат ИскомоеПодразделение;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Наименование ПОДОБНО &Наименование
	|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", "%" + ПодразделениеКод + "%");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	КонецЕсли;
	
	Если Лев(ПодразделениеКод, 1) = "0" Тогда
		Запрос.УстановитьПараметр("Наименование", "%" + Прав(ПодразделениеКод, СтрДлина(ПодразделениеКод) - 1) + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка
		КонецЕсли;
	КонецЕсли;
		
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
КонецФункции