Функция ПолучитьCOMОбъектПоВерсииПлатформы() Экспорт
	
	// Определяем имя COM-объекта по версии платформы
	ИмяComОбъекта = "";
	Инфо = Новый СистемнаяИнформация;
	Если СтрНайти(Инфо.ВерсияПриложения, "8.3") > 0 Тогда
		ИмяComОбъекта = "V83.COMConnector";
	ИначеЕсли СтрНайти(Инфо.ВерсияПриложения, "8.2") > 0 Тогда
		ИмяComОбъекта = "V82.COMConnector";
	Иначе
		ВызватьИсключение "Не удалось определить версию платформы";
	КонецЕсли;
	
	// Инициализируем COM-объект и соединение
	COMConnector = Новый COMОбъект(ИмяComОбъекта);
	
	Возврат COMConnector;
	
КонецФункции


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗагрузкаДокументовИзЗУП() Экспорт
		
	ComConnection = pcru_ex_ВнешниеСоединения.СоздатьВнешнееСоединение("1S","ЗУП");
	
	ВнешнийСписок = ComConnection.NewObject("Массив");
	
	Выборка = Документы.ОтражениеЗарплатыВБухучете.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВнешнийСписок.Добавить(Сокрлп(Выборка.Номер));	
	КонецЦикла;
	
	Запрос = ComConnection.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтражениеЗарплатыВБухучете.ПометкаУдаления КАК ПометкаУдаления,
	|	ОтражениеЗарплатыВБухучете.Номер КАК Номер,
	|	ОтражениеЗарплатыВБухучете.Дата КАК Дата,
	|	ОтражениеЗарплатыВБухучете.Проведен КАК Проведен,
	|	ОтражениеЗарплатыВБухучете.ПериодРегистрации КАК ПериодРегистрации,
	|	ОтражениеЗарплатыВБухучете.Организация КАК Организация,
	|	ОтражениеЗарплатыВБухучете.ЗарплатаОтраженаВБухучете КАК ЗарплатаОтраженаВБухучете,
	|	ОтражениеЗарплатыВБухучете.Бухгалтер КАК Бухгалтер,
	|	ОтражениеЗарплатыВБухучете.КраткийСоставДокумента КАК КраткийСоставДокумента,
	|	ОтражениеЗарплатыВБухучете.Ответственный КАК Ответственный,
	|	ОтражениеЗарплатыВБухучете.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	НЕ ОтражениеЗарплатыВБухучете.Номер В (&Номер)";
	
	Запрос.УстановитьПараметр("Номер", ВнешнийСписок);	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		//*********************************************************************** 
		НовДок = Документы.ОтражениеЗарплатыВБухучете.СоздатьДокумент();
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  Выборка.Номер;
		НовДок.Дата =  Выборка.Дата;
		НовДок.Проведен =  Выборка.Проведен;
		НовДок.ПериодРегистрации =  Выборка.ПериодРегистрации;
		НовДок.Организация =  pcru_УМФО.Организация();
		НовДок.ЗарплатаОтраженаВБухучете =  Выборка.ЗарплатаОтраженаВБухучете;
		НовДок.Номер =  Выборка.Номер;
		//*********************************************************************** 
		Запрос2 = ComConnection.NewObject("Запрос");
		Запрос2.Текст = "ВЫБРАТЬ
		//|	ФизическиеЛицаДополнительныеРеквизиты.Значение КАК ProcessCode,
		//|	ФизическиеЛицаДополнительныеРеквизиты1.Значение КАК ТипЗатрат,
		|	ЕСТЬNULL(ФизическиеЛица.pcru_ProcessCode, """") КАК ProcessCode,
		|	ЕСТЬNULL(ФизическиеЛица.pcru_ТипЗатрат, """") КАК ТипЗатрат,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование КАК СпособОтраженияЗарплатыВБухучете,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ) КАК ВидНачисленияОплатыТрудаДляНУ,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛица.Ссылка
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
		//|		ПО (ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты.Ссылка)
		//|			И (ФизическиеЛицаДополнительныеРеквизиты.Свойство.Заголовок = ""ProcessCode"")
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты1
		//|		ПО (ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты1.Ссылка)
		//|			И (ФизическиеЛицаДополнительныеРеквизиты1.Свойство.Заголовок = ""тип затрат"")		
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка.Номер = &Номер
		|   и ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации <> Значение(перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
		|СГРУППИРОВАТЬ ПО
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов,
		//|	ФизическиеЛицаДополнительныеРеквизиты.Значение,
		//|	ФизическиеЛицаДополнительныеРеквизиты1.Значение,
		|	ФизическиеЛица.pcru_ProcessCode,
		|	ФизическиеЛица.pcru_ТипЗатрат,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации),
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ)";
		Запрос2.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат2 = Запрос2.Выполнить();
		Выборка2 = Результат2.Выбрать();
		Пока Выборка2.Следующий() Цикл
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка2);
			СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode =  Выборка2.ProcessCode;
     		СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат =  Выборка2.ТипЗатрат;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение =  ПолучитьПодразделение(Выборка2.Подразделение);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации =  ПолучитьВидОперации(Выборка2.ВидОперации);
			//СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка2.СпособОтраженияЗарплатыВБухучете);
		КонецЦикла;
		//*********************************************************************** 
		Запрос3 = ComConnection.NewObject("Запрос");
		Запрос3.Текст = "ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо.Код КАК ФизическоеЛицо,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование КАК СпособОтраженияЗарплатыВБухучете,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ) КАК ВидНачисленияОплатыТрудаДляНУ,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка.Номер = &Номер
		|   и ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации = Значение(перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
		|СГРУППИРОВАТЬ ПО
		|    ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо.Код,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации),
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ)";
		Запрос3.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат3 = Запрос3.Выполнить();
		Выборка3 = Результат3.Выбрать();
		Пока Выборка3.Следующий() Цикл
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка3);
			СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ПолучитьФизЛицо(Выборка3.ФизическоеЛицо,ComConnection);
			СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode =  Выборка2.ProcessCode;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации =  ПолучитьВидОперации(Выборка3.ВидОперации);
			//СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка3.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка3.СпособОтраженияЗарплатыВБухучете);
		КонецЦикла;
		//*********************************************************************** 
		Запрос4 = ComConnection.NewObject("Запрос");
		Запрос4.Текст = "ВЫБРАТЬ
		|	Представление(ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КПП КАК КПП,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Сумма КАК Сумма,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Ссылка.Номер = &Номер
		|	И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛ)
		|	//И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов)";
		Запрос4.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат4 = Запрос4.Выполнить();
		Выборка4 = Результат4.Выбрать();
		Пока Выборка4.Следующий() Цикл
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ,Выборка4);
			СтрокаНачисленныйНДФЛ.ВидОперации =  ПолучитьВидОперации(Выборка4.ВидОперации);
		КонецЦикла;
		//*********************************************************************** 
		Запрос5 = ComConnection.NewObject("Запрос");
		Запрос5.Текст = "ВЫБРАТЬ
		|	Представление(ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КПП КАК КПП,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Сумма КАК Сумма,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ФизическоеЛицо.Код КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Ссылка.Номер = &Номер
		|	И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов)";
		Запрос5.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат5 = Запрос5.Выполнить();
		Выборка5 = Результат5.Выбрать();
		Пока Выборка5.Следующий() Цикл
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ,Выборка5);
			СтрокаНачисленныйНДФЛ.ВидОперации =  ПолучитьВидОперации(Выборка5.ВидОперации);
			СтрокаНачисленныйНДФЛ.ФизическоеЛицо = ПолучитьФизЛицо(Выборка5.ФизическоеЛицо,ComConnection);
		КонецЦикла;
		//*********************************************************************** 
		Запрос6 = ComConnection.NewObject("Запрос");
		Запрос6.Текст = "ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.ФизическоеЛицо.Код КАК ФизическоеЛицо,
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Подразделение.Код КАК Подразделение,
		|	Представление(ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Контрагент.ИНН КАК Контрагент,
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Сумма КАК Сумма
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Ссылка.Номер = &Номер";
		Запрос6.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат6 = Запрос6.Выполнить();
		Выборка6 = Результат6.Выбрать();
		Пока Выборка6.Следующий() Цикл
			СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата,Выборка6);
			СтрокаУдержаннаяЗарплата.Подразделение =  ПолучитьПодразделение(Выборка6.Подразделение);
			СтрокаУдержаннаяЗарплата.ВидОперации =  ПолучитьВидОперации(Выборка6.ВидОперации);
			Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
				СтрокаУдержаннаяЗарплата.ФизическоеЛицо = ПолучитьФизЛицо(Выборка6.ФизическоеЛицо,ComConnection);
			Конецесли;
			СтрокаУдержаннаяЗарплата.Контрагент = ПолучитьКонтрагента(Выборка6.Контрагент,ComConnection);
		КонецЦикла;
		//*********************************************************************** 
		Запрос7 = ComConnection.NewObject("Запрос");
		Запрос7.Текст = "ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучетеФизическиеЛица.ФизическоеЛицо.Код КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.ФизическиеЛица КАК ОтражениеЗарплатыВБухучетеФизическиеЛица
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеФизическиеЛица.Ссылка.Номер =  &Номер";
		Запрос7.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат7 = Запрос7.Выполнить();
		Выборка7 = Результат7.Выбрать();
		Пока Выборка7.Следующий() Цикл
			СтрокаУдержаннаяЗарплата = НовДок.ФизическиеЛица.Добавить();	
			СтрокаУдержаннаяЗарплата.ФизическоеЛицо = ПолучитьФизЛицо(Выборка7.ФизическоеЛицо,ComConnection);
		КонецЦикла;
		
		НовДок.Записать();
	КонецЦикла;
	
	
КонецПроцедуры // ЗагрузкаДокументовИзЗУП()

Процедура ЗагрузкаДокументовИзЗУППоНовому() Экспорт
	
	//Список существующих документов
	Список = Новый Массив;
	Выборка = Документы.ОтражениеЗарплатыВБухучете.Выбрать();
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Сокрлп(Выборка.Номер));	
	КонецЦикла;
	Структура = Новый Структура("Отбор, Документы", "НЕ", Список);
	
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	//ЗаписатьJSON(ЗаписьJSON, Структура); 
	//ТелоСообщения = ЗаписьJSON.Закрыть();	

	ТелоСообщения = ргОбменДанными.СтруктуруВСтрокуJSON(Структура);
	ргОбменДанными.ОтправитьВОбмен("ОтражениеЗарплатыВБухУчете", Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("UMFO"), Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("ZUP"), Неопределено, ТелоСообщения);
	
	//ОбменДаннымиСобытие = Справочники.ОбменДанными.СоздатьЭлемент();
	//ОбменДаннымиСобытие.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоКоду("ОтражениеЗарплатыВБухУчете");
	//Получатель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("ZUP");
	//ОбменДаннымиСобытие.Получатель = Получатель;
	//ОбменДаннымиСобытие.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("UMFO");
	//ОбменДаннымиСобытие.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Исходящее;
	//ОбменДаннымиСобытие.ТелоСообщения = ТелоСообщения;
	//ОбменДаннымиСобытие.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
	//ОбменДаннымиСобытие.ДатаСоздания = ТекущаяДата();
	//ОбменДаннымиСобытие.Записать();
	
	////Отправляем список документов
	//Взаимодействия.ОтправкаSMS();
	//
	////Получаем документы
	//Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,False);
	//Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,False);       
	//Прокси.Пользователь = Получатель.Пользователь;
	//Прокси.Пароль = Получатель.Пароль;		
	//Результат = Прокси.LaunchDataExchange();	
	//
	////Отправляем ответ
	//Взаимодействия.ОтправкаSMS();
	
КонецПроцедуры // ЗагрузкаДокументовИзЗУППоНовому()


Процедура ПереЗагрузкаОтраженияИзЗУП(Ссылка) Экспорт
	
	ComConnection = pcru_ex_ВнешниеСоединения.СоздатьВнешнееСоединение("1S","ЗУП");
	
	ВнешнийСписок = ComConnection.NewObject("Массив");
	
	Выборка = Документы.ОтражениеЗарплатыВБухучете.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВнешнийСписок.Добавить(Сокрлп(Выборка.Номер));	
	КонецЦикла;
	
	Запрос = ComConnection.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтражениеЗарплатыВБухучете.ПометкаУдаления КАК ПометкаУдаления,
	|	ОтражениеЗарплатыВБухучете.Номер КАК Номер,
	|	ОтражениеЗарплатыВБухучете.Дата КАК Дата,
	|	ОтражениеЗарплатыВБухучете.Проведен КАК Проведен,
	|	ОтражениеЗарплатыВБухучете.ПериодРегистрации КАК ПериодРегистрации,
	|	ОтражениеЗарплатыВБухучете.Организация КАК Организация,
	|	ОтражениеЗарплатыВБухучете.ЗарплатаОтраженаВБухучете КАК ЗарплатаОтраженаВБухучете,
	|	ОтражениеЗарплатыВБухучете.Бухгалтер КАК Бухгалтер,
	|	ОтражениеЗарплатыВБухучете.КраткийСоставДокумента КАК КраткийСоставДокумента,
	|	ОтражениеЗарплатыВБухучете.Ответственный КАК Ответственный,
	|	ОтражениеЗарплатыВБухучете.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	ОтражениеЗарплатыВБухучете.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Ссылка.Номер);	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		//*********************************************************************** 
		НовДок = Ссылка.ПолучитьОбъект();
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  Выборка.Номер;
		НовДок.Дата =  Выборка.Дата;
		НовДок.Проведен =  Выборка.Проведен;
		НовДок.ПериодРегистрации =  Выборка.ПериодРегистрации;
		НовДок.Организация =  pcru_УМФО.Организация();
		НовДок.ЗарплатаОтраженаВБухучете =  Выборка.ЗарплатаОтраженаВБухучете;
		НовДок.Номер =  Выборка.Номер;
		//
		НовДок.НачисленнаяЗарплатаИВзносы.Очистить();
		НовДок.НачисленныйНДФЛ.Очистить();
		НовДок.УдержаннаяЗарплата.Очистить();
		НовДок.ФизическиеЛица.Очистить();
		
		//*********************************************************************** 
		Запрос2 = ComConnection.NewObject("Запрос");
		Запрос2.Текст = "ВЫБРАТЬ
		//|	ФизическиеЛицаДополнительныеРеквизиты.Значение КАК ProcessCode,
		//|	ФизическиеЛицаДополнительныеРеквизиты1.Значение КАК ТипЗатрат,
		|	ЕСТЬNULL(ФизическиеЛица.pcru_ProcessCode, """") КАК ProcessCode,
		|	ЕСТЬNULL(ФизическиеЛица.pcru_ТипЗатрат, """") КАК ТипЗатрат,		
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование КАК СпособОтраженияЗарплатыВБухучете,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ) КАК ВидНачисленияОплатыТрудаДляНУ,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛица.Ссылка
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
		//|		ПО (ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты.Ссылка)
		//|			И (ФизическиеЛицаДополнительныеРеквизиты.Свойство.Заголовок = ""ProcessCode"")
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты1
		//|		ПО (ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты1.Ссылка)
		//|			И (ФизическиеЛицаДополнительныеРеквизиты1.Свойство.Заголовок = ""тип затрат"")		
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка.Номер = &Номер
		|   и ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации <> Значение(перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
		|СГРУППИРОВАТЬ ПО
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов,
		//|	ФизическиеЛицаДополнительныеРеквизиты.Значение,
		//|	ФизическиеЛицаДополнительныеРеквизиты1.Значение,
		|	ФизическиеЛица.pcru_ProcessCode,
		|	ФизическиеЛица.pcru_ТипЗатрат,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации),
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ)";
		Запрос2.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат2 = Запрос2.Выполнить();
		Выборка2 = Результат2.Выбрать();
		Пока Выборка2.Следующий() Цикл
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка2);
			СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode =  Выборка2.ProcessCode;
			СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат =  Выборка2.ТипЗатрат;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение =  ПолучитьПодразделение(Выборка2.Подразделение);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации =  ПолучитьВидОперации(Выборка2.ВидОперации);
			//СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка2.СпособОтраженияЗарплатыВБухучете);
		КонецЦикла;
		//*********************************************************************** 
		Запрос3 = ComConnection.NewObject("Запрос");
		Запрос3.Текст = "ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо.Код КАК ФизическоеЛицо,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование КАК СпособОтраженияЗарплатыВБухучете,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ) КАК ВидНачисленияОплатыТрудаДляНУ,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
		|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка.Номер = &Номер
		|   и ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации = Значение(перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
		|СГРУППИРОВАТЬ ПО
		|    ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо.Код,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование,
		|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов,
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации),
		|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ)";
		Запрос3.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат3 = Запрос3.Выполнить();
		Выборка3 = Результат3.Выбрать();
		Пока Выборка3.Следующий() Цикл
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка3);
			СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ПолучитьФизЛицо(Выборка3.ФизическоеЛицо,ComConnection);
			СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode =  Выборка2.ProcessCode;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации =  ПолучитьВидОперации(Выборка3.ВидОперации);
			//СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка3.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка3.СпособОтраженияЗарплатыВБухучете);
		КонецЦикла;
		//*********************************************************************** 
		Запрос4 = ComConnection.NewObject("Запрос");
		Запрос4.Текст = "ВЫБРАТЬ
		|	Представление(ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КПП КАК КПП,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Сумма КАК Сумма,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Ссылка.Номер = &Номер
		|	И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛ)
		|	//И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов)";
		Запрос4.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат4 = Запрос4.Выполнить();
		Выборка4 = Результат4.Выбрать();
		Пока Выборка4.Следующий() Цикл
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ,Выборка4);
			СтрокаНачисленныйНДФЛ.ВидОперации =  ПолучитьВидОперации(Выборка4.ВидОперации);
		КонецЦикла;
		//*********************************************************************** 
		Запрос5 = ComConnection.NewObject("Запрос");
		Запрос5.Текст = "ВЫБРАТЬ
		|	Представление(ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КПП КАК КПП,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Сумма КАК Сумма,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ФизическоеЛицо.Код КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Ссылка.Номер = &Номер
		|	И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов)";
		Запрос5.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат5 = Запрос5.Выполнить();
		Выборка5 = Результат5.Выбрать();
		Пока Выборка5.Следующий() Цикл
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ,Выборка5);
			СтрокаНачисленныйНДФЛ.ВидОперации =  ПолучитьВидОперации(Выборка5.ВидОперации);
			СтрокаНачисленныйНДФЛ.ФизическоеЛицо = ПолучитьФизЛицо(Выборка5.ФизическоеЛицо,ComConnection);
		КонецЦикла;
		//*********************************************************************** 
		Запрос6 = ComConnection.NewObject("Запрос");
		Запрос6.Текст = "ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.ФизическоеЛицо.Код КАК ФизическоеЛицо,
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Подразделение.Код КАК Подразделение,
		|	Представление(ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.ВидОперации) КАК ВидОперации,
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Контрагент.ИНН КАК Контрагент,
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Сумма КАК Сумма
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Ссылка.Номер = &Номер";
		Запрос6.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат6 = Запрос6.Выполнить();
		Выборка6 = Результат6.Выбрать();
		Пока Выборка6.Следующий() Цикл
			СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата,Выборка6);
			СтрокаУдержаннаяЗарплата.Подразделение =  ПолучитьПодразделение(Выборка6.Подразделение);
			СтрокаУдержаннаяЗарплата.ВидОперации =  ПолучитьВидОперации(Выборка6.ВидОперации);
			Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
				СтрокаУдержаннаяЗарплата.ФизическоеЛицо = ПолучитьФизЛицо(Выборка6.ФизическоеЛицо,ComConnection);
			Конецесли;
			СтрокаУдержаннаяЗарплата.Контрагент = ПолучитьКонтрагента(Выборка6.Контрагент,ComConnection);
		КонецЦикла;
		//*********************************************************************** 
		Запрос7 = ComConnection.NewObject("Запрос");
		Запрос7.Текст = "ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучетеФизическиеЛица.ФизическоеЛицо.Код КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете.ФизическиеЛица КАК ОтражениеЗарплатыВБухучетеФизическиеЛица
		|ГДЕ
		|	ОтражениеЗарплатыВБухучетеФизическиеЛица.Ссылка.Номер =  &Номер";
		Запрос7.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат7 = Запрос7.Выполнить();
		Выборка7 = Результат7.Выбрать();
		Пока Выборка7.Следующий() Цикл
			СтрокаУдержаннаяЗарплата = НовДок.ФизическиеЛица.Добавить();	
			СтрокаУдержаннаяЗарплата.ФизическоеЛицо = ПолучитьФизЛицо(Выборка7.ФизическоеЛицо,ComConnection);
		КонецЦикла;
		
		НовДок.Записать();
	КонецЦикла;
	
	
КонецПроцедуры // ЗагрузкаДокументовИзЗУП()

Процедура ПереЗагрузкаОтраженияИзЗУППоНовому(Ссылка) Экспорт
	
	//Список существующих документов
	Список = Новый Массив;
	Список.Добавить(Сокрлп(Ссылка.Номер));	
	
	Структура = Новый Структура("Отбор, Документы", "", Список);
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	//ЗаписатьJSON(ЗаписьJSON, Структура); 
	//ТелоСообщения = ЗаписьJSON.Закрыть();	

	ТелоСообщения = ргОбменДанными.СтруктуруВСтрокуJSON(Структура);
	ргОбменДанными.ОтправитьВОбмен("ОтражениеЗарплатыВБухУчете", Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("UMFO"), Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("ZUP"), Неопределено, ТелоСообщения);

//	ОбменДаннымиСобытие = Справочники.ОбменДанными.СоздатьЭлемент();
//	ОбменДаннымиСобытие.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоКоду("ОтражениеЗарплатыВБухУчете");
//	Получатель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("ZUP");
//	ОбменДаннымиСобытие.Получатель = Получатель;
//	ОбменДаннымиСобытие.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("UMFO");
//	ОбменДаннымиСобытие.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Исходящее;
//	ОбменДаннымиСобытие.ТелоСообщения = ТелоСообщения;
//	ОбменДаннымиСобытие.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
//	ОбменДаннымиСобытие.ДатаСоздания = ТекущаяДата();
//	ОбменДаннымиСобытие.Записать();
	
	////Отправляем список документов
	//Взаимодействия.ОтправкаSMS();
	//
	////Получаем документы
	//Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,False);
	//Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,False);       
	//Прокси.Пользователь = Получатель.Пользователь;
	//Прокси.Пароль = Получатель.Пароль;		
	//Результат = Прокси.LaunchDataExchange();	
	//
	////Отправляем ответ
	//Взаимодействия.ОтправкаSMS();
	
КонецПроцедуры // ПереЗагрузкаОтраженияИзЗУППоНовому()


Процедура ЗагрузкаНачислениеОценочныхОбязательствИзЗУП()Экспорт
	
	ComConnection = pcru_ex_ВнешниеСоединения.СоздатьВнешнееСоединение("1S","ЗУП");
	
	ВнешнийСписок = ComConnection.NewObject("Массив");
	
	Выборка = Документы.НачислениеОценочныхОбязательствПоОтпускам.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВнешнийСписок.Добавить(Сокрлп(Выборка.Номер));	
	КонецЦикла;
	
	Запрос = ComConnection.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	|	ОтражениеЗарплатыВБухучете.ПометкаУдаления КАК ПометкаУдаления,
	|	ОтражениеЗарплатыВБухучете.Номер КАК Номер,
	|	ОтражениеЗарплатыВБухучете.Дата КАК Дата,
	|	ОтражениеЗарплатыВБухучете.Проведен КАК Проведен,
	|	ОтражениеЗарплатыВБухучете.ПериодРегистрации КАК ПериодРегистрации,
	|	ОтражениеЗарплатыВБухучете.Организация КАК Организация,
	//|	ОтражениеЗарплатыВБухучете.ЗарплатаОтраженаВБухучете КАК ЗарплатаОтраженаВБухучете,
	|	ОтражениеЗарплатыВБухучете.Бухгалтер КАК Бухгалтер,
	|	ОтражениеЗарплатыВБухучете.КраткийСоставДокумента КАК КраткийСоставДокумента,
	|	ОтражениеЗарплатыВБухучете.Ответственный КАК Ответственный,
	|	ОтражениеЗарплатыВБухучете.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК ОтражениеЗарплатыВБухучете
	|ГДЕ
	|	НЕ ОтражениеЗарплатыВБухучете.Номер В (&Номер) ";
	
	Запрос.УстановитьПараметр("Номер", ВнешнийСписок);	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		//*********************************************************************** 
		НовДок = Документы.НачислениеОценочныхОбязательствПоОтпускам.СоздатьДокумент();
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  Выборка.Номер;
		НовДок.Дата =  Выборка.Дата;
		НовДок.Проведен =  Выборка.Проведен;
		НовДок.ПериодРегистрации =  Выборка.ПериодРегистрации;
		НовДок.Организация = pcru_УМФО.Организация();
		//		НовДок.ЗарплатаОтраженаВБухучете =  Выборка.ЗарплатаОтраженаВБухучете;
		НовДок.Номер =  Выборка.Номер;
		//*********************************************************************** 
		Запрос2 = ComConnection.NewObject("Запрос");
		Запрос2.Текст = "ВЫБРАТЬ
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.Ссылка КАК Ссылка,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.НомерСтроки КАК НомерСтроки,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.Подразделение.Код КАК Подразделение,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СпособОтраженияЗарплатыВБухучете.Наименование КАК СпособОтраженияЗарплатыВБухучете,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СуммаРезерва КАК СуммаРезерва,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СуммаРезерваНУ КАК СуммаРезерваНУ,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СуммаРезерваСтраховыхВзносов КАК СуммаРезерваСтраховыхВзносов,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СуммаРезерваСтраховыхВзносовНУ КАК СуммаРезерваСтраховыхВзносовНУ,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СуммаРезерваФССНесчастныеСлучаи КАК СуммаРезерваФССНесчастныеСлучаи,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СуммаРезерваФССНесчастныеСлучаиНУ КАК СуммаРезерваФССНесчастныеСлучаиНУ,
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.СтатьяФинансирования КАК СтатьяФинансирования
		|ИЗ
		|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства
		|ГДЕ
		|	НачислениеОценочныхОбязательствПоОтпускамОценочныеОбязательства.Ссылка.Номер = &Номер";
		Запрос2.УстановитьПараметр("Номер", Выборка.Номер);	
		Результат2 = Запрос2.Выполнить();
		Выборка2 = Результат2.Выбрать();
		Пока Выборка2.Следующий() Цикл
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.ОценочныеОбязательства.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка2);
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение =  ПолучитьПодразделение(Выборка2.Подразделение);
			//	СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка2.СпособОтраженияЗарплатыВБухучете);
			//	СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка2.СпособОтраженияЗарплатыВБухучете);
		КонецЦикла;
		//*********************************************************************** 
		
		НовДок.Записать();
	КонецЦикла;
	
	
КонецПроцедуры // ЗагрузкаДокументовИзЗУП()

Процедура ЗагрузкаНачислениеОценочныхОбязательствИзЗУПWS()Экспорт
	Массив = New Массив;
	//
	Выборка = Документы.НачислениеОценочныхОбязательствПоОтпускам.Выбрать();
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Сокрлп(Выборка.Номер));	
	КонецЦикла;
	//
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Массив); 
	СтрJSON = ЗаписьJSON.Закрыть();
	//
	Определение = Новый WSОпределения("http://ruspbpacc01/1c_zup/ws/DocumentExchange.1cws?wsdl","WS","159753WS");
	Прокси = Новый WSПрокси(Определение, "http://ruspbpacc01/DocumentExchange","pcru_DocumentExchange" ,"pcru_DocumentExchangeSoap" );       
	Прокси.Пользователь = "WS";      Прокси.Пароль = "159753WS";                
	Результат = Прокси.GetVacationsReserve(СтрJSON);
	//
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(Результат); 
	СтруктураОтвета= ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть();
	
	
	Для каждого Выборка Из СтруктураОтвета  Цикл
		//*********************************************************************** 
		НовДок = Документы.НачислениеОценочныхОбязательствПоОтпускам.СоздатьДокумент();
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  Выборка.Номер;
		
		ДатаНорм =  Выборка.Дата;
		ДатаНорм = СтрЗаменить(ДатаНорм,"-","");
		ДатаНорм = СтрЗаменить(ДатаНорм,":","");
		ДатаНорм = СтрЗаменить(ДатаНорм," ","");
		ДатаНорм = СтрЗаменить(ДатаНорм,"T","");
		ДатаНорм = Дата(ДатаНорм);
		//
		НовДок.Дата = ДатаНорм;
		
		ДатаНорм =  Выборка.ПериодРегистрации;
		ДатаНорм = СтрЗаменить(ДатаНорм,"-","");
		ДатаНорм = СтрЗаменить(ДатаНорм,":","");
		ДатаНорм = СтрЗаменить(ДатаНорм," ","");
		ДатаНорм = СтрЗаменить(ДатаНорм,"T","");
		ДатаНорм = Дата(ДатаНорм);
		
		НовДок.ПериодРегистрации =  ДатаНорм;
		
		НовДок.Организация = pcru_УМФО.Организация();
		НовДок.ОбязательстваОтраженыВБухучете =  Выборка.ОбязательстваОтраженыВБухучете;
		//		НовДок.Номер =  Выборка.Номер;
		//*********************************************************************** 
		
		Для каждого Выборка2 Из Выборка.ОценочныеОбязательстваПоСотрудникам  Цикл
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.ОценочныеОбязательства.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка2);
			СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_типзатрат = Выборка2.типзатрат ;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение =  ПолучитьПодразделение(Выборка2.Подразделение);
			//	СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка2.СпособОтраженияЗарплатыВБухучете);
			//	СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка2.СпособОтраженияЗарплатыВБухучете);
		КонецЦикла;
		//*********************************************************************** 
		
		НовДок.Записать();
	КонецЦикла;
	
	
КонецПроцедуры // ЗагрузкаДокументовИзЗУП()

Функция ПолучитьКонтрагента(Имя,Соединение)
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("Контрагенты",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Имя);	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
		
		Запрос = Соединение.NewObject("Запрос");
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	Представление(Контрагенты.ЮридическоеФизическоеЛицо) КАК ЮридическоеФизическоеЛицо,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.КодПоОКПО КАК КодПоОКПО
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Имя);	
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовыйКонтрагент,Выборка);
			Если Выборка.ЮридическоеФизическоеЛицо = "Юридическое лицо" Тогда
				НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;	
			КонецЕсли; 
			НовыйКонтрагент.Записать();
			Возврат НовыйКонтрагент.Ссылка;
		КонецЦикла;
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
	
КонецФункции // ПОлучитьФизЛицо()

Функция ПолучитьКонтрагентаWS(Имя, ВебСервис = Неопределено) Экспорт
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("Контрагенты",Имя);  
	
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Имя);	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
		
		Если ВебСервис = Неопределено Тогда
			Определение = Новый WSОпределения("http://ruspbpacc01/1c_zup/ws/DocumentExchange.1cws?wsdl","WS","159753WS");
			Прокси = Новый WSПрокси(Определение, "http://ruspbpacc01/DocumentExchange","Pcru_DocumentExchange" ,"Pcru_DocumentExchangeSoap" );       
			Прокси.Пользователь = "WS";
			Прокси.Пароль = "159753WS";
		Иначе
			Определение = Новый WSОпределения(ВебСервис.МестоположениеWSDL,ВебСервис.Пользователь,ВебСервис.Пароль,,,,False);
			Прокси = Новый WSПрокси(Определение,ВебСервис.URIПространстваИменСервиса, ВебСервис.ИмяСервиса, ВебСервис.ИмяТочкиПодключения,,,,,False);       
			Прокси.Пользователь = ВебСервис.Пользователь;
			Прокси.Пароль = ВебСервис.Пароль;
		КонецЕсли;
		
		Результат = Прокси.GetContractor(Имя);
		Если Результат ="Неопределено" Тогда
			Возврат Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли; 
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(Результат); 
		СтруктураЗапроса= ПрочитатьJSON(ЧтениеJSON); 
		ЧтениеJSON.Закрыть();
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйКонтрагент,СтруктураЗапроса);
		Если СтруктураЗапроса.ЮридическоеФизическоеЛицо = "Юридическое лицо" Тогда
			НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;	
		КонецЕсли; 
		НовыйКонтрагент.Записать();
		Возврат НовыйКонтрагент.Ссылка;		
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 

//		Запрос = Соединение.NewObject("Запрос");
//		Запрос.Текст = "ВЫБРАТЬ
//		|	Контрагенты.Наименование КАК Наименование,
//		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
//		|	Представление(Контрагенты.ЮридическоеФизическоеЛицо) КАК ЮридическоеФизическоеЛицо,
//		|	Контрагенты.ИНН КАК ИНН,
//		|	Контрагенты.КПП КАК КПП,
//		|	Контрагенты.КодПоОКПО КАК КодПоОКПО
//		|ИЗ
//		|	Справочник.Контрагенты КАК Контрагенты
//		|ГДЕ
//		|	Контрагенты.ИНН = &Наименование";
//		Запрос.УстановитьПараметр("Наименование", Имя);	
//		Результат = Запрос.Выполнить();
//		Выборка = Результат.Выбрать();
//		Пока Выборка.Следующий() Цикл
//			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
//			ЗаполнитьЗначенияСвойств(НовыйКонтрагент,Выборка);
//			Если Выборка.ЮридическоеФизическоеЛицо = "Юридическое лицо" Тогда
//				НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;	
//			КонецЕсли; 
//			НовыйКонтрагент.Записать();
//			Возврат НовыйКонтрагент.Ссылка;
//		КонецЦикла;
//		Возврат Справочники.Контрагенты.ПустаяСсылка();
//	Иначе
//		Возврат ДанныеСопоставления; 	
//	КонецЕсли; 
	
КонецФункции // ПОлучитьФизЛицо()

Функция ПолучитьПодразделение(Имя) Экспорт
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("Подразделение",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Код = &Код";
		Запрос.УстановитьПараметр("Код",Имя);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;	
		КонецЦикла;
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
КонецФункции // ПолучитьКонтрагента()

Функция ПолучитьФизЛицо(Имя,Соединение)
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("ФизЛицо",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Код = &Код";
		Запрос.УстановитьПараметр("Код", Имя);	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
		
		Запрос = Соединение.NewObject("Запрос");
		Запрос.Текст = "ВЫБРАТЬ
		|	ФизическиеЛица.Код КАК Код,
		|	ФизическиеЛица.Наименование КАК Наименование,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ФизическиеЛица.ИНН КАК ИНН,
		|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ФизическиеЛица.МестоРождения КАК МестоРождения,
		|	ФизическиеЛица.ФИО КАК ФИО,
		|	ФизическиеЛица.УточнениеНаименования КАК УточнениеНаименования,
		|	ФизическиеЛица.ДатаРегистрации КАК ДатаРегистрации,
		|	ФизическиеЛица.НаименованиеСлужебное КАК НаименованиеСлужебное,
		|	ФизическиеЛица.ПостоянноПроживалВКрыму18Марта2014Года КАК ПостоянноПроживалВКрыму18Марта2014Года,
		|	ФизическиеЛица.Фамилия КАК Фамилия,
		|	ФизическиеЛица.Имя КАК Имя,
		|	ФизическиеЛица.Отчество КАК Отчество
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Код = &Код";
		Запрос.УстановитьПараметр("Код", Имя);	
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовоеФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НовоеФизическоеЛицо,Выборка,"Код,Наименование,ДатаРождения,ИНН,СтраховойНомерПФР,МестоРождения,ФИО,УточнениеНаименования,ДатаРегистрации,НаименованиеСлужебное,ПостоянноПроживалВКрыму18Марта2014Года,Фамилия,Имя,Отчество");
			НовоеФизическоеЛицо.Записать();
			Возврат НовоеФизическоеЛицо.Ссылка;
		КонецЦикла;
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
	
КонецФункции // ПОлучитьФизЛицо()

Функция ПолучитьФизЛицоWS(Имя, ВебСервис = Неопределено) Экспорт
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("ФизЛицо",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Код = &Код";
		Запрос.УстановитьПараметр("Код", Имя);	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
		
		Если ВебСервис = Неопределено Тогда
			Определение = Новый WSОпределения("http://ruspbpacc01/1c_zup/ws/DocumentExchange.1cws?wsdl","WS","159753WS");
			Прокси = Новый WSПрокси(Определение, "http://ruspbpacc01/DocumentExchange","Pcru_DocumentExchange" ,"Pcru_DocumentExchangeSoap" );       
			Прокси.Пользователь = "WS";      Прокси.Пароль = "159753WS";
		Иначе
			Определение = Новый WSОпределения(ВебСервис.МестоположениеWSDL,ВебСервис.Пользователь,ВебСервис.Пароль,,,,False);
			Прокси = Новый WSПрокси(Определение,ВебСервис.URIПространстваИменСервиса, ВебСервис.ИмяСервиса, ВебСервис.ИмяТочкиПодключения,,,,,False);       
			Прокси.Пользователь = ВебСервис.Пользователь;
			Прокси.Пароль = ВебСервис.Пароль;
		КонецЕсли;
		
		Результат = Прокси.GetNaturalPerson(Имя);
		Если Результат ="Неопределено" Тогда
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(Результат); 
		СтруктураЗапроса= ПрочитатьJSON(ЧтениеJSON); 
		ЧтениеJSON.Закрыть();
		НовоеФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовоеФизическоеЛицо,СтруктураЗапроса,"Код,Наименование,ДатаРождения,ИНН,СтраховойНомерПФР,МестоРождения,ФИО,УточнениеНаименования,ДатаРегистрации,НаименованиеСлужебное,ПостоянноПроживалВКрыму18Марта2014Года,Фамилия,Имя,Отчество");
		НовоеФизическоеЛицо.Записать();
		Возврат НовоеФизическоеЛицо.Ссылка;
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
	
КонецФункции // ПОлучитьФизЛицо()

// Получить Способ Отражения Зарплаты в БухУчете
//
// Параметры:
//  Имя          - Строка - Имя способа отражения 
//                 Зарплаты в БухУчете
//
// Возвращаемое значение:
//   Справочник.СпособыОтраженияЗарплатыВБухУчете   - Способ Отражения Зарплаты в БухУчете
//
Функция ПолучитьСпособОтражения(Имя)Экспорт
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("СпособОтражения",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СпособыОтраженияЗарплатыВБухУчете.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтраженияЗарплатыВБухУчете
		|ГДЕ
		|	СпособыОтраженияЗарплатыВБухУчете.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование",Имя);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;	
		КонецЦикла;
		НовыйСпособОтражения = Справочники.СпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
		НовыйСпособОтражения.Наименование = Имя;
		НовыйСпособОтражения.Записать();
		Возврат НовыйСпособОтражения.Ссылка;
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
КонецФункции // ПолучитьСпособОтражения()

// Получить Способ Отражения Зарплаты в БухУчете
//
// Параметры:
//  Имя          - Строка - Имя способа отражения 
//                 Зарплаты в БухУчете
//
// Возвращаемое значение:
//   Справочник.СпособыОтраженияЗарплатыВБухУчете   - Способ Отражения Зарплаты в БухУчете
//
Функция ПолучитьСпособОтраженияПоProcesscode(Имя)Экспорт
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("ProcessCode",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Возврат Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка();
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
КонецФункции // ПолучитьСпособОтражения()

// Получить Вид Операции По Зарплате по представлению
//
// Параметры:
//  Имя  - Строка - Имя Вида операции По Зарплате
//
// Возвращаемое значение:
//   Перечисление.ВидыОперацийПоЗарплате   - ВидыОперацийПоЗарплате
//
Функция ПолучитьВидОперации(Имя)Экспорт
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("ВидНачисленияОплатыТрудаДляНУ",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыОперацийПоЗарплате.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ВидыОперацийПоЗарплате.Ссылка) КАК Имя
		|ИЗ
		|	Перечисление.ВидыОперацийПоЗарплате КАК ВидыОперацийПоЗарплате";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Имя = Имя Тогда
				Возврат Выборка.Ссылка
			КонецЕсли; 
		КонецЦикла;
		Возврат Перечисления.ВидыОперацийПоЗарплате.ПустаяСсылка();
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
КонецФункции // ПолучитьВидОперации()

// Получить Вид Начисления Оплаты Труда Для НУ
//
// Параметры:
//  Имя  - Строка - Имя  Вида Начисления Оплаты Труда Для НУ
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьВидНачисленияОплатыТрудаДляНУ(Имя)Экспорт
	ДанныеСопоставления =  РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СопоставитьДанные("ВидНачисленияОплатыТрудаДляНУ",Имя);  
	Если ДанныеСопоставления = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВидыНачисленийОплатыТрудаДляНУ.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ВидыНачисленийОплатыТрудаДляНУ.Ссылка) КАК Имя
		|ИЗ
		|	Перечисление.ВидыНачисленийОплатыТрудаДляНУ КАК ВидыНачисленийОплатыТрудаДляНУ";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Имя = Имя Тогда
				Возврат Выборка.Ссылка
			КонецЕсли; 
		КонецЦикла;
		Возврат Перечисления.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка();
	Иначе
		Возврат ДанныеСопоставления; 	
	КонецЕсли; 
КонецФункции // ПолучитьВидНачисленияОплатыТрудаДляНУ()

