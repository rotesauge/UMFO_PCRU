
Функция ОбработатьРезультатОбъекта(исхЗадача, Ошибка) Экспорт
	
	Результат = Ложь;
	Если исхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоКоду("ОтражениеЗарплатыВБухУчете") Тогда
		Результат = ОтражениеЗарплатыВБухучетеПринять(исхЗадача, Ошибка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтражениеЗарплатыВБухучетеПринять(исхЗадача, Ошибка)
	
	НачатьТранзакцию();
	Попытка		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(исхЗадача.ТелоОтвета);
		МассивДокументовОтражения = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Запрос = Новый Запрос;		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.Номер = &Номер";
		
		Для Каждого СтрокаДокументаОтражения Из МассивДокументовОтражения Цикл			
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаДокументаОтражения.Тело);
			СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Запрос.УстановитьПараметр("Номер", СтруктураДокументаОтражения.Номер);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НовДок = Выборка.Ссылка.ПолучитьОбъект();
				НовДок.НачисленнаяЗарплатаИВзносы.Очистить();
				НовДок.НачисленныйНДФЛ.Очистить();
				НовДок.УдержаннаяЗарплата.Очистить();
				НовДок.ВыплатаОтпусковЗаСчетРезерва.Очистить();
				НовДок.ФизическиеЛица.Очистить();
			Иначе
				НовДок = Документы.ОтражениеЗарплатыВБухучете.СоздатьДокумент();
			КонецЕсли;
			
			НовДок.Бухгалтер = ""; 
			НовДок.Номер =  СтруктураДокументаОтражения.Номер;
			НовДок.Дата =  ПрочитатьДатуJson(СтруктураДокументаОтражения.Дата, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.Дата);
			НовДок.Проведен =  СтруктураДокументаОтражения.Проведен;
			НовДок.ПериодРегистрации =  ПрочитатьДатуJson(СтруктураДокументаОтражения.ПериодРегистрации, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.ПериодРегистрации);
			НовДок.Организация =  pcru_УМФО.Организация();
			НовДок.ЗарплатаОтраженаВБухучете =  СтруктураДокументаОтражения.ЗарплатаОтраженаВБухучете;
			НовДок.КраткийСоставДокумента = СтруктураДокументаОтражения.КраткийСоставДокумента;
			НовДок.Комментарий = СтруктураДокументаОтражения.Комментарий;
			
			НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыНеДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
				СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
				СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode = СтруктураЗначений.ProcessCode;
				СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат = СтруктураЗначений.ТипЗатрат;
				СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				СтрокаНачисленнаяЗарплатаИВзносы.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];				
				СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);				
				СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
				СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "НачисленныйНДФЛНеДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];				
				СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
				СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "НачисленныйНДФЛДоходыКонтрагентов";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
				ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
				СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				СтрокаНачисленныйНДФЛ.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "УдержаннаяЗарплата";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата, СтруктураЗначений);
				СтрокаУдержаннаяЗарплата.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
				СтрокаУдержаннаяЗарплата.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
				Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
					СтрокаУдержаннаяЗарплата.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				Конецесли;
				СтрокаУдержаннаяЗарплата.Контрагент = pcru_ex_ЗУП.ПолучитьКонтрагентаWS(СтруктураЗначений.Контрагент, исхЗадача.Получатель);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			
			НаименованиеТЧДокумента = "ФизическиеЛица";
			НомерСтрокиТЧ = 0;
			Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
				СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
				СтрокаФизическиеЛица = НовДок.ФизическиеЛица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаФизическиеЛица, СтруктураЗначений);
				СтрокаФизическиеЛица.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, исхЗадача.Получатель);
				НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			КонецЦикла;
			НовДок.Записать();
			
		КонецЦикла;
		
		//

		//
		////Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
		////	вхЗадачаОб = вхЗадача.ПолучитьОбъект();
		////	вхЗадачаОб.Объект = НовДок.Ссылка;
		////	вхЗадачаОб.Записать();
		////КонецЕсли;

		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;

КонецФункции