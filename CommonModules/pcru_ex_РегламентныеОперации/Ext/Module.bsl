#Область  ЗагрузкаИзНав

Процедура ВыполнитьРегламентнуюОперацию(Ссылка)  export
	ВыполнитьРегламентныеОперации(Ссылка);
КонецПроцедуры // ()

Процедура ВыполнитьРегламентныеОперации(Ссылка = Неопределено )  export
	Запрос = Новый Запрос;
	Если Ссылка = Неопределено Тогда
		// Проверяем , вдруг кто выполняется
		Запрос.Текст = "ВЫБРАТЬ
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий КАК pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий
		|ГДЕ
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Статус = ЗНАЧЕНИЕ(Перечисление.pcru_ex_СтатусыОперации.Выполняется)
//		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Выполняется";
		|";

		//Выборка = Запрос.Выполнить().Выбрать();
		//Если Выборка.Следующий() Тогда
		//	//Если кто-то выполняется - выходим
		//	Возврат;
		//КонецЕсли;  
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			Возврат;
		КонецЕсли;

		//Если никто не выполняется - ищем кого бы выполнить
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.ТипЗадания КАК ТипЗадания,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Ссылка КАК Ссылка,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.НачалоПериода КАК НачалоПериода,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.КонецПериода КАК КонецПериода,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Статус КАК Статус
		|ИЗ
		|	Справочник.pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий КАК pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий
		|ГДЕ
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.ДатаНачалаВыполненияПлан <= &ТекДата
		|	И pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.ВыполнятьВФоне
		|	И НЕ pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Статус В (&МассивСтатусов)";
		
		//|	И НЕ pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Выполнено
		//|	И НЕ pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Ошибка";		
		
		МассивСтатусов = Новый Массив;
		МассивСтатусов.Добавить(Перечисления.pcru_ex_СтатусыОперации.Выполнено);
		МассивСтатусов.Добавить(Перечисления.pcru_ex_СтатусыОперации.Ошибка);
		Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
		Запрос.УстановитьПараметр("ТекДата",ТекущаяДата());
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.ТипЗадания КАК ТипЗадания,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Ссылка КАК Ссылка,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.НачалоПериода КАК НачалоПериода,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.КонецПериода КАК КонецПериода,
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Статус КАК Статус
		|ИЗ
		|	Справочник.pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий КАК pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий
		|ГДЕ
		|	pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
	КонецЕсли; 
	
	//Выборка = Запрос.Выполнить().Выбрать();
	ТЗ = Запрос.Выполнить().Выгрузить();
	//Пока Выборка.Следующий() Цикл
	
	Для Каждого Выборка Из ТЗ Цикл
		Если Выборка.Статус = Перечисления.pcru_ex_СтатусыОперации.Выполняется ИЛИ Выборка.Статус = Перечисления.pcru_ex_СтатусыОперации.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		
		Спр = Выборка.Ссылка.ПолучитьОбъект();
		//Если результат не пустой - то там либо ошибка либо "Задание Выполняется.."(если запустили вручную).
		//Если Спр.Результат <> "" Тогда
		//	Продолжить;
		//КонецЕсли;
		
		//Спр.Результат = "Задание Выполняется..";
		УстановитьСтатус(Спр,"Выполняется");
		Спр.Статус = Перечисления.pcru_ex_СтатусыОперации.Выполняется;
		Спр.ДатаНачалаВыполненияФакт = ТекущаяДата();
		Спр.Записать();
		
		Ошибка = "";
		Попытка
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ДогрузкаРезервовПрошлыйМесяц Тогда
				pcru_ex_Почта.ОтправкаПочты("ДогрузкаРезервовПрошлыйМесяц","ДогрузкаРезервовПрошлыйМесяц");
				ДогрузкаРезервовПрошлыйМесяц(Истина,Ошибка,Выборка.Ссылка);
			КонецЕсли; 
			//
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.РеализацииПрошлыйМесяц Тогда
				pcru_ex_Почта.ОтправкаПочты("ЗагрузкаРеализацийПрошлыйМесяц","ЗагрузкаРеализацийПрошлыйМесяц");
				ЗагрузкаРеализацийПрошлыйМесяц(Выборка.НачалоПериода,Выборка.КонецПериода,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			//	
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.СтандартныеПроводкиПрошлыйМесяц Тогда
				pcru_ex_Почта.ОтправкаПочты("ЗагрузкаИзНавПрошлыйМесяц_Стандарт","ЗагрузкаИзНавПрошлыйМесяц_Стандарт");
				ЗагрузкаИзНавПрошлыйМесяц_Стандарт(Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			//
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ПроводкиИзСписка Тогда
				pcru_ex_Почта.ОтправкаПочты("ПроводкиИзСписка","ПроводкиИзСписка "+Выборка.НачалоПериода+" "+Выборка.КонецПериода);
				МассивСчетов = Новый Массив;
				Для каждого Проводка Из Спр.ПроводкиДляЗагрузки Цикл
					МассивСчетов.Добавить(Проводка.НастройкаПроводокNAV);
				КонецЦикла;
				ПроводкиИзСписка(МассивСчетов,Выборка.НачалоПериода,Выборка.КонецПериода,Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			//
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.НестандартныеПроводкиПрошлыйМесяц Тогда
				pcru_ex_Почта.ОтправкаПочты("НестандартныеПроводкиПрошлыйМесяц","НестандартныеПроводкиПрошлыйМесяц");
				Обмен_Нестандартные(Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли; 
			//
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ЗагрузкаКорректировокПрошлыйМесяц Тогда
				pcru_ex_Почта.ОтправкаПочты("ЗагрузкаКорректировокПрошлыйМесяц","ЗагрузкаКорректировокПрошлыйМесяц");
				ЗагрузкаКорректировокПрошлыйМесяц(Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			
			
			///////////////////////////////////////////////////////////////////////////////////////////
			
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ЗагрузкаЗаймов Тогда
				pcru_ex_Почта.ОтправкаПочты("ЗагрузкаЗаймов","ЗагрузкаЗаймов "+Выборка.НачалоПериода+" "+Выборка.КонецПериода);
				ЗагрузкаЗаймов(Выборка.НачалоПериода,Выборка.КонецПериода,Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ПересчетГрафиковЗаймов Тогда
				pcru_ex_Почта.ОтправкаПочты("ПересчетГрафиковЗаймов","ПересчетГрафиковЗаймов "+Выборка.НачалоПериода+" "+Выборка.КонецПериода);
				ПересчетГрафиковЗаймов(Выборка.НачалоПериода,Выборка.КонецПериода,Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ЗагрузкаПлатежей Тогда
				pcru_ex_Почта.ОтправкаПочты("ЗагрузкаПлатежей","ЗагрузкаПлатежей "+Выборка.НачалоПериода+" "+Выборка.КонецПериода);
				ЗагрузкаПлатежей(Выборка.НачалоПериода,Выборка.КонецПериода,Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ПриостановкаНачисленийПоЗаймам Тогда
				pcru_ex_Почта.ОтправкаПочты("ПриостановкаНачисленийПоЗаймам","ПриостановкаНачисленийПоЗаймам "+Выборка.НачалоПериода+" "+Выборка.КонецПериода);
				ПриостановкаНачисленийПоЗаймам(Выборка.НачалоПериода,Выборка.КонецПериода,Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			
			Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ПересчетПроцентовПоЗаймам Тогда
				pcru_ex_Почта.ОтправкаПочты("ПересчетПроцентовПоЗаймам","ПересчетПроцентовПоЗаймам "+Выборка.НачалоПериода+" "+Выборка.КонецПериода);
				ПересчетПроцентовПоЗаймам(Выборка.НачалоПериода,Выборка.КонецПериода,Ложь,Ошибка,Выборка.Ссылка);
			КонецЕсли;
			
			
			//////////////////////////////////////////////////
			//Если Выборка.ТипЗадания = Перечисления.pcru_ex_ТипыРегламентныхЗаданий.ЗагрузкаИзНавВчера Тогда
			//	pcru_ex_Почта.ОтправкаПочты("ЗагрузкаИзНавВчера","ЗагрузкаИзНавВчера");
			//	ЗагрузкаИзНавВчера();
			//КонецЕсли; 
			Если Ошибка <> "" Тогда
				Спр = Выборка.Ссылка.ПолучитьОбъект();
				Спр.Результат = Ошибка;
				Спр.ДатаОкончанияВыполненияФакт = ТекущаяДата();
				Спр.Статус = Перечисления.pcru_ex_СтатусыОперации.Ошибка;
				УстановитьСтатус(Спр,"Ошибка");
				Спр.записать();
			Иначе
			Спр = Выборка.Ссылка.ПолучитьОбъект();
			Спр.Статус = Перечисления.pcru_ex_СтатусыОперации.Выполнено;
			Спр.ДатаОкончанияВыполненияФакт = ТекущаяДата();
			УстановитьСтатус(Спр,"Выполнено");
			Спр.записать();
			КонецЕсли; 
		Исключение
			Спр = Выборка.Ссылка.ПолучитьОбъект();
			Спр.ДатаОкончанияВыполненияФакт = ТекущаяДата();
			Спр.Результат = ОписаниеОшибки();
			Спр.Статус = Перечисления.pcru_ex_СтатусыОперации.Ошибка;
			УстановитьСтатус(Спр,"Ошибка");
			Спр.записать();
		КонецПопытки;  
	КонецЦикла;
КонецПроцедуры // ()

// Установка статуса
//
// Параметры:
//  Спр  - <СпраочникОбъект.pcru_ex_ЗапланированноеВыполнениеРегламентныхЗаданий> - 
//
//  Статус  - <Строка> - 
//
//
Процедура УстановитьСтатус(Спр,Статус)
	Спр.Выполняется = (Статус = "Выполняется");
	Спр.Выполнено   = (Статус = "Выполнено");
	Спр.Ошибка      = (Статус = "Ошибка");
КонецПроцедуры // ()


Процедура УстановитьРеквизит(Спр,Реквизит,Значение)Экспорт
	  Объект = Спр.ПолучитьОбъект();
	  Объект[Реквизит] = Значение;
	  Объект.Записать();
 КонецПроцедуры // ()


//******Однопоточно********************************************************************************************
Процедура ЗагрузкаКорректировокПрошлыйМесяц(ТолькоНовые=Ложь,Ошибка,Задание = Неопределено)
	Попытка
		НачатьТранзакцию();
		//
		Дата1 = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
		Дата2 = НачалоМесяца(ТекущаяДата())-1;
		Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
		// Установим начало отсчета на день раньше
		ТекДень = НачалоДня(Дата1)-1; 
		// Формируем массив дат
		Для I = 0 По Кол_Дней Цикл
			ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
			//
			Если Задание <> Неопределено Тогда
				Спр = Задание.ПолучитьОбъект();
				Спр.КоличествоДат = Кол_Дней;    
				Спр.НомерДаты = I;    
				Спр.ТекущаяДата = ТекДень;    
				Спр.записать();
			КонецЕсли; 
			//
			pcru_ex_NAV.Обмен_Корректировки(ТекДень,ТолькоНовые); 
		КонецЦикла;	
		//
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка=ОписаниеОшибки();
	КонецПопытки; 
КонецПроцедуры // ()


//НестандартныеПроводкиПрошлыйМесяц 
Процедура Обмен_Нестандартные(ТолькоНовые=Ложь,Ошибка="",Задание = Неопределено)
	Попытка
		НачатьТранзакцию();
		Дата1 = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
		Дата2 = НачалоМесяца(ТекущаяДата())-1;
		Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
		// Установим начало отсчета на день раньше
		ТекДень = НачалоДня(Дата1)-1; 
		// Формируем массив дат
		Для I = 0 По Кол_Дней Цикл
			ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
			//
			Если Задание <> Неопределено Тогда
				Спр = Задание.ПолучитьОбъект();
				Спр.КоличествоДат = Кол_Дней;    
				Спр.НомерДаты = I;    
				Спр.ТекущаяДата = ТекДень;    
				Спр.записать();
			КонецЕсли; 
			pcru_ex_NAV.Обмен_Нестандартные(ТекДень,ТолькоНовые); 
		КонецЦикла;	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка=ОписаниеОшибки();
	КонецПопытки; 
КонецПроцедуры // ()

#КонецОбласти		 


//*******Многопоточно ********************************************************************************************
//cтандартныеПроводкиПрошлыйМесяц 
Процедура ЗагрузкаИзНавПрошлыйМесяц_Стандарт(ТолькоНовые=Истина,Ошибка="",Задание = Неопределено)
	Дата1 = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	Дата2 = НачалоМесяца(ТекущаяДата())-1;
	Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
	// Установим начало отсчета на день раньше
	ТекДень = НачалоДня(Дата1)-1; 
	Массив_УИД_Заданий = Новый Массив;
	// Формируем массив дат
	Для I = 0 По Кол_Дней Цикл
		ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ТекДень);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ТекДень;    
			Спр.записать();
		КонецЕсли; 
		//
		pcru_ex_NAV.УниверсальныйОбменНаСервереПоПравиламИзСправочника(ТекДень,Истина,Истина,Ошибка,Задание);
		//ФоновыеЗадания.Выполнить("pcru_ex_NAV.УниверсальныйОбменНаСервереПоПравиламИзСправочника",ПараметрыВыполнения,УникальныйИдентификатор);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);
	КонецЦикла;	
	//Выполняютсязадания = Истина;
	//Пока Выполняютсязадания Цикл
	//	Выполняютсязадания = Ложь;
	//	Для каждого УИД Из Массив_УИД_Заданий Цикл
	//		Если ЗаданиеВыполняется(УИД) Тогда
	//			Выполняютсязадания = Истина;
	//			Прервать;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЦикла; 
КонецПроцедуры // ()

Процедура ЗагрузкаРеализацийПрошлыйМесяц(НачалоПериода,КонецПериода,Ошибка,Задание = Неопределено)
	//
	ТолькоНовые=Истина;
	//
	Если ЗначениеЗаполнено(НачалоПериода)  Тогда
		Дата1 = НачалоПериода;
	Иначе	
		Дата1 = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	КонецЕсли;
	Если ЗначениеЗаполнено(КонецПериода)  Тогда
		Дата2 = КонецПериода;
	Иначе	
		Дата2 = НачалоМесяца(ТекущаяДата())-1;
	КонецЕсли;
	Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
	// Установим начало отсчета на день раньше
	ТекДень = НачалоДня(Дата1)-1; 
	Массив_УИД_Заданий = Новый Массив;
	// Формируем массив дат
	Для I = 0 По Кол_Дней Цикл
		ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ТекДень);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ТекДень;    
			Спр.записать();
		КонецЕсли; 
		//
		pcru_ex_NAV.Обмен_Реализации( ТекДень,Истина,Истина,Ошибка,Задание);
		//ФоновыеЗадания.Выполнить("pcru_ex_NAV.Обмен_Реализации",ПараметрыВыполнения,УникальныйИдентификатор);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);
	КонецЦикла;	
	//Выполняютсязадания = Истина;
	//Пока Выполняютсязадания Цикл
	//	Выполняютсязадания = Ложь;
	//	Для каждого УИД Из Массив_УИД_Заданий Цикл
	//		Если ЗаданиеВыполняется(УИД) Тогда
	//			Выполняютсязадания = Истина;
	//			Прервать;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЦикла; 
	//
КонецПроцедуры // ()

Процедура ПроводкиИзСписка(МассивСчетов,НачалоПериода,КонецПериода,ТолькоНовые=Ложь,ТекстОшибки = "",Задание = Неопределено)
	//
	Дата1 = НачалоДня(НачалоПериода);//НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
	Дата2 = КонецДня(КонецПериода);//НачалоМесяца(ТекущаяДата())-1;
	Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
	// Установим начало отсчета на день раньше
	ТекДень = НачалоДня(Дата1)-1; 
	Массив_УИД_Заданий = Новый Массив;
	// Формируем массив дат
	Для I = 0 По Кол_Дней Цикл
		ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(МассивСчетов);
		ПараметрыВыполнения.Добавить(ТекДень);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ТекДень;    
			Спр.записать();
		КонецЕсли; 
		//
		pcru_ex_NAV.УниверсальныйОбменНаСервереПоПравиламИзСправочникаМассивСчетов(МассивСчетов,ТекДень,Истина,Истина,ТекстОшибки,Задание);
		//ФоновыеЗадания.Выполнить("pcru_ex_NAV.УниверсальныйОбменНаСервереПоПравиламИзСправочникаМассивСчетов",ПараметрыВыполнения,УникальныйИдентификатор);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);
	КонецЦикла;	
	//Выполняютсязадания = Истина;
	//Пока Выполняютсязадания Цикл
	//	Выполняютсязадания = Ложь;
	//	Для каждого УИД Из Массив_УИД_Заданий Цикл
	//		Если ЗаданиеВыполняется(УИД) Тогда
	//			Выполняютсязадания = Истина;
	//			Прервать;
	//		КонецЕсли; 
	//	КонецЦикла; 
	//КонецЦикла; 
	//	
КонецПроцедуры // ()

Процедура ЗагрузкаЗаймов(НачалоПериода, КонецПериода, ТолькоНовые=Ложь, ТекстОшибки = "", Задание = Неопределено)
	
	Дата1 = НачалоДня(НачалоПериода);
	Дата2 = КонецДня(КонецПериода);
	Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);

	ТекДень = НачалоДня(Дата1)-1; 
	Массив_УИД_Заданий = Новый Массив;

	Для I = 0 По Кол_Дней Цикл
		ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ТекДень);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ТекДень;    
			Спр.записать();
		КонецЕсли; 

		pcru_ex_NAV.ЗагрузитьЗаймыЗаДень(ТекДень, Истина, Истина, ТекстОшибки, Задание);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);
	КонецЦикла;	

КонецПроцедуры

Процедура ПересчетГрафиковЗаймов(НачалоПериода, КонецПериода, ТолькоНовые=Ложь, ТекстОшибки = "", Задание = Неопределено)
	
	Дата1 = НачалоДня(НачалоПериода);
	Дата2 = КонецДня(КонецПериода);
	Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);

	ТекДень = НачалоДня(Дата1)-1; 
	Массив_УИД_Заданий = Новый Массив;

	Для I = 0 По Кол_Дней Цикл
		ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ТекДень);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ТекДень;    
			Спр.записать();
		КонецЕсли; 

		pcru_ex_NAV.ПересчетГрафиковЗаймовЗаДень(ТекДень, Истина, Истина, ТекстОшибки, Задание);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);
	КонецЦикла;	

КонецПроцедуры

Процедура ЗагрузкаПлатежей(НачалоПериода, КонецПериода, ТолькоНовые=Ложь, ТекстОшибки = "", Задание = Неопределено)
	
	//Получаем даты платежей
	ДатыПлатежей = pcru_ex_NAV.ПолучитьМассивДатПлатежей();		
	Если ДатыПлатежей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кол_Дней = ДатыПлатежей.Количество();
	Массив_УИД_Заданий = Новый Массив;
	I = 1;
	Для Каждого ДатаПлатежа Из ДатыПлатежей Цикл
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ДатаПлатежа);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ДатаПлатежа;    
			Спр.записать();
		КонецЕсли; 

		pcru_ex_NAV.ЗагрузкаПлатежейЗаДень(ДатаПлатежа, Истина, Истина, ТекстОшибки, Задание);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);	
		I = I + 1;
	КонецЦикла;

КонецПроцедуры

Процедура ПриостановкаНачисленийПоЗаймам(НачалоПериода, КонецПериода, ТолькоНовые=Ложь, ТекстОшибки = "", Задание = Неопределено)

	Дата1 = НачалоДня(НачалоПериода);
	Дата2 = КонецДня(КонецПериода);
	Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);

	ТекДень = НачалоДня(Дата1)-1; 
	Массив_УИД_Заданий = Новый Массив;

	Для I = 0 По Кол_Дней Цикл
		ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ТекДень);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ТекДень;    
			Спр.записать();
		КонецЕсли; 

		pcru_ex_NAV.ПриостановкаНачисленийПоЗаймамЗаДень(ТекДень, Истина, Истина, ТекстОшибки, Задание);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);
	КонецЦикла;	

КонецПроцедуры

Процедура ПересчетПроцентовПоЗаймам(НачалоПериода, КонецПериода, ТолькоНовые=Ложь, ТекстОшибки = "", Задание = Неопределено)
	Дата2 = КонецДня(КонецПериода);
	
	МассивДатЗаймов = pcru_ex_NAV.ПолучитьМассивДатЗаймов();
	Если МассивДатЗаймов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кол_Дней = МассивДатЗаймов.Количество();
	Массив_УИД_Заданий = Новый Массив;
	I = 1;
	Для Каждого ДатаЗайма Из МассивДатЗаймов Цикл
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ДатаЗайма);
		ПараметрыВыполнения.Добавить(Ложь);
		ПараметрыВыполнения.Добавить(ТолькоНовые);
		//
		Если Задание <> Неопределено Тогда
			Спр = Задание.ПолучитьОбъект();
			Спр.КоличествоДат = Кол_Дней;    
			Спр.НомерДаты = I;    
			Спр.ТекущаяДата = ДатаЗайма;    
			Спр.записать();
		КонецЕсли; 

		pcru_ex_NAV.ПересчетПроцентовПоЗаймамЗаДень(ДатаЗайма, Дата2, Истина, Истина, ТекстОшибки, Задание);
		Массив_УИД_Заданий.Добавить(УникальныйИдентификатор);	
		I = I + 1;
	КонецЦикла;

КонецПроцедуры

//*******************************************************************************************************************
Процедура ДогрузкаРезервовПрошлыйМесяц(ТолькоНовые=Ложь,Ошибка = "",Задание = Неопределено)
	//
	Попытка
		НачатьТранзакцию();
		Дата1 = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
		Дата2 = НачалоМесяца(ТекущаяДата())-1;
		Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
		// Установим начало отсчета на день раньше
		ТекДень = НачалоДня(Дата1)-1; 
		// Формируем массив дат
		Для I = 0 По Кол_Дней Цикл
			ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
			//
			Если Задание <> Неопределено Тогда
				Спр = Задание.ПолучитьОбъект();
				Спр.КоличествоДат = Кол_Дней;    
				Спр.НомерДаты = I;    
				Спр.ТекущаяДата = ТекДень;    
				Спр.записать();
			КонецЕсли; 
			pcru_ex_NAV.Обмен_Резервы(ТекДень,Истина,ТолькоНовые,Ошибка,Задание); 
		КонецЦикла;	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка=ОписаниеОшибки();
	КонецПопытки; 
	
КонецПроцедуры // ()

Процедура ЗагрузкаИзНавВчера(ТолькоНовые=Ложь)
	////
	//Дата1 = Началодня(Началодня(ТекущаяДата())-1);
	//Дата2 = Началодня(ТекущаяДата());
	//Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
	//// Установим начало отсчета на день раньше
	//ТекДень = НачалоДня(Дата1)-1; 
	//// Формируем массив дат
	//Для I = 0 По Кол_Дней Цикл
	//	ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
	//	pcru_ex_NAV.Обмен(ТекДень,ТолькоНовые); 
	//КонецЦикла;	
	////	
	
	
	Попытка
		НачатьТранзакцию();
		//
		Дата1 = НачалоМесяца(НачалоМесяца(ТекущаяДата())-1);
		Дата2 = НачалоМесяца(ТекущаяДата())-1;
		Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
		// Установим начало отсчета на день раньше
		ТекДень = НачалоДня(Дата1)-1; 
		// Формируем массив дат
		Для I = 0 По Кол_Дней Цикл
			ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
			pcru_ex_NAV.УниверсальныйОбменНаСервереПоПравиламИзСправочника(ТекДень,0,Ложь,"");
		КонецЦикла;	
		//
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Ошибка=ОписаниеОшибки();
	КонецПопытки; 
	
КонецПроцедуры // ()
//*******************************************************************************************************************

Процедура ВыполнитьРегламентныеОперацииПрофикредит()  export
	pcru_CRM.РегламентныйОбменКонтрагентами();
	pcru_ex_WSWORKS.ОбновитьСостояния();
КонецПроцедуры	

Процедура УдалениеДокументовЗагрузкиМногопоточно(Дата1,Дата2)export
	Кол_Дней =ДеньГода(Дата2) - ДеньГода(Дата1);
	// Установим начало отсчета на день раньше
	ТекДень = НачалоДня(Дата1)-1; 
	// Формируем массив дат
	Для I = 0 По Кол_Дней Цикл
		ТекДень =  КонецДня(Дата(КонецДня(ТекДень)+1));
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ТекДень);
		ПараметрыВыполнения.Добавить(ТекДень);
		
		ФоновыеЗадания.Выполнить("pcru_ex_РегламентныеОперации.УдалениеДокументовЗагрузки",ПараметрыВыполнения,УникальныйИдентификатор);
		
	КонецЦикла;	
	//	
КонецПроцедуры

Процедура УдалениеДокументовЗагрузки(Дата1,Дата2)export
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ответственный.Наименование В (""USER"",""Администратор"")
	|	И РеализацияТоваровУслуг.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Дата <= &Дата2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ответственный.Наименование В (""USER"",""Администратор"")
	|	И СчетФактураВыданный.Дата >= &Дата1
	|	И СчетФактураВыданный.Дата <= &Дата2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ответственный.Наименование В (""USER"",""Администратор"")
	|	И КорректировкаРеализации.Дата >= &Дата1
	|	И КорректировкаРеализации.Дата <= &Дата2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БНФОМемориальныйОрдер.Ссылка
	|ИЗ
	|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
	|ГДЕ
	|	БНФОМемориальныйОрдер.Ответственный.Наименование В (""USER"",""Администратор"")
	|	И БНФОМемориальныйОрдер.Дата >= &Дата1
	|	И БНФОМемориальныйОрдер.Дата <= &Дата2";
	Запрос.УстановитьПараметр("Дата1",НачалоДня(Дата1) );
	Запрос.УстановитьПараметр("Дата2",КонецДня(Дата2) );
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Об = Выборка.Ссылка.ПолучитьОбъект();
			Об.Удалить();
		Исключение
			Ошибка=ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция ЗапуститьФоновоеВыполнение(ТекстПроцедуры,СтруктураПараметров=Неопределено) Экспорт
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТекстПроцедуры);
	ПараметрыВыполнения.Добавить(СтруктураПараметров);
	
	ФоновыеЗадания.Выполнить("ФоновоеВыполнение.ФоноваяПроцедура",ПараметрыВыполнения,УникальныйИдентификатор);
	Возврат УникальныйИдентификатор;
КонецФункции

Процедура ФоноваяПроцедура(ТекстМодуля,ПараметрыВыполнения) Экспорт
	ПолныйТекстМодуля = "";
	Для Каждого ТекПараметр Из ПараметрыВыполнения Цикл
		ПолныйТекстМодуля = ПолныйТекстМодуля+ТекПараметр.Ключ+"=ПараметрыВыполнения."+ТекПараметр.Ключ+";"+Символы.ПС;
	КонецЦикла;
	ПолныйТекстМодуля = ПолныйТекстМодуля + ТекстМодуля;
	Выполнить(ПолныйТекстМодуля);
КонецПроцедуры

Функция НайтиЗадание(Идентификатор) Экспорт
	// Считывает состояние фонового задания по переданному идентификатору.
	//
	// Параметры:
	//   Идентификатор - УникальныйИдентификатор - Идентификатор фонового задания.
	//
	// Возвращаемое значение:
	//   Неопределено - Задание не найдено.
	//   Структура - Сведения о задании.
	//       * Выполняется - Булево - Истина когда фоновое задание еще выполняется.
	//       * Успешно     - Булево - Истина когда сеанс фонового задания завершился без ошибок.
	//       * Ошибка      - Строка, ИнформацияОбОшибке, Неопределено - Описание ошибки.
	//
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Выполняется, Успех, Ошибка", Ложь, Ложь, Неопределено);
	Если Идентификатор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.Выполняется = Истина;
	Иначе
		Результат.Выполняется = Ложь;
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Успех = Истина;
		Иначе
			Результат.Успех = Ложь;
			Результат.Ошибка = Задание.ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗаданиеВыполняется(Идентификатор) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Идентификатор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если Задание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
//*******************************************************************************************************************
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОчисткаПериода(дата1,дата2)Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
	|ГДЕ
	|	БНФОМемориальныйОрдер.Дата >= &Дата1
	|	И БНФОМемориальныйОрдер.Дата < &Дата2
	|	И БНФОМемориальныйОрдер.Ответственный.Наименование В(&Наименование)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Дата < &Дата2
	|	И РеализацияТоваровУслуг.Ответственный.Наименование В(&Наименование)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Дата >= &Дата1
	|	И КорректировкаРеализации.Дата < &Дата2
	|	И КорректировкаРеализации.Ответственный.Наименование В(&Наименование)";
	Запрос.УстановитьПараметр("Дата1", дата1);
	Запрос.УстановитьПараметр("Дата2", дата2);
	Н = новый Массив;
	Н.Добавить("USER");
	Н.Добавить("Администратор");
	Запрос.УстановитьПараметр("Наименование", Н);
	Выборка = Запрос.Выполнить().Выбрать();
	Сч = 100;
	МассивСсылок = Новый  Массив;
	Пока Выборка.Следующий() Цикл
		Если Сч = 100 Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор;
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(МассивСсылок);
			ФоновыеЗадания.Выполнить("pcru_ex_РегламентныеОперации.УдалениеМассиваДокументов",ПараметрыВыполнения,УникальныйИдентификатор);
			//
			Сч = 0;
			МассивСсылок = Новый  Массив;
		Конецесли;
		МассивСсылок.Добавить(Выборка.Ссылка);
		СЧ = Сч + 1;
	КонецЦикла;
	// Вставить содержимое обработчика.
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(МассивСсылок);
	ФоновыеЗадания.Выполнить("pcru_ex_РегламентныеОперации.УдалениеМассиваДокументов",ПараметрыВыполнения,УникальныйИдентификатор);
	
	
КонецФункции // Очистка()
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УдалениеМассиваДокументов(МассивД) Экспорт
	
	Для каждого ЭлементМассива Из МассивД Цикл
		
		об = ЭлементМассива.ПолучитьОбъект();
		об.Удалить(); 	
		
	КонецЦикла; 
	
КонецФункции // УдалениеМассиваДокументов()
