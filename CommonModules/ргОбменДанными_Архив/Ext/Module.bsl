#Область  РегВходящие
Процедура ргОбменРаботаСВходящими() Экспорт
	Попытка
		Ошибка = "";
		Пока ргОбменВходящиеВыполнитьЗадачу(Ошибка) И (Ошибка="") Цикл
		КонецЦикла;	
		
		Если Ошибка <> "" Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка ргОбменВходящиеВыполнитьЗадачу", Ошибка);
		КонецЕсли;	
	Исключение
		pcru_ex_Почта.ОтправкаПочты("Исключение ргОбменРаботаСВходящими", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ргОбменВходящиеВыполнитьЗадачу(Ошибка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменДанными.Ссылка КАК Ссылка,
	|	ОбменДанными.ТочкаМаршрута КАК ТочкаМаршрута
	|ИЗ
	|	Справочник.ОбменДанными КАК ОбменДанными
	|ГДЕ
	|	ОбменДанными.ТипСообщения = &ТипСообщения
	| 	И НЕ ОбменДанными.ЕстьОшибка
	|	И ОбменДанными.ТочкаМаршрута В (&ТочкаМаршрута)";

	МассивТочекМаршрута = Новый Массив;
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.Новое);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения);
	
	Запрос.УстановитьПараметр("ТипСообщения", Перечисления.ОбменДаннымиТипыСообщений.Входящее);	
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочекМаршрута);
	
	РезультатВыполнения = Запрос.Выполнить();	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выб = РезультатВыполнения.Выбрать();
	Выб.Следующий();
	Если Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения Тогда
		ргОбменВходящиеОтправитьПОдтверждение(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое Тогда
		ргОбменВходящиеПринять(Выб.Ссылка, Ошибка);
	КонецЕсли;
	
	Если Ошибка <> "" Тогда
		ОБ = Выб.Ссылка.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ЕстьОшибка = TRUE;
		ОБ.Ошибка = Ошибка;
		ОБ.Записать();
	КонецЕсли;
	
	Возврат (Ошибка = "");
	
КонецФункции	

Функция ргОбменВходящиеОтправитьПОдтверждение(вхЗадача,Ошибка)
	
	Получатель=вхЗадача.Отправитель;
	Если Получатель.ВидСоединения= Перечисления.ОбменДаннымиВидыСоединений.COM1C Тогда
		Попытка
			НачатьТранзакцию();
			COMConnector = Новый COMОбъект("V83.COMConnector");
			СтрокаПодключения = Получатель.СтрокаПодключения;
			ComConnection = COMConnector.Connect(СтрокаПодключения);
			Рез=ComConnection.ConfirmMessage(XMLСтрока(вхЗадача));		
			Если Рез<>"ОК" Тогда
				Ошибка=Рез;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка=ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;
	//
	Если Получатель.ВидСоединения= Перечисления.ОбменДаннымиВидыСоединений.WEB Тогда
		Попытка
			НачатьТранзакцию();
			Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,ложь);
			Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,ложь);       
			Прокси.Пользователь = Получатель.Пользователь;
			Прокси.Пароль = Получатель.Пароль;
			Рез = Прокси.ConfirmMessage(XMLСтрока(вхЗадача));
			Если Рез<>"ОК" Тогда
				Ошибка=Рез;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка=ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;	
	//
	Если Получатель.ВидСоединения= Перечисления.ОбменДаннымиВидыСоединений.HTTP Тогда
		Попытка
			НачатьТранзакцию();
			//1. создаем HTTP-соединение
			HTTP = Новый HTTPСоединение(Получатель.HTTPАдрес,,,,,,,Ложь);
			//2. создаем соответствие ЗаголовокЗапросаHTTP и заполняем заголовки
			ЗаголовокЗапросаHTTP = Новый Соответствие();
			Для каждого ЗаголовокHTTP Из Получатель.ЗаголовкиHTTP Цикл
				ЗаголовокЗапросаHTTP.Вставить(ЗаголовокHTTP.Ключ,ЗаголовокHTTP.Значение);
			КонецЦикла; 
			//3. создаем HTTP-запрос
			HTTPЗапрос = Новый HTTPЗапрос(Получатель.HTTPАдрес,ЗаголовокЗапросаHTTP);
			//4. отправляем HTTP-запрос
			Ответ = HTTP.Получить(HTTPЗапрос, "С:\Demo\logo.png");
			//5. обрабатывает ответ на запрос
			Если Ответ.КодСостояния = 200 Тогда
				Рез = Ответ.ПолучитьТелоКакСтроку();
				Если Рез<>"ОК" Тогда
					Ошибка=Рез;
					ОтменитьТранзакцию();
					Возврат ложь;
				КонецЕсли;
			Иначе
				Ошибка = "Статус-код " + Ответ.КодСостояния;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли
		Исключение
			Ошибка=ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;	
	//
	Если Ошибка = "" Тогда
		Попытка
			НачатьТранзакцию();
			ОБ = вхЗадача.ПолучитьОбъект();
			ОБ.Заблокировать();
			ОБ.ДатаЗавершения = ТекущаяДата();
			ОБ.ТочкаМаршрута=Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
			ОБ.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка=ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли; 
	
КонецФункции

Функция ргОбменВходящиеПринять(вхЗадача,Ошибка)
	
	Объект = Неопределено;
	Если вхЗадача.ВидСообщения.Наименование = "НачислениеОценочныхОбязательств" Тогда
		Результат = НачислениеОценочныхОбязательствПринять(вхЗадача, Объект, Ошибка);
	ИначеЕсли вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоКоду("ОтражениеЗарплатыВБухУчете") Тогда
		Результат = ОтражениеЗарплатыВБухучетеПринять(вхЗадача, Объект, Ошибка);
	ИначеЕсли вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоКоду("ПлатежноеПоручение") Тогда
		Результат = ПлатежноеПоручениеПринять(вхЗадача, Объект, Ошибка);
	КонецЕсли;	
	
	Попытка
		НачатьТранзакцию();
		ОБ = вхЗадача.ПолучитьОбъект();
		ОБ.Заблокировать();
		Если Объект <> Неопределено Тогда
			ОБ.Объект = Объект;
		КонецЕсли;
		ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения;
		ОБ.ЕстьОшибка = НЕ Результат;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = ОписаниеОшибки();
		Если ТранзакцияАктивна()  Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция НачислениеОценочныхОбязательствПринять(вхЗадача, Объект, Ошибка)
	Попытка
		НачатьТранзакцию();
		Выборка=pcru_ex_WSWORKS.СтрокуJSONВСтруктуру(вхЗадача.ТипСообщения);
		//Для каждого Выборка Из СтруктураОтвета  Цикл
		//*********************************************************************** 
		НовДок = Документы.НачислениеОценочныхОбязательствПоОтпускам.СоздатьДокумент();
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  Выборка.Номер;
		
		//ДатаНорм =  Выборка.Дата;
		//ДатаНорм = СтрЗаменить(ДатаНорм,"-","");
		//ДатаНорм = СтрЗаменить(ДатаНорм,":","");
		//ДатаНорм = СтрЗаменить(ДатаНорм," ","");
		//ДатаНорм = СтрЗаменить(ДатаНорм,"T","");
		//ДатаНорм = Дата(ДатаНорм);
		ДатаНорм = ПрочитатьДатуJson(Выборка.Дата, ФорматДатыJSON.ISO);
		//
		НовДок.Дата = ДатаНорм;
		
		//ДатаНорм =  Выборка.ПериодРегистрации;
		//ДатаНорм = СтрЗаменить(ДатаНорм,"-","");
		//ДатаНорм = СтрЗаменить(ДатаНорм,":","");
		//ДатаНорм = СтрЗаменить(ДатаНорм," ","");
		//ДатаНорм = СтрЗаменить(ДатаНорм,"T","");
		//ДатаНорм = Дата(ДатаНорм);
		ДатаНорм = ПрочитатьДатуJson(Выборка.ПериодРегистрации, ФорматДатыJSON.ISO);
		
		НовДок.ПериодРегистрации =  ДатаНорм;
		
		НовДок.Организация = pcru_УМФО.Организация();
		НовДок.ОбязательстваОтраженыВБухучете =  Выборка.ОбязательстваОтраженыВБухучете;
		//		НовДок.Номер =  Выборка.Номер;
		//*********************************************************************** 
		
		Для каждого Выборка2 Из Выборка.ОценочныеОбязательстваПоСотрудникам  Цикл
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.ОценочныеОбязательства.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка2);
			СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_типзатрат = Выборка2.типзатрат ;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  pcru_ex_ЗУП.ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение =  pcru_ex_ЗУП.ПолучитьПодразделение(Выборка2.Подразделение);
			//	СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка2.СпособОтраженияЗарплатыВБухучете);
			//	СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка2.СпособОтраженияЗарплатыВБухучете);
		КонецЦикла;
		//*********************************************************************** 
		НовДок.Записать();
		//КонецЦикла;
		
		//Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
		//	вхЗадачаОб = вхЗадача.ПолучитьОбъект();
		//	вхЗадачаОб.Объект = НовДок.Ссылка;
		//	вхЗадачаОб.Записать();
		//КонецЕсли;

		Объект = НовДок.Ссылка;
		ЗафиксироватьТранзакцию();
		ВОзврат Истина;
		
	Исключение
		Ошибка=ОписаниеОшибки();
		Если ТранзакцияАктивна()  Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ргОбменВходящиеПринять(Выб.Ссылка,Ошибка)()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтражениеЗарплатыВБухучетеПринять(вхЗадача, Объект, Ошибка)
	
	Попытка
		НачатьТранзакцию();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(вхЗадача.ТелоСообщения);
		СтруктураДокументаОтражения = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номер", СтруктураДокументаОтражения.Номер);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
		|ГДЕ
		|	ОтражениеЗарплатыВБухучете.Номер = &Номер";		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НовДок = Выборка.Ссылка.ПолучитьОбъект();
			НовДок.НачисленнаяЗарплатаИВзносы.Очистить();
			НовДок.НачисленныйНДФЛ.Очистить();
			НовДок.УдержаннаяЗарплата.Очистить();
			НовДок.ВыплатаОтпусковЗаСчетРезерва.Очистить();
			НовДок.ФизическиеЛица.Очистить();
		Иначе
			НовДок = Документы.ОтражениеЗарплатыВБухучете.СоздатьДокумент();
		КонецЕсли;
		
		НовДок.Бухгалтер = ""; 
		НовДок.Номер =  СтруктураДокументаОтражения.Номер;
		НовДок.Дата =  ПрочитатьДатуJson(СтруктураДокументаОтражения.Дата, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.Дата);
		НовДок.Проведен =  СтруктураДокументаОтражения.Проведен;
		НовДок.ПериодРегистрации =  ПрочитатьДатуJson(СтруктураДокументаОтражения.ПериодРегистрации, ФорматДатыJSON.ISO); //ПреобразоватьДатуИзСтрокиJSON(СтруктураДокументаОтражения.ПериодРегистрации);
		НовДок.Организация =  pcru_УМФО.Организация();
		НовДок.ЗарплатаОтраженаВБухучете =  СтруктураДокументаОтражения.ЗарплатаОтраженаВБухучете;
		НовДок.КраткийСоставДокумента = СтруктураДокументаОтражения.КраткийСоставДокумента;
		НовДок.Комментарий = СтруктураДокументаОтражения.Комментарий;
		
		НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыНеДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
			
			СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
			СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode = СтруктураЗначений.ProcessCode;
			СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат = СтруктураЗначений.ТипЗатрат;
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "НачисленнаяЗарплатаИВзносыДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы, СтруктураЗначений);
			
			СтрокаНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов = ПрочитатьДатуJson(СтруктураЗначений.ПериодПринятияРасходов, ФорматДатыJSON.ISO);//ПреобразоватьДатуИзСтрокиJSON(СтруктураЗначений.ПериодПринятияРасходов);
			СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете = pcru_ex_ЗУП.ПолучитьСпособОтражения(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ = pcru_ex_ЗУП.ПолучитьВидНачисленияОплатыТрудаДляНУ(СтруктураЗначений.СпособОтраженияЗарплатыВБухучете);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "НачисленныйНДФЛНеДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
			
			СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "НачисленныйНДФЛДоходыКонтрагентов";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ, СтруктураЗначений);
			
			СтрокаНачисленныйНДФЛ.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			СтрокаНачисленныйНДФЛ.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "УдержаннаяЗарплата";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата, СтруктураЗначений);
			
			СтрокаУдержаннаяЗарплата.Подразделение = pcru_ex_ЗУП.ПолучитьПодразделение(СтруктураЗначений.Подразделение);
			СтрокаУдержаннаяЗарплата.ВидОперации = pcru_ex_ЗУП.ПолучитьВидОперации(СтруктураЗначений.ВидОперации);
			Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
				СтрокаУдержаннаяЗарплата.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			Конецесли;
			СтрокаУдержаннаяЗарплата.Контрагент = pcru_ex_ЗУП.ПолучитьКонтрагентаWS(СтруктураЗначений.Контрагент, вхЗадача.Отправитель);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НаименованиеТЧДокумента = "ФизическиеЛица";
		НомерСтрокиТЧ = 0;
		Пока СтруктураДокументаОтражения.Свойство(НаименованиеТЧДокумента + НомерСтрокиТЧ) Цикл
			СтруктураЗначений = СтруктураДокументаОтражения[НаименованиеТЧДокумента + НомерСтрокиТЧ];
			
			СтрокаФизическиеЛица = НовДок.ФизическиеЛица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаФизическиеЛица, СтруктураЗначений);
			
			СтрокаФизическиеЛица.ФизическоеЛицо = pcru_ex_ЗУП.ПолучитьФизЛицоWS(СтруктураЗначений.ФизическоеЛицо, вхЗадача.Отправитель);
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		КонецЦикла;
		
		НовДок.Записать();
		
		//Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
		//	вхЗадачаОб = вхЗадача.ПолучитьОбъект();
		//	вхЗадачаОб.Объект = НовДок.Ссылка;
		//	вхЗадачаОб.Записать();
		//КонецЕсли;

		Объект = НовДок.Ссылка;
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Ошибка=ОписаниеОшибки();
		Если ТранзакцияАктивна()  Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	//	//*********************************************************************** 
	//НовДок = Ссылка.ПолучитьОбъект();
	//НовДок.Бухгалтер = ""; 
	//НовДок.Номер =  Выборка.Номер;
	//НовДок.Дата =  Выборка.Дата;
	//НовДок.Проведен =  Выборка.Проведен;
	//НовДок.ПериодРегистрации =  Выборка.ПериодРегистрации;
	//НовДок.Организация =  pcru_УМФО.Организация();
	//НовДок.ЗарплатаОтраженаВБухучете =  Выборка.ЗарплатаОтраженаВБухучете;
	//НовДок.Номер =  Выборка.Номер;
	////
	//НовДок.НачисленнаяЗарплатаИВзносы.Очистить();
	//НовДок.НачисленныйНДФЛ.Очистить();
	//НовДок.УдержаннаяЗарплата.Очистить();
	//НовДок.ФизическиеЛица.Очистить();
	//
	////*********************************************************************** 
	//Запрос2 = ComConnection.NewObject("Запрос");
	//Запрос2.Текст = "ВЫБРАТЬ
	//|	ФизическиеЛицаДополнительныеРеквизиты.Значение КАК ProcessCode,
	//|	ФизическиеЛицаДополнительныеРеквизиты1.Значение КАК ТипЗатрат,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код КАК Подразделение,
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации) КАК ВидОперации,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование КАК СпособОтраженияЗарплатыВБухучете,
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ) КАК ВидНачисленияОплатыТрудаДляНУ,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
	//|ИЗ
	//|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
	//|		ПО (ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты.Ссылка)
	//|			И (ФизическиеЛицаДополнительныеРеквизиты.Свойство.Заголовок = ""ProcessCode"")
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты1
	//|		ПО (ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ФизическиеЛицаДополнительныеРеквизиты1.Ссылка)
	//|			И (ФизическиеЛицаДополнительныеРеквизиты1.Свойство.Заголовок = ""тип затрат"")
	//
	//|ГДЕ
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка.Номер = &Номер
	//|   и ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации <> Значение(перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
	//|СГРУППИРОВАТЬ ПО
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов,
	//|	ФизическиеЛицаДополнительныеРеквизиты.Значение,
	//|	ФизическиеЛицаДополнительныеРеквизиты1.Значение,
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации),
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ)";
	//Запрос2.УстановитьПараметр("Номер", Выборка.Номер);	
	//Результат2 = Запрос2.Выполнить();
	//Выборка2 = Результат2.Выбрать();
	//Пока Выборка2.Следующий() Цикл
	//	СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
	//	ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка2);
	//	СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode =  Выборка2.ProcessCode;
	//	СтрокаНачисленнаяЗарплатаИВзносы.pcru_ex_ТипЗатрат =  Выборка2.ТипЗатрат;
	//	СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
	//	СтрокаНачисленнаяЗарплатаИВзносы.Подразделение =  ПолучитьПодразделение(Выборка2.Подразделение);
	//	СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации =  ПолучитьВидОперации(Выборка2.ВидОперации);
	//	//СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка2.СпособОтраженияЗарплатыВБухучете);
	//	СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка2.СпособОтраженияЗарплатыВБухучете);
	//КонецЦикла;
	////*********************************************************************** 
	//Запрос3 = ComConnection.NewObject("Запрос");
	//Запрос3.Текст = "ВЫБРАТЬ
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо.Код КАК ФизическоеЛицо,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код КАК Подразделение,
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации) КАК ВидОперации,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование КАК СпособОтраженияЗарплатыВБухучете,
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ) КАК ВидНачисленияОплатыТрудаДляНУ,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов КАК ПериодПринятияРасходов,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Сумма) КАК Сумма,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРПоСуммарномуТарифу) КАК ПФРПоСуммарномуТарифу,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРДоПредельнойВеличины) КАК ПФРДоПредельнойВеличины,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСПревышения) КАК ПФРСПревышения,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРСтраховая) КАК ПФРСтраховая,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНакопительная) КАК ПФРНакопительная,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФСС) КАК ФСС,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФФОМС) КАК ФФОМС,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ТФОМС) КАК ТФОМС,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуЛетчикам) КАК ПФРНаДоплатуЛетчикам,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРНаДоплатуШахтерам) КАК ПФРНаДоплатуШахтерам,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФССНесчастныеСлучаи) КАК ФССНесчастныеСлучаи,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
	//|	СУММА(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка
	//|ИЗ
	//|	Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
	//|ГДЕ
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка.Номер = &Номер
	//|   и ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации = Значение(перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов)
	//|СГРУППИРОВАТЬ ПО
	//|    ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ФизическоеЛицо.Код,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Подразделение.Код,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете.Наименование,
	//|	ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ПериодПринятияРасходов,
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации),
	//|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ)";
	//Запрос3.УстановитьПараметр("Номер", Выборка.Номер);	
	//Результат3 = Запрос3.Выполнить();
	//Выборка3 = Результат3.Выбрать();
	//Пока Выборка3.Следующий() Цикл
	//	СтрокаНачисленнаяЗарплатаИВзносы = НовДок.НачисленнаяЗарплатаИВзносы.Добавить();	
	//	ЗаполнитьЗначенияСвойств(СтрокаНачисленнаяЗарплатаИВзносы,Выборка3);
	//	СтрокаНачисленнаяЗарплатаИВзносы.ФизическоеЛицо = ПолучитьФизЛицо(Выборка3.ФизическоеЛицо,ComConnection);
	//	СтрокаНачисленнаяЗарплатаИВзносы.ProcessCode =  Выборка2.ProcessCode;
	//	СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьСпособОтражения(Выборка2.СпособОтраженияЗарплатыВБухучете);
	//	СтрокаНачисленнаяЗарплатаИВзносы.ВидОперации =  ПолучитьВидОперации(Выборка3.ВидОперации);
	//	//СтрокаНачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучете =  ПолучитьВидОперации(Выборка3.СпособОтраженияЗарплатыВБухучете);
	//	СтрокаНачисленнаяЗарплатаИВзносы.ВидНачисленияОплатыТрудаДляНУ =  ПолучитьВидНачисленияОплатыТрудаДляНУ(Выборка3.СпособОтраженияЗарплатыВБухучете);
	//КонецЦикла;
	////*********************************************************************** 
	//Запрос4 = ComConnection.NewObject("Запрос");
	//Запрос4.Текст = "ВЫБРАТЬ
	//|	Представление(ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации) КАК ВидОперации,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КПП КАК КПП,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Сумма КАК Сумма,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана
	//|ИЗ
	//|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ
	//|ГДЕ
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Ссылка.Номер = &Номер
	//|	И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛ)
	//|	//И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов)";
	//Запрос4.УстановитьПараметр("Номер", Выборка.Номер);	
	//Результат4 = Запрос4.Выполнить();
	//Выборка4 = Результат4.Выбрать();
	//Пока Выборка4.Следующий() Цикл
	//	СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
	//	ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ,Выборка4);
	//	СтрокаНачисленныйНДФЛ.ВидОперации =  ПолучитьВидОперации(Выборка4.ВидОперации);
	//КонецЦикла;
	////*********************************************************************** 
	//Запрос5 = ComConnection.NewObject("Запрос");
	//Запрос5.Текст = "ВЫБРАТЬ
	//|	Представление(ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации) КАК ВидОперации,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКАТО КАК КодПоОКАТО,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодПоОКТМО КАК КодПоОКТМО,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КПП КАК КПП,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Сумма КАК Сумма,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.КодНалоговогоОргана КАК КодНалоговогоОргана,
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ФизическоеЛицо.Код КАК ФизическоеЛицо
	//|ИЗ
	//|	Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ
	//|ГДЕ
	//|	ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.Ссылка.Номер = &Номер
	//|	И ОтражениеЗарплатыВБухучетеНачисленныйНДФЛ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов)";
	//Запрос5.УстановитьПараметр("Номер", Выборка.Номер);	
	//Результат5 = Запрос5.Выполнить();
	//Выборка5 = Результат5.Выбрать();
	//Пока Выборка5.Следующий() Цикл
	//	СтрокаНачисленныйНДФЛ = НовДок.НачисленныйНДФЛ.Добавить();	
	//	ЗаполнитьЗначенияСвойств(СтрокаНачисленныйНДФЛ,Выборка5);
	//	СтрокаНачисленныйНДФЛ.ВидОперации =  ПолучитьВидОперации(Выборка5.ВидОперации);
	//	СтрокаНачисленныйНДФЛ.ФизическоеЛицо = ПолучитьФизЛицо(Выборка5.ФизическоеЛицо,ComConnection);
	//КонецЦикла;
	////*********************************************************************** 
	//Запрос6 = ComConnection.NewObject("Запрос");
	//Запрос6.Текст = "ВЫБРАТЬ
	//|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.ФизическоеЛицо.Код КАК ФизическоеЛицо,
	//|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Подразделение.Код КАК Подразделение,
	//|	Представление(ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.ВидОперации) КАК ВидОперации,
	//|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Контрагент.ИНН КАК Контрагент,
	//|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Сумма КАК Сумма
	//|ИЗ
	//|	Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата
	//|ГДЕ
	//|	ОтражениеЗарплатыВБухучетеУдержаннаяЗарплата.Ссылка.Номер = &Номер";
	//Запрос6.УстановитьПараметр("Номер", Выборка.Номер);	
	//Результат6 = Запрос6.Выполнить();
	//Выборка6 = Результат6.Выбрать();
	//Пока Выборка6.Следующий() Цикл
	//	СтрокаУдержаннаяЗарплата = НовДок.УдержаннаяЗарплата.Добавить();	
	//	ЗаполнитьЗначенияСвойств(СтрокаУдержаннаяЗарплата,Выборка6);
	//	СтрокаУдержаннаяЗарплата.Подразделение =  ПолучитьПодразделение(Выборка6.Подразделение);
	//	СтрокаУдержаннаяЗарплата.ВидОперации =  ПолучитьВидОперации(Выборка6.ВидОперации);
	//	Если  СтрокаУдержаннаяЗарплата.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками тогда
	//		СтрокаУдержаннаяЗарплата.ФизическоеЛицо = ПолучитьФизЛицо(Выборка6.ФизическоеЛицо,ComConnection);
	//	Конецесли;
	//	СтрокаУдержаннаяЗарплата.Контрагент = ПолучитьКонтрагента(Выборка6.Контрагент,ComConnection);
	//КонецЦикла;
	////*********************************************************************** 
	//Запрос7 = ComConnection.NewObject("Запрос");
	//Запрос7.Текст = "ВЫБРАТЬ
	//|	ОтражениеЗарплатыВБухучетеФизическиеЛица.ФизическоеЛицо.Код КАК ФизическоеЛицо
	//|ИЗ
	//|	Документ.ОтражениеЗарплатыВБухучете.ФизическиеЛица КАК ОтражениеЗарплатыВБухучетеФизическиеЛица
	//|ГДЕ
	//|	ОтражениеЗарплатыВБухучетеФизическиеЛица.Ссылка.Номер =  &Номер";
	//Запрос7.УстановитьПараметр("Номер", Выборка.Номер);	
	//Результат7 = Запрос7.Выполнить();
	//Выборка7 = Результат7.Выбрать();
	//Пока Выборка7.Следующий() Цикл
	//	СтрокаУдержаннаяЗарплата = НовДок.ФизическиеЛица.Добавить();	
	//	СтрокаУдержаннаяЗарплата.ФизическоеЛицо = ПолучитьФизЛицо(Выборка7.ФизическоеЛицо,ComConnection);
	//КонецЦикла;
	//
	//НовДок.Записать();
	
КонецФункции // ()

Функция ПлатежноеПоручениеПринять(вхЗадача, Объект, Ошибка)
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(вхЗадача.ТелоСообщения); 
		СтруктураПараметров = ПрочитатьJSON(ЧтениеJSON); 
		ЧтениеJSON.Закрыть();
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.АЭ_Идентификатор = &Номер";
	Запрос.УстановитьПараметр("Номер",Стрзаменить(СокрЛП(СтруктураПараметров.Номер),"-",""));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Ошибка = "Документ уже существует, номер документа " + СокрЛП(Выборка.Ссылка.Номер) + " от " + Выборка.Ссылка.Дата;
		Возврат Ложь;			
	КонецЦикла;
		
	Попытка
		НачатьТранзакцию();
			
		НовДок = Документы.ПлатежноеПоручение.СоздатьДокумент();
		НовДок.АЭ_Идентификатор = Стрзаменить(СокрЛП(СтруктураПараметров.Номер),"-","");
		НовДок.Дата = ТекущаяДата();
		НовДок.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
		НовДок.Организация = pcru_УМФО.Организация();
		НовДок.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиПоНаименованию("");
		НовДок.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НовДок.СчетОрганизации = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета","40702810903000479930",,НовДок.Организация);
		НовДок.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураПараметров.Контрагент);

		НовДок.СчетКонтрагента = НовДок.Контрагент.ОсновнойБанковскийСчет;
		НовДок.СуммаДокумента = СтруктураПараметров.Сумма;
		НовДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		НовДок.СуммаНДС = (СтруктураПараметров.Сумма * 20)/120;
		НовДок.ВидПлатежа = "";
		НовДок.ОчередностьПлатежа = 5;
		НовДок.НазначениеПлатежа = "Оплата счета №" + СтруктураПараметров.Номер + " от " + СтруктураПараметров.Дата;
		НовДок.ВалютаДокумента = pcru_УМФО.ВалютаРубль();
		НовДок.ТекстПлательщика = УчетДенежныхСредствБП.СформироватьТекстНаименованияПлательщикаПолучателя("", НовДок.Организация,     НовДок.СчетОрганизации, Ложь, НовДок.Дата);
		НовДок.ТекстПолучателя = УчетДенежныхСредствБП.СформироватьТекстНаименованияПлательщикаПолучателя("", НовДок.Контрагент,      НовДок.СчетКонтрагента, Ложь, НовДок.Дата);
		НовДок.Комментарий = "Загружено из документооборота оплата счета №" + СтруктураПараметров.НомерДокумента + " от " + СтруктураПараметров.Дата;
		НовДок.ИННПлательщика = НовДок.Организация.ИНН;
		НовДок.КПППлательщика = НовДок.Организация.КПП;
		НовДок.ИННПолучателя = НовДок.Контрагент.ИНН;
		НовДок.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Оплата поставщикам (подрядчикам)") ;
		
		Попытка
			НовДок.КПППолучателя = НовДок.Контрагент.КПП;
		Исключение
		КонецПопытки;
		НовДок.ПодразделениеОрганизации   = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
		
		Таблица = Неопределено;
		Если СтруктураПараметров.Свойство("Таблица",Таблица) Тогда
			Запрос1 = Новый Запрос;
			Запрос1.Текст = 
			"ВЫБРАТЬ
			|	pcru_ex_СопоставлениеВнешнихДанных.Значение КАК пкру_СтатьяРасходов
			|ИЗ
			|	РегистрСведений.pcru_ex_СопоставлениеВнешнихДанных КАК pcru_ex_СопоставлениеВнешнихДанных
			|ГДЕ
			|	pcru_ex_СопоставлениеВнешнихДанных.КодВнешнихДанных = &КодВнешнихДанных";
			
			Запрос2 = Новый Запрос;
			Запрос2.Текст = "ВЫБРАТЬ
			|	БНФОСубконто.Ссылка КАК ТипЗатрат
			|ИЗ
			|	Справочник.БНФОСубконто КАК БНФОСубконто
			|ГДЕ
			|	БНФОСубконто.Владелец.Наименование = ""Тип затрат""
			|	И БНФОСубконто.Наименование = &Наименование";
			
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				СтрРЗ = НовДок.пкру_РаспределениеЗатрат.Добавить();
				СтрРЗ.пкру_CostCentr = pcru_УМФО.ПолучитьПодразделениеПоКостЦентру(СтрокаТаблицы.CostCentr);
				//++ Севрюгин А.А  30.12.2020 20:44:55   
				Запрос1.УстановитьПараметр("КодВнешнихДанных",СтрокаТаблицы.СтатьяРасходов );
				ТЗ = Запрос1.Выполнить().Выгрузить();
				Для Каждого Выборка Из ТЗ Цикл
					ЗаполнитьЗначенияСвойств(СтрРЗ, Выборка);
				КонецЦикла;
				 
				Запрос2.УстановитьПараметр("Наименование",СтрокаТаблицы.ТипЗатрат );
				ТЗ = Запрос2.Выполнить().Выгрузить();
				Для Каждого Выборка Из ТЗ Цикл
					ЗаполнитьЗначенияСвойств(СтрРЗ, Выборка);
				КонецЦикла;
				СтрРЗ.Сумма = СтрокаТаблицы.Сумма;
			КонецЦикла; 
		КонецЕсли;
		НовДок.ДополнительныеСвойства.Вставить("АвторВерсии", Справочники.Пользователи.НайтиПоНаименованию("USER"));
		НовДок.Ответственный =  Справочники.Пользователи.НайтиПоНаименованию("USER");
		НовДок.Записать();
		
		//Если ТипЗнч(вхЗадача) = Тип("СправочникСсылка.ОбменДанными") Тогда
		//	вхЗадачаОб = вхЗадача.ПолучитьОбъект();
		//	вхЗадачаОб.Объект = НовДок.Ссылка;
		//	вхЗадачаОб.Записать();
		//КонецЕсли;

		ЗафиксироватьТранзакцию();
		Объект = НовДок.Ссылка;
		Возврат Истина;		
	Исключение
		Ошибка=ОписаниеОшибки();
		Если ТранзакцияАктивна()  Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;

КонецФункции

#КонецОбласти		 


#Область  РегИсходящие

Процедура ргОбменРаботаСИсходящими() Экспорт
	
	Попытка
		Ошибка = "";
		Пока ргОбменИсходящиеВыполнитьЗадачу(Ошибка) И (Ошибка = "")Цикл
		КонецЦикла;
		
		Если Ошибка <> "" Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка ргОбменИсходящиеВыполнитьЗадачу", Ошибка);	
		КонецЕсли;
	Исключение
		pcru_ex_Почта.ОтправкаПочты("Исключение ргОбменРаботаСИсходящими", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ргОбменИсходящиеВыполнитьЗадачу(Ошибка) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменДанными.Ссылка КАК Ссылка,
	|	ОбменДанными.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ОбменДанными.Объект КАК Объект,
	|	ОбменДанными.ТелоСообщения КАК ТелоСообщения
	|ИЗ
	|	Справочник.ОбменДанными КАК ОбменДанными
	|ГДЕ
	|	ОбменДанными.ТипСообщения = &ТипСообщения
	|	И ОбменДанными.ТочкаМаршрута В(&ТочкаМаршрута)
	|	И ОбменДанными.ДатаСоздания <= &ТекДата
	|	И НЕ ОбменДанными.ЕстьОшибка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбменДанными.ВидСообщения.Приоритет,
	|	ОбменДанными.Код";
	
	МассивТочекМаршрута = Новый Массив;
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.Новое);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения);
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипСообщения", Перечисления.ОбменДаннымиТипыСообщений.Исходящее);
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочекМаршрута);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Выб.Следующий();	
	Если Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения Тогда
		ргОбменИсходящиеОтправить(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое Тогда	
		ргОбменИсходящиеСоздатьJSON(Выб.Ссылка, Ошибка);
	КонецЕсли;	
	Если Ошибка <> "" Тогда
		ОБ = Выб.Ссылка.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ЕстьОшибка = TRUE;
		ОБ.Ошибка = Ошибка;
		ОБ.Записать();
	КонецЕсли;
	Возврат (Ошибка = "");
	
КонецФункции

Процедура ргОбменИсходящиеСоздатьJSON(вхЗадача,Ошибка) Экспорт
	НачатьТранзакцию();
	Попытка
		ОБ = вхЗадача.ПолучитьОбъект();
		Если ОБ.ТелоСообщения = "" Тогда
			Если ЗначениеЗаполнено(ОБ.Объект) Тогда
				//Если вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию("Контрагент") Тогда
				//ИначеЕсли вхЗадача.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию("ДокументИзДиадок") Тогда
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОБ.ТочкаМаршрута=Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
	КонецПопытки;
КонецПроцедуры

Процедура ргОбменИсходящиеОтправить(вхЗадача,Ошибка)
	//
	Получатель = вхЗадача.Получатель;
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.COM1C Тогда
		Попытка
			НачатьТранзакцию();
			COMConnector = Новый COMОбъект("V83.COMConnector");
			СтрокаПодключения = Получатель.СтрокаПодключения;
			ComConnection = COMConnector.Connect(СтрокаПодключения);
			Рез=ComConnection.ОбменДаннымиПринятьСообщение(XMLСтрока(вхЗадача), СокрЛП(вхЗадача.ВидСообщения.Наименование), СокрЛП(вхЗадача.Отправитель.Код), вхЗадача.ТелоСообщения, СокрЛП(вхЗадача.Пользователь.Код));
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка=ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	//
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.WEB Тогда
		Попытка
			НачатьТранзакцию();
			Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,False);
			Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,False);       
			Прокси.Пользователь = Получатель.Пользователь;
			Прокси.Пароль = Получатель.Пароль;
			Рез = Прокси.CreateMessage(XMLСтрока(вхЗадача), СокрЛП(вхЗадача.ВидСообщения.Наименование), СокрЛП(вхЗадача.Отправитель.Код), вхЗадача.ТелоСообщения, СокрЛП(вхЗадача.Пользователь.Код));
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;                                                                
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	//
	Если Ошибка = "" Тогда
		Попытка
			НачатьТранзакцию();
			ОБ = вхЗадача.ПолучитьОбъект();
			ОБ.Заблокировать();
			ОБ.ТочкаМаршрута=Перечисления.ОбменДаннымиТочкиМаршрута.Отправка;
			ОБ.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти		 


#Область Интерфейс

Функция CreateMessage(вхСсылка, вхВидСообщения, вхОтправитель, вхТело, вхПользователь)Экспорт
	
	Попытка
		ОбменДаннымиСсылка = XMLЗначение(Тип("СправочникСсылка.ОбменДанными"),вхСсылка);
		
		Запрос=Новый Запрос("ВЫБРАТЬ
		|	ОбменДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбменДанными КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка",ОбменДаннымиСсылка);
		НачатьТранзакцию();
		РезЗапроса = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
		Если РезЗапроса.Пустой() Тогда
			ОбменДанными = Справочники.ОбменДанными.СоздатьЭлемент();
			ОбменДанными.УстановитьСсылкуНового(ОбменДаннымиСсылка);
			ОбменДанными.ДатаСоздания = ТекущаяДата();
			ОбменДанными.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию(вхВидСообщения);
			Если Не ЗначениеЗаполнено(ОбменДанными.ВидСообщения) Тогда
				ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.СоздатьЭлемент();
				ВидСообщения.Наименование = вхВидСообщения;
				ВидСообщения.Записать();
				ОбменДанными.ВидСообщения = ВидСообщения.Ссылка;
			КонецЕсли; 
			ОбменДанными.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(вхОтправитель);
			ОбменДанными.Получатель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("UMFO");
			ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию(вхПользователь);
			Если ОбменДанными.Пользователь.Пустая() Тогда
				ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("WS");
			КонецЕсли;
			ОбменДанными.ТелоСообщения = вхТело;
			ОбменДанными.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Входящее;
			ОбменДанными.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
			НачатьТранзакцию();
			ОбменДанными.Записать();
			ЗафиксироватьТранзакцию();
			Возврат "ОК";
		Иначе
			Возврат "ОК";	
		КонецЕсли;	
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция ConfirmMessage(вхСсылка)Экспорт
	
	Попытка
		ОбменДаннымиСсылка = XMLЗначение(Тип("СправочникСсылка.ОбменДанными"), вхСсылка);
		Запрос=Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбменДанными КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.Ссылка = &Ссылка
		|	И ОбменДанными.ТочкаМаршрута = &Точка
		|	И НЕ ОбменДанными.ЕстьОшибка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбменДаннымиСсылка);
		Запрос.УстановитьПараметр("Точка", Перечисления.ОбменДаннымиТочкиМаршрута.Отправка);
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			обЗадача = Выб.Ссылка.ПолучитьОбъект();
			ОбЗадача.ДатаЗавершения = ТекущаяДата();
			ОбЗадача.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
			ОбЗадача.Записать();
		Иначе
			Возврат "Сообщение "+вхСсылка+" не найдена";
		КонецЕсли;
		Возврат "ОК";
	Исключение
		Возврат ОписаниеОшибки() + Символы.ПС + Строка(вхСсылка);
	КонецПопытки;
	
КонецФункции

Процедура ОтправитьВОбмен(ВидСообщения, Отправитель, Получатель, Ссылка, ТелоСообщения = "") Экспорт
	
	ОбменДанными = Справочники.ОбменДанными.СоздатьЭлемент();
	ОбменДанными.ДатаСоздания = ТекущаяДата();
	
	Если ТипЗнч(ВидСообщения) = Тип("СправочникСсылка.ОбменДаннымиВидыСообщений") Тогда
		ОбменДанными.ВидСообщения = ВидСообщения.Ссылка;
	Иначе
		ОбменДанными.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию(ВидСообщения);
		Если Не ЗначениеЗаполнено(ОбменДанными.ВидСообщения) Тогда
			спрВидСообщения = Справочники.ОбменДаннымиВидыСообщений.СоздатьЭлемент();
			спрВидСообщения.Наименование = ВидСообщения;
			спрВидСообщения.Записать();
			ОбменДанными.ВидСообщения = спрВидСообщения.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.ОбменДаннымиКлиенты") Тогда
		ОбменДанными.Отправитель = Отправитель;
	Иначе
		ОбменДанными.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(Отправитель);
	КонецЕсли;
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ОбменДаннымиКлиенты") Тогда
		ОбменДанными.Получатель = Получатель;
	Иначе
		ОбменДанными.Получатель=Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(Получатель);
	КонецЕсли;
	
	ОбменДанными.Пользователь=ПараметрыСеанса.ТекущийПользователь;
	Если ЗначениеЗаполнено(ОбменДанными.Пользователь) Тогда
		ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("WS");
	КонецЕсли;
	
	ОбменДанными.ТелоСообщения = ТелоСообщения;
	ОбменДанными.Объект = Ссылка;
	ОбменДанными.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Исходящее;
	ОбменДанными.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
	НачатьТранзакцию();
	ОбменДанными.Записать();
	ЗафиксироватьТранзакцию();

КонецПроцедуры

#КонецОбласти		 

#Область  ФормированиеИсходящихJSON

Функция СтруктураКонтрагент(Объект) Экспорт
	СтруктураОбмена = Новый Структура;
	СтруктураОбмена.Вставить("Код",Объект.Код);
	СтруктураОбмена.Вставить("ИНН",Объект.ИНН);
	СтруктураОбмена.Вставить("КПП",Объект.КПП);
	СтруктураОбмена.Вставить("РодительКод",Объект.Родитель.Код);
	СтруктураОбмена.Вставить("Наименование",Объект.Наименование);
	СтруктураОбмена.Вставить("НаименованиеПолное",Объект.НаименованиеПолное);
	СтруктураОбмена.Вставить("НаименованиеПолное",Объект.НаименованиеПолное);
	СтруктураОбмена.Вставить("Комментарий",Объект.Комментарий);
	
	//СтруктураОбмена.Вставить("ЮридическоеФизическоеЛицо",?(Объект.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,"ФизическоеЛицо","ЮридическоеЛицо"));
	Если Объект.АЭ_ИндивидуальныйПредприниматель 
	 ИЛИ Объект.БНФОЮрФизЛицо = Перечисления.БНФОЮрФизЛицо.ИндивидуальныйПредприниматель
	 ИЛИ Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		СтруктураОбмена.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
	Иначе
		СтруктураОбмена.Вставить("ЮридическоеФизическоеЛицо", "ФизическоеЛицо");
	КонецЕсли;
	 
	МассивКИ = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.КонтактнаяИнформация Цикл
		СтруктураОбменаКИ = Новый Структура;
		//
		Если СтрокаТЧ.Тип  = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			СтруктураОбменаКИ.Вставить("Тип","Адрес");
			СтруктураОбменаКИ.Вставить("Регион",лев(СтрокаТЧ.Представление,6));
		КонецЕсли; 
		//
		Если СтрокаТЧ.Тип  = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			СтруктураОбменаКИ.Вставить("Тип","Телефон");
			СтруктураОбменаКИ.Вставить("НомерТелефона",СтрокаТЧ.Представление);
		КонецЕсли; 
		//
		Если СтрокаТЧ.Тип  = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураОбменаКИ.Вставить("Тип","АдресЭлектроннойПочты");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Тип  = Перечисления.ТипыКонтактнойИнформации.Skype Тогда
			СтруктураОбменаКИ.Вставить("Тип","Skype");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Тип  = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			СтруктураОбменаКИ.Вставить("Тип","ВебСтраница");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Тип  = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			СтруктураОбменаКИ.Вставить("Тип","Факс");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Тип  = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			СтруктураОбменаКИ.Вставить("Тип","Другое");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Вид  = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			СтруктураОбменаКИ.Вставить("Вид","ФактАдресКонтрагента");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Вид  = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты Тогда
			СтруктураОбменаКИ.Вставить("Вид","EmailКонтрагенты");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Вид  = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
			СтруктураОбменаКИ.Вставить("Вид","ДругаяИнформацияКонтрагенты");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Вид  = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента Тогда
			СтруктураОбменаКИ.Вставить("Вид","ПочтовыйАдресКонтрагента");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Вид  = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			СтруктураОбменаКИ.Вставить("Вид","ТелефонКонтрагента");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Вид  = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты Тогда
			СтруктураОбменаКИ.Вставить("Вид","ФаксКонтрагенты");
		КонецЕсли; 
		//
		Если СтрокаТЧ.Вид  = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			СтруктураОбменаКИ.Вставить("Вид","ЮрАдресКонтрагента");
		КонецЕсли; 
		СтруктураОбменаКИ.Вставить("Представление",СтрокаТЧ.Представление);
		МассивКИ.Добавить(СтруктураОбменаКИ);	
	КонецЦикла;   
	СтруктураОбмена.Вставить("КИ",МассивКИ);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчета.Код КАК Код,
	|	БанковскиеСчета.Наименование КАК Наименование,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк КАК Банк,
	|	БанковскиеСчета.Валютный КАК Валютный,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	БанковскиеСчета.НомерИДатаРазрешения КАК НомерИДатаРазрешения,
	|	БанковскиеСчета.ДатаОткрытия КАК ДатаОткрытия,
	|	БанковскиеСчета.ДатаЗакрытия КАК ДатаЗакрытия,
	|	БанковскиеСчета.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	БанковскиеСчета.БанкДляРасчетов КАК БанкДляРасчетов,
	|	БанковскиеСчета.ВидСчета КАК ВидСчета,
	|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента,
	|	БанковскиеСчета.ТекстНазначения КАК ТекстНазначения,
	|	БанковскиеСчета.МесяцПрописью КАК МесяцПрописью,
	|	БанковскиеСчета.СуммаБезКопеек КАК СуммаБезКопеек,
	|	БанковскиеСчета.ВсегдаУказыватьКПП КАК ВсегдаУказыватьКПП,
	|	БанковскиеСчета.БНФОГруппаФинансовогоУчета КАК БНФОГруппаФинансовогоУчета,
	|	БанковскиеСчета.ГосударственныйКонтракт КАК ГосударственныйКонтракт,
	|	БанковскиеСчета.БНФОСвязанныйКонтрагент КАК БНФОСвязанныйКонтрагент,
	|	БанковскиеСчета.БНФОГруппаФинансовогоУчетаДенежныеСредстваВПути КАК БНФОГруппаФинансовогоУчетаДенежныеСредстваВПути,
	|	БанковскиеСчета.АЭ_ВидСчетаДляРеестра КАК АЭ_ВидСчетаДляРеестра,
	|	БанковскиеСчета.СчетКорпоративныхРасчетов КАК СчетКорпоративныхРасчетов,
	|	БанковскиеСчета.СчетБанк КАК СчетБанк,
	|	БанковскиеСчета.Банк.Код КАК БанкКод,
	|	БанковскиеСчета.Банк.Наименование КАК БанкНаименование,
	|	БанковскиеСчета.Банк.КоррСчет КАК БанкКоррСчет,
	|	БанковскиеСчета.Банк.Город КАК БанкГород,
	|	БанковскиеСчета.Банк.Адрес КАК БанкАдрес,
	|	БанковскиеСчета.Банк.Телефоны КАК БанкТелефоны,
	|	БанковскиеСчета.Банк.СВИФТБИК КАК БанкСВИФТБИК
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	ИЛИ БанковскиеСчета.БНФОСвязанныйКонтрагент = &Владелец";
	Запрос.УстановитьПараметр("Владелец",Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураОбмена.Вставить("БанкКод",Выборка.БанкКод);
		СтруктураОбмена.Вставить("БанкНаименование",Выборка.БанкНаименование);
		СтруктураОбмена.Вставить("БанкКоррСчет",Выборка.БанкКоррСчет);
		СтруктураОбмена.Вставить("БанкГород",Выборка.БанкГород);
		СтруктураОбмена.Вставить("БанкАдрес",Выборка.БанкАдрес);
		СтруктураОбмена.Вставить("БанкТелефоны",Выборка.БанкТелефоны);
		СтруктураОбмена.Вставить("СчетНаименование",Выборка.Наименование);
		СтруктураОбмена.Вставить("НомерСчета",Выборка.НомерСчета);
		СтруктураОбмена.Вставить("ТекстКорреспондента",Выборка.ТекстКорреспондента);
		СтруктураОбмена.Вставить("ДатаОткрытия",Выборка.ДатаОткрытия);
		СтруктураОбмена.Вставить("ДатаЗакрытия",Выборка.ДатаЗакрытия);
		СтруктураОбмена.Вставить("ТекстНазначенияПлатежа",Выборка.ТекстНазначения);
	КонецЦикла;
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,СтруктураОбмена ); 
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция СтруктураДокументДиадок(СтрокаДокумента, Строка64, РасширениеФайлаДиадок, Подр, ВидДокумента) Экспорт
	
	Стр = Новый Структура;
	Стр.Вставить("AttachmentVersion",СтрокаДокумента.AttachmentVersion);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение";
	Запрос.УстановитьПараметр("Значение",СтрокаДокумента.CounteragentId);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Стр.Вставить("ИНН",Выборка.Объект.ИНН);
	КонецЦикла;
	Стр.Вставить("BoxID",СтрокаДокумента.BoxID);
	Стр.Вставить("ContentType",СтрокаДокумента.ContentType);
	Стр.Вставить("CounteragentId",СтрокаДокумента.CounteragentId);
	Стр.Вставить("DepartmentId",СтрокаДокумента.DepartmentId);
	Стр.Вставить("DepartmentKpp",СтрокаДокумента.DepartmentKpp);
	Стр.Вставить("DocumentDirection",СтрокаДокумента.DocumentDirection);
	Стр.Вставить("DocumentFunction",СтрокаДокумента.DocumentFunction);
	Стр.Вставить("DocumentId",СтрокаДокумента.DocumentId);
	Стр.Вставить("DocumentType",СтрокаДокумента.DocumentType);
	Стр.Вставить("FileGUID",СтрокаДокумента.FileGUID);
	Стр.Вставить("FileName",СтрокаДокумента.FileName);
	Стр.Вставить("MessageID",СтрокаДокумента.MessageID);
	Стр.Вставить("Resolutions",СтрокаДокумента.Resolutions);
	Стр.Вставить("RevocationStatus",СтрокаДокумента.RevocationStatus);
	Стр.Вставить("Status",СтрокаДокумента.Status);
	Стр.Вставить("Валюта",СтрокаДокумента.Валюта);
	Стр.Вставить("Дата",СтрокаДокумента.Дата);
	Стр.Вставить("ДатаУчета",СтрокаДокумента.ДатаУчета);
	Стр.Вставить("ЕстьInitialDocuments",СтрокаДокумента.ЕстьInitialDocuments);
	Стр.Вставить("ИндексИконкиПакета",СтрокаДокумента.ИндексИконкиПакета);
	Стр.Вставить("ИндексИконкиПакетаКопия",СтрокаДокумента.ИндексИконкиПакетаКопия);
	Стр.Вставить("Номер",СтрокаДокумента.Номер);
	//	Стр.Вставить("ПервичныйДокумент",СтрокаДокумента.ПервичныйДокумент);
	Стр.Вставить("Подразделение",Подр);
	Стр.Вставить("ПозицияСортировки",СтрокаДокумента.ПозицияСортировки);
	Стр.Вставить("Покупатель",СтрокаДокумента.Покупатель);
	Стр.Вставить("Контрагент",СтрокаДокумента.Продавец);
	Стр.Вставить("СостояниеДокументооборота",СтрокаДокумента.СостояниеДокументооборота);
	Стр.Вставить("СостояниеСогласования",СтрокаДокумента.СостояниеСогласования);
	Стр.Вставить("Сумма",СтрокаДокумента.Сумма);
	Стр.Вставить("СуммаДокументаЗначение",СтрокаДокумента.СуммаДокументаЗначение);
	Стр.Вставить("СуммаНДС",СтрокаДокумента.СуммаНДС);
	Стр.Вставить("ТекстОшибки",СтрокаДокумента.ТекстОшибки);
	Стр.Вставить("НаименованиеДокумента",СтрокаДокумента.ТипДокумента +" "+СтрокаДокумента.Номер );
	Стр.Вставить("ЭтоТестовыйДок",СтрокаДокумента.ЭтоТестовыйДок);
	Стр.Вставить("РасширениеФайлаДиадок",РасширениеФайлаДиадок);	
	Стр.Вставить("Данные",Строка64);
	Стр.Вставить("ВидДокумента",ВидДокумента);
    //
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Стр ); 
	СтрJSON = ЗаписьJSON.Закрыть();

	Возврат СтрJSON;
	
КонецФункции

#КонецОбласти
