
#Область  РегВходящие

Процедура ргОбменРаботаСВходящими() Экспорт
	
	Попытка
		Ошибка = "";
		Пока ргОбменВходящиеВыполнитьЗадачу(Ошибка) И (Ошибка="") Цикл
		КонецЦикла;	
		
		Если Ошибка <> "" Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка ргОбменВходящиеВыполнитьЗадачу", Ошибка);
		КонецЕсли;
	Исключение
		pcru_ex_Почта.ОтправкаПочты("Исключение ргОбменРаботаСВходящими", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ргОбменВходящиеВыполнитьЗадачу(Ошибка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменДанными.Ссылка КАК Ссылка,
	|	ОбменДанными.ТочкаМаршрута КАК ТочкаМаршрута
	|ИЗ
	|	Справочник.ОбменДанными КАК ОбменДанными
	|ГДЕ
	|	ОбменДанными.ТипСообщения = &ТипСообщения
	|	И НЕ ОбменДанными.ЕстьОшибка
	|	И ОбменДанными.ТочкаМаршрута В (&ТочкаМаршрута)";

	МассивТочекМаршрута = Новый Массив;
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.Новое);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения);
	
	Запрос.УстановитьПараметр("ТипСообщения", Перечисления.ОбменДаннымиТипыСообщений.Входящее);	
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочекМаршрута);
	
	РезультатВыполнения = Запрос.Выполнить();	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выб = РезультатВыполнения.Выбрать();
	Выб.Следующий();
	Если Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения Тогда
		ргОбменВходящиеОтправитьПОдтверждение(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое Тогда
		ргОбменВходящиеПринять(Выб.Ссылка, Ошибка);
	КонецЕсли;
	
	Если Ошибка <> "" Тогда
		ОБ = Выб.Ссылка.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ЕстьОшибка = TRUE;
		ОБ.Ошибка = Ошибка;
		ОБ.Записать();
	КонецЕсли;
	
	Возврат (Ошибка = "");

КонецФункции	

Функция ргОбменВходящиеОтправитьПодтверждение(вхЗадача,Ошибка)
	
	Получатель = вхЗадача.Отправитель;
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.COM1C Тогда
		НачатьТранзакцию();
		Попытка
			COMConnector = Новый COMОбъект("V83.COMConnector");
			СтрокаПодключения = Получатель.СтрокаПодключения;
			ComConnection = COMConnector.Connect(СтрокаПодключения);
			Рез = ComConnection.ConfirmMessage(XMLСтрока(вхЗадача));		
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;
	//
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.WEB Тогда
		НачатьТранзакцию();
		Попытка
			Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,ложь);
			Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,ложь);       
			Прокси.Пользователь = Получатель.Пользователь;
			Прокси.Пароль = Получатель.Пароль;
			Рез = Прокси.ConfirmMessage(XMLСтрока(вхЗадача), вхЗадача.Код, вхЗадача.ТелоОтвета);
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;	
	//
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.HTTP Тогда
		НачатьТранзакцию();
		Попытка
			//1. создаем HTTP-соединение
			HTTP = Новый HTTPСоединение(Получатель.HTTPАдрес,,,,,,,Ложь);
			//2. создаем соответствие ЗаголовокЗапросаHTTP и заполняем заголовки
			ЗаголовокЗапросаHTTP = Новый Соответствие();
			Для каждого ЗаголовокHTTP Из Получатель.ЗаголовкиHTTP Цикл
				ЗаголовокЗапросаHTTP.Вставить(ЗаголовокHTTP.Ключ,ЗаголовокHTTP.Значение);
			КонецЦикла; 
			//3. создаем HTTP-запрос
			HTTPЗапрос = Новый HTTPЗапрос(Получатель.HTTPАдрес,ЗаголовокЗапросаHTTP);
			//4. отправляем HTTP-запрос
			Ответ = HTTP.Получить(HTTPЗапрос, "С:\Demo\logo.png");
			//5. обрабатывает ответ на запрос
			Если Ответ.КодСостояния = 200 Тогда
				Рез = Ответ.ПолучитьТелоКакСтроку();
				Если Рез<>"ОК" Тогда
					Ошибка=Рез;
					ОтменитьТранзакцию();
					Возврат ложь;
				КонецЕсли;
			Иначе
				Ошибка = "Статус-код " + Ответ.КодСостояния;
				ОтменитьТранзакцию();
				Возврат ложь;
			КонецЕсли
		Исключение
			Ошибка=ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;	
	//
	Если Ошибка = "" Тогда
		НачатьТранзакцию();
		Попытка
			ОБ = вхЗадача.ПолучитьОбъект();
			ОБ.Заблокировать();
			ОБ.ДатаЗавершения = ТекущаяДата();
			ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
			ОБ.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции // ргОбменВходящиеПринять(Выб.Ссылка,Ошибка)()

Функция ргОбменВходящиеПринять(вхЗадача,Ошибка)
	
	Объект = Неопределено;
	
	ТелоОтвета = "";
	Результат = ргОбменДаннымиОбработкаВходящиеСервер.ргОбменВходящиеПринять(вхЗадача, Объект, ТелоОтвета, Ошибка);
		
	НачатьТранзакцию();
	Попытка
		ОБ = вхЗадача.ПолучитьОбъект();
		ОБ.Заблокировать();
		Если Объект <> Неопределено Тогда
			ОБ.Объект = Объект;
		КонецЕсли;
		ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения;
		ОБ.Ошибка = Ошибка;
		ОБ.ТелоОтвета = ТелоОтвета;
		ОБ.ЕстьОшибка = НЕ Результат;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти		 


#Область  РегИсходящие

Процедура ргОбменРаботаСИсходящими() Экспорт
	
	Попытка
		Ошибка = "";
		Пока ргОбменИсходящиеВыполнитьЗадачу(Ошибка) И (Ошибка = "")Цикл
		КонецЦикла;
		
		Если Ошибка <> "" Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка ргОбменИсходящиеВыполнитьЗадачу", Ошибка);	
		КонецЕсли;
	Исключение
		pcru_ex_Почта.ОтправкаПочты("Исключение ргОбменРаботаСИсходящими", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ргОбменИсходящиеВыполнитьЗадачу(Ошибка) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбменДанными.Ссылка КАК Ссылка,
	|	ОбменДанными.ТочкаМаршрута КАК ТочкаМаршрута,
	|	ОбменДанными.Объект КАК Объект,
	|	ОбменДанными.ТелоСообщения КАК ТелоСообщения
	|ИЗ
	|	Справочник.ОбменДанными КАК ОбменДанными
	|ГДЕ
	|	ОбменДанными.ТипСообщения = &ТипСообщения
	|	И ОбменДанными.ТочкаМаршрута В(&ТочкаМаршрута)
	|	И ОбменДанными.ДатаСоздания <= &ТекДата
	|	И НЕ ОбменДанными.ЕстьОшибка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбменДанными.ВидСообщения.Приоритет,
	|	ОбменДанными.Код";
	
	МассивТочекМаршрута = Новый Массив;
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.Новое);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения);
	МассивТочекМаршрута.Добавить(Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения);
	
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипСообщения", Перечисления.ОбменДаннымиТипыСообщений.Исходящее);
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочекМаршрута);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Выб.Следующий();	
	Если Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое Тогда	
		ргОбменИсходящиеСоздатьJSON(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения Тогда
		ргОбменИсходящиеОтправить(Выб.Ссылка, Ошибка);
	ИначеЕсли Выб.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения Тогда
		ргОбменИсходящиеОбработатьРезультат(Выб.Ссылка, Ошибка);
	КонецЕсли;
	
	Если Ошибка <> "" Тогда
		ОБ = Выб.Ссылка.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ЕстьОшибка = TRUE;
		ОБ.Ошибка = Ошибка;
		ОБ.Записать();
	КонецЕсли;
	Возврат (Ошибка = "");
	
КонецФункции

Процедура ргОбменИсходящиеСоздатьJSON(вхЗадача,Ошибка) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ОБ = вхЗадача.ПолучитьОбъект();
		Если ОБ.ТелоСообщения = "" Тогда
   		 ргОбменДаннымиОбработкаИсходящиеСервер.ргОбменИсходящиеСоздатьJSON(вхЗадача,Ошибка);
		КонецЕсли;
		ОБ.ТочкаМаршрута=Перечисления.ОбменДаннымиТочкиМаршрута.ФормированиеСообщения;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка=ОписаниеОшибки();
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры	 

Процедура ргОбменИсходящиеОтправить(вхЗадача,Ошибка)

	Получатель = вхЗадача.Получатель;
	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.COM1C Тогда
		НачатьТранзакцию();
		Попытка
			COMConnector = Новый COMОбъект("V83.COMConnector");
			СтрокаПодключения = Получатель.СтрокаПодключения;
			ComConnection = COMConnector.Connect(СтрокаПодключения);
			Рез = ComConnection.ОбменДаннымиПринятьСообщение(XMLСтрока(вхЗадача), СокрЛП(вхЗадача.ВидСообщения.Наименование), СокрЛП(вхЗадача.Отправитель.Код), вхЗадача.ТелоСообщения, СокрЛП(вхЗадача.Пользователь.Код));		
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Если Получатель.ВидСоединения = Перечисления.ОбменДаннымиВидыСоединений.WEB Тогда
		НачатьТранзакцию();
		Попытка
			Определение = Новый WSОпределения(Получатель.МестоположениеWSDL,Получатель.Пользователь,Получатель.Пароль,,,,False);
			Прокси = Новый WSПрокси(Определение,Получатель.URIПространстваИменСервиса, Получатель.ИмяСервиса, Получатель.ИмяТочкиПодключения,,,,,False);       
			Прокси.Пользователь = Получатель.Пользователь;
			Прокси.Пароль = Получатель.Пароль;
			Рез = Прокси.CreateMessage(XMLСтрока(вхЗадача), СокрЛП(вхЗадача.ВидСообщения.Наименование), СокрЛП(вхЗадача.Отправитель.Код), вхЗадача.ТелоСообщения, СокрЛП(вхЗадача.Пользователь.Код), СокрЛП(вхЗадача.Код));
			Если Рез <> "ОК" Тогда
				Ошибка = Рез;                                                                
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли;	

	Если Ошибка = "" Тогда
		НачатьТранзакцию();
		Попытка
			ОБ = вхЗадача.ПолучитьОбъект();
			ОБ.Заблокировать();
			ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Отправка;
			ОБ.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Ошибка = ОписаниеОшибки();
			Если ТранзакцияАктивна()  Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
	КонецЕсли; 

КонецПроцедуры	 

Функция ргОбменИсходящиеОбработатьРезультат(исхЗадача, Ошибка)
	
	Объект = Неопределено;
	
	Результат = ргОбменДаннымиОбработкаИсходящиеСервер.ОбработатьРезультатОбъекта(исхЗадача, Ошибка);
		
	НачатьТранзакцию();
	Попытка
		ОБ = исхЗадача.ПолучитьОбъект();
		ОБ.Заблокировать();
		ОБ.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
		ОБ.Ошибка = Ошибка;
		ОБ.ЕстьОшибка = НЕ Результат;
		ОБ.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти		 


#Область  интерфейс

Функция CreateMessage(вхСсылка, вхВидСообщения, вхОтправитель, вхТело, вхПользователь, вхКод)Экспорт
	
	НачатьТранзакцию();
	Попытка
		ОбменДаннымиСсылка = XMLЗначение(Тип("СправочникСсылка.ОбменДанными"),вхСсылка);
		
		Запрос=Новый Запрос("ВЫБРАТЬ
		|	ОбменДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбменДанными КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка",ОбменДаннымиСсылка);
		РезЗапроса = Запрос.Выполнить();
		Если РезЗапроса.Пустой() Тогда
			ОбменДанными = Справочники.ОбменДанными.СоздатьЭлемент();
			ОбменДанными.УстановитьСсылкуНового(ОбменДаннымиСсылка);
			ОбменДанными.ДатаСоздания = ТекущаяДата();
			ОбменДанными.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию(вхВидСообщения);
			Если Не ЗначениеЗаполнено(ОбменДанными.ВидСообщения) Тогда
				ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.СоздатьЭлемент();
				ВидСообщения.Наименование = вхВидСообщения;
				ВидСообщения.Записать();
				ОбменДанными.ВидСообщения = ВидСообщения.Ссылка;
			КонецЕсли; 
			ОбменДанными.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(вхОтправитель);
			ОбменДанными.Получатель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("UMFO");
			ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию(вхПользователь);
			Если ОбменДанными.Пользователь.Пустая() Тогда
				ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("WS");
			КонецЕсли;
			ОбменДанными.КодСвязи = вхКод;
			ОбменДанными.ТелоСообщения = вхТело;
			ОбменДанными.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Входящее;
			ОбменДанными.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
			ОбменДанными.Записать();
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
		Возврат "ОК";	
	Исключение
		ОтменитьТранзакцию();
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция ConfirmMessage(вхСсылка, вхКодСвязи, вхТелоОтвета) Экспорт
	
	Попытка
		ОбменДаннымиСсылка = XMLЗначение(Тип("СправочникСсылка.ОбменДанными"), вхСсылка);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбменДанными.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбменДанными КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.Ссылка = &Ссылка
		|	И ОбменДанными.ТочкаМаршрута = &Точка
		|	И НЕ ОбменДанными.ЕстьОшибка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбменДаннымиСсылка);
		Запрос.УстановитьПараметр("Точка", Перечисления.ОбменДаннымиТочкиМаршрута.Отправка);
		Выб = Запрос.Выполнить().Выбрать();
		Если Выб.Следующий() Тогда
			обЗадача = Выб.Ссылка.ПолучитьОбъект();
			ОбЗадача.ДатаЗавершения = ТекущаяДата();
			ОбЗадача.ТелоОтвета = вхТелоОтвета;
			ОбЗадача.КодСвязи = вхКодСвязи;
			
			Если ЗначениеЗаполнено(вхТелоОтвета) Тогда
				ОбЗадача.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.ОбработкаСообщения;
			Иначе
				ОбЗадача.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Завершено;
			КонецЕсли;
				
			ОбЗадача.Записать();			
		Иначе
			Возврат "Сообщение "+вхСсылка+" не найдено";
		КонецЕсли;
		Возврат "ОК";
	Исключение
		Возврат ОписаниеОшибки() + Символы.ПС + Строка(вхСсылка);
	КонецПопытки;
	
КонецФункции

Процедура ОтправитьВОбмен(ВидСообщения, Отправитель, Получатель, Ссылка, ТелоСообщения = "") Экспорт
	
	ОбменДанными = Справочники.ОбменДанными.СоздатьЭлемент();
	ОбменДанными.ДатаСоздания = ТекущаяДата();
	
	Если ТипЗнч(ВидСообщения) = Тип("СправочникСсылка.ОбменДаннымиВидыСообщений") Тогда
		ОбменДанными.ВидСообщения = ВидСообщения.Ссылка;
	Иначе
		ОбменДанными.ВидСообщения = Справочники.ОбменДаннымиВидыСообщений.НайтиПоНаименованию(ВидСообщения);
		Если Не ЗначениеЗаполнено(ОбменДанными.ВидСообщения) Тогда
			спрВидСообщения = Справочники.ОбменДаннымиВидыСообщений.СоздатьЭлемент();
			спрВидСообщения.Наименование = ВидСообщения;
			спрВидСообщения.Записать();
			ОбменДанными.ВидСообщения = спрВидСообщения.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	
	Если ТипЗнч(Отправитель) = Тип("СправочникСсылка.ОбменДаннымиКлиенты") Тогда
		ОбменДанными.Отправитель = Отправитель;
	Иначе
		ОбменДанными.Отправитель = Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(Отправитель);
	КонецЕсли;
	
	Если ТипЗнч(Получатель) = Тип("СправочникСсылка.ОбменДаннымиКлиенты") Тогда
		ОбменДанными.Получатель = Получатель;
	Иначе
		ОбменДанными.Получатель=Справочники.ОбменДаннымиКлиенты.НайтиПоКоду(Получатель);
	КонецЕсли;
	
	ОбменДанными.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Если НЕ ЗначениеЗаполнено(ОбменДанными.Пользователь) Тогда
		ОбменДанными.Пользователь = Справочники.Пользователи.НайтиПоНаименованию("WS");
	КонецЕсли;
	
	ОбменДанными.ТелоСообщения = ТелоСообщения;
	ОбменДанными.Объект = Ссылка;
	ОбменДанными.ТипСообщения = Перечисления.ОбменДаннымиТипыСообщений.Исходящее;
	ОбменДанными.ТочкаМаршрута = Перечисления.ОбменДаннымиТочкиМаршрута.Новое;
	НачатьТранзакцию();
	ОбменДанными.Записать();
	ЗафиксироватьТранзакцию();

КонецПроцедуры

#КонецОбласти


#Область ФункцииОбщегоНазначения

Функция СтруктуруВСтрокуJSON(Структура) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Структура); 
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ТаблицаЗначенийВМассив(ТаблицаЗначений) Экспорт
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

#КонецОбласти
