
&Перед("СформироватьПроводкиБанковский")
Процедура pcru_ex_СформироватьПроводкиБанковский(ТаблицаПроводок, Движения, Отказ)
	
	ТаблицаИзмененыхПроводок = ТаблицаПроводок.СкопироватьКолонки();
	Для Каждого Проводка Из ТаблицаПроводок Цикл
		ПроцентНормированияНаДатуВыдачиПролонгации = 0;
		ДоговорКредита = Проводка.СубконтоКт["ДоговорыКредитаДепозита"];
		Если ДоговорКредита <> Неопределено Тогда
			Если ЗначениеЗаполнено(ДоговорКредита.АЭ_ДокументОснование) И ТипЗнч(ДоговорКредита.АЭ_ДокументОснование) = Тип("ДокументСсылка.АЭ_КредитПолученный") Тогда
				Если ДоговорКредита.АЭ_ДокументОснование.НормироватьПроценты Тогда
					ПроцентНормированияНаДатуВыдачиПролонгации = ДоговорКредита.АЭ_ДокументОснование.ПроцентНормированияНаДатуВыдачиПролонгации;
					ПроцентнаяСтавка = ДоговорКредита.АЭ_ДокументОснование.ПроцентнаяСтавка;
					ВидЗайма = ДоговорКредита.АЭ_ДокументОснование.ВидЗаймаБУ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроцентНормированияНаДатуВыдачиПролонгации = 0 ИЛИ Проводка.Сумма < 0 Тогда
			СтрокаТаблицы = ТаблицаИзмененыхПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Проводка);
		Иначе
			ОбщаяСумма = Проводка.Сумма;
			ОбщаяВалютнаяСуммаДт = Проводка.ВалютнаяСуммаДт;
			ОбщаяВалютнаяСуммаКт = Проводка.ВалютнаяСуммаКт;
			ОбщаяСуммаВРДт = Проводка.СуммаВРДт;
			ОбщаяСуммаВРКт = Проводка.СуммаВРКт;
			ОбщаяСуммаНУДт = Проводка.СуммаНУДт;
			ОбщаяСуммаНУКт = Проводка.СуммаНУКт;
			ОбщаяСуммаПРДт = Проводка.СуммаПРДт;
			ОбщаяСуммаПРКт = Проводка.СуммаПРКт;
			
			СтрокаТаблицыПроводка1 = ТаблицаИзмененыхПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПроводка1, Проводка);
			
			СтрокаТаблицыПроводка1.Сумма = Проводка.Сумма * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.ВалютнаяСуммаДт = Проводка.ВалютнаяСуммаДт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.ВалютнаяСуммаКт = Проводка.ВалютнаяСуммаКт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.СуммаВРДт = Проводка.СуммаВРДт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.СуммаВРКт = Проводка.СуммаВРКт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.СуммаНУДт = Проводка.СуммаНУДт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.СуммаНУКт = Проводка.СуммаНУКт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.СуммаПРДт = Проводка.СуммаПРДт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			СтрокаТаблицыПроводка1.СуммаПРКт = Проводка.СуммаПРКт * ПроцентНормированияНаДатуВыдачиПролонгации / ПроцентнаяСтавка;
			
			
			СтрокаТаблицыПроводка2 = ТаблицаИзмененыхПроводок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПроводка2, Проводка);
			
			АналитикаОтраженияЗайма = АналтиикаОтраженияЗайма(ВидЗайма);
			
			Если АналитикаОтраженияЗайма <> Неопределено Тогда
				СтрокаТаблицыПроводка2.СчетАналитическогоУчетаДт = АналитикаОтраженияЗайма.СчетАналитическогоУчета;
				СтрокаТаблицыПроводка2.СчетДт = АналитикаОтраженияЗайма.СчетАналитическогоУчета.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(СтрокаТаблицыПроводка2.СчетДт, СтрокаТаблицыПроводка2.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы, АналитикаОтраженияЗайма.СтатьяРасходов);
				
				ПринятиеКНалоговомуУчету = АналитикаОтраженияЗайма.СтатьяРасходов.ПринятиеКНалоговомуУчету;
			Иначе
				ПринятиеКНалоговомуУчету = СтрокаТаблицыПроводка2.СубконтоКт["ПрочиеДоходыИРасходы"].ПринятиеКНалоговомуУчету;
			КонецЕсли;
			
			СтрокаТаблицыПроводка2.Сумма = ОбщаяСумма - СтрокаТаблицыПроводка1.Сумма;
			СтрокаТаблицыПроводка2.ВалютнаяСуммаДт = ОбщаяВалютнаяСуммаДт - СтрокаТаблицыПроводка1.ВалютнаяСуммаДт;
			СтрокаТаблицыПроводка2.ВалютнаяСуммаКт = ОбщаяВалютнаяСуммаКт - СтрокаТаблицыПроводка1.ВалютнаяСуммаКт;
			СтрокаТаблицыПроводка2.СуммаВРДт = ОбщаяСуммаВРДт - СтрокаТаблицыПроводка1.СуммаВРДт;
			СтрокаТаблицыПроводка2.СуммаВРКт = ОбщаяСуммаВРКт - СтрокаТаблицыПроводка1.СуммаВРКт;
			
			СуммаНУПРДт = ОбщаяСуммаНУДт - СтрокаТаблицыПроводка1.СуммаНУДт;
			
			Если ПринятиеКНалоговомуУчету Тогда
				СтрокаТаблицыПроводка2.СуммаНУДт = СуммаНУПРДт;
				СтрокаТаблицыПроводка2.СуммаПРДт = 0;
				
				Если СтрокаТаблицыПроводка2.СуммаНУКт <> 0 Тогда
					СтрокаТаблицыПроводка2.СуммаНУКт = СуммаНУПРДт;
				ИначеЕсли СтрокаТаблицыПроводка2.СуммаПРКт <> 0 Тогда
					СтрокаТаблицыПроводка2.СуммаПРКт = СуммаНУПРДт;
				КонецЕсли;				
			Иначе
				СтрокаТаблицыПроводка2.СуммаПРДт = СуммаНУПРДт;
				СтрокаТаблицыПроводка2.СуммаНУДт = 0;
				Если СтрокаТаблицыПроводка2.СуммаНУКт <> 0 Тогда
					СтрокаТаблицыПроводка2.СуммаНУКт = СуммаНУПРДт;
				ИначеЕсли СтрокаТаблицыПроводка2.СуммаПРКт <> 0 Тогда
					СтрокаТаблицыПроводка2.СуммаПРКт = СуммаНУПРДт;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	
	ПроводитьРаспределение = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	pcru_ex_ХранимыеДанные.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.pcru_ex_ХранимыеДанные КАК pcru_ex_ХранимыеДанные
	|ГДЕ
	|	pcru_ex_ХранимыеДанные.ИмяХранимыхДанных = &ИмяХранимыхДанных";
	Запрос.УстановитьПараметр("ИмяХранимыхДанных", "РаспределениеСуммВалютныхКредитов");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПроводитьРаспределение = Выборка.Данные;
	Иначе
		МЗ = РегистрыСведений.pcru_ex_ХранимыеДанные.СоздатьМенеджерЗаписи();
		МЗ.ИмяХранимыхДанных = "РаспределениеСуммВалютныхКредитов";
		МЗ.Данные = Истина;
		МЗ.Записать(Истина);	
	КонецЕсли;
	
	Если ПроводитьРаспределение Тогда
		ТаблицаПроводок = ТаблицаИзмененыхПроводок;
	КонецЕсли;
	
КонецПроцедуры

Функция АналтиикаОтраженияЗайма(ГруппаСчетаЗайма)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьяРасходовПроцентыНеПринимаемые КАК СтатьяРасходов,
	|	СчетУчетаРасходовПроцентыНеПринимаемые КАК СчетАналитическогоУчета
	|	
	|ИЗ
	|	РегистрСведений.АЭ_ВидыЗаймовРегламентированныйУчет
	|ГДЕ
	|	ГруппаСчетаЗайма = &ГруппаСчетаЗайма";
	Запрос.УстановитьПараметр("ГруппаСчетаЗайма", ГруппаСчетаЗайма);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("СчетАналитическогоУчета,СтатьяРасходов");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции
