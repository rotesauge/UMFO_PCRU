
Функция ПолучитьБазу()
	//Возврат ""+База+""; 
	Возврат "PROFICREDIT"; 
КонецФункции // ()

Функция ПолучитьФирму()
	//Возврат "Proficredit";
	Возврат "Proficredit X";
КонецФункции // ПолучитьФирму()

Функция ПолучитьПараметрыВыборки()
	Возврат " ";
КонецФункции // ПолучитьФирму()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СчетНавВКлюч(Счет)
	Возврат "_"+СтрЗаменить(Счет,".","_");
КонецФункции // СчетНавВКлюч()

Функция КлючВСчетНав(Ключ)
	Возврат СтрЗаменить(Сред(Ключ,2),"_",".");
КонецФункции 

//*************************  тест_корректировок

Процедура ЕжеднеаныеРеализацииНаСервере_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//	Попытка
	Connection.ConnectionString =СтрокаПодключения;	 
	Connection.Open();
	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1)
	//	КонецЕсли; 
	//КонецПопытки; 
	Счетчик = 0;//Обнуляем счетчик
	Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) Amount, sum(VAT) VAT
	|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount, VAT.Amount AS VAT
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	|VAT.[Credit Account No_] = '60309.1' AND VAT.[Debit Account No_] = '48803.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '48803.1') AND (t1.[Credit Account No_] = '71002.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	|(t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|UNION ALL
	|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1, - VAT.Amount AS VAT
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	| VAT.[Credit Account No_] = '48803.1' AND VAT.[Debit Account No_] = '60309.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '71002.1') AND (t1.[Credit Account No_] = '48803.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	| (t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	|Group by ContractDT, ClientDT";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	//	Попытка
	RecordSet = Command.Execute();
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	dbo_Proficredit_X_G_L_Correspondence_Entry.Dt_Contract_No_ КАК Dt_Contract_No_,
	//|	dbo_Proficredit_X_Contract.Customer_No_ КАК Customer_No_,
	//|	dbo_Proficredit_X_G_L_Correspondence_Entry.Amount КАК Amount
	//|ИЗ
	//|	ВнешнийИсточникДанных.NAV.Таблица.dbo_Proficredit_X_G_L_Correspondence_Entry КАК dbo_Proficredit_X_G_L_Correspondence_Entry
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.NAV.Таблица.dbo_Proficredit_X_Contract КАК dbo_Proficredit_X_Contract
	//|		ПО dbo_Proficredit_X_G_L_Correspondence_Entry.Dt_Contract_No_ = dbo_Proficredit_X_Contract.Contract_No_
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.NAV.Таблица.dbo_Proficredit_X_Contract КАК dbo_Proficredit_X_Contract1
	//|		ПО dbo_Proficredit_X_G_L_Correspondence_Entry.Ct_Contract_No_ = dbo_Proficredit_X_Contract1.Contract_No_";
	//Запрос.УстановитьПараметр("", );
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//
	//	
	//
	//КонецЦикла;
	// 
	
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1);
	//		Возврат;
	//	КонецЕсли; 
	//КонецПопытки; 
	Счетчик = 0;//Обнуляем счетчик
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
		RecordSet.Close();
		Возврат;
	КонецЕсли;
	
	//	Попытка
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		Попытка
			Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Исключение
			Стр.Вставить("НДС",0);
		КонецПопытки; 
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1)
	//	КонецЕсли; 
	//КонецПопытки; 
	
	Сумма = 0;
	КоличствоРеализаций = 1;
	Стр = Неопределено; 
	
	ТекстПисьма = "";
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		
		//Попытка
		//	НачатьТранзакцию();
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.ИсточникДанных = ДокументОбъект;
		//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
		//Блокировка.Заблокировать();
		
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		СуммаДляКорректировкиНДС = - СтрокаТЧ.НДС;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		
		
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
		|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
		|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО (КорректировкаРеализации.ДокументРеализации = РеализацияТоваровУслугУслуги.Ссылка)
		|			И (КорректировкаРеализации.Проведен)
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И (ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 16) = ""#Service package""
		|			ИЛИ ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 2) = ""#@"")
		|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугУслуги.Ссылка";
		//
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		//|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		//|	ВЫБОР
		//|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		//|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		//|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		//|	КОНЕЦ КАК Оплата
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		//|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		//|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		//|	ИЗ
		//|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		//|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		//|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		//|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		//|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		//|	ГДЕ
		//|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		//|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		//|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента
		//|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		//|	    И (РеализацияТоваровУслуг.Проведен и Подстрока(РеализацияТоваровУслуг.Комментарий,1,16) = ""#Service package"" или не РеализацияТоваровУслуг.Проведен и Подстрока(РеализацияТоваровУслуг.Комментарий,1,2) =""#@"")
		//|	СГРУППИРОВАТЬ ПО
		//|		РеализацияТоваровУслуг.Ссылка,
		//|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		//|ГДЕ
		//|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	ВложенныйЗапрос.Ссылка.МоментВремени";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		//	Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НужноРаспровестиОснование = Ложь;
			если не Выборка.Ссылка.Проведен тогда 
				Об = Выборка.Ссылка.ПолучитьОбъект();
				Об.Записать(РежимЗаписиДокумента.Проведение);
				//СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Выборка.Ссылка);
				СтруктураПараметров = СтруктураПараметровДляСозданияСчетФактруы(Выборка.Ссылка);
				СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(СтруктураПараметров);

				Об2 = СФОСНОВАНИЯ.Ссылка.ПолучитьОбъект();
				Об2.Записать(РежимЗаписиДокумента.Проведение);
				НужноРаспровестиОснование = Истина;
			КонецЕсли;
			
			//СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				Если СуммаДляКорректировки >= Выборка.Сумма Тогда
					СтрокаУслуги.Сумма      = 0;
					СтрокаУслуги.Цена       = 0;
					СтрокаУслуги.СуммаНДС   = 0;
					СтрокаУслуги.Количество = 1;
					СуммаДляКорректировки    = СуммаДляКорректировки - Выборка.Сумма;
					СуммаДляКорректировкиНДС = СуммаДляКорректировкиНДС - Выборка.СуммаНДС;
				Иначе 
					СтрокаУслуги.Сумма      = Выборка.Сумма - СуммаДляКорректировки;
					СтрокаУслуги.Цена       = Выборка.Сумма- СуммаДляКорректировки;
					СтрокаУслуги.СуммаНДС   = Выборка.СуммаНДС - СуммаДляКорректировкиНДС;
					СтрокаУслуги.Количество = 1;
					СуммаДляКорректировки = 0;
					СуммаДляКорректировкиНДС = 0;
				КонецЕсли;
			КонецЦикла; 
			
			Ндок.Комментарий =  Выборка.Ссылка.Комментарий;
			Ндок.Дата = ДатаВыгрузки;
			Ндок.КорректироватьБУиНУ = Истина;
			//
			//Попытка
			//	НачатьТранзакцию();
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			//Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
			СтруктураПараметров = СтруктураПараметровДляСозданияСчетФактруы(Ндок.Ссылка);
			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(СтруктураПараметров);

			Если НужноРаспровестиОснование тогда
				Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				//						Об2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(Выборка.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
			//ЗафиксироватьТранзакцию();
			//Исключение
			//	ОтменитьТранзакцию();
			//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
			//КонецПопытки; 
			//
			Если  СуммаДляКорректировки <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//Если СуммаДляКорректировки > 0 Тогда
		//	
		//	Организация = Справочники.Организации.НайтиПоКоду("000000001");
		//	//Дата1 = ЭтаФорма.Период.ДатаНачала;
		//	//Дата2 = КонецДня(ДатаВыгрузки);
		//	// Формируем строку подключения
		//	СтрокаПодключения =
		//	"srvr='RUSPBPACC01'; ref='1c_audit'; usr='user'; pwd='1Cadmin';";
		//	ComConnector = pcru_ex_ВнешниеСоединения.ПолучитьCOMОбъектПоВерсииПлатформы();
		//	СообщениеПользователю = Новый СообщениеПользователю;
		//	//				Попытка
		//	ComConnection = COMConnector.Connect(СтрокаПодключения);
		//	//				Исключение
		//	//					СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		//	//	СообщениеПользователю.pcru_ex_Почта.Сообщить_об_ошибке();
		//	//					Возврат;
		//	//				КонецПопытки;
		//	Запрос = ComConnection.NewObject("Запрос"); //#@
		//	Запрос.Текст = "ВЫБРАТЬ //ПЕРВЫЕ 1
		//	|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка,
		//	|	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
		//	|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК НоменклатураКод,
		//	|	РеализацияТоваровУслугУслуги.Содержание КАК Содержание,
		//	|	РеализацияТоваровУслугУслуги.Количество КАК Количество,
		//	|	РеализацияТоваровУслугУслуги.Цена КАК Цена,
		//	|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		//	|	РеализацияТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		//	|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		//	|	РеализацияТоваровУслугУслуги.СчетДоходов КАК СчетДоходов,
		//	|	РеализацияТоваровУслугУслуги.Субконто КАК Субконто,
		//	|	РеализацияТоваровУслугУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
		//	|	РеализацияТоваровУслугУслуги.СчетРасходов КАК СчетРасходов,
		//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка1,
		//	|	РеализацияТоваровУслуг.ВерсияДанных КАК ВерсияДанных,
		//	|	РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		//	|	РеализацияТоваровУслуг.Номер КАК Номер,
		//	|	РеализацияТоваровУслуг.Дата КАК Дата,
		//	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
		//	|	РеализацияТоваровУслуг.ВидОперации КАК ВидОперации,
		//	|	РеализацияТоваровУслуг.Организация КАК Организация,
		//	|	РеализацияТоваровУслуг.Склад КАК Склад,
		//	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		//	|	РеализацияТоваровУслуг.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
		//	|	РеализацияТоваровУслуг.Патент КАК Патент,
		//	|	РеализацияТоваровУслуг.Контрагент.Код КАК Контрагент,
		//	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ДоговорКонтрагента,
		//	|	РеализацияТоваровУслуг.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
		//	|	РеализацияТоваровУслуг.ТипЦен КАК ТипЦен,
		//	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		//	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		//	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		//	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
		//	|	РеализацияТоваровУслуг.УдалитьУчитыватьНДС КАК УдалитьУчитыватьНДС,
		//	|	РеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
		//	|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
		//	|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
		//	|	РеализацияТоваровУслуг.УдалитьСчетУчетаДоходовПоТаре КАК УдалитьСчетУчетаДоходовПоТаре,
		//	|	РеализацияТоваровУслуг.УдалитьСчетУчетаРасходовПоТаре КАК УдалитьСчетУчетаРасходовПоТаре,
		//	|	РеализацияТоваровУслуг.УдалитьСтатьяДоходовИРасходовПоТаре КАК УдалитьСтатьяДоходовИРасходовПоТаре,
		//	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
		//	|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
		//	|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
		//	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		//	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		//	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		//	|	РеализацияТоваровУслуг.Ответственный КАК Ответственный,
		//	|	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
		//	|	РеализацияТоваровУслуг.РучнаяКорректировка КАК РучнаяКорректировка,
		//	|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
		//	|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		//	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
		//	|	РеализацияТоваровУслуг.УдалитьЗаРуководителяПоПриказу КАК УдалитьЗаРуководителяПоПриказу,
		//	|	РеализацияТоваровУслуг.УдалитьЗаГлавногоБухгалтераПоПриказу КАК УдалитьЗаГлавногоБухгалтераПоПриказу,
		//	|	РеализацияТоваровУслуг.ЗаЗаказчикаНаОсновании КАК ЗаЗаказчикаНаОсновании,
		//	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
		//	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
		//	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
		//	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
		//	|	РеализацияТоваровУслуг.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		//	|	РеализацияТоваровУслуг.ДокументБезНДС КАК ДокументБезНДС,
		//	|	РеализацияТоваровУслуг.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
		//	|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
		//	|	РеализацияТоваровУслуг.Перевозчик КАК Перевозчик,
		//	|	РеализацияТоваровУслуг.МаркаАвтомобиля КАК МаркаАвтомобиля,
		//	|	РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля КАК РегистрационныйЗнакАвтомобиля,
		//	|	РеализацияТоваровУслуг.Водитель КАК Водитель,
		//	|	РеализацияТоваровУслуг.ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
		//	|	РеализацияТоваровУслуг.КраткоеНаименованиеГруза КАК КраткоеНаименованиеГруза,
		//	|	РеализацияТоваровУслуг.СопроводительныеДокументы КАК СопроводительныеДокументы,
		//	|	РеализацияТоваровУслуг.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
		//	|	РеализацияТоваровУслуг.ОтветственныйЗаОформление КАК ОтветственныйЗаОформление,
		//	|	РеализацияТоваровУслуг.СведенияОТранспортировкеИГрузе КАК СведенияОТранспортировкеИГрузе,
		//	|	РеализацияТоваровУслуг.ПеревозкаАвтотранспортом КАК ПеревозкаАвтотранспортом,
		//	|	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
		//	|	СчетФактураВыданный.Номер КАК НомерСФ
		//	|ИЗ
		//	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//	|		ПО (РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		//	|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслугУслуги.Ссылка)
		//	|ГДЕ
		//	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер = &Номер
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	Дата УБЫВ";
		//	Запрос.УстановитьПараметр("Номер",Стр.ДоговорКонтрагента.Номер);
		//	Результат = Запрос.Выполнить();
		//	Выборка = Результат.Выбрать();
		//	КоличствоРеализаций = 1;
		//	Пока Выборка.Следующий() Цикл
		//		//	
		//		Запрос2 = Новый Запрос;
		//		Запрос2.Текст = "ВЫБРАТЬ
		//		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		//		|ИЗ
		//		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//		|ГДЕ
		//		|	РеализацияТоваровУслуг.Номер = &Номер
		//		|	И РеализацияТоваровУслуг.Дата = &Дата";
		//		Запрос2.УстановитьПараметр("Номер", Выборка.Номер);
		//		Запрос2.УстановитьПараметр("Дата", Выборка.Дата);
		//		Результат2 = Запрос2.Выполнить();
		//		Выборка2 = Результат2.Выбрать();
		//		Если Не Результат2.Пустой()  Тогда
		//			pcru_ex_Почта.Сообщить_об_ошибке("Реализация  № "+Строка(Выборка.Номер)+" от даты "+Строка(Выборка.Дата)+" уже есть!!!!");
		//			Продолжить;	
		//		КонецЕсли;
		//		
		//		УстановитьПривилегированныйРежим(Истина);
		//		// Определяем общие данные
		//		
		//		Запрос1 = Новый Запрос;
		//		Запрос1 = Новый Запрос;
		//		Запрос1.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//		|	БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетАналитическогоУчета КАК СчетАналитическогоУчета
		//		|ИЗ
		//		|	Документ.БНФООткрытиеСчетовАналитическогоУчета.СчетаУчета КАК БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета
		//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БНФООткрытиеСчетовАналитическогоУчета.ВидыАналитик КАК БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик
		//		|		ПО БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.Ссылка = БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.Ссылка
		//		|			И (БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.КлючСтроки = БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.КлючСтроки)
		//		|ГДЕ
		//		|	ВЫРАЗИТЬ(БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.ЗначениеАналитики КАК Справочник.БНФОДоговорыКредитовИДепозитов).Номер = &Код
		//		|	И БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетУчета.Код = ""48803""  //009017851
		//		|	И ПОДСТРОКА(БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетАналитическогоУчета.Код, 1, 10) = ""4880381001""";  //009017851
		//		
		//		Запрос1.УстановитьПараметр("Код", Выборка.ДоговорКонтрагента);
		//		Результат = Запрос1.Выполнить().Выбрать();
		//		Пока Результат.Следующий() Цикл
		//			//
		//			СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		//			СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		//			СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
		//			//
		//			Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001460");
		//			ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
		//			Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//			СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		//			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		//			Валюта = Справочники.Валюты.НайтиПоКоду("643");
		//			Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
		//			ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
		//			НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
		//			//
		//			ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		//			//ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
		//			// Шапка
		//			//Общие данные
		//			ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
		//			ДокументОбъект.БНФОВидДеятельностиНПФ = Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
		//			ДокументОбъект.ВидОперации = ВидОперации;
		//			ДокументОбъект.Организация = Организация;
		//			ДокументОбъект.ВалютаДокумента = Валюта;
		//			ДокументОбъект.КурсВзаиморасчетов = Выборка.КурсВзаиморасчетов;
		//			ДокументОбъект.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
		//			ДокументОбъект.Ответственный = Ответственный;
		//			ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
		//			ДокументОбъект.СуммаВключаетНДС = Ложь;
		//			
		//			ДокументОбъект.СчетУчетаРасчетовПоАвансам = Результат.СчетАналитическогоУчета;
		//			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = Результат.СчетАналитическогоУчета;
		//			
		//			ДокументОбъект.ДокументБезНДС = Ложь;
		//			ДокументОбъект.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
		//			ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации; 
		//			ДокументОбъект.Дата = Выборка.Дата;
		//			//
		//			ДокументОбъект.Номер = Выборка.Номер;
		//			//Дата
		//			//			СтрокаДата = СтрЗаменить(ЭлементМассива.ДатаУчета, ".", "");
		//			//			СтрокаДата = Прав(СтрокаДата,4) + Сред(СтрокаДата,3,2) + ?(СтрДлина(СтрокаДата) = 8, Лев(СтрокаДата, 2), "0"+Лев(СтрокаДата, 1));
		//			//ДокументОбъект.Дата = _Дата;			//Дата(СтрокаДата) + 43200;
		//			//Данные из массива
		//			ДокументОбъект.Контрагент = Стр.Контрагент;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор",Выборка.Контрагент);
		//			ДокументОбъект.ДоговорКонтрагента = Стр.ДоговорКонтрагента; //Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Выборка.ДоговорКонтрагента);
		//			ДокументОбъект.Комментарий = "#@ Загружено, дог. "+ДокументОбъект.ДоговорКонтрагента.Наименование + " "+ДокументОбъект.Контрагент.Наименование;
		//			//Табличная часть
		//			
		//			СтрокаУслуг = ДокументОбъект.Услуги.Добавить();
		//			СтрокаУслуг.Количество = 1;
		//			СтрокаУслуг.Номенклатура = Номенклатура;
		//			СтрокаУслуг.Содержание = Номенклатура.Наименование +" "+ДокументОбъект.ДоговорКонтрагента.Наименование;
		//			СтрокаУслуг.СтавкаНДС = СтавкаНДС;
		//			СтрокаУслуг.Цена = Выборка.Цена;
		//			СтрокаУслуг.Сумма = Выборка.Сумма;
		//			СтрокаУслуг.СуммаНДС = Выборка.СуммаНДС;
		//			
		//			СтрокаУслуг.СчетДоходов = СчетДоходов;  
		//			СтрокаУслуг.СчетРасходов = СчетРасходов;
		//			СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
		//			СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = СчетНДС;
		//			
		//			СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
		//			СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
		//			
		//			Попытка
		//				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
		//				НачатьТранзакцию();
		//				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
		//				СФОБ = Рез.ссылка.ПолучитьОбъект();
		//				СФОБ.Номер = Выборка.НомерСФ;
		//				СФОБ.Записать();
		//				ЗафиксироватьТранзакцию();	
		//				pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций");
		//				КоличствоРеализаций = 	КоличствоРеализаций + 1;
		//				УстановитьПривилегированныйРежим(Ложь);		
		//				//Возврат;
		//			Исключение 
		//				//	pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
		//				УстановитьПривилегированныйРежим(Ложь);	
		//				Если ТранзакцияАктивна() Тогда 
		//					ОтменитьТранзакцию();
		//				КонецЕсли;
		//				pcru_ex_Почта.Сообщить_об_ошибке( ОписаниеОшибки());
		//				//	//Возврат;  
		//				//	Продолжить;
		//			КонецПопытки;
		//			
		//			Если СуммаДляКорректировки >=  Выборка.Цена Тогда
		//				Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
		//				Ндок.Заполнить(ДокументОбъект.Ссылка);
		//				Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;
		//				Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
		//					СтрокаУслуги.Сумма = 0 ;
		//					СтрокаУслуги.Цена =  0 ;
		//					СтрокаУслуги.СуммаНДС = 0;//Окр((Выборка.Цена )*0.18,2,РежимОкругления.Окр15как10)-0.01;
		//					СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
		//				КонецЦикла; 
		//				Ндок.Дата = ДатаВыгрузки;
		//				Ндок.КорректироватьБУиНУ = Истина;
		//				Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
		//				Для каждого Движение Из ДокументОбъект.Движения Цикл
		//					Движение.Очистить();
		//					Движение.Записать(); // после записи набор записей остается заполненным
		//				КонецЦикла; 
		//				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//				СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
		//				ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(ДокументОбъект.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
		//				
		//				Если СуммаДляКорректировки = 0 Тогда 
		//					Прервать;	
		//				КонецЕсли;
		//			иначе
		//				Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
		//				Ндок.Заполнить(ДокументОбъект.Ссылка); 
		//				Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1; 
		//				Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
		//					СтрокаУслуги.Сумма = Выборка.Цена - СуммаДляКорректировки;
		//					СтрокаУслуги.Цена = Выборка.Цена - СуммаДляКорректировки;
		//					СтрокаУслуги.СуммаНДС = Окр((Выборка.Цена - СуммаДляКорректировки)*0.18,2,РежимОкругления.Окр15как10)-0.01;
		//					СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
		//					СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
		//				КонецЦикла; 
		//				Ндок.Дата = ДатаВыгрузки;
		//				Ндок.КорректироватьБУиНУ = Истина;
		//				Для каждого Движение Из ДокументОбъект.Движения Цикл
		//					Движение.Очистить();
		//					Движение.Записать(); // после записи набор записей остается заполненным
		//				КонецЦикла; 
		//				Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
		//				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//				ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(ДокументОбъект.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
		//				
		//				Прервать;
		//			КонецЕсли;	
		//		КонецЦикла;
		//	КонецЦикла;
		//КонецЕсли;
		
		//	ЗафиксироватьТранзакцию();
		//Исключение
		//	ОтменитьТранзакцию();
		//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		//КонецПопытки; 	
		
	КонецЦикла;
	
	pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

Процедура ЕжеднеаныеРеализацииНаСервереDefault_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	
	ТекстПисьма = "";
	
	
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//	Попытка
	Connection.ConnectionString =СтрокаПодключения;	 
	Connection.Open();
	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервереDefault(ДатаВыгрузки,Счетчик+1);
	//		Возврат;
	//	КонецЕсли; 
	//КонецПопытки;  
	Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+"  ContractDT, ClientDT, Sum(Amount) Amount, sum(VAT) VAT
	|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount, VAT.Amount AS VAT
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	|VAT.[Credit Account No_] = '60309.2' AND VAT.[Debit Account No_] = '60323.9' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '60323.9') AND (t1.[Credit Account No_] = '71701.4') AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	|(t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|UNION ALL
	|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1, - VAT.Amount AS VAT
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	| VAT.[Credit Account No_] = '60323.9' AND VAT.[Debit Account No_] = '60309.2' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '71701.4') AND (t1.[Credit Account No_] = '60323.9') AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	| (t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	|Group by ContractDT, ClientDT";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		попытка 
			Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		исключение 
			Стр.Вставить("НДС", 0);
		конецпопытки;
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	Стр = Неопределено; 
	
	
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		СуммаДляКорректировкиНДС = - СтрокаТЧ.НДС;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
		               |	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
		               |	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		               |		ПО (КорректировкаРеализации.ДокументРеализации = РеализацияТоваровУслугУслуги.Ссылка)
		               |			И (КорректировкаРеализации.Проведен)
		               |ГДЕ
		               |	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		               |	И (ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 8) = ""#Default""
		               |			ИЛИ ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 14) = ""#@ 76.16-91.01"")
		               |	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
		               |	И НЕ РеализацияТоваровУслугУслуги.Ссылка.ПометкаУдаления
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РеализацияТоваровУслугУслуги.Ссылка";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		//	Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НужноРаспровестиОснование = Ложь;
			если не Выборка.Ссылка.Проведен тогда 
				Об = Выборка.Ссылка.ПолучитьОбъект();
				Об.Записать(РежимЗаписиДокумента.Проведение);
				//СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Выборка.Ссылка);
				СтруктураПараметров = СтруктураПараметровДляСозданияСчетФактруы(Выборка.Ссылка);
				СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(СтруктураПараметров);

				НужноРаспровестиОснование = Истина;
			КонецЕсли;
			
			//СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				Если СуммаДляКорректировки >= Выборка.Сумма Тогда
					СтрокаУслуги.Сумма      = 0;
					СтрокаУслуги.Цена       = 0;
					СтрокаУслуги.СуммаНДС   = 0;
					СтрокаУслуги.Количество = 1;
					СуммаДляКорректировки    = СуммаДляКорректировки - Выборка.Сумма;
					СуммаДляКорректировкиНДС = СуммаДляКорректировкиНДС - Выборка.СуммаНДС;
				Иначе 
					СтрокаУслуги.Сумма      = Выборка.Сумма - СуммаДляКорректировки;
					СтрокаУслуги.Цена       = Выборка.Сумма- СуммаДляКорректировки;
					СтрокаУслуги.СуммаНДС   = Выборка.СуммаНДС - СуммаДляКорректировкиНДС;
					СтрокаУслуги.Количество = 1;
					СуммаДляКорректировки = 0;
					СуммаДляКорректировкиНДС = 0;
				КонецЕсли;
			КонецЦикла; 
			
			Ндок.Комментарий =  Выборка.Ссылка.Комментарий;
			Ндок.Дата = ДатаВыгрузки;
			Ндок.КорректироватьБУиНУ = Истина;
			//
			//Попытка
			//	НачатьТранзакцию();
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			//Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
			СтруктураПараметров = СтруктураПараметровДляСозданияСчетФактруы(НДок.Ссылка);
			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(СтруктураПараметров);

			Если НужноРаспровестиОснование тогда
				Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				//						Об2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(Выборка.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
			//	ЗафиксироватьТранзакцию();
			//Исключение
			//	ОтменитьТранзакцию();
			//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
			//КонецПопытки; 
			//
			Если  СуммаДляКорректировки <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// 		
		//#Область Проводка3 
		//Если СуммаДляКорректировки > 0 Тогда 
		//	
		//	Организация = Справочники.Организации.НайтиПоКоду("000000001");
		//	ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		//	ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		//	//
		//	ОперацияОбъект.Организация = Организация;
		//	ОперацияОбъект.Комментарий = "#Корректировка Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
		//	ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//	ОперацияОбъект.Содержание = "#Корректировка Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
		//	//
		//	ОперацияОбъект.Проведен = Истина;
		//	ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		//	ОперацияОбъект.Записать();
		//	//
		//	НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		//	НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		//	НаборЗаписей.Прочитать(); 
		//	Сумма = 0;
		//	//
		//	СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		//	УсловияКредита = СтрСчета.УсловиеЗайма; 	
		//	Контрагент =СтрСчета.Контрагент; 
		//	Договор = СтрСчета.ДоговорКонтрагента; 
		//	
		//	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	НоваяЗапись = НаборЗаписей.Добавить(); 
		//	НоваяЗапись.Активность = Истина;
		//	//
		//	//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
		//	если  СтрСчета.свойство("_48802_1") тогда
		//		НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
		//	Иначеесли  СтрСчета.свойство("_49402_1") тогда
		//		НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
		//	Иначе
		//		НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
		//	КонецЕсли;
		//	
		//	НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
		//	БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
		//	БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
		//	//
		//	НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
		//	НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
		//	БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
		//	//
		//	НоваяЗапись.Содержание= "#Корректировка Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
		//	НоваяЗапись.Организация = Организация;
		//	Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
		//		НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
		//	КонецЕсли; 
		//	Если НоваяЗапись.СчетДт.Валютный Тогда
		//		НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
		//		НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
		//	КонецЕсли;
		//	Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
		//		НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
		//	КонецЕсли; 
		//	//
		//	Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
		//		НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
		//	КонецЕсли; 
		//	//
		//	Если НоваяЗапись.СчетКт.Валютный Тогда
		//		НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
		//		НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
		//	КонецЕсли;
		//	//
		//	Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
		//		НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
		//	КонецЕсли; 
		//	//
		//	НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
		//	НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
		//	НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
		//	//
		//	Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
		//		НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
		//		Продолжить;
		//	КонецЕсли;
		//	Попытка
		//		Сумма = Сумма + СтрокаТЧ.Сумма;
		//	Исключение
		//		Сумма = Сумма + 0;
		//	КонецПопытки;
		//	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	
		//	НаборЗаписей.Записать(Истина);
		//	ОперацияОбъект.СуммаОперации = Сумма;
		//	ОперацияОбъект.Записать();
		//	
		//	
		//КонецЕсли;
		//#КонецОбласти
		//
		
		
		
		//СуммаДляКорректировки = -СтрокаТЧ.Сумма;
		//Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		//|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		//|	ВЫБОР
		//|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		//|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		//|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		//|	КОНЕЦ КАК Оплата
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		//|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		//|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		//|	ИЗ
		//|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		//|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		//|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		//|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		//|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		//|	ГДЕ
		//|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		//|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		//|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,7) = ""#Default""
		//|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,7) = ""#Default""
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		РеализацияТоваровУслуг.Ссылка,
		//|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		//|ГДЕ
		//|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	ВложенныйЗапрос.Ссылка.МоментВремени";
		//Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		//Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	Об = Выборка.Ссылка.ПолучитьОбъект();
		//	Об.Записать(РежимЗаписиДокумента.Проведение);
		//	
		//	
		//	СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
		//	Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
		//	Ндок.Заполнить(Выборка.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;
		//	Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
		//		СтрокаУслуги.Сумма = СуммаКорректировки;
		//		СтрокаУслуги.Цена = СуммаКорректировки;
		//		СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
		//		СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
		//	КонецЦикла; 
		//	Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//	СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
		//	Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
		//КонецЦикла;
		
		
		
		//Если СуммаДляКорректировки > 0 Тогда
		//	
		//	Организация = Справочники.Организации.НайтиПоКоду("000000001");
		//	//Дата1 = ЭтаФорма.Период.ДатаНачала;
		//	//Дата2 = КонецДня(ДатаВыгрузки);
		//	// Формируем строку подключения
		//	СтрокаПодключения =
		//	"srvr='RUSPBPACC01'; ref='1c_audit'; usr='user'; pwd='1Cadmin';";
		//	ComConnector = pcru_ex_ВнешниеСоединения.ПолучитьCOMОбъектПоВерсииПлатформы();
		//	СообщениеПользователю = Новый СообщениеПользователю;
		//	//			Попытка
		//	ComConnection = COMConnector.Connect(СтрокаПодключения);
		//	//Исключение
		//	//	СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		//	//	СообщениеПользователю.pcru_ex_Почта.Сообщить_об_ошибке();
		//	//	Возврат;
		//	//КонецПопытки;
		//	Запрос = ComConnection.NewObject("Запрос"); //#@
		//	Запрос.Текст = "ВЫБРАТЬ 
		//	|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка,
		//	|	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
		//	|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК НоменклатураКод,
		//	|	РеализацияТоваровУслугУслуги.Содержание КАК Содержание,
		//	|	РеализацияТоваровУслугУслуги.Количество КАК Количество,
		//	|	РеализацияТоваровУслугУслуги.Цена КАК Цена,
		//	|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
		//	|	РеализацияТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		//	|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
		//	|	РеализацияТоваровУслугУслуги.СчетДоходов КАК СчетДоходов,
		//	|	РеализацияТоваровУслугУслуги.Субконто КАК Субконто,
		//	|	РеализацияТоваровУслугУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
		//	|	РеализацияТоваровУслугУслуги.СчетРасходов КАК СчетРасходов,
		//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка1,
		//	|	РеализацияТоваровУслуг.ВерсияДанных КАК ВерсияДанных,
		//	|	РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
		//	|	РеализацияТоваровУслуг.Номер КАК Номер,
		//	|	РеализацияТоваровУслуг.Дата КАК Дата,
		//	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
		//	|	РеализацияТоваровУслуг.ВидОперации КАК ВидОперации,
		//	|	РеализацияТоваровУслуг.Организация КАК Организация,
		//	|	РеализацияТоваровУслуг.Склад КАК Склад,
		//	|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		//	|	РеализацияТоваровУслуг.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
		//	|	РеализацияТоваровУслуг.Патент КАК Патент,
		//	|	РеализацияТоваровУслуг.Контрагент.Код КАК Контрагент,
		//	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ДоговорКонтрагента,
		//	|	РеализацияТоваровУслуг.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
		//	|	РеализацияТоваровУслуг.ТипЦен КАК ТипЦен,
		//	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
		//	|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		//	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		//	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
		//	|	РеализацияТоваровУслуг.УдалитьУчитыватьНДС КАК УдалитьУчитыватьНДС,
		//	|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
		//	|	РеализацияТоваровУслуг.УдалитьСчетУчетаДоходовПоТаре КАК УдалитьСчетУчетаДоходовПоТаре,
		//	|	РеализацияТоваровУслуг.УдалитьСчетУчетаРасходовПоТаре КАК УдалитьСчетУчетаРасходовПоТаре,
		//	|	РеализацияТоваровУслуг.УдалитьСтатьяДоходовИРасходовПоТаре КАК УдалитьСтатьяДоходовИРасходовПоТаре,
		//	|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
		//	|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
		//	|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
		//	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		//	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
		//	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		//	|	РеализацияТоваровУслуг.Ответственный КАК Ответственный,
		//	|	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
		//	|	РеализацияТоваровУслуг.РучнаяКорректировка КАК РучнаяКорректировка,
		//	|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
		//	|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		//	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
		//	|	РеализацияТоваровУслуг.УдалитьЗаРуководителяПоПриказу КАК УдалитьЗаРуководителяПоПриказу,
		//	|	РеализацияТоваровУслуг.УдалитьЗаГлавногоБухгалтераПоПриказу КАК УдалитьЗаГлавногоБухгалтераПоПриказу,
		//	|	РеализацияТоваровУслуг.ЗаЗаказчикаНаОсновании КАК ЗаЗаказчикаНаОсновании,
		//	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
		//	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
		//	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
		//	|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
		//	|	РеализацияТоваровУслуг.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		//	|	РеализацияТоваровУслуг.ДокументБезНДС КАК ДокументБезНДС,
		//	|	РеализацияТоваровУслуг.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
		//	|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
		//	|	РеализацияТоваровУслуг.Перевозчик КАК Перевозчик,
		//	|	РеализацияТоваровУслуг.МаркаАвтомобиля КАК МаркаАвтомобиля,
		//	|	РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля КАК РегистрационныйЗнакАвтомобиля,
		//	|	РеализацияТоваровУслуг.Водитель КАК Водитель,
		//	|	РеализацияТоваровУслуг.ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
		//	|	РеализацияТоваровУслуг.КраткоеНаименованиеГруза КАК КраткоеНаименованиеГруза,
		//	|	РеализацияТоваровУслуг.СопроводительныеДокументы КАК СопроводительныеДокументы,
		//	|	РеализацияТоваровУслуг.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
		//	|	РеализацияТоваровУслуг.ОтветственныйЗаОформление КАК ОтветственныйЗаОформление,
		//	|	РеализацияТоваровУслуг.СведенияОТранспортировкеИГрузе КАК СведенияОТранспортировкеИГрузе,
		//	|	РеализацияТоваровУслуг.ПеревозкаАвтотранспортом КАК ПеревозкаАвтотранспортом,
		//	|	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
		//	|	СчетФактураВыданный.Номер КАК НомерСФ,
		//	|	СчетФактураВыданный.Дата КАК ДатаСФ
		//	|ИЗ
		//	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//	|		ПО (РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		//	|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслугУслуги.Ссылка)
		//	|ГДЕ
		//	|	 РеализацияТоваровУслуг.ДоговорКонтрагента.Номер = &Номер //И ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 14) = ""#@ 76.16-91.01""
		//	|УПОРЯДОЧИТЬ ПО
		//	|	Дата УБЫВ";
		//	Запрос.УстановитьПараметр("Номер",Стр.ДоговорКонтрагента.Номер);
		//	
		//	Результат = Запрос.Выполнить();
		//	Выборка = Результат.Выбрать();
		//	Счеччик = 1;
		//	
		//	
		//	Пока Выборка.Следующий() Цикл
		//		//	
		//		
		//		Попытка
		//			
		//			Запрос2 = Новый Запрос;
		//			Запрос2.Текст = "ВЫБРАТЬ
		//			|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		//			|ИЗ
		//			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//			|ГДЕ
		//			|	РеализацияТоваровУслуг.Номер = &Номер
		//			|	И РеализацияТоваровУслуг.Дата = &Дата";
		//			Запрос2.УстановитьПараметр("Номер", Выборка.Номер);
		//			Запрос2.УстановитьПараметр("Дата", Выборка.Дата);
		//			Результат2 = Запрос2.Выполнить();
		//			Выборка2 = Результат2.Выбрать();
		//			
		//			УстановитьПривилегированныйРежим(Истина);
		//			
		//			
		//			СтрСчетов = pcru_УМФО.ОткрытьСчетаКонтрагента(Стр.ДоговорКонтрагента);
		//			СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000722005");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		//			СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		//			СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000722005");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
		//			//
		//			Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00003115");
		//			ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
		//			Ответственный = ПараметрыСеанса.ТекущийПользователь;
		//			СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		//			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		//			Валюта = Справочники.Валюты.НайтиПоКоду("643");
		//			Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000278"); // !!!ПОМЕНЯТЬ!!!
		//			ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
		//			НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
		//			
		//			
		//			Если Не Результат2.Пустой()  Тогда
		//				Выборка2.Следующий();					
		//				Запрос3 = Новый Запрос;
		//				Запрос3.Текст = "ВЫБРАТЬ
		//				|	КорректировкаРеализации.Ссылка КАК Ссылка
		//				|ИЗ
		//				|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		//				|ГДЕ
		//				|	КорректировкаРеализации.ДокументРеализации = &ДокументРеализации";
		//				
		//				Запрос3.УстановитьПараметр("ДокументРеализации",Выборка2.Ссылка);
		//				
		//				Результат3 = Запрос3.Выполнить();
		//				Выборка3 = Результат3.Выбрать();
		//				
		//				Если Выборка3.Следующий() Тогда
		//					pcru_ex_Почта.Сообщить_об_ошибке("Реализация  № "+Строка(Выборка.Номер)+" от даты "+Строка(Выборка.Дата)+" уже есть!!!!");
		//					Продолжить;	
		//				КонецЕсли;
		//				
		//				ДокументОбъект =  Выборка2.Ссылка.ПолучитьОбъект();
		//				
		//			Иначе	
		//				
		//				//
		//				ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		//				//ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
		//				// Шапка
		//				//Общие данные
		//				
		//			КонецЕсли;
		//			
		//			ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
		//			ДокументОбъект.БНФОВидДеятельностиНПФ = Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
		//			ДокументОбъект.ВидОперации = ВидОперации;
		//			ДокументОбъект.Организация = Организация;
		//			ДокументОбъект.ВалютаДокумента = Валюта;
		//			ДокументОбъект.КурсВзаиморасчетов = Выборка.КурсВзаиморасчетов;
		//			ДокументОбъект.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
		//			ДокументОбъект.Ответственный = Ответственный;
		//			ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
		//			ДокументОбъект.СуммаВключаетНДС = Ложь;
		//			
		//			ДокументОбъект.СчетУчетаРасчетовПоАвансам = СтрСчетов._60323_9;
		//			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СтрСчетов._60323_9;
		//			
		//			ДокументОбъект.ДокументБезНДС = Ложь;
		//			ДокументОбъект.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
		//			ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации; 
		//			ДокументОбъект.Дата = Выборка.Дата;
		//			//
		//			ДокументОбъект.Номер = Выборка.Номер;
		//			//Дата
		//			//			СтрокаДата = СтрЗаменить(ЭлементМассива.ДатаУчета, ".", "");
		//			//			СтрокаДата = Прав(СтрокаДата,4) + Сред(СтрокаДата,3,2) + ?(СтрДлина(СтрокаДата) = 8, Лев(СтрокаДата, 2), "0"+Лев(СтрокаДата, 1));
		//			//ДокументОбъект.Дата = _Дата;			//Дата(СтрокаДата) + 43200;
		//			//Данные из массива
		//			ДокументОбъект.Контрагент = Стр.Контрагент;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор",Выборка.Контрагент);
		//			ДокументОбъект.ДоговорКонтрагента = Стр.ДоговорКонтрагента; //Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Выборка.ДоговорКонтрагента);
		//			ДокументОбъект.Комментарий = "#@ Загружено для Корректировки Дефолта, дог. "+ДокументОбъект.ДоговорКонтрагента.Наименование + " "+ДокументОбъект.Контрагент.Наименование;
		//			//Табличная часть
		//			
		//			ДокументОбъект.Услуги.очистить();
		//			СтрокаУслуг = ДокументОбъект.Услуги.Добавить();
		//			СтрокаУслуг.Количество = 1;
		//			СтрокаУслуг.Номенклатура = Номенклатура;
		//			СтрокаУслуг.Содержание = Номенклатура.Наименование +" "+ДокументОбъект.ДоговорКонтрагента.Наименование;
		//			СтрокаУслуг.СтавкаНДС = СтавкаНДС;
		//			СтрокаУслуг.Цена = Выборка.Цена;
		//			СтрокаУслуг.Сумма = Выборка.Сумма;
		//			СтрокаУслуг.СуммаНДС = Выборка.СуммаНДС;
		//			
		//			СтрокаУслуг.СчетДоходов = СчетДоходов;  
		//			СтрокаУслуг.СчетРасходов = СчетРасходов;
		//			СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
		//			СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = СчетНДС;
		//			
		//			СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
		//			СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000278");
		//			//					СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
		//			
		//			
		//			//			Попытка
		//			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
		//			//				НачатьТранзакцию();
		//			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//			
		//			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
		//			СФОБ = Рез.ссылка.ПолучитьОбъект();
		//			СФОБ.Номер = Выборка.НомерСФ;
		//			СФОБ.Записать();
		//			//				ЗафиксироватьТранзакцию();	
		//			pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций");
		//			Счеччик = 	Счеччик + 1;
		//			УстановитьПривилегированныйРежим(Ложь);		
		//			//Возврат;
		//			//Исключение 
		//			//	pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
		//			//	УстановитьПривилегированныйРежим(Ложь);	
		//			//	Если ТранзакцияАктивна() Тогда 
		//			//		ОтменитьТранзакцию();
		//			//	КонецЕсли;
		//			//	pcru_ex_Почта.Сообщить_об_ошибке( ОписаниеОшибки());
		//			//	//Возврат;
		//			//КонецПопытки;
		//			//
		//			
		//			
		//			
		//			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
		//			Ндок.Заполнить(ДокументОбъект.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;
		//			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
		//				СтрокаУслуги.Сумма    =  Выборка.Цена - СуммаДляКорректировки;
		//				СтрокаУслуги.Цена     =  Выборка.Цена - СуммаДляКорректировки;
		//				СтрокаУслуги.СуммаНДС =  Окр((Выборка.Цена - СуммаДляКорректировки)*0.18,2,РежимОкругления.Окр15как10)-0.01;
		//				СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
		//			КонецЦикла; 
		//			Ндок.Дата = ДатаВыгрузки;
		//			Ндок.КорректироватьБУиНУ = Истина;
		//			Для каждого Движение Из ДокументОбъект.Движения Цикл
		//				Движение.Очистить();
		//				Движение.Записать(); // после записи набор записей остается заполненным
		//			КонецЦикла; 
		//			Ндок.комментарий =  ДокументОбъект.Комментарий ;
		//			Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
		//			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//			
		//			Прервать;
		//			
		//			
		//			//Если СуммаДляКорректировки >=  Выборка.Цена Тогда
		//			//	Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
		//			//	Ндок.Заполнить(ДокументОбъект.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;
		//			//	Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
		//			//		СтрокаУслуги.Сумма    = 0;
		//			//		СтрокаУслуги.Цена     = 0;
		//			//		СтрокаУслуги.СуммаНДС = 0;
		//			//		СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
		//			//	КонецЦикла; 
		//			//	Ндок.Дата = ДатаВыгрузки;
		//			//	Ндок.КорректироватьБУиНУ = Истина;
		//			//	Для каждого Движение Из ДокументОбъект.Движения Цикл
		//			//		Движение.Очистить();
		//			//		Движение.Записать(); // после записи набор записей остается заполненным
		//			//	КонецЦикла; 
		//			//	Ндок.комментарий =  ДокументОбъект.Комментарий ;
		//			//	Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//			//	Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
		//			//	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//			//	
		//			//	СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
		//			//	
		//			//	Если СуммаДляКорректировки = 0 Тогда 
		//			//		Прервать;	
		//			//	КонецЕсли;
		//			//иначе
		//			//	Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
		//			//	Ндок.Заполнить(ДокументОбъект.Ссылка); 
		//			//	Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1; 
		//			//	Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
		//			//		СтрокаУслуги.Сумма = Выборка.Цена - СуммаДляКорректировки;
		//			//		СтрокаУслуги.Цена = Выборка.Цена - СуммаДляКорректировки;
		//			//		СтрокаУслуги.СуммаНДС = Окр((Выборка.Цена - СуммаДляКорректировки)*0.18,2,РежимОкругления.Окр15как10)-0.01;
		//			//		СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
		//			//		СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
		//			//	КонецЦикла; 
		//			//	Ндок.Дата = ДатаВыгрузки;
		//			//	Ндок.КорректироватьБУиНУ = Истина;
		//			//	Для каждого Движение Из ДокументОбъект.Движения Цикл
		//			//		Движение.Очистить();
		//			//		Движение.Записать(); // после записи набор записей остается заполненным
		//			//	КонецЦикла; 
		//			//	Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//			//	Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
		//			//	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//			//	
		//			//	Прервать;
		//			//	
		//			//КонецЕсли; 
		//			
		//			
		//			//	КонецЦикла;
		//			
		//			
		//			
		//			
		//		Исключение
		//			
		//		КонецПопытки;  	
		//		
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		//
	КонецЦикла;
	//
	
	pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервереDefault от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

Процедура ЕжеднеаныеРеализацииБезНДСНаСервере_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	ТекстПисьма = "";
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	Command.CommandText = "SELECT    "+ПолучитьПараметрыВыборки()+" 
	| ContractDT,
	| ClientDT, 
	| sum(Amount) Amount
	| FROM(SELECT [Dt Contract No_] AS ContractDT,contrDT.[Customer No_] ClientDT,Amount 
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	| 						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	| WHERE
	|						[Debit Account No_] = '48802.1'
	|						AND 
	|						[Credit Account No_] = '71001.1' 
	|						AND 
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND 
	|					[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						 UNION ALL
	|SELECT [Dt Contract No_] AS ContractDT, contrDT.[Customer No_] ClientDT, 
	|- Amount AS Expr1
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|WHERE
	|						[Debit Account No_] = '71001.1'
	|						AND 
	|						[Credit Account No_] = '48802.1'
	|						AND
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND
	|						[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						) AS tunion
	|group by ContractDT,ClientDT
	|Having sum(Amount) <> 0";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	
	//Попытка 
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		//		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	
	
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		|	КОНЕЦ КАК Оплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		|	ГДЕ
		|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,28) = ""#Проценты на основную часть""
		|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,28) = ""#Проценты на основную часть""
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Ссылка.МоментВремени";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				СтрокаУслуги.Сумма = СуммаКорректировки;
				СтрокаУслуги.Цена = СуммаКорректировки;
				СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
				СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
			КонецЦикла; 
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
		КонецЦикла;
		
		#Область Проводка3 
		Если СуммаДляКорректировки > 0 Тогда 
			
			Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
			ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
			//
			ОперацияОбъект.Организация = Организация;
			ОперацияОбъект.Комментарий = "#Корректировка Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ОперацияОбъект.Содержание = "#Корректировка Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			//
			ОперацияОбъект.Проведен = Истина;
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			ОперацияОбъект.Записать();
			//
			НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
			НаборЗаписей.Прочитать(); 
			Сумма = 0;
			//
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			если  СтрСчета.свойство("_48802_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			//
			НоваяЗапись.Содержание= "#Корректировка Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			НаборЗаписей.Записать(Истина);
			ОперацияОбъект.СуммаОперации = Сумма;
			ОперацияОбъект.Записать();
			
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	//
	
КонецПроцедуры 

Процедура ПросрочкаНаСервере_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	ТекстПисьма = "";
	
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	Command.CommandText = "SELECT   ContractDT, Sum(Amount) Amount from
	|(SELECT
	|	t1.[Dt Contract No_] ContractDT,
	|	t1.Amount Amount
	|	 FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 
	|	 WHERE t1.[Debit Account No_] = '48802.2' 
	|	 AND ( t1.[Credit Account No_] = '71001.2' ) 
	|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|Union all
	|	 SELECT
	|	 t1.[Dt Contract No_] ContractDT,
	|	 -t1.Amount
	|	FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 
	|	 WHERE t1.[Debit Account No_] = '71001.2' 
	|	 AND ( t1.[Credit Account No_] = '48802.2' ) 
	|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|	 ) tunion
	|	Group by ContractDT	
	|	 Having Sum(Amount) <> 0";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	//Попытка 
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		//	Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		//Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		|	КОНЕЦ КАК Оплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		|	ГДЕ
		|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,28) = ""#Проценты на основную часть""
		|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,28) = ""#Проценты на основную часть""
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Ссылка.МоментВремени";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				СтрокаУслуги.Сумма = СуммаКорректировки;
				СтрокаУслуги.Цена = СуммаКорректировки;
				СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
				СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
			КонецЦикла; 
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
		КонецЦикла;
		
		#Область Проводка3 
		Если СуммаДляКорректировки > 0 Тогда 
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
			ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
			//
			ОперацияОбъект.Организация = Организация;
			ОперацияОбъект.Комментарий = "#Корректировка Running Interest Контрагент "+СтрСчета.Контрагент + " Договор "+СтрокаТЧ.ДоговорДТ;
			ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ОперацияОбъект.Содержание = "#Корректировка Running Interest Контрагент "+СтрСчета.Контрагент + " Договор "+СтрокаТЧ.ДоговорДТ;
			//
			ОперацияОбъект.Проведен = Истина;
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			
			ОперацияОбъект.Записать();
			//
			НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
			НаборЗаписей.Прочитать(); 
			Сумма = 0;
			//
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48802_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			//НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//                                                                                         //7100181000311180000100231
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			//
			НоваяЗапись.Содержание= "#Корректировка Running Interest Контрагент "+СтрСчета.Контрагент + " Договор "+СтрокаТЧ.ДоговорДТ;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			НаборЗаписей.Записать(Истина);
			ОперацияОбъект.СуммаОперации = Сумма;
			ОперацияОбъект.Записать();
			
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	//
	
КонецПроцедуры

Процедура ЕжеднеаныеРеализацииБезНДСНаСервереИП_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	ТекстПисьма = "";
	
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	Command.CommandText = "SELECT    "+ПолучитьПараметрыВыборки()+" 
	| ContractDT,
	| ClientDT, 
	| sum(Amount) Amount
	| FROM(SELECT [Dt Contract No_] AS ContractDT,contrDT.[Customer No_] ClientDT,Amount 
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	| 						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	| WHERE
	|						[Debit Account No_] = '49402.1'
	|						AND 
	|						[Credit Account No_] = '71001.1' 
	|						AND 
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND 
	|					[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						 UNION ALL
	|SELECT [Dt Contract No_] AS ContractDT, contrDT.[Customer No_] ClientDT, 
	|- Amount AS Expr1
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|WHERE
	|						[Debit Account No_] = '71001.1'
	|						AND 
	|						[Credit Account No_] = '49402.1'
	|						AND
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND
	|						[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						) AS tunion
	|group by ContractDT,ClientDT
	|Having sum(Amount) <> 0";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	
	//Попытка 
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		//	Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		|	КОНЕЦ КАК Оплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		|	ГДЕ
		|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,28) = ""#Проценты на основную часть""
		|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,28) = ""#Проценты на основную часть""
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Ссылка.МоментВремени";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				СтрокаУслуги.Сумма = СуммаКорректировки;
				СтрокаУслуги.Цена = СуммаКорректировки;
				СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
				СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
			КонецЦикла; 
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
		КонецЦикла;
		
		#Область ПроводкаКорректировки 
		Если СуммаДляКорректировки > 0 Тогда 
			
			Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
			ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
			//
			ОперацияОбъект.Организация = Организация;
			ОперацияОбъект.Комментарий = "#Корректировка ИП Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ОперацияОбъект.Содержание = "#Корректировка ИП Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			//
			ОперацияОбъект.Проведен = Истина;
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			ОперацияОбъект.Записать();
			//
			НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			НаборЗаписей.Прочитать(); 
			Сумма = 0;
			//
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			
			//НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			
			если  СтрСчета.свойство("_48802_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			//
			НоваяЗапись.Содержание= "#Корректировка ИП Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			НаборЗаписей.Записать(Истина);
			ОперацияОбъект.СуммаОперации = Сумма;
			ОперацияОбъект.Записать();
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	//
	
КонецПроцедуры 

Процедура ПросрочкаНаСервереИП_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	ТекстПисьма = "";
	
	
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	Command.CommandText = "SELECT    ContractDT, Sum(Amount) Amount from
	|(SELECT
	|	t1.[Dt Contract No_] ContractDT,
	|	t1.Amount Amount
	|	 FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 
	|	 WHERE t1.[Debit Account No_] = '49402.2' 
	|	 AND ( t1.[Credit Account No_] = '71001.2' ) 
	|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|Union all
	|	 SELECT
	|	 t1.[Dt Contract No_] ContractDT,
	|	 -t1.Amount
	|	FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 
	|	 WHERE t1.[Debit Account No_] = '71001.2' 
	|	 AND ( t1.[Credit Account No_] = '49402.2' ) 
	|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|	 ) tunion
	|	Group by ContractDT	
	|	 Having Sum(Amount) <> 0";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	//Попытка 
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		//		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		//		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		|	КОНЕЦ КАК Оплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		|	ГДЕ
		|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,28) = ""#Проценты на основную часть""
		|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,28) = ""#Проценты на основную часть""
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Ссылка.МоментВремени";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				СтрокаУслуги.Сумма = СуммаКорректировки;
				СтрокаУслуги.Цена = СуммаКорректировки;
				СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
				СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
			КонецЦикла; 
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
		КонецЦикла;
		
		#Область Проводка3 
		Если СуммаДляКорректировки > 0 Тогда 
			
			Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
			ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
			//
			ОперацияОбъект.Организация = Организация;
			ОперацияОбъект.Комментарий = "#Корректировка ИП Running Interest Контрагент Договор "+СтрокаТЧ.ДоговорДТ;
			ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ОперацияОбъект.Содержание = "#Корректировка ИП Running Interest Контрагент  Договор "+СтрокаТЧ.ДоговорДТ;
			//
			ОперацияОбъект.Проведен = Истина;
			ОперацияОбъект.Записать();
			//
			НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			НаборЗаписей.Прочитать(); 
			Сумма = 0;
			//
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48802_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			//
			НоваяЗапись.Содержание= "#Корректировка ИП Running Interest  Договор "+СтрокаТЧ.ДоговорДТ;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			НаборЗаписей.Записать(Истина);
			ОперацияОбъект.СуммаОперации = Сумма;
			ОперацияОбъект.Записать();
			
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	//
	
КонецПроцедуры

Процедура НовыйБлок_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	ТекстПисьма = "";
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	Command.CommandText = "SELECT    "+ПолучитьПараметрыВыборки()+" 
	| ContractDT,
	| ClientDT, 
	| sum(Amount) Amount
	| FROM(SELECT [Dt Contract No_] AS ContractDT,contrDT.[Customer No_] ClientDT,Amount 
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	| 						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	| WHERE
	|						[Debit Account No_] = '48802.3'
	|						AND 
	|						[Credit Account No_] = '71001.1' 
	|						AND 
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND 
	|					[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						 UNION ALL
	|SELECT [Dt Contract No_] AS ContractDT, contrDT.[Customer No_] ClientDT, 
	|- Amount AS Expr1
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|WHERE
	|						[Debit Account No_] = '71001.1'
	|						AND 
	|						[Credit Account No_] = '48802.3'
	|						AND
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND
	|						[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						) AS tunion
	|group by ContractDT,ClientDT
	|Having sum(Amount) <> 0";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	
	//Попытка 
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		//		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	
	
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		//|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		//|	ВЫБОР
		//|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		//|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		//|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		//|	КОНЕЦ КАК Оплата
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		//|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		//|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		//|	ИЗ
		//|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		//|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		//|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		//|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		//|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		//|	ГДЕ
		//|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		//|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		//|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,28) = ""#Проценты на основную часть""
		//|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,28) = ""#Проценты на основную часть""
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		РеализацияТоваровУслуг.Ссылка,
		//|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		//|ГДЕ
		//|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	ВложенныйЗапрос.Ссылка.МоментВремени";
		//Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		//Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
		//	Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
		//	Ндок.Заполнить(Выборка.Ссылка);
		//	Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
		//		СтрокаУслуги.Сумма = СуммаКорректировки;
		//		СтрокаУслуги.Цена = СуммаКорректировки;
		//		СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
		//		СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
		//	КонецЦикла; 
		//	Ндок.Записать(РежимЗаписиДокумента.Проведение);
		//	СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
		//КонецЦикла;
		
		#Область Проводка3 
		Если СуммаДляКорректировки > 0 Тогда 
			
			Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
			ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
			//
			ОперацияОбъект.Организация = Организация;
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", ИСТИНА);
			
			ОперацияОбъект.Комментарий = "#Корректировка service/default Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ОперацияОбъект.Содержание = "#Корректировка service/default Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			//
			ОперацияОбъект.Проведен = Истина;
			ОперацияОбъект.Записать();
			
			//
			НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			НаборЗаписей.Прочитать(); 
			Сумма = 0;
			//
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			если  СтрСчета.свойство("_48802_3") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_3") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			//
			НоваяЗапись.Содержание= "#Корректировка service/default Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			НаборЗаписей.Записать(Истина);
			ОперацияОбъект.СуммаОперации = Сумма;
			ОперацияОбъект.Записать();
			
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	//
	
КонецПроцедуры 

Процедура СервисПакет_корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	ТекстПисьма = "";
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	Command.CommandText = "SELECT    "+ПолучитьПараметрыВыборки()+" 
	| ContractDT,
	| ClientDT, 
	| sum(Amount) Amount
	| FROM(SELECT [Dt Contract No_] AS ContractDT,contrDT.[Customer No_] ClientDT,Amount 
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	| 						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	| WHERE
	|						[Debit Account No_] = '48803.2'
	|						AND 
	|						[Credit Account No_] = '71002.1' 
	|						AND 
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND 
	|					[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						 UNION ALL
	|SELECT [Dt Contract No_] AS ContractDT, contrDT.[Customer No_] ClientDT, 
	|- Amount AS Expr1
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|						 LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|WHERE
	|						[Debit Account No_] = '71002.1'
	|						AND 
	|						[Credit Account No_] = '48803.2'
	|						AND
	|						[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|						AND
	|						[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|						) AS tunion
	|group by ContractDT,ClientDT
	|Having sum(Amount) <> 0";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	
	//Попытка 
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		//		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	
	
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		|	КОНЕЦ КАК Оплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|			ПОЛНОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		|					ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		|					ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		|					ПОЛНОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги1
		|					ПО РеализацияТоваровУслугУслуги1.Ссылка = РеализацияТоваровУслуг1.Ссылка
		|				ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|				ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		|			ПО РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка
		|	ГДЕ
		|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента
		|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		|		И РеализацияТоваровУслугУслуги.СтавкаНДС = &СтавкаНДС
		|		И РеализацияТоваровУслугУслуги1.СтавкаНДС = &СтавкаНДС
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Ссылка.МоментВремени УБЫВ";
		Запрос.УстановитьПараметр("СтавкаНДС",Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Ндок.Дата = КонецДня(ДатаВыгрузки);
			
			Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			
			//	Ндок.СчетУчетаРасчетовПоАвансам= Стр._48803_2;
			Ндок.СчетУчетаРасчетовСКонтрагентом= Стр._48803_2;
			
			
			
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				СтрокаУслуги.Сумма = СуммаКорректировки;
				СтрокаУслуги.Цена = СуммаКорректировки;
				СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
				СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
			КонецЦикла; 
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
		КонецЦикла;
		
		#Область Проводка3 
		Если СуммаДляКорректировки > 0 Тогда 
			
			Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
			ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
			//
			ОперацияОбъект.Организация = Организация;
			ОперацияОбъект.Комментарий = "#Корректировка service/default Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ОперацияОбъект.Содержание = "#Корректировка service/default Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			//
			ОперацияОбъект.Проведен = Истина;
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			ОперацияОбъект.Записать();
			//
			НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
			НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
			НаборЗаписей.Прочитать(); 
			Сумма = 0;
			//
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			если  СтрСчета.свойство("_48803_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			//
			НоваяЗапись.Содержание= "#Корректировка service/default Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			НаборЗаписей.Записать(Истина);
			ОперацияОбъект.СуммаОперации = Сумма;
			ОперацияОбъект.Записать();
			
			
		КонецЕсли;
		#КонецОбласти
		
	КонецЦикла;
	//
	
КонецПроцедуры 

Процедура АгентскоеВознаграждение_Корректировки(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//	Попытка
	Connection.ConnectionString =СтрокаПодключения;	 
	Connection.Open();
	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1)
	//	КонецЕсли; 
	//КонецПопытки; 
	Счетчик = 0;//Обнуляем счетчик
	Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) Amount, sum(VAT) VAT
	|FROM (SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount, VAT.Amount AS VAT
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	|VAT.[Credit Account No_] = '60322.12' AND VAT.[Debit Account No_] = '60309.3' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '71601.10') AND (t1.[Credit Account No_] = '60322.12') AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	|(t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|UNION ALL
	//|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1, - VAT.Amount AS VAT
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//| ["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//| ["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	//| ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	//| VAT.[Credit Account No_] = '48803.1' AND VAT.[Debit Account No_] = '60309.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	//|WHERE(t1.[Debit Account No_] = '71002.1') AND (t1.[Credit Account No_] = '48803.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//| (t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|) AS tunion
	|Group by ContractDT, ClientDT";
	Command.CommandText = СтрЗаменить(Command.CommandText,""+База+"",База);
	Command.CommandText = СтрЗаменить(Command.CommandText,""+Фирма+"",Фирма);
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	//	Попытка
	RecordSet = Command.Execute();
	
	
	Счетчик = 0;//Обнуляем счетчик
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		RecordSet.Close();
		Возврат;
	КонецЕсли;
	
	//	Попытка
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		Попытка
			Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Исключение
			Стр.Вставить("НДС",0);
		КонецПопытки; 
		Если число(RecordSet.Fields("Amount").Value) > 0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	
	Сумма = 0;
	КоличствоРеализаций = 1;
	Стр = Неопределено; 
	
	ТекстПисьма = "";
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		СуммаДляКорректировкиНДС = - СтрокаТЧ.НДС;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
			
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
		|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
		|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО (КорректировкаРеализации.ДокументРеализации = РеализацияТоваровУслугУслуги.Ссылка)
		|			И (КорректировкаРеализации.Проведен)
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 61) = ""#00232 НДС_Агентское вознаграждение по договорам страхование""
		|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугУслуги.Ссылка";
		
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		//	Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НужноРаспровестиОснование = Ложь;
			если не Выборка.Ссылка.Проведен тогда 
				Об = Выборка.Ссылка.ПолучитьОбъект();
				Об.Записать(РежимЗаписиДокумента.Проведение);
				//СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Выборка.Ссылка);
				СтруктураПараметров = СтруктураПараметровДляСозданияСчетФактруы(Выборка.Ссылка);
				СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(СтруктураПараметров);

				Об2 = СФОСНОВАНИЯ.Ссылка.ПолучитьОбъект();
				Об2.Записать(РежимЗаписиДокумента.Проведение);
				НужноРаспровестиОснование = Истина;
			КонецЕсли;
			
			//СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				СтрокаУслуги.Сумма      = 0;
				СтрокаУслуги.Цена       = 0;
				СтрокаУслуги.СуммаНДС   = 0;
				СтрокаУслуги.Количество = 1;
				СуммаДляКорректировки    = СуммаДляКорректировки - Выборка.Сумма;
				СуммаДляКорректировкиНДС = СуммаДляКорректировкиНДС - Выборка.СуммаНДС;
			КонецЦикла; 
			
			Ндок.Комментарий =  Выборка.Ссылка.Комментарий;
			Ндок.Дата = ДатаВыгрузки;
			Ндок.КорректироватьБУиНУ = Истина;
			Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;

			//Попытка
			//	НачатьТранзакцию();
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			//Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
			СтруктураПараметров = СтруктураПараметровДляСозданияСчетФактруы(Ндок.Ссылка);
			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(СтруктураПараметров);

			Если НужноРаспровестиОснование тогда
				Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				//						Об2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(Выборка.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
			//ЗафиксироватьТранзакцию();
			//Исключение
			//	ОтменитьТранзакцию();
			//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
			//КонецПопытки; 
			//
			Если  СуммаДляКорректировки <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;
	
	pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

//******************************************************************


Процедура Блок6_1(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.1";
	СчетДт = "48802.1";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6_1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48802_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_2(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.1";
	СчетДт = "48802.2";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6_2"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48809_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_2; 
			Иначеесли  СтрСчета.свойство("_49409_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48802_2") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48802_2; 
			Иначеесли  СтрСчета.свойство("_49402_2") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49402_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_3(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.1";
	СчетДт = "48803.1";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6_3"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48804_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48804_1; 
			Иначеесли  СтрСчета.свойство("_49404_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49404_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48804_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48804_1; 
			Иначеесли  СтрСчета.свойство("_49404_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49404_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48803_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48803_1; 
			Иначеесли  СтрСчета.свойство("_49403_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49403_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_4(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.2";
	СчетДт = "48802.1";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6_4"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48802_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6_4"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_5(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.2";
	СчетДт = "48802.2";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48809_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_2; 
			Иначеесли  СтрСчета.свойство("_49409_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48802_2") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48802_2; 
			Иначеесли  СтрСчета.свойство("_49402_2") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49402_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_6(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.2";
	СчетДт = "48803.1";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48804_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48804_1; 
			Иначеесли  СтрСчета.свойство("_49404_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49404_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48804_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48804_1; 
			Иначеесли  СтрСчета.свойство("_49404_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49404_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48803_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48803_1; 
			Иначеесли  СтрСчета.свойство("_49403_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49403_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_7(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.3";
	СчетДт = "48802.1";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48802_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48802_1; 
			Иначеесли  СтрСчета.свойство("_49402_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49402_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_8(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.3";
	СчетДт = "48802.2";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48809_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_2; 
			Иначеесли  СтрСчета.свойство("_49409_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48802_2") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48802_2; 
			Иначеесли  СтрСчета.свойство("_49402_2") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49402_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура Блок6_9(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт 
	СчетКТ = "20501.3";
	СчетДт = "48803.1";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Блок6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			если  СтрСчета.свойство("_48804_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48804_1; 
			Иначеесли  СтрСчета.свойство("_49404_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49404_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			если  СтрСчета.свойство("_48804_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48804_1; 
			Иначеесли  СтрСчета.свойство("_49404_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49404_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//
			если  СтрСчета.свойство("_48803_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._48803_1; 
			Иначеесли  СтрСчета.свойство("_49403_1") тогда
				НоваяЗапись.СчетАналитическогоУчетакт = СтрСчета._49403_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетакт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			НоваяЗапись.Счеткт = НоваяЗапись.СчетАналитическогоУчетакт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.Счеткт, НоваяЗапись.Субконтокт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","Блок6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("Блок6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+"  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1') AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;	
	КонецПопытки;
	
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
	|ГДЕ
	|	БНФОМемориальныйОрдер.Дата = &Дата
	|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	Запрос.УстановитьПараметр("Комментарий","#НеУниверсальныйОбменНаСервере1 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ );
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда 
		ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Запрос1= Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ
		|	БНФОБанковский.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
		|ГДЕ
		|	БНФОБанковский.Регистратор = &Регистратор";
		Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
		Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
			Возврат;
		КонецЕсли;  
		
	Иначе	
		ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
	КонецЕсли;
	ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
	ОперацияОбъект.Организация = Организация;
	ОперацияОбъект.Комментарий = "#НеУниверсальныйОбменНаСервере1 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
	ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
	ОперацияОбъект.Проведен = Истина;
	ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
	ОперацияОбъект.Записать();
	//
	НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
	НаборЗаписей.Прочитать(); 
	НаборЗаписей.Очистить(); 
	Сумма = 0;
	
	ТекстПисьма = "";
	тч = Новый ТаблицаЗначений;
	тч.Колонки.Добавить("Контрагент");
	
	Для Каждого СтрокаТЧ Из МассивДанных Цикл
		СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		УсловияКредита = СтрСчета.УсловиеЗайма; 	
		Контрагент =СтрСчета.Контрагент; 
		Договор = СтрСчета.ДоговорКонтрагента; 
		
		Стр = тч.Добавить();
		Стр.Контрагент = Контрагент;
		
		Попытка
			
			#Область ЕслиНеНашлиПромежуточный 
			Если СтрокаТЧ.ПромСчет = "-" Тогда
				НоваяЗапись = НаборЗаписей.Добавить(); 
				НоваяЗапись.Активность = Истина;
				
				//ДЫТЭ
				Если СТрокаТЧ.СчетДТ = "47422.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				Иначе
					НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				КонецЕсли;
				
				//КОТЭ
				Если СТрокаТЧ.СчетКТ = "47422.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				Иначе	
					НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				КонецЕсли;
				
				
				
				НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
				НоваяЗапись.Организация = Организация;
				
				Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетДт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				
				Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				//КонецЕсли; 
				//
				НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
				НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
				НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
				//
				//
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
					Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт)  Тогда
						НоваяЗапись.СчетДт = ПланыСчетов.БНФОБанковский.НайтиПоКоду("00000");
					КонецЕсли;
					Если не ЗначениеЗаполнено(НоваяЗапись.СчетКт)  Тогда
						НоваяЗапись.СчетКт = ПланыСчетов.БНФОБанковский.НайтиПоКоду("00000");
					КонецЕсли;
					//НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
					//Продолжить;
				КонецЕсли; 
				Попытка
					Сумма = Сумма + СтрокаТЧ.Сумма;
				Исключение
					Сумма = Сумма + 0;
				КонецПопытки;
				Продолжить;
			КонецЕсли;
			#КонецОбласти
			
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка1 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			КонецЕсли;
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			
			НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область Проводка2 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет);
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			КонецЕсли;
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			
			ТекстПисьма = ТекстПисьма + "Строка на сумму "+Строка(СтрокаТЧ.Сумма)+" Контрагент "+Строка(Контрагент)+" ДТ "+НоваяЗапись.СчетАналитическогоУчетаДт+" КТ "+НоваяЗапись.СчетАналитическогоУчетаКт+Символы.ПС;
			
		Исключение
			pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
			ТекстПисьма = ТекстПисьма + "не добавилась Строка на сумму "+Строка(СтрокаТЧ.Сумма)+" Контрагент "+Строка(Контрагент)+" ДТ "+НоваяЗапись.СчетАналитическогоУчетаДт+" КТ "+НоваяЗапись.СчетАналитическогоУчетаКт+Символы.ПС;
			ТекстПисьма = ТекстПисьма + "По причине "+ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		//
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета",Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000"));                
		////
		//ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232"));
		////
		//ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
		////
		Блокировка.Заблокировать();
		
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
		ТекстПисьма = ТекстПисьма + "НеУниверсальныйОбменНаСервере1 на сумму "+Строка(Сумма)+" от "+Строка(ДатаВыгрузки)+" ДТ "+СчетДт+" КТ "+СчетКТ+Символы.ПС;
		
		//		pcru_ex_Почта.ОтправкаПочты("НеУниверсальныйОбменНаСервере1",Строка(ДатаВыгрузки)+" ДТ "+СчетДт+" КТ "+СчетКТ+Символы.ПС);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если Счетчик > 10 Тогда
			pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
			Возврат;
		КонецЕсли; 
		НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик + 1);
	КонецПопытки; 	
	
	
	
	#КонецОбласти
	
	pcru_ex_Почта.ОтправкаПочты("НеУниверсальныйОбменНаСервере1 от " + ДатаВыгрузки,ТекстПисьма)
	
	
КонецПроцедуры

Процедура НеУниверсальныйОбменНаСервере1_1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1_1","НеУниверсальныйОбменНаСервере1_1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1_1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+"  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '61217.1' or t2.[Debit Account No_] = '48804.1') AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1_1","НеУниверсальныйОбменНаСервере1_1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1_1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	
	Попытка
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий","#НеУниверсальныйОбменНаСервере1_1 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = "#НеУниверсальныйОбменНаСервере1_1 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить(); 
		
		Сумма = 0;
		
		тч = Новый ТаблицаЗначений;
		тч.Колонки.Добавить("Контрагент");
		
		
		
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			Стр = тч.Добавить();
			Стр.Контрагент = Контрагент;
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка1 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			КонецЕсли;
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			
			НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область Проводка2 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет);
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			КонецЕсли;
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			
		КонецЦикла;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик + 1);
	КонецПопытки;
	
	Попытка
		НачатьТранзакцию();
		//Блокировка = Новый БлокировкаДанных;
		//ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");
		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//ЭлементБлокировки.ИсточникДанных = тч;
		//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
		//Блокировка.Заблокировать();
		
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
		pcru_ex_Почта.ОтправкаПочты("УниверсальныйОбменНаСервереНовый",Строка(ДатаВыгрузки)+" ДТ "+СчетДт+" КТ "+СчетКТ+Символы.ПС);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если Счетчик > 10 Тогда
			pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
			Возврат;
		КонецЕсли; 
		НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик + 1);
	КонецПопытки; 	
	
	
	
	#КонецОбласти
	
	
КонецПроцедуры

Процедура НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	//Command.CommandText = "SELECTtunion.ContractDT ContractDT , sum(tunion.Amount) Amount
	//|FROM(SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//|[Ct Contract No_] AS ContractCT, Amount, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетДт+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND 
	//|					[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						 UNION ALL
	//|SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//| [Ct Contract No_] AS ContractCT, - Amount AS Expr1, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетДт+"'
	//|						AND
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND
	//|						[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						) AS tunion
	//|group byContractDT
	//|Having sum(Amount) <> 0";
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+"  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1') AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;	
	КонецПопытки;
	Попытка
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий","#НеУниверсальныйОбменНаСервере1_2 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = "#НеУниверсальныйОбменНаСервере1_2 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить(); 
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка1 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			КонецЕсли;
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			
			//НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1;//pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область Проводка2 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			//НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет);
			если  СтрСчета.свойство("_48809_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_1; 
			Иначеесли  СтрСчета.свойство("_49409_1") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1;//pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			КонецЕсли;
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры

Процедура НеУниверсальныйОбменНаСервере1_2_1(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	//Command.CommandText = "SELECTtunion.ContractDT ContractDT , sum(tunion.Amount) Amount
	//|FROM(SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//|[Ct Contract No_] AS ContractCT, Amount, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетДт+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND 
	//|					[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						 UNION ALL
	//|SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//| [Ct Contract No_] AS ContractCT, - Amount AS Expr1, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетДт+"'
	//|						AND
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND
	//|						[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						) AS tunion
	//|group byContractDT
	//|Having sum(Amount) <> 0";
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+"  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1') AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;	
	КонецПопытки;
	Попытка
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий","#НеУниверсальныйОбменНаСервере1_2_1 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = "#НеУниверсальныйОбменНаСервере1_2_1 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить(); 
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			КонецЕсли;
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			//НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1;//pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
						
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
						
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			
			Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			КонецЕсли;
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
						
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры


//09_2
Процедура НеУниверсальныйОбменНаСервере1_3(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+"  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1') AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;	
	КонецПопытки;
	Попытка
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий","#НеУниверсальныйОбменНаСервере1_3 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = "#дефолтные проценты по займу от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить(); 
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка1 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			КонецЕсли;
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			если  СтрСчета.свойство("_48809_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_2; 
			Иначеесли  СтрСчета.свойство("_49409_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			
			//НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1;//pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область Проводка2 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			//НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет);
			если  СтрСчета.свойство("_48809_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_2; 
			Иначеесли  СтрСчета.свойство("_49409_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1;//pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			КонецЕсли;
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры

Процедура НеУниверсальныйОбменНаСервере1_4(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+"  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1') AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;	
	КонецПопытки;
	Попытка
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий","#НеУниверсальныйОбменНаСервере1_4 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = "#Погашение сервис-пакета от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить(); 
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка1 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			КонецЕсли;
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			
			если  СтрСчета.свойство("_48804_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._48809_2; 
			Иначеесли  СтрСчета.свойство("_49404_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			
			//НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._49409_1;//pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область Проводка2 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			//НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет);
			если  СтрСчета.свойство("_48804_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48809_2; 
			Иначеесли  СтрСчета.свойство("_49404_2") тогда
				НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_2; 
			Иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			КонецЕсли;
			
			//НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49409_1;//pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			КонецЕсли;
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере1","НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере1"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
//47422.1	T76.12.500
Процедура НеУниверсальныйОбменНаСервере3(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетДт = "47422.1";
	СчетКТ = "T76.12.500";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере3","НеУниверсальныйОбменНаСервере3"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере3(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере3"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		Комментарий = "#НеУниверсальныйОбменНаСервере3 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_7;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =СтрСчета._60323_7;	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			//			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			//			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
			
			Нск = 1;
			Для каждого ВидСубконто Из НоваяЗапись.СчетКт.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
					ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорДТ);
					Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092"));
					Иначе
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093"));
					КонецЕсли;
				КонецЕсли;
				Нск = Нск + 1;
			КонецЦикла;	
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере3","НеУниверсальныйОбменНаСервере3"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере3(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере3"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
//60322.1	T76.12.500
Процедура НеУниверсальныйОбменНаСервере4(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетДт = "60322.1";
	СчетКТ = "T76.12.500";
	
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере4","НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере4(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		Комментарий = "#НеУниверсальныйОбменНаСервере4 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");//СтрСчета._60322_1;	
			//			НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор);
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_7;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка3 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._60323_7; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере4","НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере4(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
//60322.1	T76.13.100
Процедура НеУниверсальныйОбменНаСервере5(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетДт = "60322.1";
	СчетКТ = "T76.13.100";
	
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере5","НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере5(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		//
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере5 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		//
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		//
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		//
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка1 
			
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");//СтрСчета._60322_1;	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор);
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область Проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_4;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка3 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._60323_4; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//Попытка
			//	Сумма = Сумма + СтрокаТЧ.Сумма;
			//Исключение
			//	Сумма = Сумма + 0;
			//КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере5","НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере5(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры
//47422.1	T76.13.100
Процедура НеУниверсальныйОбменНаСервере6(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетДт = "47422.1";
	СчетКТ = "T76.13.100";
	//
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере6","НеУниверсальныйОбменНаСервере6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере6(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки; 
	//
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		//
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		//
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		//
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		//
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_4;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка3 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._60323_4; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
			
			Нск = 1;
			Для каждого ВидСубконто Из НоваяЗапись.СчетКт.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
					ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорДТ);
					Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092"));
					Иначе
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093"));
					КонецЕсли;
				КонецЕсли;
				Нск = Нск + 1;
			КонецЦикла;	
			
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере6","НеУниверсальныйОбменНаСервере6"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере6(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры
//20501.2	T76.13.100
Процедура НеУниверсальныйОбменНаСервере6_1(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетДт = "20501.2";
	СчетКТ = "T76.13.100";
	//
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере6_1","НеУниверсальныйОбменНаСервере6_1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере6_1(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
	КонецПопытки; 
	//
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		//
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере6 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		//
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		//
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		//
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_4;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка3 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._60323_4; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере6_1","НеУниверсальныйОбменНаСервере6_1"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере6_1(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере6"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

Процедура НеУниверсальныйОбменНаСервере7(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере7","НеУниверсальныйОбменНаСервере7"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере7(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере7"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
	КонецПопытки; 
	//Command.CommandText = "SELECTtunion.ContractDT ContractDT , sum(tunion.Amount) Amount
	//|FROM(SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//|[Ct Contract No_] AS ContractCT, Amount, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетДт+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND 
	//|					[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						 UNION ALL
	//|SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//| [Ct Contract No_] AS ContractCT, - Amount AS Expr1, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетДт+"'
	//|						AND
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND
	//|						[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						) AS tunion
	//|group byContractDT
	//|Having sum(Amount) <> 0";
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN (Select distinct t2.[Transaction No_],t2.[Debit Account No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2  where t2.[Debit Account No_] = '61217.1') AS t2 on t1.[Transaction No_] = t2.[Transaction No_]
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере7 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			Если СтрокаТЧ.ПромСчет = "-" Тогда
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
				#Область string1
				НоваяЗапись = НаборЗаписей.Добавить(); 
				НоваяЗапись.Активность = Истина;
				
				Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
				иначе
					НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
				КонецЕсли;
				
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 1, Контрагент); 
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 2, Договор); 			
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				
				Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
				иначе
					НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
				КонецЕсли;
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 1, Контрагент); 
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 2, УсловияКредита);
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				
				НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
				НоваяЗапись.Организация = Организация;
				
				Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетДт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				
				
				Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				//КонецЕсли; 
				
				НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
				НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
				НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
				//
				//
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
					НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
					Продолжить;
				КонецЕсли; 
				
				Попытка
					Сумма = Сумма + СтрокаТЧ.Сумма;
				Исключение
					Сумма = Сумма + 0;
				КонецПопытки;
				
				#КонецОбласти
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 		
			Иначе	
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
				#Область string1_2
				НоваяЗапись = НаборЗаписей.Добавить(); 
				НоваяЗапись.Активность = Истина;
				
				Если СтрокаТЧ.СчетДТ = "47422.1" Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
				иначе
					НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
				КонецЕсли;
				
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 1, Контрагент); 
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 2, Договор); 			
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				
				
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 1, Контрагент); 
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 2, УсловияКредита);
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				
				НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
				НоваяЗапись.Организация = Организация;
				
				Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетДт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				
				Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				//КонецЕсли; 
				
				НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
				НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
				НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
				//
				//
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
					НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
					Продолжить;
				КонецЕсли; 
				
				Попытка
					Сумма = Сумма + СтрокаТЧ.Сумма;
				Исключение
					Сумма = Сумма + 0;
				КонецПопытки;
				#КонецОбласти
				
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
				#Область string2_2
				
				НоваяЗапись = НаборЗаписей.Добавить(); 
				НоваяЗапись.Активность = Истина;
				
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет);
				
				
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 1, Контрагент); 
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 2, Договор); 			
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				
				Если СтрокаТЧ.СчетКТ = "47422.1" Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
				иначе
					НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
				КонецЕсли;
				
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 1, Контрагент); 
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 2, УсловияКредита);
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				
				НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
				НоваяЗапись.Организация = Организация;
				
				Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетДт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				
				
				Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				//КонецЕсли; 
				
				НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
				НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
				НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
				//
				//
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
					НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
					Продолжить;
				КонецЕсли; 
				
				Попытка
					Сумма = Сумма + СтрокаТЧ.Сумма;
				Исключение
					Сумма = Сумма + 0;
				КонецПопытки;
				#КонецОбласти
				////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 			
			КонецЕсли; 
			
			//
			//Попытка
			//	Сумма = Сумма + СтрокаТЧ.Сумма;
			//Исключение
			//	Сумма = Сумма + 0;
			//КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере7","НеУниверсальныйОбменНаСервере7"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере7(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере7"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
// OVLOAN 
Процедура НеУниверсальныйОбменНаСервере8(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере8","НеУниверсальныйОбменНаСервере8"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+""+"-"+"");
			НеУниверсальныйОбменНаСервере8(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере8"+ОписаниеОшибки()+" по счетам "+""+"-"+"");
			Возврат;
		КонецЕсли;
	КонецПопытки; 
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+" 
	|t1.[Debit Account No_],
	|tc.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM
	|["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	| inner JOIN ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS tc on t1.[Debit Account No_] <> tc.[Credit Account No_]
	|	 and t1.[Credit Account No_] = 'OVLOAN' 
	|																						 and tc.[Debit Account No_] = 'OVLOAN' 
	|																						 and t1.Amount = tc.Amount 
	|																						 and t1.[Document No_] = tc.[Document No_] 
	|																						 and t1.[Dt Contract No_] = tc.[Dt Contract No_] 
	|																						 and t1.[Ct Contract No_] = tc.[Ct Contract No_]
	|LEFT OUTER JOIN ["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry]AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", Строка(RecordSet.Fields("Debit Account No_").Value));
			Стр.Вставить("СчетКТ", Строка(RecordSet.Fields("Credit Account No_").Value));
			//		Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам 48801.2 OVLOAN 48801.1";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам 48801.2 OVLOAN 48801.1";
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СТрокаТЧ.СчетКТ);
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере8","НеУниверсальныйОбменНаСервере8"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+""+"-"+"");
			НеУниверсальныйОбменНаСервере8(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере8"+ОписаниеОшибки()+" по счетам "+""+"-"+"");
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
//T76.12.500	47422.1
Процедура НеУниверсальныйОбменНаСервере9(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетКТ = "47422.1";
	СчетДт = "T76.12.500";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере9","НеУниверсальныйОбменНаСервере9"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере9(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере9"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере9 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы, Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
			
			Нск = 1;
			Для каждого ВидСубконто Из НоваяЗапись.СчетДт.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
					ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорДТ);
					Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092"));
					Иначе
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093"));
					КонецЕсли;
				КонецЕсли;
				Нск = Нск + 1;
			КонецЦикла;	
			
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_7;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =СтрСчета._60323_7;	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере9","НеУниверсальныйОбменНаСервере9"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере9(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере9"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
//T76.13.100	47422.1
Процедура НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетКТ = "47422.1";
	СчетДт = "T76.13.100";
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","НеУниверсальныйОбменНаСервере10"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере10"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		
		
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере10 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////			
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы, Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
			Нск = 1;
			Для каждого ВидСубконто Из НоваяЗапись.СчетДт.ВидыСубконто Цикл
				Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
					ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорДТ);
					Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092"));
					Иначе
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093"));
					КонецЕсли;
				КонецЕсли;
				Нск = Нск + 1;
			КонецЦикла;				
			
			//
			// Правка от 13.07.2018 13:09:29  Севрюгин А.А.  
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_4;	
			//			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_7;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			// Правка от 13.07.2018 13:09:49  Севрюгин А.А.  
			НоваяЗапись.СчетАналитическогоУчетаДт =СтрСчета._60323_4;	
			//			НоваяЗапись.СчетАналитическогоУчетаДт =СтрСчета._60323_7;	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт)  Тогда
					НоваяЗапись.СчетДт = ПланыСчетов.БНФОБанковский.НайтиПоКоду("00000");
				КонецЕсли;
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетКт)  Тогда
					НоваяЗапись.СчетКт = ПланыСчетов.БНФОБанковский.НайтиПоКоду("00000");
				КонецЕсли;
				//НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				//Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере10","НеУниверсальныйОбменНаСервере10"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере10"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли;
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры
//60322.11	T76.12.500
Процедура НеУниверсальныйОбменНаСервере4_1(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетДт = "60322.11";
	СчетКТ = "T76.12.500";
	
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере4","НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере4(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки; 
	
	Command.CommandText = "SELECT  
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		Комментарий = "#НеУниверсальныйОбменНаСервере4 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000002000000");//СтрСчета._60322_1;	
			//			НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор);
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_7;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область проводка3 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._60323_7; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере4","НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере4(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере4"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
//60322.11	T76.13.100
Процедура НеУниверсальныйОбменНаСервере5_1(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	СчетДт = "60322.11";
	СчетКТ = "T76.13.100";
	
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//		Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере5","НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере5(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки; 
	//
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//	|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
		//
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере5 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		//
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		//
		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		Сумма = 0;
		//
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка1 
			//
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000002000000");//СтрСчета._60322_1;	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор);
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			//
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			///
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			#Область Проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт = СтрСчета._60323_4;	
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			#Область Проводка3 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//
			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._60323_4; 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			//
			НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
			//
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			//
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			//
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			//
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли;
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			//Попытка
			//	Сумма = Сумма + СтрокаТЧ.Сумма;
			//Исключение
			//	Сумма = Сумма + 0;
			//КонецПопытки;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере5","НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере5(ДатаВыгрузки,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере5"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
		
	КонецПопытки;
	#КонецОбласти
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь,ТекстОшибки = "")Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			//pcru_ex_Почта.ОтправкаПочты("Ошибка УниверсальныйОбменНаСервереНовый","УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			ТекстОшибки = ТекстОшибки + " УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ + Символы.ПС;
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1,ТолькоНовые,ТекстОшибки);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки + " УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	МассивДанных = Новый Массив;
	
	
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	//|t2.[Debit Account No_] Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	//|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			//pcru_ex_Почта.ОтправкаПочты("Ошибка УниверсальныйОбменНаСервереНовый","УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			ТекстОшибки = ТекстОшибки + " УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ + Символы.ПС;
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1,ТолькоНовые,ТекстОшибки);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки + " УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	Комментарий = "#УниверсальныйОбменНаСервереНовый от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
	|ГДЕ
	|	БНФОМемориальныйОрдер.Дата = &Дата
	|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	Запрос.УстановитьПараметр("Комментарий",Комментарий);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда 
		ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Запрос1= Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ
		|	БНФОБанковский.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
		|ГДЕ
		|	БНФОБанковский.Регистратор = &Регистратор";
		Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
		Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
			Возврат;
		КонецЕсли;  
	Иначе	
		ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
	КонецЕсли;
	ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
	
	ОперацияОбъект.Организация = Организация;
	ОперацияОбъект.Комментарий = Комментарий;
	ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
	ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
	
	ОперацияОбъект.Проведен = Истина;
	
	ОперацияОбъект.Записать();
	//
	Попытка
		
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
		
	Исключение
		Если Счетчик < 10 Тогда
			//pcru_ex_Почта.ОтправкаПочты("Ошибка УниверсальныйОбменНаСервереНовый","УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			ТекстОшибки = ТекстОшибки + " УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ + Символы.ПС;
			УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1,ТолькоНовые,ТекстОшибки);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки + " УниверсальныйОбменНаСервереНовый"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	
	
	Сумма = 0;
	
	тч = Новый ТаблицаЗначений;
	тч.Колонки.Добавить("СчетАналитическогоУчета");
	
	Для Каждого СтрокаТЧ Из МассивДанных Цикл
		//			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Попытка
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	БНФОДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
			|	БНФОДоговорыКредитовИДепозитов.Контрагент КАК Контрагент,
			|	БНФОДоговорыКредитовИДепозитов.ДоговорКонтрагента КАК ДоговорКонтрагента
			|ИЗ
			|	Справочник.БНФОДоговорыКредитовИДепозитов КАК БНФОДоговорыКредитовИДепозитов
			|ГДЕ
			|	БНФОДоговорыКредитовИДепозитов.Номер = &Номер";
			Запрос.УстановитьПараметр("Номер",СтрокаТЧ.ДоговорДТ );  //"0009099142"
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				УсловияКредита = Выборка.Ссылка; 	
				Контрагент =Выборка.Контрагент; 
				Договор = Выборка.ДоговорКонтрагента; 
			КонецЦикла;
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			//ДЫТЭ
			Если СтрокаТЧ.СчетДТ = "47416.1"Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4741681000000000000100000");
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "20501.1" или СТрокаТЧ.СчетДТ = "20501.2" или СТрокаТЧ.СчетДТ = "20501.3"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71002.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71003.1"	Тогда 
				// Правка от 13.07.2018 14:42:33  Севрюгин А.А.  
				//	НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100381000313180000171421");//	Статьи доходов и расходов-Process Code (об)-=71421  Comission CA-own business-new production-first part/Комиссия за выдачу займа
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100381001313180000071421");//	Статьи доходов и расходов-Process Code (об)-=71421  Comission CA-own business-new production-first part/Комиссия за выдачу займа
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000287")); 
				//++ Севрюгин А.А
				// версия 16
				//-- Севрюгин А.А
				//				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000142")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71001.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71001.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//	00231 Проценты на просроченную часть основного долга НБ	00-000019
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000019")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71002.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71005.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100581001315180000100231");//	00231 Сумма положительной корректировки начисленных процентов НЕ НБ	00-000055
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71006.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100681001316180000100231");//	00231 Сумма отрицательной корректировки начисленных процентовНЕ НБ	00-000057
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000057")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.5"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122202");//	22202 Прочий доход (невостребованная переплата клиентов)	00-000267
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000067")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71501.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71502.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150281001414010000100231");//	00231 Сумма дебетовогоостаткана счете 61217.1 НЕ НБ	00-000066
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000066")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
				//++ Севрюгин А.А   DEV1C-178
			ИначеЕсли СТрокаТЧ.СчетДТ = "71802.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7180281000556060000101533");//	22104 Штраф за досрочное расторжение договора	00-000071
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000250")); 
				//-- Севрюгин А.А
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000321104");//	22104 Штраф за досрочное расторжение договора	00-000071
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000071")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.8"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000222101");//	22101 Присужденная госпошлина	00-000075
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000075")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.6"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122102");//	22102 Присужденные судебные издержки	00-000074
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000074")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71202.1"	Тогда 
				//              НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281000481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281001481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
				//версия 16		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000063")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71201.1"	Тогда 
				//				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281001481180000100151");//	00151 Доходы от восстановления резерва	00-000061
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120181001381180000100151");//	00151 Доходы от восстановления резерва	00-000061
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
				//версия 18	БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000064")); 
				//версия 16	БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000061")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71501.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "60322.10"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000007890000");//	КИВИ Банк (акционерное общество)	К0-000789
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "60309.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "60309.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 								
			ИначеЕсли СТрокаТЧ.СчетДТ = "60322.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000",ложь);//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "60322.11"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000002000000",ложь);//	сбер	К0-000006
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "47422.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "47422.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000200000");//	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "47422.3"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000300000");//	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "47422.4"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000400000");//	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.9"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181001522040000115235");//	15235 Доходы от восстановления резервов по прочим активам НЕ НБ	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000068")); 
				//				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.3"	Тогда 
				//++ Севрюгин А.А
				// V15                                                                                       
				//НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000400231");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;                       //7170181000524010000622005
				//				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
				//-- Севрюгин А.А
			ИначеЕсли СТрокаТЧ.СчетДТ = "71701.4"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000500232");//	00232 НДС_Сумма по Service package fee Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужде	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71702.9"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281001533040000115235");//	15235 Расходы по формированиюрезервов по прочим активам НЕ НБ
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000079")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "71001.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			ИначеЕсли СТрокаТЧ.СчетДТ = "47423.5"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742381000000000000500000");//	
				НоваяЗапись.СчетДТ = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДТ, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДТ, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			Иначе
				СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);	
				НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			КонецЕсли;
			
			
			//КОТЭ
			Если СтрокаТЧ.СчетКТ = "47416.1"Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4741681000000000000100000");
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71003.1"	Тогда 
				// Правка от 13.07.2018 14:43:26  Севрюгин А.А.  
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100381001313180000071421");//	Статьи доходов и расходов-Process Code (об)-=71421  Comission CA-own business-new production-first part/Комиссия за выдачу займа
				//				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100381000313180000171421");//	Статьи доходов и расходов-Process Code (об)-=71421  Comission CA-own business-new production-first part/Комиссия за выдачу займа
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000142")); 
				//++ Севрюгин А.А
				// версия 16
				//-- Севрюгин А.А
				// БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000142")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71002.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71001.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71001.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//	00231 Проценты на просроченную часть основного долга НБ	00-000019
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000019")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71002.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71005.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100581001315180000100231");//	00231 Сумма положительной корректировки начисленных процентов НЕ НБ	00-000055
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				
				//++ Севрюгин А.А   DEV1C-178
			ИначеЕсли СТрокаТЧ.СчетКТ = "71802.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7180281000556060000101533");//	22104 Штраф за досрочное расторжение договора	00-000071
				НоваяЗапись.СчетКТ = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000250")); 
				//-- Севрюгин А.А
				
			ИначеЕсли СТрокаТЧ.СчетКТ = "71006.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100681001316180000100231");//	00231 Сумма отрицательной корректировки начисленных процентовНЕ НБ	00-000057
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000057")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.5"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122202");//	22202 Прочий доход (невостребованная переплата клиентов)	00-000267
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000067")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71501.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71502.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150281001414010000100231");//	00231 Сумма дебетовогоостаткана счете 61217.1 НЕ НБ	00-000066
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000066")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000321104");//	22104 Штраф за досрочное расторжение договора	00-000071
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000071")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.8"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000222101");//	22101 Присужденная госпошлина	00-000075
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000075")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.6"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122102");//	22102 Присужденные судебные издержки	00-000074
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000074")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71202.1"	Тогда 
				//НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281000481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
				//НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000063")); 
				//++ Севрюгин А.А
				// версия 16
				//-- Севрюгин А.А
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281001481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71201.1"	Тогда 
				//НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120181000381180000100151");//	00151 Доходы от восстановления резерва	00-000061
				//НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000061")); 
				//++ Севрюгин А.А
				// версия 16
				//-- Севрюгин А.А
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120181001381180000100151");//	00151 Доходы от восстановления резерва	00-000061
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
				//				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000064")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71501.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "60322.10"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000007890000");//	КИВИ Банк (акционерное общество)	К0-000789
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				
			ИначеЕсли СТрокаТЧ.СчетКТ = "60309.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "60309.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "60322.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "60322.11"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000002000000");//	сбер	К0-000006
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "47422.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "47422.2"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000200000");//	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "47422.3"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000300000");//	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "47422.4"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000400000");//	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.9"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181001522040000115235");//	15235 Доходы от восстановления резервов по прочим активам НЕ НБ	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000068")); 
				//				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.3"	Тогда 
				//++ Севрюгин А.А
				//версия 15
				//-- Севрюгин А.А
				
				//НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000400231");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
				//НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71701.4"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000500232");//	00232 НДС_Сумма по Service package fee Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужде	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71702.9"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281001533040000115235");//	15235 Расходы по формированиюрезервов по прочим активам НЕ НБ
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000079")); 
			ИначеЕсли СТрокаТЧ.СчетКТ = "71001.1"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
				//			ИначеЕсли Лев(СТрокаТЧ.СчетКТ,3) = "603" или Лев(СТрокаТЧ.СчетКТ,3) = "488" или Лев(СТрокаТЧ.СчетКТ,3) = "612" Тогда 
			ИначеЕсли СТрокаТЧ.СчетКТ = "47423.5"	Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742381000000000000500000");//	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			Иначе	
				СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
				
				//Текстп = "";
				//
				//Для каждого Эл Из СтрСчета Цикл
				//
				//Текстп = Текстп  + Строка(Эл.Ключ)+" " + Строка(Эл.Значение)+ Символы.ПС;	
				//
				//КонецЦикла; 
				//pcru_ex_Почта.Сообщить_об_ошибке(Текстп + "Договор "+СтрокаТЧ.ДоговорДТ+ Символы.ПС);
				
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);	
				НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			КонецЕсли;
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				//Если  Тогда
				//
				//	УстановитьИспользованиеИтогов
				//
				//Иначе
				//
				//	
				//
				//КонецЕсли;  СтрокаТЧ.СчетК
				
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				pcru_ex_Почта.Сообщить_об_ошибке(" Строка удалена Договор "+СтрокаТЧ.ДоговорДТ+" ДтА " + Строка(НоваяЗапись.СчетДт) + " ктА "+НоваяЗапись.СчетКт+ Символы.ПС);
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли; 
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			
			Стр = тч.Добавить();
			Стр.СчетАналитическогоУчета = НоваяЗапись.СчетАналитическогоУчетаДт;
			
			
			Стр = тч.Добавить();
			Стр.СчетАналитическогоУчета = НоваяЗапись.СчетАналитическогоУчетаКт;
			
			
		Исключение
			ТекстОшибки = ТекстОшибки + " Ошибка формирования проводки "+ОписаниеОшибки()+ Символы.ПС;
		КонецПопытки; 	
	КонецЦикла;
	
	//*********************************************************************** 
	тч.Свернуть("СчетАналитическогоУчета");
	
	Попытка
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = тч;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетАналитическогоУчета", "СчетАналитическогоУчета");
		Блокировка.Заблокировать();
		
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
		pcru_ex_Почта.ОтправкаПочты("УниверсальныйОбменНаСервереНовый",ТекстОшибки +"Сумма " + Строка(Сумма)+" Дата " +Строка(ДатаВыгрузки)+" ДТ "+СчетДт+" КТ "+СчетКТ+Символы.ПС);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если Счетчик > 10 Тогда
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки + " Ошибка проведения "+ОписаниеОшибки()+ Символы.ПС);
			Возврат;
		КонецЕсли; 
		УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик + 1,ТолькоНовые,ТекстОшибки);
	КонецПопытки; 	
	
	#КонецОбласти
	
	
КонецПроцедуры

Функция ТабДвиж(ДатаВыгрузки,СчетДт,СчетКТ)Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
	КонецПопытки; 
	МассивДанных = Новый Массив;
	Command.CommandText = "SELECT  "+ПолучитьПараметрыВыборки()+"
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	//|t2.[Debit Account No_] Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	//|LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат МассивДанных;
	КонецЕсли;
	RecordSet.MoveFirst();
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		Стр.Вставить("СчетДТ", СчетДт);
		Стр.Вставить("СчетКТ", СчетКТ);
		Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
		МассивДанных.Добавить(стр);			
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	#КонецОбласти
	
	Возврат МассивДанных;
КонецФункции

//****************************************************************************************************************************************
//Новая схема загрузки
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПодставитьПараметрыВЗапрос(знач Запрос,ДТ,КТ,БАЗА,ФИРМА,ДАТА1,ДАТА2 = "",НДСДТ = "",НДСКТ = "")
	
	Запрос1 = СтрЗаменить(Запрос,"%База%",БАЗА);
	Запрос1 = СтрЗаменить(Запрос1,"%Фирма%",ФИРМА);
	Запрос1 = СтрЗаменить(Запрос1,"%СчетДт%",ДТ);
	Запрос1 = СтрЗаменить(Запрос1,"%СчетКТ%",КТ);
	
	Запрос1 = СтрЗаменить(Запрос1,"%СЧЕТДТ%",ДТ);
	Запрос1 = СтрЗаменить(Запрос1,"%СЧЕТКТ%",КТ);
	
	Запрос1 = СтрЗаменить(Запрос1,"%Дата1%",ДАТА1);
	Запрос1 = СтрЗаменить(Запрос1,"%Дата2%",ДАТА2);
	Запрос1 = СтрЗаменить(Запрос1,"%НДСДТ%",НДСДТ);
	Запрос1 = СтрЗаменить(Запрос1,"%НДСКТ%",НДСКТ);
	
	Возврат Запрос1;
	
	
КонецФункции // ()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура Обмен_Корректировки(ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "")Экспорт
	ЕжеднеаныеРеализацииНаСервере_корректировки(ДатаВыгрузки, 0,ТолькоНовые);
	ЕжеднеаныеРеализацииНаСервереDefault_корректировки(ДатаВыгрузки,0,ТолькоНовые);
	ЕжеднеаныеРеализацииБезНДСНаСервере_корректировки(ДатаВыгрузки,0,ТолькоНовые);
	ПросрочкаНаСервере_корректировки(ДатаВыгрузки,0,ТолькоНовые);
	ЕжеднеаныеРеализацииБезНДСНаСервереИП_корректировки(ДатаВыгрузки,0,ТолькоНовые);
	ПросрочкаНаСервереИП_корректировки(ДатаВыгрузки,0,ТолькоНовые);
	НовыйБлок_корректировки(ДатаВыгрузки,0,ТолькоНовые);
	СервисПакет_корректировки(ДатаВыгрузки,0,ТолькоНовые);
	АгентскоеВознаграждение_Корректировки(ДатаВыгрузки, 0, ТолькоНовые);
КонецПроцедуры

Процедура Обмен_Резервы(ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "",Задание = Неопределено) Экспорт
	//++ Севрюгин А.А  18.04.2020 0:37:44   
	Command = pcru_ex_ВнешниеСоединения.СоздатьВнешнееСоединение("SQL","NAV");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_ex_НастройкиПроводокNAV.Ссылка КАК Ссылка,
	|	pcru_ex_НастройкиПроводокNAV.Код КАК Код,
	|	pcru_ex_НастройкиПроводокNAV.Наименование КАК Наименование,
	|	pcru_ex_НастройкиПроводокNAV.NAV_ДТ КАК NAV_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТ КАК NAV_КТ,
	|	pcru_ex_НастройкиПроводокNAV.СчДТ КАК СчДТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ1 КАК СубконтоДТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ2 КАК СубконтоДТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ3 КАК СубконтоДТ3,
	|	pcru_ex_НастройкиПроводокNAV.СчКТ КАК СчКТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ1 КАК СубконтоКТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ2 КАК СубконтоКТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ3 КАК СубконтоКТ3,
	|	pcru_ex_НастройкиПроводокNAV.ОдинКНескольким КАК ОдинКНескольким,
	|	pcru_ex_НастройкиПроводокNAV.Запрос.Запрос КАК Запрос,
	|	pcru_ex_НастройкиПроводокNAV.ОпределятьТранзитныйСчет КАК ОпределятьТранзитныйСчет,
	|	pcru_ex_НастройкиПроводокNAV.Комментарий КАК Комментарий,
	|	pcru_ex_НастройкиПроводокNAV.ОписаниеПроводки КАК ОписаниеПроводки,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_ДТ КАК КД_в_СК_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_КонтрагентДоговорВСубконто КАК ДТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_КТ КАК КД_в_СК_КТ,
	|	pcru_ex_НастройкиПроводокNAV.КТ_КонтрагентДоговорВСубконто КАК КТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_СчетЗависит_От_Контракта КАК ДТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.КТ_СчетЗависит_От_Контракта КАК КТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.СчДТКод КАК СчДТКод,
	|	pcru_ex_НастройкиПроводокNAV.СчКТКод КАК СчКТКод,
	|	pcru_ex_НастройкиПроводокNAV.ЭтоПроводкаСНДС КАК ЭтоПроводкаСНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетДоходов КАК СчетДоходов,
	|	pcru_ex_НастройкиПроводокNAV.СчетНДС КАК СчетНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетРасходов КАК СчетРасходов,
	|	pcru_ex_НастройкиПроводокNAV.Номенклатура КАК Номенклатура,
	|	pcru_ex_НастройкиПроводокNAV.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	pcru_ex_НастройкиПроводокNAV.СпособЗачетаАванса КАК СпособЗачетаАванса,
	|	pcru_ex_НастройкиПроводокNAV.СтавкаНДС КАК СтавкаНДС,
	|	pcru_ex_НастройкиПроводокNAV.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСчетУчетаНДСОплаченный КАК БНФОСчетУчетаНДСОплаченный,
	|	pcru_ex_НастройкиПроводокNAV.ДокументБезНДС КАК ДокументБезНДС,
	|	pcru_ex_НастройкиПроводокNAV.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	pcru_ex_НастройкиПроводокNAV.ПроизвольнаяФункция КАК ПроизвольнаяФункция,
	|	pcru_ex_НастройкиПроводокNAV.КодФункции КАК КодФункции,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ВР КАК СуммуДТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_НУ КАК СуммуДТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ПР КАК СуммуДТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ВР КАК СуммуКТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ПР КАК СуммуКТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_НУ КАК СуммуКТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСтатьяДоходов КАК БНФОСтатьяДоходов,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТНДС КАК NAV_КТНДС
	|ИЗ
	|	Справочник.pcru_ex_НастройкиПроводокNAV КАК pcru_ex_НастройкиПроводокNAV
	|ГДЕ
	|	НЕ pcru_ex_НастройкиПроводокNAV.ПометкаУдаления
	|	И (pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""48810.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71201.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71202.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""48810.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""48810.2""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71201.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71202.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""48810.2""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""49410.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71201.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71202.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""49410.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""49410.2""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71201.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71202.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""49410.2""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""60324.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71701.9""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71702.9""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""60324.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71202.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""49410.3""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""49410.3""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71202.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""48810.3""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71201.1""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71201.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""48810.3""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""71202.1""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""48810.3""
	|			ИЛИ pcru_ex_НастройкиПроводокNAV.NAV_ДТ = ""48810.3""
	|				И pcru_ex_НастройкиПроводокNAV.NAV_КТ = ""71202.1"")";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если не Выборка.ЭтоПроводкаСНДС и не Выборка.ПроизвольнаяФункция Тогда
			РаботаСВыборкой(Выборка,Command,ДатаВыгрузки,ВыполнятьВТранзакции ,ТолькоНовые ,ТекстОшибки);
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки);
		КонецЕсли; 
	КонецЦикла;
	
	
	//-- Севрюгин А.А  18.04.2020 0:37:45 Администратор
	
	
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые);
	//	
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые);
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые);
	//	
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые);
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые);
	//	
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые);
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые);
	//	
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //170    резервы
	//	pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //171
	//	
	//	//++ Севрюгин А.А  07.04.2020 18:03:42   нет
	////	Дт 71202.1 – Кт 49410.3
	////Дт 48810.3 – Кт 71201.1
	////Дт 71202.1 – Кт 48810.3
	
	//    pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //171
	//    pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //171
	
	//    pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //171
	//    pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //171
	
	//    pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //171
	//    pcru_ex_NAV.УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,,0,ТолькоНовые); //171
	////-- Севрюгин А.А  07.04.2020 18:03:49 Администратор
	
	
КонецПроцедуры

Процедура Обмен_Нестандартные(ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "")Экспорт
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
	/////////////////////////////////////БЛОК_2/////////////////////////////////////////////////////////////////////////////////////////////////// 
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
	//	НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,"47422.1","48802.1",0,ТолькоНовые);   //1
	//	НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,"48802.1","47422.1",0,ТолькоНовые);   //2
	
	//	НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,"47422.1","48802.2",0,ТолькоНовые);   //3
	//	НеУниверсальныйОбменНаСервере1(ДатаВыгрузки,"48802.2","47422.1",0,ТолькоНовые);   //4
	
	//	НеУниверсальныйОбменНаСервере1_1(ДатаВыгрузки,"47422.1","48803.1",0,ТолькоНовые); //5
	//	НеУниверсальныйОбменНаСервере1_1(ДатаВыгрузки,"48803.1","47422.1",0,ТолькоНовые); //6
	
	//НеУниверсальныйОбменНаСервере8(ДатаВыгрузки,0,ТолькоНовые); //7,8,9,10
	
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","48801.1",0,ТолькоНовые); //11
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48801.1","60322.1",0,ТолькоНовые);
	
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","48801.2",0,ТолькоНовые); //13
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48801.2","60322.1",0,ТолькоНовые);
	
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","48802.1",0,ТолькоНовые); //15
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48802.1","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","48802.2",0,ТолькоНовые); //17
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48802.2","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","48803.1",0,ТолькоНовые); //19
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48803.1","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.2",0,ТолькоНовые); //21
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.2","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.3",0,ТолькоНовые); //23
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.3","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.4",0,ТолькоНовые); //25
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.4","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.5",0,ТолькоНовые); //27
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.5","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.6",0,ТолькоНовые); //29
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.6","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.7",0,ТолькоНовые); //31
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.7","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.8",0,ТолькоНовые); //33
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.8","60322.1",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","60323.9",0,ТолькоНовые); //35
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.9","60322.1",0,ТолькоНовые); //36
	
	НеУниверсальныйОбменНаСервере3(ДатаВыгрузки,0,ТолькоНовые);                     //37
	
	НеУниверсальныйОбменНаСервере4(ДатаВыгрузки,0,ТолькоНовые);                     //38
	
	НеУниверсальныйОбменНаСервере5(ДатаВыгрузки,0,ТолькоНовые);                     //39
	
	НеУниверсальныйОбменНаСервере6(ДатаВыгрузки,0,ТолькоНовые);	                  //40
	
	НеУниверсальныйОбменНаСервере6_1(ДатаВыгрузки,0,ТолькоНовые);	                  //41
	
	НеУниверсальныйОбменНаСервере7(ДатаВыгрузки,"47422.1","48801.1",0,ТолькоНовые); //42
	
	НеУниверсальныйОбменНаСервере7(ДатаВыгрузки,"48801.1","47422.1",0,ТолькоНовые); //43
	
	НеУниверсальныйОбменНаСервере7(ДатаВыгрузки,"47422.1","48801.2",0,ТолькоНовые); //44  
	
	НеУниверсальныйОбменНаСервере7(ДатаВыгрузки,"48801.2","47422.1",0,ТолькоНовые); //45
	
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47416.1","47422.1",0,ТолькоНовые); //46
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","47416.1",0,ТолькоНовые); //47
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.3","71701.5",0,ТолькоНовые); //48
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.5","47422.3",0,ТолькоНовые); //49
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48808.1","61217.1",0,ТолькоНовые); //50
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.1","48808.1",0,ТолькоНовые); //51
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.1","71501.1",0,ТолькоНовые); //52
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71501.1","61217.1",0,ТолькоНовые); //53
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","48801.2",0,ТолькоНовые); //54
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48801.2","48810.1",0,ТолькоНовые); //55
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","48802.1",0,ТолькоНовые); //56
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48802.1","48810.1",0,ТолькоНовые); //57
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","48802.2",0,ТолькоНовые); //58
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48802.2","48810.1",0,ТолькоНовые); //59
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","48803.1",0,ТолькоНовые); //60
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48803.1","48810.1",0,ТолькоНовые); //61
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.4",0,ТолькоНовые); //62
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.4","60324.1",0,ТолькоНовые); //63
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.6",0,ТолькоНовые); //64
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.6","60324.1",0,ТолькоНовые); //65
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.9",0,ТолькоНовые); //66
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.9","60324.1",0,ТолькоНовые); //67
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.2",0,ТолькоНовые); //68	
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.2","60324.1",0,ТолькоНовые); //69
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.3",0,ТолькоНовые); //70
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.3","60324.1",0,ТолькоНовые); //71
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","71501.2",0,ТолькоНовые); //72
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71501.2","47422.1",0,ТолькоНовые); //73
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60322.1","47422.1",0,ТолькоНовые);  //74
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60322.1",0,ТолькоНовые);  //75
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.4",0,ТолькоНовые);  //
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.4","47422.1",0,ТолькоНовые);  //
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.6",0,ТолькоНовые);  //
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.6","47422.1",0,ТолькоНовые);  //
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.2",0,ТолькоНовые);  //
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.2","47422.1",0,ТолькоНовые);  //
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.3","47422.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48807.1","71005.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71005.1","48807.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71006.1","48808.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48808.1","71006.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48808.1","48807.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48807.1","48808.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.1","48807.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48807.1","61217.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71502.1","61217.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.1","71502.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.4","71701.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.1","60323.4",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.6","71701.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.2","60323.6",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.2","71701.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.8","60323.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.3","71701.6",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.6","60323.3",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","48801.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48801.1","61217.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","48802.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48802.1","61217.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","48802.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48802.2","61217.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","48803.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48803.1","61217.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.7","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","60323.7",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.5","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","60323.5",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.8","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","60323.8",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.9","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","60323.9",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.7",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.7","47422.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.5",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.5","47422.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.8","47422.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60323.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.9","47422.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71202.1","48810.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","71202.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","71201.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71201.1","48810.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48801.2","48801.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48801.1","48801.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48805.1","48806.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48806.1","48805.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60322.10","47422.1",0,ТолькоНовые);                                      
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60322.10",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","47422.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.3","47422.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48802.1","47422.3",0,ТолькоНовые); 	
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.3","48802.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","47422.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.2","47422.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.3","60323.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.2","47422.3",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.3","60323.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.3","47422.3",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.3","60323.6",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.6","47422.3",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48801.1","48803.1",0,ТолькоНовые); //151
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48803.1","48801.1",0,ТолькоНовые); //150
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48801.1","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.8","48801.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48801.2","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","48801.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48807.1","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","48807.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48807.1","71502.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71502.1","48807.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48808.1","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","48808.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","71701.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.9","48810.1",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.2","71201.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71201.1","48810.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.2","71701.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.9","48810.2",0,ТолькоНовые);
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.7","71701.3",0,ТолькоНовые); //168
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.3","60323.7",0,ТолькоНовые); //169
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","71701.9",0,ТолькоНовые); //170    резервы
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.9","60324.1",0,ТолькоНовые); //171
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","71501.1",0,ТолькоНовые); //172
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71501.1","61217.2",0,ТолькоНовые); //173
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","71502.1",0,ТолькоНовые); //174
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71502.1","61217.2",0,ТолькоНовые); //175
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71202.1","48810.2",0,ТолькоНовые); //176
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.2","71202.1",0,ТолькоНовые); //
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71702.9","48810.1",0,ТолькоНовые); //178
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.1","71702.9",0,ТолькоНовые); //
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71702.9","48810.2",0,ТолькоНовые); //180
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48810.2","71702.9",0,ТолькоНовые); //
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71702.9","60324.1",0,ТолькоНовые); //182   резервы
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","71702.9",0,ТолькоНовые); //
	//
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71003.1","48805.1",0,ТолькоНовые); //184
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48805.1","71003.1",0,ТолькоНовые); //
	
	НеУниверсальныйОбменНаСервере9(ДатаВыгрузки,0,ТолькоНовые);                       //188
	НеУниверсальныйОбменНаСервере10(ДатаВыгрузки,0,ТолькоНовые);                      //189
	
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71003.1","48805.1",0,ТолькоНовые); //190
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48805.1","71003.1",0,ТолькоНовые); //
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","48801.1",0,ТолькоНовые); //11
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48801.1","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","48801.2",0,ТолькоНовые); //13
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48801.2","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","48802.1",0,ТолькоНовые); //15
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48802.1","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","48802.2",0,ТолькоНовые); //17
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48802.2","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","48803.1",0,ТолькоНовые); //19
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"48803.1","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.2",0,ТолькоНовые); //21
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.2","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.3",0,ТолькоНовые); //23
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.3","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.4",0,ТолькоНовые); //25
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.4","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.5",0,ТолькоНовые); //27
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.5","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.6",0,ТолькоНовые); //29
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.6","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.7",0,ТолькоНовые); //31
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.7","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.8",0,ТолькоНовые); //33
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.8","60322.11",0,ТолькоНовые);
	//
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.11","60323.9",0,ТолькоНовые); //35
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60323.9","60322.11",0,ТолькоНовые); //36
	
	НеУниверсальныйОбменНаСервере4_1(ДатаВыгрузки,0,ТолькоНовые);                     //38
	НеУниверсальныйОбменНаСервере5_1(ДатаВыгрузки,0,ТолькоНовые);                     //39
	
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60322.11","47422.1",0,ТолькоНовые);  //74
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.1","60322.11",0,ТолькоНовые);  //75
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
	/////////////////////////////////////БЛОК_2 ИП//////////////////////////////////////////////////////////////////////////////////////////////// 
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
	НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,"47422.1","49402.1",0,ТолькоНовые);   //1
	НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,"49402.1","47422.1",0,ТолькоНовые);   //2
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,"47422.1","49402.2",0,ТолькоНовые);   //3
	НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,"49402.2","47422.1",0,ТолькоНовые);   //4
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	НеУниверсальныйОбменНаСервере1_1(ДатаВыгрузки,"47422.1","49403.1",0,ТолькоНовые); //5
	НеУниверсальныйОбменНаСервере1_1(ДатаВыгрузки,"49403.1","47422.1",0,ТолькоНовые); //6
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//НеУниверсальныйОбменНаСервере8(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) 7,8,9,10
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","49401.1",0,ТолькоНовые); //11
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"49401.1","60322.1",0,ТолькоНовые);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","49401.2",0,ТолькоНовые); //13
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"49401.2","60322.1",0,ТолькоНовые);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","49402.1",0,ТолькоНовые); //15
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"49402.1","60322.1",0,ТолькоНовые);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","49402.2",0,ТолькоНовые); //17
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"49402.2","60322.1",0,ТолькоНовые);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"60322.1","49403.1",0,ТолькоНовые); //19
	//НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,"49403.1","60322.1",0,ТолькоНовые); //20
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	НеУниверсальныйОбменНаСервере1_2_1(ДатаВыгрузки,"47422.1","49401.1",0,ТолькоНовые);   //21
	НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,"49401.1","47422.1",0,ТолькоНовые);   //22
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,"47422.1","49401.2",0,ТолькоНовые);   //23
	НеУниверсальныйОбменНаСервере1_2(ДатаВыгрузки,"49401.2","47422.1",0,ТолькоНовые);   //24
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49408.1","61217.1",0,ТолькоНовые); //25
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.1","49408.1",0,ТолькоНовые); //26
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","49401.2",0,ТолькоНовые); //27
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49401.2","49410.1",0,ТолькоНовые);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","49402.1",0,ТолькоНовые); //29
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49402.1","49410.1",0,ТолькоНовые);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","49402.2",0,ТолькоНовые); //31
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49402.2","49410.1",0,ТолькоНовые);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","49403.1",0,ТолькоНовые); //33
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49403.1","49410.1",0,ТолькоНовые); //34
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49407.1","71005.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71005.1","49407.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71006.1","49408.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49408.1","71006.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49408.1","49407.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49407.1","49408.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.1","49407.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49407.1","61217.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","49401.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49401.1","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","49402.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49402.1","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","49402.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49402.2","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","49403.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49403.1","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71202.1","49410.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","71202.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","71201.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71201.1","49410.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49401.2","49401.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49401.1","49401.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49405.1","49406.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49406.1","49405.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49402.1","47422.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"47422.3","49402.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49401.1","49403.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49403.1","49401.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49401.1","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.8","49401.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49401.2","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","49401.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49407.1","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","49407.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49407.1","71502.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71502.1","49407.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49408.1","61217.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"61217.2","49408.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","71701.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.9","49410.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.2","71201.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71201.1","49410.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.2","71701.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71701.9","49410.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71202.1","49410.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.2","71202.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71702.9","49410.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.1","71702.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71702.9","49410.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49410.2","71702.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71003.1","49405.1",0,ТолькоНовые); //87
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"49405.1","71003.1",0,ТолькоНовые); //88
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","48801.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","48801.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","48801.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","48801.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","48801.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","48801.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.4",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.6",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.7",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.5",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.1","60323.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.4",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.6",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.7",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.5",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.2","60323.9",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.4",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.6",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.7",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.5",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"20501.3","60323.9",0,ТолькоНовые);
	////**************************************БЛОК_7************************************************************************************************
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.5",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.5","60324.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.7",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.7","60324.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60324.1","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"60323.8","60324.1",0,ТолькоНовые);
	////**************************************БЛОК_8************************************************************************************************
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71006.1","48807.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"48807.1","71006.1",0,ТолькоНовые);
	////**************************************БЛОК_9************************************************************************************************
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","48801.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","48801.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","48802.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","48802.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","48803.1",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.2",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.3",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.4",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.5",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.6",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.7",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.8",0,ТолькоНовые);
	//УниверсальныйОбменНаСервереНовый(ДатаВыгрузки,"71802.2","60323.9",0,ТолькоНовые);
	
	//**************************************БЛОК_6************************************************************************************************
	Блок6_1(ДатаВыгрузки,0,ТолькоНовые);
	Блок6_2(ДатаВыгрузки,0,ТолькоНовые);
	Блок6_3(ДатаВыгрузки,0,ТолькоНовые);
	Блок6_4(ДатаВыгрузки,0,ТолькоНовые);
	Блок6_5(ДатаВыгрузки,0,ТолькоНовые);
	Блок6_6(ДатаВыгрузки,0,ТолькоНовые);
	Блок6_7(ДатаВыгрузки,0,ТолькоНовые);
	Блок6_8(ДатаВыгрузки,0,ТолькоНовые); 
	Блок6_9(ДатаВыгрузки,0,ТолькоНовые);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура УниверсальныйОбменНаСервереПоПравиламИзСправочникаМассивСчетов(МассивСчетов,ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "",Задание = Неопределено) Экспорт
	Command = pcru_ex_ВнешниеСоединения.СоздатьВнешнееСоединение("SQL","NAV");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",МассивСчетов);
	Запрос.Текст = "ВЫБРАТЬ  pcru_ex_НастройкиПроводокNAV.Ссылка КАК Ссылка,
	|	pcru_ex_НастройкиПроводокNAV.Код КАК Код,
	|	pcru_ex_НастройкиПроводокNAV.Наименование КАК Наименование,
	|	pcru_ex_НастройкиПроводокNAV.NAV_ДТ КАК NAV_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТ КАК NAV_КТ,
	|	pcru_ex_НастройкиПроводокNAV.СчДТ КАК СчДТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ1 КАК СубконтоДТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ2 КАК СубконтоДТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ3 КАК СубконтоДТ3,
	|	pcru_ex_НастройкиПроводокNAV.СчКТ КАК СчКТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ1 КАК СубконтоКТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ2 КАК СубконтоКТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ3 КАК СубконтоКТ3,
	|	pcru_ex_НастройкиПроводокNAV.ОдинКНескольким КАК ОдинКНескольким,
	|	pcru_ex_НастройкиПроводокNAV.Запрос.Запрос КАК Запрос,
	|	pcru_ex_НастройкиПроводокNAV.ОпределятьТранзитныйСчет КАК ОпределятьТранзитныйСчет,
	|	pcru_ex_НастройкиПроводокNAV.Комментарий КАК Комментарий,
	|	pcru_ex_НастройкиПроводокNAV.ОписаниеПроводки КАК ОписаниеПроводки,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_ДТ КАК КД_в_СК_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_КонтрагентДоговорВСубконто КАК ДТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_КТ КАК КД_в_СК_КТ,
	|	pcru_ex_НастройкиПроводокNAV.КТ_КонтрагентДоговорВСубконто КАК КТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_СчетЗависит_От_Контракта КАК ДТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.КТ_СчетЗависит_От_Контракта КАК КТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.СчДТКод КАК СчДТКод,
	|	pcru_ex_НастройкиПроводокNAV.СчКТКод КАК СчКТКод,
	|	pcru_ex_НастройкиПроводокNAV.ЭтоПроводкаСНДС КАК ЭтоПроводкаСНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетДоходов КАК СчетДоходов,
	|	pcru_ex_НастройкиПроводокNAV.СчетНДС КАК СчетНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетРасходов КАК СчетРасходов,
	|	pcru_ex_НастройкиПроводокNAV.Номенклатура КАК Номенклатура,
	|	pcru_ex_НастройкиПроводокNAV.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	pcru_ex_НастройкиПроводокNAV.СпособЗачетаАванса КАК СпособЗачетаАванса,
	|	pcru_ex_НастройкиПроводокNAV.СтавкаНДС КАК СтавкаНДС,
	|	pcru_ex_НастройкиПроводокNAV.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСчетУчетаНДСОплаченный КАК БНФОСчетУчетаНДСОплаченный,
	|	pcru_ex_НастройкиПроводокNAV.ДокументБезНДС КАК ДокументБезНДС,
	|	pcru_ex_НастройкиПроводокNAV.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	pcru_ex_НастройкиПроводокNAV.ПроизвольнаяФункция КАК ПроизвольнаяФункция,
	|	pcru_ex_НастройкиПроводокNAV.КодФункции КАК КодФункции,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ВР КАК СуммуДТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_НУ КАК СуммуДТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ПР КАК СуммуДТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ВР КАК СуммуКТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ПР КАК СуммуКТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_НУ КАК СуммуКТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСтатьяДоходов КАК БНФОСтатьяДоходов,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТНДС КАК NAV_КТНДС
	|ИЗ
	|	Справочник.pcru_ex_НастройкиПроводокNAV КАК pcru_ex_НастройкиПроводокNAV
	|ГДЕ
	|	НЕ pcru_ex_НастройкиПроводокNAV.ПометкаУдаления
	|	И pcru_ex_НастройкиПроводокNAV.Ссылка В(&МассивСчетов)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Задание <> Неопределено  Тогда
		pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"КоличествоПроводок",Выборка.Количество());
	КонецЕсли; 
	
	Ии = 1;
	Пока Выборка.Следующий() Цикл
		Если Задание <> Неопределено  Тогда
			pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"НомерПроводки",Ии);
			pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"ТекущаяПроводка",Выборка.Ссылка);
		КонецЕсли; 
		Если Выборка.ЭтоПроводкаСНДС Тогда
			РаботаСРеализацией(Выборка,Command,ДатаВыгрузки,ВыполнятьВТранзакции ,ТолькоНовые ,ТекстОшибки,Задание);
		Иначе	
			Если Выборка.ПроизвольнаяФункция Тогда
				Выполнить(Выборка.КодФункции); 
			Иначе	
				РаботаСВыборкой(Выборка,Command,ДатаВыгрузки,ВыполнятьВТранзакции ,ТолькоНовые ,ТекстОшибки,Задание);
			КонецЕсли;
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки);
		КонецЕсли;
		Ии = Ии +1;
	КонецЦикла;
КонецПроцедуры

Процедура УниверсальныйОбменНаСервереПоПравиламИзСправочника(ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "",Задание = Неопределено) Экспорт
	
	Command = pcru_ex_ВнешниеСоединения.СоздатьВнешнееСоединение("SQL","NAV");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ pcru_ex_НастройкиПроводокNAV.Ссылка КАК Ссылка,
	|	pcru_ex_НастройкиПроводокNAV.Код КАК Код,
	|	pcru_ex_НастройкиПроводокNAV.Наименование КАК Наименование,
	|	pcru_ex_НастройкиПроводокNAV.NAV_ДТ КАК NAV_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТ КАК NAV_КТ,
	|	pcru_ex_НастройкиПроводокNAV.СчДТ КАК СчДТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ1 КАК СубконтоДТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ2 КАК СубконтоДТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ3 КАК СубконтоДТ3,
	|	pcru_ex_НастройкиПроводокNAV.СчКТ КАК СчКТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ1 КАК СубконтоКТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ2 КАК СубконтоКТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ3 КАК СубконтоКТ3,
	|	pcru_ex_НастройкиПроводокNAV.ОдинКНескольким КАК ОдинКНескольким,
	|	pcru_ex_НастройкиПроводокNAV.Запрос.Запрос КАК Запрос,
	|	pcru_ex_НастройкиПроводокNAV.ОпределятьТранзитныйСчет КАК ОпределятьТранзитныйСчет,
	|	pcru_ex_НастройкиПроводокNAV.Комментарий КАК Комментарий,
	|	pcru_ex_НастройкиПроводокNAV.ОписаниеПроводки КАК ОписаниеПроводки,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_ДТ КАК КД_в_СК_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_КонтрагентДоговорВСубконто КАК ДТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_КТ КАК КД_в_СК_КТ,
	|	pcru_ex_НастройкиПроводокNAV.КТ_КонтрагентДоговорВСубконто КАК КТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_СчетЗависит_От_Контракта КАК ДТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.КТ_СчетЗависит_От_Контракта КАК КТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.СчДТКод КАК СчДТКод,
	|	pcru_ex_НастройкиПроводокNAV.СчКТКод КАК СчКТКод,
	|	pcru_ex_НастройкиПроводокNAV.ЭтоПроводкаСНДС КАК ЭтоПроводкаСНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетДоходов КАК СчетДоходов,
	|	pcru_ex_НастройкиПроводокNAV.СчетНДС КАК СчетНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетРасходов КАК СчетРасходов,
	|	pcru_ex_НастройкиПроводокNAV.Номенклатура КАК Номенклатура,
	|	pcru_ex_НастройкиПроводокNAV.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	pcru_ex_НастройкиПроводокNAV.СпособЗачетаАванса КАК СпособЗачетаАванса,
	|	pcru_ex_НастройкиПроводокNAV.СтавкаНДС КАК СтавкаНДС,
	|	pcru_ex_НастройкиПроводокNAV.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСчетУчетаНДСОплаченный КАК БНФОСчетУчетаНДСОплаченный,
	|	pcru_ex_НастройкиПроводокNAV.ДокументБезНДС КАК ДокументБезНДС,
	|	pcru_ex_НастройкиПроводокNAV.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	pcru_ex_НастройкиПроводокNAV.ПроизвольнаяФункция КАК ПроизвольнаяФункция,
	|	pcru_ex_НастройкиПроводокNAV.КодФункции КАК КодФункции,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ВР КАК СуммуДТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_НУ КАК СуммуДТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ПР КАК СуммуДТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ВР КАК СуммуКТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ПР КАК СуммуКТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_НУ КАК СуммуКТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСтатьяДоходов КАК БНФОСтатьяДоходов,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТНДС КАК NAV_КТНДС
	|ИЗ
	|	Справочник.pcru_ex_НастройкиПроводокNAV КАК pcru_ex_НастройкиПроводокNAV
	|ГДЕ
	|	НЕ pcru_ex_НастройкиПроводокNAV.ПометкаУдаления
	|	И pcru_ex_НастройкиПроводокNAV.Родитель.Наименование = ""Стандартные Проводки""";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Задание <> Неопределено  Тогда
		pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"КоличествоПроводок",Выборка.Количество());
	КонецЕсли;
	Ии = 1;
	Пока Выборка.Следующий() Цикл
		Если Задание <> Неопределено  Тогда
			pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"НомерПроводки",Ии);
			pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"ТекущаяПроводка",Выборка.Ссылка);
		КонецЕсли;
		Ии = Ии +1;
		Если Выборка.ЭтоПроводкаСНДС Тогда
			//РаботаСРеализацией(Выборка,Command,ДатаВыгрузки,Счетчик ,ТолькоНовые ,ТекстОшибки);
		Иначе	
			Если Выборка.ПроизвольнаяФункция Тогда
				//Выполнить(Выборка.КодФункции); 
			Иначе	
				РаботаСВыборкой(Выборка,Command,ДатаВыгрузки,ВыполнятьВТранзакции ,ТолькоНовые ,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура Обмен_Реализации                  (ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "",Задание = Неопределено)Экспорт
	Command = pcru_ex_ВнешниеСоединения.СоздатьВнешнееСоединение("SQL","NAV");
	ВыполнятьВТранзакции=Ложь;
	ТекстОшибки = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_ex_НастройкиПроводокNAV.Ссылка КАК Ссылка,
	|	pcru_ex_НастройкиПроводокNAV.Код КАК Код,
	|	pcru_ex_НастройкиПроводокNAV.Наименование КАК Наименование,
	|	pcru_ex_НастройкиПроводокNAV.NAV_ДТ КАК NAV_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТ КАК NAV_КТ,
	|	pcru_ex_НастройкиПроводокNAV.СчДТ КАК СчДТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ1 КАК СубконтоДТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ2 КАК СубконтоДТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоДТ3 КАК СубконтоДТ3,
	|	pcru_ex_НастройкиПроводокNAV.СчКТ КАК СчКТ,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ1 КАК СубконтоКТ1,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ2 КАК СубконтоКТ2,
	|	pcru_ex_НастройкиПроводокNAV.СубконтоКТ3 КАК СубконтоКТ3,
	|	pcru_ex_НастройкиПроводокNAV.ОдинКНескольким КАК ОдинКНескольким,
	|	pcru_ex_НастройкиПроводокNAV.Запрос.Запрос КАК Запрос,
	|	pcru_ex_НастройкиПроводокNAV.ОпределятьТранзитныйСчет КАК ОпределятьТранзитныйСчет,
	|	pcru_ex_НастройкиПроводокNAV.Комментарий КАК Комментарий,
	|	pcru_ex_НастройкиПроводокNAV.ОписаниеПроводки КАК ОписаниеПроводки,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_ДТ КАК КД_в_СК_ДТ,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_КонтрагентДоговорВСубконто КАК ДТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.КД_в_СК_КТ КАК КД_в_СК_КТ,
	|	pcru_ex_НастройкиПроводокNAV.КТ_КонтрагентДоговорВСубконто КАК КТ_КонтрагентДоговорВСубконто,
	|	pcru_ex_НастройкиПроводокNAV.ДТ_СчетЗависит_От_Контракта КАК ДТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.КТ_СчетЗависит_От_Контракта КАК КТ_СчетЗависит_От_Контракта,
	|	pcru_ex_НастройкиПроводокNAV.СчДТКод КАК СчДТКод,
	|	pcru_ex_НастройкиПроводокNAV.СчКТКод КАК СчКТКод,
	|	pcru_ex_НастройкиПроводокNAV.ЭтоПроводкаСНДС КАК ЭтоПроводкаСНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетДоходов КАК СчетДоходов,
	|	pcru_ex_НастройкиПроводокNAV.СчетНДС КАК СчетНДС,
	|	pcru_ex_НастройкиПроводокNAV.СчетРасходов КАК СчетРасходов,
	|	pcru_ex_НастройкиПроводокNAV.Номенклатура КАК Номенклатура,
	|	pcru_ex_НастройкиПроводокNAV.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	pcru_ex_НастройкиПроводокNAV.СпособЗачетаАванса КАК СпособЗачетаАванса,
	|	pcru_ex_НастройкиПроводокNAV.СтавкаНДС КАК СтавкаНДС,
	|	pcru_ex_НастройкиПроводокNAV.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСчетУчетаНДСОплаченный КАК БНФОСчетУчетаНДСОплаченный,
	|	pcru_ex_НастройкиПроводокNAV.ДокументБезНДС КАК ДокументБезНДС,
	|	pcru_ex_НастройкиПроводокNAV.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	pcru_ex_НастройкиПроводокNAV.ПроизвольнаяФункция КАК ПроизвольнаяФункция,
	|	pcru_ex_НастройкиПроводокNAV.КодФункции КАК КодФункции,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ВР КАК СуммуДТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_НУ КАК СуммуДТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.СуммуДТ_В_ПР КАК СуммуДТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ВР КАК СуммуКТ_В_ВР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_ПР КАК СуммуКТ_В_ПР,
	|	pcru_ex_НастройкиПроводокNAV.СуммуКТ_В_НУ КАК СуммуКТ_В_НУ,
	|	pcru_ex_НастройкиПроводокNAV.БНФОСтатьяДоходов КАК БНФОСтатьяДоходов,
	|	pcru_ex_НастройкиПроводокNAV.NAV_КТНДС КАК NAV_КТНДС
	
	|ИЗ
	|	Справочник.pcru_ex_НастройкиПроводокNAV КАК pcru_ex_НастройкиПроводокNAV
	|ГДЕ
	|	НЕ pcru_ex_НастройкиПроводокNAV.ПометкаУдаления
	|	И pcru_ex_НастройкиПроводокNAV.Родитель.Наименование = ""Проводки с созданием реализаций""";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Задание <> Неопределено  Тогда
		pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"КоличествоПроводок",Выборка.Количество());      КонецЕсли;
	
	Ии = 1;
	Пока Выборка.Следующий() Цикл
		Если Задание <> Неопределено  Тогда
			pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"НомерПроводки",Ии);
			pcru_ex_РегламентныеОперации.УстановитьРеквизит(Задание,"ТекущаяПроводка",Выборка.Ссылка);   КонецЕсли;
		
		Ии = Ии +1;
		Если Выборка.ЭтоПроводкаСНДС Тогда
			РаботаСРеализацией(Выборка,Command,ДатаВыгрузки,ВыполнятьВТранзакции ,ТолькоНовые ,ТекстОшибки);
		КонецЕсли;
		Если Выборка.ПроизвольнаяФункция Тогда
			Попытка
				Выполнить(Выборка.КодФункции); 
			Исключение
				ТекстОшибки  = ТекстОшибки + " Ошибка выполнения произвольной функции "+ ОписаниеОшибки()
			КонецПопытки; 
		КонецЕсли;
		Если ТекстОшибки <> "" Тогда
			pcru_ex_Почта.Сообщить_об_ошибке(ТекстОшибки);
		КонецЕсли; 
	КонецЦикла;
	//
	//ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,0,ТолькоНовые);
	//ЕжеднеаныеРеализацииНаСервереDefault(ДатаВыгрузки,0,ТолькоНовые);
	//ЕжеднеаныеРеализацииБезНДСНаСервере(ДатаВыгрузки,0,ТолькоНовые);
	//ПросрочкаНаСервере(ДатаВыгрузки,0,ТолькоНовые);
	//ЕжеднеаныеРеализацииБезНДСНаСервереИП(ДатаВыгрузки,0,ТолькоНовые);
	//ПросрочкаНаСервереИП(ДатаВыгрузки,0,ТолькоНовые);
	//ЕжеднеаныеРеализацииНаСервере_новыйблок(ДатаВыгрузки,0,ТолькоНовые);
	//ЕжеднеаныеРеализации_СервисПакет_НаСервере(ДатаВыгрузки,0,ТолькоНовые);
	//ЕжеднеаныеРеализации_СервисПакет_НаСервере1(ДатаВыгрузки,0,ТолькоНовые); 
	//ЕжеднеаныеРеализацииНаСервере_новыйблокИП(ДатаВыгрузки,0,ТолькоНовые);
КонецПроцедуры

Процедура РаботаСВыборкой   (Выборка,Command,ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "",Задание = Неопределено)Экспорт
	ЗаписьВТранзакции = Истина;
	ДАТА1 = СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки));
	ДАТА2 = СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки));
	Command.CommandText = ПодставитьПараметрыВЗапрос(Выборка.Запрос,Выборка.NAV_ДТ,Выборка.NAV_КТ,ПолучитьБазу(),ПолучитьФирму(),ДАТА1,ДАТА2);
	МассивДанных = Новый Массив;
	Попытка
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
			RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Попытка
				Стр.Вставить("ДоговорКТ", Строка(RecordSet.Fields("ContractСT").Value));
			Исключение
			КонецПопытки; 
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", Выборка.СчДТКод);
			Стр.Вставить("СчетКТ", Выборка.СчКТКод);
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		ТекстОшибки = ТекстОшибки + Выборка.Наименование+" получение данных из нав "+ОписаниеОшибки()+" по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
		Возврат;
	КонецПопытки; 
	
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	Комментарий = Стрзаменить(Выборка.Комментарий,"%Дата%",Строка(ДатаВыгрузки));
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
	|ГДЕ
	|	БНФОМемориальныйОрдер.Дата = &Дата
	|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	Запрос.УстановитьПараметр("Комментарий",Комментарий);
	Результат = Запрос.Выполнить();
	Выборка1 = Результат.Выбрать();
	Если Выборка1.Следующий() Тогда 
		ОперацияОбъект = Выборка1.Ссылка.ПолучитьОбъект();
		Запрос1= Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ
		|	БНФОБанковский.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
		|ГДЕ
		|	БНФОБанковский.Регистратор = &Регистратор";
		Запрос1.УстановитьПараметр("Регистратор",Выборка1.Ссылка );
		Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
			Возврат;
		КонецЕсли;  
	Иначе	
		ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
	КонецЕсли;
	ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
	ОперацияОбъект.Организация = Организация;
	ОперацияОбъект.Комментарий = Комментарий;
	ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ОперацияОбъект.Содержание = Выборка.Наименование;
	ОперацияОбъект.Проведен = Истина;
	ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
	ОперацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	//МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	//			
	//МенеджерЗаписи.Объект = ОперацияОбъект.Ссылка;
	//МенеджерЗаписи.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("КодНастройкиПроводок");
	//МенеджерЗаписи.Значение = Выборка.Код;
	//		
	//МенеджерЗаписи.Записать(Истина);
	
	Попытка
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать(); 
		НаборЗаписей.Очистить();
	Исключение
		ТекстОшибки = ТекстОшибки + Выборка.Наименование+" ошибка создания/очистки набора записей  "+ОписаниеОшибки()+" по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
		Возврат;
	КонецПопытки; 
	Сумма = 0;
	Для Каждого СтрокаТЧ Из МассивДанных Цикл
		Попытка
			Запрос1 = Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
			|	БНФОДоговорыКредитовИДепозитов.Контрагент КАК Контрагент,
			|	БНФОДоговорыКредитовИДепозитов.ДоговорКонтрагента КАК ДоговорКонтрагента
			|ИЗ
			|	Справочник.БНФОДоговорыКредитовИДепозитов КАК БНФОДоговорыКредитовИДепозитов
			|ГДЕ
			|	БНФОДоговорыКредитовИДепозитов.Номер = &Номер";
			Запрос1.УстановитьПараметр("Номер",СтрокаТЧ.ДоговорДТ );  //"0009099142"
			Выборка1 = Запрос1.Выполнить().Выбрать();
			Пока Выборка1.Следующий() Цикл
				УсловияКредита = Выборка1.Ссылка; 	
				Контрагент =Выборка1.Контрагент; 
				Договор = Выборка1.ДоговорКонтрагента; 
			КонецЦикла;
			
			Если Выборка.ОдинКНескольким Тогда
				#Область ОдинКНескольким
				Для каждого СтрокаПроводок Из Выборка.ссылка.Проводки Цикл
					НоваяЗапись = НаборЗаписей.Добавить(); 
					НоваяЗапись.Содержание = СтрокаТЧ.ОписаниеПроводки;
					НоваяЗапись.Активность = Истина;
					//***************************************************
					Если не СтрокаПроводок.ДТ_СчетЗависит_От_Контракта  Тогда
						НоваяЗапись.СчетАналитическогоУчетаДт =СтрокаПроводок.СчДТ;//	
						НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 1,                                                                          СтрокаПроводок.СубконтоДТ1); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 2,                                                                          СтрокаПроводок.СубконтоДТ2); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 3,                                                                          СтрокаПроводок.СубконтоДТ3); 
					Иначе
						СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
						НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаПроводок.СчДТКод);	
						НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты,             Контрагент); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры,                Договор); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
					КонецЕсли; 	
					
					Если Выборка.ДТ_КонтрагентДоговорВСубконто Тогда
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты,             Контрагент); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры,                Договор); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
					КонецЕсли; 	
					
					
					Нск = 1;
					Для каждого ВидСубконто Из НоваяЗапись.СчетДт.ВидыСубконто Цикл
						Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
							ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорДТ);
							Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
								БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092")); 
							Иначе
								БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093")); 
							КонецЕсли;
						КонецЕсли;
						Нск = Нск + 1;
					КонецЦикла; 
					
					//***************************************************
					Если не СтрокаПроводок.КТ_СчетЗависит_От_Контракта  Тогда	
						НоваяЗапись.СчетАналитическогоУчетаКт = СтрокаПроводок.СчКТ;
						НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 1, СтрокаПроводок.СубконтоКТ1); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 2, СтрокаПроводок.СубконтоКТ2); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 3, СтрокаПроводок.СубконтоКТ3); 
					Иначе	
						СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
						НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаПроводок.СчКТКод);	
						НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
					КонецЕсли;
					
					Если Выборка.КТ_КонтрагентДоговорВСубконто Тогда
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
					КонецЕсли;
					
					Нск = 1;
					Для каждого ВидСубконто Из НоваяЗапись.СчетКт.ВидыСубконто Цикл
						Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
							ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорКТ);
							Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
								БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092")); 
							Иначе
								БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093")); 
							КонецЕсли;
						КонецЕсли; 	
						Нск = Нск + 1;
					КонецЦикла; 
					
					//***************************************************
					НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
					НоваяЗапись.Организация = Организация;
					
					Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
						
						НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
					КонецЕсли; 
					
					Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
						НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
					КонецЕсли; 
					
					
					Если НоваяЗапись.СчетДт.Валютный Тогда
						НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
						НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
					КонецЕсли;
					
					Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
						Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
							Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
								НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
							Иначе
								НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
							КонецЕсли; 
						Иначе 
							НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					КонецЕсли; 
					
					Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
						Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
							Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
								НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
							Иначе
								НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
							КонецЕсли; 
						Иначе 
							НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					КонецЕсли; 
					
					Если НоваяЗапись.СчетКт.Валютный Тогда
						НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
						НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
					КонецЕсли;
					
					//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
					//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					//КонецЕсли; 
					
					НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
					НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
					НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
					//
					//
					Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
						pcru_ex_Почта.Сообщить_об_ошибке(" Строка удалена Договор "+СтрокаТЧ.ДоговорДТ+" ДтА " + Строка(НоваяЗапись.СчетДт) + " ктА "+НоваяЗапись.СчетКт+ Символы.ПС);
						НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
						Продолжить;
					КонецЕсли; 
					
					Попытка
						Сумма = Сумма + СтрокаТЧ.Сумма;
					Исключение
						Сумма = Сумма + 0;
					КонецПопытки;
				КонецЦикла; 
				#КонецОбласти
			Иначе
				#Область ОдинКОдному
				Запрос2 = Новый Запрос;
				Запрос2.Текст = "ВЫБРАТЬ
				|	БНФОДоговорыКредитовИДепозитов.Ссылка КАК Ссылка,
				|	БНФОДоговорыКредитовИДепозитов.Контрагент КАК Контрагент,
				|	БНФОДоговорыКредитовИДепозитов.ДоговорКонтрагента КАК ДоговорКонтрагента
				|ИЗ
				|	Справочник.БНФОДоговорыКредитовИДепозитов КАК БНФОДоговорыКредитовИДепозитов
				|ГДЕ
				|	БНФОДоговорыКредитовИДепозитов.Номер = &Номер";
				Запрос2.УстановитьПараметр("Номер",СтрокаТЧ.ДоговорКТ );  //"0009099142"
				Выборка2 = Запрос2.Выполнить().Выбрать();
				Пока Выборка2.Следующий() Цикл
					УсловияКредитаКТ = Выборка2.Ссылка; 	
					КонтрагентКТ =Выборка2.Контрагент; 
					ДоговорКТ = Выборка2.ДоговорКонтрагента; 
				КонецЦикла;
				
				НоваяЗапись = НаборЗаписей.Добавить(); 
				НоваяЗапись.Содержание = СтрокаТЧ.ОписаниеПроводки;
				НоваяЗапись.Активность = Истина;
				//***************************************************
				СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
				Если не Выборка.ДТ_СчетЗависит_От_Контракта  Тогда
					НоваяЗапись.СчетАналитическогоУчетаДт =Выборка.СчДТ;//	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 1, Выборка.СубконтоДТ1); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 2, Выборка.СубконтоДТ2); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 3, Выборка.СубконтоДТ3); 
				Иначе
					
					НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,Выборка.СчДТКод);	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, СтрСчета.Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, СтрСчета.ДоговорКонтрагента); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, СтрСчета.УсловиеЗайма); 
				КонецЕсли; 	
				
				Если Выборка.ДТ_КонтрагентДоговорВСубконто Тогда
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, СтрСчета.Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, СтрСчета.ДоговорКонтрагента); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, СтрСчета.УсловиеЗайма); 
				КонецЕсли; 
				
				Нск = 1;
				Для каждого ВидСубконто Из НоваяЗапись.СчетДт.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
						ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорДТ);
						Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
							БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092")); 
						Иначе
							БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093")); 
						КонецЕсли;
					КонецЕсли;
					Нск = Нск + 1;
				КонецЦикла; 
				
				
				
				//***************************************************
				СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорКТ);
				
				Если не Выборка.КТ_СчетЗависит_От_Контракта  Тогда	
					НоваяЗапись.СчетАналитическогоУчетаКт = Выборка.СчКТ;
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 1, Выборка.СубконтоКТ1); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 2, Выборка.СубконтоКТ2); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, 3, Выборка.СубконтоКТ3); 
				Иначе	
					НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,Выборка.СчКТКод);	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					Попытка
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, СтрСчета.Контрагент); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, СтрСчета.ДоговорКонтрагента); 
						БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, СтрСчета.УсловиеЗайма); 
					Исключение
					КонецПопытки; 
				КонецЕсли;
				
				Если Выборка.КТ_КонтрагентДоговорВСубконто Тогда
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, СтрСчета.Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, СтрСчета.ДоговорКонтрагента); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, СтрСчета.УсловиеЗайма); 
				КонецЕсли; 
				
				Нск = 1;
				Для каждого ВидСубконто Из НоваяЗапись.СчетКт.ВидыСубконто Цикл
					Если  ВидСубконто.ВидСубконто.Наименование = "Тип затрат"  Тогда
						ДатаВыплаты = pcru_ex_WSWORKS.ПолучитьДатуПодписания(СтрокаТЧ.ДоговорКТ);
						Если ДатаВыплаты < Дата(2020,5,1,0,0,0) Тогда
							БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000092")); 
						Иначе
							БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, Нск, Справочники.БНФОСубконто.НайтиПоКоду("000000093")); 
						КонецЕсли;
					КонецЕсли; 	
					Нск = Нск + 1;
				КонецЦикла; 
				
				//***************************************************
				НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
				НоваяЗапись.Организация = Организация;
				
				Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
				КонецЕсли; 
				
				
				Если НоваяЗапись.СчетДт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				
				Если НоваяЗапись.СчетКт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				Если Выборка.СуммуДТ_В_ВР Тогда
					НоваяЗапись.СуммаВРДТ = СтрокаТЧ.Сумма;
				КонецЕсли; 
				
				Если Выборка.СуммуКТ_В_ВР Тогда
					НоваяЗапись.СуммаВРКТ = СтрокаТЧ.Сумма;
				КонецЕсли; 
				
				
				Если Выборка.СуммуДТ_В_НУ Тогда
					НоваяЗапись.СуммаНУДТ = СтрокаТЧ.Сумма;
				КонецЕсли; 
				//
				Если Выборка.СуммуКТ_В_НУ Тогда
					НоваяЗапись.СуммаНУКТ = СтрокаТЧ.Сумма;
				КонецЕсли; 
				
				
				Если Выборка.СуммуДТ_В_ПР Тогда
					НоваяЗапись.СуммаПРДТ = СтрокаТЧ.Сумма;
				КонецЕсли; 
				
				Если Выборка.СуммуКТ_В_ПР Тогда
					НоваяЗапись.СуммаПРКТ = СтрокаТЧ.Сумма;
				КонецЕсли; 
				
				
				НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
				НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
				НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
				//
				//
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
					pcru_ex_Почта.Сообщить_об_ошибке(" Строка удалена Договор "+СтрокаТЧ.ДоговорДТ+" ДтА " + Строка(НоваяЗапись.СчетДт) + " ктА "+НоваяЗапись.СчетКт+ Символы.ПС);
					НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
					Продолжить;
				КонецЕсли; 
				
				Попытка
					Сумма = Сумма + СтрокаТЧ.Сумма;
				Исключение
					Сумма = Сумма + 0;
				КонецПопытки;
				
				
				
				
				//Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				//	Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
				//		Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
				//			НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				//		Иначе
				//			НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
				//		КонецЕсли; 
				//	Иначе 
				//		НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				//	КонецЕсли; 
				//КонецЕсли; 
				//
				//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				//	Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
				//		Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
				//			НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				//		Иначе
				//			НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
				//		КонецЕсли; 
				//	Иначе 
				//		НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				//	КонецЕсли; 
				//КонецЕсли; 
				
				
				
				
				#КонецОбласти
			КонецЕсли; 
		Исключение
			ТекстОшибки = ТекстОшибки + " Ошибка формирования проводки "+ОписаниеОшибки()+" по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
			Возврат;
		КонецПопытки; 	
	КонецЦикла;
	//*********************************************************************** 
	
	Попытка
		Если ЗаписьВТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли; 
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		pcru_ex_Почта.ОтправкаПочты("", Выборка.Наименование+" Загружен МО "+Строка(ОперацияОбъект.Ссылка)+" по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ+" на сумму "+Сумма);
		Если ЗаписьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли; 
	Исключение
		Если ЗаписьВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		ТекстОшибки = ТекстОшибки + " Ошибка проведения "+ОписаниеОшибки()+" по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
		Возврат;
	КонецПопытки; 	
КонецПроцедуры

Процедура РаботаСРеализацией(Выборка,Command,ДатаВыгрузки,ВыполнятьВТранзакции = Ложь,ТолькоНовые = Ложь,ТекстОшибки = "",Задание = Неопределено)Экспорт
	
	Дата = СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки));
	
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	
	Command.CommandText = ПодставитьПараметрыВЗапрос(Выборка.Запрос,Выборка.NAV_ДТ,Выборка.NAV_КТ,ПолучитьБазу(),ПолучитьФирму(),Дата,Дата,Выборка.NAV_ДТ,Выборка.NAV_КТНДС);
	
	Попытка
		RecordSet = Command.Execute();
	Исключение
		ТекстОшибки = ТекстОшибки + Выборка.Наименование+" получение данных из нав "+ОписаниеОшибки()+"Реализации  по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
		Возврат;
	КонецПопытки; 
	Счетчик = 0;//Обнуляем счетчик
	
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		RecordSet.Close();
		Возврат;
	КонецЕсли;
	
	Попытка
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		МассивДанныхКорректировок = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Попытка
				Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
			Исключение
				Стр.Вставить("НДС", 0);
			КонецПопытки; 
			
			Если число(RecordSet.Fields("Amount").Value) <0 Тогда
				МассивДанныхКорректировок.Добавить(стр);			
			Иначе 	
				Если число(RecordSet.Fields("Amount").Value)>0 Тогда
					МассивДанных.Добавить(стр);
				КонецЕсли;			
			КонецЕсли;
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		ТекстОшибки = ТекстОшибки + Выборка.Наименование+" получение данных из нав "+ОписаниеОшибки()+"Реализации  по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
		Возврат;
	КонецПопытки; 
	
	Сумма = 0;
	КоличствоРеализаций = 0;
	Стр = Неопределено; 
	ТекстПисьма = "";
	
	#Область РЕализации 
	Для Каждого СтрокаТЧ Из МассивДанных Цикл
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		//
		ДерКоммент = Выборка.Комментарий;
		ДерКоммент = СтрЗаменить(ДерКоммент,"%Контрагент%",СтрокаТЧ.КонтрагентДТ);//"#Проценты default new Контрагент "+ + " Договор "+СтрокаТЧ.ДоговорДТ;
		ДерКоммент = СтрЗаменить(ДерКоммент,"%Договор%",СтрокаТЧ.ДоговорДТ);
		ДерКоммент = СтрЗаменить(ДерКоммент,"%Дата%",ДатаВыгрузки);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата = &Дата
		|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
		|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И РеализацияТоваровУслуг.СуммаДокумента = &СуммаДокумента";
		
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		
		Запрос.УстановитьПараметр("СуммаДокумента",СтрокаТЧ.Сумма );
		Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
		Результат = Запрос.Выполнить();
		Выборка1 = Результат.Выбрать();
		Если Выборка1.Следующий() Тогда
			Если ТолькоНовые Тогда
				Продолжить;
			КонецЕсли; 
			ДокументОбъект = Выборка1.Ссылка.ПолучитьОбъект();
		иначе
			ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		// Шапка
		//Общие данные
		ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
		ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ВалютаДокумента =  Справочники.Валюты.НайтиПоКоду("643");
		ДокументОбъект.КурсВзаиморасчетов= 1;
		ДокументОбъект.КратностьВзаиморасчетов = 1;
		ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		ДокументОбъект.СуммаВключаетНДС = Ложь;
		ДокументОбъект.ДокументБезНДС = Выборка.ДокументБезНДС;
		Попытка
			ДокументОбъект.СчетУчетаРасчетовПоАвансам = pcru_УМФО.ПолучитьСчетСтр(Стр,Выборка.NAV_ДТ);
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = pcru_УМФО.ПолучитьСчетСтр(Стр,Выборка.NAV_ДТ);
		Исключение
			ДокументОбъект.СчетУчетаРасчетовПоАвансам = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
		КонецПопытки; 
		
		ДокументОбъект.ВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.Прочее; 	//Перечисления.ВидыЭД.АктИсполнитель;
		ДокументОбъект.ПодразделениеОрганизации =  Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");//FD 
		ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
		
		//Данные из массива
		ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
		ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
		ДокументОбъект.Комментарий = ДерКоммент;
		//Табличная часть
		ДокументОбъект.Услуги.Очистить();
		СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
		СтрокаУслуг.Количество = 1;
		СтрокаУслуг.Субконто = Выборка.НоменклатурнаяГруппа; 
		СтрокаУслуг.Номенклатура = Выборка.Номенклатура;
		СтрокаУслуг.Содержание = Выборка.Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
		СтрокаУслуг.СтавкаНДС= Выборка.СтавкаНДС;
		СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
		СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
		СтрокаУслуг.СуммаНДС = СтрокаТЧ.НДС;
		СтрокаУслуг.СчетДоходов= Выборка.СчетДоходов;
		СтрокаУслуг.СчетРасходов = Выборка.СчетРасходов;
		СтрокаУслуг.СчетУчетаНДСПоРеализации = Выборка.СчетНДС;
		СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = Выборка.БНФОСчетУчетаНДСОплаченный;
		СтрокаУслуг.БНФОПодразделение= Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");//FD
		СтрокаУслуг.БНФОСтатьяДоходов = Выборка.БНФОСтатьяДоходов;
		
		Попытка
			НачатьТранзакцию();
			ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КоличствоРеализаций = 	КоличствоРеализаций + 1;
			Если НЕ Выборка.ДокументБезНДС Тогда
				//Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);
				СтруктураПараметров = СтруктураПараметровДляСозданияСчетФактруы(ДокументОбъект.Ссылка);
				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(СтруктураПараметров);
			КонецЕсли; 
			ТекстПисьма = ТекстПисьма + " Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций "+Символы.ПС;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ТекстОшибки + Выборка.Наименование+" проведение реализации "+ОписаниеОшибки()+"Реализации  по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ТекстОшибки = ТекстОшибки + Выборка.Наименование+" запись реализации "+ОписаниеОшибки()+"Реализации  по счетам "+Выборка.NAV_ДТ+"-"+Выборка.NAV_КТ;
			КонецПопытки; 	
			Возврат;
		КонецПопытки; 	
	КонецЦикла;
	#КонецОбласти
	pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)

КонецПроцедуры

Функция СтруктураПараметровДляСозданияСчетФактруы(Основание)
	ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияВыданногоСчетаФактуры();
	ПараметрыСоздания.Основание = Основание;
	Возврат ПараметрыСоздания; 
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ЗагрузитьЗаймыЗаДень(ДатаВыгрузки, ВыполнятьВТранзакции = Ложь, ТолькоНовые = Ложь, ТекстОшибки = "", Задание = Неопределено) Экспорт
	
	База = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.ОтправкаПочты("Ошибка ЗагрузитьЗаймыЗаДень",ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки));
		Возврат;
	КонецПопытки; 
	
	Command.CommandText = "SELECT
	|	contrDT.[Contract No_] AS ContractNo,
	|	contrDT.[Disbursement Date] AS DisbursementDate,
	|	contrDT.[Customer No_] AS CustomerNo,
	|	contrDT.[Customer Name] AS CustomerName,
	|	contrDT.[Principal Amount] AS PrincipalAmount,
	|	contrDT.[Interest Rate] AS InterestRate,
	|	contrDT.[Product Type] AS ProductType,
	|	contrDT.[PTI Amount] AS PTIAmount,
	|	pSchedule.[Installment Date] AS InstallmentDate,
	|	pSchedule.[Installment Amount incl_ SP] AS InstallmentAmount,
	|	pSchedule.[Principal - Client] AS PrincipalClient,
	|	pSchedule.[Interest - Client] AS InterestClient,
	|	pSchedule.[Interest - CBR] AS InterestCBR,
	|	pSchedule.[Change No_] AS ChangeNo,
	|	contrDT.[Contract Status] AS ContractStatus
	|FROM
	|	["+База+"].dbo.["+Фирма+"$Contract] AS contrDT
	|	LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Payment Schedule] AS pSchedule
	|		on contrDT.[Contract No_] = pSchedule.[Contract No_]
	//|		and pSchedule.[Mandatory] = 1
	|		and pSchedule.[Installment No_] <> 0
	|		and pSchedule.[Installment Amount excl_ SP] <> 0
	|WHERE 
	|	contrDT.[Disbursement Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|	contrDT.[Disbursement Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|AND
	|	contrDT.[Contract Status] IN (1, 4, 5, 6)
	|AND
	|	pSchedule.[Installment Date] is not null";
	//status
 	//1 - Утвержден 2 - Действующий 3 - Снят 4 - Раннее завершение 5 - Завершен 6 - Передано в суд
	
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			RecordSet.Close();
			Возврат;
		КонецЕсли;
		
		RecordSet.MoveFirst();
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("НомерКонтракта");
		ТЗ.Колонки.Добавить("ДатаВыдачи");
		ТЗ.Колонки.Добавить("КлиентНомер");
		ТЗ.Колонки.Добавить("КлиентИмя");
		ТЗ.Колонки.Добавить("СуммаЗайма");
		ТЗ.Колонки.Добавить("ПроцентнаяСтавка");
		ТЗ.Колонки.Добавить("СубъектМСП");
		ТЗ.Колонки.Добавить("ПДН");
		ТЗ.Колонки.Добавить("ДатаПлатежа");
		ТЗ.Колонки.Добавить("СуммаПлатежа");
		ТЗ.Колонки.Добавить("СуммаОсновногоДолга");
		ТЗ.Колонки.Добавить("СуммаПроцентов");
		ТЗ.Колонки.Добавить("КорректировкаПроцентов");
		ТЗ.Колонки.Добавить("НомерИзменения");
		ТЗ.Колонки.Добавить("СтатусКонтракта");
				
		Пока НЕ RecordSet.EOF() Цикл
			Стр = ТЗ.Добавить();
			Стр.НомерКонтракта = Строка(RecordSet.Fields("ContractNo").Value);
			Стр.ДатаВыдачи = Дата(RecordSet.Fields("DisbursementDate").Value);
			Стр.КлиентНомер = Строка(RecordSet.Fields("CustomerNo").Value);
			Стр.КлиентИмя = Строка(RecordSet.Fields("CustomerName").Value);
			Стр.СуммаЗайма = Число(RecordSet.Fields("PrincipalAmount").Value);
			Стр.ПроцентнаяСтавка = Число(RecordSet.Fields("InterestRate").Value);
			Стр.СубъектМСП = (Число(RecordSet.Fields("ProductType").Value) = 4);
			Стр.ПДН = Число(RecordSet.Fields("PTIAmount").Value) * 100;
			Стр.ДатаПлатежа = Дата(RecordSet.Fields("InstallmentDate").Value);
			Стр.СуммаПлатежа = Число(RecordSet.Fields("InstallmentAmount").Value);
			Стр.СуммаОсновногоДолга = Число(RecordSet.Fields("PrincipalClient").Value);
			Стр.СуммаПроцентов = Число(RecordSet.Fields("InterestClient").Value);
			Стр.КорректировкаПроцентов = Число(RecordSet.Fields("InterestCBR").Value);
			Стр.НомерИзменения = Число(RecordSet.Fields("ChangeNo").Value);
			
			СтатусКонтракта = Число(RecordSet.Fields("ContractStatus").Value);
			Если СтатусКонтракта = 1 Тогда
				Стр.СтатусКонтракта = "Утвержден";
			ИначеЕсли СтатусКонтракта = 4 Тогда
				Стр.СтатусКонтракта = "Раннее завершение";
			ИначеЕсли СтатусКонтракта = 5 Тогда
				Стр.СтатусКонтракта = "Завершен";
			ИначеЕсли СтатусКонтракта = 6 Тогда
				Стр.СтатусКонтракта = "Передано в суд";
			КонецЕсли;

			//Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		pcru_ex_Почта.ОтправкаПочты("Ошибка ЗагрузитьЗаймыЗаДень ",ОписаниеОшибки()+" дата "+Строка(ДатаВыгрузки));
		RecordSet.Close();
	КонецПопытки;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭ_ЗаймПредоставленный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_ЗаймПредоставленный КАК АЭ_ЗаймПредоставленный
	|ГДЕ
	|	АЭ_ЗаймПредоставленный.НомерДоговора = &НомерДоговора
	|	И АЭ_ЗаймПредоставленный.ДатаДоговора = &ДатаДоговора
	|	И НЕ АЭ_ЗаймПредоставленный.ПометкаУдаления";
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	АЭ_ГрафикПлатежейЗаймаПредоставленного.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_ГрафикПлатежейЗаймаПредоставленного КАК АЭ_ГрафикПлатежейЗаймаПредоставленного
	|ГДЕ
	|	АЭ_ГрафикПлатежейЗаймаПредоставленного.Займ = &Займ
	|	И АЭ_ГрафикПлатежейЗаймаПредоставленного.Контрагент = &Контрагент";
	
	ТЗЗайма = ТЗ.Скопировать();
	ТЗЗайма.Свернуть("НомерКонтракта,ДатаВыдачи,КлиентНомер,КлиентИмя,СуммаЗайма,ПроцентнаяСтавка,СубъектМСП,ПДН,СтатусКонтракта,КорректировкаПроцентов");
	
	Для Каждого Строка Из ТЗЗайма Цикл
		
		МассивПлатежей = ТЗ.НайтиСтроки(Новый Структура("НомерКонтракта", Строка.НомерКонтракта));
		ДатаОкончания = ПолучитьДатуОкончанияПлатежа(МассивПлатежей);
				
		НовыйГрафикЗаймаПредоставленногоСсылка = Документы.АЭ_ГрафикПлатежейЗаймаПредоставленного.ПолучитьСсылку(Новый УникальныйИдентификатор);
		
		//УСЛОВИЕ ЗАЙМА
		УсловиеЗайма = Справочники.БНФОДоговорыКредитовИДепозитов.НайтиПоНаименованию(Строка.НомерКонтракта);
		Если НЕ ЗначениеЗаполнено(УсловиеЗайма) Тогда
			pcru_CRM.РегламентныйОбменКонтрагентами(Строка.НомерКонтракта);
			УсловиеЗайма = Справочники.БНФОДоговорыКредитовИДепозитов.НайтиПоНаименованию(Строка.НомерКонтракта);
		КонецЕсли;
				
		//ЗАЙМ ПРЕДОСТАВЛЕННЫЙ
		Запрос.УстановитьПараметр("НомерДоговора", Строка.НомерКонтракта);
		Запрос.УстановитьПараметр("ДатаДоговора", Строка.ДатаВыдачи);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаймПредоставленный = Выборка.Ссылка.ПолучитьОбъект();
			ЗаймПредоставленныйСсылка = ЗаймПредоставленный.Ссылка;
		Иначе
			ЗаймПредоставленныйСсылка = Документы.АЭ_ЗаймПредоставленный.ПолучитьСсылку(Новый УникальныйИдентификатор);
			
			ЗаймПредоставленный = Документы.АЭ_ЗаймПредоставленный.СоздатьДокумент();
			ЗаймПредоставленный.УстановитьСсылкуНового(ЗаймПредоставленныйСсылка);
			
			ЗаймПредоставленный.НомерДоговора = Строка.НомерКонтракта;
			ЗаймПредоставленный.ДатаДоговора = Строка.ДатаВыдачи;
			ЗаймПредоставленный.Дата = Строка.ДатаВыдачи;
		КонецЕсли;
		
		ЗаймПредоставленный.Контрагент = УсловиеЗайма.Контрагент;
		ЗаймПредоставленный.ДоговорКредитаДепозита = УсловиеЗайма;
		ЗаймПредоставленный.ДоговорКонтрагента = УсловиеЗайма.ДоговорКонтрагента;
		
		ЗаймПредоставленный.ПодразделениеОрганизации = УсловиеЗайма.АЭ_ПодразделениеОрганизации;
		ЗаймПредоставленный.Организация = Справочники.Организации.НайтиПоКоду("000000001");
		ЗаймПредоставленный.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		ЗаймПредоставленный.СубъектМСП = Строка.СубъектМСП;
		ЗаймПредоставленный.СуммаЗайма = Строка.СуммаЗайма;
		ЗаймПредоставленный.ДатаНачала = Строка.ДатаВыдачи;
		ЗаймПредоставленный.ПроцентнаяСтавка = Строка.ПроцентнаяСтавка;
		ЗаймПредоставленный.ПроцентнаяСтавкаВид = Перечисления.АЭ_ВидыПроцентнойСтавки.ФиксированнаяПроцентнаяСтавка;
		ЗаймПредоставленный.ПроцентнаяСтавкаВидНаПросроченнуюЗадолженность = Перечисления.АЭ_ВидыПроцентнойСтавки.ФиксированнаяПроцентнаяСтавка;
		ЗаймПредоставленный.ПроцентнаяСтавкаПериодичность = Перечисления.АЭ_ПериодичностьПроцентнойСтавки.Год;
		ЗаймПредоставленный.БазаРасчетаПроцентов = Перечисления.АЭ_БазыРасчетаНачислений.ОтПлановойСуммыПоГрафикуПлатежей;
		ЗаймПредоставленный.ПроцентыВариантРасчетаДнейВГоду = Перечисления.АЭ_ВариантыРасчетаДнейВГоду.ПоКалендарнымДням;
		ЗаймПредоставленный.СпособПодачиЗаявления = Перечисления.АЭ_СпособыПодачиЗаявления.Прямой;
		ЗаймПредоставленный.ВидПлатежаДляРасчетаГрафика = Перечисления.АЭ_ВидыПлатежейДляРасчетаГрафика.ДифференцированныйПлатеж;
		ЗаймПредоставленный.ОсновнойДолгСпособПогашения = Перечисления.АЭ_СпособыПогашенияЗаймов.НаДатуОкончанияДоговора;
		ЗаймПредоставленный.ПроцентыСпособПогашения = Перечисления.АЭ_СпособыПогашенияЗаймов.НаДатуОкончанияДоговора;
		ЗаймПредоставленный.ПоказательДолговойНагрузки = Строка.ПДН;
		ЗаймПредоставленный.МетодРасчетаПроцентов = Перечисления.АЭ_МетодыРасчетаПроцентовВРеглУчете.МетодЭСП;
		
		ЗаймПредоставленный.ДатаОкончания = КонецДня(ДатаОкончания);
		ЗаймПредоставленный.СрокЗаймаПериодичность = Перечисления.АЭ_ПериодичностьСрокЗайма.День;
		ЗаймПредоставленный.СрокЗайма = АЭ_ОбщегоНазначения.РазностьДатВПериодах(ЗаймПредоставленный.ДатаНачала, ЗаймПредоставленный.ДатаОкончания, АЭ_ОбщегоНазначенияПовтИсп.ИмяЗначенияПеречисления(ЗаймПредоставленный.СрокЗаймаПериодичность), Истина, ЗаймПредоставленный.ВключитьВРасчетПроцентовДеньВыдачи, Истина);
		ЗаймПредоставленный.ДеньПлатежа = БНФООбщегоНазначенияНФОКлиентСервер.РазностьДат(НачалоМесяца(МассивПлатежей[0].ДатаПлатежа), МассивПлатежей[0].ДатаПлатежа, ПредопределенноеЗначение("Перечисление.Периодичность.День")) + 1;
		
		ЗаймПредоставленный.Комментарий = "Загружен из NAV. Статус: " + Строка.СтатусКонтракта;
		
		//УСЛОВИЕ ЗАЙМА		
		Если ЗначениеЗаполнено(УсловиеЗайма) Тогда
			УсловиеЗаймаОбъект = УсловиеЗайма.ПолучитьОбъект();
			УсловиеЗаймаОбъект.ДатаНачала = НачалоДня(Строка.ДатаВыдачи);
			УсловиеЗаймаОбъект.ДатаОкончания = КонецДня(ДатаОкончания);
			УсловиеЗаймаОбъект.Дата = НачалоДня(Строка.ДатаВыдачи);
			
			УсловиеЗаймаОбъект.СрокМесяцев = БНФООбщегоНазначенияНФОКлиентСервер.РазностьДат(УсловиеЗаймаОбъект.ДатаНачала, УсловиеЗаймаОбъект.ДатаОкончания,
				ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
			УсловиеЗаймаОбъект.СрокДней = БНФООбщегоНазначенияНФОКлиентСервер.РазностьДат(УсловиеЗаймаОбъект.ДатаНачала, УсловиеЗаймаОбъект.ДатаОкончания,
				ПредопределенноеЗначение("Перечисление.Периодичность.День"));
				
			УсловиеЗаймаОбъект.АЭ_ДокументОснование	= ЗаймПредоставленныйСсылка;
			УсловиеЗаймаОбъект.Записать();
		КонецЕсли;
		
		//ДОГОВОР КОНТРАГЕНТА
		СпрДоговор = УсловиеЗайма.ДоговорКонтрагента.ПолучитьОбъект();
		СпрДоговор.Дата = НачалоДня(Строка.ДатаВыдачи);
		СпрДоговор.Записать();

		ЗаймПредоставленный.Записать(РежимЗаписиДокумента.Запись);		
		
		//ГРАФИК ЗАЙМА
		Запрос1.УстановитьПараметр("Займ", ЗаймПредоставленныйСсылка);
		Запрос1.УстановитьПараметр("Контрагент", УсловиеЗайма.Контрагент);
		Выборка = Запрос1.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ГрафикЗаймаПредоставленного = Выборка.Ссылка.ПолучитьОбъект();
			ГрафикЗаймаПредоставленногоСсылка = ГрафикЗаймаПредоставленного.Ссылка;
		Иначе
			ГрафикЗаймаПредоставленногоСсылка = Документы.АЭ_ГрафикПлатежейЗаймаПредоставленного.ПолучитьСсылку(Новый УникальныйИдентификатор);
			
			ГрафикЗаймаПредоставленного = Документы.АЭ_ГрафикПлатежейЗаймаПредоставленного.СоздатьДокумент();
			ГрафикЗаймаПредоставленного.УстановитьСсылкуНового(ГрафикЗаймаПредоставленногоСсылка);
			
			ГрафикЗаймаПредоставленного.Займ = ЗаймПредоставленныйСсылка;
			ГрафикЗаймаПредоставленного.Контрагент = УсловиеЗайма.Контрагент;
			ГрафикЗаймаПредоставленного.Дата = Строка.ДатаВыдачи;
		КонецЕсли;
		
		ГрафикЗаймаПредоставленного.НомерГрафика = МассивПлатежей[0].НомерИзменения;
		ГрафикЗаймаПредоставленного.ДатаГрафика = Строка.ДатаВыдачи;
		
		ГрафикЗаймаПредоставленного.ПодразделениеОрганизации = УсловиеЗайма.АЭ_ПодразделениеОрганизации;
		ГрафикЗаймаПредоставленного.Организация = Справочники.Организации.НайтиПоКоду("000000001");
		ГрафикЗаймаПредоставленного.Комментарий = "загружен из NAV";
		
		ОстатокОсновногоДолга = Строка.СуммаЗайма;
		ГрафикЗаймаПредоставленного.ГрафикПлатежей.Очистить();
		Для Каждого стрМассиваПлатежей Из МассивПлатежей Цикл
			стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежей.Добавить();
			стрГрафика.ДатаПлатежа = стрМассиваПлатежей.ДатаПлатежа;
			стрГрафика.СуммаПлатежа = стрМассиваПлатежей.СуммаПлатежа;
			стрГрафика.ОстатокОсновногоДолгаНаНачало = ОстатокОсновногоДолга;
			стрГрафика.ПогашениеОсновногоДолга = стрМассиваПлатежей.СуммаОсновногоДолга;
			стрГрафика.ПогашениеПроцентов = стрМассиваПлатежей.СуммаПроцентов;
			ОстатокОсновногоДолга = ОстатокОсновногоДолга - стрМассиваПлатежей.СуммаОсновногоДолга;
			стрГрафика.ОстатокОсновногоДолга = ОстатокОсновногоДолга;			
		КонецЦикла;
		
		ГрафикЗаймаПредоставленного.ГрафикПлатежейОсновногоДолга.Очистить();
		ОстатокОсновногоДолга = Строка.СуммаЗайма;
		стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейОсновногоДолга.Добавить();
		стрГрафика.ДатаПлатежа = Строка.ДатаВыдачи;
		стрГрафика.УвеличениеОсновногоДолга = ОстатокОсновногоДолга;
		стрГрафика.ОстатокОсновногоДолга = ОстатокОсновногоДолга;
		Для Каждого стрМассиваПлатежей Из МассивПлатежей Цикл
			стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейОсновногоДолга.Добавить();
			стрГрафика.ДатаПлатежа = стрМассиваПлатежей.ДатаПлатежа;
			стрГрафика.ОстатокОсновногоДолгаНаНачало = ОстатокОсновногоДолга;
			стрГрафика.ПогашениеОсновногоДолга = стрМассиваПлатежей.СуммаОсновногоДолга;
			
			ОстатокОсновногоДолга = ОстатокОсновногоДолга - стрМассиваПлатежей.СуммаОсновногоДолга;
			стрГрафика.ОстатокОсновногоДолга = ОстатокОсновногоДолга;
		КонецЦикла;

		//Основной долг
		ГрафикЗаймаПредоставленного.ГрафикПлатежейДетальный.Очистить();
		стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.ОсновнойДолг;
		стрГрафика.ДатаПлатежа = МассивПлатежей[0].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[0].ДатаВыдачи + 60*60*24);
		стрГрафика.ДатаОкончания = Конецдня(МассивПлатежей[0].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[0].СуммаОсновногоДолга;
		
		//Проценты
		стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.Проценты;
		стрГрафика.ДатаПлатежа = МассивПлатежей[0].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[0].ДатаВыдачи + 60*60*24);
		стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[0].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[0].СуммаПроцентов;
				
		Для Индекс = 1 По МассивПлатежей.Количество() - 2 Цикл
			//Основной долг
			стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейДетальный.Добавить();
			стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.ОсновнойДолг;
			стрГрафика.ДатаПлатежа = МассивПлатежей[Индекс].ДатаПлатежа;
			стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[Индекс - 1].ДатаПлатежа + 60*60*24);
			стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[Индекс].ДатаПлатежа);
			стрГрафика.СуммаПлатежа = МассивПлатежей[Индекс].СуммаОсновногоДолга;
						
			//Проценты
			стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейДетальный.Добавить();
			стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.Проценты;
			стрГрафика.ДатаПлатежа = МассивПлатежей[Индекс].ДатаПлатежа;
			стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[Индекс - 1].ДатаПлатежа + 60*60*24);
			стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[Индекс].ДатаПлатежа);
			стрГрафика.СуммаПлатежа = МассивПлатежей[Индекс].СуммаПроцентов;			
		КонецЦикла;
		
		//Основной долг
		стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.ОсновнойДолг;
		стрГрафика.ДатаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].СуммаОсновногоДолга;
		
		//Проценты
		стрГрафика = ГрафикЗаймаПредоставленного.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.Проценты;
		стрГрафика.ДатаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].СуммаПроцентов;
		
		АЭ_ГрафикиПлатежей.РассчитатьПолноюСтоимостьЗаймаПоОбъекту(ГрафикЗаймаПредоставленного, Ложь);
		АЭ_ГрафикиПлатежей.РассчитатьАмортизированнуюСтоимостьПоОбъекту(ГрафикЗаймаПредоставленного, Ложь);
		ЗаймПредоставленный.ГрафикПлатежейЗайма = ГрафикЗаймаПредоставленногоСсылка;
				
		Для Каждого Строка Из ГрафикЗаймаПредоставленного.ДенежныйПотокАмортизируемойСтоимости Цикл
			//Загрузка "% доход по ЭСП"
			Для Каждого СтрМассив Из МассивПлатежей Цикл
				Если Строка.ДатаПлатежа = СтрМассив.ДатаПлатежа Тогда
					Строка.ПроцентныйДоходРасходПоЭСП = СтрМассив.КорректировкаПроцентов;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ГрафикЗаймаПредоставленного.Записать(РежимЗаписиДокумента.Проведение);	
		ЗаймПредоставленный.Записать(РежимЗаписиДокумента.Проведение);
		ЗаполнитьВыдачуЗайма(ЗаймПредоставленный.Ссылка, Строка.ДатаВыдачи, Строка.СуммаЗайма);		
	КонецЦикла;	

КонецПроцедуры

Процедура ПересчетГрафиковЗаймовЗаДень(ДатаВыгрузки, ВыполнятьВТранзакции = Ложь, ТолькоНовые = Ложь, ТекстОшибки = "", Задание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	База = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ПересчетГрафиковЗаймовЗаДень"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки));
	КонецПопытки; 
	
	Command.CommandText = "SELECT
	|	contrChanges.[Contract No_] AS ContractNo,
	|	pSchedule.[Installment Date] AS InstallmentDate,
	|	pSchedule.[Installment Amount incl_ SP] AS InstallmentAmount,
	|	pSchedule.[Principal - Client] AS PrincipalClient,
	|	pSchedule.[Interest - Client] AS InterestClient,
	|	pSchedule.[Service Package incl_ VAT] AS ServicePackagePСlient,
	|	pSchedule.[Interest - CBR] AS InterestCBR	
	|FROM
	|	["+База+"].dbo.["+Фирма+"$Contract Changes 1C] AS contrChanges
	|		INNER JOIN ["+База+"].dbo.["+Фирма+"$Payment Schedule] AS pSchedule
	|			on contrChanges.[Contract No_] = pSchedule.[Contract No_]
	|			and pSchedule.[Installment No_] <> 0
	|			and pSchedule.[Installment Amount excl_ SP] <> 0
	|WHERE 
	|	contrChanges.[Modify Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|	contrChanges.[Modify Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|AND
	|	contrChanges.[Operation Type] <> 9
	|";
	
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
			RecordSet.Close();
			Возврат;
		КонецЕсли;
		
		RecordSet.MoveFirst();
		ТЗГрафиковЗаймов = Новый ТаблицаЗначений;
		ТЗГрафиковЗаймов.Колонки.Добавить("НомерКонтракта");
		ТЗГрафиковЗаймов.Колонки.Добавить("ДатаПлатежа");
		ТЗГрафиковЗаймов.Колонки.Добавить("СуммаПлатежа");
		ТЗГрафиковЗаймов.Колонки.Добавить("СуммаОсновногоДолга");
		ТЗГрафиковЗаймов.Колонки.Добавить("СуммаПроцентов");
		ТЗГрафиковЗаймов.Колонки.Добавить("КорректировкаПроцентов");
		ТЗГрафиковЗаймов.Колонки.Добавить("НомерИзменения");
		ТЗГрафиковЗаймов.Колонки.Добавить("СтатусКонтракта");

		Пока НЕ RecordSet.EOF() Цикл
			Стр = ТЗГрафиковЗаймов.Добавить();
			Стр.НомерКонтракта = Строка(RecordSet.Fields("ContractNo").Value);
			Стр.ДатаПлатежа = Дата(RecordSet.Fields("InstallmentDate").Value);
			Стр.СуммаПлатежа = Число(RecordSet.Fields("InstallmentAmount").Value);
			Стр.СуммаОсновногоДолга = Число(RecordSet.Fields("PrincipalClient").Value);
			Стр.СуммаПроцентов = Число(RecordSet.Fields("InterestClient").Value) + Число(RecordSet.Fields("ServicePackagePСlient").Value);
			Стр.КорректировкаПроцентов = Число(RecordSet.Fields("InterestCBR").Value);
			Стр.НомерИзменения = Число(RecordSet.Fields("ChangeNo").Value);

			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ПересчетГрафиковЗаймовЗаДень "+ОписаниеОшибки()+" дата "+Строка(ДатаВыгрузки));
		RecordSet.Close();
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭ_ГрафикПлатежейЗаймаПредоставленного.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_ГрафикПлатежейЗаймаПредоставленного КАК АЭ_ГрафикПлатежейЗаймаПредоставленного
	|ГДЕ
	|	АЭ_ГрафикПлатежейЗаймаПредоставленного.Займ = &Займ
	|	АЭ_ГрафикПлатежейЗаймаПредоставленного.Проведен
	|	И АЭ_ГрафикПлатежейЗаймаПредоставленного.Контрагент = &Контрагент";

	ТЗЗаймов = ТЗГрафиковЗаймов.Скопировать();
	ТЗЗаймов.Свернуть("НомерКонтракта");
	Для Каждого СтрКонтракт Из ТЗЗаймов Цикл
		Займ = НайтиЗайм(СтрКонтракт.НомерКонтракта);
		Если Займ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Займ", Займ);
		Запрос.УстановитьПараметр("Контрагент", Займ.Контрагент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;
		
		ГрафикЗаймов = Выборка.Ссылка.ПолучитьОбъект();		
		МассивПлатежей = ТЗГрафиковЗаймов.НайтиСтроки(Новый Структура("НомерКонтракта", СтрКонтракт.НомерКонтракта));		
		ОстатокОсновногоДолга = Займ.СуммаЗайма;
		
		ГрафикЗаймов.ГрафикПлатежей.Очистить();
		Для Каждого стрМассиваПлатежей Из МассивПлатежей Цикл
			стрГрафика = ГрафикЗаймов.ГрафикПлатежей.Добавить();
			стрГрафика.ДатаПлатежа = стрМассиваПлатежей.ДатаПлатежа;
			стрГрафика.СуммаПлатежа = стрМассиваПлатежей.СуммаПлатежа;
			стрГрафика.ОстатокОсновногоДолгаНаНачало = ОстатокОсновногоДолга;
			стрГрафика.ПогашениеОсновногоДолга = стрМассиваПлатежей.СуммаОсновногоДолга;
			стрГрафика.ПогашениеПроцентов = стрМассиваПлатежей.СуммаПроцентов;
			ОстатокОсновногоДолга = ОстатокОсновногоДолга - стрМассиваПлатежей.СуммаОсновногоДолга;
			стрГрафика.ОстатокОсновногоДолга = ОстатокОсновногоДолга;			
		КонецЦикла;
		
		ГрафикЗаймов.ГрафикПлатежейОсновногоДолга.Очистить();
		ОстатокОсновногоДолга = Займ.СуммаЗайма;
		стрГрафика = ГрафикЗаймов.ГрафикПлатежейОсновногоДолга.Добавить();
		стрГрафика.ДатаПлатежа = Займ.ДатаВыдачи;
		стрГрафика.УвеличениеОсновногоДолга = ОстатокОсновногоДолга;
		стрГрафика.ОстатокОсновногоДолга = ОстатокОсновногоДолга;
		Для Каждого стрМассиваПлатежей Из МассивПлатежей Цикл
			стрГрафика = ГрафикЗаймов.ГрафикПлатежейОсновногоДолга.Добавить();
			стрГрафика.ДатаПлатежа = стрМассиваПлатежей.ДатаПлатежа;
			стрГрафика.ОстатокОсновногоДолгаНаНачало = ОстатокОсновногоДолга;
			стрГрафика.ПогашениеОсновногоДолга = стрМассиваПлатежей.СуммаОсновногоДолга;
			
			ОстатокОсновногоДолга = ОстатокОсновногоДолга - стрМассиваПлатежей.СуммаОсновногоДолга;
			стрГрафика.ОстатокОсновногоДолга = ОстатокОсновногоДолга;
		КонецЦикла;

		//Основной долг
		ГрафикЗаймов.ГрафикПлатежейДетальный.Очистить();
		стрГрафика = ГрафикЗаймов.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.ОсновнойДолг;
		стрГрафика.ДатаПлатежа = МассивПлатежей[0].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[0].ДатаВыдачи + 60*60*24);
		стрГрафика.ДатаОкончания = Конецдня(МассивПлатежей[0].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[0].СуммаОсновногоДолга;
		
		//Проценты
		стрГрафика = ГрафикЗаймов.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.Проценты;
		стрГрафика.ДатаПлатежа = МассивПлатежей[0].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[0].ДатаВыдачи + 60*60*24);
		стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[0].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[0].СуммаПроцентов;
				
		Для Индекс = 1 По МассивПлатежей.Количество() - 2 Цикл
			//Основной долг
			стрГрафика = ГрафикЗаймов.ГрафикПлатежейДетальный.Добавить();
			стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.ОсновнойДолг;
			стрГрафика.ДатаПлатежа = МассивПлатежей[Индекс].ДатаПлатежа;
			стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[Индекс - 1].ДатаПлатежа + 60*60*24);
			стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[Индекс].ДатаПлатежа);
			стрГрафика.СуммаПлатежа = МассивПлатежей[Индекс].СуммаОсновногоДолга;
						
			//Проценты
			стрГрафика = ГрафикЗаймов.ГрафикПлатежейДетальный.Добавить();
			стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.Проценты;
			стрГрафика.ДатаПлатежа = МассивПлатежей[Индекс].ДатаПлатежа;
			стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[Индекс - 1].ДатаПлатежа + 60*60*24);
			стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[Индекс].ДатаПлатежа);
			стрГрафика.СуммаПлатежа = МассивПлатежей[Индекс].СуммаПроцентов;			
		КонецЦикла;
		
		//Основной долг
		стрГрафика = ГрафикЗаймов.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.ОсновнойДолг;
		стрГрафика.ДатаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].СуммаОсновногоДолга;
		
		//Проценты
		стрГрафика = ГрафикЗаймов.ГрафикПлатежейДетальный.Добавить();
		стрГрафика.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.Проценты;
		стрГрафика.ДатаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа;
		стрГрафика.ДатаНачала = НачалоДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.ДатаОкончания = КонецДня(МассивПлатежей[МассивПлатежей.Количество()-1].ДатаПлатежа);
		стрГрафика.СуммаПлатежа = МассивПлатежей[МассивПлатежей.Количество()-1].СуммаПроцентов;
		
		АЭ_ГрафикиПлатежей.РассчитатьПолноюСтоимостьЗаймаПоОбъекту(ГрафикЗаймов, Ложь);
		АЭ_ГрафикиПлатежей.РассчитатьАмортизированнуюСтоимостьПоОбъекту(ГрафикЗаймов, Ложь);
			
		Для Каждого СтрокаЭСП Из ГрафикЗаймов.ДенежныйПотокАмортизируемойСтоимости Цикл
			//Загрузка "% доход по ЭСП"
			Для Каждого СтрМассив Из МассивПлатежей Цикл
				Если СтрокаЭСП.ДатаПлатежа = СтрМассив.ДатаПлатежа Тогда
					СтрокаЭСП.ПроцентныйДоходРасходПоЭСП = СтрМассив.КорректировкаПроцентов;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ГрафикЗаймов.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузкаПлатежейЗаДень(ДатаВыгрузки, ВыполнятьВТранзакции = Ложь, ТолькоНовые = Ложь, ТекстОшибки = "", Задание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	База = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ЗагрузкаПлатежейЗаДень "+ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	Command.CommandText = "SELECT
	|	[Contract No_] AS ContractNo,
	|	[Installment No_] AS InstallMentNo,
	|	[Installment Date] AS PaymentDatePlan,
	|	[Last Payment Date] AS PaymentDateFact,
	|	[Paid Principal] AS SumBase,
	|	[Paid Interest] AS SumProcent,
	|	[Paid SP Amount] AS SumService,
	|	[Paid Running Interest] AS PaidRunningInterest
	|FROM
	|	["+База+"].dbo.["+Фирма+"$Payment Schedule 1C]
	|WHERE
	| 	   [Last Payment Date] >= '"+СтрЗаменить(СтрЗаменить(Год(НачалоМесяца(ДатаВыгрузки)),Символы.НПП,""),",","")+"-"+Строка(Месяц(НачалоМесяца(ДатаВыгрузки)))+"-"+Строка(День(НачалоМесяца(ДатаВыгрузки)))+" 00:00:00'
	|  and [Last Payment Date] <= '"+СтрЗаменить(СтрЗаменить(Год(КонецМесяца(ДатаВыгрузки)),Символы.НПП,""),",","")+"-"+Строка(Месяц(КонецМесяца(ДатаВыгрузки)))+"-"+Строка(День(КонецМесяца(ДатаВыгрузки)))+" 23:59:59'
	|";
	
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			RecordSet.Close();
			Возврат;
		КонецЕсли;
		
		RecordSet.MoveFirst();
		ТЗПлатежей = Новый ТаблицаЗначений;
		ТЗПлатежей.Колонки.Добавить("НомерКонтракта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
		ТЗПлатежей.Колонки.Добавить("НомерПлатежа", Новый ОписаниеТипов("Число"));
		ТЗПлатежей.Колонки.Добавить("ДатаПлатежаПлан", Новый ОписаниеТипов("Дата"));
		ТЗПлатежей.Колонки.Добавить("ДатаПлатежаФакт", Новый ОписаниеТипов("Дата"));
		ТЗПлатежей.Колонки.Добавить("ПлатежПоОсновномуДолгу", Новый ОписаниеТипов("Число"));
		ТЗПлатежей.Колонки.Добавить("ПлатежПоПроцентам", Новый ОписаниеТипов("Число"));
		ТЗПлатежей.Колонки.Добавить("ПлатежПоСервисПакету", Новый ОписаниеТипов("Число"));
		ТЗПлатежей.Колонки.Добавить("ПроцентыНаПросроченныйДолг", Новый ОписаниеТипов("Число"));
				
		Пока НЕ RecordSet.EOF() Цикл
			Стр = ТЗПлатежей.Добавить();
			Стр.НомерКонтракта = Строка(RecordSet.Fields("ContractNo").Value);
			Стр.НомерПлатежа = Число(RecordSet.Fields("InstallMentNo").Value);
			Стр.ДатаПлатежаПлан = Дата(RecordSet.Fields("PaymentDatePlan").Value);
			Стр.ДатаПлатежаФакт = Дата(RecordSet.Fields("PaymentDateFact").Value);
			Стр.ПлатежПоОсновномуДолгу = Число(RecordSet.Fields("SumBase").Value);
			Стр.ПлатежПоПроцентам = Число(RecordSet.Fields("SumProcent").Value);
			Стр.ПлатежПоСервисПакету = Число(RecordSet.Fields("SumService").Value);
			Стр.ПроцентыНаПросроченныйДолг = Число(RecordSet.Fields("PaidRunningInterest").Value);
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ЗагрузкаПлатежейЗаДень "+ОписаниеОшибки()+" дата "+Строка(ДатаВыгрузки));
		RecordSet.Close();
		Возврат;
	КонецПопытки;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежиПоЗаймам.НомерКонтракта КАК НомерКонтракта,
	|	ПлатежиПоЗаймам.НомерПлатежа КАК НомерПлатежа,
	|	ПлатежиПоЗаймам.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
	|	ПлатежиПоЗаймам.ДатаПлатежаФакт КАК ДатаПлатежаФакт,
	|	ПлатежиПоЗаймам.ПлатежПоОсновномуДолгу КАК ПлатежПоОсновномуДолгу,
	|	ПлатежиПоЗаймам.ПлатежПоПроцентам КАК ПлатежПоПроцентам,
	|	ПлатежиПоЗаймам.ПлатежПоСервисПакету КАК ПлатежПоСервисПакету,
	|	ПлатежиПоЗаймам.ПроцентыНаПросроченныйДолг КАК ПлатежПоСервисПакету
	|ПОМЕСТИТЬ ВТ_ПлатежиПоЗаймам
	|ИЗ
	|	&ВТ_ПлатежиПоЗаймам КАК ПлатежиПоЗаймам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПлатежиПоЗаймам.НомерКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АЭ_ЗаймПредоставленный.Ссылка КАК ЗаймПредоставленный,
	|	АЭ_ЗаймПредоставленный.Контрагент КАК Контрагент,
	|	ВТ_ПлатежиПоЗаймам.НомерКонтракта КАК НомерКонтракта,
	|	ВТ_ПлатежиПоЗаймам.НомерПлатежа КАК НомерПлатежа,
	|	ВТ_ПлатежиПоЗаймам.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
	|	ВТ_ПлатежиПоЗаймам.ДатаПлатежаФакт КАК ДатаПлатежаФакт,
	|	ВТ_ПлатежиПоЗаймам.ПлатежПоОсновномуДолгу КАК ПлатежПоОсновномуДолгу,
	|	ВТ_ПлатежиПоЗаймам.ПлатежПоПроцентам КАК ПлатежПоПроцентам,
	|	ВТ_ПлатежиПоЗаймам.ПлатежПоСервисПакету КАК ПлатежПоСервисПакету,
	|	ВТ_ПлатежиПоЗаймам.ПроцентыНаПросроченныйДолг КАК ПлатежПоСервисПакету
	|ИЗ
	|	Документ.АЭ_ЗаймПредоставленный КАК АЭ_ЗаймПредоставленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПлатежиПоЗаймам КАК ВТ_ПлатежиПоЗаймам
	|		ПО (ВТ_ПлатежиПоЗаймам.НомерКонтракта = АЭ_ЗаймПредоставленный.НомерДоговора)
	|			И (НЕ АЭ_ЗаймПредоставленный.ПометкаУдаления)";	
	
	Запрос.УстановитьПараметр("ВТ_ПлатежиПоЗаймам", ТЗПлатежей);
	ЗаймыПоПлатежам = Запрос.Выполнить().Выгрузить();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_ПогашениеПоЗаймамПредоставленным.Займы КАК АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы
	|ГДЕ
	|	НЕ АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы.Ссылка.ПометкаУдаления
	|	И АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы.Займ = &Займ
	|	И АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы.pcru_ex_НомерПлатежа = &НомерПлатежа";
	
	Для Каждого Строка Из ЗаймыПоПлатежам Цикл		
		Запрос.УстановитьПараметр("Займ", Строка.ЗаймПредоставленный);
		Запрос.УстановитьПараметр("НомерПлатежа", Строка.НомерПлатежа);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументПлатежей_Объект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого СтрокаЗайма Из ДокументПлатежей_Объект.Займы Цикл
				Если СтрокаЗайма.Займ = Строка.ЗаймПредоставленный И СтрокаЗайма.pcru_ex_НомерПлатежа = Строка.НомерПлатежа Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы.pcru_ex_НомерПлатежа = &НомерПлатежа", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы.Займ = &Займ", "АЭ_ПогашениеПоЗаймамПредоставленнымЗаймы.Ссылка.Дата = &ДатаПлатежаФакт");
			Запрос.УстановитьПараметр("ДатаПлатежаФакт", Строка.ДатаПлатежаФакт);
			Выьборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументПлатежей_Объект = Выборка.Ссылка.ПолучитьОбъект();
			Иначе
				ДокументПлатежей_Объект = Документы.АЭ_ПогашениеПоЗаймамПредоставленным.СоздатьДокумент();
				ДокументПлатежей_Объект.Дата = Строка.ДатаПлатежаФакт;
				ДокументПлатежей_Объект.Организация = Справочники.Организации.НайтиПоКоду("000000001");
				ДокументПлатежей_Объект.ВидОперации = Перечисления.АЭ_ВидыОперацийПогашениеПоЗаймамПредоставленным.ПлановоеПогашение;
				ДокументПлатежей_Объект.ОтражатьОплатуТекущимДокументом = Истина;
				ДокументПлатежей_Объект.СтатусОплаты = Перечисления.АЭ_СтатусыОплатыЗаймов.Оплачено;
				ДокументПлатежей_Объект.Комментарий = "Загружен из НАВ";
				ДокументПлатежей_Объект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("USER");
			КонецЕсли;
			СтрокаЗайма = ДокументПлатежей_Объект.Займы.Добавить();
		КонецЕсли;
		
		СтрокаЗайма.Займ = Строка.ЗаймПредоставленный;
		СтрокаЗайма.Контрагент = Строка.Контрагент;
		СтрокаЗайма.КратностьВзаиморасчетов = 1;
		СтрокаЗайма.КурсВзаиморасчетов = 1;
		СтрокаЗайма.Оплачено = Истина;
		СтрокаЗайма.ДатаОплаты = Строка.ДатаПлатежаФакт;
		
		СтрокаЗайма.ТекущаяЗадолженностьОсновнойДолг = Строка.ПлатежПоОсновномуДолгу;
		СтрокаЗайма.ТекущаяЗадолженностьПроценты = Строка.ПлатежПоПроцентам + Строка.ПлатежПоСервисПакету + Строка.ПроцентыНаПросроченныйДолг;
		
		СтрокаЗайма.СуммаПлатежа = СтрокаЗайма.ТекущаяЗадолженностьОсновнойДолг + СтрокаЗайма.ТекущаяЗадолженностьПроценты;
		СтрокаЗайма.ТекущаяЗадолженностьВсего = СтрокаЗайма.СуммаПлатежа;
				
		СтрокаЗайма.ПросроченнаяЗадолженностьВсего = СтрокаЗайма.ТекущаяЗадолженностьВсего;
		СтрокаЗайма.ПросроченнаяЗадолженностьОсновнойДолг = СтрокаЗайма.ТекущаяЗадолженностьОсновнойДолг;
		СтрокаЗайма.ПросроченнаяЗадолженностьПроценты = СтрокаЗайма.ТекущаяЗадолженностьПроценты;
		
		СтрокаЗайма.ОплатаВсего = СтрокаЗайма.ТекущаяЗадолженностьВсего;
		СтрокаЗайма.ОплатаОсновнойДолг = СтрокаЗайма.ТекущаяЗадолженностьОсновнойДолг;
		СтрокаЗайма.ОплатаПроценты = СтрокаЗайма.ТекущаяЗадолженностьПроценты;
		
		СтрокаЗайма.ВидПогашения = Перечисления.АЭ_ВидыПогашенийЗаймов.ПлановоеПогашение;		
		СтрокаЗайма.pcru_ex_НомерПлатежа = Строка.НомерПлатежа;
		
		ДокументПлатежей_Объект.Записать(РежимЗаписиДокумента.Проведение);	
	КонецЦикла;	

КонецПроцедуры

Процедура ПриостановкаНачисленийПоЗаймамЗаДень(ДатаВыгрузки, ВыполнятьВТранзакции = Ложь, ТолькоНовые = Ложь, ТекстОшибки = "", Задание = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	База = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ПриостановкаНачисленийПоЗаймамЗаДень "+ОписаниеОшибки()+" дата "+Строка(ДатаВыгрузки));
		Возврат;
	КонецПопытки; 
	
	Command.CommandText = "SELECT
	|	contrChanges.[Contract No_] AS ContractNo,
	|	contrChanges.[Legal Procceding Date] AS LegalProccedingDate
	|FROM
	|	["+База+"].dbo.["+Фирма+"$Contract Changes 1C] AS contrChanges
	|WHERE 
	|	contrChanges.[Modify Date] >= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|	contrChanges.[Modify Date] <= '"+СтрЗаменить(СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,""),",","")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	|AND
	|	contrChanges.[Operation Type] = 9
	|";
		
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			pcru_ex_Почта.Сообщить_об_ошибке("ПриостановкаНачисленийПоЗаймамЗаДень "+ОписаниеОшибки()+" дата "+Строка(ДатаВыгрузки));
			RecordSet.Close();
			Возврат;
		КонецЕсли;
		
		RecordSet.MoveFirst();
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("НомерКонтракта");
		ТЗ.Колонки.Добавить("ДатаПриостановки");
				
		Пока НЕ RecordSet.EOF() Цикл
			Стр = ТЗ.Добавить();
			Стр.НомерКонтракта = Строка(RecordSet.Fields("ContractNo").Value);
			Стр.ДатаПриостановки = Дата(RecordSet.Fields("LegalProccedingDate").Value);
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ПриостановкаНачисленийПоЗаймамЗаДень "+ОписаниеОшибки()+" дата "+Строка(ДатаВыгрузки));
		RecordSet.Close();
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭ_ПриостановкаНачисленийПоЗаймамПредоставленным.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_ПриостановкаНачисленийПоЗаймамПредоставленным КАК АЭ_ПриостановкаНачисленийПоЗаймамПредоставленным
	|ГДЕ
	|	НЕ АЭ_ПриостановкаНачисленийПоЗаймамПредоставленным.ПометкаУдаления
	|	И АЭ_ПриостановкаНачисленийПоЗаймамПредоставленным.ВидОперации = ЗНАЧЕНИЕ(Перечисление.АЭ_ВидыПриостановкиНачислений.ПриостановитьНачисление)
	|	И АЭ_ПриостановкаНачисленийПоЗаймамПредоставленным.ДатаНачала = &ДатаНачала";

	ТЗДат = ТЗ.Скопировать();	
	ТЗДат.Свернуть("ДатаПриостановки");
	Для Каждого СтрокаПриостановки Из ТЗДат Цикл
		Запрос.УстановитьПараметр("ДатаНачала", СтрокаПриостановки.ДатаПриостановки);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументПриостановки = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументПриостановки = Документы.АЭ_ПриостановкаНачисленийПоЗаймамПредоставленным.СоздатьДокумент();
			ДокументПриостановки.Дата = СтрокаПриостановки.ДатаПриостановки;		
			ДокументПриостановки.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("USER");
			ДокументПриостановки.Организация = Справочники.Организации.НайтиПоКоду("000000001");
			ДокументПриостановки.Комментарий = "Загружен из NAV";
			ДокументПриостановки.ВидОперации = Перечисления.АЭ_ВидыПриостановкиНачислений.ПриостановитьНачисление;
			ДокументПриостановки.ДатаНачала = СтрокаПриостановки.ДатаПриостановки;
			
			ДокументПриостановки.Проценты = Истина;
			ДокументПриостановки.Пени = Истина;
			ДокументПриостановки.Штрафы = Истина;
			ДокументПриостановки.Комиссии = Истина;
			ДокументПриостановки.ЧленскиеВзносы = Истина;
			ДокументПриостановки.ВсеНачисления = Истина;
			ДокументПриостановки.МногострочныйРежим = Истина;
		КонецЕсли;
		
		Массив = ТЗ.НайтиСтроки(Новый Структура("ДатаПриостановки", СтрокаПриостановки.ДатаПриостановки));
		Для Каждого Строка Из Массив Цикл
			Займ = НайтиЗайм(Строка.НомерКонтракта);
			ЕстьЗайм = Ложь;
			Для Каждого Строка Из ДокументПриостановки.Займы Цикл
				Если Строка.Займ = Займ Тогда
					ДокументПриостановкиЗаймов_СтрокаЗайма = Строка;
					ЕстьЗайм = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если Не ЕстьЗайм Тогда
				ДокументПриостановкиЗаймов_СтрокаЗайма = ДокументПриостановки.Займы.Добавить();	
			КонецЕсли;
			
			ДокументПриостановкиЗаймов_СтрокаЗайма.Займ = Займ;
			ДокументПриостановкиЗаймов_СтрокаЗайма.Контрагент = Займ.Контрагент;
		КонецЦикла;
		
		ДокументПриостановки.Записать(РежимЗаписиДокумента.Проведение);		
	КонецЦикла;

КонецПроцедуры

Процедура ПересчетПроцентовПоЗаймамЗаДень(ДатаЗайма, ДатаВыгрузки, ВыполнятьВТранзакции = Ложь, ТолькоНовые = Ложь, ТекстОшибки = "", Задание = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	База = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ПересчетПроцентовПоЗаймамЗаДень "+ОписаниеОшибки()+" дата займа "+Строка(ДатаЗайма) + " дата пересчета " + Строка(ДатаВыгрузки));
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаЗайма));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаЗайма));
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	АЭ_ЗаймПредоставленный.Ссылка КАК Ссылка,
	|	АЭ_ЗаймПредоставленный.Комментарий КАК Комментарий,
	|	АЭ_ЗаймПредоставленный.НомерДоговора КАК НомерДоговора,
	|	АЭ_ЗаймПредоставленный.Организация КАК Организация,
	|	АЭ_ЗаймПредоставленный.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.АЭ_ЗаймПредоставленный КАК АЭ_ЗаймПредоставленный
	|ГДЕ
	|	НЕ АЭ_ЗаймПредоставленный.ПометкаУдаления
	|	И АЭ_ЗаймПредоставленный.Дата >= &ДатаНачала
	|	И АЭ_ЗаймПредоставленный.Дата <= &ДатаОкончания";
	
	ТЗЗаймов = Запрос.Выполнить().Выгрузить();
	
	//Ищем или создаем документ корректировки
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭ_КорректировкаВзаиморасчетовПоЗаймамПредоставленным.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_КорректировкаВзаиморасчетовПоЗаймамПредоставленным КАК АЭ_КорректировкаВзаиморасчетовПоЗаймамПредоставленным
	|ГДЕ
	|	НЕ АЭ_КорректировкаВзаиморасчетовПоЗаймамПредоставленным.Ссылка.ПометкаУдаления
	|	И АЭ_КорректировкаВзаиморасчетовПоЗаймамПредоставленным.Дата = &Дата";
	
	Запрос.УстановитьПараметр("Дата", ДатаВыгрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокументНачисленияПроцентов = Выборка.Ссылка.ПолучитьОбъект();
		ДокументНачисленияПроцентов.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		ДокументНачисленияПроцентов = Документы.АЭ_КорректировкаВзаиморасчетовПоЗаймамПредоставленным.СоздатьДокумент();
		ДокументНачисленияПроцентов.Организация = Справочники.Организации.НайтиПоКоду("000000001");
		ДокументНачисленияПроцентов.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("USER");
		ДокументНачисленияПроцентов.Комментарий = "Наичсление процентов по займам из NAV";
		ДокументНачисленияПроцентов.Дата = ДатаВыгрузки;		
		ДокументНачисленияПроцентов.НачисленияПроцентовКомиссий = Истина;
		ДокументНачисленияПроцентов.ОтражатьПоСпециальнымРегистрам = Истина;		
	КонецЕсли;
	
	Для Каждого Строка Из ТЗЗаймов Цикл
		Command.CommandText = 
		"SELECT 
		|	payments.[Contract No_]
		|	, Sum(payments.[Interest - Local]) AS InterestLocal
		|FROM ["+База+"].dbo.["+Фирма+"$Payment Schedule] as payments
		|LEFT JOIN [PROFICREDIT].dbo.[Proficredit X$Contract Changes 1C] as contrChange
		|	On contrChange.[Operation Type] = 9
		|	and contrChange.[Contract No_] = payments.[Contract No_]
		|WHERE payments.[Contract No_] = '" + СокрЛП(Строка.НомерДоговора) + "'
		|  and [Installment Date] >= '"+СтрЗаменить(СтрЗаменить(Год(НачалоМесяца(ДатаВыгрузки)),Символы.НПП,""),",","")+"-"+Строка(Месяц(НачалоМесяца(ДатаВыгрузки)))+"-"+Строка(День(НачалоМесяца(ДатаВыгрузки)))+" 00:00:00'
		|  and [Installment Date] <= '"+СтрЗаменить(СтрЗаменить(Год(КонецМесяца(ДатаВыгрузки)),Символы.НПП,""),",","")+"-"+Строка(Месяц(КонецМесяца(ДатаВыгрузки)))+"-"+Строка(День(КонецМесяца(ДатаВыгрузки)))+" 23:59:59'
		|  and payments.[Installment Date] <= contrChange.[Legal Procceding Date]
		|GROUP BY
		|	payments.[Contract No_]";
		
		СумммаПроцентовПоЗайму = 0;
		Попытка 
			RecordSet = Command.Execute();
			Если RecordSet.EOF() И RecordSet.BOF() Тогда
				//Данных в НАВ нет
				Продолжить;
			КонецЕсли;
			
			RecordSet.MoveFirst();			
			Пока НЕ RecordSet.EOF() Цикл
				СумммаПроцентовПоЗайму = Число(RecordSet.Fields("InterestLocal").Value);
				RecordSet.MoveNext(); 
			КонецЦикла;
			RecordSet.Close();
		Исключение
			Продолжить;;
		КонецПопытки;

		Если СумммаПроцентовПоЗайму = 0 Тогда
			Продолжить;
		КонецЕсли;

		ЕстьСтрокаЗайма = Ложь;
		Для Каждого СтрокаДок Из ДокументНачисленияПроцентов.ВзаиморасчетыПоГрафикуЗаймов Цикл
			Если СтрокаДок.Займ = Строка.Ссылка Тогда
				СтрокаПроцентов = СтрокаДок;
				ЕстьСтрокаЗайма = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьСтрокаЗайма Тогда
			СтрокаПроцентов = ДокументНачисленияПроцентов.ВзаиморасчетыПоГрафикуЗаймов.Добавить();			
			СтрокаПроцентов.Контрагент = Строка.Контрагент;
			СтрокаПроцентов.Займ = Строка.Ссылка;
			СтрокаПроцентов.Период = ДатаВыгрузки;
			СтрокаПроцентов.ДатаПлатежа = ДатаВыгрузки;
			СтрокаПроцентов.ВидНачисления = Справочники.АЭ_ВидыНачисленийПоЗаймам.Проценты;			
		КонецЕсли;
			
		СтрокаПроцентов.СуммаПриход = СумммаПроцентовПоЗайму;		
	КонецЦикла;
	
	ДокументНачисленияПроцентов.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры

Функция ПолучитьДатуОкончанияПлатежа(Массив)
	Результат = Массив[0].ДатаПлатежа;
	Для Каждого Строка Из Массив Цикл
		Если Строка.ДатаПлатежа > Результат Тогда
			Результат = Строка.ДатаПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьМассивДатПлатежей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	База = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке("ПолучитьМассивДатПлатежей: Ошибка подключения.");RecordSet.Close();
		Возврат Неопределено;
	КонецПопытки; 
	
	Command.CommandText = "SELECT
	|	[Last Payment Date] AS PaymentDateFact
	|FROM
	|	["+База+"].dbo.["+Фирма+"$Payment Schedule 1C]
	|ORDER BY
	|	[Last Payment Date]
	|";
	
	Попытка 
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			pcru_ex_Почта.Сообщить_об_ошибке("ПолучитьМассивДатПлатежей: По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат Неопределено;
		КонецЕсли;
		
		RecordSet.MoveFirst();
		МассивДат = Новый Массив;				
		Пока НЕ RecordSet.EOF() Цикл
			ДатаПлатежаФакт = НачалоДня(Дата(RecordSet.Fields("PaymentDateFact").Value));
			Если МассивДат.Найти(ДатаПлатежаФакт) = Неопределено Тогда
				МассивДат.Добавить(ДатаПлатежаФакт);
			КонецЕсли;
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Возврат МассивДат;
	
КонецФункции

Функция ПолучитьМассивДатЗаймов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	АЭ_ЗаймПредоставленный.Дата КАК Дата
	|ИЗ
	|	Документ.АЭ_ЗаймПредоставленный КАК АЭ_ЗаймПредоставленный
	|ГДЕ
	|	АЭ_ЗаймПредоставленный.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	АЭ_ЗаймПредоставленный.Дата";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Сортировать("Дата");
	
	Возврат ТЗ.ВыгрузитьКолонку("Дата");

КонецФункции

Функция НайтиЗайм(НомерКонтракта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭ_ЗаймПредоставленный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_ЗаймПредоставленный КАК АЭ_ЗаймПредоставленный
	|ГДЕ
	|	АЭ_ЗаймПредоставленный.НомерДоговора = &НомерДоговора
	|	И АЭ_ЗаймПредоставленный.Проведен";
	
	Запрос.УстановитьПараметр("НомерДоговора", НомерКонтракта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Займ = Неопределено;
	Если Выборка.Следующий() Тогда
		Займ = Выборка.Ссылка;
	КонецЕсли;

	Возврат Займ;
	
КонецФункции

Процедура ЗаполнитьВыдачуЗайма(Займ, ДатаВыдачи, СуммаЗайма)
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АЭ_ВыдачаПоЗаймамПредоставленным.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АЭ_ВыдачаПоЗаймамПредоставленным КАК АЭ_ВыдачаПоЗаймамПредоставленным
	|ГДЕ
	|	АЭ_ВыдачаПоЗаймамПредоставленным.ВидОперации = ЗНАЧЕНИЕ(Перечисление.АЭ_ВидыОперацийВыдачаПоЗаймамПредоставленным.ВыдачаЗайма)
	|	И НЕ АЭ_ВыдачаПоЗаймамПредоставленным.ПометкаУдаления
	|	И АЭ_ВыдачаПоЗаймамПредоставленным.Дата = &Дата";
	
	Запрос.УстановитьПараметр("ДатаВыдачи", ДатаВыдачи);
	Выборка = Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() Тогда
		ДокументВыдачаЗаймов_Объект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого Строка Из ДокументВыдачаЗаймов_Объект.займы Цикл
			Если Строка.Займ = Займ Тогда
				ДокументВыдачаЗаймов_СтрокаЗайма = Строка;
				Прервать;
			КонецЕсли;
		КОнецЦикла;
	Иначе
		ДокументВыдачаЗаймов_Объект = Документы.АЭ_ВыдачаПоЗаймамПредоставленным.СоздатьДокумент();
		ДокументВыдачаЗаймов_Объект.Организация = Займ.Организация;
		ДокументВыдачаЗаймов_Объект.Дата = ДатаВыдачи;
		ДокументВыдачаЗаймов_Объект.ВидОперации = Перечисления.АЭ_ВидыОперацийВыдачаПоЗаймамПредоставленным.ВыдачаЗайма;
		ДокументВыдачаЗаймов_Объект.Ответственный = Справочники.Пользователи.НайтиПоНаименованию("USER");
		ДокументВыдачаЗаймов_Объект.Комментарий = "Загружен из NAV";
		ДокументВыдачаЗаймов_СтрокаЗайма = ДокументВыдачаЗаймов_Объект.Займы.Добавить();
	КонецЕсли;
	
	ДокументВыдачаЗаймов_СтрокаЗайма.Контрагент = Займ.Контрагент;
	ДокументВыдачаЗаймов_СтрокаЗайма.Займ = Займ;
	ДокументВыдачаЗаймов_СтрокаЗайма.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументВыдачаЗаймов_СтрокаЗайма.КратностьВзаиморасчетов = 1;
	ДокументВыдачаЗаймов_СтрокаЗайма.КурсВзаиморасчетов = 1;
	ДокументВыдачаЗаймов_СтрокаЗайма.Сумма = СуммаЗайма;
	ДокументВыдачаЗаймов_Объект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПРоцедуры

