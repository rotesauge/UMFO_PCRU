// <Описание функции>
//
// Параметры:
//<Параметр1>- <Тип.Вид> - <описание параметра>
// <продолжение описания параметра>
//<Параметр2>- <Тип.Вид> - <описание параметра>
// <продолжение описания параметра>
//
// Возвращаемое значение:
// <Тип.Вид> - <описание возвращаемого значения>
//
Функция ПолучитьБазу()
	//Возврат "%База%"; 
	Возврат "PROFICREDIT"; 
КонецФункции // ()

// <Описание функции>
//
// Параметры:
//<Параметр1>- <Тип.Вид> - <описание параметра>
// <продолжение описания параметра>
//<Параметр2>- <Тип.Вид> - <описание параметра>
// <продолжение описания параметра>
//
// Возвращаемое значение:
// <Тип.Вид> - <описание возвращаемого значения>
//
Функция ПолучитьФирму()
	//Возврат "Proficredit";
	Возврат "Proficredit X";
КонецФункции // ПолучитьФирму()


Функция ПолучитьПараметрыВыборки()
	Возврат " ";
КонецФункции // ПолучитьФирму()

//******************************************************************

Процедура ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База  = ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Если Счетчик > 10 Тогда
			Возврат;
		Иначе 
			ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1)
		КонецЕсли; 
	КонецПопытки; 
	Счетчик = 0;
	//Обнуляем счетчик
	Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) Amount, sum(VAT) VAT
	|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount, VAT.Amount AS VAT
	|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	|[%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	|[%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	|[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	|VAT.[Credit Account No_] = '60309.1' AND VAT.[Debit Account No_] = '48803.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '48803.1') AND (t1.[Credit Account No_] = '71002.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	|(t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|UNION ALL
	|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1, - VAT.Amount AS VAT
	|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	| [%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	| [%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	| [%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	| VAT.[Credit Account No_] = '48803.1' AND VAT.[Debit Account No_] = '60309.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '71002.1') AND (t1.[Credit Account No_] = '48803.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	| (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	|Group by ContractDT, ClientDT";
	Попытка
		RecordSet = Command.Execute();
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Если Счетчик > 10 Тогда
			Возврат;
		Иначе 
			ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	Счетчик = 0;//Обнуляем счетчик
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
		RecordSet.Close();
		Возврат;
	КонецЕсли;
	
	Попытка
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		МассивДанныхКорректировок = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Попытка
				Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
			Исключение
				Стр.Вставить("НДС",0);
			КонецПопытки;
			Если число(RecordSet.Fields("Amount").Value) <0 Тогда
				МассивДанныхКорректировок.Добавить(стр);			
			Иначе 	
				Если число(RecordSet.Fields("Amount").Value)>0 Тогда
					МассивДанных.Добавить(стр);
				КонецЕсли;			
			КонецЕсли;
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Если Счетчик > 10 Тогда
			Возврат;
		Иначе 
			ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1)
		КонецЕсли; 
	КонецПопытки; 
	
	Сумма = 0;
	КоличствоРеализаций = 1;
	Стр = Неопределено; 
	
	ТекстПисьма = "";
	
	#Область РЕализации 
	Для Каждого СтрокаТЧ Из МассивДанных Цикл
		
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		// Определяем общие данные
		СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
		//
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001460");
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
		//++ DEV1C-96
		Если ДатаВыгрузки < Дата(2019,1,1) ТОгда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;	
		//-- DEV1C-96
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		Валюта = Справочники.Валюты.НайтиПоКоду("643");
		Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
		ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
		НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
		//
		БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
		ДерКоммент = "#Service package Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата = &Дата
		|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
		|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
		|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
		
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
		Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТолькоНовые Тогда
				Продолжить;
			КонецЕсли; 
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		иначе
			ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		// Шапка
		//Общие данные
		ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
		ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
		ДокументОбъект.ВидОперации = ВидОперации;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ВалютаДокумента = Валюта;
		ДокументОбъект.КурсВзаиморасчетов= 1;
		ДокументОбъект.КратностьВзаиморасчетов = 1;
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
		ДокументОбъект.СуммаВключаетНДС= Ложь;
		ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._48803_1;
		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._48803_1;
		ДокументОбъект.ДокументБезНДС= Ложь;
		ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
		ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
		ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
		//Данные из массива
		ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
		ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
		ДокументОбъект.Комментарий = ДерКоммент;
		//Табличная часть
		ДокументОбъект.Услуги.Очистить();
		СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
		СтрокаУслуг.Количество = 1;
		СтрокаУслуг.Номенклатура = Номенклатура;
		СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
		СтрокаУслуг.СтавкаНДС= СтавкаНДС;
		СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
		СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
		СтрокаУслуг.СуммаНДС = СтрокаТЧ.НДС;
		СтрокаУслуг.СчетДоходов= СчетДоходов;
		СтрокаУслуг.СчетРасходов = СчетРасходов;
		СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
		СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
		СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
		СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
		СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
		
		Попытка
			НачатьТранзакцию();
			Блокировка = Новый БлокировкаДанных;
			//
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Стр._48803_1);
			//
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232"));
			//
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
			//
			Блокировка.Заблокировать();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
			КоличствоРеализаций = 	КоличствоРеализаций + 1;
			ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций c НДС, Выписана счет-фактура:"+Строка(РЕз.Ссылка)+Символы.ПС;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		КонецПопытки; 	
		
	КонецЦикла;
	#КонецОбласти
	
	//ТекстПисьма = ТекстПисьма + "#############################################################################################################################" + Символы.ПС;
	//ТекстПисьма = ТекстПисьма + "############################################Корректировки####################################################################" + Символы.ПС;
	//ТекстПисьма = ТекстПисьма + "#############################################################################################################################" + Символы.ПС;
	//
	////Корректировки	
	//Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		//Блокировка = Новый БлокировкаДанных;
	//		//ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");
	//		//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		//ЭлементБлокировки.ИсточникДанных = ДокументОбъект;
	//		//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент", "Контрагент");
	//		//Блокировка.Заблокировать();
	//		
	//		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
	//		СуммаДляКорректировкиНДС = - СтрокаТЧ.НДС;
	//		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//		Запрос = Новый Запрос;
	//		
	//		
	//		Запрос.Текст = "ВЫБРАТЬ
	//		|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	//		|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
	//		|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка
	//		|ИЗ
	//		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	//		|		ПО (КорректировкаРеализации.ДокументРеализации = РеализацияТоваровУслугУслуги.Ссылка)
	//		|			И (КорректировкаРеализации.Проведен)
	//		|ГДЕ
	//		|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	//		|	И (ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 16) = ""#Service package""
	//		|			ИЛИ ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 2) = ""#@"")
	//		|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	РеализацияТоваровУслугУслуги.Ссылка";
	//		//
	//		//Запрос.Текст = "ВЫБРАТЬ
	//		//|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	//		//|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
	//		//|	ВЫБОР
	//		//|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
	//		//|			ТОГДА ВложенныйЗапрос.СуммаДокумента
	//		//|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
	//		//|	КОНЕЦ КАК Оплата
	//		//|ИЗ
	//		//|	(ВЫБРАТЬ
	//		//|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	//		//|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	//		//|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
	//		//|	ИЗ
	//		//|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
	//		//|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
	//		//|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
	//		//|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
	//		//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	//		//|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
	//		//|	ГДЕ
	//		//|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
	//		//|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
	//		//|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента
	//		//|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
	//		//|	    И (РеализацияТоваровУслуг.Проведен и Подстрока(РеализацияТоваровУслуг.Комментарий,1,16) = ""#Service package"" или не РеализацияТоваровУслуг.Проведен и Подстрока(РеализацияТоваровУслуг.Комментарий,1,2) =""#@"")
	//		//|	СГРУППИРОВАТЬ ПО
	//		//|		РеализацияТоваровУслуг.Ссылка,
	//		//|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
	//		//|ГДЕ
	//		//|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
	//		//|
	//		//|УПОРЯДОЧИТЬ ПО
	//		//|	ВложенныйЗапрос.Ссылка.МоментВремени";
	//		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
	//		//	Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		Пока Выборка.Следующий() Цикл
	//			НужноРаспровестиОснование = Ложь;
	//			если не Выборка.Ссылка.Проведен тогда 
	//				Об = Выборка.Ссылка.ПолучитьОбъект();
	//				Об.Записать(РежимЗаписиДокумента.Проведение);
	//				СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Выборка.Ссылка);
	//				НужноРаспровестиОснование = Истина;
	//			КонецЕсли;
	//			
	//			//СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
	//			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	//			Ндок.Заполнить(Выборка.Ссылка);
	//			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	//				Если СуммаДляКорректировки >= Выборка.Сумма Тогда
	//					СтрокаУслуги.Сумма      = 0;
	//					СтрокаУслуги.Цена       = 0;
	//					СтрокаУслуги.СуммаНДС   = 0;
	//					СтрокаУслуги.Количество = 1;
	//				Иначе 
	//					СтрокаУслуги.Сумма      = Выборка.Сумма - СуммаДляКорректировки;
	//					СтрокаУслуги.Цена       = Выборка.Сумма- СуммаДляКорректировки;
	//					СтрокаУслуги.СуммаНДС   = Выборка.СуммаНДС - СуммаДляКорректировкиНДС;
	//					СтрокаУслуги.Количество = 1;
	//				КонецЕсли;
	//			КонецЦикла; 
	//			
	//			Ндок.Комментарий =  Выборка.Ссылка.Комментарий;
	//			Ндок.Дата = ДатаВыгрузки;
	//			Ндок.КорректироватьБУиНУ = Истина;
	//			//
	//			Попытка
	//				НачатьТранзакцию();
	//				Ндок.Записать(РежимЗаписиДокумента.Проведение);
	//				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
	//				СуммаДляКорректировки    = СуммаДляКорректировки - Выборка.Сумма;
	//				СуммаДляКорректировкиНДС = СуммаДляКорректировкиНДС - Выборка.СуммаНДС;
	//				Если НужноРаспровестиОснование тогда
	//					Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//					Об2 = СФОСНОВАНИЯ.ПолучитьОбъект();
	//					Об2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//				КонецЕсли;
	//				ЗафиксироватьТранзакцию();
	//			Исключение
	//				ОтменитьТранзакцию();
	//				pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//			КонецПопытки; 
	//			//
	//			ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(Выборка.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
	//		КонецЦикла;
	//		
	//		
	//		Если СуммаДляКорректировки > 0 Тогда
	//			
	//			Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//			//Дата1 = ЭтаФорма.Период.ДатаНачала;
	//			//Дата2 = КонецДня(ДатаВыгрузки);
	//			// Формируем строку подключения
	//			СтрокаПодключения =
	//			"srvr='RUSPBPACC01'; ref='bp_corp'; usr='user'; pwd='1Cadmin';";
	//			ComConnector = ПолучитьCOMОбъектПоВерсииПлатформы();
	//			СообщениеПользователю = Новый СообщениеПользователю;
	//			Попытка
	//				ComConnection = COMConnector.Connect(СтрокаПодключения);
	//			Исключение
	//				СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
	//				//	СообщениеПользователю.pcru_ex_Почта.Сообщить_об_ошибке();
	//				Возврат;
	//			КонецПопытки;
	//			Запрос = ComConnection.NewObject("Запрос"); //#@
	//			Запрос.Текст = "ВЫБРАТЬ //ПЕРВЫЕ 1
	//			|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка,
	//			|	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
	//			|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК НоменклатураКод,
	//			|	РеализацияТоваровУслугУслуги.Содержание КАК Содержание,
	//			|	РеализацияТоваровУслугУслуги.Количество КАК Количество,
	//			|	РеализацияТоваровУслугУслуги.Цена КАК Цена,
	//			|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
	//			|	РеализацияТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
	//			|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
	//			|	РеализацияТоваровУслугУслуги.СчетДоходов КАК СчетДоходов,
	//			|	РеализацияТоваровУслугУслуги.Субконто КАК Субконто,
	//			|	РеализацияТоваровУслугУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	//			|	РеализацияТоваровУслугУслуги.СчетРасходов КАК СчетРасходов,
	//			|	РеализацияТоваровУслуг.Ссылка КАК Ссылка1,
	//			|	РеализацияТоваровУслуг.ВерсияДанных КАК ВерсияДанных,
	//			|	РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
	//			|	РеализацияТоваровУслуг.Номер КАК Номер,
	//			|	РеализацияТоваровУслуг.Дата КАК Дата,
	//			|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	//			|	РеализацияТоваровУслуг.ВидОперации КАК ВидОперации,
	//			|	РеализацияТоваровУслуг.Организация КАК Организация,
	//			|	РеализацияТоваровУслуг.Склад КАК Склад,
	//			|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//			|	РеализацияТоваровУслуг.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	//			|	РеализацияТоваровУслуг.Патент КАК Патент,
	//			|	РеализацияТоваровУслуг.Контрагент.Код КАК Контрагент,
	//			|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ДоговорКонтрагента,
	//			|	РеализацияТоваровУслуг.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	//			|	РеализацияТоваровУслуг.ТипЦен КАК ТипЦен,
	//			|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	//			|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	//			|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	//			|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	//			|	РеализацияТоваровУслуг.УдалитьУчитыватьНДС КАК УдалитьУчитыватьНДС,
	//			|	РеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	//			|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	//			|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
	//			|	РеализацияТоваровУслуг.УдалитьСчетУчетаДоходовПоТаре КАК УдалитьСчетУчетаДоходовПоТаре,
	//			|	РеализацияТоваровУслуг.УдалитьСчетУчетаРасходовПоТаре КАК УдалитьСчетУчетаРасходовПоТаре,
	//			|	РеализацияТоваровУслуг.УдалитьСтатьяДоходовИРасходовПоТаре КАК УдалитьСтатьяДоходовИРасходовПоТаре,
	//			|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	//			|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
	//			|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	//			|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	//			|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	//			|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	//			|	РеализацияТоваровУслуг.Ответственный КАК Ответственный,
	//			|	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
	//			|	РеализацияТоваровУслуг.РучнаяКорректировка КАК РучнаяКорректировка,
	//			|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	//			|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	//			|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
	//			|	РеализацияТоваровУслуг.УдалитьЗаРуководителяПоПриказу КАК УдалитьЗаРуководителяПоПриказу,
	//			|	РеализацияТоваровУслуг.УдалитьЗаГлавногоБухгалтераПоПриказу КАК УдалитьЗаГлавногоБухгалтераПоПриказу,
	//			|	РеализацияТоваровУслуг.ЗаЗаказчикаНаОсновании КАК ЗаЗаказчикаНаОсновании,
	//			|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	//			|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	//			|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	//			|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	//			|	РеализацияТоваровУслуг.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	//			|	РеализацияТоваровУслуг.ДокументБезНДС КАК ДокументБезНДС,
	//			|	РеализацияТоваровУслуг.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
	//			|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
	//			|	РеализацияТоваровУслуг.Перевозчик КАК Перевозчик,
	//			|	РеализацияТоваровУслуг.МаркаАвтомобиля КАК МаркаАвтомобиля,
	//			|	РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля КАК РегистрационныйЗнакАвтомобиля,
	//			|	РеализацияТоваровУслуг.Водитель КАК Водитель,
	//			|	РеализацияТоваровУслуг.ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
	//			|	РеализацияТоваровУслуг.КраткоеНаименованиеГруза КАК КраткоеНаименованиеГруза,
	//			|	РеализацияТоваровУслуг.СопроводительныеДокументы КАК СопроводительныеДокументы,
	//			|	РеализацияТоваровУслуг.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	//			|	РеализацияТоваровУслуг.ОтветственныйЗаОформление КАК ОтветственныйЗаОформление,
	//			|	РеализацияТоваровУслуг.СведенияОТранспортировкеИГрузе КАК СведенияОТранспортировкеИГрузе,
	//			|	РеализацияТоваровУслуг.ПеревозкаАвтотранспортом КАК ПеревозкаАвтотранспортом,
	//			|	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
	//			|	СчетФактураВыданный.Номер КАК НомерСФ
	//			|ИЗ
	//			|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	//			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//			|		ПО (РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
	//			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	//			|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслугУслуги.Ссылка)
	//			|ГДЕ
	//			|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер = &Номер
	//			|
	//			|УПОРЯДОЧИТЬ ПО
	//			|	Дата УБЫВ";
	//			Запрос.УстановитьПараметр("Номер",Стр.ДоговорКонтрагента.Номер);
	//			Результат = Запрос.Выполнить();
	//			Выборка = Результат.Выбрать();
	//			КоличствоРеализаций = 1;
	//			Пока Выборка.Следующий() Цикл
	//				//	
	//				Запрос2 = Новый Запрос;
	//				Запрос2.Текст = "ВЫБРАТЬ
	//				|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//				|ИЗ
	//				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//				|ГДЕ
	//				|	РеализацияТоваровУслуг.Номер = &Номер
	//				|	И РеализацияТоваровУслуг.Дата = &Дата";
	//				Запрос2.УстановитьПараметр("Номер", Выборка.Номер);
	//				Запрос2.УстановитьПараметр("Дата", Выборка.Дата);
	//				Результат2 = Запрос2.Выполнить();
	//				Выборка2 = Результат2.Выбрать();
	//				Если Не Результат2.Пустой()  Тогда
	//					pcru_ex_Почта.Сообщить_об_ошибке("Реализация  № "+Строка(Выборка.Номер)+" от даты "+Строка(Выборка.Дата)+" уже есть!!!!");
	//					Продолжить;	
	//				КонецЕсли;
	//				
	//				УстановитьПривилегированныйРежим(Истина);
	//				// Определяем общие данные
	//				
	//				Запрос1 = Новый Запрос;
	//				Запрос1 = Новый Запрос;
	//				Запрос1.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//				|	БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетАналитическогоУчета КАК СчетАналитическогоУчета
	//				|ИЗ
	//				|	Документ.БНФООткрытиеСчетовАналитическогоУчета.СчетаУчета КАК БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета
	//				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БНФООткрытиеСчетовАналитическогоУчета.ВидыАналитик КАК БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик
	//				|		ПО БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.Ссылка = БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.Ссылка
	//				|			И (БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.КлючСтроки = БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.КлючСтроки)
	//				|ГДЕ
	//				|	ВЫРАЗИТЬ(БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.ЗначениеАналитики КАК Справочник.БНФОДоговорыКредитовИДепозитов).Номер = &Код
	//				|	И БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетУчета.Код = ""48803""  //009017851
	//				|	И Подстрока(БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетАналитическогоУчета,1,10) = ""4880381001""";  //009017851
	//				
	//				Запрос1.УстановитьПараметр("Код", Выборка.ДоговорКонтрагента);
	//				Результат = Запрос1.Выполнить().Выбрать();
	//				Пока Результат.Следующий() Цикл
	//					//
	//					СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//					СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//					СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//					//
	//					Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001460");
	//					ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//					Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//					СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	//					СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	//					ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//					Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//					Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//					ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//					НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//					//
	//					ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//					//ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	//					// Шапка
	//					//Общие данные
	//					ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//					ДокументОбъект.БНФОВидДеятельностиНПФ = Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//					ДокументОбъект.ВидОперации = ВидОперации;
	//					ДокументОбъект.Организация = Организация;
	//					ДокументОбъект.ВалютаДокумента = Валюта;
	//					ДокументОбъект.КурсВзаиморасчетов = Выборка.КурсВзаиморасчетов;
	//					ДокументОбъект.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
	//					ДокументОбъект.Ответственный = Ответственный;
	//					ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//					ДокументОбъект.СуммаВключаетНДС = Ложь;
	//					
	//					ДокументОбъект.СчетУчетаРасчетовПоАвансам = Результат.СчетАналитическогоУчета;
	//					ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = Результат.СчетАналитическогоУчета;
	//					
	//					ДокументОбъект.ДокументБезНДС = Ложь;
	//					ДокументОбъект.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	//					ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации; 
	//					ДокументОбъект.Дата = Выборка.Дата;
	//					//
	//					ДокументОбъект.Номер = Выборка.Номер;
	//					//Дата
	//					//			СтрокаДата = СтрЗаменить(ЭлементМассива.ДатаУчета, ".", "");
	//					//			СтрокаДата = Прав(СтрокаДата,4) + Сред(СтрокаДата,3,2) + ?(СтрДлина(СтрокаДата) = 8, Лев(СтрокаДата, 2), "0"+Лев(СтрокаДата, 1));
	//					//ДокументОбъект.Дата = _Дата;			//Дата(СтрокаДата) + 43200;
	//					//Данные из массива
	//					ДокументОбъект.Контрагент = Стр.Контрагент;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор",Выборка.Контрагент);
	//					ДокументОбъект.ДоговорКонтрагента = Стр.ДоговорКонтрагента; //Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Выборка.ДоговорКонтрагента);
	//					ДокументОбъект.Комментарий = "#@ Загружено, дог. "+ДокументОбъект.ДоговорКонтрагента.Наименование + " "+ДокументОбъект.Контрагент.Наименование;
	//					//Табличная часть
	//					
	//					СтрокаУслуг = ДокументОбъект.Услуги.Добавить();
	//					СтрокаУслуг.Количество = 1;
	//					СтрокаУслуг.Номенклатура = Номенклатура;
	//					СтрокаУслуг.Содержание = Номенклатура.Наименование +" "+ДокументОбъект.ДоговорКонтрагента.Наименование;
	//					СтрокаУслуг.СтавкаНДС = СтавкаНДС;
	//					СтрокаУслуг.Цена = Выборка.Цена;
	//					СтрокаУслуг.Сумма = Выборка.Сумма;
	//					СтрокаУслуг.СуммаНДС = Выборка.СуммаНДС;
	//					
	//					СтрокаУслуг.СчетДоходов = СчетДоходов;  
	//					СтрокаУслуг.СчетРасходов = СчетРасходов;
	//					СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//					СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = СчетНДС;
	//					
	//					СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//					СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
	//					
	//					Попытка
	//						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//						НачатьТранзакцию();
	//						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//						Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
	//						СФОБ = Рез.ссылка.ПолучитьОбъект();
	//						СФОБ.Номер = Выборка.НомерСФ;
	//						СФОБ.Записать();
	//						ЗафиксироватьТранзакцию();	
	//						pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций");
	//						КоличствоРеализаций = 	КоличствоРеализаций + 1;
	//						УстановитьПривилегированныйРежим(Ложь);		
	//						//Возврат;
	//					Исключение 
	//						pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
	//						УстановитьПривилегированныйРежим(Ложь);	
	//						Если ТранзакцияАктивна() Тогда 
	//							ОтменитьТранзакцию();
	//						КонецЕсли;
	//						pcru_ex_Почта.Сообщить_об_ошибке( ОписаниеОшибки());
	//						//Возврат;  
	//						Продолжить;
	//					КонецПопытки;
	//					
	//					Если СуммаДляКорректировки >=  Выборка.Цена Тогда
	//						Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	//						Ндок.Заполнить(ДокументОбъект.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;
	//						Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	//							СтрокаУслуги.Сумма = 0 ;
	//							СтрокаУслуги.Цена =  0 ;
	//							СтрокаУслуги.СуммаНДС = 0;//Окр((Выборка.Цена )*0.18,2,РежимОкругления.Окр15как10)-0.01;
	//							СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
	//						КонецЦикла; 
	//						Ндок.Дата = ДатаВыгрузки;
	//						Ндок.КорректироватьБУиНУ = Истина;
	//						Ндок.Записать(РежимЗаписиДокумента.Проведение);
	//						Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
	//						Для каждого Движение Из ДокументОбъект.Движения Цикл
	//							Движение.Очистить();
	//							Движение.Записать(); // после записи набор записей остается заполненным
	//						КонецЦикла; 
	//						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//						СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
	//						ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(ДокументОбъект.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
	//						
	//						Если СуммаДляКорректировки = 0 Тогда 
	//							Прервать;	
	//						КонецЕсли;
	//					иначе
	//						Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	//						Ндок.Заполнить(ДокументОбъект.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1; 
	//						Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	//							СтрокаУслуги.Сумма = Выборка.Цена - СуммаДляКорректировки;
	//							СтрокаУслуги.Цена = Выборка.Цена - СуммаДляКорректировки;
	//							СтрокаУслуги.СуммаНДС = Окр((Выборка.Цена - СуммаДляКорректировки)*0.18,2,РежимОкругления.Окр15как10)-0.01;
	//							СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
	//							СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
	//						КонецЦикла; 
	//						Ндок.Дата = ДатаВыгрузки;
	//						Ндок.КорректироватьБУиНУ = Истина;
	//						Для каждого Движение Из ДокументОбъект.Движения Цикл
	//							Движение.Очистить();
	//							Движение.Записать(); // после записи набор записей остается заполненным
	//						КонецЦикла; 
	//						Ндок.Записать(РежимЗаписиДокумента.Проведение);
	//						Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
	//						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	//						ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(ДокументОбъект.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
	//						
	//						Прервать;
	//					КонецЕсли;	
	//				КонецЦикла;
	//			КонецЦикла;
	//		КонецЕсли;
	//		
	//		ЗафиксироватьТранзакцию();
	//	Исключение
	//		ОтменитьТранзакцию();
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки; 	
	//	
	//КонецЦикла;
	
	//pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

Процедура ЕжеднеаныеРеализацииНаСервереDefault(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт //по судебному приказу
	//База =ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//УстановитьПривилегированныйРежим(Истина);
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//
	//ТекстПисьма = "";
	//
	//
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервереDefault(ДатаВыгрузки,Счетчик+1);
	//		Возврат;
	//	КонецЕсли; 
	//КонецПопытки;  
	//Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+"  ContractDT, ClientDT, Sum(Amount) Amount, sum(VAT) VAT
	//|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount, VAT.Amount AS VAT
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	//|VAT.[Credit Account No_] = '60309.2' AND VAT.[Debit Account No_] = '60323.9' AND t1.[Transaction No_] = VAT.[Transaction No_]
	//|WHERE(t1.[Debit Account No_] = '60323.9') AND (t1.[Credit Account No_] = '71701.4') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//|(t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|UNION ALL
	//|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1, - VAT.Amount AS VAT
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	//| VAT.[Credit Account No_] = '60323.9' AND VAT.[Debit Account No_] = '60309.2' AND t1.[Transaction No_] = VAT.[Transaction No_]
	//|WHERE(t1.[Debit Account No_] = '71701.4') AND (t1.[Credit Account No_] = '60323.9') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//| (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	//|Group by ContractDT, ClientDT";
	//RecordSet = Command.Execute();
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//RecordSet.MoveFirst();
	//МассивДанных = Новый Массив;
	//МассивДанныхКорректировок = Новый Массив;
	//Пока НЕ RecordSet.EOF() Цикл
	//	Стр = Новый Структура;
	//	Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//	Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//	Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//	попытка 
	//		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
	//	Исключение	
	//		Стр.Вставить("НДС", 0);
	//	конецпопытки;
	//	Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//		МассивДанныхКорректировок.Добавить(стр);			
	//	Иначе 	
	//		Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//			МассивДанных.Добавить(стр);
	//		КонецЕсли;			
	//	КонецЕсли;
	//	RecordSet.MoveNext(); 
	//КонецЦикла;
	//RecordSet.Close();
	//Сумма = 0;
	//Счеччик = 0;
	//Стр = Неопределено; 
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	// Определяем общие данные
	//	СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000722005");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000722005");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000500232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	//СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	//СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000500232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001460");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	//++ DEV1C-96
	//	Если ДатаВыгрузки < Дата(2019,1,1) ТОгда
	//		СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	//	Иначе
	//		СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	//	КонецЕсли;	
	//	//-- DEV1C-96
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	//
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	ДерКоммент = "#Default Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	// Шапка
	//	//Общие данные
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов= 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС= Ложь;
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._60323_9;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._60323_9;
	//	ДокументОбъект.ДокументБезНДС= Ложь;
	//	ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент;
	//	//Табличная часть
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1;
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = СтрокаТЧ.НДС;
	//	СтрокаУслуг.СчетДоходов= СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПокоду("00-000278");
	//	// 16	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
	//	
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		Блокировка = Новый БлокировкаДанных;
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Стр._60323_9);
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000722005"));
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
	//		//
	//		Блокировка.Заблокировать();
	//		
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
	//		Счеччик = 	Счеччик + 1;
	//		ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций c НДС, Выписана счет-фактура:"+Строка(РЕз.Ссылка)+Символы.ПС;
	//		ЗафиксироватьТранзакцию();
	//	Исключение 
	//		ОтменитьТранзакцию();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЦикла;
	//
	////
	//////Корректировки	
	////Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
	////	
	////	
	////			
	////		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
	////		СуммаДляКорректировкиНДС = - СтрокаТЧ.НДС;
	////		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	////		Запрос = Новый Запрос;
	////		
	////		
	////		Запрос.Текст = "ВЫБРАТЬ
	////		|	СУММА(РеализацияТоваровУслугУслуги.Сумма) КАК Сумма,
	////		|	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС) КАК СуммаНДС,
	////		|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка
	////		|ИЗ
	////		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	////		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	////		|		ПО (КорректировкаРеализации.ДокументРеализации = РеализацияТоваровУслугУслуги.Ссылка)
	////		|			И (КорректировкаРеализации.Проведен)
	////		|ГДЕ
	////		|	РеализацияТоваровУслугУслуги.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	////		|	И (ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 8) = ""#Default""
	////		|			ИЛИ ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 14) = ""#@ 76.16-91.01"")
	////		|	И КорректировкаРеализации.Ссылка ЕСТЬ NULL
	////		|
	////		|СГРУППИРОВАТЬ ПО
	////		|	РеализацияТоваровУслугУслуги.Ссылка";
	////			Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
	////		//	Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
	////		Выборка = Запрос.Выполнить().Выбрать();
	////		Пока Выборка.Следующий() Цикл
	////			НужноРаспровестиОснование = Ложь;
	////			если не Выборка.Ссылка.Проведен тогда 
	////				Об = Выборка.Ссылка.ПолучитьОбъект();
	////				Об.Записать(РежимЗаписиДокумента.Проведение);
	////				СФОСНОВАНИЯ = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Выборка.Ссылка);
	////				НужноРаспровестиОснование = Истина;
	////			КонецЕсли;
	////			
	////			//СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
	////			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	////			Ндок.Заполнить(Выборка.Ссылка);
	////			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	////				Если СуммаДляКорректировки >= Выборка.Сумма Тогда
	////					СтрокаУслуги.Сумма      = 0;
	////					СтрокаУслуги.Цена       = 0;
	////					СтрокаУслуги.СуммаНДС   = 0;
	////					СтрокаУслуги.Количество = 1;
	////				Иначе 
	////					СтрокаУслуги.Сумма      = Выборка.Сумма - СуммаДляКорректировки;
	////					СтрокаУслуги.Цена       = Выборка.Сумма- СуммаДляКорректировки;
	////					СтрокаУслуги.СуммаНДС   = Выборка.СуммаНДС - СуммаДляКорректировкиНДС;
	////					СтрокаУслуги.Количество = 1;
	////				КонецЕсли;
	////			КонецЦикла; 
	////			
	////			Ндок.Комментарий =  Выборка.Ссылка.Комментарий;
	////			Ндок.Дата = ДатаВыгрузки;
	////			Ндок.КорректироватьБУиНУ = Истина;
	////			//
	////			Попытка
	////				НачатьТранзакцию();
	////				Ндок.Записать(РежимЗаписиДокумента.Проведение);
	////				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
	////				СуммаДляКорректировки    = СуммаДляКорректировки - Выборка.Сумма;
	////				СуммаДляКорректировкиНДС = СуммаДляКорректировкиНДС - Выборка.СуммаНДС;
	////				Если НужноРаспровестиОснование тогда
	////					Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	////					Об2 = СФОСНОВАНИЯ.ПолучитьОбъект();
	////					Об2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	////				КонецЕсли;
	////				ЗафиксироватьТранзакцию();
	////			Исключение
	////				ОтменитьТранзакцию();
	////				pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	////			КонецПопытки; 
	////			//
	////			ТекстПисьма = ТекстПисьма + "Создана корректировка "+Строка(Ндок.ССылка)+" на документ "+Строка(Выборка.Ссылка)+" , Выписана счет-фактура: "+Строка(РЕз.Ссылка)+Символы.ПС;
	////		КонецЦикла;
	////		
	//
	////	
	////	
	////	
	////	//СуммаДляКорректировки = -СтрокаТЧ.Сумма;
	////	//Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	////	//Запрос = Новый Запрос;
	////	//Запрос.Текст = "ВЫБРАТЬ
	////	//|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	////	//|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
	////	//|	ВЫБОР
	////	//|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
	////	//|			ТОГДА ВложенныйЗапрос.СуммаДокумента
	////	//|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
	////	//|	КОНЕЦ КАК Оплата
	////	//|ИЗ
	////	//|	(ВЫБРАТЬ
	////	//|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	////	//|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	////	//|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
	////	//|	ИЗ
	////	//|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	////	//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
	////	//|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
	////	//|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
	////	//|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
	////	//|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	////	//|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
	////	//|	ГДЕ
	////	//|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
	////	//|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
	////	//|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,7) = ""#Default""
	////	//|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,7) = ""#Default""
	////	//|	
	////	//|	СГРУППИРОВАТЬ ПО
	////	//|		РеализацияТоваровУслуг.Ссылка,
	////	//|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
	////	//|ГДЕ
	////	//|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
	////	//|
	////	//|УПОРЯДОЧИТЬ ПО
	////	//|	ВложенныйЗапрос.Ссылка.МоментВремени";
	////	//Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
	////	//Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
	////	//Выборка = Запрос.Выполнить().Выбрать();
	////	//Пока Выборка.Следующий() Цикл
	////	//	Об = Выборка.Ссылка.ПолучитьОбъект();
	////	//	Об.Записать(РежимЗаписиДокумента.Проведение);
	////	//	
	////	//	
	////	//	СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
	////	//	Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	////	//	Ндок.Заполнить(Выборка.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;
	////	//	Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	////	//		СтрокаУслуги.Сумма = СуммаКорректировки;
	////	//		СтрокаУслуги.Цена = СуммаКорректировки;
	////	//		СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
	////	//		СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
	////	//	КонецЦикла; 
	////	//	Ндок.Записать(РежимЗаписиДокумента.Проведение);
	////	//	СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
	////	//	Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
	////	//КонецЦикла;
	////	
	////	
	////	
	////	Если СуммаДляКорректировки > 0 Тогда
	////		
	////		Организация = Справочники.Организации.НайтиПоКоду("000000001");
	////		//Дата1 = ЭтаФорма.Период.ДатаНачала;
	////		//Дата2 = КонецДня(ДатаВыгрузки);
	////		// Формируем строку подключения
	////		СтрокаПодключения =
	////		"srvr='RUSPBPACC01'; ref='bp_corp'; usr='user'; pwd='1Cadmin';";
	////		ComConnector = ПолучитьCOMОбъектПоВерсииПлатформы();
	////		СообщениеПользователю = Новый СообщениеПользователю;
	////		Попытка
	////			ComConnection = COMConnector.Connect(СтрокаПодключения);
	////		Исключение
	////			СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
	////			СообщениеПользователю.pcru_ex_Почта.Сообщить_об_ошибке();
	////			Возврат;
	////		КонецПопытки;
	////		Запрос = ComConnection.NewObject("Запрос"); //#@
	////		Запрос.Текст = "ВЫБРАТЬ 
	////		|	РеализацияТоваровУслугУслуги.Ссылка КАК Ссылка,
	////		|	РеализацияТоваровУслугУслуги.НомерСтроки КАК НомерСтроки,
	////		|	РеализацияТоваровУслугУслуги.Номенклатура.Код КАК НоменклатураКод,
	////		|	РеализацияТоваровУслугУслуги.Содержание КАК Содержание,
	////		|	РеализацияТоваровУслугУслуги.Количество КАК Количество,
	////		|	РеализацияТоваровУслугУслуги.Цена КАК Цена,
	////		|	РеализацияТоваровУслугУслуги.Сумма КАК Сумма,
	////		|	РеализацияТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
	////		|	РеализацияТоваровУслугУслуги.СуммаНДС КАК СуммаНДС,
	////		|	РеализацияТоваровУслугУслуги.СчетДоходов КАК СчетДоходов,
	////		|	РеализацияТоваровУслугУслуги.Субконто КАК Субконто,
	////		|	РеализацияТоваровУслугУслуги.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	////		|	РеализацияТоваровУслугУслуги.СчетРасходов КАК СчетРасходов,
	////		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка1,
	////		|	РеализацияТоваровУслуг.ВерсияДанных КАК ВерсияДанных,
	////		|	РеализацияТоваровУслуг.ПометкаУдаления КАК ПометкаУдаления,
	////		|	РеализацияТоваровУслуг.Номер КАК Номер,
	////		|	РеализацияТоваровУслуг.Дата КАК Дата,
	////		|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	////		|	РеализацияТоваровУслуг.ВидОперации КАК ВидОперации,
	////		|	РеализацияТоваровУслуг.Организация КАК Организация,
	////		|	РеализацияТоваровУслуг.Склад КАК Склад,
	////		|	РеализацияТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	////		|	РеализацияТоваровУслуг.ДеятельностьНаПатенте КАК ДеятельностьНаПатенте,
	////		|	РеализацияТоваровУслуг.Патент КАК Патент,
	////		|	РеализацияТоваровУслуг.Контрагент.Код КАК Контрагент,
	////		|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер КАК ДоговорКонтрагента,
	////		|	РеализацияТоваровУслуг.СпособЗачетаАвансов КАК СпособЗачетаАвансов,
	////		|	РеализацияТоваровУслуг.ТипЦен КАК ТипЦен,
	////		|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	////		|	РеализацияТоваровУслуг.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	////		|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	////		|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	////		|	РеализацияТоваровУслуг.УдалитьУчитыватьНДС КАК УдалитьУчитыватьНДС,
	////		|	РеализацияТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	////		|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам,
	////		|	РеализацияТоваровУслуг.СчетУчетаРасчетовПоТаре КАК СчетУчетаРасчетовПоТаре,
	////		|	РеализацияТоваровУслуг.УдалитьСчетУчетаДоходовПоТаре КАК УдалитьСчетУчетаДоходовПоТаре,
	////		|	РеализацияТоваровУслуг.УдалитьСчетУчетаРасходовПоТаре КАК УдалитьСчетУчетаРасходовПоТаре,
	////		|	РеализацияТоваровУслуг.УдалитьСтатьяДоходовИРасходовПоТаре КАК УдалитьСтатьяДоходовИРасходовПоТаре,
	////		|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю,
	////		|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
	////		|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	////		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	////		|	РеализацияТоваровУслуг.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	////		|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	////		|	РеализацияТоваровУслуг.Ответственный КАК Ответственный,
	////		|	РеализацияТоваровУслуг.Комментарий КАК Комментарий,
	////		|	РеализацияТоваровУслуг.РучнаяКорректировка КАК РучнаяКорректировка,
	////		|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	////		|	РеализацияТоваровУслуг.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	////		|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел,
	////		|	РеализацияТоваровУслуг.УдалитьЗаРуководителяПоПриказу КАК УдалитьЗаРуководителяПоПриказу,
	////		|	РеализацияТоваровУслуг.УдалитьЗаГлавногоБухгалтераПоПриказу КАК УдалитьЗаГлавногоБухгалтераПоПриказу,
	////		|	РеализацияТоваровУслуг.ЗаЗаказчикаНаОсновании КАК ЗаЗаказчикаНаОсновании,
	////		|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	////		|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	////		|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	////		|	РеализацияТоваровУслуг.ДоверенностьЧерезКого КАК ДоверенностьЧерезКого,
	////		|	РеализацияТоваровУслуг.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	////		|	РеализацияТоваровУслуг.ДокументБезНДС КАК ДокументБезНДС,
	////		|	РеализацияТоваровУслуг.ЗаРуководителяНаОсновании КАК ЗаРуководителяНаОсновании,
	////		|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераНаОсновании КАК ЗаГлавногоБухгалтераНаОсновании,
	////		|	РеализацияТоваровУслуг.Перевозчик КАК Перевозчик,
	////		|	РеализацияТоваровУслуг.МаркаАвтомобиля КАК МаркаАвтомобиля,
	////		|	РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля КАК РегистрационныйЗнакАвтомобиля,
	////		|	РеализацияТоваровУслуг.Водитель КАК Водитель,
	////		|	РеализацияТоваровУслуг.ВодительскоеУдостоверение КАК ВодительскоеУдостоверение,
	////		|	РеализацияТоваровУслуг.КраткоеНаименованиеГруза КАК КраткоеНаименованиеГруза,
	////		|	РеализацияТоваровУслуг.СопроводительныеДокументы КАК СопроводительныеДокументы,
	////		|	РеализацияТоваровУслуг.ДеятельностьНаТорговомСборе КАК ДеятельностьНаТорговомСборе,
	////		|	РеализацияТоваровУслуг.ОтветственныйЗаОформление КАК ОтветственныйЗаОформление,
	////		|	РеализацияТоваровУслуг.СведенияОТранспортировкеИГрузе КАК СведенияОТранспортировкеИГрузе,
	////		|	РеализацияТоваровУслуг.ПеревозкаАвтотранспортом КАК ПеревозкаАвтотранспортом,
	////		|	РеализацияТоваровУслуг.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
	////		|	СчетФактураВыданный.Номер КАК НомерСФ,
	////		|	СчетФактураВыданный.Дата КАК ДатаСФ
	////		|ИЗ
	////		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	////		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	////		|		ПО (РеализацияТоваровУслугУслуги.Ссылка = РеализацияТоваровУслуг.Ссылка)
	////		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	////		|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслугУслуги.Ссылка)
	////		|ГДЕ
	////		|	 РеализацияТоваровУслуг.ДоговорКонтрагента.Номер = &Номер И ПОДСТРОКА(РеализацияТоваровУслугУслуги.Ссылка.Комментарий, 1, 14) = ""#@ 76.16-91.01""
	////		|УПОРЯДОЧИТЬ ПО
	////		|	Дата УБЫВ";
	////		Запрос.УстановитьПараметр("Номер",Стр.ДоговорКонтрагента.Номер);
	////		
	////		Результат = Запрос.Выполнить();
	////		Выборка = Результат.Выбрать();
	////		Счеччик = 1;
	////		Пока Выборка.Следующий() Цикл
	////			//	
	////			Запрос2 = Новый Запрос;
	////			Запрос2.Текст = "ВЫБРАТЬ
	////			|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	////			|ИЗ
	////			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	////			|ГДЕ
	////			|	РеализацияТоваровУслуг.Номер = &Номер
	////			|	И РеализацияТоваровУслуг.Дата = &Дата";
	////			Запрос2.УстановитьПараметр("Номер", Выборка.Номер);
	////			Запрос2.УстановитьПараметр("Дата", Выборка.Дата);
	////			Результат2 = Запрос2.Выполнить();
	////			Выборка2 = Результат2.Выбрать();
	////			Если Не Результат2.Пустой()  Тогда
	////				pcru_ex_Почта.Сообщить_об_ошибке("Реализация  № "+Строка(Выборка.Номер)+" от даты "+Строка(Выборка.Дата)+" уже есть!!!!");
	////				Продолжить;	
	////			КонецЕсли;
	////			
	////			УстановитьПривилегированныйРежим(Истина);
	////			// Определяем общие данные
	////			СтрСчетов = pcru_УМФО.ОткрытьСчетаКонтрагента(Стр.ДоговорКонтрагента);
	////			//Запрос1 = Новый Запрос;
	////			//Запрос1 = Новый Запрос;
	////			//Запрос1.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	////			//|	БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетАналитическогоУчета КАК СчетАналитическогоУчета
	////			//|ИЗ
	////			//|	Документ.БНФООткрытиеСчетовАналитическогоУчета.СчетаУчета КАК БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета
	////			//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БНФООткрытиеСчетовАналитическогоУчета.ВидыАналитик КАК БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик
	////			//|		ПО БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.Ссылка = БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.Ссылка
	////			//|			И (БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.КлючСтроки = БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.КлючСтроки)
	////			//|ГДЕ
	////			//|	ВЫРАЗИТЬ(БНФООткрытиеСчетовАналитическогоУчетаВидыАналитик.ЗначениеАналитики КАК Справочник.БНФОДоговорыКредитовИДепозитов).Номер = &Код
	////			//|	И БНФООткрытиеСчетовАналитическогоУчетаСчетаУчета.СчетУчета.Код = ""603""";  //009017851
	////			//
	////			//Запрос1.УстановитьПараметр("Код", Выборка.ДоговорКонтрагента);
	////			//Результат = Запрос1.Выполнить().Выбрать();
	////			//Пока Результат.Следующий() Цикл
	////			//
	////			СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000722005");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	////			СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	////			СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000722005");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	////			//
	////			Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00003115");
	////			ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	////			Ответственный = ПараметрыСеанса.ТекущийПользователь;
	////			СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	////			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	////			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	////			Валюта = Справочники.Валюты.НайтиПоКоду("643");
	////			Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000278"); // !!!ПОМЕНЯТЬ!!!
	////			ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	////			НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	////			//
	////			ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	////			//ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	////			// Шапка
	////			//Общие данные
	////			ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	////			ДокументОбъект.БНФОВидДеятельностиНПФ = Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	////			ДокументОбъект.ВидОперации = ВидОперации;
	////			ДокументОбъект.Организация = Организация;
	////			ДокументОбъект.ВалютаДокумента = Валюта;
	////			ДокументОбъект.КурсВзаиморасчетов = Выборка.КурсВзаиморасчетов;
	////			ДокументОбъект.КратностьВзаиморасчетов = Выборка.КратностьВзаиморасчетов;
	////			ДокументОбъект.Ответственный = Ответственный;
	////			ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	////			ДокументОбъект.СуммаВключаетНДС = Ложь;
	////			
	////			ДокументОбъект.СчетУчетаРасчетовПоАвансам = СтрСчетов._60323_9;
	////			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СтрСчетов._60323_9;
	////			
	////			ДокументОбъект.ДокументБезНДС = Ложь;
	////			ДокументОбъект.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	////			ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации; 
	////			ДокументОбъект.Дата = Выборка.Дата;
	////			//
	////			ДокументОбъект.Номер = Выборка.Номер;
	////			//Дата
	////			//			СтрокаДата = СтрЗаменить(ЭлементМассива.ДатаУчета, ".", "");
	////			//			СтрокаДата = Прав(СтрокаДата,4) + Сред(СтрокаДата,3,2) + ?(СтрДлина(СтрокаДата) = 8, Лев(СтрокаДата, 2), "0"+Лев(СтрокаДата, 1));
	////			//ДокументОбъект.Дата = _Дата;			//Дата(СтрокаДата) + 43200;
	////			//Данные из массива
	////			ДокументОбъект.Контрагент = Стр.Контрагент;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор",Выборка.Контрагент);
	////			ДокументОбъект.ДоговорКонтрагента = Стр.ДоговорКонтрагента; //Справочники.ДоговорыКонтрагентов.НайтиПоКоду(Выборка.ДоговорКонтрагента);
	////			ДокументОбъект.Комментарий = "#@ Загружено, дог. "+ДокументОбъект.ДоговорКонтрагента.Наименование + " "+ДокументОбъект.Контрагент.Наименование;
	////			//Табличная часть
	////			
	////			СтрокаУслуг = ДокументОбъект.Услуги.Добавить();
	////			СтрокаУслуг.Количество = 1;
	////			СтрокаУслуг.Номенклатура = Номенклатура;
	////			СтрокаУслуг.Содержание = Номенклатура.Наименование +" "+ДокументОбъект.ДоговорКонтрагента.Наименование;
	////			СтрокаУслуг.СтавкаНДС = СтавкаНДС;
	////			СтрокаУслуг.Цена = Выборка.Цена;
	////			СтрокаУслуг.Сумма = Выборка.Сумма;
	////			СтрокаУслуг.СуммаНДС = Выборка.СуммаНДС;
	////			
	////			СтрокаУслуг.СчетДоходов = СчетДоходов;  
	////			СтрокаУслуг.СчетРасходов = СчетРасходов;
	////			СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	////			СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = СчетНДС;
	////			
	////			СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	////			СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000278");
	////			//					СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
	////			
	////			Попытка
	////				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	////				НачатьТранзакцию();
	////				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	////				
	////				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
	////				СФОБ = Рез.ссылка.ПолучитьОбъект();
	////				СФОБ.Номер = Выборка.НомерСФ;
	////				СФОБ.Записать();
	////				ЗафиксироватьТранзакцию();	
	////				pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций");
	////				Счеччик = 	Счеччик + 1;
	////				УстановитьПривилегированныйРежим(Ложь);		
	////				//Возврат;
	////			Исключение 
	////				pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
	////				УстановитьПривилегированныйРежим(Ложь);	
	////				Если ТранзакцияАктивна() Тогда 
	////					ОтменитьТранзакцию();
	////				КонецЕсли;
	////				pcru_ex_Почта.Сообщить_об_ошибке( ОписаниеОшибки());
	////				//Возврат;
	////			КонецПопытки;
	////			
	////			Если СуммаДляКорректировки >=  Выборка.Цена Тогда
	////				Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	////				Ндок.Заполнить(ДокументОбъект.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1;
	////				Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	////					СтрокаУслуги.Сумма = 0;
	////					СтрокаУслуги.Цена =0;
	////					СтрокаУслуги.СуммаНДС = Окр((Выборка.Цена )*0.18,2,РежимОкругления.Окр15как10)-0.01;
	////					СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
	////				КонецЦикла; 
	////				Ндок.Дата = ДатаВыгрузки;
	////				Ндок.КорректироватьБУиНУ = Истина;
	////				Для каждого Движение Из ДокументОбъект.Движения Цикл
	////					Движение.Очистить();
	////					Движение.Записать(); // после записи набор записей остается заполненным
	////				КонецЦикла; 
	////				Ндок.Записать(РежимЗаписиДокумента.Проведение);
	////				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
	////				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	////				
	////				СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
	////				
	////				Если СуммаДляКорректировки = 0 Тогда 
	////					Прервать;	
	////				КонецЕсли;
	////			иначе
	////				Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	////				Ндок.Заполнить(ДокументОбъект.Ссылка); Ндок.БНФОСпособОтраженияКорректировокНаУменьшение = 1; 
	////				Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	////					СтрокаУслуги.Сумма = Выборка.Цена - СуммаДляКорректировки;
	////					СтрокаУслуги.Цена = Выборка.Цена - СуммаДляКорректировки;
	////					СтрокаУслуги.СуммаНДС = Окр((Выборка.Цена - СуммаДляКорректировки)*0.18,2,РежимОкругления.Окр15как10)-0.01;
	////					СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
	////					СуммаДляКорректировки = СуммаДляКорректировки - Выборка.Цена;
	////				КонецЦикла; 
	////				Ндок.Дата = ДатаВыгрузки;
	////				Ндок.КорректироватьБУиНУ = Истина;
	////				Для каждого Движение Из ДокументОбъект.Движения Цикл
	////					Движение.Очистить();
	////					Движение.Записать(); // после записи набор записей остается заполненным
	////				КонецЦикла; 
	////				Ндок.Записать(РежимЗаписиДокумента.Проведение);
	////				Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
	////				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	////				
	////				Прервать;
	////				
	////			КонецЕсли; 
	////			
	////			
	////			//	КонецЦикла;
	////			
	////			
	////			
	////		КонецЦикла;
	////		
	////	КонецЕсли;
	////	
	////КонецЦикла;
	////
	//
	//pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервереDefault от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

Процедура ЕжеднеаныеРеализацииБезНДСНаСервере(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	//База =ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//ТекстПисьма = "";
	//УстановитьПривилегированныйРежим(Истина);
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Command.CommandText = "SELECT    "+ПолучитьПараметрыВыборки()+" 
	//| ContractDT,
	//| ClientDT, 
	//| sum(Amount) Amount
	//| FROM(SELECT [Dt Contract No_] AS ContractDT,contrDT.[Customer No_] ClientDT,Amount 
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1
	//| 						 LEFT OUTER JOIN[%База%].[dbo].[%Фирма%$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	//| WHERE
	//|						[Debit Account No_] = '48802.1'
	//|						AND 
	//|						[Credit Account No_] = '71001.1' 
	//|						AND 
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND 
	//|					[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						 UNION ALL
	//|SELECT [Dt Contract No_] AS ContractDT, contrDT.[Customer No_] ClientDT, 
	//|- Amount AS Expr1
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1
	//|						 LEFT OUTER JOIN[%База%].[dbo].[%Фирма%$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	//|WHERE
	//|						[Debit Account No_] = '71001.1'
	//|						AND 
	//|						[Credit Account No_] = '48802.1'
	//|						AND
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND
	//|						[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						) AS tunion
	//|group by ContractDT,ClientDT
	//|Having sum(Amount) <> 0";
	//
	////Попытка 
	//RecordSet = Command.Execute();
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//RecordSet.MoveFirst();
	//МассивДанных = Новый Массив;
	//МассивДанныхКорректировок = Новый Массив;
	//Пока НЕ RecordSet.EOF() Цикл
	//	Стр = Новый Структура;
	//	Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//	Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//	Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//	//		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
	//	Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//		МассивДанныхКорректировок.Добавить(стр);			
	//	Иначе 	
	//		Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//			МассивДанных.Добавить(стр);
	//		КонецЕсли;			
	//	КонецЕсли;
	//	RecordSet.MoveNext(); 
	//КонецЦикла;
	//RecordSet.Close();
	//Сумма = 0;
	//Счеччик = 0;
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	//
	//	СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	//СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	//СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001986");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	//
	//	ДерКоммент = "#Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ = Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов = 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС = Ложь;
	//	
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам = Стр._48802_1;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = Стр._48802_1;
	//	
	//	ДокументОбъект.ДокументБезНДС = Истина;
	//	ДокументОбъект.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата = КонецДня(ДатаВыгрузки);
	//	//Дата
	//	//			СтрокаДата = СтрЗаменить(ЭлементМассива.ДатаУчета, ".", "");
	//	//			СтрокаДата = Прав(СтрокаДата,4) + Сред(СтрокаДата,3,2) + ?(СтрДлина(СтрокаДата) = 8, Лев(СтрокаДата, 2), "0"+Лев(СтрокаДата, 1));
	//	//ДокументОбъект.Дата = _Дата;			//Дата(СтрокаДата) + 43200;
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента =Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент = ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор",СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент;
	//	//Табличная часть
	//	
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг = ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1;
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование +" "+ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = 0;
	//	
	//	СтрокаУслуг.СчетДоходов = СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	
	//	СтрокаУслуг.БНФОПодразделение = ПодразделениеОрганизации;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00231 Проценты за пользование заемными средствами срочные НБ");
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		Блокировка = Новый БлокировкаДанных;
	//		
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Стр._60323_9);
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231"));
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
	//		
	//		
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций без НДС,"+Символы.ПС;
	//		Счеччик = 	Счеччик + 1;
	//		ЗафиксироватьТранзакцию();
	//	Исключение 
	//		ОтменитьТранзакцию();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЦикла;
	//
	//
КонецПроцедуры 

//Доне
Процедура ПросрочкаНаСервере(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	//База =ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//
	//ТекстПисьма = "";
	//
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Command.CommandText = "SELECT   ContractDT, Sum(Amount) Amount from
	//|(SELECT
	//|	t1.[Dt Contract No_] ContractDT,
	//|	t1.Amount Amount
	//|	 FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 
	//|	 WHERE t1.[Debit Account No_] = '48802.2' 
	//|	 AND ( t1.[Credit Account No_] = '71001.2' ) 
	//|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|Union all
	//|	 SELECT
	//|	 t1.[Dt Contract No_] ContractDT,
	//|	 -t1.Amount
	//|	FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 
	//|	 WHERE t1.[Debit Account No_] = '71001.2' 
	//|	 AND ( t1.[Credit Account No_] = '48802.2' ) 
	//|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|	 ) tunion
	//|	Group by ContractDT	
	//|	 Having Sum(Amount) <> 0";
	////Попытка 
	//RecordSet = Command.Execute();
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//RecordSet.MoveFirst();
	//МассивДанных = Новый Массив;
	//МассивДанныхКорректировок = Новый Массив;
	//Пока НЕ RecordSet.EOF() Цикл
	//	Стр = Новый Структура;
	//	Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//	//	Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//	Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//	//Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
	//	Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//		МассивДанныхКорректировок.Добавить(стр);			
	//	Иначе 	
	//		Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//			МассивДанных.Добавить(стр);
	//		КонецЕсли;			
	//	КонецЕсли;
	//	RecordSet.MoveNext(); 
	//КонецЦикла;
	//RecordSet.Close();
	//Сумма = 0;
	//Счеччик = 0;
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	// Определяем общие данные
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);      
	//	СчетДоходов= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");
	//	СчетНДС= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");
	//	
	//	//СчетДоходов= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");
	//	//СчетНДС= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");
	//	//БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	//СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");
	//	
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00002933");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный= ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	СтавкаНДС= Перечисления.СтавкиНДС.БезНДС;
	//	ВидОперации= Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	//
	//	ДерКоммент = "#Running Interest Контрагент " + Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер", СтрокаТЧ.ДоговорДТ).Владелец.АЭ_Идентификатор + " Договор " + СтрокаТЧ.ДоговорДТ;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов= 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС= Ложь;
	//	
	//	СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
	//	Если Стр.Свойство("_48802_2") Тогда
	//		СчетУчетаРасчетовСКонтрагентом = Стр._48802_2;
	//	КонецЕсли; 
	//	
	//	Если Стр.Свойство("_49402_2") Тогда
	//		СчетУчетаРасчетовСКонтрагентом = Стр._49402_2;
	//	КонецЕсли; 
	//	
	//	
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам= СчетУчетаРасчетовСКонтрагентом;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= СчетУчетаРасчетовСКонтрагентом;
	//	
	//	ДокументОбъект.ДокументБезНДС= Ложь;
	//	ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента= Стр.ДоговорКонтрагента;
	//	ДокументОбъект.Контрагент= Стр.Контрагент;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент; 
	//	//Табличная часть
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1; 
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = 0;
	//	СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
	//	СтрокаУслуг.СчетДоходов= СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00231 Проценты на просроченную часть основного долга НБ");
	//	
	//	
	//	
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		Блокировка = Новый БлокировкаДанных;
	//		
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", СчетУчетаРасчетовСКонтрагентом);
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231"));
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
	//		
	//		
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций на просрочку,"+Символы.ПС;
	//		Счеччик = 	Счеччик + 1;
	//		ЗафиксироватьТранзакцию();
	//	Исключение 
	//		ОтменитьТранзакцию();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки;
	//	
	//	
	//	
	//	//
	//	//Попытка
	//	//	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//	//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//	//	pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций");
	//	//	Счеччик = 	Счеччик + 1;
	//	//Исключение 
	//	//	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//	//	pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
	//	//	pcru_ex_Почта.Сообщить_об_ошибке( ОписаниеОшибки());
	//	//КонецПопытки;
	//КонецЦикла;
	//
	
КонецПроцедуры

//Доне
Процедура ЕжеднеаныеРеализацииНаСервере_новыйблок(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт //  Проценты за пользование заемными
	//База  = ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) AS Amount
	//|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount  AS Amount
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] 
	//|WHERE(t1.[Debit Account No_] = '48802.3') AND (t1.[Credit Account No_] = '71001.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//|(t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|UNION ALL
	//|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] 
	//|WHERE(t1.[Debit Account No_] = '71001.1') AND (t1.[Credit Account No_] = '48802.3') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//| (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	//|Group by ContractDT, ClientDT";
	//Попытка
	//	RecordSet = Command.Execute();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
	//	RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//
	//Попытка
	//	RecordSet.MoveFirst();
	//	МассивДанных = Новый Массив;
	//	МассивДанныхКорректировок = Новый Массив;
	//	Пока НЕ RecordSet.EOF() Цикл
	//		Стр = Новый Структура;
	//		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//		
	//		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//			МассивДанныхКорректировок.Добавить(стр);			
	//		Иначе 	
	//			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//				МассивДанных.Добавить(стр);
	//			КонецЕсли;			
	//		КонецЕсли;
	//		RecordSet.MoveNext(); 
	//	КонецЦикла;
	//	RecordSet.Close();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//
	//Сумма = 0;
	//КоличствоРеализаций = 1;
	//Стр = Неопределено; 
	////СтрокаТЧ.ДоговорДТ   =  "0009141628"
	//ТекстПисьма = "";
	//
	//#Область РЕализации 
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	// Определяем общие данные
	//	СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001986");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//	
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	//
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	ДерКоммент = "#Проценты default new Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	// Шапка
	//	//Общие данные
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов= 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС= Ложь;
	//	
	//	Попытка
	//		ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._48802_3;
	//		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._48802_3;
	//	Исключение
	//		ДокументОбъект.СчетУчетаРасчетовПоАвансам = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
	//		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
	//	КонецПопытки; 
	//	ДокументОбъект.ДокументБезНДС = Истина;
	//	ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент;
	//	//Табличная часть
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1;
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = 0;
	//	СтрокаУслуг.СчетДоходов= СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00231 Проценты за пользование заемными средствами срочные НБ");
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		Блокировка = Новый БлокировкаДанных;
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Стр._48802_3);
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231"));
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
	//		//
	//		Блокировка.Заблокировать();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		КоличствоРеализаций = 	КоличствоРеализаций + 1;
	//		ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций ";
	//		ЗафиксироватьТранзакцию();
	//	Исключение
	//		ОтменитьТранзакцию();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки; 	
	//	
	//КонецЦикла;
	//#КонецОбласти
	//
	//pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

//done
Процедура ЕжеднеаныеРеализации_СервисПакет_НаСервере(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	//База  = ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1)
	//	КонецЕсли; 
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) Amount, sum(VAT) VAT
	//|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount, VAT.Amount AS VAT
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	//|VAT.[Credit Account No_] = '60309.1' AND VAT.[Debit Account No_] = '48803.2' AND t1.[Transaction No_] = VAT.[Transaction No_]
	//|WHERE(t1.[Debit Account No_] = '48803.2') AND (t1.[Credit Account No_] = '71002.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//|(t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|UNION ALL
	//|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1, - VAT.Amount AS VAT
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	//| VAT.[Credit Account No_] = '48803.2' AND VAT.[Debit Account No_] = '60309.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	//|WHERE(t1.[Debit Account No_] = '71002.1') AND (t1.[Credit Account No_] = '48803.2') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//| (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	//|Group by ContractDT, ClientDT";
	//Попытка
	//	RecordSet = Command.Execute();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1);
	//		Возврат;
	//	КонецЕсли; 
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
	//	RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//
	//Попытка
	//	RecordSet.MoveFirst();
	//	МассивДанных = Новый Массив;
	//	МассивДанныхКорректировок = Новый Массив;
	//	Пока НЕ RecordSet.EOF() Цикл
	//		Стр = Новый Структура;
	//		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//		Попытка
	//			Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
	//		Исключение
	//			Стр.Вставить("НДС",0);
	//		КонецПопытки;
	//		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//			МассивДанныхКорректировок.Добавить(стр);			
	//		Иначе 	
	//			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//				МассивДанных.Добавить(стр);
	//			КонецЕсли;			
	//		КонецЕсли;
	//		RecordSet.MoveNext(); 
	//	КонецЦикла;
	//	RecordSet.Close();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Если Счетчик > 10 Тогда
	//		Возврат;
	//	Иначе 
	//		ЕжеднеаныеРеализацииНаСервере(ДатаВыгрузки,Счетчик+1)
	//	КонецЕсли; 
	//КонецПопытки; 
	//
	//Сумма = 0;
	//КоличствоРеализаций = 1;
	//Стр = Неопределено; 
	//
	//ТекстПисьма = "";
	//
	//#Область РЕализации 
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	// Определяем общие данные
	//	СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001460");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	//++ DEV1C-96
	//	Если ДатаВыгрузки < Дата(2019,1,1) ТОгда
	//		СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	//	Иначе
	//		СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
	//	КонецЕсли;	
	//	//-- DEV1C-96
	//	
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	//
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	ДерКоммент = "#Service package default new Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	// Шапка
	//	//Общие данные
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов= 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС = Ложь;
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._48803_2;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._48803_2;
	//	ДокументОбъект.ДокументБезНДС = Ложь;
	//	ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент;
	//	//Табличная часть
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1;
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = СтрокаТЧ.НДС;
	//	СтрокаУслуг.СчетДоходов= СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		Блокировка = Новый БлокировкаДанных;
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Стр._48803_2);
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232"));
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
	//		//
	//		Блокировка.Заблокировать();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
	//		КоличствоРеализаций = 	КоличствоРеализаций + 1;
	//		ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций c НДС, Выписана счет-фактура:"+Строка(РЕз.Ссылка)+Символы.ПС;
	//		ЗафиксироватьТранзакцию();
	//	Исключение
	//		ОтменитьТранзакцию();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки; 	
	//	
	//КонецЦикла;
	//#КонецОбласти
	//
	//ТекстПисьма = ТекстПисьма + "#############################################################################################################################" + Символы.ПС;
	//ТекстПисьма = ТекстПисьма + "############################################Корректировки####################################################################" + Символы.ПС;
	//ТекстПисьма = ТекстПисьма + "#############################################################################################################################" + Символы.ПС;
	//
	//	
	//pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

//*/**
Процедура ЕжеднеаныеРеализации_СервисПакет_НаСервере1(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	//База  = ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) AS Amount 
	//|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount  as  Amount
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] 
	//|WHERE(t1.[Debit Account No_] = '48803.2') AND (t1.[Credit Account No_] = '71002.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//|(t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|UNION ALL
	//|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] 
	//|WHERE(t1.[Debit Account No_] = '71002.1') AND (t1.[Credit Account No_] = '48803.2') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//| (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	//|Group by ContractDT, ClientDT";
	//Попытка
	//	RecordSet = Command.Execute();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
	//	RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//
	//Попытка
	//	RecordSet.MoveFirst();
	//	МассивДанных = Новый Массив;
	//	МассивДанныхКорректировок = Новый Массив;
	//	Пока НЕ RecordSet.EOF() Цикл
	//		Стр = Новый Структура;
	//		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//		
	//		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//			МассивДанныхКорректировок.Добавить(стр);			
	//		Иначе 	
	//			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//				МассивДанных.Добавить(стр);
	//			КонецЕсли;			
	//		КонецЕсли;
	//		RecordSet.MoveNext(); 
	//	КонецЦикла;
	//	RecordSet.Close();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//
	//Сумма = 0;
	//КоличствоРеализаций = 1;
	//Стр = Неопределено; 
	//
	//ТекстПисьма = "";
	//
	//#Область РЕализации 
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	// Определяем общие данные
	//	СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001460");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//	
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	//
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	ДерКоммент = "#Service package default new Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	// Шапка
	//	//Общие данные
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов= 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС= Ложь;
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._48802_3;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._48802_3;
	//	ДокументОбъект.ДокументБезНДС= Ложь;
	//	ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент;
	//	//Табличная часть
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1;
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = 0;
	//	СтрокаУслуг.СчетДоходов= СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		Блокировка = Новый БлокировкаДанных;
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Стр._48803_1);
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232"));
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
	//		//
	//		Блокировка.Заблокировать();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		КоличствоРеализаций = 	КоличствоРеализаций + 1;
	//		ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций c НДС, Выписана счет-фактура:"+Символы.ПС;
	//		ЗафиксироватьТранзакцию();
	//	Исключение
	//		ОтменитьТранзакцию();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки; 	
	//	
	//КонецЦикла;
	//#КонецОбласти
	//
	//pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

//******************************************************************

Процедура ЕжеднеаныеРеализацииНаСервере_новыйблокИП(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	//База  = ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Command.CommandText = "SELECT   "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) AS Amount
	//|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount  AS Amount
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//|[%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] 
	//|WHERE(t1.[Debit Account No_] = '49402.3') AND (t1.[Credit Account No_] = '71001.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//|(t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|UNION ALL
	//|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	//| [%База%].dbo.[%Фирма%$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] 
	//|WHERE(t1.[Debit Account No_] = '71001.1') AND (t1.[Credit Account No_] = '49402.3') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	//| (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	//|Group by ContractDT, ClientDT";
	//Попытка
	//	RecordSet = Command.Execute();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Счетчик = 0;//Обнуляем счетчик
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");
	//	RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//
	//Попытка
	//	RecordSet.MoveFirst();
	//	МассивДанных = Новый Массив;
	//	МассивДанныхКорректировок = Новый Массив;
	//	Пока НЕ RecordSet.EOF() Цикл
	//		Стр = Новый Структура;
	//		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//		
	//		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//			МассивДанныхКорректировок.Добавить(стр);			
	//		Иначе 	
	//			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//				МассивДанных.Добавить(стр);
	//			КонецЕсли;			
	//		КонецЕсли;
	//		RecordSet.MoveNext(); 
	//	КонецЦикла;
	//	RecordSet.Close();
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//
	//Сумма = 0;
	//КоличствоРеализаций = 1;
	//Стр = Неопределено; 
	//
	//ТекстПисьма = "";
	//
	//#Область РЕализации 
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	// Определяем общие данные
	//	СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001986");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//	
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	//
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	ДерКоммент = "#дефолт проценты ип new Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	// Шапка
	//	//Общие данные
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов= 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС= Ложь;
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._49402_3;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._49402_3;
	//	ДокументОбъект.ДокументБезНДС= Ложь;
	//	ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент;
	//	//Табличная часть
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1;
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = 0;
	//	СтрокаУслуг.СчетДоходов= СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00231 Проценты за пользование заемными средствами срочные НБ");
	//	
	//	Попытка
	//		НачатьТранзакцию();
	//		Блокировка = Новый БлокировкаДанных;
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Стр._49402_3);
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232"));
	//		//
	//		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.БНФОБанковский");       
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("СчетАналитическогоУчета", Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000"));
	//		//
	//		Блокировка.Заблокировать();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		КоличствоРеализаций = 	КоличствоРеализаций + 1;
	//		ТекстПисьма = ТекстПисьма + "Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+КоличствоРеализаций+" новых реализаций ";
	//		ЗафиксироватьТранзакцию();
	//	Исключение
	//		ОтменитьТранзакцию();
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	//		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	КонецПопытки; 	
	//	
	//КонецЦикла;
	//#КонецОбласти
	//
	//pcru_ex_Почта.ОтправкаПочты("ЕжеднеаныеРеализацииНаСервере от " + ДатаВыгрузки,ТекстПисьма)
	
КонецПроцедуры

Процедура ЕжеднеаныеРеализацииБезНДСНаСервереИП(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	//База =ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//
	//ТекстПисьма = "";
	//
	//УстановитьПривилегированныйРежим(Истина);
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Command.CommandText = "SELECT    "+ПолучитьПараметрыВыборки()+" 
	//| ContractDT,
	//| ClientDT, 
	//| sum(Amount) Amount
	//| FROM(SELECT [Dt Contract No_] AS ContractDT,contrDT.[Customer No_] ClientDT,Amount 
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1
	//| 						 LEFT OUTER JOIN[%База%].[dbo].[%Фирма%$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	//| WHERE
	//|						[Debit Account No_] = '49402.1'
	//|						AND 
	//|						[Credit Account No_] = '71001.1' 
	//|						AND 
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND 
	//|					[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						 UNION ALL
	//|SELECT [Dt Contract No_] AS ContractDT, contrDT.[Customer No_] ClientDT, 
	//|- Amount AS Expr1
	//|FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1
	//|						 LEFT OUTER JOIN[%База%].[dbo].[%Фирма%$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	//|WHERE
	//|						[Debit Account No_] = '71001.1'
	//|						AND 
	//|						[Credit Account No_] = '49402.1'
	//|						AND
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND
	//|						[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						) AS tunion
	//|group by ContractDT,ClientDT
	//|Having sum(Amount) <> 0";
	//
	////Попытка 
	//RecordSet = Command.Execute();
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//RecordSet.MoveFirst();
	//МассивДанных = Новый Массив;
	//МассивДанныхКорректировок = Новый Массив;
	//Пока НЕ RecordSet.EOF() Цикл
	//	Стр = Новый Структура;
	//	Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//	Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//	Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//	//	Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
	//	Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//		МассивДанныхКорректировок.Добавить(стр);			
	//	Иначе 	
	//		Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//			МассивДанных.Добавить(стр);
	//		КонецЕсли;			
	//	КонецЕсли;
	//	RecordSet.MoveNext(); 
	//КонецЦикла;
	//RecordSet.Close();
	//Сумма = 0;
	//Счеччик = 0;
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	//
	//	СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	
	//	//СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	//СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//	//СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001986");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	//	ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	//
	//	ДерКоммент = "#ИП Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	// Шапка
	//	//Общие данные
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ = Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов = 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС = Ложь;
	//	
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам = Стр._49402_1;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = Стр._49402_1;
	//	
	//	ДокументОбъект.ДокументБезНДС = Ложь;
	//	ДокументОбъект.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата = КонецДня(ДатаВыгрузки);
	//	//Дата
	//	//			СтрокаДата = СтрЗаменить(ЭлементМассива.ДатаУчета, ".", "");
	//	//			СтрокаДата = Прав(СтрокаДата,4) + Сред(СтрокаДата,3,2) + ?(СтрДлина(СтрокаДата) = 8, Лев(СтрокаДата, 2), "0"+Лев(СтрокаДата, 1));
	//	//ДокументОбъект.Дата = _Дата;			//Дата(СтрокаДата) + 43200;
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента =Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент = ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор",СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент;
	//	//Табличная часть
	//	
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг = ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1;
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование +" "+ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = 0;
	//	
	//	СтрокаУслуг.СчетДоходов = СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	
	//	СтрокаУслуг.БНФОПодразделение = ПодразделениеОрганизации;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00231 Проценты за пользование заемными средствами срочные НБ");
	//	
	//	Попытка
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций");
	//		Счеччик = 	Счеччик + 1;
	//	Исключение 
	//		pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
	//		Текстошибки=ОписаниеОшибки();
	//		pcru_ex_Почта.Сообщить_об_ошибке(Текстошибки);
	//	КонецПопытки;
	//КонецЦикла;
	//
	//
	////Корректировки	
	//Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
	//	СуммаДляКорректировки = - СтрокаТЧ.Сумма;
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	//	|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
	//	|	ВЫБОР
	//	|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
	//	|			ТОГДА ВложенныйЗапрос.СуммаДокумента
	//	|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
	//	|	КОНЕЦ КАК Оплата
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	//	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	//	|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
	//	|	ИЗ
	//	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
	//	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
	//	|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
	//	|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	//	|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
	//	|	ГДЕ
	//	|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
	//	|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
	//	|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,28) = ""#Проценты на основную часть""
	//	|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,28) = ""#Проценты на основную часть""
	//	|	
	//	|	СГРУППИРОВАТЬ ПО
	//	|		РеализацияТоваровУслуг.Ссылка,
	//	|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
	//	|ГДЕ
	//	|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ВложенныйЗапрос.Ссылка.МоментВремени";
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
	//	Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
	//		Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	//		Ндок.Заполнить(Выборка.Ссылка);
	//		Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	//			СтрокаУслуги.Сумма = СуммаКорректировки;
	//			СтрокаУслуги.Цена = СуммаКорректировки;
	//			СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
	//			СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
	//		КонецЦикла; 
	//		Ндок.Записать(РежимЗаписиДокумента.Проведение);
	//		СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
	//	КонецЦикла;
	//	
	//	#Область ПроводкаКорректировки 
	//	Если СуммаДляКорректировки > 0 Тогда 
	//		
	//		Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//		ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
	//		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
	//		//
	//		ОперацияОбъект.Организация = Организация;
	//		ОперацияОбъект.Комментарий = "#Корректировка ИП Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//		ОперацияОбъект.Содержание = "#Корректировка ИП Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//		//
	//		ОперацияОбъект.Проведен = Истина;
	//		ОперацияОбъект.Записать();
	//		//
	//		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
	//		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
	//		НаборЗаписей.Прочитать(); 
	//		Сумма = 0;
	//		//
	//		СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//		УсловияКредита = СтрСчета.УсловиеЗайма; 	
	//		Контрагент =СтрСчета.Контрагент; 
	//		Договор = СтрСчета.ДоговорКонтрагента; 
	//		
	//		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		НоваяЗапись = НаборЗаписей.Добавить(); 
	//		НоваяЗапись.Активность = Истина;
	//		//
	//		
	//		//НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
	//		
	//		если  СтрСчета.свойство("_48802_1") тогда
	//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
	//		Иначеесли  СтрСчета.свойство("_49402_1") тогда
	//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
	//		Иначе
	//			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
	//		КонецЕсли;
	//		
	//		НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
	//		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
	//		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
	//		//
	//		НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
	//		НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
	//		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
	//		//
	//		НоваяЗапись.Содержание= "#Корректировка ИП Interest Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
	//		НоваяЗапись.Организация = Организация;
	//		Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
	//			НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
	//		КонецЕсли; 
	//		Если НоваяЗапись.СчетДт.Валютный Тогда
	//			НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
	//			НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
	//		КонецЕсли;
	//		Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
	//			НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
	//		КонецЕсли; 
	//		//
	//		Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
	//			НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
	//		КонецЕсли; 
	//		//
	//		Если НоваяЗапись.СчетКт.Валютный Тогда
	//			НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
	//			НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
	//		КонецЕсли;
	//		//
	//		Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
	//			НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
	//		КонецЕсли; 
	//		//
	//		НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
	//		НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
	//		НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
	//		//
	//		Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
	//			НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
	//			Продолжить;
	//		КонецЕсли;
	//		Попытка
	//			Сумма = Сумма + СтрокаТЧ.Сумма;
	//		Исключение
	//			Сумма = Сумма + 0;
	//		КонецПопытки;
	//		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		
	//		НаборЗаписей.Записать(Истина);
	//		ОперацияОбъект.СуммаОперации = Сумма;
	//		ОперацияОбъект.Записать();
	//		
	//	КонецЕсли;
	//	#КонецОбласти
	//	
	//КонецЦикла;
	////
	
КонецПроцедуры 

Процедура ПросрочкаНаСервереИП(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	//База =ПолучитьБазу();
	//Фирма = ПолучитьФирму();
	//
	//ТекстПисьма = "";
	//
	//
	//Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//СтрокаПодключения = 
	//"Provider=MSDASQL.1;
	//|UID=1c_test;
	//|Pwd=tset_c1;
	//|Extended Properties=""DRIVER=SQL Server;
	//|SERVER=RUSPBSQLPROD\CRMRU;
	//|APP=1С Reglament Job;
	//|DATABASE="+База+"""";
	//Connection= Новый COMОбъект("ADODB.Connection");
	//Command= Новый COMОбъект("ADODB.Command");
	//RecordSet = Новый COMОбъект("ADODB.RecordSet");
	//Попытка
	//	Connection.ConnectionString =СтрокаПодключения;	 
	//	Connection.Open();
	//	Command.ActiveConnection = Connection;
	//Исключение
	//	pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
	//	Возврат;
	//КонецПопытки; 
	//Command.CommandText = "SELECT    ContractDT, Sum(Amount) Amount from
	//|(SELECT
	//|	t1.[Dt Contract No_] ContractDT,
	//|	t1.Amount Amount
	//|	 FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 
	//|	 WHERE t1.[Debit Account No_] = '49402.2' 
	//|	 AND ( t1.[Credit Account No_] = '71001.2' ) 
	//|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|Union all
	//|	 SELECT
	//|	 t1.[Dt Contract No_] ContractDT,
	//|	 -t1.Amount
	//|	FROM[%База%].dbo.[%Фирма%$G_L Correspondence Entry] AS t1 
	//|	 WHERE t1.[Debit Account No_] = '71001.2' 
	//|	 AND ( t1.[Credit Account No_] = '49402.2' ) 
	//|	 AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	//|	 ) tunion
	//|	Group by ContractDT	
	//|	 Having Sum(Amount) <> 0";
	////Попытка 
	//RecordSet = Command.Execute();
	//Если RecordSet.EOF() И RecordSet.BOF() Тогда
	//	//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
	//	Возврат;
	//КонецЕсли;
	//RecordSet.MoveFirst();
	//МассивДанных = Новый Массив;
	//МассивДанныхКорректировок = Новый Массив;
	//Пока НЕ RecordSet.EOF() Цикл
	//	Стр = Новый Структура;
	//	Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
	//	//		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
	//	Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
	//	//		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
	//	Если число(RecordSet.Fields("Amount").Value) <0 Тогда
	//		МассивДанныхКорректировок.Добавить(стр);			
	//	Иначе 	
	//		Если число(RecordSet.Fields("Amount").Value)>0 Тогда
	//			МассивДанных.Добавить(стр);
	//		КонецЕсли;			
	//	КонецЕсли;
	//	RecordSet.MoveNext(); 
	//КонецЦикла;
	//RecordSet.Close();
	//Сумма = 0;
	//Счеччик = 0;
	//Для Каждого СтрокаТЧ Из МассивДанных Цикл
	//	// Определяем общие данные
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	
	//	СчетДоходов= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");
	//	СчетНДС= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");
	//	БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");
	//	//
	//	//СчетДоходов= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");
	//	//СчетНДС= Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");
	//	//БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
	//	//СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");
	//	//
	//	Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00002933");
	//	ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
	//	Ответственный= ПараметрыСеанса.ТекущийПользователь;
	//	СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
	//	СтавкаНДС= Перечисления.СтавкиНДС.БезНДС;
	//	ВидОперации= Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	//	Валюта = Справочники.Валюты.НайтиПоКоду("643");
	//	Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
	//	ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
	//	НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
	//	//
	//	ДерКоммент = "ИП Running Interest Контрагент " + Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер", СтрокаТЧ.ДоговорДТ).Владелец.АЭ_Идентификатор + " Договор " + СтрокаТЧ.ДоговорДТ;
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|ГДЕ
	//	|	РеализацияТоваровУслуг.Дата = &Дата
	//	|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
	//	|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
	//	|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
	//	
	//	Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
	//	Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
	//	Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
	//	Результат = Запрос.Выполнить();
	//	Выборка = Результат.Выбрать();
	//	Если Выборка.Следующий() Тогда
	//		Если ТолькоНовые Тогда
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	иначе
	//		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	КонецЕсли;
	//	
	//	ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
	//	ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
	//	ДокументОбъект.ВидОперации = ВидОперации;
	//	ДокументОбъект.Организация = Организация;
	//	ДокументОбъект.ВалютаДокумента = Валюта;
	//	ДокументОбъект.КурсВзаиморасчетов= 1;
	//	ДокументОбъект.КратностьВзаиморасчетов = 1;
	//	ДокументОбъект.Ответственный = Ответственный;
	//	ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
	//	ДокументОбъект.СуммаВключаетНДС= Ложь;
	//	ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._49402_2;
	//	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._49402_2;
	//	ДокументОбъект.ДокументБезНДС= Ложь;
	//	ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
	//	ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
	//	ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
	//	//Данные из массива
	//	ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
	//	ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
	//	ДокументОбъект.Комментарий = ДерКоммент; 
	//	//Табличная часть
	//	ДокументОбъект.Услуги.Очистить();
	//	СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
	//	СтрокаУслуг.Количество = 1; 
	//	СтрокаУслуг.Номенклатура = Номенклатура;
	//	СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
	//	СтрокаУслуг.СтавкаНДС= СтавкаНДС;
	//	СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
	//	СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
	//	СтрокаУслуг.СуммаНДС = 0;
	//	СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
	//	СтрокаУслуг.СчетДоходов= СчетДоходов;
	//	СтрокаУслуг.СчетРасходов = СчетРасходов;
	//	СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
	//	СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
	//	СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
	//	СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00231 Проценты на просроченную часть основного долга НБ");
	//	Попытка
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	//		pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций");
	//		Счеччик = 	Счеччик + 1;
	//	Исключение 
	//		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
	//		pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
	//		pcru_ex_Почта.Сообщить_об_ошибке( ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЦикла;
	//
	//
	////Корректировки	
	//Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
	//	СуммаДляКорректировки = - СтрокаТЧ.Сумма;
	//	Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	//	|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
	//	|	ВЫБОР
	//	|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
	//	|			ТОГДА ВложенныйЗапрос.СуммаДокумента
	//	|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
	//	|	КОНЕЦ КАК Оплата
	//	|ИЗ
	//	|	(ВЫБРАТЬ
	//	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	//	|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	//	|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
	//	|	ИЗ
	//	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
	//	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
	//	|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
	//	|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
	//	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	//	|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
	//	|	ГДЕ
	//	|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
	//	|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
	//	|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента  и Подстрока(РеализацияТоваровУслуг1.Комментарий,1,28) = ""#Проценты на основную часть""
	//	|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента   и Подстрока(РеализацияТоваровУслуг.Комментарий,1,28) = ""#Проценты на основную часть""
	//	|	
	//	|	СГРУППИРОВАТЬ ПО
	//	|		РеализацияТоваровУслуг.Ссылка,
	//	|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
	//	|ГДЕ
	//	|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ВложенныйЗапрос.Ссылка.МоментВремени";
	//	Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
	//	Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Пока Выборка.Следующий() Цикл
	//		СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
	//		Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
	//		Ндок.Заполнить(Выборка.Ссылка);
	//		Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
	//			СтрокаУслуги.Сумма = СуммаКорректировки;
	//			СтрокаУслуги.Цена = СуммаКорректировки;
	//			СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
	//			СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
	//		КонецЦикла; 
	//		Ндок.Записать(РежимЗаписиДокумента.Проведение);
	//		СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
	//	КонецЦикла;
	//	
	//	#Область Проводка3 
	//	Если СуммаДляКорректировки > 0 Тогда 
	//		
	//		Организация = Справочники.Организации.НайтиПоКоду("000000001");
	//		ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
	//		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
	//		//
	//		ОперацияОбъект.Организация = Организация;
	//		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	//		
	//		ОперацияОбъект.Комментарий = "#Корректировка ИП Running Interest  Договор "+СтрокаТЧ.ДоговорДТ;
	//		ОперацияОбъект.Содержание = "#Корректировка ИП Running Interest  Договор "+СтрокаТЧ.ДоговорДТ;
	//		//
	//		ОперацияОбъект.Проведен = Истина;
	//		ОперацияОбъект.Записать();
	//		//
	//		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
	//		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
	//		НаборЗаписей.Прочитать(); 
	//		Сумма = 0;
	//		//
	//		СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
	//		УсловияКредита = СтрСчета.УсловиеЗайма; 	
	//		Контрагент =СтрСчета.Контрагент; 
	//		Договор = СтрСчета.ДоговорКонтрагента; 
	//		
	//		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		НоваяЗапись = НаборЗаписей.Добавить(); 
	//		НоваяЗапись.Активность = Истина;
	//		//
	//		если  СтрСчета.свойство("_48802_1") тогда
	//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
	//		Иначеесли  СтрСчета.свойство("_49402_1") тогда
	//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._49402_1; 
	//		Иначе
	//			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("0000081000000000000000001");
	//		КонецЕсли;
	//		
	//		//			НоваяЗапись.СчетАналитическогоУчетаДт = СтрСчета._48802_1; 
	//		НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
	//		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
	//		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
	//		//
	//		НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
	//		НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
	//		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
	//		//
	//		НоваяЗапись.Содержание= "#Корректировка ИП Running Interest  Договор "+СтрокаТЧ.ДоговорДТ;
	//		НоваяЗапись.Организация = Организация;
	//		Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
	//			НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
	//		КонецЕсли; 
	//		Если НоваяЗапись.СчетДт.Валютный Тогда
	//			НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
	//			НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
	//		КонецЕсли;
	//		Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
	//			НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
	//		КонецЕсли; 
	//		//
	//		Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
	//			НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
	//		КонецЕсли; 
	//		//
	//		Если НоваяЗапись.СчетКт.Валютный Тогда
	//			НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
	//			НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
	//		КонецЕсли;
	//		//
	//		Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
	//			НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
	//		КонецЕсли; 
	//		//
	//		НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
	//		НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
	//		НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
	//		//
	//		Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
	//			НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
	//			Продолжить;
	//		КонецЕсли;
	//		Попытка
	//			Сумма = Сумма + СтрокаТЧ.Сумма;
	//		Исключение
	//			Сумма = Сумма + 0;
	//		КонецПопытки;
	//		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		
	//		НаборЗаписей.Записать(Истина);
	//		ОперацияОбъект.СуммаОперации = Сумма;
	//		ОперацияОбъект.Записать();
	//		
	//		
	//	КонецЕсли;
	//	#КонецОбласти
	//	
	//КонецЦикла;
	////
	
КонецПроцедуры

Процедура ЕжеднеаныеРеализацииНаСервереИП(ДатаВыгрузки,Счетчик = 0,ТолькоНовые = Ложь) Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	ТекстПисьма = "";
	
	
	УстановитьПривилегированныйРежим(Истина);
	Организация = Справочники.Организации.НайтиПоКоду("000000001");
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	Command.CommandText = "SELECT    "+ПолучитьПараметрыВыборки()+" ContractDT, ClientDT, Sum(Amount) Amount, sum(VAT) VAT
	|FROM(SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, t1.Amount, VAT.Amount AS VAT
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	|["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	|VAT.[Credit Account No_] = '60309.1' AND VAT.[Debit Account No_] = '49403.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '49403.1') AND (t1.[Credit Account No_] = '71002.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	|(t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')
	|UNION ALL
	|SELECT t1.[Dt Contract No_] AS ContractDT, contrDT.[Customer No_] AS ClientDT, - t1.Amount AS Expr1, - VAT.Amount AS VAT
	|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1 LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$Contract] AS contrDT ON t1.[Dt Contract No_] = contrDT.[Contract No_] LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$Contract] AS contrCT ON t1.[Ct Contract No_] = contrCT.[Contract No_] LEFT OUTER JOIN
	| ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS VAT ON t1.[Dt Contract No_] = VAT.[Dt Contract No_] AND 
	| VAT.[Credit Account No_] = '49403.1' AND VAT.[Debit Account No_] = '60309.1' AND t1.[Transaction No_] = VAT.[Transaction No_]
	|WHERE(t1.[Debit Account No_] = '71002.1') AND (t1.[Credit Account No_] = '49403.1') AND (t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000') AND 
	| (t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59')) AS tunion
	|Group by ContractDT, ClientDT";
	RecordSet = Command.Execute();
	Если RecordSet.EOF() И RecordSet.BOF() Тогда
		//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
		Возврат;
	КонецЕсли;
	RecordSet.MoveFirst();
	МассивДанных = Новый Массив;
	МассивДанныхКорректировок = Новый Массив;
	Пока НЕ RecordSet.EOF() Цикл
		Стр = Новый Структура;
		Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
		Стр.Вставить("КонтрагентДТ", Строка(RecordSet.Fields("ClientDT").Value));
		Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
		Стр.Вставить("НДС", число(RecordSet.Fields("VAT").Value));
		Если число(RecordSet.Fields("Amount").Value) <0 Тогда
			МассивДанныхКорректировок.Добавить(стр);			
		Иначе 	
			Если число(RecordSet.Fields("Amount").Value)>0 Тогда
				МассивДанных.Добавить(стр);
			КонецЕсли;			
		КонецЕсли;
		RecordSet.MoveNext(); 
	КонецЦикла;
	RecordSet.Close();
	Сумма = 0;
	Счеччик = 0;
	Стр = Неопределено; 
	Для Каждого СтрокаТЧ Из МассивДанных Цикл
		Стр= pcru_УМФО.ОткрытьСчетаИП(СтрокаТЧ.ДоговорДТ);
		// Определяем общие данные
		СчетДоходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		СчетНДС = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6030981000000000000100000");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
		СчетРасходов = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
		//
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду("00-00001460");
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("000000003");
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически;
		//++ DEV1C-96
		Если ДатаВыгрузки < Дата(2019,1,1) ТОгда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;	
		//-- DEV1C-96
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
		Валюта = Справочники.Валюты.НайтиПоКоду("643");
		Субконто = Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000014"); // !!!ПОМЕНЯТЬ!!!
		ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель;
		НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоКоду("000000001");
		//
		БНФОСчетУчетаНДСОплаченный = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");
		ДерКоммент = "#ИП Service package Контрагент "+СтрокаТЧ.КонтрагентДТ + " Договор "+СтрокаТЧ.ДоговорДТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата = &Дата
		|	И РеализацияТоваровУслуг.Комментарий ПОДОБНО &Комментарий
		|	И РеализацияТоваровУслуг.Контрагент = &Контрагент
		|	И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента";
		
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",ДерКоммент );
		Запрос.УстановитьПараметр("Контрагент",Стр.Контрагент );
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТолькоНовые Тогда
				Продолжить;
			КонецЕсли; 
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		иначе
			ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		
		// Шапка
		//Общие данные
		ДокументОбъект.БНФОПризнакДоверительногоУправления = Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
		ДокументОбъект.БНФОВидДеятельностиНПФ= Перечисления.БНФОВидыДеятельностиНПФ.УставнаяДеятельность;
		ДокументОбъект.ВидОперации = ВидОперации;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ВалютаДокумента = Валюта;
		ДокументОбъект.КурсВзаиморасчетов= 1;
		ДокументОбъект.КратностьВзаиморасчетов = 1;
		ДокументОбъект.Ответственный = Ответственный;
		ДокументОбъект.СпособЗачетаАвансов = СпособЗачетаАванса;
		ДокументОбъект.СуммаВключаетНДС= Ложь;
		ДокументОбъект.СчетУчетаРасчетовПоАвансам= Стр._49403_1;
		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом= Стр._49403_1;
		ДокументОбъект.ДокументБезНДС= Ложь;
		ДокументОбъект.ВидЭлектронногоДокумента= ВидЭлектронногоДокумента;
		ДокументОбъект.ПодразделениеОрганизации= ПодразделениеОрганизации; 
		ДокументОбъект.Дата= КонецДня(ДатаВыгрузки);
		//Данные из массива
		ДокументОбъект.ДоговорКонтрагента= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Номер",СтрокаТЧ.ДоговорДТ);
		ДокументОбъект.Контрагент= ДокументОбъект.ДоговорКонтрагента.Владелец;//Справочники.Контрагенты.НайтиПоРеквизиту("АЭ_Идентификатор", СтрокаТЧ.КонтрагентДТ);
		ДокументОбъект.Комментарий = ДерКоммент;
		//Табличная часть
		ДокументОбъект.Услуги.Очистить();
		СтрокаУслуг= ДокументОбъект.Услуги.Добавить();
		СтрокаУслуг.Количество = 1;
		СтрокаУслуг.Номенклатура = Номенклатура;
		СтрокаУслуг.Содержание = Номенклатура.Наименование + " " + ДокументОбъект.ДоговорКонтрагента.Наименование;
		СтрокаУслуг.СтавкаНДС= СтавкаНДС;
		СтрокаУслуг.Цена = СтрокаТЧ.Сумма;
		СтрокаУслуг.Сумма= СтрокаТЧ.Сумма;
		СтрокаУслуг.СуммаНДС = СтрокаТЧ.НДС;
		СтрокаУслуг.СчетДоходов= СчетДоходов;
		СтрокаУслуг.СчетРасходов = СчетРасходов;
		СтрокаУслуг.СчетУчетаНДСПоРеализации = СчетНДС;
		СтрокаУслуг.БНФОСчетУчетаНДСОплаченный = БНФОСчетУчетаНДСОплаченный;
		СтрокаУслуг.БНФОПодразделение= ПодразделениеОрганизации;
		СтрокаУслуг.Субконто = НоменклатурнаяГруппа; 
		СтрокаУслуг.БНФОСтатьяДоходов= Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом");
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОбъект.Ссылка);			 
			Счеччик = 	Счеччик + 1;
			pcru_ex_Почта.Сообщить_об_ошибке("Создано "+Строка(ДокументОбъект.ССылка)+" Всего создано "+Счеччик+" новых реализаций");
		Исключение 
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
			pcru_ex_Почта.Сообщить_об_ошибке("Не удалось сформировать документы!");	
			pcru_ex_Почта.Сообщить_об_ошибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	//Корректировки	
	Для Каждого СтрокаТЧ Из МассивДанныхКорректировок Цикл
		СуммаДляКорректировки = - СтрокаТЧ.Сумма;
		СуммаДляКорректировкиНДС = - СтрокаТЧ.НДС;
		Стр= pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.СуммаДокументаИтог <= &Оплата
		|			ТОГДА ВложенныйЗапрос.СуммаДокумента
		|		ИНАЧЕ ВложенныйЗапрос.СуммаДокумента + &Оплата - ВложенныйЗапрос.СуммаДокументаИтог
		|	КОНЕЦ КАК Оплата
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|		СУММА(РеализацияТоваровУслуг1.СуммаДокумента) КАК СуммаДокументаИтог
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг1
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации1
		|				ПО РеализацияТоваровУслуг1.Ссылка = КорректировкаРеализации1.ДокументРеализации
		|			ПО РеализацияТоваровУслуг.МоментВремени >= РеализацияТоваровУслуг1.МоментВремени
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|			ПО РеализацияТоваровУслуг.Ссылка = КорректировкаРеализации.ДокументРеализации
		|	ГДЕ
		|		КорректировкаРеализации.Ссылка ЕСТЬ NULL
		|		И КорректировкаРеализации1.Ссылка ЕСТЬ NULL
		|		И РеализацияТоваровУслуг1.ДоговорКонтрагента = &ДоговорКонтрагента
		|		И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		|	    И РеализацияТоваровУслуг.Проведен и Подстрока(РеализацияТоваровУслуг.Комментарий,1,16) = ""#Service package""
		|	СГРУППИРОВАТЬ ПО
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СуммаДокументаИтог - ВложенныйЗапрос.СуммаДокумента < &Оплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Ссылка.МоментВремени";
		Запрос.УстановитьПараметр("ДоговорКонтрагента",Стр.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Оплата",СуммаДляКорректировки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СуммаКорректировки = Выборка.СуммаДокумента - Выборка.Оплата;
			Ндок = Документы.КорректировкаРеализации.СоздатьДокумент();
			Ндок.Заполнить(Выборка.Ссылка);
			Для каждого СтрокаУслуги Из Ндок.Услуги Цикл
				СтрокаУслуги.Сумма = СуммаКорректировки;
				СтрокаУслуги.Цена = СуммаКорректировки;
				СтрокаУслуги.СуммаНДС = Окр(СуммаКорректировки*18/118,2,РежимОкругления.Окр15как20);
				СтрокаУслуги.Количество = ?(СтрокаУслуги.Сумма = 0,0,1);
			КонецЦикла; 
			Ндок.Дата = ДатаВыгрузки;
			Ндок.КорректироватьБУиНУ = Истина;
			Ндок.Записать(РежимЗаписиДокумента.Проведение);
			СуммаДляКорректировки = СуммаДляКорректировки - СуммаКорректировки;
			Рез = УчетНДСВызовСервера.СоздатьСчетФактуруВыданныйНаОсновании(Ндок.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	//
	
	//
КонецПроцедуры

//******************************************************************


Процедура НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//	Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере2","НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	//Command.CommandText = "SELECTtunion.ContractDT ContractDT , sum(tunion.Amount) Amount
	//|FROM(SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//|[Ct Contract No_] AS ContractCT, Amount, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетДт+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND 
	//|					[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						 UNION ALL
	//|SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//| [Ct Contract No_] AS ContractCT, - Amount AS Expr1, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетДт+"'
	//|						AND
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND
	//|						[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						) AS tunion
	//|group byContractDT
	//|Having sum(Amount) <> 0";
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+" 
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	//|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	//|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//    |LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			//			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере2","НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
	Попытка
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере2 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.Проведен = Истина;
	ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);
	ОперацияОбъект.Записать();
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Сумма = 0;
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			//++ Севрюгин А.А  Ticket#1027083
			НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			Если СтрокаТЧ.СчетДТ = "60322.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");
			КонецЕсли;
			Если СтрокаТЧ.СчетДТ = "60322.11" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000002000000");
			КонецЕсли;
			//-- Севрюгин А.А  Ticket#1027083
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 1, Контрагент); 
			//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 2, Договор); 			
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//ПромСчет
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли; 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			//НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			//++ Севрюгин А.А  Ticket#1027083
			НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			Если СтрокаТЧ.СчетКТ = "60322.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");
			КонецЕсли;
			Если СтрокаТЧ.СчетКТ = "60322.11" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000002000000");
			КонецЕсли;
			//-- Севрюгин А.А  Ticket#1027083
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли; 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти	
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере2","НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры

Процедура НеУниверсальныйОбменНаСервере2_OLD(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик = 0,ТолькоНовые = Ложь)Экспорт
	База =ПолучитьБазу();
	Фирма = ПолучитьФирму();
	
	#Область ОБЛАСТЬ1
	СтрокаПодключения = 
	"Provider=MSDASQL.1;
	|UID=1c_test;
	|Pwd=tset_c1;
	|Extended Properties=""DRIVER=SQL Server;
	|SERVER=RUSPBSQLPROD\CRMRU;
	|APP=1С Reglament Job;
	|DATABASE="+База+"""";
	Connection= Новый COMОбъект("ADODB.Connection");
	Command= Новый COMОбъект("ADODB.Command");
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	Попытка
		Connection.ConnectionString =СтрокаПодключения;	 
		//	Command.CommandTimeOut = 300000;
		Connection.Open();
		Command.ActiveConnection = Connection;
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере2","НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки; 
	//Command.CommandText = "SELECTtunion.ContractDT ContractDT , sum(tunion.Amount) Amount
	//|FROM(SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//|[Ct Contract No_] AS ContractCT, Amount, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетДт+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND 
	//|					[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						 UNION ALL
	//|SELECT[Posting Date] AS PostingDate, [Debit Account No_] AS AccountDT, [Dt Contract No_] AS ContractDT, [Credit Account No_] AS AccountCT, 
	//| [Ct Contract No_] AS ContractCT, - Amount AS Expr1, [Debit Entry No_]
	//|FROM["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	//|WHERE
	//|						[Debit Account No_] = '"+СчетКТ+"'
	//|						AND 
	//|						[Credit Account No_] = '"+СчетДт+"'
	//|						AND
	//|						[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	//|						AND
	//|						[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'
	//|						) AS tunion
	//|group byContractDT
	//|Having sum(Amount) <> 0";
	
	Command.CommandText = "SELECT "+ПолучитьПараметрыВыборки()+" 
	|t1.[Debit Account No_],
	|t1.[Credit Account No_],
	|t1.[Dt Contract No_] AS ContractDT,
	|contrDT.[Customer No_] ClientDT,
	|t1.Amount,
	|Isnull(t2.[Debit Account No_],'-') Debitacc,
	|t1.[Document No_] DOCN,
	|t4.Description
	|FROM ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t1
	|LEFT OUTER JOIN["+База+"].[dbo].["+Фирма+"$Contract] AS contrDT on t1.[Dt Contract No_] = contrDT.[Contract No_]
	|LEFT OUTER JOIN(select distinct t2.[Debit Account No_],t2.[Transaction No_] from ["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 where t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1' ) AS t2  on t1.[Transaction No_] = t2.[Transaction No_] 
	//    |LEFT OUTER JOIN["+База+"].dbo.["+Фирма+"$G_L Correspondence Entry] AS t2 on t1.[Transaction No_] = t2.[Transaction No_] and(t2.[Debit Account No_] = '48809.1' or t2.[Debit Account No_] = '61217.1')
	|LEFT OUTER JOIN ["+База+"].dbo.["+Фирма+"$G_L Entry] AS t4 ON t1.[Debit Entry No_] = t4.[Entry No_] 
	|WHERE
	|t1.[Debit Account No_] = '"+СчетДт+"'
	|AND 
	|t1.[Credit Account No_] = '"+СчетКТ+"' 
	|AND 
	|t1.[Posting Date] >= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 00:00:00.000'
	|AND 
	|t1.[Posting Date] <= '"+СтрЗаменить(Год(ДатаВыгрузки),Символы.НПП,"")+"-"+Строка(Месяц(ДатаВыгрузки))+"-"+Строка(День(ДатаВыгрузки))+" 23:59:59'";
	
	Попытка
		RecordSet = Command.Execute();
		Если RecordSet.EOF() И RecordSet.BOF() Тогда
			//pcru_ex_Почта.Сообщить_об_ошибке("По заданным условиям ничего не найдено.");RecordSet.Close();
			Возврат;
		КонецЕсли;
		RecordSet.MoveFirst();
		МассивДанных = Новый Массив;
		Пока НЕ RecordSet.EOF() Цикл
			Стр = Новый Структура;
			Стр.Вставить("ДоговорДТ", Строка(RecordSet.Fields("ContractDT").Value));
			Стр.Вставить("Сумма", число(RecordSet.Fields("Amount").Value));
			Стр.Вставить("СчетДТ", СчетДт);
			Стр.Вставить("СчетКТ", СчетКТ);
			Стр.Вставить("ПромСчет", Строка(RecordSet.Fields("Debitacc").Value));
			Стр.Вставить("ОписаниеПроводки", Строка(RecordSet.Fields("DOCN").Value));
			МассивДанных.Добавить(стр);			
			RecordSet.MoveNext(); 
		КонецЦикла;
		RecordSet.Close();
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере2","НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки;
	
	Попытка
		Организация = Справочники.Организации.НайтиПоКоду("000000001");
		Комментарий = "#НеУниверсальныйОбменНаСервере2 от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БНФОМемориальныйОрдер.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БНФОМемориальныйОрдер КАК БНФОМемориальныйОрдер
		|ГДЕ
		|	БНФОМемориальныйОрдер.Дата = &Дата
		|	И БНФОМемориальныйОрдер.Комментарий ПОДОБНО &Комментарий";
		Запрос.УстановитьПараметр("Дата",КонецДня(ДатаВыгрузки) );
		Запрос.УстановитьПараметр("Комментарий",Комментарий);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда 
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Запрос1= Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			|	БНФОБанковский.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрБухгалтерии.БНФОБанковский КАК БНФОБанковский
			|ГДЕ
			|	БНФОБанковский.Регистратор = &Регистратор";
			Запрос1.УстановитьПараметр("Регистратор",Выборка.Ссылка );
			Если не Запрос1.Выполнить().Пустой() и ТолькоНовые Тогда
				Возврат;
			КонецЕсли;  
			
		Иначе	
			ОперацияОбъект = Документы.БНФОМемориальныйОрдер.СоздатьДокумент();
		КонецЕсли;
		
		
		ОперацияОбъект.Дата = КонецДня(ДатаВыгрузки);
		
		ОперацияОбъект.Организация = Организация;
		ОперацияОбъект.Комментарий = Комментарий;
		ОперацияОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ОперацияОбъект.Содержание = "#Ежедневная загрузка операций из NAV от "+Строка(КонецДня(ДатаВыгрузки))+" по счетам "+СчетДт+"-"+СчетКТ;
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаИзНав", Истина);

		ОперацияОбъект.Проведен = Истина;
		ОперацияОбъект.Записать();
		//
		НаборЗаписей = РегистрыБухгалтерии.БНФОБанковский.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Установить(ОперацияОбъект.Ссылка); 
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Сумма = 0;
		
		Для Каждого СтрокаТЧ Из МассивДанных Цикл
			СтрСчета = pcru_УМФО.ОткрытьСчетаКонтрагента(СтрокаТЧ.ДоговорДТ);
			УсловияКредита = СтрСчета.УсловиеЗайма; 	
			Контрагент =СтрСчета.Контрагент; 
			Договор = СтрСчета.ДоговорКонтрагента; 
			#Область ЕслиНеНашлиПромежуточный 
			Если СтрокаТЧ.ПромСчет = "-" Тогда
				НоваяЗапись = НаборЗаписей.Добавить(); 
				НоваяЗапись.Активность = Истина;
				//ДЫТЭ
				Если СтрокаТЧ.СчетДТ = "47416.1"Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4741681000000000000100000");
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71002.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71003.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100381000313180000171421");//	Статьи доходов и расходов-Process Code (об)-=71421  Comission CA-own business-new production-first part/Комиссия за выдачу займа
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000287")); 
					//++ Севрюгин А.А
					// версия 16
					//-- Севрюгин А.А
					//				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000142")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71001.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71001.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//	00231 Проценты на просроченную часть основного долга НБ	00-000019
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000019")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71002.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71005.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100581001315180000100231");//	00231 Сумма положительной корректировки начисленных процентов НЕ НБ	00-000055
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71006.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100681001316180000100231");//	00231 Сумма отрицательной корректировки начисленных процентовНЕ НБ	00-000057
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000057")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.5"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122202");//	22202 Прочий доход (невостребованная переплата клиентов)	00-000267
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000067")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71501.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71502.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150281001414010000100231");//	00231 Сумма дебетовогоостаткана счете 61217.1 НЕ НБ	00-000066
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000066")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000321104");//	22104 Штраф за досрочное расторжение договора	00-000071
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000071")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.8"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000222101");//	22101 Присужденная госпошлина	00-000075
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000075")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.6"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122102");//	22102 Присужденные судебные издержки	00-000074
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000074")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71202.1"	Тогда 
					//              НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281000481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281001481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
					//версия 16		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000063")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71201.1"	Тогда 
					//				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281001481180000100151");//	00151 Доходы от восстановления резерва	00-000061
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120181001381180000100151");//	00151 Доходы от восстановления резерва	00-000061
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
					//версия 18	БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000064")); 
					//версия 16		БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000061")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71501.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "60322.10"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000007890000");//	КИВИ Банк (акционерное общество)	К0-000789
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					
				ИначеЕсли СТрокаТЧ.СчетДТ = "60309.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "60309.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					
					
				ИначеЕсли СТрокаТЧ.СчетДТ = "60322.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "47422.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "47422.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000200000");//	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "47422.3"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000300000");//	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "47422.4"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000400000");//	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.9"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181001522040000115235");//	15235 Доходы от восстановления резервов по прочим активам НЕ НБ	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000068")); 
					//					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.3"	Тогда 
					//++ Севрюгин А.А
					// V15
					//				НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000400231");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					//				БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
					
					//-- Севрюгин А.А
					
				ИначеЕсли СТрокаТЧ.СчетДТ = "71701.4"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000500232");//	00232 НДС_Сумма по Service package fee Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужде	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71702.9"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281001533040000115235");//	15235 Расходы по формированиюрезервов по прочим активам НЕ НБ
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000079")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "71001.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
				ИначеЕсли СТрокаТЧ.СчетДТ = "47423.5"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаДт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742381000000000000500000");//	
					НоваяЗапись.СчетДТ = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДТ, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДТ, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				Иначе
					НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);	
					НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				КонецЕсли;
				
				
				//КОТЭ
				Если СтрокаТЧ.СчетКТ = "47416.1"Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4741681000000000000100000");
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71003.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100381000313180000171421");//	Статьи доходов и расходов-Process Code (об)-=71421  Comission CA-own business-new production-first part/Комиссия за выдачу займа
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000142")); 
					//++ Севрюгин А.А
					// версия 16
					//-- Севрюгин А.А
					// БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000142")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71002.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71001.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71001.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000100231");//	00231 Проценты на просроченную часть основного долга НБ	00-000019
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000019")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71002.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100281000312180000200232");//	00232 НДС_Service package (комиссия) за количество дней календарного месяца пользования займом	00-000053
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000053")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71005.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100581001315180000100231");//	00231 Сумма положительной корректировки начисленных процентов НЕ НБ	00-000055
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71006.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100681001316180000100231");//	00231 Сумма отрицательной корректировки начисленных процентовНЕ НБ	00-000057
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000057")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.5"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122202");//	22202 Прочий доход (невостребованная переплата клиентов)	00-000267
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000067")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71501.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71502.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150281001414010000100231");//	00231 Сумма дебетовогоостаткана счете 61217.1 НЕ НБ	00-000066
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000066")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000022002");//	22002 Сумма признанного дохода (Contract penalty)	00-000070
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000070")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000321104");//	22104 Штраф за досрочное расторжение договора	00-000071
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000071")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.8"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000222101");//	22101 Присужденная госпошлина	00-000075
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000075")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.6"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000528020000122102");//	22102 Присужденные судебные издержки	00-000074
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000074")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71202.1"	Тогда 
					//НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281000481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
					//НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000063")); 
					//++ Севрюгин А.А
					// версия 16
					//-- Севрюгин А.А
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120281001481180000100151");//	00151 Расходы по формированиюрезервов	00-000063
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71201.1"	Тогда 
					//НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120181000381180000100151");//	00151 Доходы от восстановления резерва	00-000061
					//НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000061")); 
					//++ Севрюгин А.А
					// версия 16
					//-- Севрюгин А.А
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7120181001381180000100151");//	00151 Доходы от восстановления резерва	00-000061
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000062")); 
					//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000064")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71501.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7150181001326050000100231");//	00231 Сумма кредитового остатка на счете 61217.1 НЕ НБ	00-000065
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000065")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "60322.10"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000007890000");//	КИВИ Банк (акционерное общество)	К0-000789
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					
				ИначеЕсли СТрокаТЧ.СчетКТ = "60309.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "60309.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6031081000000000000100000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					
				ИначеЕсли СТрокаТЧ.СчетКТ = "60322.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");//	НЕБАНКОВСКАЯ КРЕДИТНАЯ ОРГАНИЗАЦИЯ "МОСКОВСКИЙ КЛИРИНГОВЫЙ ЦЕНТР" (АКЦИОНЕРНОЕ ОБЩЕСТВО)	К0-000006
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "47422.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "47422.2"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000200000");//	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "47422.3"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000300000");//	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "47422.4"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000400000");//	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.9"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181001522040000115235");//	15235 Доходы от восстановления резервов по прочим активам НЕ НБ	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000068")); 
					//					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.3"	Тогда 
					//++ Севрюгин А.А
					//версия 15
					//-- Севрюгин А.А
					
					//НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000400231");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
					//НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000622005");//	00231 Сумма Interest Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужденных судом в польз	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000251")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71701.4"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170181000524010000500232");//	00232 НДС_Сумма по Service package fee Legal proceeding (после досрочного расторжения договора до конца графика), предъявленных к взысканию и присужде	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000055")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71702.9"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7170281001533040000115235");//	15235 Расходы по формированиюрезервов по прочим активам НЕ НБ
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000079")); 
				ИначеЕсли СТрокаТЧ.СчетКТ = "71001.1"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("7100181000311180000000231");//	00231 Проценты за пользование заемными средствами срочные НБ	00-000017
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ПрочиеДоходыИРасходы,Справочники.ПрочиеДоходыИРасходы.НайтиПоКоду("00-000017")); 
					//			ИначеЕсли Лев(СТрокаТЧ.СчетКТ,3) = "603" или Лев(СТрокаТЧ.СчетКТ,3) = "488" или Лев(СТрокаТЧ.СчетКТ,3) = "612" Тогда 
				ИначеЕсли СТрокаТЧ.СчетКТ = "47423.5"	Тогда 
					НоваяЗапись.СчетАналитическогоУчетаКт =Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742381000000000000500000");//	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
				Иначе	
					НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);	
					НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
					БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
				КонецЕсли;
				
				
				
				НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
				НоваяЗапись.Организация = Организация;
				
				Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетДт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
						Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
							НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
						Иначе
							НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
						КонецЕсли; 
					Иначе 
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				КонецЕсли; 
				
				
				Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
					НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
				КонецЕсли; 
				
				Если НоваяЗапись.СчетКт.Валютный Тогда
					НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
					НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
				КонецЕсли;
				
				НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
				НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
				НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
				//
				//
				Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
					НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
					Продолжить;
				КонецЕсли; 
				Попытка
					Сумма = Сумма + СтрокаТЧ.Сумма;
				Исключение
					Сумма = Сумма + 0;
				КонецПопытки;
				Продолжить;
			КонецЕсли;
			#КонецОбласти
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка1 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			Если СтрокаТЧ.СчетДТ = "60322.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаДт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетДТ);
			КонецЕсли;
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 1, Контрагент); 
			//БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, 2, Договор); 			
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");//ПромСчет
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли; 
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 	
			#Область Проводка2 
			НоваяЗапись = НаборЗаписей.Добавить(); 
			НоваяЗапись.Активность = Истина;
			
			НоваяЗапись.СчетАналитическогоУчетаДт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("4742281000000000000100000");
			
			
			НоваяЗапись.СчетДт = НоваяЗапись.СчетАналитическогоУчетаДт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетДт, НоваяЗапись.СубконтоДт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			//НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.ПромСчет); //ПромСчет
			Если СтрокаТЧ.СчетКТ = "60322.1" Тогда 
				НоваяЗапись.СчетАналитическогоУчетаКт = Справочники.БНФОСчетаАналитическогоУчета.НайтиПоКоду("6032281000000000000060000");
			иначе
				НоваяЗапись.СчетАналитическогоУчетаКт = pcru_УМФО.ПолучитьСчетСтр(СтрСчета,СтрокаТЧ.СчетКТ);
			КонецЕсли;
			
			НоваяЗапись.СчетКт = НоваяЗапись.СчетАналитическогоУчетаКт.Владелец;
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Контрагенты, Контрагент); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.Договоры, Договор); 
			БНФОБухгалтерскийУчет.УстановитьСубконто(НоваяЗапись.СчетКт, НоваяЗапись.СубконтоКт, ПланыВидовХарактеристик.БНФОВидыСубконтоБанковские.ДоговорыКредитаДепозита, УсловияКредита); 
			
			НоваяЗапись.Содержание= СтрокаТЧ.ОписаниеПроводки;
			НоваяЗапись.Организация = Организация;
			
			Если НоваяЗапись.СчетДт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеДт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетДт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаДт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаДт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			Если НоваяЗапись.СчетДт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоДт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРДт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУДт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
				Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы <> Неопределено Тогда
					Если НоваяЗапись.СубконтоКт.ПрочиеДоходыИРасходы.ПринятиеКналоговомуУчету Тогда
						НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
					Иначе
						НоваяЗапись.СуммаПРКт = СтрокаТЧ.Сумма;
					КонецЕсли; 
				Иначе 
					НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
				КонецЕсли; 
			КонецЕсли; 
			
			
			
			Если НоваяЗапись.СчетКт.УчетПоПодразделениям Тогда
				НоваяЗапись.ПодразделениеКт= Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("2.01.00 FINANCIAL DEPARTMENT/ФИНАНСОВЫЙ ОТДЕЛ");
			КонецЕсли; 
			
			Если НоваяЗапись.СчетКт.Валютный Тогда
				НоваяЗапись.ВалютнаяСуммаКт = СтрокаТЧ.Сумма;
				НоваяЗапись.ВалютаКт = Справочники.Валюты.НайтиПоКоду("643");
			КонецЕсли;
			
			//Если НоваяЗапись.СчетКт.НалоговыйУчет Тогда
			//	НоваяЗапись.СуммаНУКт = СтрокаТЧ.Сумма;
			//КонецЕсли; 
			
			НоваяЗапись.Период = КонецДня(ДатаВыгрузки);
			НоваяЗапись.Регистратор = ОперацияОбъект.Ссылка;
			НоваяЗапись.Сумма = СтрокаТЧ.Сумма;
			//
			//
			Если не ЗначениеЗаполнено(НоваяЗапись.СчетДт) или не ЗначениеЗаполнено(НоваяЗапись.СчетКт) Тогда
				НаборЗаписей.Удалить(НаборЗаписей.Количество()-1);
				Продолжить;
			КонецЕсли; 
			
			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
			
			
			Попытка
				Сумма = Сумма + СтрокаТЧ.Сумма;
			Исключение
				Сумма = Сумма + 0;
			КонецПопытки;
			#КонецОбласти	
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		ОперацияОбъект.СуммаОперации = Сумма;
		ОперацияОбъект.Записать();
		
	Исключение
		Если Счетчик < 10 Тогда
			pcru_ex_Почта.ОтправкаПочты("Ошибка НеУниверсальныйОбменНаСервере2","НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" дата"+Строка(ДатаВыгрузки)+" по счетам "+СчетДт+"-"+СчетКТ);
			НеУниверсальныйОбменНаСервере2(ДатаВыгрузки,СчетДт,СчетКТ,Счетчик+1);	
			Возврат;
		Иначе
			pcru_ex_Почта.Сообщить_об_ошибке("НеУниверсальныйОбменНаСервере2"+ОписаниеОшибки()+" по счетам "+СчетДт+"-"+СчетКТ);
			Возврат;
		КонецЕсли; 
	КонецПопытки;
	#КонецОбласти
	
	
КонецПроцедуры
