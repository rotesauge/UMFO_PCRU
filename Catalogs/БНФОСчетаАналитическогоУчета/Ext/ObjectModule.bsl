
&Вместо("ПередУдалением")
Процедура pcru_ex_ПередУдалением(Отказ)
	СуществуютСсылки = Неопределено;
	Если СуществуютСсылкиНаСчетаАналитическогоУчета(Ссылка, СуществуютСсылки) Тогда
			ТекстСообщения = НСтр("ru = 'Счет аналитического учета """+ Ссылка + """ уже участвует в движениях. 
                                  |Пометить на удаление нельзя!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Код", , Отказ);
	КонецЕсли;
	ПродолжитьВызов(Отказ);
КонецПроцедуры

&После("ПриЗаписи")
Процедура pcru_ex_ПриЗаписи(Отказ)
	СуществуютСсылки = Неопределено;
	Если Ссылка.ПометкаУдаления И СуществуютСсылкиНаСчетаАналитическогоУчета(Ссылка, СуществуютСсылки) Тогда
			ТекстСообщения = НСтр("ru = 'Счет аналитического учета """+ Ссылка + """ уже участвует в движениях. 
                                  |Пометить на удаление нельзя!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Код", , Отказ);
	КонецЕсли;
КонецПроцедуры


&Вместо("СуществуютСсылкиНаСчетаАналитическогоУчета")
Функция pcru_ex_СуществуютСсылкиНаСчетаАналитическогоУчета(Ссылка, СуществуютСсылки)
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	ИначеЕсли СуществуютСсылки <> Неопределено Тогда
		Возврат СуществуютСсылки; // уже было рассчитано
	КонецЕсли;
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("ТекущийВладелец", Ссылка);

	ТипСчетаАналитическогоУчета = ТипЗнч(Справочники.БНФОСчетаАналитическогоУчета.ПустаяСсылка());

	Запрос.Текст = "";

	Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
		Для Каждого РеквизитРегистра Из РегистрНакопления.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипСчетаАналитическогоУчета) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегистрНакопления."+РегистрНакопления.Имя+"."+РеквизитРегистра.Имя+" КАК СчетаАналитическогоУчета
				|ГДЕ
				|	"+РеквизитРегистра.Имя+" = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		Для Каждого РеквизитРегистра Из РегистрБухгалтерии.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипСчетаАналитическогоУчета) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегистрБухгалтерии."+РегистрБухгалтерии.Имя+"."+РеквизитРегистра.Имя+"Дт КАК СчетаАналитическогоУчета
				|ГДЕ
				|	"+РеквизитРегистра.Имя+"Дт = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
		Для Каждого РеквизитРегистра Из РегистрБухгалтерии.Измерения Цикл
			Если РеквизитРегистра.Тип.СодержитТип(ТипСчетаАналитическогоУчета) Тогда
				Если Запрос.Текст <> "" Тогда
					Запрос.Текст = Запрос.Текст + "
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	РегистрБухгалтерии."+РегистрБухгалтерии.Имя+"."+РеквизитРегистра.Имя+"Кт КАК СчетаАналитическогоУчета
				|ГДЕ
				|	"+РеквизитРегистра.Имя+"Кт = &ТекущийВладелец
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	
	
	СуществуютСсылки = НЕ Запрос.Выполнить().Пустой();

	Возврат СуществуютСсылки;

КонецФункции

