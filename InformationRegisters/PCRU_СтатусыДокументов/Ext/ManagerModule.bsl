#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	#Область ПрограммныйИнтерфейс
	
	// Устанавливает статус документа
	//
	// Параметры:
	//  Документ             - ДокументСсылка.* - документ
	//  СтатусыДокумента     - Структура - см. НовыеСтатусыДокумента()
	//
	// Возвращаемое значение:
	//  Булево - Истина, если статус документа изменен
	//
	Функция УстановитьСтатусыДокумента(Документ, СтатусДокумента) Экспорт
		
		Если ЗначениеЗаполнено(Документ) Тогда
			МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
			СтатусИзменен = УстановитьСтатусыДокументов(МассивДокументов, СтатусДокумента);
		Иначе
			СтатусИзменен = Ложь;
		КонецЕсли;
		
		Возврат СтатусИзменен;
		
	КонецФункции
	
	// Устанавливает статус нескольких документов.
	// Статус может быть измененен только у тех документов, на редактирование которых у пользователя есть права.
	//
	// Параметры:
	//  МассивДокументов     - Массив - содержит ссылки на документы (должны быть одного вида!)
	//  СтатусыДокумента     - Структура - см. НовыеСтатусыДокумента()
	//
	// Возвращаемое значение:
	//  Булево - Истина, если статус хотя бы одного документа изменен
	//
	Функция УстановитьСтатусыДокументов(МассивДокументов, СтатусДокумента) Экспорт
		
		СтатусИзменен = Ложь;
		
		Если МассивДокументов.Количество() = 0 Тогда
			Возврат СтатусИзменен;
		КонецЕсли;
		
		
		
		Для каждого Документ Из МассивДокументов  Цикл
			
			УстановитьПривилегированныйРежим(Истина);
			
			//Если ИнтеграцияCRMПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
			//	И (Выборка.Статус <> СтатусыДокумента.Статус 
			//		ИЛИ Выборка.ДополнительныйСтатус <> СтатусыДокумента.ДополнительныйСтатус) Тогда
			//	РегистрыСведений.ДокументыИнтеграцииCRM.ЗарегистрироватьКОтправке(Выборка.Документ);
			//КонецЕсли;
			
			// При записи набора, удаляем статусы, относящиеся к другой организации
			НаборЗаписей = РегистрыСведений.PCRU_СтатусыДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(Документ);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Документ  = Документ;
			Запись.Организация = Документ.Организация;
			Запись.Статус = СтатусДокумента;
			
			НаборЗаписей.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			СтатусИзменен = Истина;
			
			
			
		КонецЦикла; 
		
		
		
		//ОценкаПроизводительности.ЗакончитьЗамерВремени(
		//	"УстановкаСтатуса",
		//	ВремяНачалаОперации,
		//	МассивДокументов.Количество(),
		//	Строка(ТипЗнч(МассивДокументов[0])));
		//
		Возврат СтатусИзменен;
		
	КонецФункции
	
	
	// Возвращает текущий статус документа
	//
	// Параметры:
	//  Организация - СправочникСсылка.Организации - организация
	//  Документ    - ДокументСсылка.* - документ
	//
	// Возвращаемое значение:
	//  Структура - стуктура статусов документа со свойствами:
	//    * Статус - ПеречислениеСсылка - основной статус документа
	//    * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
	//
	Функция ПолучитьСтатусыДокумента(Документ, Организация) Экспорт
		
		Если ЗначениеЗаполнено(Документ) Тогда
			КоллекцияСтатусов = ПолучитьСтатусыДокументов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ), Организация);
			СтатусыДокумента = КоллекцияСтатусов[Документ];
		КонецЕсли;
		
		Если СтатусыДокумента = Неопределено Тогда
			СтатусыДокумента = СтатусНовогоДокумента(Документ);
		КонецЕсли;
		
		Возврат СтатусыДокумента;
		
	КонецФункции
	
	// Возвращает текущие статусы документов
	//
	// Параметры:
	//  МассивДокументов - Массив - массив ссылок на документы
	//  Организация- СправочникСсылка.Организации - организация
	//
	// Возвращаемое значение:
	//  Соответствие:
	//    Ключ - ссылка на документ
	//    Значение - Структура статусов документа со свойствами:
	//      * Статус - ПеречислениеСсылка - основной статус документа
	//      * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
	//
	Функция ПолучитьСтатусыДокументов(МассивДокументов, Организация = Неопределено) Экспорт
		
		КоллекцияСтатусов = Новый Соответствие;
		Для Каждого Документ Из МассивДокументов Цикл
			КоллекцияСтатусов.Вставить(Документ, СтатусНовогоДокумента(Документ));
		КонецЦикла;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтатусыДокументов.Документ,
		|	СтатусыДокументов.Статус,
		|	СтатусыДокументов.ДополнительныйСтатус
		|ИЗ
		|	РегистрСведений.PCRU_СтатусыДокументов КАК СтатусыДокументов
		|ГДЕ
		|	&УсловиеПоОрганизации
		|	И СтатусыДокументов.Документ В(&МассивДокументов)";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Если Организация <> Неопределено Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			УсловиеПоОрганизации = "СтатусыДокументов.Организация = &Организация";
		Иначе
			УсловиеПоОрганизации = "ИСТИНА";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПоОрганизации", УсловиеПоОрганизации);
		
		// Данные о статусах не считаем секретными и для производительности читаем их привилегированно,
		// так как они читаются при открытии формы.
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(КоллекцияСтатусов[Выборка.Документ], Выборка);
		КонецЦикла;
		
		Возврат КоллекцияСтатусов;
		
	КонецФункции
	
	
	#КонецОбласти
	
	#Область СлужебныеПроцедурыИФункции
	
	
	// Функция-конструктор структуры статусов документа.
	//
	Функция НовыеСтатусыДокумента() Экспорт
		
		СтатусыДокумента = Новый Структура;
		СтатусыДокумента.Вставить("Статус", Неопределено); // основной статус документа
		СтатусыДокумента.Вставить("ДополнительныйСтатус", Неопределено);
		СтатусыДокумента.Вставить("СтатусСФ", Неопределено); // статус наличия/проведения счета-фактуры к документу
		СтатусыДокумента.Вставить("СтатусОригиналаСФ", Неопределено);
		СтатусыДокумента.Вставить("НомерСчетаФактуры", "");
		
		Возврат СтатусыДокумента;
		
	КонецФункции
	
	
	
	// Возвращает статус документа по умолчанию
	//
	// Параметры:
	//   Документ - ДокументСсылка - ссылка на документ
	//
	// Возвращаемое значение:
	//  Структура - стуктура статусов документа со свойствами:
	//    * Статус - ПеречислениеСсылка - основной статус документа
	//    * ДополнительныйСтатус - ПеречислениеСсылка - дополнительный статус документа
	//
	Функция СтатусНовогоДокумента(Документ)
		
		Результат = Новый Структура("Статус, ДополнительныйСтатус");
		
		ТипДокумента = ТипЗнч(Документ);
		
		Если ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			Результат.Статус = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
			Результат.ДополнительныйСтатус = Перечисления.СтатусыОтгрузки.СтатусНовогоДокумента();
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			Результат.Статус = Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента();
			Результат.ДополнительныйСтатус = Перечисления.СтатусыПоступленияПоСчету.СтатусНовогоДокумента();
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Или ТипДокумента = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			
			Результат.Статус = Перечисления.СтатусыДокументовРеализации.СтатусНовогоДокумента();
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов")
			Или ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Результат.Статус = Перечисления.СтатусыДокументовПоступления.СтатусНовогоДокумента();
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	#КонецОбласти
	
#КонецЕсли