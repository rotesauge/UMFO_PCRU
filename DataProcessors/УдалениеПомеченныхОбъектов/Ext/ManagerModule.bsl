
&Вместо("ПопробоватьУдалитьСсылку")
Процедура pcru_ex_ПопробоватьУдалитьСсылку(Ссылка, ПараметрыВыполнения, Информация, Результат)
	
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Информация.ПолноеИмя);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	Блокировка.Заблокировать();
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Результат.Успех = Истина; // Объект уже удален.
		Возврат;
	КонецЕсли;
	Если Объект.ПометкаУдаления <> Истина Тогда
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Объект не помечен на удаление.'");
		Возврат;
	КонецЕсли;
	
	//ДочерниеИПодчиненныеОбъекты = НайтиДочерниеИПодчиненныеОбъекты(Ссылка, Информация);
	//Результат.Количество = Результат.Количество + ДочерниеИПодчиненныеОбъекты.Количество();
	//
	//// Удаление невозможно, если есть хотя бы один дочерний или подчиненный объект, не помеченный на удаление.
	//// Эта предварительная проверка позволяет избежать отката длинной транзакции при удалении в иерархических таблицах.
	//ДочерниеИПодчиненныеОбъектыПомечены = Истина;
	//Для каждого ПодчиненныйОбъект Из ДочерниеИПодчиненныеОбъекты Цикл
	//	Если Не ПодчиненныйОбъект.ПометкаУдаления Тогда
	//		ДочерниеИПодчиненныеОбъектыПомечены = Ложь;
	//		Прервать;
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//Если ДочерниеИПодчиненныеОбъектыПомечены Тогда
	Попытка
	Объект.Удалить();
	Результат.Успех = Истина;
	Исключение
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru = 'не удалено по причине.'"+ОписаниеОшибки());
	КонецПопытки; 
	//КонецЕсли;	
	//
	//Результат.ПрепятствующиеУдалению = НайтиПрепятствующиеУдалению(Ссылка, ПараметрыВыполнения);
	//Результат.Количество = Результат.Количество + Результат.ПрепятствующиеУдалению.Количество();
	//Результат.Успех = (Результат.Количество = 0);
	//Если Не Результат.Успех Тогда
	//	Результат.ИнформацияОбОшибке = НСтр("ru = 'Объект используется в других объектах программы.'");
	//	Если ТипЗнч(Результат.ПрепятствующиеУдалению) = Тип("ТаблицаЗначений") Тогда
	//		Результат.ПрепятствующиеУдалению.Колонки[0].Имя = "УдаляемыйСсылка";
	//		Результат.ПрепятствующиеУдалению.Колонки[1].Имя = "ОбнаруженныйСсылка";
	//		Результат.ПрепятствующиеУдалению.Колонки[2].Имя = "ОбнаруженныйМетаданные";
	//		Если ДочерниеИПодчиненныеОбъектыПомечены Тогда
	//			Для Каждого ПодчиненныйОбъект Из ДочерниеИПодчиненныеОбъекты Цикл
	//				СтрокаТаблицы = Результат.ПрепятствующиеУдалению.Добавить();
	//				СтрокаТаблицы.УдаляемыйСсылка        = Ссылка;
	//				СтрокаТаблицы.ОбнаруженныйСсылка     = ПодчиненныйОбъект.Ссылка;
	//			КонецЦикла;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	
	
	
КонецПроцедуры
