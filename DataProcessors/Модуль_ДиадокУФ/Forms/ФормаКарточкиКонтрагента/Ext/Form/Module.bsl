//{ ПЕРЕМЕННЫЕ МОДУЛЯ

	&НаКлиенте
	Перем ВнесеныИзменения;
	
	&НаКлиенте
	Перем ПараметрЗакрытия;
	
//} ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СОБЫТИЯ_ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	CounteragentID		= Параметры.CounteragentID;
	FnsParticipantId	= Параметры.FnsParticipantId;
	ИНН					= Параметры.ИНН;
	НаименованиеДД		= Параметры.НаименованиеДД;
	Организация			= Параметры.Организация;
	ПервыйКонтрагентВ1С = Неопределено;
	
	Для каждого СтрокаКонтрагента Из Параметры.СписокКонтрагентовВ1С.ПолучитьЭлементы() Цикл
		
		СтрокаКонтрагентаВ1С = СписокКонтрагентовВ1С.ПолучитьЭлементы().Добавить();
		СтрокаКонтрагентаВ1С.Представление				= СтрокаКонтрагента.КонтрагентВ1С;
		СтрокаКонтрагентаВ1С.КонтрагентВ1С				= СтрокаКонтрагента.КонтрагентВ1С;
		СтрокаКонтрагентаВ1С.ПодразделениеКонтрагента	= СтрокаКонтрагента.ПодразделениеКонтрагента;
		СтрокаКонтрагентаВ1С.ToDepartmentID				= СтрокаКонтрагента.ToDepartmentID;

		Если ПервыйКонтрагентВ1С = Неопределено Тогда
			ПервыйКонтрагентВ1С = СтрокаКонтрагента.КонтрагентВ1С;
		КонецЕсли;

		Для каждого СтрокаДоговора Из СтрокаКонтрагента.ПолучитьЭлементы() Цикл
			
			СтрокаДоговораВ1С = СтрокаКонтрагентаВ1С.ПолучитьЭлементы().Добавить();
			СтрокаДоговораВ1С.Представление				= СтрокаДоговора.Договор;
			СтрокаДоговораВ1С.Договор					= СтрокаДоговора.Договор;
			СтрокаДоговораВ1С.КонтрагентВ1С				= СтрокаДоговора.КонтрагентВ1С;
			СтрокаДоговораВ1С.ПодразделениеКонтрагента	= СтрокаДоговора.ПодразделениеКонтрагента;
			СтрокаДоговораВ1С.ToDepartmentID			= СтрокаДоговора.ToDepartmentID;
			
		КонецЦикла;
		
	КонецЦикла;

	Если ЗначениеЗаполнено(ПервыйКонтрагентВ1С) Тогда
		
		ДиадокФормироватьУПДКонтрагент	= МетодСервера( , "ПолучитьЗначениеСвойства", ПервыйКонтрагентВ1С, "ДиадокФормироватьУПДКонтрагент");
		
		Если ТипЗнч(ДиадокФормироватьУПДКонтрагент) = Тип("Строка") Тогда
			НастройкаФорматаОтправки = ДиадокФормироватьУПДКонтрагент;
		Иначе
			НастройкаФорматаОтправки = "";
		КонецЕсли;	
					
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
			
	Для каждого СтрокаТаблицы Из СписокКонтрагентовВ1С.ПолучитьЭлементы() Цикл
		Элементы.ТаблицаКонтрагентов1С.Развернуть(СтрокаТаблицы.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	ЗаполнитьНастройкиФорматовОтправки(НастройкаФорматаОтправки);
		
	ЭтаФорма.Элементы.НаименованиеДД.Заголовок = "Контрагент в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПараметрЗакрытия = Неопределено Тогда
		
		НастройкаФорматаОтправки = МетодКлиента(	"Модуль_Клиент",
										"НастройкаФорматаОтправкиДокументов",
										ВариантОтправкиСФ,
										ВариантОтправкиНакладныхАктов	);
				
		УстановитьНастройкиКонтрагентов();
		
		ПараметрЗакрытия = Новый Структура;
		
		ПараметрЗакрытия.Вставить("ВнесеныИзменения"	 , ВнесеныИзменения);
		ПараметрЗакрытия.Вставить("СписокКонтрагентовВ1С", СписокКонтрагентовВ1С);

		Закрыть(ПараметрЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

#КонецОбласти

#Область КОМАНДЫ

&НаКлиенте
Процедура ДобавитьДоговорКоманда(Команда)
	
	ДобавитьДоговор();
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ТаблицаКонтрагентов1СПодразделениеКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=	Ложь;
	ДобавитьПодразделение();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьCounteragentBoxID(id,  ВыбКонтрагент)
	
	МетодСервера(,"Установить_CounteragentBoxID_для_Контрагент", ВыбКонтрагент, id);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыМаршрутизацииДляДоговора(Договор, НаименованиеПодразделения, ИДПодразделения)
	
	МетодСервера(,"УстановитьПараметрыМаршрутизацииДляДоговора", Договор, НаименованиеПодразделения, ИДПодразделения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыМаршрутизацииДляКонтрагента(Контрагент, НаименованиеПодразделения, ИДПодразделения)
	
	МетодСервера(,"УстановитьПараметрыМаршрутизацииДляКонтрагента", Контрагент,,НаименованиеПодразделения, ИДПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПараметрыМаршрутизации(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда
		УстановитьПараметрыМаршрутизацииДляДоговора(ТекущиеДанные.Договор, "", "");
	Иначе
		УстановитьCounteragentBoxID("", ТекущиеДанные.КонтрагентВ1С);
		МетодСервераБезКонтекста(,"УстановитьИдентификаторЭДОДляКонтрагента", ТекущиеДанные.КонтрагентВ1С, "");
		УстановитьПараметрыМаршрутизацииДляКонтрагента(ТекущиеДанные.КонтрагентВ1С, "", "");
	КонецЕсли;
	
	Для каждого ЭлементДанных Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ОчиститьПараметрыМаршрутизации(ЭлементДанных);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентов1СПередУдалением(Элемент, Отказ)
	
	ВнесеныИзменения=	Истина;
	
	ТекущиеДанные=	Элементы.ТаблицаКонтрагентов1С.ТекущиеДанные;
	ОчиститьПараметрыМаршрутизации(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Функция ДоговорДобавленВДерево(ВыбранныйДоговор) Экспорт
	
	ДеревоКонтрагентов=	РеквизитФормыВЗначение("СписокКонтрагентовВ1С");
	Если ДеревоКонтрагентов.Строки.Найти(ВыбранныйДоговор, "Договор", Истина) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КонтрагентДобавленВДерево(ВыбранныйКонтрагент) Экспорт
	
	ДеревоКонтрагентов=	РеквизитФормыВЗначение("СписокКонтрагентовВ1С");
	Если ДеревоКонтрагентов.Строки.Найти(ВыбранныйКонтрагент, "КонтрагентВ1С", Истина) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//{ ВЫБОР ЕСТЬ
	
	&НаКлиенте
	Процедура ДобавитьДоговор()
		
		ТекущиеДанные = Элементы.ТаблицаКонтрагентов1С.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если МетодСервераБезКонтекста(, "СуществуетОбъектМетаданных", "Справочник.ДоговорыКонтрагентов") Тогда
			ИмяСправочника = "Справочник.ДоговорыКонтрагентов";
		ИначеЕсли МетодСервераБезКонтекста(, "СуществуетОбъектМетаданных", "Справочник.ДоговорыВзаиморасчетов") Тогда
			ИмяСправочника = "Справочник.ДоговорыВзаиморасчетов";
		Иначе
			ИмяСправочника = "Справочник.Договоры";
		КонецЕсли;
		
		Если МетодСервераБезКонтекста(, "СуществуетОбъектМетаданных", ИмяСправочника + ".Реквизит.Контрагент") Тогда
			ПолеВладельца = "Контрагент";
		Иначе
			ПолеВладельца = "Владелец";
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("Организация", Организация);
		ПараметрыФормы.Отбор.Вставить(ПолеВладельца, ТекущиеДанные.КонтрагентВ1С);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		ИмяФормыВыбора = ИмяСправочника + ".ФормаВыбора";
		
		МетодКлиента(, "ОткрытьФормуОбъектаИБМодально",, ИмяФормыВыбора, ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДоговора", ТекущиеДанные);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ДобавитьКонтрагента()
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ИНН", ИНН);
		ПараметрыФормы.Отбор.Вставить("ПометкаУдаления", Ложь);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		МетодКлиента(,"ОткрытьФормуОбъектаИБМодально",,"Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораКонтрагента");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьПодразделение()
		
		ТекущиеДанные=	Элементы.ТаблицаКонтрагентов1С.ТекущиеДанные;
		
		Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		Если Organization = Неопределено Тогда 
			Отказ=	Истина;
			ПоказатьПредупреждение(, "Не удалось получить Организацию " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ТекущийDepartmentId=	?(ТекущиеДанные.ToDepartmentID = Неопределено, "", ТекущиеДанные.ToDepartmentID);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("DepartmentId", 	ТекущийDepartmentId);
		ПараметрыФормы.Вставить("OrganizationId", 	Organization.ID);
		ПараметрыФормы.Вставить("CounteragentID", 	CounteragentID);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущиеДанные);

	КонецПроцедуры
	
//} ВЫБОРА НЕТ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущиеДанные) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если НЕ РезультатЗакрытия.DepartmentID = ТекущиеДанные.ToDepartmentID Тогда
			
			ТекущиеДанные.ПодразделениеКонтрагента=	РезультатЗакрытия.DepartmentName;
			ТекущиеДанные.ToDepartmentID=			РезультатЗакрытия.DepartmentID;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда
				УстановитьПараметрыМаршрутизацииДляДоговора(ТекущиеДанные.Договор, ТекущиеДанные.ПодразделениеКонтрагента, ТекущиеДанные.ToDepartmentID);
			Иначе
				УстановитьПараметрыМаршрутизацииДляКонтрагента(ТекущиеДанные.КонтрагентВ1С, ТекущиеДанные.ПодразделениеКонтрагента, ТекущиеДанные.ToDepartmentID);
			КонецЕсли;
			
			ВнесеныИзменения=	Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВыбораДоговора(ВыбранныйДоговор, ТекущиеДанные) Экспорт
	
	Если НЕ ВыбранныйДоговор = Неопределено Тогда
		Если ДоговорДобавленВДерево(ВыбранныйДоговор) Тогда
			СообщениеПользователю=			Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	"Договор уже добавлен в таблицу маршрутизации";
			СообщениеПользователю.Сообщить();
		Иначе
			
			Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				СтрокаДоговора=	ТекущиеДанные.ПолучитьЭлементы().Добавить();
			Иначе
				СтрокаДоговора=	ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			СтрокаДоговора.Представление=	ВыбранныйДоговор;
			СтрокаДоговора.КонтрагентВ1С=	ТекущиеДанные.КонтрагентВ1С;
			СтрокаДоговора.Договор=			ВыбранныйДоговор;
			
			УстановитьПараметрыМаршрутизацииДляДоговора(СтрокаДоговора.Договор, СтрокаДоговора.ПодразделениеКонтрагента, СтрокаДоговора.ToDepartmentID);
			
			Элементы.ТаблицаКонтрагентов1С.ТекущаяСтрока=	СтрокаДоговора.ПолучитьИдентификатор();
			
			ВнесеныИзменения=	Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВыбораКонтрагента(ВыбранныйКонтрагент, ТекущиеДанные) Экспорт
	
	Если НЕ ВыбранныйКонтрагент = Неопределено Тогда
		Если КонтрагентДобавленВДерево(ВыбранныйКонтрагент) Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Контрагент уже добавлен в таблицу маршрутизации";
			СообщениеПользователю.Сообщить();
			
		Иначе
			
			СтрокаКонтрагента =	СписокКонтрагентовВ1С.ПолучитьЭлементы().Добавить();
			СтрокаКонтрагента.Представление	= ВыбранныйКонтрагент;
			СтрокаКонтрагента.КонтрагентВ1С	= ВыбранныйКонтрагент;
			
			УстановитьCounteragentBoxID(CounteragentID, ВыбранныйКонтрагент);
			МетодСервераБезКонтекста(,"УстановитьИдентификаторЭДОДляКонтрагента", ВыбранныйКонтрагент, FnsParticipantId);
			
			Элементы.ТаблицаКонтрагентов1С.ТекущаяСтрока = СтрокаКонтрагента.ПолучитьИдентификатор();
			
			ВнесеныИзменения=	Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентов1СПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ТаблицаКонтрагентов1С.ТекущийЭлемент.Имя = "ТаблицаКонтрагентов1СКонтрагентВ1С" Тогда
		ДобавитьКонтрагента();
	ИначеЕсли Элементы.ТаблицаКонтрагентов1С.ТекущийЭлемент.Имя = "ТаблицаКонтрагентов1СПодразделениеКонтрагента" Тогда
		ДобавитьПодразделение();
	КонецЕсли;
	
	Отказ=	Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентов1СПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДобавитьКонтрагента();
	Отказ=	Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиКонтрагентов()

	Для Каждого СтрокаТаблицы ИЗ СписокКонтрагентовВ1С.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КонтрагентВ1С) Тогда
			
			МетодСервера(, "УстановитьЗначениеСвойства", СтрокаТаблицы.КонтрагентВ1С, "ДиадокФормироватьУПДКонтрагент"	 , , НастройкаФорматаОтправки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

	//{ Формат документов на отправку по умолчанию
	
	&НаКлиенте
	Процедура ВариантОтправкиСФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СписокВыбора = МетодКлиента("Модуль_Клиент", "СписокВыбораВариантовОтправкиСчетовФактур");
		
		СписокВыбора.Вставить(0, "", "Использовать настройку по умолчанию");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИсходныйСписокВыбора", Элемент.СписокВыбора.Скопировать()); 
		
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораВариантаОтправкиСФ", ЭтаФорма, ДополнительныеПараметры);
		
		Элемент.СписокВыбора.Очистить();
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеВыбораВариантаОтправкиСФ(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора <> Неопределено Тогда
			
			ВариантОтправкиСФ = РезультатВыбора.Значение;
			УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элементы.ВариантОтправкиСФ, РезультатВыбора.Значение, РезультатВыбора.Представление);
			
			ВариантОтправкиНакладныхАктов	= МетодКлиента("Модуль_Клиент", "ВариантОтправкиНакладныхПоУмолчанию", ВариантОтправкиСФ);			
			Представление	 				= МетодКлиента("Модуль_Клиент", "ПредставлениеВариантаОтправкиНакладных", ВариантОтправкиНакладныхАктов);
			УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элементы.ВариантОтправкиНакладныхАктов, ВариантОтправкиНакладныхАктов, Представление);
			
			ВнесеныИзменения = Истина;
			
		Иначе
			
			Для каждого ЭлементСписка Из ДополнительныеПараметры.ИсходныйСписокВыбора Цикл
				
				Элементы.ВариантОтправкиСФ.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВариантОтправкиСФОчистка(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка 	= Ложь;
		ВнесеныИзменения 		= Истина;
		ВариантОтправкиСФ 	= "";
		ВывестиНастройкуФорматаОтправкиДокументовПоУмолчанию();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ВариантОтправкиНакладныхАктовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СписокВыбора = МетодКлиента("Модуль_Клиент", "СписокВыбораВариантовОтправкиНакладных", ВариантОтправкиСФ);
		
		Если ЗначениеЗаполнено(СписокВыбора) Тогда
		
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИсходныйСписокВыбора", Элемент.СписокВыбора.Скопировать()); 
		
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораВариантаОтправкиНакладныхАктов", ЭтаФорма, ДополнительныеПараметры);
		
			Элемент.СписокВыбора.Очистить();
		
			ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);		
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеВыбораВариантаОтправкиНакладныхАктов(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора <> Неопределено Тогда
			
			ВариантОтправкиНакладныхАктов	= РезультатВыбора.Значение;
			Представление					= РезультатВыбора.Представление;
			УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элементы.ВариантОтправкиНакладныхАктов, ВариантОтправкиНакладныхАктов, Представление);
			
			ВнесеныИзменения = Истина;
			
		Иначе
			
			Для каждого ЭлементСписка Из ДополнительныеПараметры.ИсходныйСписокВыбора Цикл
				
				Элементы.ВариантОтправкиНакладныхАктов.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВариантОтправкиНакладныхАктовОчистка(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка 		= Ложь;
		ВнесеныИзменения 			= Истина;
		ВариантОтправкиНакладныхАктов	= "";
		ВывестиНастройкуФорматаОтправкиДокументовПоУмолчанию();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элемент, Знач Значение = Неопределено, Знач Представление = Неопределено)
		
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Значение		 = "";
			Представление	 = "Использовать настройку по умолчанию";
		КонецЕсли;
		
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(Значение, Представление);
				
	КонецПроцедуры
	
	// Заполняет реквизиты формы ВариантОтправкиСФ и ВариантОтправкиНакладных
	// по общей настройке формата отправки документов
	//
	// Параметры:
	//  КлючНастройки - Строка - см. функцию НастройкиФорматаОтправкиДокументов;
	//
	&НаКлиенте
	Процедура ЗаполнитьНастройкиФорматовОтправки(Знач КлючНастройки)
		
		ВариантОтправкиСФ	= МетодКлиента("Модуль_Клиент", "ВариантОтправкиСчетовФактурПоКлючуНастройки", КлючНастройки);
		Представление	 	= МетодКлиента("Модуль_Клиент", "ПредставлениеВариантаОтправкиСчетовФактур", ВариантОтправкиСФ);
		УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элементы.ВариантОтправкиСФ, ВариантОтправкиСФ, Представление);
		
		ВариантОтправкиНакладныхАктов	= МетодКлиента("Модуль_Клиент", "ВариантОтправкиНакладныхПоКлючуНастройки", КлючНастройки);
		Представление	 				= МетодКлиента("Модуль_Клиент", "ПредставлениеВариантаОтправкиНакладных", ВариантОтправкиНакладныхАктов);
		УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элементы.ВариантОтправкиНакладныхАктов, ВариантОтправкиНакладныхАктов, Представление);
		
	КонецПроцедуры

	//} Формат документов на отправку по умолчанию
	
//{ ОБЕРТКИ

	&НаКлиенте
	Процедура ВывестиНастройкуФорматаОтправкиДокументовПоУмолчанию()
		
		УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элементы.ВариантОтправкиСФ);
		УстановитьЗначениеЭлементаНастроекФорматаОтправки(Элементы.ВариантОтправкиНакладныхАктов);
		
	КонецПроцедуры
		
//} ОБЕРТКИ
