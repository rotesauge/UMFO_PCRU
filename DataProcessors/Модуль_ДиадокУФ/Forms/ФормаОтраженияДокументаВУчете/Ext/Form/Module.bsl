#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	ПрочитатьОбработатьПараметрыФормы();
	
	РолиДокументов = РолиДокументовУчета();
	
	УстановитьЗаголовокГруппыРолиДокумента(РолиДокументов.ПервичныйДокумент);
	УстановитьЗаголовокГруппыРолиДокумента(РолиДокументов.СчетФактура);
	
	ОбновитьКэшСопоставленныхДокументов();
	
	ОбновитьНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПлатформаПриОткрытии(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныеДокументы = СопоставленныеСчетаФактуры;
	
	Если Не ЗначениеЗаполнено(СвязанныеДокументы) Тогда 
		
		Если ЭлектронныйДокумент.Формат.ЕстьФункцияСФ Тогда
			СвязанныеДокументы = СопоставленныеСчетаФактуры;
		Иначе
			СвязанныеДокументы = СопоставленныеПервичныеДокументы;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументУчета = Неопределено;
	Если ЗначениеЗаполнено(СвязанныеДокументы) Тогда 
		ДокументУчета = СвязанныеДокументы[0].Значение;
	КонецЕсли;
	
	ОповеститьФормыОбИзмененииСвязейДокументов(ДокументУчета);
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Документ1С", ДокументУчета);
	
	Закрыть(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстПервичныйДокументОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбщаяОбработкаНавигационнойСсылки(РолиДокументовУчета().ПервичныйДокумент
		, НавигационнаяСсылкаФорматированнойСтроки
		, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбщаяОбработкаНавигационнойСсылки(РолиДокументовУчета().СчетФактура
		, НавигационнаяСсылкаФорматированнойСтроки
		, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаНавигационныхСсылок

// Общий обработчик события элементов формы "ОбработкаНавигационнойСсылки".
//
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - Значение гиперссылки форматированной строки;
//  СтандартнаяОбработка					 - Булево - Ложь, если нужно отключить стандартную обработку;
//
&НаКлиенте
Процедура ОбщаяОбработкаНавигационнойСсылки(РольДокумента, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Команда = ВРег(НавигационнаяСсылкаФорматированнойСтроки);
	
	Если Команда = ВРег("Создать") Тогда 
		
		ДобавитьСтатистику_НажалиСоздать();
		
		СтандартнаяОбработка = Ложь;
		НачатьПроверкиПередСозданиемДокументаУчета(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Выбрать") Тогда 
		
		ДобавитьСтатистику_НажалиВыбрать();
		
		СтандартнаяОбработка = Ложь;
		НачатьПодборДокументаУчета(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Отменить") Тогда 
		
		СтандартнаяОбработка = Ложь;
		ОтменитьСопоставлениеДокументов(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Показать") Тогда 
		
		СтандартнаяОбработка = Ложь;
		ПоказатьКоллекциюДокументов(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Сопоставить") Тогда 
		
		СтандартнаяОбработка = Ложь;
		СопоставитьСПодходящимДокументомУчета(РольДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокБлокирующихОкон()
	
	Возврат НСтр("ru = 'Диадок'");
	
КонецФункции

&НаСервере
Процедура ПрочитатьОбработатьПараметрыФормы()
	
	// Получаем значения параметров формы
	Организация		 = СвойствоСтруктуры(Параметры, "Организация");
	Контрагент		 = СвойствоСтруктуры(Параметры, "Контрагент");
	ПротоКонтент	 = СвойствоСтруктуры(Параметры, "ПротоКонтент");
	ЭлектронныйДокумент = СвойствоСтруктуры(Параметры, "ЭлектронныйДокумент");
	
	// Преобразовываем контент в универсальную структуру
	ОписаниеЭД = МенеджерИнтеграции_ДанныеЭлектронногоДокумента(ЭлектронныйДокумент, ПротоКонтент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РолиДокументовУчета()
	
	РолиДокументов = Новый Структура;
	РолиДокументов.Вставить("СчетФактура"		, "СчетФактура");
	РолиДокументов.Вставить("ПервичныйДокумент"	, "ПервичныйДокумент");
	
	Результат = Новый ФиксированнаяСтруктура(РолиДокументов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРолиДокумента(РольДокумента, ЭтоКорректировка)
	
	Результат = РольДокумента;
	
	Если РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда 
		
		Если ЭтоКорректировка Тогда 
			Результат = НСтр("ru = 'Соглашение об изменении стоимости'");
		Иначе 
			Результат = НСтр("ru = 'Передаточный документ'");
		КонецЕсли;
		
	ИначеЕсли РольДокумента = РолиДокументовУчета().СчетФактура Тогда 
		
		Если ЭтоКорректировка Тогда 
			Результат = НСтр("ru = 'Корректировочный счет-фактура'");
		Иначе 
			Результат = НСтр("ru = 'Счет-фактура'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭД(ДанныеЭД, РольДокумента = Неопределено)
	
	ФорматЭД = ДанныеЭД.ЭлектронныйДокумент.Формат;
	ШапкаДокумента = ДанныеЭД.Шапка;
	
	Если ЗначениеЗаполнено(РольДокумента) Тогда 
		НазваниеДокумента = ПредставлениеРолиДокумента(РольДокумента, ФорматЭД.ЭтоКорректировка);
	Иначе 
		НазваниеДокумента = ФорматЭД.Представление;
	КонецЕсли;
	
	Результат = СтрШаблон("%1 %2 от %3", НазваниеДокумента, ШапкаДокумента.Номер, Формат(ШапкаДокумента.Дата, "ДЛФ=D"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СвязанныйЭлементУправления(РольДокумента)
	
	Результат = Неопределено;
	
	Если РольДокумента = РолиДокументовУчета().СчетФактура Тогда 
		Результат = Элементы.ТекстСчетФактура;
	ИначеЕсли РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда 
		Результат = Элементы.ТекстПервичныйДокумент;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГиперссылкаДействиеСДокументом(Действие, Знач Текст = "")
	
	Если Не ЗначениеЗаполнено(Текст) Тогда 
		Текст = СтрШаблон(НСтр("ru = '%1'"), НРег(Действие));
	КонецЕсли;
	
	ЦветТекста = WebЦвета.ТемноКрасный;
	Если ВРег(Действие) = ВРег("Показать") Тогда 
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Текст,,ЦветТекста,, Действие);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КомандыДляОтраженияДокументаВУчете()

	Результат = Новый Структура;
	Результат.Вставить("Создать"		, Ложь); // Создать новый документ учета
	Результат.Вставить("Выбрать"		, Ложь); // Выбрать существующий документ учета
	Результат.Вставить("Сопоставить"	, Ложь); // Сопоставить с предложенным документом учета
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНадписиДокументаУчета(ДокументыУчета, КомандыДляНовогоЭД, КандидатДляСопоставления = Неопределено)
	
	Подстроки = Новый Массив;
	
	Если ЗначениеЗаполнено(ДокументыУчета) Тогда 
		
		ПредставлениеДокументов = ПредставлениеКоллекцииДокументов(ДокументыУчета);
		Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Показать", ПредставлениеДокументов));
		//Подстроки.Добавить("   ");
		//Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Выбрать", "Добавить"));
		Подстроки.Добавить("   ");
		Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Отменить", "Отменить"));
		
	ИначеЕсли КомандыДляНовогоЭД.Сопоставить И ЗначениеЗаполнено(КандидатДляСопоставления) Тогда
		
		СопоставитьС = ПредставлениеДокумента(КандидатДляСопоставления);
		
		Подстроки.Добавить(НСтр("ru = 'Сопоставить с '"));
		Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Сопоставить", СопоставитьС));
		
	Иначе
		
		// Требуется <Создать> или <Выбрать>
		Подстроки.Добавить(НСтр("ru = 'Требуется '"));
		
		Если КомандыДляНовогоЭД.Создать И КомандыДляНовогоЭД.Выбрать Тогда
			
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Создать"));
			Подстроки.Добавить(НСтр("ru = ' или '"));
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Выбрать"));
			
		ИначеЕсли КомандыДляНовогоЭД.Создать Тогда
			
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Создать"));
			
		ИначеЕсли КомандыДляНовогоЭД.Выбрать Тогда
			
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Выбрать"));
			
		КонецЕсли;
		
		Подстроки.Добавить(НСтр("ru = '.'"));
		
	КонецЕсли;
	
	Результат = Новый ФорматированнаяСтрока(Подстроки);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиПД(Форма)
	
	Если Не Форма.ЭлектронныйДокумент.Формат.ЕстьФункцияПД Тогда
		Форма.ТекстПервичныйДокумент = Новый ФорматированнаяСтрока(НСтр("ru = 'Не требуется.'"));
		Возврат;
	КонецЕсли;
	
	КомандыДляНовогоЭД = КомандыДляОтраженияДокументаВУчете();
	
	Если ЗначениеЗаполнено(Форма.ПервичныйДокументСчетаФактуры) Тогда
		
		КомандыДляНовогоЭД.Сопоставить = Истина;
		
	Иначе
		
		КомандыДляНовогоЭД.Выбрать = Истина;
		КомандыДляНовогоЭД.Создать = Истина;
		
	КонецЕсли;
	
	Форма.ТекстПервичныйДокумент = ТекстНадписиДокументаУчета(Форма.СопоставленныеПервичныеДокументы
		, КомандыДляНовогоЭД
		, Форма.ПервичныйДокументСчетаФактуры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиСФ(Форма)
	
	ЭтоСФ = Форма.ЭлектронныйДокумент.Формат.ЕстьФункцияСФ;
	ЭтоПД = Форма.ЭлектронныйДокумент.Формат.ЕстьФункцияПД;
	
	Если Не ЭтоСФ Тогда
		Форма.ТекстСчетФактура = Новый ФорматированнаяСтрока(НСтр("ru = 'Не требуется.'"));
		Возврат;
	КонецЕсли;
	
	РолиДокументов = РолиДокументовУчета();
	КомандыДляНовогоЭД = КомандыДляОтраженияДокументаВУчете();
	
	Если ЗначениеЗаполнено(Форма.СчетФактураПервичногоДокумента) Тогда
		
		КомандыДляНовогоЭД.Сопоставить = Истина;
		
	ИначеЕсли ЭтоПД Тогда
		
		Если ЗначениеЗаполнено(Форма.СопоставленныеПервичныеДокументы) Тогда
			КомандыДляНовогоЭД.Создать = Истина;
		Иначе
			КомандыДляНовогоЭД.Выбрать = Истина;
		КонецЕсли;
		
	Иначе
		
		КомандыДляНовогоЭД.Создать = Истина;
		КомандыДляНовогоЭД.Выбрать = Истина;
		
	КонецЕсли;
	
	Форма.ТекстСчетФактура = ТекстНадписиДокументаУчета(Форма.СопоставленныеСчетаФактуры
		, КомандыДляНовогоЭД
		, Форма.СчетФактураПервичногоДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГруппыРолиДокумента(РольДокумента)
	
	ПредставлениеРоли = ПредставлениеРолиДокумента(РольДокумента, ЭлектронныйДокумент.Формат.ЭтоКорректировка);
	
	ЭлементФормы = Элементы["Группа" + РольДокумента];
	ЭлементФормы.Заголовок = ПредставлениеРоли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСчетФактуруПервичногоДокумента()
	
	Если Не ЗначениеЗаполнено(СопоставленныеПервичныеДокументы) Тогда 
		СчетФактураПервичногоДокумента = Неопределено;
		Возврат;
	КонецЕсли;
	
	СопоставленныйДокумент = СопоставленныеПервичныеДокументы[0].Значение;
	
	НайденныеСФ = МенеджерИнтеграции_СчетаФактурыПоОснованию(СопоставленныйДокумент);
	
	Если ЗначениеЗаполнено(НайденныеСФ) Тогда 
		СчетФактураПервичногоДокумента = НайденныеСФ[0];
	Иначе 
		СчетФактураПервичногоДокумента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПервичныйДокументСчетаФактуры()
	
	Если Не ЗначениеЗаполнено(СопоставленныеСчетаФактуры) Тогда 
		ПервичныйДокументСчетаФактуры = Неопределено;
		Возврат;
	КонецЕсли;
	
	СопоставленныйДокумент = СопоставленныеСчетаФактуры[0].Значение;
	
	НайденныеОснования = МенеджерИнтеграции_ДокументыОснованияСчетаФактуры(СопоставленныйДокумент);
	
	Если ЗначениеЗаполнено(НайденныеОснования) Тогда 
		ПервичныйДокументСчетаФактуры = НайденныеОснования[0];
	Иначе 
		ПервичныйДокументСчетаФактуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшСопоставленныхДокументов()
	
	РолиДокументов = РолиДокументовУчета();
	
	ЗаполнитьСписокСопоставленныхДокументов(СопоставленныеПервичныеДокументы, РолиДокументов.ПервичныйДокумент);
	ЗаполнитьСписокСопоставленныхДокументов(СопоставленныеСчетаФактуры, РолиДокументов.СчетФактура);
	
	ПолучитьСчетФактуруПервичногоДокумента();
	ПолучитьПервичныйДокументСчетаФактуры();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписи(Форма)
	
	УстановитьТекстНадписиПД(Форма);
	УстановитьТекстНадписиСФ(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоллекцииДокументов(Коллекция)
	
	Результат = "";
	
	Если Не ЗначениеЗаполнено(Коллекция) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	МаксИндекс	 = Коллекция.Количество() - 1;
	Результат	 = Строка(Коллекция[МаксИндекс]);
	
	Если Коллекция.Количество() > 1 Тогда 
		
		Окончание = Строка(Коллекция.Количество() - 1);
		
		Результат = СтрШаблон(НСтр("ru = '%1 (+ еще %2)'")
					, Результат
					, НРег(Окончание));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьФормыОбИзмененииСвязейДокументов(ДокументИлиМассив)
	
	Если Не ЗначениеЗаполнено(ДокументИлиМассив) Тогда 
		ДокументУчета = Неопределено;
	ИначеЕсли ТипЗнч(ДокументИлиМассив) = Тип("Массив") Тогда 
		ДокументУчета = ДокументИлиМассив[0];
	Иначе 
		ДокументУчета = ДокументИлиМассив;
	КонецЕсли;
	
	ИдентификаторЭД = ЭлектронныйДокумент.Идентификатор;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТипСущности"	, "Документ");
	ПараметрыОповещения.Вставить("BoxID"		, ИдентификаторЭД.ИдентификаторОрганизации);
	ПараметрыОповещения.Вставить("DocumentID"	, ИдентификаторЭД.СоставнойИдентификатор);
	ПараметрыОповещения.Вставить("Документ1С"	, ДокументУчета);
	
	МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

&НаКлиенте
Процедура ПоказатьКоллекциюДокументов(РольДокумента)
	
	Если РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда
		КоллекцияДокументов = СопоставленныеПервичныеДокументы;
	Иначе
		КоллекцияДокументов = СопоставленныеСчетаФактуры;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КоллекцияДокументов) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Электронный документ не отражен в учете'"), 30, ЗаголовокБлокирующихОкон());
		
	ИначеЕсли КоллекцияДокументов.Количество() = 1 Тогда
		
		СсылкаНаОбъект = КоллекцияДокументов[0].Значение;
		ОткрытьФормуСопоставленногоДокумента(СсылкаНаОбъект);
		
	Иначе
		
		ПоказатьЗначение(, КоллекцияДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодборДокументаУчета(РольДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РольДокумента", РольДокумента);
	Обработчик = Новый ОписаниеОповещения("ПродолжитьПодборДокументаУчетаПослеВыбораТипа", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборТипаДокументаУчета(РольДокумента, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодборДокументаУчетаПослеВыбораТипа(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПравилоОбработки = ЭлементСписка.Значение;
	ПоказатьФормуВыбораДокументаУчета(ПравилоОбработки, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВыбораДокументаУчета(ПравилоОбработки, ДополнительныеПараметры)
	
	ШапкаЭД = ОписаниеЭД.Шапка;
	
	МенеджерИнтеграции_ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(ОписаниеЭД);
	
	Контрагенты = СсылкиНаУчастниковДокументооборота(ШапкаЭД.Продавец);
	Организации = СсылкиНаУчастниковДокументооборота(ШапкаЭД.Покупатель);
	
	ЗначенияОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Организации) Тогда
		ЗначенияОтбора.Вставить("Организация", Организации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагенты) Тогда
		ЗначенияОтбора.Вставить("Контрагент", Контрагенты);
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", ЗначенияОтбора);
	ПараметрыВыбора.Вставить("РежимВыбора", Истина);
	
	ОписаниеОбъектаМетаданных = ПравилоОбработки.ОбъектМетаданных;
	ИмяФормыВыбора = СтрШаблон("%1.ФормаВыбора", ПолноеИмяТаблицы(ОписаниеОбъектаМетаданных));
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ЗавершитьПодборДокументаУчета", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ИмяФормыВыбора
				, ПараметрыВыбора
				, ЭтаФорма
				,
				,
				,
				, ОбработчикВыбора
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодборДокументаУчета(ДокументУчета, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда 
		Возврат;
	КонецЕсли;
	
	НачатьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСПодходящимДокументомУчета(РольДокумента)
	
	ЧтоСопоставить = Неопределено;
	Если РольДокумента = РолиДокументовУчета().СчетФактура Тогда
		ЧтоСопоставить = СчетФактураПервичногоДокумента;
	ИначеЕсли РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда
		ЧтоСопоставить = ПервичныйДокументСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧтоСопоставить) Тогда
		НачатьУстановкуСвязиСЭлектроннымДокументом(ЧтоСопоставить);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры = Неопределено)
	
	ИдентификаторЭД = ЭлектронныйДокумент.Идентификатор;
	ДокументУжеСопоставленСДругимЭД = Не МожноУстановитьСвязьСЭлектроннымДокументом(ДокументУчета, ИдентификаторЭД);
	
	Если ДокументУжеСопоставленСДругимЭД Тогда 
		
		ПредставлениеДокумента = ПредставлениеДокумента(ДокументУчета);
		Отказ = Истина;
		
		ТекстПредупреждения = НСтр("ru = 'Документ %1 уже сопоставлен с другим электронным документом!'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ПредставлениеДокумента);
		ПоказатьПредупреждение(, ТекстПредупреждения
			, 30
			, ЗаголовокБлокирующихОкон());
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры = Неопределено)
	
	ШапкаДокумента = ОписаниеЭД.Шапка;
	
	РеквизитыЭД = Новый Структура;
	РеквизитыЭД.Вставить("Номер", ШапкаДокумента.Номер);
	РеквизитыЭД.Вставить("Дата"	, ШапкаДокумента.Дата);
	РеквизитыЭД.Вставить("НомерИсправления", ШапкаДокумента.НомерИсправления);
	РеквизитыЭД.Вставить("ДатаИсправления"	, ШапкаДокумента.ДатаИсправления);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДокументУчета", ДокументУчета);
	ПараметрыОбработчика.Вставить("РеквизитыЭД", РеквизитыЭД);
	СледующийОбработчик = Новый ОписаниеОповещения("ЗавершитьУстановкуСвязиСЭлектроннымДокументом", ЭтотОбъект, ПараметрыОбработчика);
	
	РеквизитыДокументаУчета = РеквизитыДокументаУчета(ДокументУчета);
	
	Если Не ЗначениеЗаполнено(РеквизитыДокументаУчета)
		Или (РеквизитыЭД.Номер = РеквизитыДокументаУчета.Номер И РеквизитыЭД.Дата = РеквизитыДокументаУчета.Дата) Тогда
		
		ВыполнитьОбработкуОповещения(СледующийОбработчик, КодВозвратаДиалога.Нет);
		
	ИначеЕсли Не ЗначениеЗаполнено(РеквизитыДокументаУчета.Номер)
		И Не ЗначениеЗаполнено(РеквизитыДокументаУчета.Дата) Тогда 
		
		ВыполнитьОбработкуОповещения(СледующийОбработчик, КодВозвратаДиалога.Да);
		
	Иначе 
		
		ПредставлениеДокумента = ПредставлениеДокумента(ДокументУчета);
		
		ОтличияВНомере = СтрШаблон("Номер входящего документа: %1; номер электронного документа: %2"
							, РеквизитыДокументаУчета.Номер
							, РеквизитыЭД.Номер);
		
		ОтличияВДате = СтрШаблон("Дата входящего документа: %1; дата электронного документа: %2"
							, Формат(РеквизитыДокументаУчета.Дата, "ДФ=dd.MM.yyyy; ДП=-")
							, Формат(РеквизитыЭД.Дата, "ДФ=dd.MM.yyyy; ДП=-"));
		
		ТекстВопроса = НСтр("ru = 'Значения реквизитов ""%1"" отличаются от данных электронного документа:
                             |%2
                             |%3
                             |Обновить реквизиты?'");
		
		ТекстВопроса = СтрШаблон(ТекстВопроса
						, ПредставлениеДокумента
						, ОтличияВНомере
						, ОтличияВДате);
		
		ПоказатьВопрос(СледующийОбработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 30,, ЗаголовокБлокирующихОкон());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУстановкуСвязиСЭлектроннымДокументом(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументУчета = ДополнительныеПараметры.ДокументУчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда 
		
		РеквизитыЭД = СвойствоСтруктуры(ДополнительныеПараметры, "РеквизитыЭД");
		ОбновитьРеквизитыДокументаУчета(ДокументУчета, РеквизитыЭД);
		
	КонецЕсли;
	
	ИдентификаторЭД = ЭлектронныйДокумент.Идентификатор;
	
	УстановитьСвязьСЭлектроннымДокументом(ДокументУчета, ИдентификаторЭД);
	ОбновитьКэшСопоставленныхДокументов();
	ОбновитьНадписи(ЭтаФорма);
	
	ДобавитьСтатистику_ВыбратьДокумент();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьРучнойВыборДокументаУчета(РольДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РольДокумента", РольДокумента);
	
	Обработчик = Новый ОписаниеОповещения("ПредложитьРучнойВыборДокументаУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Не найдено ни одного подходящего документа учета!
                        |Продолжить выбор документа вручную?'");
	
	ТекстЗаголовка = НСтр("ru = 'Электронный документ не сопоставлен с документом учета.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ОткрытьФормуПодбора", "Да");
	Кнопки.Добавить(КодВозвратаДиалога.Нет);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 30, Кнопки[0].Значение, ТекстЗаголовка, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьСопоставлениеСНайденнымиДокументами(НайденныеДокументы, РольДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РольДокумента"		, РольДокумента);
	ДополнительныеПараметры.Вставить("НайденныеДокументы"	, НайденныеДокументы);
	
	Обработчик = Новый ОписаниеОповещения("ПредложитьРучнойВыборДокументаУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Найдены подходящие варианты для сопоставления:
                         |%1
                         |Выберите дальнейшее действие.'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, ПредставлениеКоллекцииДокументов(НайденныеДокументы));
	
	ТекстЗаголовка = НСтр("ru = 'Документы для сопоставления.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("СопоставитьСНайденными", "Сопоставить с найденными");
	Кнопки.Добавить("ОткрытьФормуПодбора", "Указать документ вручную");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 30, Кнопки[0].Значение, ТекстЗаголовка, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьРучнойВыборДокументаУчетаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	НайденныеДокументы	 = СвойствоСтруктуры(ДополнительныеПараметры, "НайденныеДокументы");
	РольДокумента		 = СвойствоСтруктуры(ДополнительныеПараметры, "РольДокумента");
	
	Если ВРег(КодВозврата) = ВРег("ОткрытьФормуПодбора") Тогда 
		
		НачатьПодборДокументаУчета(РольДокумента);
		
	ИначеЕсли ВРег(КодВозврата) = ВРег("СопоставитьСНайденными") Тогда 
		
		ИдентификаторЭД = ЭлектронныйДокумент.Идентификатор;
		
		УстановитьСвязьСЭлектроннымДокументом(НайденныеДокументы, ИдентификаторЭД);
		ОбновитьКэшСопоставленныхДокументов();
		ОбновитьНадписи(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкиПередСозданиемДокументаУчета(РольДокумента)
	
	МенеджерИнтеграции_ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(ОписаниеЭД);
	//+asevryugin@PCRU.LOCAL, 2020-09-15 08:31:48
	Document= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ОписаниеЭД.ЭлектронныйДокумент.Идентификатор.ИдентификаторОрганизации).GetDocumentById(ОписаниеЭД.ЭлектронныйДокумент.Идентификатор.СоставнойИдентификатор);
	
	PCRU_ИмяФайла = Document.Title;
	//FileName	
	Если Document.type <> "Nonformalized" и Document.type <> "NonformalizedProforma"  Тогда
			PCRU_РасширениеФайла = "XLSX";
			ТД =   СформироватьПечатнуюФормуПоДокументуДиадока(Document);
			ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(PCRU_РасширениеФайла);
			ТД.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.XLSX) ;
			ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
			PCRU_ДвоичныеДанныеДокумента = 	Base64Строка(ДД);
			УдалитьФайлы(ИмяВременногоФайла);
		Иначе
			PCRU_РасширениеФайла = СтрПолучитьСтроку(СтрЗаменить(Document.FileName,".",Символы.ПС),СтрЧислоСтрок(СтрЗаменить(Document.FileName,".",Символы.ПС)));    
			Если Document.HasCustomPrintForm = Ложь Тогда
				ИмяВременногоФайла=	ПолучитьИмяВременногоФайла(PCRU_РасширениеФайла);
				Document.SaveSenderContent(ИмяВременногоФайла);
			Иначе
				PCRU_РасширениеФайла = "pdf";
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(PCRU_РасширениеФайла);
				Document.GetPrintForm(ИмяВременногоФайла, 30);
			КонецЕсли;
			ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
			PCRU_ДвоичныеДанныеДокумента = 	Base64Строка(ДД);
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли; 
	//+/asevryugin@PCRU.LOCAL, 2020-09-15 08:31:48
	
	ОшибкиЗаполнения = Неопределено;
	Если Не ПроверитьВозможностьСозданияДокументаИБ(РольДокумента, ОшибкиЗаполнения) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось отразить ""%1"" в учете по причине:
                               |%2'");
		
		ТекстСообщения = СтрШаблон(ТекстСообщения
							, ПредставлениеЭД(ОписаниеЭД, РольДокумента)
							, СтрСоединить(ОшибкиЗаполнения, Символы.ПС));
		
		ПоказатьПредупреждение(, ТекстСообщения, 30, ЗаголовокБлокирующихОкон());
		
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНоменклатураНаКонтроле() Тогда 
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПродолжитьСозданиеДокументаУчета", Истина);
		ДополнительныеПараметры.Вставить("РольДокумента", РольДокумента);
		
		ПоказатьПомощникСопоставленияНоменклатуры(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	НачатьСозданиеДокументаУчета(РольДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеДокументаУчета(РольДокумента)
	
	ПараметрыСозданияДокумента = Новый Структура;
	ПараметрыСозданияДокумента.Вставить("РольДокумента", РольДокумента);
	Обработчик = Новый ОписаниеОповещения("ПродолжитьСозданиеДокументаУчетаПослеВыбораТипа", ЭтотОбъект, ПараметрыСозданияДокумента);
	
	ПоказатьВыборТипаДокументаУчета(РольДокумента, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеДокументаУчетаПослеВыбораТипа(ВыбранныйЭлемент, ПараметрыСозданияДокумента) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыСозданияДокумента.Вставить("ПравилоОбработки", ВыбранныйЭлемент.Значение);
	
	ЗапроситьПодтверждениеПередСозданиемДокументаУчета(ПараметрыСозданияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПодтверждениеПередСозданиемДокументаУчета(ПараметрыСозданияДокумента)
	
	Обработчик = Новый ОписаниеОповещения("ЗавершитьСозданиеДокументаУчета", ЭтаФорма, ПараметрыСозданияДокумента);
	
	ЗапрашиватьПодтверждение = ЗапрашиватьПодтверждениеПередСозданиемДокумента();
	
	Если Не ЗапрашиватьПодтверждение Тогда 
		
		ВыполнитьОбработкуОповещения(Обработчик, "Продолжить");
		
	Иначе 
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'ОК'"));
		Кнопки.Добавить("ПродолжитьИБольшеНеСпрашивать", НСтр("ru = 'ОК (запомнить выбор)'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПравилоОбработки = ПараметрыСозданияДокумента.ПравилоОбработки;
		ОписаниеМетаданных = ПравилоОбработки.ОбъектМетаданных;
		
		ТекстВопроса = НСтр("ru = 'Документ ""%1"" будет заполнен и записан автоматически. Продолжить?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса
							, ПредставлениеОбъектаМетаданых(ОписаниеМетаданных));
		
		ПоказатьВопрос(Обработчик
			, ТекстВопроса
			, Кнопки
			, 60
			, Кнопки[0].Значение
			, ЗаголовокБлокирующихОкон()
			, КодВозвратаДиалога.Отмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСозданиеДокументаУчета(ОтветПользователя, ПараметрыСозданияДокумента) Экспорт
	
	Если ОтветПользователя <> "Продолжить" 
		И ОтветПользователя <> "ПродолжитьИБольшеНеСпрашивать" Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОтветПользователя = "ПродолжитьИБольшеНеСпрашивать" Тогда 
		ОтключитьЗапросПодтвержденияПередСозданиемДокумента();
	КонецЕсли;
	
	СсылкаНаОбъект = ЗавершитьСозданиеДокументаУчетаНаСервере(ПараметрыСозданияДокумента);
	ОбновитьНадписи(ЭтаФорма);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ДобавитьСтатистику_ОтразитьДокументВУчете(ПараметрыСозданияДокумента.ПравилоОбработки.Представление);	
	КонецЕсли;
	
	ОткрытьФормуСопоставленногоДокумента(СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставленногоДокумента(СсылкаНаОбъект)
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СсылкаНаОбъект);
	
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	ИмяФормыОбъекта = СтрШаблон("%1.ФормаОбъекта", ПолноеИмяТаблицы(ТипОбъекта));
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗакрытияФормыДокументаУчета", ЭтотОбъект, СсылкаНаОбъект);
	
	ОткрытьФорму(ИмяФормыОбъекта
		, ПараметрыФормы
		,
		, СсылкаНаОбъект
		,
		,
		, Обработчик
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыДокументаУчета(РезультатЗакрытия, СсылкаНаОбъект) Экспорт
	
	ПредставлениеОбъекта = ПредставлениеДокумента(СсылкаНаОбъект);
	УстановитьПредставлениеЗначенияВСписке(СопоставленныеПервичныеДокументы, СсылкаНаОбъект, ПредставлениеОбъекта);
	УстановитьПредставлениеЗначенияВСписке(СопоставленныеСчетаФактуры, СсылкаНаОбъект, ПредставлениеОбъекта);
	
	ОбновитьНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеЗначенияВСписке(Список, Значение, Представление)
	
	ЭлементСписка = Список.НайтиПоЗначению(Значение);
	
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьСозданиеДокументаУчетаНаСервере(ПараметрыСозданияДокумента)
	
	ИдентификаторПравила = ПараметрыСозданияДокумента.ПравилоОбработки.Идентификатор;
	
	Результат = СоздатьДокументУчета(ОписаниеЭД, ИдентификаторПравила);
	
	ОбновитьКэшСопоставленныхДокументов();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВыборТипаДокументаУчета(РольДокумента, Обработчик)
	
	ФорматЭД = ЭлектронныйДокумент.Формат;
	СписокПравил = ПравилаОбработкиЭлектронногоДокумента(РольДокумента, ФорматЭД);
	
	Если Не ЗначениеЗаполнено(СписокПравил) Тогда 
		
		Ошибка = "Не найдены правила обработки входящих документов!";
		СобытиеЖР = СобытиеЖурналаРегистрации();
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖР
			, "Ошибка"
			, Ошибка);
		
		ТекстПредупреждения = НСтр("ru = 'Не удалось отразить %1 в учете по причине:
                                    |%2
                                    |Создание и сопоставление документов ""%3"" 
                                    |недоступно для вашей конфигурации.'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения
			, ПредставлениеЭД(ОписаниеЭД)
			, Ошибка
			, ПредставлениеРолиДокумента(РольДокумента, ФорматЭД.ЭтоКорректировка));
		
		ПоказатьПредупреждение(, ТекстПредупреждения, 60, ЗаголовокБлокирующихОкон());
		
	ИначеЕсли СписокПравил.Количество() = 1 Тогда 
		
		ВыбранныйЭлемент = СписокПравил[0];
		ВыполнитьОбработкуОповещения(Обработчик, ВыбранныйЭлемент);
		
	Иначе 
		
		ЭлементФормы = СвязанныйЭлементУправления(РольДокумента);
		
		ПоказатьВыборИзМеню(Обработчик, СписокПравил, ЭлементФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомощникСопоставленияНоменклатуры(ДополнительныеПараметры = Неопределено)
	
	НоменклатураДляСопоставления = ПодготовитьДанныеНоменклатурыДляСопоставления(ОписаниеЭД);
	
	Если Не ЗначениеЗаполнено(НоменклатураДляСопоставления) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НоменклатураДляСопоставления", НоменклатураДляСопоставления);
	
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповоеСопоставлениеНоменклатуры"
		, ПараметрыФормы
		, ЭтаФорма
		, "ЗавершитьСопоставлениеНоменклатуры"
		, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСопоставлениеНоменклатуры(РезультатСопоставления, ДополнительныеПараметры) Экспорт
	
	Если РезультатСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатыСопоставленияНоменклатуры(РезультатСопоставления);
	
	ПродолжитьСозданиеДокументаУчета = СвойствоСтруктуры(ДополнительныеПараметры, "ПродолжитьСозданиеДокументаУчета", Ложь);
	Если ПродолжитьСозданиеДокументаУчета Тогда 
		РольДокумента = СвойствоСтруктуры(ДополнительныеПараметры, "РольДокумента");
		НачатьСозданиеДокументаУчета(РольДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМетаданными

&НаСервере
Функция ПравилаОбработкиЭлектронногоДокумента(РольДокумента, ФорматЭД)
	
	Если РольДокумента = РолиДокументовУчета().СчетФактура Тогда
		
		Результат = МенеджерИнтеграции_ПравилаОбработкиСчетовФактур(ФорматЭД);
		
	Иначе
		
		Результат = МенеджерИнтеграции_ПравилаОбработкиПервичныхДокументов(ФорматЭД);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхПоОписанию(ОписаниеОбъектаМетаданных)
	
	ОбъектМетаданных = Неопределено;
	
	ТипОписанияОбъектаМетаданных = ТипЗнч(ОписаниеОбъектаМетаданных);
	
	Если ТипОписанияОбъектаМетаданных = Тип("Тип") Тогда 
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
	ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("Строка") Тогда 
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъектаМетаданных);
	ИначеЕсли ТипОписанияОбъектаМетаданных = Тип("ОбъектМетаданных") Тогда 
		ОбъектМетаданных = ОписаниеОбъектаМетаданных;
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда 
		
		ОписаниеОш = СтрШаблон(НСтр("ru = 'Ошибка при выполнении функции Модуль_ИнтеграцииУниверсальный.ОбъектМетаданныхПоОписанию().
                                     |
                                     |Объект метаданных не найден:
                                     |ОписаниеОбъектаМетаданных = ""%1"" (тип ""%2"")'")
								, ОписаниеОбъектаМетаданных
								, Строка(ТипОписанияОбъектаМетаданных));
		
		ВызватьИсключение ОписаниеОш;
		
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

&НаСервере
Функция ДоступныеВидыМетаданных(РольДокумента)
	
	ФорматЭД = ЭлектронныйДокумент.Формат;
	СписокПравил = ПравилаОбработкиЭлектронногоДокумента(РольДокумента, ФорматЭД);
	
	Результат = Новый Массив;
	
	ОбработанныеТипы = Новый Соответствие;
	
	Для Каждого Элемент Из СписокПравил Цикл 
		
		ПравилоОбработки = Элемент.Значение;
		ОписаниеМетаданных = ПравилоОбработки.ОбъектМетаданных;
		
		Если ОбработанныеТипы[ОписаниеМетаданных] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеТипы.Вставить(ОписаниеМетаданных, Истина);
		
		ОбъектМетаданных = ОбъектМетаданныхПоОписанию(ОписаниеМетаданных);
		Результат.Добавить(ОбъектМетаданных);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеИмяТаблицы(ОписаниеОбъектаМетаданных)
	
	ОбъектМетаданных = ОбъектМетаданныхПоОписанию(ОписаниеОбъектаМетаданных);
	
	Возврат ОбъектМетаданных.ПолноеИмя();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОбъектаМетаданых(ОписаниеОбъектаМетаданных)
	
	ОбъектМетаданных = ОбъектМетаданныхПоОписанию(ОписаниеОбъектаМетаданных);
	
	Результат = ОбъектМетаданных.ПредставлениеОбъекта;
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбъектМетаданных.Представление();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПоискСозданиеИСпоставлениеДокументов

&НаКлиенте
Функция ПроверитьВозможностьСозданияДокументаИБ(РольДокумента, Ошибки = Неопределено)
	
	Результат = Истина;
	
	Если Ошибки = Неопределено Тогда 
		Ошибки = Новый Массив;
	КонецЕсли;
	
	ШапкаЭД = ОписаниеЭД.Шапка;
	
	Организации = СсылкиНаУчастниковДокументооборота(ШапкаЭД.Покупатель);
	Контрагенты = СсылкиНаУчастниковДокументооборота(ШапкаЭД.Продавец);
	
	Если Не ЗначениеЗаполнено(Организации) Тогда
		
		ОписаниеОш = НСтр("ru = 'Не указана организация!
                           |Для создания документа сопоставьте организацию Диадока с организацией 1С.'");
		Ошибки.Добавить(ОписаниеОш);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагенты) Тогда
		
		ОписаниеОш = НСтр("ru = 'Не указан контрагент!
                           |Для создания документа сопоставьте контрагента Диадока с контрагентом 1С.'");
		Ошибки.Добавить(ОписаниеОш);
		
	КонецЕсли;
	
	Если Организации.Количество() > 1 Или Контрагенты.Количество() > 1 Тогда
		
		ОписаниеОш = НСтр("ru = 'Электронный документ содержит сведения о нескольких
                           |покупателях или продавцах! Автоматическое создание
                           |документов информационной базы на основании таких 
                           |электронных документов не поддерживается.'");
		
		Ошибки.Добавить(ОписаниеОш);
		
	КонецЕсли;
	
	Если ЭлектронныйДокумент.Формат.ЭтоКорректировка И РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда 
		
		ДокументОснованиеКорректировки		 = СвойствоСтруктуры(ШапкаЭД, "КорректируемыйДокумент.ПервичныйДокумент");
		СчетФактураОснованиеКорректировки	 = СвойствоСтруктуры(ШапкаЭД, "КорректируемыйДокумент.СчетФактура");
		
		КорректируемыйДокументНомер	 = СвойствоСтруктуры(ШапкаЭД, "КорректируемыйДокумент.Номер");
		КорректируемыйДокументДата	 = СвойствоСтруктуры(ШапкаЭД, "КорректируемыйДокумент.Дата");
		КорректируемыйДокументДата	 = Формат(КорректируемыйДокументДата, "ДФ=dd.MM.yyyy; ДП=-");
		
		Если Не ЗначениеЗаполнено(ДокументОснованиеКорректировки) Тогда 
			
			ОписаниеОш = НСтр("ru = 'Для корректировки не найден документ-основание №%1 от %2!'");
			ОписаниеОш = СтрШаблон(ОписаниеОш, КорректируемыйДокументНомер, КорректируемыйДокументДата);
			Ошибки.Добавить(ОписаниеОш);
			
		ИначеЕсли ТипЗнч(ДокументОснованиеКорректировки) = Тип("Массив") И ДокументОснованиеКорректировки.Количество() > 1 Тогда 
			
			ОписаниеОш = НСтр("ru = 'Для корректировки найдено несколько документов-оснований №%1 от %2.'");
			ОписаниеОш = СтрШаблон(ОписаниеОш, КорректируемыйДокументНомер, КорректируемыйДокументДата);
			Ошибки.Добавить(ОписаниеОш);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибки) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитыДокументаУчета(ДокументУчета)
	
	МетаданныеОбъекта = ДокументУчета.Метаданные();
	ЗапрашиваемыеРеквизиты = МенеджерИнтеграции_СоответствиеРеквизитовПолямВходящегоДокумента(МетаданныеОбъекта);
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ЗапрашиваемыеРеквизиты) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУчета, ЗапрашиваемыеРеквизиты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыДокументаУчета(ДокументУчета, ЗначенияРеквизитов)
	
	МетаданныеОбъекта = ДокументУчета.Метаданные();
	
	СоответствиеРеквизитов = МенеджерИнтеграции_СоответствиеРеквизитовПолямВходящегоДокумента(МетаданныеОбъекта);
	
	ИзменяемыеРеквизиты = Новый Структура;
	
	ИмяРеквизитаНомер = СоответствиеРеквизитов.Номер;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаНомер, МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизитаНомер) Тогда
		ИзменяемыеРеквизиты.Вставить(ИмяРеквизитаНомер, ЗначенияРеквизитов.Номер);
	КонецЕсли;
	
	ИмяРеквизитаДата = СоответствиеРеквизитов.Дата;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаДата, МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизитаДата) Тогда
		ИзменяемыеРеквизиты.Вставить(ИмяРеквизитаДата, ЗначенияРеквизитов.Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИзменяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ДокументУчета.ПолучитьОбъект();
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ДокументОбъект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Заблокировать();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ИзменяемыеРеквизиты);
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		ШаблонКомментария = НСтр("ru = 'Не удалось обновить реквизиты входящего документа:
                                  |%1'");
		
		КомментарийЖР = СтрШаблон(ШаблонКомментария, ПодробноеПредставлениеОшибки(Ошибка));
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации()
			, УровеньЖурналаРегистрации.Ошибка
			, МетаданныеОбъекта
			, ДокументУчета
			, КомментарийЖР);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив учетных документов, сопоставленных с электронным документом.
//
// Параметры:
//  Идентификатор - Структура - см. Модуль_Клиент.НовыйИдентификаторЭлектронногоДокумента;
// 
// Возвращаемое значение:
//  Массив - содержит ссылки на документы учета (первичные документы и СФ).
//
&НаСервере
Функция СопоставленныеУчетныеДокументы(Идентификатор, РольДокумента = Неопределено)
	
	НайденныеДокументы = МенеджерИнтеграции_СопоставленныеУчетныеДокументы(Идентификатор);
	
	Если РольДокумента = Неопределено Тогда 
		Возврат НайденныеДокументы;
	КонецЕсли;
	
	ОтборПоМетаданным = ДоступныеВидыМетаданных(РольДокумента);
	
	Результат = Новый Массив;
	
	Для Каждого ДокументУчета Из НайденныеДокументы Цикл 
		
		ОбъектМетаданных = ДокументУчета.Метаданные();
		
		Если ОтборПоМетаданным.Найти(ОбъектМетаданных) <> Неопределено Тогда 
			Результат.Добавить(ДокументУчета);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСопоставленныхДокументов(Список, РольДокумента = Неопределено)
	
	ИдентификаторЭД = ЭлектронныйДокумент.Идентификатор;
	СопоставленныеДокументы = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РольДокумента);
	
	Список.Очистить();
	
	Если Не ЗначениеЗаполнено(СопоставленныеДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляПредставления = ПоляПредставленияДокумента();
	
	ЗначенияПолей = ЗначенияРеквизитовОбъектов(СопоставленныеДокументы, ПоляПредставления);
	
	Для Каждого СсылкаНаОбъект Из СопоставленныеДокументы Цикл
		
		РеквизитыОбъекта = ЗначенияПолей[СсылкаНаОбъект];
		ПредставлениеСсылки = ПредставлениеДокумента(СсылкаНаОбъект, РеквизитыОбъекта);
		
		Список.Добавить(СсылкаНаОбъект, ПредставлениеСсылки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляПредставленияДокумента()
	
	Результат = Новый Массив;
	Результат.Добавить("Номер");
	Результат.Добавить("Дата");
	Результат.Добавить("Проведен");
	Результат.Добавить("ПометкаУдаления");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеДокумента(СсылкаНаОбъект, РеквизитыОбъекта = Неопределено)
	
	ШаблонПредставления = НСтр("ru = '%1 №%2 от %3 %4'");
	
	Если Не ЗначениеЗаполнено(РеквизитыОбъекта) Тогда
		
		ПоляПредставления = ПоляПредставленияДокумента();
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ПоляПредставления);
		
	КонецЕсли;
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	Если РеквизитыОбъекта.ПометкаУдаления Тогда
		СостояниеОбъекта = НСтр("ru='(удален)'");
	ИначеЕсли МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить
		И Не РеквизитыОбъекта.Проведен Тогда
		СостояниеОбъекта = НСтр("ru='(не проведен)'");
	Иначе
		СостояниеОбъекта = "";
	КонецЕсли;
	
	Результат = СокрЛП(СтрШаблон(ШаблонПредставления
		, ПредставлениеОбъектаМетаданых(МетаданныеОбъекта)
		, РеквизитыОбъекта.Номер
		, Формат(РеквизитыОбъекта.Дата, "ДЛФ=D")
		, СостояниеОбъекта));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьДокументУчета(ДанныеЭД, ИдентификаторПравилаОбработки)
	
	НовыйОбъект = МенеджерИнтеграции_НовыйДокументИнформационнойБазы(ДанныеЭД, ИдентификаторПравилаОбработки);
	
	ИдентификаторЭД = ДанныеЭД.ЭлектронныйДокумент.Идентификатор;
	
	ПМ_ПослеЗаполненияНовогоДокумента(НовыйОбъект
		, ПротоКонтент
		, ИдентификаторЭД.ИдентификаторОрганизации
		, ИдентификаторЭД.СоставнойИдентификатор);
	
	НачатьТранзакцию();
	Попытка
	
		НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		//+asevryugin@PCRU.LOCAL, 2020-09-15 07:41:16
		
		ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);
        адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	    СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
		СтрПарам.ВладелецФайлов = НовыйОбъект.Ссылка;
		СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
		СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
		
		РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
		//+/asevryugin@PCRU.LOCAL, 2020-09-15 07:41:16

		УстановитьСвязьСЭлектроннымДокументом(НовыйОбъект.Ссылка, ИдентификаторЭД);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОш = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ учета по причине:
                           |%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОш);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура ОтменитьСопоставлениеДокументов(РольДокумента)
	
	Если РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда
		СопоставленныеДокументы = СопоставленныеПервичныеДокументы;
	Иначе
		СопоставленныеДокументы = СопоставленныеСчетаФактуры;
	КонецЕсли;
	
	РазорватьСвязьСЭлектроннымДокументом(СопоставленныеДокументы.ВыгрузитьЗначения());
	ОбновитьКэшСопоставленныхДокументов();
	ОбновитьНадписи(ЭтаФорма);
	
КонецПроцедуры

// Устанавливает связь учетных документов с электронным документом.
//
// Параметры:
//  ДокументИлиМассив	 - ДокументСсылка, Массив - документы учета, которые нужно сопоставить с ЭД;
//  Идентификатор		 - Структура	 - идентификатор электронного документа, с которым нужно сопоставить учетные документы;
//                         Неопределено	 - учетные документы будут отвязаны от электронного документа;
//
&НаСервере
Процедура УстановитьСвязьСЭлектроннымДокументом(ДокументИлиМассив, Идентификатор)
	
	Если ТипЗнч(ДокументИлиМассив) = Тип("Массив") Тогда 
		ДокументыДляОбработки = ДокументИлиМассив;
	Иначе 
		ДокументыДляОбработки = Новый Массив;
		ДокументыДляОбработки.Добавить(ДокументИлиМассив);
	КонецЕсли;
	
	Для Каждого ДокументУчета Из ДокументыДляОбработки Цикл 
		
		Если Не ЗначениеЗаполнено(ДокументУчета) Тогда 
			Продолжить;
		КонецЕсли;
		
		ОсновнойМодуль_Установить_DocumentID_Для_Документ(ДокументУчета
			, Идентификатор.СоставнойИдентификатор
			, Идентификатор.ИдентификаторОрганизации);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет связь учетных документов с электронным документом.
//
// Параметры:
//  ДокументИлиМассив	 - ДокументСсылка, Массив - документы учета, которые нужно сопоставить с ЭД;
//  Идентификатор		 - Структура	 - идентификатор электронного документа, с которым нужно сопоставить учетные документы;
//                         Неопределено	 - учетные документы будут отвязаны от электронного документа;
//
&НаСервере
Процедура РазорватьСвязьСЭлектроннымДокументом(ДокументИлиМассив)
	
	Если ТипЗнч(ДокументИлиМассив) = Тип("Массив") Тогда 
		ДокументыДляОбработки = ДокументИлиМассив;
	Иначе 
		ДокументыДляОбработки = Новый Массив;
		ДокументыДляОбработки.Добавить(ДокументИлиМассив);
	КонецЕсли;
	
	Для Каждого ДокументУчета Из ДокументыДляОбработки Цикл 
		
		ОсновнойМодуль_Установить_DocumentID_Для_Документ(ДокументУчета, "", "");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МожноУстановитьСвязьСЭлектроннымДокументом(ДокументУчета, Идентификатор)
	
	ИдентификаторСвязанногоЭД = ОсновнойМодуль_Документ_2_DocumentID(ДокументУчета);
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторСвязанногоЭД)
		Или ИдентификаторСвязанногоЭД = Идентификатор.СоставнойИдентификатор Тогда 
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СсылкиНаУчастниковДокументооборота(ДанныеУчастника)
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ДанныеУчастника) = Тип("Массив") Тогда
		КоллекцияУчастников = ДанныеУчастника;
	Иначе
		КоллекцияУчастников = Новый Массив;
		КоллекцияУчастников.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	Для Каждого Участник Из КоллекцияУчастников Цикл
		Если ЗначениеЗаполнено(Участник.Ссылка) Тогда
			Результат.Добавить(Участник.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПоискСозданиеИСопоставлениеНоменклатуры

&НаСервере
Функция ЕстьНоменклатураНаКонтроле()
	
	НоменклатураНаКонтроле = МенеджерИнтеграции_НоменклатураНаКонтроле(ОписаниеЭД);
	
	Возврат ЗначениеЗаполнено(НоменклатураНаКонтроле);
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеНоменклатурыДляСопоставления(ДанныеЭД)
	
	ТолькоНесопоставленная = Ложь;
	
	Результат = МенеджерИнтеграции_НоменклатураЭлектронногоДокументаДляСопоставления(ДанныеЭД, ТолькоНесопоставленная);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатыСопоставленияНоменклатуры(РезультатСопоставления)
	
	Если Не ЗначениеЗаполнено(РезультатСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из РезультатСопоставления Цикл
		
		НоменклатураКонтрагента = Элемент.НоменклатураКонтрагента;
		НоменклатураИБ = Элемент.НоменклатураИБ;
		
		Для Каждого Стр Из ОписаниеЭД.ТоварнаяЧасть Цикл
			
			Если Стр.КлючСтроки = НоменклатураКонтрагента.Идентификатор Тогда
				ЗаполнитьЗначенияСвойств(Стр.Номенклатура, НоменклатураИБ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиПользователей

&НаСервереБезКонтекста
Функция ЗапрашиватьПодтверждениеПередСозданиемДокумента()
	
	КлючНастроек = КлючНастроек_ЗапрашиватьПодтверждениеПередСозданиемДокумента();
	Результат	 = НастройкиПользователяЗагрузить(КлючНастроек, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтключитьЗапросПодтвержденияПередСозданиемДокумента()
	
	КлючНастроек = КлючНастроек_ЗапрашиватьПодтверждениеПередСозданиемДокумента();
	НастройкиПользователяСохранить(КлючНастроек, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючОбъектаНастроек()
	
	Возврат "ДиадокСтандарт/НастройкиПользователя";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек_ЗапрашиватьПодтверждениеПередСозданиемДокумента()
	
	Возврат "ЗапрашиватьПодтверждениеПередСозданиемДокумента";
	
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиПользователяЗагрузить(КлючНастроек, ЗначениеПоУмолчанию)
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъектаНастроек()
					, КлючНастроек
					, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции // НастройкиПользователяЗагрузить()

&НаСервереБезКонтекста
Процедура НастройкиПользователяСохранить(КлючНастроек, Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастроек()
		, КлючНастроек
		, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Диадок'");
	
КонецФункции

// Возвращает значение свойства структуры или значение по умолчанию,
// если указанное свойство не существует. 
// 
// Параметры:
// 	СложнаяСтруктура	 - Структура	 - Структура, которая может содержать вложенные структуры.
// 	ПолныйКлюч			 - Строка		 - Полное имя ключа с учетом вложенности структур. 
// 										   Имена свойств вложенных структур отделяются точкой)
// 	ЗначениеПоУмолчанию	 - Произвольный	 - Необязательный. Возвращается когда в структуре нет значения по указанному
// 										   ключу. Для скорости рекомендуется передавать только быстро вычисляемые 
// 										   значения (например примитивные типы),а инициализацию более тяжелых значений
// 										   выполнять после проверки полученного значения (только если это требуется).
// 
// Возвращаемое значение:
// 	Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
&НаКлиентеНаСервереБезКонтекста
Функция СвойствоСтруктуры(СложнаяСтруктура, ПолныйКлюч, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	Если Не ЗначениеЗаполнено(ПолныйКлюч) Или СложнаяСтруктура = Неопределено Тогда // ЗначениеЗаполнено не применять, т.к. это может быть объект ДанныеФормыСтруктура
		Возврат Результат;
	КонецЕсли;
	
	ПростыеКлючи = СтрРазделить(ПолныйКлюч, ".");
	
	ЗначениеПолучено = Ложь;
	ТекущееЗначение	 = Неопределено;
	ТекущаяСтруктура = СложнаяСтруктура;
	
	ВГраница = ПростыеКлючи.ВГраница();
	
	Для Сч = 0 По ВГраница Цикл
		
		ТекущийКлюч = ПростыеКлючи[Сч];
		
		Если ТекущаяСтруктура.Свойство(ТекущийКлюч, ТекущееЗначение) Тогда
			
			Если Сч = ВГраница Тогда
				
				// Это последний ПолныйКлюч в массиве
				ЗначениеПолучено = Истина;
				
			ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Структура") Тогда
				
				// Есть подчиненная СложнаяСтруктура для получения следующего значения
				ТекущаяСтруктура = ТекущееЗначение;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеПолучено Тогда
		Результат = ТекущееЗначение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъектов(Ссылки, Знач Реквизиты, ВыбратьРазрешенные = Ложь)
	
	// Для совместимости с БСП 3.0 и ниже
	Если ТипЗнч(Реквизиты) = Тип("Массив") 
		Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Реквизиты = СтрСоединить(Реквизиты, ",");
	КонецЕсли;
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Ссылки, Реквизиты);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОберткиДляВызоваУниверсальныхМетодов

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМенеджераИнтеграции()
	
	Возврат "Модуль_ИнтеграцияУниверсальный";
	
КонецФункции

&НаСервере
Процедура МенеджерИнтеграции_ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(ДанныеЭД)
	
	МетодСервера(ИмяМенеджераИнтеграции(), "ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ", ДанныеЭД);
	
	МетодСервера("Модуль_ИнтеграцияУниверсальный", "ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ", ДанныеЭД);
	//+asevryugin@PCRU.LOCAL, 2020-09-09 12:13:05
	Для каждого Элемент Из ДанныеЭД.ТоварнаяЧасть Цикл
	    НаименованиеНоменклатуры =  Элемент.НоменклатураКонтрагента.Наименование;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	ИЛИ Номенклатура.НаименованиеПолное = &Наименование";
		Запрос.УстановитьПараметр("Наименование",НаименованиеНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			 Элемент.Номенклатура.Номенклатура =  Выборка.Ссылка;
		КонецЦикла;
		// 
		Если не ЗначениеЗаполнено(Элемент.Номенклатура.Номенклатура)  Тогда
		   СправочникН                     = Справочники.Номенклатура.СоздатьЭлемент();
		   СправочникН.Наименование        = НаименованиеНоменклатуры;
		   //СправочникН.ПолноеНаименование  = НаименованиеНоменклатуры;
		   СправочникН.ЕдиницаИзмерения    = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		   Если СтрЧислоВхождений(НаименованиеНоменклатуры,"Услуг") > 0 Тогда
               СправочникН.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
		   Иначе	
	 		   СправочникН.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары");
		   КонецЕсли; 
		   СправочникН.Записать();
		   Элемент.Номенклатура.Номенклатура = СправочникН.Ссылка;
	   КонецЕсли; 
	КонецЦикла; 
	//+/asevryugin@PCRU.LOCAL, 2020-09-09 12:13:05

КонецПроцедуры

&НаСервере
Функция МенеджерИнтеграции_НовыйДокументИнформационнойБазы(ДанныеЭД, ИдентификаторПравилаОбработки)
	
	Возврат МетодСервера(ИмяМенеджераИнтеграции(), "НовыйДокументИнформационнойБазы"
				, ДанныеЭД
				, ИдентификаторПравилаОбработки);
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_СчетаФактурыПоОснованию(СсылкаНаОбъект)
	
	Возврат МетодСервера(ИмяМенеджераИнтеграции(), "СчетаФактурыПоОснованию"
				, СсылкаНаОбъект);
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_ДокументыОснованияСчетаФактуры(СсылкаНаОбъект)
	
	Возврат МетодСервера(ИмяМенеджераИнтеграции(), "ДокументыОснованияСчетаФактуры"
				, СсылкаНаОбъект);
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_ДанныеЭлектронногоДокумента(ЭД, Контент)
	
	Возврат МетодСервера(ИмяМенеджераИнтеграции(), "ДанныеЭлектронногоДокумента"
				, ЭД
				, Контент);
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_НоменклатураНаКонтроле(ДанныеЭД)
	
	Возврат МетодСервера(ИмяМенеджераИнтеграции(), "НоменклатураНаКонтроле", ДанныеЭД);
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_НоменклатураЭлектронногоДокументаДляСопоставления(ДанныеЭД, ТолькоНесопоставленная)
	
	Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "НоменклатураЭлектронногоДокумента"
		, ДанныеЭД
		, ТолькоНесопоставленная);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_СоответствиеРеквизитовПолямВходящегоДокумента(ОбъектМетаданных)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "СоответствиеРеквизитовПолямВходящегоДокумента", ОбъектМетаданных);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_ПравилаОбработкиСчетовФактур(ФорматЭД)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "ПравилаОбработкиСчетовФактур", ФорматЭД);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_ПравилаОбработкиПервичныхДокументов(ФорматЭД)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "ПравилаОбработкиПервичныхДокументов", ФорматЭД);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_СопоставленныеУчетныеДокументы(ИдентификаторЭД)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "СопоставленныеУчетныеДокументы", ИдентификаторЭД);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОсновнойМодуль_Документ_2_DocumentID(ДокументУчета)
	
	Результат = МетодСервера(, "Документ_2_DocumentID", ДокументУчета);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОсновнойМодуль_Установить_DocumentID_Для_Документ(ДокументУчета, DocumentID, BoxID)
	
	МетодСервера(, "Установить_DocumentID_Для_Документ"
			, ДокументУчета
			, DocumentID
			, BoxID);
	
КонецПроцедуры

&НаСервере
Процедура ПМ_ПослеЗаполненияНовогоДокумента(ДокументОбъект, Контент, BoxID, DocumentID)
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("ДокументОбъект"	, ДокументОбъект);
	ПараметрыПМ.Вставить("СтруктураКонтента", Контент);
	ПараметрыПМ.Вставить("BoxID"			, BoxID);
	ПараметрыПМ.Вставить("DocumentID"		, DocumentID);
	
	МетодСервера(, "ОбработкаСобытияПодключаемогоМодуля", "ПослеЗаполненияНовогоДокументаПоступления", ПараметрыПМ);
	
КонецПроцедуры

#КонецОбласти

#Область ОберткиДляДанныхСтатистики

&НаКлиенте
Процедура ДобавитьСтатистику_НажалиСоздать()
	
	Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
	НазваниеФормы 		= "Форма отражения документа в учете";
	НазваниеКатегории 	= Категории.ОтражениеВУчете;
	НазваниеДействия 	= "Создать";
	
	МетодКлиента(	"Модуль_Клиент",
					"Метрика_ДобавитьПоведение_НажатиеКнопки",
					НазваниеФормы,
					НазваниеКатегории,
					НазваниеДействия	);

	
КонецПроцедуры
				
&НаКлиенте
Процедура ДобавитьСтатистику_НажалиВыбрать()
	
	Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
	НазваниеФормы 		= "Форма отражения документа в учете";
	НазваниеКатегории 	= Категории.ОтражениеВУчете;
	НазваниеДействия 	= "Выбрать";
	
	МетодКлиента(	"Модуль_Клиент",
					"Метрика_ДобавитьПоведение_НажатиеКнопки",
					НазваниеФормы,
					НазваниеКатегории,
					НазваниеДействия	);

	
КонецПроцедуры
				
&НаКлиенте
Процедура ДобавитьСтатистику_ОтразитьДокументВУчете(ПравилоОбработкиПредставление)
	
	ФорматЭД 		= ЭлектронныйДокумент.Формат;
	Идентификаторы 	= ЭлектронныйДокумент.Идентификатор;
	BoxGuid 		= МетодКлиента("Модуль_Клиент", "ПолучитьBoxGuidПоId", Идентификаторы.ИдентификаторОрганизации);
	
	Переменные = Новый Структура;
			
	Переменные.Вставить("BoxID"				, BoxGuid);
	Переменные.Вставить("DocumentID"		, Идентификаторы.СоставнойИдентификатор);
	Переменные.Вставить("LetterID"			, Идентификаторы.ИдентификаторСообщения);
	Переменные.Вставить("ВидОперации"		, ПравилоОбработкиПредставление);
	Переменные.Вставить("ИмяТипа"			, ФорматЭД.ИмяТипа);
	Переменные.Вставить("ФункцияДокумента"	, ФорматЭД.ФункцияДокумента);
	Переменные.Вставить("ВерсияФормата"		, ФорматЭД.ВерсияФормата);
	
	МетодКлиента(	"Модуль_Клиент",
					"Метрика_ДобавитьСтатистику_СоздатьДокумент",
					Переменные	);
					
КонецПроцедуры
				
&НаКлиенте
Процедура ДобавитьСтатистику_ВыбратьДокумент()
	
	ФорматЭД 		= ЭлектронныйДокумент.Формат;
	Идентификаторы 	= ЭлектронныйДокумент.Идентификатор;
	BoxGuid 		= МетодКлиента("Модуль_Клиент", "ПолучитьBoxGuidПоId", Идентификаторы.ИдентификаторОрганизации);
	
	Переменные = Новый Структура;
	
	Переменные.Вставить("BoxID"				, BoxGuid);
	Переменные.Вставить("DocumentID"		, Идентификаторы.СоставнойИдентификатор);
	Переменные.Вставить("LetterID"			, Идентификаторы.ИдентификаторСообщения);
	Переменные.Вставить("ИмяТипа"			, ФорматЭД.ИмяТипа);
	Переменные.Вставить("ФункцияДокумента"	, ФорматЭД.ФункцияДокумента);
	Переменные.Вставить("ВерсияФормата"		, ФорматЭД.ВерсияФормата);
	
	МетодКлиента(	"Модуль_Клиент",
					"Метрика_ДобавитьСтатистику_ВыбратьДокумент",
					Переменные	);
					
КонецПроцедуры				

#КонецОбласти

//+asevryugin@PCRU.LOCAL, 2020-09-15 08:56:48
&НаКлиенте
// Параметры:
//	Document				- СОМ Объект	- обрабатываемый электронный документ
//	СтруктураSellerContent	- Структура 	- контент отправителя, соответствующий SellerContent, обрабатываемого электронного документа
//	СтруктураBuyerContent 	- Структура 	- контент получателя, соответствующий BuyerContent, обрабатываемого электронного документа 
Функция СформироватьДанныеОПодписях(Document, Content, BuyerContent)
	
	Результат = Новый Структура;
	
	Результат.Вставить("SellerSigner", МетодКлиента("Модуль_Клиент", "Новый_Signer"));
	Результат.Вставить("BuyerSigner" , МетодКлиента("Модуль_Клиент", "Новый_Signer"));
	
	Результат.Вставить("SenderSignature"   , МетодКлиента("Модуль_Клиент", "Новый_Signature"));
	Результат.Вставить("RecipientSignature", МетодКлиента("Модуль_Клиент", "Новый_Signature"));
	
	Результат.Вставить("DocumentMetaData", Новый Структура("Timestamp, DocumentID, SenderSignatureStatus, SenderName, RecipientName"));
	
	Результат.DocumentMetaData.DocumentID			 = Document.DocumentID;
	Результат.DocumentMetaData.TimeStamp			 = Document.TimeStamp;
	Результат.DocumentMetaData.SenderSignatureStatus = Document.SenderSignatureStatus;
	
	SenderSignature = Document.GetSenderSignature();
	Если SenderSignature <> Неопределено Тогда
		Результат.DocumentMetaData.SenderName = SenderSignature.Certificate.OrganizationName;
	КонецЕсли;
	
	RecipientSignature = Document.GetRecipientSignature();
	Если RecipientSignature <> Неопределено Тогда
		Результат.DocumentMetaData.RecipientName = RecipientSignature.Certificate.OrganizationName;
	КонецЕсли;
	
	Если Content.Свойство("Signer") Тогда
		
		Результат.SellerSigner = Content.Signer;
		
	ИначеЕсли Content.Свойство("Signers") И ЗначениеЗаполнено(Content.Signers) Тогда
		
		Результат.SellerSigner = Content.Signers[0].SignerDetails;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(BuyerContent) Тогда
		
		Если BuyerContent.Свойство("Signer") Тогда
			
			Результат.BuyerSigner = BuyerContent.Signer;
			
		ИначеЕсли BuyerContent.Свойство("Signers") И ЗначениеЗаполнено(BuyerContent.Signers) Тогда
			
			Результат.BuyerSigner = BuyerContent.Signers[0].SignerDetails;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetSenderSignature()	  , Результат.SenderSignature);
	МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetRecipientSignature(), Результат.RecipientSignature);
	
	Возврат Результат;
	
КонецФункции	
&НаКлиенте
Функция СформироватьПечатнуюФормуПоДокументуДиадока(Document)
	
	Результат = Неопределено;
	
	ПротоСтруктура		 = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Ложь);
	ПротоСтруктураОтвета = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Истина);
	
	Если ПротоСтруктура.Свойство("Контент") Тогда
		
		
		ПротоКонтентОтвета = Неопределено;
		ПротоСтруктураОтвета.Свойство("Контент", ПротоКонтентОтвета);
		
		ПротоКонтент		 = ПротоСтруктура.Контент;
		ТипКонтента			 = ПротоСтруктура.ТипКонтента;
		ТипДокумента		 = Document.Type;
		ДанныеШтампа		 = СформироватьДанныеОПодписях(Document, ПротоКонтент, ПротоКонтентОтвета);
		
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПротоКонтентОтвета"	, ПротоКонтентОтвета);
		ДопПараметры.Вставить("ДанныеШтампа"		, ДанныеШтампа);
		ДопПараметры.Вставить("ПоказатьДопСведения"	, Истина);
		
		Результат = МетодСервераБезКонтекста("ПечатныеФормы", "ПечатнаяФормаПротоКонтента", ПротоКонтент, ТипКонтента, ТипДокумента, ДопПараметры);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//+/asevryugin@PCRU.LOCAL, 2020-09-15 08:56:48