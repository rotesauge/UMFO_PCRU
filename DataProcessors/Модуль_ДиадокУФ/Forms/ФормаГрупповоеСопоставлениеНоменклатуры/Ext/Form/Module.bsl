
#Область ОписаниеПеременных

&НаКлиенте
Перем СохраненныеЭлементы;

#КонецОбласти

#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	НоменклатураДляСопоставления = Параметры.НоменклатураДляСопоставления;
	ЗаполнитьТаблицуСопоставления(НоменклатураДляСопоставления);
	
	НайтиВариантыСопоставленияНоменклатуры();
	
	ЗаполнитьПараметрыНоменклатуры();
	
	УстановитьУсловноеОформление();
	
	УстановитьСвойстваПереопределяемыхЭлементовФормы();
	УстановитьСвойстваЭлементаОтбораПоВладельцу();
	УстановитьСвойстваЭлементаОтбораПоСопоставлению();
	
	СопоставленоОтбор = ВариантыОтбораСопоставления().Все;
	ОбработатьОтборЗаписейСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПлатформаПриОткрытии(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если НЕ ЗавершениеРаботы Тогда
			ПоказатьВопросОСохраненииПередЗакрытием();
		КонецЕсли;
		
	Иначе
		
		ОтборНеСопоставленныхЗаписей = Новый Структура("Сопоставлено", Ложь);
		НеСопоставленныеСтроки = Сопоставление.НайтиСтроки(ОтборНеСопоставленныхЗаписей);
		
		Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(НеСопоставленныеСтроки) Тогда
			Отказ = Истина;
			ПоказатьВопросОСопоставленииПередЗакрытием();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецОтборПриИзменении(Элемент)
	
	ОбработатьОтборЗаписейСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставленоОтборПриИзменении(Элемент)
	
	ОбработатьОтборЗаписейСопоставления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСопоставление

&НаКлиенте
Процедура СопоставлениеПриИзменении(Элемент)
	
	СопоставлениеПриИзмененииНаСервере(Элемент.ТекущийЭлемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьСписокДействийСЭлементомСопоставления();
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Источник.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		
		ДополнительныеПараметры = Источник.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры;
		
		Если ЭтоЭлементСопоставления(ДополнительныеПараметры) Тогда
			
			ЗакончитьСозданиеНоменклатурыИнформационнойБазыВручную(ДополнительныеПараметры, НовыйОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Номенклатура

&НаКлиенте
Процедура СопоставлениеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоДействиеСЭлементомСопоставления(ВыбранноеЗначение) Тогда
	
		СтандартнаяОбработка = Ложь;
		ОбработатьДействиеСЭлементомСопоставления(ВыбранноеЗначение);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Упаковка

&НаКлиенте
Процедура СопоставлениеУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Переопределяемый_УпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Переопределяемый_УпаковкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	СохраненныеЭлементы = СохранитьСопоставление();
	
	Закрыть(СохраненныеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохраненныеЭлементы = СохранитьСопоставление();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформлениеФормы

&НаСервере
Процедура УстановитьВидимостьХарактеристикаКонтрагента()
	
	// Управление видимостью поля характеристики контрагента. Отключаем видимость, если поле не заполнено.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сопоставление.ХарактеристикаНаименование");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристикаНаименование.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьХарактеристикаИБ()
	
	// Управление видимостью поля характеристики ИБ, если она не используется или не заполнена номенклатура.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Сопоставление.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкаНезаполненногоХарактеристикаИБ()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("Сопоставление.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("Сопоставление.ОбязательноеЗаполнениеХарактеристики");
	ОтборЭлемента.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение	 = Новый ПолеКомпоновкиДанных("Сопоставление.Характеристика");
	ОтборЭлемента.ВидСравнения	 = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкаНезаполненногоУпаковкаИБ()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ГруппаЭлементовОтбораДанных = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбораДанных.Использование = Истина;

	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Сопоставление.ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сопоставление.Упаковка");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеУпаковка.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УстановитьВидимостьХарактеристикаКонтрагента();
	
	УстановитьВидимостьХарактеристикаИБ();
	
	УстановитьОтметкаНезаполненногоХарактеристикаИБ();
	
	УстановитьОтметкаНезаполненногоУпаковкаИБ();
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивноеВзаимодействие

&НаКлиенте
Процедура ПоказатьВопросОСохраненииПередЗакрытием()
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСохраненииПередЗакрытием", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?';
						|en = 'The data was changed. Do you want to save the changes?'");
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСохраненииПередЗакрытием(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СохраненныеЭлементы = СохранитьСопоставление();
		Закрыть(СохраненныеЭлементы);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		УстановитьПризнакСопоставленияСтрокамСопоставления();
		Закрыть(СохраненныеЭлементы);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСопоставленииПередЗакрытием()
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСопоставленииПередЗакрытием", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Сопоставлены не все позиции номенклатуры. Закрыть помощник сопоставления?';
						|en = 'Not all product items are mapped. Close the mapping wizard?'");
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСопоставленииПередЗакрытием(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		УстановитьПризнакСопоставленияСтрокамСопоставления();
		Закрыть(СохраненныеЭлементы);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереопределениеФормы

&НаКлиенте
Функция МаркерКонфигурации()
	
	Результат = Платформа.Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоРозница()
	
	Результат = (МаркерКонфигурации() = "Розница");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоУНФ()
	
	Результат = (МаркерКонфигурации() = "УНФ16");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоУТКАERP()
	
	Результат = (МаркерКонфигурации() = "УТ11");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Переопределяемый_УпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаСопоставления = Элементы.Сопоставление.ТекущиеДанные;
	
	Если ЭтоУНФ() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", ТекущаяСтрокаСопоставления.Номенклатура);
		
		ПараметрыВыборка = Новый Структура;
		ПараметрыВыборка.Вставить("Отбор", СтруктураОтбора);
		
		ПереопределяемыйМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеНебольшойФирмойЭлектронныеДокументыВызовСервера");
		ДанныеВыбора = ПереопределяемыйМодуль.ДанныеВыбораУпаковки(ПараметрыВыборка);
		
	ИначеЕсли ЭтоРозница() Тогда
		
		ПереопределяемыйМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаТабличнойЧастиТоварыКлиент");
		ПереопределяемыйМодуль.ВыбратьУпаковкуНоменклатуры(ДанныеВыбора,
			СтандартнаяОбработка,
			ТекущаяСтрокаСопоставления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Переопределяемый_УпаковкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоУТКАERP() Тогда
		
		ОбработкаВыбораУпаковкиУТ(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	ИначеЕсли ЭтоРозница() Тогда
		
		ОбработкаВыбораУпаковкиРозница(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораУпаковкиУТ(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаСопоставления = Элементы.Сопоставление.ТекущиеДанные;
	ВыбранноеЗначение = ЕдиницаХраненияНоменклатурыУТ(ТекущаяСтрокаСопоставления.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораУпаковкиРозница(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрокаСопоставления = Элементы.Сопоставление.ТекущиеДанные;
	ТекущаяСтрокаСопоставления.Упаковка = ВыбранноеЗначение;
	
КонецПроцедуры

// Возвращает единицу хранения номенклатуры (УТ/КА/ERP).
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - ссылка номенклатуры.
//
// Возвращаемое значение:
//  СправочникСсылка.УпаковкиЕдиницыИзмерения - единица хранения номенклатуры.
//
&НаСервереБезКонтекста
Функция ЕдиницаХраненияНоменклатурыУТ(Знач Номенклатура) Экспорт
	
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура УстановитьСвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач Значение)
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Структура.Вставить(ТекущееСвойство, Значение);
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			ТекущееЗначение = Новый Структура;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		УстановитьСвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, Значение);
		Структура.Вставить(ТекущееСвойство, ТекущееЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущийЭлементСопоставления()
	
	Результат = Неопределено;
	
	Запись = Элементы.Сопоставление.ТекущиеДанные;
	
	Если Запись <> Неопределено Тогда
		Результат = ЭлементСопоставленияПоЗаписи(Запись);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовоеДействиеСЭлементомСопоставления(Действие, ЭлементСопоставления)
	
	Результат = Новый Структура;
	Результат.Вставить("Действие", Действие);
	Результат.Вставить("ЭлементСопоставления", ЭлементСопоставления);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Действие_СоздатьНоменклатуру()
	
	Возврат "СоздатьНоменклатуру";
	
КонецФункции

&НаКлиенте
Функция ЭтоДействиеСЭлементомСопоставления(Знач ПроверяемоеЗначение)
	
	Результат = Ложь;
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Структура")
		И ПроверяемоеЗначение.Свойство("Действие") 
		И ПроверяемоеЗначение.Свойство("ЭлементСопоставления") Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоЭлементСопоставления(Знач ПроверяемоеЗначение)
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
		
		Если ПроверяемоеЗначение.Свойство("НоменклатураКонтрагента") 
			И ПроверяемоеЗначение.Свойство("НоменклатураИБ") Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДействиеСЭлементомСопоставления(Знач ОписаниеДействия)
	
	Действие = ОписаниеДействия.Действие;
	ЭлементСопоставления = ОписаниеДействия.ЭлементСопоставления;
	
	Если ЭлементСопоставления = Неопределено Тогда
		ЭлементСопоставления = ТекущийЭлементСопоставления();
	КонецЕсли;
	
	Если Действие = Действие_СоздатьНоменклатуру() Тогда
		НачатьСозданиеНоменклатурыИнформационнойБазы(ЭлементСопоставления);
	Иначе
		Ошибка = СтрШаблон("Неизвестное действие (%1)!", Действие);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДействийСЭлементомСопоставления()
	
	СписокДействий = Элементы.СопоставлениеНоменклатура.СписокВыбора;
	СписокДействий.Очистить();
	
	ЭлементСопоставления = ТекущийЭлементСопоставления();
	Если ЭлементСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоДобавленияНоменклатуры = Истина; // TODO: Добавить реквизит формы, заполнять при создании формы
	
	// Создать по данным контрагента.
	Если ЕстьПравоДобавленияНоменклатуры Тогда
		
		НовоеДействие = НовоеДействиеСЭлементомСопоставления(Действие_СоздатьНоменклатуру(), ЭлементСопоставления);
		Представление = НСтр("ru = 'Создать по данным контрагента'");
		
		СписокДействий.Добавить(НовоеДействие
			, Представление
			,
			, БиблиотекаКартинок.СоздатьЭлементСписка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	ЭлементСопоставления = ТекущийЭлементСопоставления();
	Если ЭлементСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраВыбора = Новый Структура;
	ЗначениеПараметраВыбора.Вставить("НоменклатураКонтрагента", ЭлементСопоставления.НоменклатураКонтрагента);
	
	ПараметрыВыбораНоменклатуры = Новый ПараметрВыбора("Дополнительно.ОбменСКонтрагентами", ЗначениеПараметраВыбора);
	
	ВсеПараметрыВыбора = Новый Массив;
	ВсеПараметрыВыбора.Добавить(ПараметрыВыбораНоменклатуры);
	
	Элементы.СопоставлениеНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ВсеПараметрыВыбора);
	Элементы.СопоставлениеХарактеристика.ПараметрыВыбора = Новый ФиксированныйМассив(ВсеПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеНоменклатурыИнформационнойБазы(ЭлементСопоставления)
	
	НоменклатураКонтрагента = ЭлементСопоставления.НоменклатураКонтрагента;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаименованиеНоменклатурыПоставщика", НоменклатураКонтрагента.Наименование);
	ПараметрыФормы.Вставить("АртикулНоменклатурыПоставщика", НоменклатураКонтрагента.Артикул);
	
	ПутьКСвойству = "ДополнительныеПараметры.ОбменСКонтрагентами.НоменклатураКонтрагента";
	УстановитьСвойствоСтруктуры(ПараметрыФормы, ПутьКСвойству, НоменклатураКонтрагента);
	
	// Передадим через ОписаниеОповещения элемент сопоставления для анализа в обработчике события СопоставлениеОбработкаЗаписиНового.
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ПослеЗакрытияФормыСозданияНоменклатурыВручную", ЭтотОбъект, ЭлементСопоставления);
	
	ФормаНоменклатуры = ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта"
		, ПараметрыФормы
		, Элементы.Сопоставление
		, ЭлементСопоставления
		,
		,
		, ОбработкаЗакрытия
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если ФормаНоменклатуры <> Неопределено Тогда
		
		АртикулНоменклатуры = НоменклатураКонтрагента.Артикул;
		
		Если ЗначениеЗаполнено(НоменклатураКонтрагента.Характеристика) Тогда
			НаименованиеНоменклатуры = СтрШаблон("%1 (%2)"
				, НоменклатураКонтрагента.Наименование
				, НоменклатураКонтрагента.Характеристика);
		Иначе
			НаименованиеНоменклатуры = НоменклатураКонтрагента.Наименование;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Артикул", АртикулНоменклатуры);
		ДанныеЗаполнения.Вставить("Наименование", НаименованиеНоменклатуры);
		ДанныеЗаполнения.Вставить("НаименованиеПолное", НаименованиеНоменклатуры);
		ДанныеЗаполнения.Вставить("НоменклатурныйНомер", АртикулНоменклатуры); // БГУ
		
		ЗаполнитьЗначенияСвойств(ФормаНоменклатуры.Объект, ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьСозданиеНоменклатурыИнформационнойБазыВручную(Знач ЭлементСопоставления, Знач НоваяНоменклатура)
	
	НоменклатураИБ = НоваяНоменклатураИнформационнойБазы(НоваяНоменклатура); 
	ЭлементСопоставления.НоменклатураИБ = НоменклатураИБ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСозданияНоменклатурыВручную(Знач Результат, Знач ЭлементСопоставления) Экспорт
	
	ОбработатьЭлементыСопоставления(ЭлементСопоставления);
	Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВариантыОтбораСопоставления()
	
	ВозможныеЗначения = Новый Структура;
	ВозможныеЗначения.Вставить("Все", "Все");
	ВозможныеЗначения.Вставить("Сопоставленные", "Сопоставленные");
	ВозможныеЗначения.Вставить("Несопоставленные", "Несопоставленные");
	
	Результат = Новый ФиксированнаяСтруктура(ВозможныеЗначения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваПереопределяемыхЭлементовФормы()
	
	МетаданныеСопоставления = МенеджерИнтеграции_МетаданныеСопоставленияНоменклатуры();
	
	Элементы.ВладелецОтбор.ОграничениеТипа               = МетаданныеСопоставления.ВладелецНоменклатурыТип;
	Элементы.СопоставлениеВладелец.ОграничениеТипа       = МетаданныеСопоставления.ВладелецНоменклатурыТип;
	Элементы.СопоставлениеНоменклатура.ОграничениеТипа   = МетаданныеСопоставления.НоменклатураТип;
	Элементы.СопоставлениеХарактеристика.ОграничениеТипа = МетаданныеСопоставления.ХарактеристикаТип;
	Элементы.СопоставлениеУпаковка.ОграничениеТипа       = МетаданныеСопоставления.УпаковкаТип;
	
	Элементы.ВладелецОтбор.Заголовок               = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.СопоставлениеВладелец.Заголовок       = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.СопоставлениеНоменклатура.Заголовок   = МетаданныеСопоставления.НоменклатураПредставлениеОбъекта;
	Элементы.СопоставлениеХарактеристика.Заголовок = МетаданныеСопоставления.ХарактеристикаПредставлениеОбъекта;
	Элементы.СопоставлениеУпаковка.Заголовок       = МетаданныеСопоставления.УпаковкаПредставлениеОбъекта;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики, 
			"Элементы.Сопоставление.ТекущиеДанные.Номенклатура");
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		Элементы.СопоставлениеХарактеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиУпаковки) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(МетаданныеСопоставления.ИмяПараметраСвязиУпаковки, 
			"Элементы.Сопоставление.ТекущиеДанные.Номенклатура");
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		Элементы.СопоставлениеУпаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаОтбораПоВладельцу()
	
	ВсеВладельцы = Новый Массив;
	Для Каждого Запись Из Сопоставление Цикл
		Если ВсеВладельцы.Найти(Запись.Владелец) = Неопределено Тогда
			ВсеВладельцы.Добавить(Запись.Владелец);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ВладелецОтбор.СписокВыбора.ЗагрузитьЗначения(ВсеВладельцы);
	Элементы.ВладелецОтбор.СписокВыбора.СортироватьПоЗначению();
	
	Если ВсеВладельцы.Количество() = 1 Тогда
		ВладелецОтбор = ВсеВладельцы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаОтбораПоСопоставлению()
	
	ВсегоЗаписей = Сопоставление.Количество();
	ВсеСопоставленныеЗаписи = Сопоставление.НайтиСтроки(Новый Структура("Сопоставлено", Истина));
	СопоставленоЗаписей     = ВсеСопоставленныеЗаписи.Количество();
	НеСопоставленоЗаписей   = ВсегоЗаписей - СопоставленоЗаписей;
	
	Элементы.СопоставленоОтбор.СписокВыбора[0].Представление = СтрШаблон(НСтр("ru = 'Все (%1)';
																				|en = 'All (%1)'"), ВсегоЗаписей);
	Элементы.СопоставленоОтбор.СписокВыбора[1].Представление = СтрШаблон(НСтр("ru = 'Сопоставленные (%1)';
																				|en = 'Mapped (%1)'"), СопоставленоЗаписей);
	Элементы.СопоставленоОтбор.СписокВыбора[2].Представление = СтрШаблон(НСтр("ru = 'Несопоставленные (%1)';
																				|en = 'Unmapped (%1)'"), НеСопоставленоЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтборЗаписейСопоставления()
	
	ОтборСтрок = Новый Структура;
	
	Если ЗначениеЗаполнено(ВладелецОтбор) Тогда
		ОтборСтрок.Вставить("Владелец", ВладелецОтбор);
	КонецЕсли;
	
	СопоставленоОтборЗначения = ВариантыОтбораСопоставления();
	Если СопоставленоОтбор = СопоставленоОтборЗначения.Сопоставленные Тогда
		ОтборСтрок.Вставить("Сопоставлено", Истина);
	ИначеЕсли СопоставленоОтбор = СопоставленоОтборЗначения.Несопоставленные Тогда
		ОтборСтрок.Вставить("Сопоставлено", Ложь);
	КонецЕсли;
	
	Элементы.Сопоставление.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСопоставления(НоменклатураДляСопоставления)
	
	ПоискДублей = Новый Структура;
	ПоискДублей.Вставить("Владелец");
	ПоискДублей.Вставить("Идентификатор");
	
	Для Каждого НоменклатураКонтрагента Из НоменклатураДляСопоставления Цикл
		
		ЗаполнитьЗначенияСвойств(ПоискДублей, НоменклатураКонтрагента);
		
		НайденныеСтроки = Сопоставление.НайтиСтроки(ПоискДублей);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Владелец = НоменклатураКонтрагента.Владелец;
		Идентификатор = НоменклатураКонтрагента.Идентификатор;
		
		Запись = Сопоставление.Добавить();
		
		// Данные контрагента
		Запись.Владелец = Владелец;
		Запись.Идентификатор = Идентификатор;
		Запись.НоменклатураНаименование = НоменклатураКонтрагента.Наименование;
		Запись.ХарактеристикаНаименование = НоменклатураКонтрагента.Характеристика;
		Запись.НоменклатураАртикул = НоменклатураКонтрагента.Артикул;
		Запись.НоменклатураКод = НоменклатураКонтрагента.Код;
		Запись.НоменклатураСорт = НоменклатураКонтрагента.Сорт;
		Запись.НоменклатураОписание = НоменклатураКонтрагента.Описание;
		Запись.ЕдиницаИзмеренияНаименование = НоменклатураКонтрагента.ЕдиницаИзмерения;
		Запись.ЕдиницаИзмеренияКод = НоменклатураКонтрагента.ЕдиницаИзмеренияКод;
		Запись.СтавкаНДСПредставление = НоменклатураКонтрагента.СтавкаНДС;
		
		// Данные информационной базы
		НоменклатураИБ = МенеджерИнтеграции_НоменклатураИнформационнойБазыПоИдентификатору(Владелец, Идентификатор);
		Если ЗначениеЗаполнено(НоменклатураИБ) Тогда
			ЗаполнитьЗначенияСвойств(Запись, НоменклатураИБ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыНоменклатуры(Знач НаборНоменклатурИБ = Неопределено)
	
	Если Не ЗначениеЗаполнено(НаборНоменклатурИБ) Тогда
		НаборНоменклатурИБ = Сопоставление.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	КонецЕсли;
	
	СвойстваНоменклатурИБ = МенеджерИнтеграции_СвойстваНоменклатурыИнформационнойБазы(НаборНоменклатурИБ);
	
	ФормаМодифицирована = Модифицированность;
	
	Для Каждого Запись Из Сопоставление Цикл
		ОбработатьЗаписьСопоставления(Запись, СвойстваНоменклатурИБ);
	КонецЦикла;
	
	Модифицированность = ФормаМодифицирована;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакСопоставленияСтрокамСопоставления()
	
	Для Каждого Запись Из Сопоставление Цикл
		Запись.Сопоставлено = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЭлементыСопоставления(Знач ЭлементыСопоставления)
	
	Если ТипЗнч(ЭлементыСопоставления) <> Тип("Массив") Тогда
		ЭлементыСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементыСопоставления);
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыСопоставления Цикл
		
		КлючЗаписи = Новый Структура("Владелец,Идентификатор");
		ЗаполнитьЗначенияСвойств(КлючЗаписи, Элемент.НоменклатураКонтрагента);
	
		ЗаписиСопоставления = Сопоставление.НайтиСтроки(КлючЗаписи);
	
		Для Каждого Запись Из ЗаписиСопоставления Цикл
		
			Запись.Номенклатура = Элемент.НоменклатураИБ.Номенклатура;
			Запись.Характеристика = Элемент.НоменклатураИБ.Характеристика;
			Запись.Упаковка = Элемент.НоменклатураИБ.Упаковка;
		
			ОбработатьЗаписьСопоставления(Запись);
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьСопоставления(Запись, СвойстваНоменклатурИБ = Неопределено)
	
	Модифицированность = Истина;
	
	ЗаписьСопоставлено = Запись.Сопоставлено;
	
	ЗаполнитьПризнакСопоставления(Запись, СвойстваНоменклатурИБ);
	
	Если ЗаписьСопоставлено <> Запись.Сопоставлено Тогда
		УстановитьСвойстваЭлементаОтбораПоСопоставлению();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СохранитьСопоставление()
	
	ОтборЭлементовДляСохранения = Новый Структура("Сопоставлено,Сохранено", Истина, Ложь);
	
	ЭлементыДляСохранения = ПолучитьЭлементыСопоставления(ОтборЭлементовДляСохранения);
	
	Для Каждого Элемент Из ЭлементыДляСохранения Цикл
		
		МенеджерИнтеграции_ЗаписатьСопоставлениеНоменклатуры(Элемент.НоменклатураКонтрагента, Элемент.НоменклатураИБ);
		
	КонецЦикла;
	
	СохраненныеЗаписи = Сопоставление.НайтиСтроки(ОтборЭлементовДляСохранения);
	
	Для Каждого Запись Из СохраненныеЗаписи Цикл
		
		Запись.Сохранено = Истина;
		
	КонецЦикла;
	
	ОтборСохраненныхЭлементов = Новый Структура("Сопоставлено,Сохранено", Истина,Истина);
	СохраненныеЭлементы = ПолучитьЭлементыСопоставления(ОтборСохраненныхЭлементов);
	
	Модифицированность = Ложь;
	
	Возврат СохраненныеЭлементы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПризнакСопоставления(Запись, Знач СвойстваНоменклатурыИБ = Неопределено)
	
	ЗаполнитьСвойстваСопоставления(Запись, СвойстваНоменклатурыИБ);
	
	Если ЗначениеЗаполнено(Запись.Номенклатура)
		И (ЗначениеЗаполнено(Запись.Характеристика) ИЛИ НЕ Запись.ИспользоватьХарактеристики
		ИЛИ Запись.ИспользоватьХарактеристики И НЕ Запись.ОбязательноеЗаполнениеХарактеристики)
		И (ЗначениеЗаполнено(Запись.Упаковка) ИЛИ НЕ Запись.ИспользоватьУпаковки) Тогда
		Запись.Сопоставлено = Истина;
	Иначе
		Запись.Сопоставлено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваСопоставления(Запись, Знач СвойстваНоменклатурыИБ)
	
	Если СвойстваНоменклатурыИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = СвойстваНоменклатурыИБ.Получить(Запись.Номенклатура);
	Если Свойства <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Запись, Свойства);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиВариантыСопоставленияНоменклатуры()
	
	Для Каждого СтрокаТаблицы Из Сопоставление Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоменклатураКонтрагента = НоменклатураКонтрагентаПоЗаписиСопоставления(СтрокаТаблицы);
		НоменклатураИБ = МетодСервера(, "ПолучитьНоменклатуруИнформационнойБазы", НоменклатураКонтрагента);
		
		Если ЗначениеЗаполнено(НоменклатураИБ) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НоменклатураИБ);
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМенеджераИнтеграции()
	
	Возврат "Модуль_ИнтеграцияУниверсальный";
	
КонецФункции

&НаСервере
Процедура МенеджерИнтеграции_ЗаписатьСопоставлениеНоменклатуры(НоменклатураКонтрагента, НоменклатураИБ)
	
	МетодСервера(ИмяМенеджераИнтеграции(), "ЗаписатьСопоставлениеНоменклатуры"
		, НоменклатураКонтрагента
		, НоменклатураИБ);
	
КонецПроцедуры

&НаСервере
Функция МенеджерИнтеграции_НоменклатураИнформационнойБазыПоИдентификатору(Владелец, Идентификатор)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "НоменклатураИнформационнойБазыПоИдентификатору"
		, Владелец
		, Идентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_СвойстваНоменклатурыИнформационнойБазы(НоменклатураИБ)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "СвойстваНоменклатурыИнформационнойБазы"
		, НоменклатураИБ);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_МетаданныеСопоставленияНоменклатуры()
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "МетаданныеСопоставленияНоменклатуры");
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура МенеджерИнтеграции_ПодобратьНоменклатуруИнформационнойБазы(НоменклатураКонтрагента, НоменклатураИБ)
	
	МетодСервера(ИмяМенеджераИнтеграции(), "ПодобратьНоменклатуруИнформационнойБазы"
		, НоменклатураКонтрагента
		, НоменклатураИБ);
	
КонецПроцедуры

&НаСервере
Процедура СопоставлениеПриИзмененииНаСервере(Знач ИмяЭлемента)
	
	ТекущаяСтрока = Элементы.Сопоставление.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Сопоставление.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СвойстваНоменклатурыИБ = МенеджерИнтеграции_СвойстваНоменклатурыИнформационнойБазы(Запись.Номенклатура);
	
	Если ИмяЭлемента = "СопоставлениеНоменклатура" Тогда
		
		ОбработатьИзменениеНоменклатурыИнформационнойБазы(Запись);
		
	КонецЕсли;
	
	ОбработатьЗаписьСопоставления(Запись, СвойстваНоменклатурыИБ);
	
КонецПроцедуры

&НаСервере
Процедура СопоставлениеУпаковкаОбработкаВыбораНаСервере()
	
	ТекущаяСтрока = Элементы.Сопоставление.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Сопоставление.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбработатьИзменениеНоменклатурыИнформационнойБазы(Запись);
	
	ОбработатьЗаписьСопоставления(Запись);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНоменклатурыИнформационнойБазы(Запись)
	
	НоменклатураКонтрагента = НоменклатураКонтрагентаПоЗаписиСопоставления(Запись);
	НоменклатураИБ = НоменклатураИнформационнойБазыПоЗаписиСопоставления(Запись);
	
	МенеджерИнтеграции_ПодобратьНоменклатуруИнформационнойБазы(НоменклатураКонтрагента, НоменклатураИБ);
	
	ЗаполнитьЗначенияСвойств(Запись, НоменклатураИБ);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлементыСопоставления(Знач Отбор = Неопределено)
	
	ЗаписиСопоставления = Сопоставление;
	Если ЗначениеЗаполнено(Отбор) Тогда
		Если ТипЗнч(Отбор) = Тип("Структура") Тогда
			ЗаписиСопоставления = Сопоставление.НайтиСтроки(Отбор);
		ИначеЕсли ТипЗнч(Отбор) = Тип("Массив") Тогда
			ЗаписиСопоставления = Отбор;
		КонецЕсли;
	КонецЕсли;
	
	ВыбранныеЭлементыСопоставления = Новый Массив;
	
	Для Каждого Запись Из ЗаписиСопоставления Цикл
		
		ЭлементСопоставления = ЭлементСопоставленияПоЗаписи(Запись);
		ВыбранныеЭлементыСопоставления.Добавить(ЭлементСопоставления);
		
	КонецЦикла;
	
	Возврат ВыбранныеЭлементыСопоставления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСопоставленияПоЗаписи(Запись)
	
	НоменклатураКонтрагента = НоменклатураКонтрагентаПоЗаписиСопоставления(Запись);
	НоменклатураИБ = НоменклатураИнформационнойБазыПоЗаписиСопоставления(Запись);
	
	Результат = Новый Структура;
	Результат.Вставить("НоменклатураКонтрагента", НоменклатураКонтрагента);
	Результат.Вставить("НоменклатураИБ", НоменклатураИБ);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатураКонтрагентаПоЗаписиСопоставления(Запись)
	
	Результат = НоваяНоменклатураКонтрагента(Запись.Владелец, Запись.Идентификатор);
	Результат.Наименование = Запись.НоменклатураНаименование;
	Результат.Характеристика = Запись.ХарактеристикаНаименование;
	Результат.Артикул = Запись.НоменклатураАртикул;
	Результат.Код = Запись.НоменклатураКод;
	Результат.Сорт = Запись.НоменклатураСорт;
	Результат.Описание = Запись.НоменклатураОписание;
	Результат.ЕдиницаИзмерения = Запись.ЕдиницаИзмеренияНаименование;
	Результат.ЕдиницаИзмеренияКод = Запись.ЕдиницаИзмеренияКод;
	Результат.СтавкаНДС = Запись.СтавкаНДСПредставление;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатураИнформационнойБазыПоЗаписиСопоставления(Запись)
	
	Результат = НоваяНоменклатураИнформационнойБазы(Запись.Номенклатура
		, Запись.Характеристика
		, Запись.Упаковка);
	
	Возврат Результат;
	
КонецФункции

// @КОПИЯ: Модуль_ИнтеграцияУниверсальный.НоваяНоменклатураКонтрагента
// Возвращает набор данных, представляющий номенклатуру контрагента.
//
&НаКлиентеНаСервереБезКонтекста
Функция НоваяНоменклатураКонтрагента(Знач Владелец = Неопределено, Знач Идентификатор = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Владелец", Владелец);
	Результат.Вставить("Идентификатор", Идентификатор);
	Результат.Вставить("Код");
	Результат.Вставить("Артикул");
	Результат.Вставить("Сорт");
	Результат.Вставить("Наименование");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Описание");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("ЕдиницаИзмеренияКод");
	Результат.Вставить("Штрихкод", "");
	Результат.Вставить("ШтрихкодыНоменклатуры", "");
	
	Возврат Результат;
	
КонецФункции

// @КОПИЯ: Модуль_ИнтеграцияУниверсальный.НоваяНоменклатураИнформационнойБазы
// Возвращает набор данных, представляющий номенклатуру информационной базы.
//
&НаКлиентеНаСервереБезКонтекста
Функция НоваяНоменклатураИнформационнойБазы(Номенклатура = Неопределено, Характеристика = Неопределено, Упаковка = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура"	, Номенклатура);
	Результат.Вставить("Характеристика"	, Характеристика);
	Результат.Вставить("Упаковка"		, Упаковка);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
