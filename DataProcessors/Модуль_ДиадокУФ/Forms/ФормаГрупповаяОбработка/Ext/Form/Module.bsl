#Область ПЕРЕМЕННЫЕ_ФОРМЫ

&НаКлиенте
Перем МаксимальноеКоличествоЗаданий;

&НаКлиенте
Перем КонтекстАсинхроннойОбработки;

&НаКлиенте
Перем СтатистикаСобытий;

&НаКлиенте
Перем КэшЗаголовковСтраниц;

&НаСервере
Перем КэшФормы;

#КонецОбласти

#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяМенеджераИнтеграции()
	
	Возврат "Модуль_ИнтеграцияУниверсальный";
	
КонецФункции

&НаКлиенте
Функция ФорматЭлектронногоДокумента(Document)
	
	Результат = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", Document);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоФормализованныйФормат(ФорматЭД)
	
	Результат = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйФормат", ФорматЭД);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоФормализованныйДокумент(Document)
	
	Результат = Ложь;
	
	Если Document <> Неопределено Тогда
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		Результат = ЭтоФормализованныйФормат(ФорматЭД);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУПД(ИмяТипа)
	
	ТипыУПД = Новый Структура;
	ТипыУПД.Вставить("UniversalTransferDocument");
	ТипыУПД.Вставить("UniversalTransferDocumentRevision");
	
	Результат = ТипыУПД.Свойство(ИмяТипа);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_НоменклатураЭлектронногоДокументаДляСопоставления(ДанныеЭД, ТолькоНесопоставленная)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "НоменклатураЭлектронногоДокумента"
		, ДанныеЭД
		, ТолькоНесопоставленная);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_ПравилаОбработкиВидаДокументов(ВидЭД, ЭтоИсправление)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "ПравилаОбработкиВидаДокументов"
		, ВидЭД
		, ЭтоИсправление);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_ВидыЭлектронныхДокументов()
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "ВидыЭлектронныхДокументов");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_НовыйДокументИнформационнойБазы(ДанныеЭД, ИдентификаторПравила, ДополнительныеПараметры = Неопределено)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(), "НовыйДокументИнформационнойБазы"
		, ДанныеЭД
		, ИдентификаторПравила
		, ДополнительныеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Обертка. Возвращает описание электронного документа в виде структуры 
//
// Параметры:
//	ЭлектронныйДокумент - Структура- описание электронного документа (см. Модуль_Клиент.НовыйЭлектронныйДокумент)
//	Контент - Структура - см. ПолучитьКонтекстДокументаСтруктурой
//
// Возвращаемое значение:
//	Структура
&НаСервере
Функция МенеджерИнтеграции_ДанныеЭлектронногоДокумента(ЭлектронныйДокумент, Контент)
	
	Результат = МетодСервера(ИмяМенеджераИнтеграции(),
		"ДанныеЭлектронногоДокумента",
		ЭлектронныйДокумент,
		Контент);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура МенеджерИнтеграции_ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(ДанныеЭД)
	
	МетодСервера(ИмяМенеджераИнтеграции(), "ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ", ДанныеЭД);
	
КонецПроцедуры

&НаСервере
Процедура ПМ_ПослеЗаполненияНовогоДокумента(НовыйДок, Контент, ИдентификаторЭД)
	
	ПараметрыПМ = Новый Структура;
	ПараметрыПМ.Вставить("ДокументОбъект"	, НовыйДок);
	ПараметрыПМ.Вставить("СтруктураКонтента", Контент);
	ПараметрыПМ.Вставить("BoxID"			, ИдентификаторЭД.ИдентификаторОрганизации);
	ПараметрыПМ.Вставить("DocumentId"		, ИдентификаторЭД.СоставнойИдентификатор);
	
	МетодСервера(, "ОбработкаСобытияПодключаемогоМодуля", "ПослеЗаполненияНовогоДокументаПоступления", ПараметрыПМ);
	
КонецПроцедуры

// Загружает список правил обработки документов о передаче в реквизит формы
//
&НаСервере
Процедура ЗагрузитьПравилаОбработкиДОП()
	
	ВидыДокументов = МенеджерИнтеграции_ВидыЭлектронныхДокументов();
	
	ВидыПервичныхДокументов = Новый Массив;
	ВидыПервичныхДокументов.Добавить(ВидыДокументов.ТоварнаяНакладная);
	ВидыПервичныхДокументов.Добавить(ВидыДокументов.АктОбОказанииУслуг);
	
	ЭтоИсправление = Ложь;
	
	ПравилаОбработкиДОП = МенеджерИнтеграции_ПравилаОбработкиВидаДокументов(ВидыПервичныхДокументов, ЭтоИсправление);
	
КонецПроцедуры

// Загружает список правил обработки электронных счетов-фактур в реквизит формы
//
&НаСервере
Процедура ЗагрузитьПравилаОбработкиСЧФ()
	
	ВидыДокументов = МенеджерИнтеграции_ВидыЭлектронныхДокументов();
	
	ВидыСчетовФактур = Новый Массив;
	ВидыСчетовФактур.Добавить(ВидыДокументов.СчетФактура);
	
	ЭтоИсправление = Ложь;
	
	ПравилаОбработкиСЧФ = МенеджерИнтеграции_ПравилаОбработкиВидаДокументов(ВидыСчетовФактур, ЭтоИсправление);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСохранения_ИдетОбработка()
	Возврат "Сохранение...";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСохранения_Завершено()
	Возврат "Успешно сохранен";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСопоставления_ГотовКСопоставлению()
	Возврат "Готов к сопоставлению";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСопоставления_НеНайденУчетныйДокумент()
	Возврат "Документ в 1С не найден";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСопоставления_СопоставленРанее()
	Возврат "Сопоставлен ранее";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСопоставления_Завершено()
	Возврат "Обработано";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыПодписания_ГотовКПодписанию()
	Возврат "Готов к подписи";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыПодписания_ПодписанРанее()
	Возврат "Подписан ранее";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыПодписания_НеТребуется()
	Возврат "Не требует подписи";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыПодписания_Завершено()
	Возврат "Подписан";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСоздания_НеПроведен()
	Возврат "Проведите документ";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыОбработки_Ошибка()
	Возврат "Ошибка";
КонецФункции

&НаКлиенте
Функция МодульКлиент_ФормироватьОтветныйТитул(ВидДокументооборота)
	
	Результат = МетодКлиента("Модуль_Клиент", "ФормироватьОтветныйТитул", ВидДокументооборота);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция МодульКлиент_ПараметрыФормыПодписанияДокумента()
	
	Результат = МетодКлиента("Модуль_Клиент", "ПараметрыФормыПодписанияДокумента");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючПараметровПодписания(ПараметрыПодписания)
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(ПараметрыПодписания.ИдентификаторОрганизации);
	Подстроки.Добавить(ПараметрыПодписания.ФорматДокумента.БазовыйФормат);
	Подстроки.Добавить(ПараметрыПодписания.ТребуетсяОтветныйТитул);
	
	Разделитель = "#";
	
	Результат = СтрСоединить(Подстроки, Разделитель);
	
	Возврат Результат;
	
КонецФункции

Функция ИменаТаблицФормы()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТаблицаДокументов"			, "ТаблицаДокументов");
	Результат.Вставить("ТаблицаПодписать"			, "ТаблицаПодписать");
	Результат.Вставить("ТаблицаСоздатьДокументыПоступления", "ТаблицаСоздатьДокументыПоступления");
	Результат.Вставить("ТаблицаСоздатьСчетФактуры"	, "ТаблицаСоздатьСчетФактуры");
	Результат.Вставить("ТаблицаОбработкаЗавершена"	, "ТаблицаОбработкаЗавершена");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ ФОРМА

#ОБЛАСТЬ ОбработчикиСобытийФормы

	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		ИдентификаторДокументаВДиадок =	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"));
		
		Режим				= Параметры.Режим;
		ТекущийСценарий		= Параметры.ТекущийСценарий;

		СоздаватьПоступлениеПоДаннымСФ 			= ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СоздаватьПоДаннымСФ");
		СуммаВключаетНДС 						= ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СуммаВключаетНДС");
		ЗначениеСоздаватьПоДаннымСФ_ДоИзменения = СоздаватьПоступлениеПоДаннымСФ;
		
		ЗагрузитьПравилаОбработкиДОП();
		ЗагрузитьПравилаОбработкиСЧФ();
		
		УстановитьОформлениеСтатусаМЧД();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ЗаполнитьТаблицы();
		ЗаполнитьКэшЗаголовковСтраниц();
		
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, ПараметрыОповещения, Источник) Экспорт
		
		Если ИмяСобытия = "ИзменениеСтатусаДокументаДиадок"
			И Тип(Источник) = Тип("УправляемаяФорма") 
			И (Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаДокумента" 
				ИЛИ Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаГрупповаяОбработка")
			И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
			И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
			
			Попытка
				Док = ПолучитьДокументДиадок(ПараметрыОповещения.BoxID, ПараметрыОповещения.DocumentID);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Док = Неопределено;
			КонецПопытки;
					
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("BoxID", 		ПараметрыОповещения.BoxID);
			ОтборСтрок.Вставить("DocumentID", 	ПараметрыОповещения.DocumentID);

			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаПодписать, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаСоздатьДокументыПоступления, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаСоздатьСчетФактуры, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаОбработкаЗавершена, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаДокументов, ОтборСтрок, Док, ТекстОшибки);

		ИначеЕсли ИмяСобытия = "ИзменениеСвязиДД1С"
			И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
			И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
			
			Если ПараметрыОповещения.ТипСущности = "Документ"
				И ПараметрыОповещения.Свойство("Документ1С") Тогда
				
				ОтборСтрок=	Новый Структура;
				ОтборСтрок.Вставить("BoxID", 		ПараметрыОповещения.BoxID);
				ОтборСтрок.Вставить("DocumentID", 	ПараметрыОповещения.DocumentID);

				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаПодписать, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаСоздатьДокументыПоступления, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаСоздатьСчетФактуры, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаОбработкаЗавершена, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаДокументов, ОтборСтрок, ПараметрыОповещения.Документ1С, Истина);

			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "УдалениеДокументов" Тогда
			
			Для каждого ПараметрыДокумента Из ПараметрыОповещения Цикл
				
				ОтборСтрок =	Новый Структура;
				ОтборСтрок.Вставить("BoxID", 		ПараметрыДокумента.BoxID);
				ОтборСтрок.Вставить("DocumentID", 	ПараметрыДокумента.DocumentID);

				ОбработатьСобытиеУдалениеДокументов(ТаблицаПодписать, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаСоздатьДокументыПоступления, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаСоздатьСчетФактуры, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаОбработкаЗавершена, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаДокументов, ОтборСтрок);

			КонецЦикла;

		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
		ПриЗакрытииНаСервере();
		
	КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СоздаватьПоДаннымСФ", СоздаватьПоступлениеПоДаннымСФ);
	ХранилищеОбщихНастроек.Сохранить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СуммаВключаетНДС", СуммаВключаетНДС);
	
КонецПроцедуры

#ОБЛАСТЬ ОПИСАНИЕ_ОПОВЕЩЕНИЯ

	&НаКлиенте
	Процедура ЗавершениеЗаполненияШаблонаОтветногоТитула(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			КлючШаблона			   = ДополнительныеПараметры.КлючШаблона;
			ШаблоныОтветныхТитулов = ДополнительныеПараметры.ШаблоныОтветныхТитулов;
			
			Шаблон = ШаблоныОтветныхТитулов[КлючШаблона];
			Шаблон.ОтветныйТитул = РезультатЗакрытия.ОтветныйТитул;
			
			Если РезультатЗакрытия.Свойство("КонтрактМЧД") Тогда
				Шаблон.КонтрактМЧД = РезультатЗакрытия.КонтрактМЧД;
			КонецЕсли;
			
			ЗаполнитьШаблоныОтветныхТитуловИПодписатьДокументы(ШаблоныОтветныхТитулов);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеДокументаДляПроведения(РезультатЗакрытия, ПараметрыОбработчика) Экспорт
		
		ТекущиеДанные 	= ПараметрыОбработчика.ТекущиеДанные;
		ИмяТаблицы 		= ПараметрыОбработчика.ИмяТаблицы;
		
		Если ДокументПроведен(ТекущиеДанные.ПервичныйДокумент) Тогда
			
			Если ИмяТаблицы = ИменаТаблицФормы().ТаблицаСоздатьДокументыПоступления Тогда
			
				ОбработатьПроведениеДокументаПоступления(ТекущиеДанные);
				ОбновитьФормуПослеПроведенияДокументовПоступления();
				
			ИначеЕсли ИмяТаблицы = ИменаТаблицФормы().ТаблицаСоздатьСчетФактуры Тогда
				
				ОбработатьПроведениеДокументаСФ(ТекущиеДанные);
				ОбновитьФормуПослеПроведенияДокументовСФ();
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Передано не верное имя таблицы'");
				СообщитьПользователю(ТекстСообщения);
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ УПРАВЛЕНИЕ_ФОРМОЙ
	
	&НаКлиенте
	Процедура УправлениеФормой()
										
		УстановитьЗаголовокФормы();
						
		УстановитьВидимостьЗакладок();
		
		НастроитьФормуПоТекущемуСценарию();
		
		ЭтаФорма.Элементы.КонтрольнаяСуммаДокументовДД.Заголовок = "документы " + Словарь_НаименованиеСистемы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьЗаголовокФормы()
		
		Сценарии = СценарииГрупповойОбработки();
		
		Если ТекущийСценарий = Сценарии.ПодписатьИСоздать Тогда
			
			Дополнение = ". Подписать и создать";
			
		ИначеЕсли ТекущийСценарий = Сценарии.СохранитьНаДиск Тогда
			
			Дополнение = ". Сохранить на диск";
			
		Иначе
			
			Дополнение = ". " + ТекущийСценарий;
			
		КонецЕсли;
		
		Заголовок = "Групповая обработка документов" + Дополнение;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура УстановитьВидимостьЗакладок()
		
		Сценарии = СценарииГрупповойОбработки();
		
		Если	ТекущийСценарий = Сценарии.Сопоставить
			ИЛИ ТекущийСценарий = Сценарии.СохранитьНаДиск Тогда
						
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница    = Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСопоставитьСохранить;
			
		Иначе
			
			ЭтоПодпись  = ТекущийСценарий = Сценарии.Подписать ИЛИ ТекущийСценарий = Сценарии.ПодписатьИСоздать;
			ЭтоСоздание = ТекущийСценарий = Сценарии.Создать ИЛИ ТекущийСценарий = Сценарии.ПодписатьИСоздать;
			
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаПодписать.Видимость 					 = ЭтоПодпись;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьДокументыПоступления.Видимость = ЭтоСоздание;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьСчетФактуры.Видимость 		 = ЭтоСоздание;
			
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаОбработкаЗавершена.Видимость = Истина;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСопоставитьСохранить.Видимость 	= Ложь;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуПоТекущемуСценарию()
		
		Сценарии = СценарииГрупповойОбработки();
		
		Если ТекущийСценарий = Сценарии.Подписать Тогда
			
			НастроитьФормуПодписать();
			НастроитьФормуОбработкаЗавершена();
			
		ИначеЕсли ТекущийСценарий = Сценарии.Сопоставить Тогда 
			
			НастроитьФормуСопоставить();
			
		ИначеЕсли ТекущийСценарий = Сценарии.СохранитьНаДиск Тогда
			
			НастроитьФормуСохранитьНаДиск();
			
		ИначеЕсли ТекущийСценарий = Сценарии.Создать Тогда 
			
			НастроитьФормуСоздать();
			НастроитьФормуОбработкаЗавершена();
			
		ИначеЕсли ТекущийСценарий = Сценарии.ПодписатьИСоздать Тогда
			
			НастроитьФормуПодписать();
			НастроитьФормуСоздать();
			НастроитьФормуОбработкаЗавершена();
							
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не известный сценарий'");
			МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуСохранитьНаДиск()
		
		Режим = РежимыГрупповойОбработки().Сохранить;

		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаДокументов", Ложь);
		ОбработатьПометки(ТаблицаДокументов, "ТаблицаДокументов");

		Элементы.ТаблицаДокументовОбработать.Заголовок = "Скачать выделенные";
		
		ТаблицаДокументов_Подчиненные = Элементы.ТаблицаДокументов.ПодчиненныеЭлементы;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость	= Ложь;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность	= Ложь;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Видимость	= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Доступность	= Истина;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Видимость		= Ложь;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Доступность 	= Ложь;
					
		Элементы.ГруппаКС.Видимость		= Ложь;
		Элементы.ГруппаКС.Доступность	= Ложь;
		
		Для Каждого Стр Из ТаблицаДокументов Цикл
			Стр.СостояниеОбработки 		= "";			
			Стр.КомментарийКДействию 	= "";
		КонецЦикла;
		
		ЗапретитьРедактированиеПанелейПриИнтерактивнойНастройкеФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуСопоставить()
										   
		Режим = РежимыГрупповойОбработки().АнализДокументов;

		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаДокументов", Ложь);
		ОбработатьПометки(ТаблицаДокументов, "ТаблицаДокументов");

		Элементы.ТаблицаДокументовОбработать.Заголовок 		= "Анализ документов";
		Элементы.ТаблицаДокументовОбработать.Отображение	= ОтображениеКнопки.Текст;
		
		ТаблицаДокументов_Подчиненные = Элементы.ТаблицаДокументов.ПодчиненныеЭлементы;
				
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСтатусСогласования.Видимость		= Ложь;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСтатусСогласования.Доступность	= Ложь;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость	= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность	= Истина;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Видимость	= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Доступность	= Истина;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Видимость		= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Доступность 	= Истина;
				
		Элементы.ГруппаКС.Видимость		= Истина;
		Элементы.ГруппаКС.Доступность	= Истина;
		
		Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
			СтрокаТаблицы.СостояниеОбработки = "";
		КонецЦикла;
		
		ЗапретитьРедактированиеПанелейПриИнтерактивнойНастройкеФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуПодписать()
		
		Режим = РежимыГрупповойОбработки().АнализДокументов;
		
		УстановитьЗаголовокСтраницы("СтраницаПодписать", ТаблицаПодписать);
		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаПодписать", Ложь);
		ОбработатьПометки(ТаблицаПодписать, "ТаблицаПодписать");

	КонецПроцедуры

	&НаКлиенте
	Процедура НастроитьФормуСоздать()
		
		Режим = РежимыГрупповойОбработки().АнализДокументов;
		
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления",  ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", 			ТаблицаСоздатьСчетФактуры);
		
		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаСоздатьДокументыПоступления", Ложь);
		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаСоздатьСчетФактуры", 			Ложь);
		
		ОбработатьПометки(ТаблицаСоздатьДокументыПоступления, 	"ТаблицаСоздатьДокументыПоступления");	
		ОбработатьПометки(ТаблицаСоздатьСчетФактуры, 			"ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуОбработкаЗавершена()
		
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьКэшЗаголовковСтраниц()
		
		КэшЗаголовковСтраниц = Новый Соответствие;
		СтраницыПанели = Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы;
		Для Каждого Страница из СтраницыПанели Цикл
			НайденноеЗначение = КэшЗаголовковСтраниц.Получить(Страница.Имя);
			Если НайденноеЗначение = Неопределено Тогда
				КэшЗаголовковСтраниц.Вставить(Страница.Имя, Страница.Заголовок);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьЗаголовокСтраницыИзКэш(ИмяСтраницы)
		
		НайденноеЗначение = КэшЗаголовковСтраниц.Получить(ИмяСтраницы);
		
		Если НайденноеЗначение = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат НайденноеЗначение;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВыполнитьПереключениеВкладок()
		
		СтраницаПодписать 					= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаПодписать;
		СтраницаСоздатьДокументыПоступления	= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьДокументыПоступления;
		СтраницаСоздатьСчетФактуры 			= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьСчетФактуры; 
		СтраницаОбработкаЗавершена 			= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаОбработкаЗавершена;
		
		АктивнаяСтраница 					= Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница;
		
		Сценарии = СценарииГрупповойОбработки();
		
		Если ТекущийСценарий = Сценарии.Подписать Тогда
			
			Если ТаблицаПодписать.Количество() = 0 Тогда
				Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;					
			КонецЕсли;
			
		ИначеЕсли ТекущийСценарий = Сценарии.Создать Тогда
			
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаСоздатьДокументыПоступления;
			КонецЕсли;
			
			Если АктивнаяСтраница = СтраницаСоздатьДокументыПоступления Тогда
				
				Если ТаблицаСоздатьДокументыПоступления.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьСчетФактуры;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьСчетФактуры Тогда						
				
				Если ТаблицаСоздатьСчетФактуры.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;	
				
			КонецЕсли;
			
		ИначеЕсли ТекущийСценарий = Сценарии.ПодписатьИСоздать Тогда
			
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаПодписать;
			КонецЕсли;				
			
			Если АктивнаяСтраница = СтраницаПодписать Тогда
				
				Если ТаблицаПодписать.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьДокументыПоступления;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьДокументыПоступления Тогда
				
				Если ТаблицаСоздатьДокументыПоступления.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьСчетФактуры;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьСчетФактуры Тогда
				
				Если ТаблицаСоздатьСчетФактуры.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;					
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	КонецПроцедуры
				
	&НаКлиенте
	Процедура ОткрытьДокумент1С(ИмяТаблицы, ЭтоСопоставление = Ложь)

		Перем ДокументСсылка;

		ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПервичныйДокумент) Тогда
			ДокументСсылка = ТекущиеДанные.ПервичныйДокумент; 	
		ИначеЕсли ЭтоСопоставление И ЗначениеЗаполнено(ТекущиеДанные.СопоставляемыйДокумент1С) Тогда
			ДокументСсылка = ТекущиеДанные.СопоставляемыйДокумент1С;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
		Иначе
			МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", НСтр( "ru = 'Не сопоставлен с документом из 1С'"));
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьУстановитьПометки(ОбрабатываемаяТаблица, Пометка)
		
		Сценарии = СценарииГрупповойОбработки();
		
		Для Каждого СтрокаСпискаДокументов Из ОбрабатываемаяТаблица Цикл

			Если Пометка Тогда
				
				Если ТекущийСценарий = Сценарии.СохранитьНаДиск Тогда
					 					
					СтрокаСпискаДокументов.Вкл = Пометка;
					
				ИначеЕсли ТекущийСценарий = Сценарии.Сопоставить Тогда
					
					Если Режим = РежимыГрупповойОбработки().АнализДокументов Тогда
						СтрокаСпискаДокументов.Вкл = ?(НЕ ЗначениеЗаполнено(СтрокаСпискаДокументов.ПервичныйДокумент), Истина, Ложь);	
					Иначе //Режим = "ОбработкаДокументов"
						СтрокаСпискаДокументов.Вкл = ?(ЗначениеЗаполнено(СтрокаСпискаДокументов.СопоставляемыйДокумент1С), Истина, Ложь);	
					КонецЕсли;
					
				ИначеЕсли ОбрабатываемаяТаблица = ТаблицаСоздатьДокументыПоступления ИЛИ ОбрабатываемаяТаблица = ТаблицаСоздатьСчетФактуры Тогда 
					
					СтрокаСпискаДокументов.Вкл = ?(НЕ ЗначениеЗаполнено(СтрокаСпискаДокументов.ПервичныйДокумент), Истина, Ложь);
					
				ИначеЕсли ОбрабатываемаяТаблица = ТаблицаПодписать Тогда
					
					СтрокаСпискаДокументов.Вкл = ?(НЕ СтрокаСпискаДокументов.Подписан, Истина, Ложь);
					
				КонецЕсли;
				
			Иначе
				
				СтрокаСпискаДокументов.Вкл = Пометка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьКартинкуИЗаголовокКнопкиПометки(ИмяОбрабатываемойТаблицы, Пометка)
		
		ИмяЭлементаПометки = ИмяОбрабатываемойТаблицы + "СнятьУстановитьПометки";

		Если Пометка Тогда
			Элементы[ИмяЭлементаПометки].Картинка 	= БиблиотекаКартинок.СнятьФлажки;
			Элементы[ИмяЭлементаПометки].Заголовок 	= "Снять пометку со всех документов";
		Иначе
			Элементы[ИмяЭлементаПометки].Картинка 	= БиблиотекаКартинок.УстановитьФлажки;
			Элементы[ИмяЭлементаПометки].Заголовок 	= "Пометить все документы";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьЗаголовокСтраницы(ИмяСтраницы, ОбрабатываемаяТаблица)
		
		Элементы[ИмяСтраницы].Заголовок = ПолучитьЗаголовокСтраницыИзКэш(ИмяСтраницы) + " (" + ОбрабатываемаяТаблица.Количество() + ")";
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьПометки(ОбрабатываемаяТаблица, ИмяОбрабатываемойТаблицы)
		
		ИмяЭлементаПометки = ИмяОбрабатываемойТаблицы + "СнятьУстановитьПометки";
		
		ТекущаяПометка = Элементы[ИмяЭлементаПометки].Картинка = БиблиотекаКартинок.УстановитьФлажки;
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(ИмяОбрабатываемойТаблицы, ТекущаяПометка);
		
		Пометка = Элементы[ИмяЭлементаПометки].Картинка = БиблиотекаКартинок.УстановитьФлажки;
		
		СнятьУстановитьПометки(ОбрабатываемаяТаблица, Пометка);
		
		Пометка			 = Неопределено;
		ТекущаяПометка	 = Неопределено;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ЗапретитьРедактированиеПанелейПриИнтерактивнойНастройкеФормы() 
		
		Элементы.СтраницаПодписать.Видимость 					= Ложь;
		Элементы.СтраницаСоздатьДокументыПоступления.Видимость 	= Ложь;
		Элементы.СтраницаСоздатьСчетФактуры.Видимость 			= Ложь;
		Элементы.СтраницаОбработкаЗавершена.Видимость 			= Ложь;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьОформлениеСтатусаМЧД()

		УровниКритичности = МетодСервера("", "УровниКритичностиСтатусаДокумента");
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЭлементОтбора.ЛевоеЗначение		 = Новый ПолеКомпоновкиДанных("ТаблицаПодписать.СтатусМЧДКритичность"); 
		ЭлементОтбора.ВидСравнения		 = ВидСравненияКомпоновкиДанных.Равно; 
		ЭлементОтбора.ПравоеЗначение	 = УровниКритичности.Error;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(220, 20, 60));
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаПодписатьСтатусМЧД");
		
	КонецПроцедуры

#КонецОбласти

//} ФОРМА
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	// TODO: отсортировать по предназначению

	&НаСервере
	Функция КэшФормы()
		
		Если КэшФормы = Неопределено Тогда
			
			КэшФормы = Новый Структура();
			КэшФормы.Вставить("ОрганизацииДД_1С", Новый Соответствие);
			КэшФормы.Вставить("КонтрагентыДД_1С", Новый Соответствие);
			КэшФормы.Вставить("ДоговорыДД_1С", Новый Соответствие);
			КэшФормы.Вставить("НоменклатураДД_1С", Новый Соответствие);
			КэшФормы.Вставить("ЕИ_ДД_1С", Новый Соответствие);
			КэшФормы.Вставить("СтавкиНДС_ДД_1С", Новый Соответствие);
			КэшФормы.Вставить("СтраныДД_1С", Новый Соответствие);
			КэшФормы.Вставить("НомераГТД_ДД_1С", Новый Соответствие);
			КэшФормы.Вставить("Номенклатура1С_ЯвляетсяУслугой", Новый Соответствие);
			КэшФормы.Вставить("ДопДанныеДляСозданияНакладной", Новый Соответствие);
			КэшФормы.Вставить("ДанныеДоговора", Новый Соответствие);
			КэшФормы.Вставить("ТипыЦенПоДоговорам", Новый Соответствие);
			КэшФормы.Вставить("ДанныеНоменклатурыБГУ", Новый Соответствие);
			КэшФормы.Вставить("СчетаУчетаРасчетов", Новый Соответствие);
			КэшФормы.Вставить("СчетаУчетаНоменклатуры", Новый Соответствие);
			
		КонецЕсли;
		
		Возврат КэшФормы;
		
	КонецФункции

	&НаСервереБезКонтекста
	Функция ПолучитьРеквизитСсылки(СсылкаНаОбъект, ИмяРеквизита)
		
		ЗначениеРеквизита = Неопределено;
		МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
		
		Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
		КонецЕсли;
		
		Возврат ЗначениеРеквизита;
		
	КонецФункции

	&НаСервере
	Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК)
		
		Запрос=	Новый Запрос;
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ВсегоПоДокументу") <> Неопределено Тогда
				
				Запрос.Текст=	
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка,
				|	ЕСТЬNULL(ВсегоПоДокументу.СуммаСНДС, 0) КАК СуммаДокумента,
				|	ВЫБОР
				|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
				|				ИЛИ УжеСопоставленные.Значение = """"
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДополнительныеСведения.Объект КАК Объект,
				|			ДополнительныеСведения.Свойство КАК Свойство,
				|			ДополнительныеСведения.Значение КАК Значение
				|		ИЗ
				|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|		ГДЕ
				|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
				|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			СУММА(СчетФактураПолученныйВсегоПоДокументу.СуммаСНДС) КАК СуммаСНДС,
				|			СчетФактураПолученныйВсегоПоДокументу.Ссылка КАК Ссылка
				|		ИЗ
				|			Документ.СчетФактураПолученный.ВсегоПоДокументу КАК СчетФактураПолученныйВсегоПоДокументу
				|		
				|		СГРУППИРОВАТЬ ПО
				|			СчетФактураПолученныйВсегоПоДокументу.Ссылка) КАК ВсегоПоДокументу
				|		ПО СчетФактура.Ссылка = ВсегоПоДокументу.Ссылка
				|ГДЕ
				|	СчетФактура.ДокументОснование В(&МассивСсылокРНК)";
				
			Иначе
				
				Запрос.Текст=	
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Ссылка,
				|	0 КАК СуммаДокумента,
				|	ВЫБОР
				|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
				|		ПО Т.Ссылка = ДС.Объект
				|			И (ДС.Свойство = &Свойство)
				|			И (ДС.Значение <> """")
				|ГДЕ
				|	Т.ДокументОснование В(&МассивСсылокРНК)";
				
			КонецЕсли;
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			ОснованиеВШапке = МетодСервера(, "ЕстьМетаданныеКонфигурации_ДД", "Метаданные.Документы.СчетФактураПолученный.Реквизиты.ДокументОснование");
			
			Если ОснованиеВШапке Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Ссылка,
				|	0 КАК СуммаДокумента,
				|	ВЫБОР
				|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
				|		ПО Т.Ссылка = ДС.Объект
				|			И (ДС.Свойство = &Свойство)
				|			И (ДС.Значение <> """")
				|ГДЕ
				|	Т.ДокументОснование В(&МассивСсылокРНК)";
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Ссылка КАК Ссылка,
				|	0 КАК СуммаДокумента,
				|	ВЫБОР
				|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
				|		ПО Т.Ссылка = ДС.Объект
				|			И (ДС.Свойство = &Свойство)
				|			И (ДС.Значение <> """")
				|ГДЕ
				|	Т.ДокументОснование В(&МассивСсылокРНК)";
				
			КонецЕсли;
			
		Иначе
			
			Запрос.Текст=	
			"ВЫБРАТЬ
			|	СчетФактура.Ссылка,
			|	ЕСТЬNULL(СчетФактура.Ссылка.СуммаДокумента, 0) КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
			|				ИЛИ УжеСопоставленные.Значение = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ДополнительныеСведения.Объект КАК Объект,
			|			ДополнительныеСведения.Свойство КАК Свойство,
			|			ДополнительныеСведения.Значение КАК Значение
			|		ИЗ
			|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ГДЕ
			|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
			|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
			|ГДЕ
			|	СчетФактура.ДокументОснование В (&МассивСсылокРНК)";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
		Запрос.УстановитьПараметр("Свойство", ИдентификаторДокументаВДиадок);
		
		РезультатЗапроса=	Запрос.Выполнить();
		Выборка=			РезультатЗапроса.Выбрать();
		
		Возврат Выборка;
		
	КонецФункции

	&НаСервере
	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(СписокСсылок, BoxID)
		
		Результат=	Новый Массив;
		
		Для Каждого InitialDocumentId Из СписокСсылок Цикл
			СсылкаРНК=	МетодСервера(,"DocumentID_2_Документ", InitialDocumentId.Значение, BoxID);
			Если СсылкаРНК <> Неопределено И ТипЗнч(СсылкаРНК) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				Результат.Добавить(СсылкаРНК);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Процедура ЗаполнитьТаблицы(ОбрабатываемаяТаблица = Неопределено)
		
		ТекстСостояния = НСтр("ru = 'Заполнение списка документов'");
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", ТекстСостояния);
		
		ТаблицаДокументовВходящих = ВладелецФормы.ТаблицаДокументовВходящих;
		
		Если ОбрабатываемаяТаблица = Неопределено Тогда
			ТаблицаПодписать.Очистить();
			ТаблицаСоздатьДокументыПоступления.Очистить();
			ТаблицаСоздатьСчетФактуры.Очистить();
			ТаблицаОбработкаЗавершена.Очистить();
			ТаблицаДокументов.Очистить();
		Иначе
			ОбрабатываемаяТаблица.Очистить();
		КонецЕсли;
		
		МетодСервераБезКонтекста(, "ЗаполнитьТаблицуДокументовДиадокДокументами1С", ТаблицаДокументовВходящих);
		
		ВсегоСтрок = ТаблицаДокументовВходящих.Количество();
		
		Сценарии = СценарииГрупповойОбработки();
		
		Для Сч = 1 По ВсегоСтрок Цикл
			
			МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
			
			ОбработкаПрерыванияПользователя();
			
			СтрокаТЧ = ТаблицаДокументовВходящих[Сч - 1];
			
			ФорматЭД = СтрокаТЧ.ЭлектронныйДокумент.Формат;
			СтатусЭД = СтрокаТЧ.ЭлектронныйДокумент.Статус;
			
			ДокументПодписан = (	СтатусЭД.ОтветноеДействие = "WithRecipientSignature"
								Или СтатусЭД.ОтветноеДействие = "WithRecipientPartiallySignature");
			ОжидаетсяПодпись = (СтатусЭД.ОтветноеДействие = "WaitingForRecipientSignature");
			
			ПараметрыОбработкиЕдиногоДокументаДД	= ПолучитьПараметрыОбработкиЕдиногоДокументаДД(СтрокаТЧ);
			НужноПровестиПоступление 				= НужноПровестиПоступление(СтрокаТЧ, ПараметрыОбработкиЕдиногоДокументаДД);
			НужноСоздатьПоступление					= НужноСоздатьПоступление(СтрокаТЧ, ДокументПодписан, ПараметрыОбработкиЕдиногоДокументаДД);
			
			Если 	ТекущийСценарий = Сценарии.Сопоставить
				ИЛИ ТекущийСценарий = Сценарии.СохранитьНаДиск Тогда
				
				ЗаполнитьСтрокуТаблицыДокументов(СтрокаТЧ);
										
			ИначеЕсли (ТекущийСценарий = Сценарии.Подписать ИЛИ ТекущийСценарий = Сценарии.ПодписатьИСоздать)
				И (ОбрабатываемаяТаблица = Неопределено ИЛИ ОбрабатываемаяТаблица = ТаблицаПодписать)
				И ОжидаетсяПодпись Тогда
				
				ЗаполнитьСтрокуТаблицыПодписать(СтрокаТЧ, ПараметрыОбработкиЕдиногоДокументаДД);
				
			ИначеЕсли (ТекущийСценарий = Сценарии.Создать ИЛИ ТекущийСценарий = Сценарии.ПодписатьИСоздать)
				И (ОбрабатываемаяТаблица = Неопределено ИЛИ ОбрабатываемаяТаблица = ТаблицаСоздатьДокументыПоступления)
				И (НужноСоздатьПоступление ИЛИ НужноПровестиПоступление) Тогда
					  
				ЗаполнитьСтрокуТаблицыСоздатьДокументыПоступления(СтрокаТЧ, ПараметрыОбработкиЕдиногоДокументаДД, НужноПровестиПоступление);
								   
			ИначеЕсли (ТекущийСценарий = Сценарии.Создать ИЛИ ТекущийСценарий = Сценарии.ПодписатьИСоздать)
				И (ОбрабатываемаяТаблица = Неопределено ИЛИ ОбрабатываемаяТаблица = ТаблицаСоздатьСчетФактуры)
				И (ФорматЭД.ИмяТипа = "Invoice" ИЛИ ПараметрыОбработкиЕдиногоДокументаДД.СчетФактураВ_1С_НеСоздана)
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.ПервичныйДокумент) Тогда
				   
				ЗаполнитьСтрокуТаблицыСоздатьСчетФактуры(СтрокаТЧ, ПараметрыОбработкиЕдиногоДокументаДД);
				   
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТаблицаДокументов) Тогда 
			ДополнитьТаблицуДокументовНаСервере();
		КонецЕсли;
		
		Если ОбрабатываемаяТаблица = Неопределено Тогда
			
			ТаблицаПодписать.Сортировать("Покупатель Возр, ДатаУчета Возр");
			ТаблицаСоздатьДокументыПоступления.Сортировать("Покупатель Возр, ДатаУчета Возр");
			ТаблицаСоздатьСчетФактуры.Сортировать("Покупатель Возр, ДатаУчета Возр");
			ТаблицаДокументов.Сортировать("Покупатель Возр, ДатаУчета Возр");
			
		Иначе
			
			Если ОбрабатываемаяТаблица.Количество() = 0 Тогда
				
				ТекстСообщения = НСтр("ru='Нет документов для обработки'");
				МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения);
				
			Иначе
				ОбрабатываемаяТаблица.Сортировать("Покупатель Возр, ДатаУчета Возр");
			КонецЕсли;
			
		КонецЕсли;
						
	КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРезолюции(ТипРезолюции)
	
	Резолюции = Новый Соответствие;
	
	Резолюции.Вставить("ResolutionRequest"		, "Согласование запросил");
	Резолюции.Вставить("ResolutionApprove"		, "Согласовано");
	Резолюции.Вставить("ResolutionDisapprove"	, "В согласовании отказано");
	Резолюции.Вставить("SignatureRequest"		, "Запросил подпись");
	Резолюции.Вставить("SignatureApprove"		, "Подписано");
	Резолюции.Вставить("SignatureDisapprove"	, "Отказано в подписи");
	
	// Запрос резолюции сформирован шагом маршрута и имеет нестандартный тип
	Резолюции.Вставить("Custom", "Ожидается действие по маршруту");
	
	Результат = Резолюции.Получить(ТипРезолюции);
	
	Если Результат = Неопределено Тогда
		Результат = ТипРезолюции;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ФамилияИО(ФИО)
	
	Фамилия	 = МетодКлиента("Модуль_Клиент", "ВыделитьСлово", ФИО);
	Имя		 = МетодКлиента("Модуль_Клиент", "ВыделитьСлово", ФИО);
	Отчество = МетодКлиента("Модуль_Клиент", "ВыделитьСлово", ФИО);
	
	ИнициалИмени = "";
	Если СтрДлина(Имя) > 0 Тогда
		ИнициалИмени = Сред(Имя, 1, 1) + ". ";
	КонецЕсли;
	
	ИнициалОтчества = "";
	Если СтрДлина(Отчество) > 0 Тогда
		ИнициалОтчества = Сред(Отчество, 1, 1) + "."; 
	КонецЕсли;
	
	Результат = Фамилия + " " + ИнициалИмени + ИнициалОтчества;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтатусСогласованияДокумента(Resolution)
	
	ТекстСогласовано = ПредставлениеРезолюции(Resolution.ResolutionType);
	
	Если Не ЗначениеЗаполнено(ТекстСогласовано) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеАвтора = "";
	Если НЕ Resolution.Author = Неопределено И ЗначениеЗаполнено(Resolution.Author) Тогда
		
		АвторРезолюции 		= Resolution.Author;
		ПредставлениеАвтора = ФамилияИО(АвторРезолюции);
		
	КонецЕсли;
	
	Результат = СтрШаблон("%1 %2 (%3);"
		, ТекстСогласовано
		, ПредставлениеАвтора
		, Формат(Resolution.CreationDate, "ДФ=dd.MM.yy"));
	
	Возврат Результат;
	
КонецФункции

	&НаКлиенте
	Процедура ЗаполнитьСтрокуТаблицыДокументов(СтрокаТЧ)
		
		ФорматЭД = СтрокаТЧ.ФорматОтправки;
		
		ЭтоАгентскаяФункцияУПДУКД = МетодКлиента("Модуль_Клиент", "ЭтоАгентскаяФункцияУПДУКД", ФорматЭД.ФункцияДокумента);
		Если ЭтоАгентскаяФункцияУПДУКД  
			И ТекущийСценарий = СценарииГрупповойОбработки().Сопоставить Тогда
			// не входит в MVP по агентским функциям
			Возврат;
		КонецЕсли;
		
		ЭтоТорг12 	= ЭтоФормализованныйТОРГ12(ФорматЭД.ИмяТипа);
		ЭтоАкт		= ЭтоФормализованныйАктОВыполненииРабот(ФорматЭД.ИмяТипа);
		ЭтоСчетФактура = ЭтоСчетФактура(СтрокаТЧ.ФорматОтправки);
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Сумма = СтрокаТЧ.СуммаДокументаЗначение;
		НоваяСтрока.Номер = СокрЛП(НоваяСтрока.Номер);
		
		СтатусСогласования 	= "";
		ResolutionType 		= "";
		
		Если ФорматЭД.ИмяТипа <> "ProformaInvoice" 
			И НеобходимоПолучитьСтатусСогласования(СтрокаТЧ.СостояниеДокументооборота) Тогда
				
			Resolutions = ПолучитьДокументДиадок(СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId).Resolutions;
			Если Resolutions.Count > 0 Тогда
				
				Resolution	= Resolutions.GetItem(Resolutions.Count - 1);
				
				СтатусСогласования = СтатусСогласованияДокумента(Resolution);
				
				ResolutionType = Resolution.ResolutionType;
				
			КонецЕсли; 
				
		КонецЕсли;
		
		НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
		НоваяСтрока.ResolutionType		= ResolutionType;
		
		СтатусЭД = СтрокаТЧ.ЭлектронныйДокумент.Статус;
		
		Если ЭтоСчетФактура
			ИЛИ ЭтоТорг12
			ИЛИ ЭтоАкт Тогда
									
			МассивИдентификаторов = InitialDocumentIds(НоваяСтрока.BoxID, НоваяСтрока.DocumentID);
			НоваяСтрока.СписокСсылок.ЗагрузитьЗначения(МассивИдентификаторов);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтрокуТаблицыПодписать(СтрокаТЧ, ПараметрыОбработки)
		
		ФорматЭД = СтрокаТЧ.ЭлектронныйДокумент.Формат;
		ИдентификаторыЭД = СтрокаТЧ.ЭлектронныйДокумент.Идентификатор;
		
		Если ЭтоАктСверкиИзСервисаВзаиморасчеты(ФорматЭД.ИмяТипа, ИдентификаторыЭД.ПользовательскийИдентификатор) Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПодписать.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Сумма			= СтрокаТЧ.СуммаДокументаЗначение;
		НоваяСтрока.ЭтоУПД_СЧФДОП	= ПараметрыОбработки.ЭтоУПД_СЧФДОП;
		
		СтатусСогласования 	= "";
		ResolutionType 		= "";
			
		Если НеобходимоПолучитьСтатусСогласования(СтрокаТЧ.СостояниеДокументооборота) Тогда	
						
			Resolutions = ПолучитьДокументДиадок(СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId).Resolutions;
			Если Resolutions.Count > 0 Тогда
				
				Resolution	= Resolutions.GetItem(Resolutions.Count - 1);
				
				СтатусСогласования = СтатусСогласованияДокумента(Resolution);
				
				ResolutionType = Resolution.ResolutionType;
				
			КонецЕсли;
			
		КонецЕсли;
			
		НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
		НоваяСтрока.ResolutionType		= ResolutionType;
		
		НоваяСтрока.ПараметрыОбработкиЕдиногоДокументаДД = ПараметрыОбработки;
		
		ПроверитьНеобходимостьПодписи(НоваяСтрока);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтрокуТаблицыСоздатьДокументыПоступления(СтрокаТЧ, ПараметрыОбработки, НужноПровестиПоступление)
		
		НоваяСтрока = ТаблицаСоздатьДокументыПоступления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Сумма				= СтрокаТЧ.СуммаДокументаЗначение;
		НоваяСтрока.ЭтоЕдиныйДокументСФ = ПараметрыОбработки.ЭтоЕдиныйДокументСФ;
		НоваяСтрока.ЭтоУПД_СЧФДОП		= ПараметрыОбработки.ЭтоУПД_СЧФДОП;
		
		СтатусСогласования 	= "";
		ResolutionType 		= "";
		
		Если НеобходимоПолучитьСтатусСогласования(СтрокаТЧ.СостояниеДокументооборота) Тогда
				
			Resolutions = ПолучитьДокументДиадок(СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId).Resolutions;
			Если Resolutions.Count > 0 Тогда
				
				Resolution	= Resolutions.GetItem(Resolutions.Count - 1);
				
				СтатусСогласования = СтатусСогласованияДокумента(Resolution);
				
				ResolutionType = Resolution.ResolutionType;
				
			КонецЕсли;
						
		КонецЕсли;
		
		НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
		НоваяСтрока.ResolutionType		= ResolutionType;
		
		Если НужноПровестиПоступление Тогда
			НоваяСтрока.СостояниеОбработки 		= СтатусыСоздания_НеПроведен();
			НоваяСтрока.КомментарийКДействию 	= СтатусыСоздания_НеПроведен();
			Если ПараметрыОбработки.ПоступлениеВ_1С_СозданоНеПроведено Тогда
				НоваяСтрока.ПервичныйДокумент 	= ПараметрыОбработки.ДокументОснованиеДляСФ;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтрокуТаблицыСоздатьСчетФактуры(СтрокаТЧ, ПараметрыОбработкиЕдиногоДокументаДД)
		
		НоваяСтрока = ТаблицаСоздатьСчетФактуры.Добавить();
						
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.Сумма = СтрокаТЧ.СуммаДокументаЗначение;
		
		СтатусСогласования 	= "";
		ResolutionType 		= "";
		
		Если НеобходимоПолучитьСтатусСогласования(СтрокаТЧ.СостояниеДокументооборота) Тогда
			
			Resolutions = ПолучитьДокументДиадок(СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId).Resolutions;
			Если Resolutions.Count > 0 Тогда
				
				Resolution	= Resolutions.GetItem(Resolutions.Count - 1);
				
				СтатусСогласования = СтатусСогласованияДокумента(Resolution);
				
				ResolutionType = Resolution.ResolutionType;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
		НоваяСтрока.ResolutionType		= ResolutionType;
		
		Если ПараметрыОбработкиЕдиногоДокументаДД.СчетФактураВ_1С_НеСоздана
			И ПараметрыОбработкиЕдиногоДокументаДД.ДокументОснованиеДляСФ <> Неопределено Тогда
			
			НоваяСтрока.СписокСсылок1С.Добавить(ПараметрыОбработкиЕдиногоДокументаДД.ДокументОснованиеДляСФ);
			
		Иначе
			
			МассивИдентификаторов = InitialDocumentIds(НоваяСтрока.BoxID, НоваяСтрока.DocumentID);
			НоваяСтрока.СписокСсылок.ЗагрузитьЗначения(МассивИдентификаторов);
																					
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьПараметрыОбработкиЕдиногоДокументаДД(ВходящийДокумент)
		
		ФорматЭД = ВходящийДокумент.ФорматОтправки;
		ИмяТипаЭД = ФорматЭД.ИмяТипа;
		ФункцияДокумента = ФорматЭД.ФункцияДокумента;
		ЭтоУПД_СЧФДОП 	= (ФункцияДокумента = "СЧФДОП");
		ЭтоУПД_ДОП 		= (ФункцияДокумента = "ДОП");
		ЭтоУПД_СЧФ 		= (ФункцияДокумента = "СЧФ");
		
		ЭтоЕдиныйДокументСФ = СоздаватьПоступлениеПоДаннымСФ 
								И ((ИмяТипаЭД = "Invoice" ИЛИ ЭтоУПД_СЧФ)
								И НЕ ВходящийДокумент.ЕстьInitialDocuments); // только для СФ и УПД счф без родительских документов (ТОРГ-12, УПД доп)
		
		ДокументОснованиеДляСФ 				= Неопределено;
		ПоступлениеВ_1С_НеСоздано			= Ложь; 
		ПоступлениеВ_1С_СозданоНеПроведено	= Ложь;
		СчетФактураВ_1С_НеСоздана 			= Ложь;
		
		Сценарии = СценарииГрупповойОбработки();
		
		Если (ТекущийСценарий = Сценарии.Создать ИЛИ ТекущийСценарий = Сценарии.ПодписатьИСоздать) 
			И (ЭтоУПД(ИмяТипаЭД) ИЛИ ЭтоЕдиныйДокументСФ) Тогда
		  
			СчетФактура	 = Неопределено;
		  
			МассивДокументов = МетодСервера(, "DocumentID_2_МассивДокументов", ВходящийДокумент.DocumentID, ВходящийДокумент.BoxID);
			Для Каждого Документ ИЗ МассивДокументов Цикл
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Документ;
				Иначе
					ДокументОснованиеДляСФ = Документ;
				КонецЕсли;
			КонецЦикла;
			
			Если (ЭтоУПД_ДОП ИЛИ ЭтоУПД_СЧФДОП ИЛИ ЭтоЕдиныйДокументСФ) 
				И ДокументОснованиеДляСФ = Неопределено Тогда
				
				ПоступлениеВ_1С_НеСоздано = Истина;
				
			ИначеЕсли ((ЭтоУПД_СЧФДОП ИЛИ ЭтоЕдиныйДокументСФ) 
				И ДокументОснованиеДляСФ <> Неопределено 
				И НЕ ДокументПроведен(ДокументОснованиеДляСФ)) Тогда
				
				ПоступлениеВ_1С_СозданоНеПроведено = Истина;
				
			ИначеЕсли (((ЭтоУПД_СЧФДОП ИЛИ ЭтоЕдиныйДокументСФ) 
				И ДокументОснованиеДляСФ <> Неопределено) ИЛИ ЭтоУПД_СЧФ) 
				И СчетФактура = Неопределено Тогда
				
				СчетФактураВ_1С_НеСоздана = Истина;
				
			КонецЕсли;
		  
		КонецЕсли;
		
		Результат = Новый Структура;
		
		Результат.Вставить("ЭтоУПД_СЧФДОП"						, ЭтоУПД_СЧФДОП);
		Результат.Вставить("ЭтоЕдиныйДокументСФ"				, ЭтоЕдиныйДокументСФ);
		Результат.Вставить("ДокументОснованиеДляСФ"				, ДокументОснованиеДляСФ);
		Результат.Вставить("СчетФактураВ_1С_НеСоздана"			, СчетФактураВ_1С_НеСоздана);
		Результат.Вставить("ПоступлениеВ_1С_НеСоздано"			, ПоступлениеВ_1С_НеСоздано);
		Результат.Вставить("ПоступлениеВ_1С_СозданоНеПроведено"	, ПоступлениеВ_1С_СозданоНеПроведено);
														
		Возврат Результат;

	КонецФункции
	
	&НаКлиенте
	Функция НеобходимоПолучитьСтатусСогласования(СостояниеДокументооборота)
		
		Результат = 	СостояниеДокументооборота = "Ошибка подписи"	 
					ИЛИ СостояниеДокументооборота = "Требуется подпись";
					
		Возврат Результат;
		
	КонецФункции
						 
	&НаКлиенте
	Функция НужноСоздатьПоступление(ВходящийДокумент, ДокументПодписан, ПараметрыОбработкиЕдиногоДокументаДД)
		
		ФорматЭД = ВходящийДокумент.ФорматОтправки;
		ИмяТипаЭД = ФорматЭД.ИмяТипа;
		НужноСоздатьПоступлениеПоАктИлиТОРГ = ДокументПодписан 
												И (ЭтоФормализованныйТОРГ12(ИмяТипаЭД) 
			    								ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ИмяТипаЭД));
		НужноСоздатьПоступлениеПоСФ			= ПараметрыОбработкиЕдиногоДокументаДД.ЭтоЕдиныйДокументСФ И ПараметрыОбработкиЕдиногоДокументаДД.ПоступлениеВ_1С_НеСоздано;
		НужноСоздатьПоступлениеПоУПД 		= ДокументПодписан И ЭтоУПД(ИмяТипаЭД) И ПараметрыОбработкиЕдиногоДокументаДД.ПоступлениеВ_1С_НеСоздано;
		
		Возврат НЕ ЗначениеЗаполнено(ВходящийДокумент.ПервичныйДокумент) 
				И ВходящийДокумент.RevocationStatus <> "RevocationAccepted" 
			    И ВходящийДокумент.Status <> "InboundRecipientSignatureRequestRejected"
				И (НужноСоздатьПоступлениеПоАктИлиТОРГ ИЛИ НужноСоздатьПоступлениеПоСФ ИЛИ НужноСоздатьПоступлениеПоУПД);

	КонецФункции
			
	&НаКлиенте
	Функция НужноПровестиПоступление(ВходящийДокумент, ПараметрыОбработкиЕдиногоДокументаДД)	
		
		ФорматЭД = ВходящийДокумент.ФорматОтправки;
		ИмяТипаЭД = ФорматЭД.ИмяТипа;
		
		Возврат (ЗначениеЗаполнено(ВходящийДокумент.ПервичныйДокумент) 
				И (ЭтоФормализованныйТОРГ12(ИмяТипаЭД) 
				ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ИмяТипаЭД)) 
				И НЕ ДокументПроведен(ВходящийДокумент.ПервичныйДокумент))
				ИЛИ ПараметрыОбработкиЕдиногоДокументаДД.ПоступлениеВ_1С_СозданоНеПроведено;
		
	КонецФункции

	&НаСервере
	Процедура ДополнитьТаблицуДокументовНаСервере()
		
		Для Каждого Стр Из ТаблицаДокументов Цикл 
			
			Стр.Организация = ПолучитьОрганизацию1С_ПоДаннымДД(Стр.BoxID, Стр.DepartmentKpp);
			Стр.Контрагент 	= ПолучитьКонтрагента1С_ПоДаннымДД(Стр.CounteragentID);
			Стр.base64DocId = МетодСервера(,"КонвертироватьГуидВЧисло64", Стр.DocumentId);
			
		КонецЦикла;
		
	КонецПроцедуры
			
	&НаКлиентеНаСервереБезКонтекста
	Функция ПомеченныеСтрокиТаблицы(Таблица)
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Вкл", Истина);
		
		Результат = Таблица.НайтиСтроки(СтруктураОтбора);
		
		Возврат Результат;
		
	КонецФункции

&НаКлиенте
Процедура ПроверитьНеобходимостьПодписи(СтрокаТаблицы)
	
	СтатусЭД = СтрокаТаблицы.ЭлектронныйДокумент.Статус;
	
	Если СтатусЭД.ОтветноеДействие = "WaitingForRecipientSignature" Тогда
		СтрокаТаблицы.Вкл = Истина;
		СтрокаТаблицы.СостояниеОбработки 	= СтатусыПодписания_ГотовКПодписанию();
		СтрокаТаблицы.КомментарийКДействию 	= "Документ готов к подписи. Нажмите кнопку ""Подписать выделенные""";
	ИначеЕсли СтатусЭД.ОтветноеДействие = "WithRecipientSignature" Тогда
		СтрокаТаблицы.Вкл = Ложь;
		СтрокаТаблицы.СостояниеОбработки 	= СтатусыПодписания_ПодписанРанее();
		СтрокаТаблицы.КомментарийкДействию 	= "Документ уже был подписан ранее";
	Иначе
		СтрокаТаблицы.Вкл = Ложь;
		СтрокаТаблицы.СостояниеОбработки 	= СтатусыПодписания_НеТребуется();
		СтрокаТаблицы.КомментарийКДействию 	= "Документ не требует подписи";
	КонецЕсли;
	
КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьРасширениеФайлаДиадок(ИмяФайла)
		КолСим = СтрДлина(ИмяФайла);
		Для ИндЦикла = 1 По КолСим Цикл
			Инд = КолСим + 1 - ИндЦикла;
			Если Сред(ИмяФайла, Инд, 1) = "." Тогда
				Возврат ?(КолСим = Инд, 0, Сред(ИмяФайла, Инд + 1, КолСим - Инд));
			КонецЕсли;
		КонецЦикла;
	КонецФункции
	
	&НаКлиенте
	Процедура ПересчитатьКонтрольныеСуммы()
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаДокументов);
		
		БуферСумма1С = 0;
		БуферСуммаДД = 0;
		
		Для каждого Строка Из НайденныеСтроки Цикл
			БуферСуммаДД = БуферСуммаДД + Строка.Сумма;
			БуферСумма1С = БуферСумма1С + Строка.СуммаДокумента1С;
		КонецЦикла;
		
		КонтрольнаяСуммаДокументовДД = БуферСуммаДД;
		КонтрольнаяСуммаДокументов1С = БуферСумма1С;
		КонтрольнаяСуммаДокументовДельта = БуферСуммаДД - БуферСумма1С;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОтработатьИзменениеВкл(ИмяОбрабатываемойТаблицы)
		
		Таблица = ЭтаФорма[ИмяОбрабатываемойТаблицы];
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Вкл", Ложь);
		
		ВклНеВсе = ЗначениеЗаполнено(Таблица.НайтиСтроки(СтруктураОтбора));
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(ИмяОбрабатываемойТаблицы, ВклНеВсе);
			
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ОбрабатываемаяТаблица, ОтборСтрок, Док, ТекстОшибки)
			
		Если НЕ Док = Неопределено Тогда
			НовыйСтатус = МетодКлиента("Модуль_Клиент", "ПредставлениеСтатуса", Док);
		КонецЕсли;
			
		НайденныеСтроки = ОбрабатываемаяТаблица.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаДокумента = НайденныеСтроки[0];
			
			Если НовыйСтатус <> Неопределено Тогда
				СтрокаДокумента.СостояниеДокументооборота 	= НовыйСтатус;
				СтрокаДокумента.Status						= Док.Status;
			Иначе
				СтрокаДокумента.СостояниеОбработки = СтатусыОбработки_Ошибка();
				СтрокаДокумента.КомментарийКДействию = "Не удалось изменить статус документа по причине:" + ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;

	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеИзменениеСвязиДД1С(ОбрабатываемаяТаблица, ОтборСтрок, Документ1С, ОбновитьСопоставляемыйДокумент1С = Ложь)
		
		НайденныеСтроки = ОбрабатываемаяТаблица.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаДокумента = НайденныеСтроки[0];
			СтрокаДокумента.ПервичныйДокумент =	Документ1С;
			Если ОбновитьСопоставляемыйДокумент1С Тогда
				СтрокаДокумента.СопоставляемыйДокумент1С =	Документ1С;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Документ1С)
				И Режим = РежимыГрупповойОбработки().Сопоставление Тогда
				СтрокаДокумента.СуммаДокумента1С = ПолучитьРеквизитСсылки(Документ1С, "СуммаДокумента");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеУдалениеДокументов(ОбрабатываемаяТаблица, ОтборСтрок)
		
		НайденныеСтроки = ОбрабатываемаяТаблица.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаДокумента = НайденныеСтроки[0];
			ИндексСтроки    = ОбрабатываемаяТаблица.Индекс(СтрокаДокумента);
			ОбрабатываемаяТаблица.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, ИмяТаблицы)
		
		Если Поле.Имя = ИмяТаблицы + "СостояниеОбработки" Тогда
			
			Если Элемент.ТекущиеДанные.СостояниеОбработки = СтатусыСоздания_НеПроведен() Тогда
				ОбработатьСостояниеПроведитеДокумент(Элемент.ТекущиеДанные, ИмяТаблицы);
			Иначе
				МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", Элемент.ТекущиеДанные.КомментарийКДействию);
			КонецЕсли;
			
		ИначеЕсли Поле.Имя = ИмяТаблицы + "ПервичныйДокумент" Тогда
			
			ДокументСсылка= Элемент.ДанныеСтроки(ВыбраннаяСтрока).ПервичныйДокумент;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
			КонецЕсли;
			
		ИначеЕсли Поле.Имя = ИмяТаблицы + "СопоставляемыйДокумент1С" Тогда
			
			ДокументСсылка= Элемент.ДанныеСтроки(ВыбраннаяСтрока).СопоставляемыйДокумент1С;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
			КонецЕсли;
			
		Иначе
			
			СформироватьПечатнуюФормуПоФайлуДиадок(ИмяТаблицы);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСостояниеПроведитеДокумент(ТекущиеДанные, ИмяТаблицы)
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ИмяТаблицы"		, ИмяТаблицы);
		ПараметрыОбработчика.Вставить("ТекущиеДанные"	, ТекущиеДанные);
		
		МетодКлиента(	, "ОткрытьФормуОбъектаИБМодально"
						, ТекущиеДанные.ПервичныйДокумент
						,,
						, ЭтаФорма
						, "ОбработчикОткрытиеДокументаДляПроведения"
						, ПараметрыОбработчика);
	   			
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьПроведениеДокументаПоступления(СтрокаТаблицы)
		
		Если СтрокаТаблицы.ЭтоУПД_СЧФДОП ИЛИ СтрокаТаблицы.ЭтоЕдиныйДокументСФ Тогда
			НоваяСтрока = ТаблицаСоздатьСчетФактуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "СостояниеОбработки, ПервичныйДокумент");
			НоваяСтрока.СписокСсылок1С.Добавить(СтрокаТаблицы.ПервичныйДокумент);
		Иначе
			НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "СостояниеОбработки");
		КонецЕсли;
		
		ИндексСтроки = ТаблицаСоздатьДокументыПоступления.Индекс(СтрокаТаблицы);
		ТаблицаСоздатьДокументыПоступления.Удалить(ИндексСтроки);
			
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбновитьФормуПослеПроведенияДокументовПоступления()
		
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления", ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", ТаблицаСоздатьСчетФактуры); // если было проведение поступления для УПД СЧФДОП, то документ перешел на закладку СоздатьСчетФактуры
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		
		ОтработатьИзменениеВкл("ТаблицаСоздатьДокументыПоступления");
		ОтработатьИзменениеВкл("ТаблицаСоздатьСчетФактуры");
		
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьПроведениеДокументаСФ(СтрокаТаблицы)
		
		НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "СостояниеОбработки");
		
		ИндексСтроки = ТаблицаСоздатьСчетФактуры.Индекс(СтрокаТаблицы);
		ТаблицаСоздатьСчетФактуры.Удалить(ИндексСтроки);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбновитьФормуПослеПроведенияДокументовСФ()
		
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", ТаблицаСоздатьСчетФактуры); // если было проведение поступления для УПД СЧФДОП, то документ перешел на закладку СоздатьСчетФактуры
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры

	&НаКлиенте
	Функция НовоеОписаниеДокументаПакета()
		
		Результат = МетодКлиента("Модуль_Клиент", "НовоеОписаниеДокументаПакета");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Процедура СформироватьПечатнуюФормуПоФайлуДиадок(ИмяТаблицы)
		
		ТекущиеДанные =	Элементы[ИмяТаблицы].ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", НСтр( "ru = 'Выберите документ'"));
			Возврат;
		КонецЕсли;

		Document = ПолучитьДокументДиадок(ТекущиеДанные.BoxID, ТекущиеДанные.DocumentID);

		ПараметрыФормы = Новый Структура;
			
		Если Document.Department <> Неопределено Тогда
			ПараметрыФормы.Вставить("DepartmentKpp", 	Document.Department.Kpp);
			ПараметрыФормы.Вставить("DepartmentId",		Document.Department.Id);
		КонецЕсли;

		ДокументИБ = ТекущиеДанные.ПервичныйДокумент;
		Если Не ЗначениеЗаполнено(ДокументИБ)
			И ТекущиеДанные.Свойство("СопоставляемыйДокумент1С") Тогда
			ДокументИБ = ТекущиеДанные.СопоставляемыйДокумент1С;
		КонецЕсли;

		ФорматЭД = ФорматЭлектронногоДокумента(Document);

		ЭлементМассива = НовоеОписаниеДокументаПакета();
		ЭлементМассива.CounteragentBoxID = Document.Counteragent.ID;
		ЭлементМассива.РасширениеФайлаДиадок = ПолучитьРасширениеФайлаДиадок(Document.FileName);
		ЭлементМассива.ФорматОтправки = ФорматЭД;
		ЭлементМассива.Документ1С = ДокументИБ;
		ЭлементМассива.ТипДокумента = ТекущиеДанные.ТипДокумента;
		ЭлементМассива.СтатусМЧД = ТекущиеДанные.СтатусМЧД;
		ЭлементМассива.СтатусМЧДКритичность = ТекущиеДанные.СтатусМЧДКритичность;

		МассивДокументовПакета = Новый Массив;
		МассивДокументовПакета.Добавить(ЭлементМассива);

		ПараметрыФормы.Вставить("BoxID", 					Document.OrganizationID);
		ПараметрыФормы.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
		ПараметрыФормы.Вставить("МассивДокументовПакета", 	МассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова", 				"ГрупповаяОбработкаВходящих");
			
		ИмяФормыПросмотра	= МетодКлиента("Модуль_Клиент","ПолучитьИмяФормыДокумента", Document);
		ФормаПросмотра		= МетодКлиента(,"ПолучитьФормуОбработки", ИмяФормыПросмотра, ПараметрыФормы, ЭтаФорма, СокрЛП(Document.DocumentID) + "/" + СокрЛП(Document.OrganizationID));

		ФормаПросмотра.ЭДОбъект = Document;

		ОткрытьФорму(ФормаПросмотра);
			
	КонецПроцедуры
	
	&НаКлиенте
	Функция РежимыГрупповойОбработки()
		
		Результат = Новый Структура;
		
		Результат.Вставить("Сохранить"			, "Сохранить");
		Результат.Вставить("Сопоставление"		, "Сопоставление");
		Результат.Вставить("АнализДокументов"	, "АнализДокументов");
		Результат.Вставить("ОбработкаДокументов", "ОбработкаДокументов");
		
		Возврат Результат;
		
	КонецФункции
			
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ МАССОВОЕ ПОДПИСАНИЕ

#ОБЛАСТЬ ПОДПИСАНИЕ_КОМАНДЫ_

	&НаКлиенте
	Процедура ТаблицаПодписатьСнятьУстановитьПометки(Команда)

		ОбработатьПометки(ТаблицаПодписать, "ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьВыполнитьПодписание(Команда)
		
		ВыполнитьПодписаниеДокументов();	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьОбновить(Команда)

		ЗаполнитьТаблицы(ТаблицаПодписать);
		УстановитьЗаголовокСтраницы("СтраницаПодписать",  ТаблицаПодписать);				
				
	КонецПроцедуры
	
#КонецОбласти	
	
#ОБЛАСТЬ ПОДПИСАНИЕ_СОБЫТИЯ_ЭЛЕМЕНТОВ_ФОРМЫ

	&НаКлиенте
	Процедура ТаблицаПодписатьВклПриИзменении(Элемент)

		ОтработатьИзменениеВкл("ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ИмяТаблицы = ИменаТаблицФормы().ТаблицаПодписать;
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, ИмяТаблицы);

	КонецПроцедуры

#КонецОбласти
	
	&НаКлиенте
	Процедура ВыполнитьПодписаниеДокументов()
		
		ПроверитьВозможностьПодписанияДокументов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьПодписаниеДокументовЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
		
		ШаблоныОтветныхТитулов = ПодготовитьШаблоныОтветныхТитулов();
		
		ЗаполнитьШаблоныОтветныхТитуловИПодписатьДокументы(ШаблоныОтветныхТитулов);
		
	КонецПроцедуры
	
		
#ОБЛАСТЬ Перед_подписанием
	
	&НаКлиенте
	Процедура ПроверитьВозможностьПодписанияДокументов()
		
		ОшибкиBoxId_ПраваДоступа 	= Новый Соответствие;
		ОшибкиBoxId_Сертификат		= Новый Соответствие;
		
		ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаПодписать);
		
		Для каждого СтрокаТЧ Из ПомеченныеСтроки Цикл
			
			ОписаниеОшибки = ОписаниеОшибки_ПраваДоступа(ОшибкиBoxId_ПраваДоступа, СтрокаТЧ);
			
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ОписаниеОшибки_Сертификат(ОшибкиBoxId_Сертификат, СтрокаТЧ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОбработатьОтказПриВыполененииДействия(СтрокаТЧ, ОписаниеОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокиДляПроверкиМЧД	 = СтрокиДляПроверкиМЧДПриПодписании();
		ДополнительныеПараметры	 = Новый Структура;
		ДополнительныеПараметры.Вставить("ДанныеДляОбработки", СтрокиДляПроверкиМЧД);
		
		ОписаниеОповещенияПослеПроверки = Новый ОписаниеОповещения("ВыполнитьПодписаниеДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МетодКлиента("Модуль_Клиент", "МЧД_ПроверитьДоверенностьПоУмолчаниюИВыполнитьОповещение", ОписаниеОповещенияПослеПроверки);
		
	КонецПроцедуры

	&НаКлиенте
	Функция ОписаниеОшибки_ПраваДоступа(кэшОшибки, СтрокаТЧ)
		
		Результат = кэшОшибки[СтрокаТЧ.BoxId];
		
		Если Результат = Неопределено Тогда
			
			CanSignDocuments = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", СтрокаТЧ.BoxId, "ДанныеСотрудника").ПраваДоступа.CanSignDocuments;
			
			Если CanSignDocuments = Ложь Тогда
				
				Результат = "Документ " + СтрокаТЧ.ТипДокумента + " " + СтрокаТЧ.Номер + " от " + СтрокаТЧ.Дата + 
				" не подписан. Недостаточно прав для подписания";
				
			Иначе
				Результат = "";			
			КонецЕсли;
			
			кэшОшибки.Вставить(СтрокаТЧ.BoxId, Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция ОписаниеОшибки_Сертификат(кэшОшибки, СтрокаТЧ)
		
		ФорматЭД = СтрокаТЧ.ФорматОтправки;
		ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ФорматЭД.ИмяТипа);
		
		КлючОшибкиBoxId_Сертификат = "" + СтрокаТЧ.BoxId + "_" + ЭтоФормализованныйДокумент;
	
		Результат = кэшОшибки[КлючОшибкиBoxId_Сертификат];
	
		Если Результат = Неопределено Тогда
		
			Результат = "";
	
			Попытка
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", СтрокаТЧ.BoxId, ЭтоФормализованныйДокумент);
			Исключение
				Результат = МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ОписаниеОшибки());
			КонецПопытки;
		
			кэшОшибки.Вставить(КлючОшибкиBoxId_Сертификат, Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция СтрокиДляПроверкиМЧДПриПодписании()
		
		Результат = Новый Массив;
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаПодписать);
		Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			ТребуетсяТитул		 = МодульКлиент_ФормироватьОтветныйТитул(СтрокаТЧ.ЭлектронныйДокумент.ВидДокументооборота);
			Если НЕ ТребуетсяТитул Тогда
				Результат.Добавить(СтрокаТЧ);
			КонецЕсли; 
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПодготовитьШаблоныОтветныхТитулов()
		
		Результат = Новый Соответствие;
		
		ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаПодписать);
		
		Для Каждого СтрокаТЧ Из ПомеченныеСтроки Цикл
			
			ФорматЭД = СтрокаТЧ.ФорматОтправки;
			ИдентификаторОрганизации = СтрокаТЧ.BoxId;
			ВидДокументооборота = СтрокаТЧ.ЭлектронныйДокумент.ВидДокументооборота;
			
			ПараметрыПодписания = МодульКлиент_ПараметрыФормыПодписанияДокумента();
			ПараметрыПодписания.ФорматДокумента = ФорматЭД;
			ПараметрыПодписания.ТребуетсяОтветныйТитул = МодульКлиент_ФормироватьОтветныйТитул(ВидДокументооборота);
			ПараметрыПодписания.ИдентификаторОрганизации = ИдентификаторОрганизации;
			
			КлючШаблона = КлючПараметровПодписания(ПараметрыПодписания);
			
			Если Результат[КлючШаблона] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", ИдентификаторОрганизации, "ДанныеОрганизации");
			ПараметрыПодписания.ЗаголовокФормыПодписания = СтрШаблон("Подпись документов ""%1""", ДанныеОрганизации.Name);
			
			Шаблон = Новый Структура;
			Шаблон.Вставить("ПараметрыПодписания", ПараметрыПодписания);
			Шаблон.Вставить("ОтветныйТитул"	, Неопределено);
			Шаблон.Вставить("КонтрактМЧД"	, Неопределено);
			
			Результат.Вставить(КлючШаблона, Шаблон);
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьШаблоныОтветныхТитуловИПодписатьДокументы(ШаблоныОтветныхТитулов)
		
		Для Каждого КлючИЗначение Из ШаблоныОтветныхТитулов Цикл
			
			КлючШаблона = КлючИЗначение.Ключ;
			Шаблон		= КлючИЗначение.Значение;
			
			Если Не Шаблон.ПараметрыПодписания.ТребуетсяОтветныйТитул 
				Или ЗначениеЗаполнено(Шаблон.ОтветныйТитул) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяОбработчика = "ЗавершениеЗаполненияШаблонаОтветногоТитула";
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ШаблоныОтветныхТитулов", ШаблоныОтветныхТитулов);
			ПараметрыОбработчика.Вставить("КлючШаблона", КлючШаблона);
			
			МетодКлиента("Модуль_Клиент", "ПоказатьФормуПодписания"
				, Шаблон.ПараметрыПодписания
				, ЭтаФорма
				, ИмяОбработчика
				, ПараметрыОбработчика);
			
			Возврат; // Нужно заполнить все шаблоны и только после этого запустить подписание документов.
			
		КонецЦикла;
		
		ПодписатьДокументы(ШаблоныОтветныхТитулов);

	КонецПроцедуры
	
#КонецОбласти
	
#ОБЛАСТЬ При_подписании

	&НаКлиенте
	Процедура ПодписатьДокументы(ШаблоныОтветныхТитулов)
		
		ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаПодписать);
		ПодходящиеСтроки = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ПомеченныеСтроки Цикл
			
			ФорматЭД = СтрокаТЧ.ФорматОтправки;
			ИдентификаторОрганизации = СтрокаТЧ.BoxId;
			ВидДокументооборота = СтрокаТЧ.ЭлектронныйДокумент.ВидДокументооборота;
			
			ПараметрыПодписания = МодульКлиент_ПараметрыФормыПодписанияДокумента();
			ПараметрыПодписания.ФорматДокумента = ФорматЭД;
			ПараметрыПодписания.ТребуетсяОтветныйТитул = МодульКлиент_ФормироватьОтветныйТитул(ВидДокументооборота);
			ПараметрыПодписания.ИдентификаторОрганизации = ИдентификаторОрганизации;
			
			КлючШаблона = КлючПараметровПодписания(ПараметрыПодписания);
			
			Шаблон = ШаблоныОтветныхТитулов[КлючШаблона];
			
			Если Шаблон <> Неопределено Тогда
				ПодходящиеСтроки.Добавить(Новый Структура("СтрокаТЧ, ОтветныйТитул", СтрокаТЧ, Шаблон.ОтветныйТитул));
				
				Если ЗначениеЗаполнено(Шаблон.КонтрактМЧД) Тогда
					СтрокаТЧ.КонтрактМЧД = Шаблон.КонтрактМЧД;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПомеченныеСтроки		 = Неопределено;
		ШаблоныОтветныхТитулов	 = Неопределено;
		
		КолУспешно		 = 0;
		КолОшибок		 = 0;
		ВсегоСтрок		 = ПодходящиеСтроки.Количество();
		ТекстСостояния	 = НСтр("ru = 'Подписание документов'");
		
		Для Сч = 1 По ВсегоСтрок Цикл
			
			МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
			
			ОбработкаПрерыванияПользователя();
			
			ОписаниеОшибки	 = "";
			ПодходящаяСтрока = ПодходящиеСтроки[Сч-1];
			ОтветныйТитул	 = ПодходящаяСтрока.ОтветныйТитул;
			СтрокаТЧ		 = ПодходящаяСтрока.СтрокаТЧ;
			
			Попытка  
				Document = ПолучитьДокументДиадок(СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId);
				МетодКлиента("Модуль_Клиент", "ПодписатьВДиадоке", Document, ОтветныйТитул, , СтрокаТЧ.КонтрактМЧД);
			Исключение 
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				
				ПредставлениеОшибки = МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ОписаниеОшибки);
				ОбработатьОтказПриВыполененииДействия(СтрокаТЧ, ПредставлениеОшибки);
				
				КолОшибок = КолОшибок + 1;
				
			Иначе
				
				СтрокаТЧ.Вкл	  = Ложь;
				СтрокаТЧ.Подписан = Истина;
				СтрокаТЧ.СостояниеОбработки   = СтатусыПодписания_Завершено();
				СтрокаТЧ.КомментарийКДействию = "Документ успешно подписан";
				
				КолУспешно = КолУспешно + 1;
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", Новый Структура("BoxId, DocumentId", СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId), ЭтаФорма);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ПередвинутьДальшеСтрокиТаблицыПодписать();
			
	КонецПроцедуры
	
#КонецОбласти
	
#ОБЛАСТЬ После_подписания
		
	&НаКлиенте
	Процедура ПередвинутьДальшеСтрокиТаблицыПодписать()

		НайденныеСтрокиПодписан = ТаблицаПодписать.НайтиСтроки(Новый Структура("Подписан", Истина));
		
		Для Каждого СтрокаТаблицыПодписать Из НайденныеСтрокиПодписан Цикл
			
			Если НужноСоздатьПоступление(СтрокаТаблицыПодписать, Истина, СтрокаТаблицыПодписать.ПараметрыОбработкиЕдиногоДокументаДД) Тогда
				Если ТекущийСценарий = СценарииГрупповойОбработки().Подписать Тогда
					НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
				Иначе //это сценарий ПодписатьИСоздать
					НоваяСтрока = ТаблицаСоздатьДокументыПоступления.Добавить();
				КонецЕсли;
			Иначе
				НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПодписать,, "СостояниеОбработки, СостояниеДокументооборота");
			НоваяСтрока.СостояниеДокументооборота = "Подписан";
			
			ТаблицаПодписать.Удалить(СтрокаТаблицыПодписать);
			
		КонецЦикла;
		
		УстановитьЗаголовокСтраницы("СтраницаПодписать", ТаблицаПодписать);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления", ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		
		ОтработатьИзменениеВкл("ТаблицаПодписать");
		ОтработатьИзменениеВкл("ТаблицаСоздатьДокументыПоступления");
		
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры
	
#КонецОбласти
	
////////////////////////////////////////////////////////////////////////////////
//} МАССОВОЕ ПОДПИСАНИЕ


////////////////////////////////////////////////////////////////////////////////
//{ МАССОВОЕ СОЗДАНИЕ ВХОДЯЩИХ ДОКУМЕНТОВ

#Область СОЗДАНИЕ_КОМАНДЫ_

&НаКлиенте
Процедура ПослеВыбораПравилаСозданияПервичныхДокументов(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтатистику_НажалиСоздатьДокументыПоступления();
	
	ИмяТаблицы = "ТаблицаСоздатьДокументыПоступления";
	
	ПравилоОбработки = ВыбранныйЭлемент.Значение;
	ИдентификаторПравила = ПравилоОбработки.Идентификатор;
	
	ПрочитатьКонтентВыбранныхДокументовПоступления(ИмяТаблицы);
	
	ПрочитатьДанныеЭлектронныхДокументовНаСервере(ИмяТаблицы);
	
	ПодготовитьНоменклатуруДляСопоставления();
	
	ЕстьНесопоставленнаяНоменклатура = ЗначениеЗаполнено(АдресНоменклатураДляСопоставления);
	
	Если ЕстьНесопоставленнаяНоменклатура Тогда
		
		ИмяОбработчика = "ПослеСопоставленияНоменклатуры";
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ПравилоОбработки", ИдентификаторПравила);
		
		ПоказатьФормуСопоставленияНоменклатуры(ИмяОбработчика, ПараметрыОбработчика);
		
	Иначе
		СоздатьДокументыПоступления(ИдентификаторПравила);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПравилаСозданияСчетовФактур(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСтатистику_НажалиСоздатьСчетФактуру();
	
	ИмяТаблицы = "ТаблицаСоздатьСчетФактуры";
	
	ПравилоОбработки = ВыбранныйЭлемент.Значение;
	ИдентификаторПравила = ПравилоОбработки.Идентификатор;
	
	ПрочитатьКонтентВыбранныхДокументовПоступления(ИмяТаблицы);
	
	ПодготовитьСписокОснованийСчетовФактур();
	
	ПрочитатьДанныеЭлектронныхДокументовНаСервере(ИмяТаблицы);
	
	СоздатьСчетаФактуры(ИдентификаторПравила);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеЭлектронныхДокументовНаСервере(ИмяТаблицы)
	
	КоллекцияСтрок = ЭтаФорма[ИмяТаблицы];
	
	Для Каждого СтрокаТаблицы Из КоллекцияСтрок Цикл
		
		Если Не СтрокаТаблицы.Вкл Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДанныеЭД) Тогда
			
			КонтентДокумента	= СтрокаТаблицы.КонтентДокумента;
			ЭлектронныйДокумент = СтрокаТаблицы.ЭлектронныйДокумент;
			
			ОсновнойМодуль_ПередОтражениемДокументаВУчете(ЭлектронныйДокумент);
		
			СтрокаТаблицы.ДанныеЭД = МенеджерИнтеграции_ДанныеЭлектронногоДокумента(ЭлектронныйДокумент, КонтентДокумента);
			
		КонецЕсли;
		
		МенеджерИнтеграции_ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(СтрокаТаблицы.ДанныеЭД);
		
		Ошибки = Новый Массив;
		
		Если ЕстьОшибкиЗаполнения(СтрокаТаблицы.ДанныеЭД, Ошибки) Тогда
			
			ОбработатьОтказПриВыполененииДействия(СтрокаТаблицы, СтрСоединить(Ошибки, Символы.ПС));
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует список несопоставленной номенклатуры контрагентов
// и помещает его во временное хранилище.
// 
&НаСервере
Процедура ПодготовитьНоменклатуруДляСопоставления()
	
	Если ЗначениеЗаполнено(АдресНоменклатураДляСопоставления) Тогда
		УдалитьИзВременногоХранилища(АдресНоменклатураДляСопоставления);
		АдресНоменклатураДляСопоставления = "";
	КонецЕсли;
	
	НоменклатураКонтрагентов = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоздатьДокументыПоступления Цикл
		
		Если Не СтрокаТаблицы.Вкл Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЭД = СтрокаТаблицы.ДанныеЭД;
		ТолькоНесопоставленная = Истина;
		
		НоменклатураДокумента = МенеджерИнтеграции_НоменклатураЭлектронногоДокументаДляСопоставления(ДанныеЭД, ТолькоНесопоставленная);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НоменклатураКонтрагентов, НоменклатураДокумента);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НоменклатураКонтрагентов) Тогда
		АдресНоменклатураДляСопоставления = ПоместитьВоВременноеХранилище(НоменклатураКонтрагентов, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСопоставленияНоменклатуры(ИмяОбработчика, ПараметрыОбработчика)
	
	Если Не ЗначениеЗаполнено(АдресНоменклатураДляСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураКонтрагентов = ПолучитьИзВременногоХранилища(АдресНоменклатураДляСопоставления);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НоменклатураДляСопоставления", НоменклатураКонтрагентов);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаГрупповоеСопоставлениеНоменклатуры"
		, ПараметрыФормы
		, ЭтаФорма
		, ИмяОбработчика
		, ПараметрыОбработчика);
	
КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияСнятьУстановитьПометки(Команда)
		
		ОбработатьПометки(ТаблицаСоздатьДокументыПоступления, "ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияСоздать(Команда)
		
		ДопПараметрыСоздания = Неопределено;
		ОбработкаЗавершения = Новый ОписаниеОповещения("ПослеВыбораПравилаСозданияПервичныхДокументов"
			, ЭтотОбъект
			, ДопПараметрыСоздания);
		
		Если ПравилаОбработкиДОП.Количество() > 1 Тогда
			
			Кнопка = Элементы.ТаблицаСоздатьДокументыПоступленияСоздать;
			ПоказатьВыборИзМеню(ОбработкаЗавершения
				, ПравилаОбработкиДОП
				, Кнопка);
			
		ИначеЕсли ПравилаОбработкиДОП.Количество() = 1 Тогда
			
			ВыбранныйЭлемент = ПравилаОбработкиДОП[0];
			ВыполнитьОбработкуОповещения(ОбработкаЗавершения, ВыбранныйЭлемент);
			
		Иначе
			
			ТекстПредупреждения = "Не найдены правила обработки первичных документов";
			ПоказатьПредупреждение(, ТекстПредупреждения, 60, Словарь_НаименованиеСистемы());
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыСоздать(Команда)
		
		ДопПараметрыСоздания = Неопределено;
		ОбработкаЗавершения = Новый ОписаниеОповещения("ПослеВыбораПравилаСозданияСчетовФактур"
			, ЭтотОбъект
			, ДопПараметрыСоздания);
		
		Если ПравилаОбработкиСЧФ.Количество() > 1 Тогда
			
			Кнопка = Элементы.ТаблицаСоздатьДокументыПоступленияСоздать;
			ПоказатьВыборИзМеню(ОбработкаЗавершения
				, ПравилаОбработкиСЧФ
				, Кнопка);
			
		ИначеЕсли ПравилаОбработкиСЧФ.Количество() = 1 Тогда
			
			ВыбранныйЭлемент = ПравилаОбработкиСЧФ[0];
			ВыполнитьОбработкуОповещения(ОбработкаЗавершения, ВыбранныйЭлемент);
			
		Иначе
			
			ТекстПредупреждения = "Не найдены правила обработки счетов-фактур";
			ПоказатьПредупреждение(, ТекстПредупреждения, 60, Словарь_НаименованиеСистемы());
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияОбновить(Команда)

		ЗаполнитьТаблицы(ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления",  ТаблицаСоздатьДокументыПоступления);				
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыСнятьУстановитьПометки(Команда)

		ОбработатьПометки(ТаблицаСоздатьСчетФактуры, "ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыОбновить(Команда)

		ЗаполнитьТаблицы(ТаблицаСоздатьСчетФактуры);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры",  ТаблицаСоздатьСчетФактуры);				
	
	КонецПроцедуры
	
#КонецОбласти	
	
#ОБЛАСТЬ СОЗДАНИЕ_ОБРАБОТЧИКИ_СОБЫТИЙ_

	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияВклПриИзменении(Элемент)

		Если ЗначениеЗаполнено(Элементы.ТаблицаСоздатьДокументыПоступления.ТекущиеДанные.ПервичныйДокумент) Тогда
			Если Элементы.ТаблицаСоздатьДокументыПоступления.ТекущиеДанные.Вкл Тогда
				Сообщить("Данную строку нельзя отметить для создания: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " в 1С уже создан");
			КонецЕсли;
			Элементы.ТаблицаСоздатьДокументыПоступления.ТекущиеДанные.Вкл = Ложь;	
		КонецЕсли;
		
		ОтработатьИзменениеВкл("ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура СоздаватьПоДаннымСФПриИзменении(Элемент)
		
		Оповещение = Новый ОписаниеОповещения("ПерезаполнитьТаблицы", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Перезаполнить таблицы по изменившимся настройкам?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыВклПриИзменении(Элемент)

		Если ЗначениеЗаполнено(Элементы.ТаблицаСоздатьСчетФактуры.ТекущиеДанные.ПервичныйДокумент) Тогда
			Сообщить("Данную строку нельзя отметить для создания: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " в 1С уже создан");
			Элементы.ТаблицаСоздатьСчетФактуры.ТекущиеДанные.Вкл = Ложь;	
		КонецЕсли;

		ОтработатьИзменениеВкл("ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ИмяТаблицы = ИменаТаблицФормы().ТаблицаСоздатьДокументыПоступления;
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, ИмяТаблицы);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ИмяТаблицы = ИменаТаблицФормы().ТаблицаСоздатьСчетФактуры;
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, ИмяТаблицы);

	КонецПроцедуры
	
#КонецОбласти
	
#ОБЛАСТЬ СОЗДАНИЕ_ОБРАБОТЧИКИ_ОПОВЕЩЕНИЯ_

	&НаКлиенте
	Процедура ПерезаполнитьТаблицы(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ЗначениеСоздаватьПоДаннымСФ_ДоИзменения = СоздаватьПоступлениеПоДаннымСФ;
			ЗаполнитьТаблицы();
			УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления", ТаблицаСоздатьДокументыПоступления);
			УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", ТаблицаСоздатьСчетФактуры);				
		Иначе
			СоздаватьПоступлениеПоДаннымСФ = ЗначениеСоздаватьПоДаннымСФ_ДоИзменения;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеСопоставленияНоменклатуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторПравила = ДополнительныеПараметры.ПравилоОбработки;
		СоздатьДокументыПоступления(ИдентификаторПравила);
		
	КонецПроцедуры
	
#КонецОбласти

	#ОБЛАСТЬ СОЗДАНИЕ_ПОЛУЧЕНИЕ_ДАННЫХ_
		
		&НаСервере
		Функция ПолучитьОрганизацию1С_ПоДаннымДД(BoxID, DepartmentKpp)
					
			Организация1С = КэшФормы().ОрганизацииДД_1С.Получить(BoxID);
			Если Организация1С = Неопределено Тогда
				Организация1С = МетодСервера(,"BoxID_2_Организация", BoxID, DepartmentKpp); 
				КэшФормы().ОрганизацииДД_1С.Вставить(BoxID, Организация1С);
			КонецЕсли;
			
			Возврат Организация1С;
			
		КонецФункции

		&НаСервере
		Функция ПолучитьКонтрагента1С_ПоДаннымДД(CounteragentID)
			
			Контрагент1С = КэшФормы().КонтрагентыДД_1С.Получить(CounteragentID);
			Если Контрагент1С = Неопределено Тогда
				Контрагент1С = МетодСервера(,"CounteragentBoxID_2_Контрагент", CounteragentID); 
				КэшФормы().КонтрагентыДД_1С.Вставить(CounteragentID, Контрагент1С);
			КонецЕсли;
			
			Возврат Контрагент1С;
			
		КонецФункции

	#КонецОбласти	

#ОБЛАСТЬ Перед_созданием

&НаКлиенте
Процедура ПрочитатьКонтентВыбранныхДокументовПоступления(ИмяТаблицы)
	
	КоллекцияСтрок = ЭтаФорма[ИмяТаблицы];
	
	ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(КоллекцияСтрок);
	ТекстСостояния	 = НСтр("ru = 'Чтение контента электронных документов'");
	ВсегоСтрок		 = ПомеченныеСтроки.Количество();
	
	// получаем контенты документов в виде структуры и заполняем их данными из Document
	Для Сч = 1 По ВсегоСтрок Цикл
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
		
		ОбработкаПрерыванияПользователя();
		
		СтрокаТЧ = ПомеченныеСтроки[Сч-1];
		
		Document = ПолучитьДокументДиадок(СтрокаТЧ.BoxID, СтрокаТЧ.DocumentID);
		Попытка
			СтрокаТЧ.КонтентДокумента = ПолучитьКонтентДокументаСтруктурой(Document);
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ОбработатьОтказПриВыполененииДействия(СтрокаТЧ, КраткоеПредставлениеОшибки(Ошибка));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьСписокОснованийСчетовФактур()
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоздатьСчетФактуры Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если Не СтрокаТаблицы.Вкл
			Или ЗначениеЗаполнено(СтрокаТаблицы.СписокСсылок1С) Тогда
			Продолжить;
		КонецЕсли;
		
		УчетныеДокументы = ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(СтрокаТаблицы.СписокСсылок, СтрокаТаблицы.BoxID);
		Для Каждого СсылкаНаОбъект Из УчетныеДокументы Цикл
			СтрокаТаблицы.СписокСсылок1С.Добавить(СсылкаНаОбъект);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
	
#ОБЛАСТЬ При_создании

&НаСервере
Процедура ОсновнойМодуль_ПередОтражениемДокументаВУчете(ЭлектронныйДокумент)
	
	МетодСервера(, "ПередОтражениемДокументаВУчете"
		, ЭлектронныйДокумент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОшибкиЗаполнения(ДанныеЭД, Ошибки = Неопределено)
	
	Ошибки = Новый Массив;
	
	Шапка = ДанныеЭД.Шапка;
	Продавец = Шапка.Продавец;
	
	Если ТипЗнч(Продавец) = Тип("Массив") Тогда
		
		ОписаниеОш = "Электронный документ содержит информацию о нескольких продавцах.
		|Автоматическое создание учетных документов невозможно.";
		
		Ошибки.Добавить(ОписаниеОш);
		
	ИначеЕсли Не ЗначениеЗаполнено(Продавец.Ссылка) Тогда
		
		ОписаниеОш = "Не найден контрагент!
		|Проверьте сопоставление контрагента Диадока и контрагента  информационной базы.";
		
		Ошибки.Добавить(ОписаниеОш);
		
	КонецЕсли;
	
	ЕстьОшибки = ЗначениеЗаполнено(Ошибки);
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКонтентДокументаСтруктурой(Document)
	
	Прото = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document);
	
	Результат = Прото.Контент;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьУчетныйДокументПоПравилу(ИдентификаторПравила, ДанныеЭД, Контент, ПараметрыЗаполнения = Неопределено)
	
	ИдентификаторЭД = ДанныеЭД.ЭлектронныйДокумент.Идентификатор;
	
	ДокументОбъект = МенеджерИнтеграции_НовыйДокументИнформационнойБазы(ДанныеЭД, ИдентификаторПравила, ПараметрыЗаполнения);
	ПМ_ПослеЗаполненияНовогоДокумента(ДокументОбъект, Контент, ИдентификаторЭД);
	
	Результат = ЗафиксироватьНовыйДокументВИнформационнойБазе(ДокументОбъект, ИдентификаторЭД);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьПервичныйДокументПоСтрокеТаблицы(СтрокаТаблицы, ИдентификаторПравила)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЦенаВключаетНДС", СуммаВключаетНДС);
	
	Отказ = Ложь;
	
	Попытка
		
		РезультатСоздания = СоздатьУчетныйДокументПоПравилу(ИдентификаторПравила
			, СтрокаТаблицы.ДанныеЭД
			, СтрокаТаблицы.КонтентДокумента
			, ДополнительныеПараметры);
		
	Исключение
		
		Отказ = Истина;
		Ошибка = ИнформацияОбОшибке();
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(Ошибка);
		
	КонецПопытки;
	
	Если Не Отказ Тогда
		ОбработатьСозданиеУчетногоДокумента(СтрокаТаблицы, РезультатСоздания);
	Иначе
		ОбработатьОтказПриВыполененииДействия(СтрокаТаблицы, ПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСозданиеУчетногоДокумента(СтрокаТаблицы, РезультатСоздания)
	
	СтрокаТаблицы.Создан = Истина;
	СтрокаТаблицы.Проведен = РезультатСоздания.Проведен;
	СтрокаТаблицы.ПервичныйДокумент = РезультатСоздания.Ссылка;
	
	Если Не СтрокаТаблицы.Проведен Тогда
		СтрокаТаблицы.Вкл = Ложь;
		СтрокаТаблицы.СостояниеОбработки = СтатусыСоздания_НеПроведен();
		СтрокаТаблицы.КомментарийКДействию = СтатусыСоздания_НеПроведен(); // TODO: Удалить
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьОтказПриВыполененииДействия(СтрокаТаблицы, ПредставлениеОшибки)
	
	СтрокаТаблицы.Вкл = Ложь;
	СтрокаТаблицы.СостояниеОбработки = СтатусыОбработки_Ошибка();
	СтрокаТаблицы.КомментарийКДействию = ПредставлениеОшибки;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПоступленияНаСервере(ИдентификаторПравила)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоздатьДокументыПоступления Цикл
		
		Если Не СтрокаТаблицы.Вкл Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьПервичныйДокументПоСтрокеТаблицы(СтрокаТаблицы, ИдентификаторПравила);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСчетФактуруПоСтрокеТаблицы(СтрокаТаблицы, ИдентификаторПравила)
	
	ДокументыОснования = СтрокаТаблицы.СписокСсылок1С.ВыгрузитьЗначения();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОснование", ДокументыОснования);
	
	Отказ = Ложь;
	
	Попытка
		
		РезультатСоздания = СоздатьУчетныйДокументПоПравилу(ИдентификаторПравила
			, СтрокаТаблицы.ДанныеЭД
			, СтрокаТаблицы.КонтентДокумента
			, ДополнительныеПараметры);
		
	Исключение
		
		Отказ = Истина;
		Ошибка = ИнформацияОбОшибке();
		
	КонецПопытки;
	
	Если Не Отказ Тогда
		ОбработатьСозданиеУчетногоДокумента(СтрокаТаблицы, РезультатСоздания);
	Иначе
		ОбработатьОтказПриВыполененииДействия(СтрокаТаблицы, Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСчетаФактурыНаСервере()
	
	ИдентификаторПравила = "СчетФактураПолученный";
	
	Для Каждого СтрокаТаблицы Из ТаблицаСоздатьСчетФактуры Цикл
		
		Если Не СтрокаТаблицы.Вкл Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьСчетФактуруПоСтрокеТаблицы(СтрокаТаблицы, ИдентификаторПравила);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетаФактуры(ИдентификаторПравила)
	
	МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Создание счетов-фактур'"));
	
	СоздатьСчетаФактурыНаСервере();
	
	ДобавитьСтатистику_СоздатьСчетаФактуры(ИдентификаторПравила);
	
	ОповеститьФормыОСозданииСчетовФактур();
	
	ОбновитьФормуПослеПроведенияДокументовСФ();
	
	МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Создание счетов-фактур завершено'"), УникальныйИдентификатор);
			
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыПоступления(ИдентификаторПравила)
	
	МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Создание документов поступления'"));
			
	СоздатьДокументыПоступленияНаСервере(ИдентификаторПравила);
	
	ДобавитьСтатистику_СоздатьДокументыПоступления(ИдентификаторПравила);
	
	ОповеститьФормыОСозданииДокументовПоступления();
	
	ОбновитьФормуПослеПроведенияДокументовПоступления();
	
	МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Создание документов поступления завершено'"), УникальныйИдентификатор);
			
КонецПроцедуры
	
// Записывает и проводит документ в ИБ. Сопоставляет документу 1С электронный документ
//
// Параметры:
//	НовыйДок - ДокументОбъект- документ 1С еще не записанный в ИБ.
//	ИдентификаторЭД - Структура- сведения для идентификации электронного документа 
//                               (см. Модуль_Клиент.НовыйИдентификаторЭлектронногоДокумента)
//
// Возвращаемое значение:
//	Структура	- см. тело метода
///
&НаСервере
Функция ЗафиксироватьНовыйДокументВИнформационнойБазе(НовыйДок, ИдентификаторЭД)
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка"		, Неопределено);
	Результат.Вставить("Проведен"	, Ложь);
	
	НачатьТранзакцию();
	Попытка
		НовыйДок.Записать();
		СопоставитьЭлектронныйДокументДокументу1СНаСервере(НовыйДок.Ссылка, ИдентификаторЭД);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Если НовыйДок.ЭтоНовый() Тогда
			ИмяСобытия = "Диадок.СозданиеДокумента.ОшибкаЗаписиНовогоДокумента";
		Иначе
			ИмяСобытия = "Диадок.СозданиеДокумента.ОшибкаСопоставления";
		КонецЕсли;
		
		ТекстСообщения = ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Результат.Ссылка = НовыйДок.Ссылка;
	
	Если НовыйДок.ПроверитьЗаполнение() Тогда
		
		Попытка
			НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
			Результат.Проведен = Истина;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Диадок.СозданиеДокумента.ОшибкаПроведения", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


	#ОБЛАСТЬ После_создания
		
		&НаКлиенте
		Процедура ОповеститьФормыОСозданииДокументовПоступления()
			
			НайденныеСтрокиДокументСоздан = ТаблицаСоздатьДокументыПоступления.НайтиСтроки(Новый Структура("Создан", Истина));
			
			Для Каждого СтрокаТаблицыСозданныйДокумент Из НайденныеСтрокиДокументСоздан Цикл
				
				Если Не СтрокаТаблицыСозданныйДокумент.ЭтоЕдиныйДокументСФ И Не СтрокаТаблицыСозданныйДокумент.ЭтоУПД_СЧФДОП Тогда
					
					ПараметрыОповещения = Новый Структура;
					ПараметрыОповещения.Вставить("ТипСущности", "Документ");
					ПараметрыОповещения.Вставить("BoxID", 		СтрокаТаблицыСозданныйДокумент.BoxID);
					ПараметрыОповещения.Вставить("DocumentID", 	СтрокаТаблицыСозданныйДокумент.DocumentID);
					ПараметрыОповещения.Вставить("Документ1С",	СтрокаТаблицыСозданныйДокумент.ПервичныйДокумент);
					
					МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
					
				КонецЕсли;
				
				Если СтрокаТаблицыСозданныйДокумент.Проведен Тогда
					ОбработатьПроведениеДокументаПоступления(СтрокаТаблицыСозданныйДокумент);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецПроцедуры

&НаКлиенте
Процедура ОповеститьФормыОСозданииСчетовФактур()
	
	ОтборСтрок = Новый Структура("Создан", Истина);
	НайденныеСтрокиДокументСоздан = ТаблицаСоздатьСчетФактуры.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаТаблицыСозданныйДокумент Из НайденныеСтрокиДокументСоздан Цикл
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ТипСущности", "Документ");
		ПараметрыОповещения.Вставить("BoxID", 		СтрокаТаблицыСозданныйДокумент.BoxID);
		ПараметрыОповещения.Вставить("DocumentID", 	СтрокаТаблицыСозданныйДокумент.DocumentID);
		ПараметрыОповещения.Вставить("Документ1С",	СтрокаТаблицыСозданныйДокумент.ПервичныйДокумент);
		
		МетодКлиента(, "ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
		
		Если СтрокаТаблицыСозданныйДокумент.Проведен Тогда
			ОбработатьПроведениеДокументаСФ(СтрокаТаблицыСозданныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

	#КонецОбласти

//} МАССОВОЕ СОЗДАНИЕ ВХОДЯЩИХ ДОКУМЕНТОВ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА ЗАВЕРШЕНА

#ОБЛАСТЬ ОБРАБОТКА_ЗАВЕРШЕНА_КОМАНДЫ

	&НаКлиенте
	Процедура ТаблицаОбработкаЗавершенаОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаОбработкаЗавершена");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаОбработкаЗавершенаОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаОбработкаЗавершена");
		
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ ОБРАБОТКА_ЗАВЕРШЕНА_СОБЫТИЯ_ЭЛЕМЕНТОВ_ФОРМЫ

	&НаКлиенте
	Процедура ТаблицаОбработкаЗавершенаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ИмяТаблицы = ИменаТаблицФормы().ТаблицаОбработкаЗавершена;
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, ИмяТаблицы);

	КонецПроцедуры
	
#КонецОбласти
	
//} ОБРАБОТКА ЗАВЕРШЕНА
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СТАРЫЙ ИНТЕРФЕЙС

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_КОМАНДЫ

	&НаКлиенте
	Процедура ТаблицаДокументовОткрытьДокумент1С(Команда)
		
		РежимСопоставление = РежимыГрупповойОбработки().Сопоставление;
		ОткрытьДокумент1С("ТаблицаДокументов", Режим = РежимСопоставление);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовСнятьУстановитьПометки(Команда)

		ОбработатьПометки(ТаблицаДокументов, "ТаблицаДокументов");
		ПересчитатьКонтрольныеСуммы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Обработать(Команда)
			
		ЗапуститьОбработкуОтмеченныхДокументов(Режим);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовОбновить(Команда)
		
		ЗаполнитьТаблицы(ТаблицаДокументов);
		
		Сценарии = СценарииГрупповойОбработки();
		
		Если ТекущийСценарий = Сценарии.Сопоставить Тогда 
			
			НастроитьФормуСопоставить();
							
		КонецЕсли;
				
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_СОБЫТИЯ_ЭЛЕМЕНТОВ_ФОРМЫ
		
	&НаКлиенте
	Процедура ТаблицаДокументовВклПриИзменении(Элемент)
		
		Если Элементы.ТаблицаДокументов.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Сценарии = СценарииГрупповойОбработки();
		
		Если ТекущийСценарий = Сценарии.Сопоставить Тогда
			
			НаименованиеСистемы = Словарь_НаименованиеСистемы();
			
			ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
						
			Если НЕ Режим = РежимыГрупповойОбработки().АнализДокументов Тогда
												
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СопоставляемыйДокумент1С) Тогда
					
					ТекстСообщения = СтрШаблон(НСтр(
									"ru = 'Данную строку нельзя отметить для сопоставления: у документа %1 не найдено соответствие документу в 1С'"),
									НаименованиеСистемы);
									
					МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения);
					
					ТекущиеДанные.Вкл = Ложь;
					
				ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ПервичныйДокумент) Тогда
					
					ТекстСообщения = СтрШаблон(НСтр(
									"ru = 'Данную строку нельзя отметить для сопоставления: документ %1 уже сопоставлен документу в 1С'"),
									НаименованиеСистемы);
					МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения);
															
					ТекущиеДанные.Вкл = Ложь;
					
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(ТекущиеДанные.ПервичныйДокумент) Тогда
					
					ТекстСообщения = СтрШаблон(НСтр(
									"ru = 'Данную строку нельзя отметить для сопоставления: документ %1 уже сопоставлен документу в 1С'"),
									НаименованиеСистемы);
					МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения);
															
					ТекущиеДанные.Вкл = Ложь;	
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		ОтработатьИзменениеВкл("ТаблицаДокументов");

		Если ТекущийСценарий = Сценарии.Сопоставить Тогда
			ПересчитатьКонтрольныеСуммы();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ИмяТаблицы = ИменаТаблицФормы().ТаблицаДокументов;
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, ИмяТаблицы);

	КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура ЗапуститьОбработкуОтмеченныхДокументов(РежимОбработки)
	
	// уберем флаг для всех строк, которые не попали в отбор
	Для Каждого Стр Из ТаблицаДокументов Цикл 
		Если Элементы.ТаблицаДокументов.ПроверитьСтроку(Стр.ПолучитьИдентификатор()) = Ложь Тогда 
			Стр.вкл = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ ЗначениеЗаполнено(ПомеченныеСтрокиТаблицы(ТаблицаДокументов)) Тогда
		МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", НСтр( "ru = 'Не выбраны документы!'"));
		Возврат;
	КонецЕсли;
	
	Сценарии = СценарииГрупповойОбработки();
	
	Если ТекущийСценарий = Сценарии.Сопоставить Тогда
		
		РежимыОбработки = РежимыГрупповойОбработки();
		
		Если Режим = РежимыОбработки.АнализДокументов Тогда
			
			ПроверитьВозможностьСопоставления();	
			
		ИначеЕсли Режим = РежимыОбработки.ОбработкаДокументов Тогда
			
			ВыполнитьСопоставлениеДокументов();
			
		КонецЕсли;
						
	ИначеЕсли ТекущийСценарий = Сценарии.СохранитьНаДиск Тогда
		
		ПараметрыСохранения = Новый Структура;
		ПараметрыСохранения.Вставить("ПоказатьОпциюСохранятьПротокол", Истина);
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально"
			, "ФормаВыбораКаталогаСохранения"
			, ПараметрыСохранения
			, ЭтаФорма
			, "СохранитьНаДиск");
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Неустановленный вид действия'");
		МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения); 
						
	КонецЕсли;
		
КонецПроцедуры

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_СОХРАНИТЬ_НА_ДИСК

	&НаКлиенте
	Процедура СохранитьНаДиск(ПараметрыСохранения, ДополнительныеПараметры) Экспорт 
		
		Если ПараметрыСохранения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВсегоЗадач			 = ПомеченныеСтрокиТаблицы(ТаблицаДокументов).Количество();
		КорневойКаталог		 = ПараметрыСохранения.Каталог;
		СохранятьПротокол	 = ПараметрыСохранения.СохранятьПротокол;
		
		КонтекстАсинхроннойОбработки = Новый Структура;
		КонтекстАсинхроннойОбработки.Вставить("КорневойКаталог"		, КорневойКаталог);
		КонтекстАсинхроннойОбработки.Вставить("СохранятьПротокол"	, СохранятьПротокол);
		КонтекстАсинхроннойОбработки.Вставить("МассивЗадач"			, Новый Массив);
		КонтекстАсинхроннойОбработки.Вставить("ВсегоЗадач"			, ВсегоЗадач);
		КонтекстАсинхроннойОбработки.Вставить("ВыполненоЗадач"		, 0);
			
		ОбработчикСохраненияНаДиск();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикСохраненияНаДиск()
		
		МассивЗадач			 = КонтекстАсинхроннойОбработки.МассивЗадач;
		СохранятьПротокол	 = КонтекстАсинхроннойОбработки.СохранятьПротокол;
		КорневойКаталог		 = КонтекстАсинхроннойОбработки.КорневойКаталог;
		
		Для Каждого СтрокаТЧ Из ТаблицаДокументов Цикл
			
			Если НЕ СтрокаТЧ.Вкл Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивЗадач.Количество() = МаксимальноеКоличествоЗаданий Тогда
				Прервать;
			КонецЕсли;
			
			ДанныеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", СтрокаТЧ.BoxID, "ДанныеОрганизации");
			
			Document		 = ПолучитьДокументДиадок(СтрокаТЧ.BoxID, СтрокаТЧ.DocumentId);
			ИмяТипа			 = Document.TypeNamedId;
			ИмяПапки		 = "INN_" + ДанныеОрганизации.Inn + "\" + ИмяТипа + "_" + Прав(Document.DocumentId, 36);
			КаталогПакета	 = КорневойКаталог + ПолучитьРазделительПути() + ИмяПапки;
			
			СоздатьКаталог(КаталогПакета);
			
			СформироватьФайлСвязанныхДокументах(Document, КаталогПакета);
			СтрокаТЧ.Вкл					 = Ложь;
			СтрокаТЧ.СостояниеОбработки		 = СтатусыСохранения_ИдетОбработка();
			СтрокаТЧ.КомментарийКДействию	 = СтатусыСохранения_ИдетОбработка();
			
			AsyncResult = Document.SaveAllContentAsync(КаталогПакета, СохранятьПротокол);
			
			СтруктураЗадачи = Новый Структура;
			СтруктураЗадачи.Вставить("СтрокаТЧ"		, СтрокаТЧ);
			СтруктураЗадачи.Вставить("AsyncResult"	, AsyncResult);
			МассивЗадач.Вставить(0, СтруктураЗадачи);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивЗадач) Тогда
			
			ОбновлениеСтатусаСохранения();
			
		Иначе
			
			КонтекстАсинхроннойОбработки.Очистить();
			
			ТекстОповещения = НСтр("ru = 'Скачивание файлов успешно завершено'");
			МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", ТекстОповещения, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьФайлСвязанныхДокументах(Document, КаталогПакета, ПризнакОшибки = Неопределено)
		
		Файл = Новый ЗаписьXML;
		
		Файл.ОткрытьФайл(КаталогПакета + "\RelatedDocuments_" + Document.DocumentId + ".xml",  "UTF-8");
		
		Файл.ЗаписатьОбъявлениеXML();
		Файл.ЗаписатьКомментарий("Список связанных документов");
		
		Файл.ЗаписатьНачалоЭлемента("V8Data");
		Файл.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
		
		Файл.ЗаписатьКомментарий("Данный документ");
		Файл.ЗаписатьНачалоЭлемента("Document");
		Файл.ЗаписатьАтрибут("OrganizationId",	Document.OrganizationId);
		Файл.ЗаписатьАтрибут("DocumentId",		Document.DocumentId);
		Файл.ЗаписатьКонецЭлемента(); //Document
		
		Файл.ЗаписатьКомментарий("Список идентификаторов документов, на которые ссылается данный");
		Файл.ЗаписатьНачалоЭлемента("ParentDocumentIds");
		InitialDocumentIds=	Document.InitialDocumentIds;
		Для ц = 0 по  InitialDocumentIds.Count-1 Цикл
			InitialDocument = InitialDocumentIds.GetItem(ц); 
			Файл.ЗаписатьНачалоЭлемента("ParentDocument");
			Файл.ЗаписатьАтрибут("DocumentId", InitialDocument);
			Файл.ЗаписатьКонецЭлемента(); //ParentDocument
		КонецЦикла;
		Файл.ЗаписатьКонецЭлемента(); //ParentDocumentIds
		
		Файл.ЗаписатьКомментарий("Список идентификаторов документов, которые ссылаются на данный");
		Файл.ЗаписатьНачалоЭлемента("SubordinateDocumentIds");
		SubordinateDocumentIds=	Document.SubordinateDocumentIds;
		Для ц = 0 по SubordinateDocumentIds.count-1 Цикл
			SubordinateDocument =  SubordinateDocumentIds.getItem(ц);
			Файл.ЗаписатьНачалоЭлемента("SubordinateDocument");
			Файл.ЗаписатьАтрибут("DocumentId", SubordinateDocument);
			Файл.ЗаписатьКонецЭлемента(); //SubordinateDocument
		КонецЦикла;
		Файл.ЗаписатьКонецЭлемента(); //SubordinateDocumentIds
		
		Файл.ЗаписатьКонецЭлемента();//V8Data
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновлениеСтатусаСохранения()
		
		МассивЗадач = КонтекстАсинхроннойОбработки.МассивЗадач;
		
		Для Сч = -МассивЗадач.ВГраница() По 0 Цикл
		
			СтруктураЗадачи = МассивЗадач[-Сч];
			
			Если СтруктураЗадачи.AsyncResult.IsCompleted Тогда
				
				МассивЗадач.Удалить(-Сч);
				
				СтрокаТЧ = СтруктураЗадачи.СтрокаТЧ;
				СтрокаТЧ.СостояниеОбработки		 = СтатусыСохранения_Завершено();
				СтрокаТЧ.КомментарийКДействию	 = СтатусыСохранения_Завершено();
				
				КонтекстАсинхроннойОбработки.ВыполненоЗадач = КонтекстАсинхроннойОбработки.ВыполненоЗадач + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПодключитьОбработчикОжидания("ОбработчикСохраненияНаДиск", 0.1, Истина);
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка"
		, НСтр("ru = 'Скачивание файлов'")
		, КонтекстАсинхроннойОбработки.ВыполненоЗадач
		, КонтекстАсинхроннойОбработки.ВсегоЗадач);
		
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_СОПОСТАВИТЬ

	&НаКлиенте
	Процедура ПроверитьВозможностьСопоставления()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Анализ документов'"));
		
		НайтиДокументыДляСопоставленияСервер();
		
		Если ЗначениеЗаполнено(ПомеченныеСтрокиТаблицы(ТаблицаДокументов)) Тогда
			Элементы.ТаблицаДокументовОбработать.Заголовок = "Сопоставить выделенные";
			Режим = РежимыГрупповойОбработки().ОбработкаДокументов;		
		КонецЕсли;
		
		МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Анализ документов завершен'"), УникальныйИдентификатор);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура НайтиДокументыДляСопоставленияСервер()
		
		ТабИсходныеДанные=	РеквизитФормыВЗначение("ТаблицаДокументов", Тип("ТаблицаЗначений"));
		ТабДанные=			ТабИсходныеДанные.СкопироватьКолонки();
		
		СписокНайденных = Новый Соответствие;
		
		Для каждого СтрокаДокументаИсходная Из ТабИсходныеДанные Цикл
			
			НоваяСтрока= ТабДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументаИсходная);
			
			Если ЗначениеЗаполнено(СтрокаДокументаИсходная.ПервичныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки = МетодСервера(, "СтрокаТаблицыЗначенийВСтруктуру", НоваяСтрока);
			
			ПараметрыДокумента1С = НайтиДокумент1С(ДанныеСтроки);
			
			Если ЗначениеЗаполнено(ПараметрыДокумента1С.Ссылка) Тогда
				
				Если ПараметрыДокумента1С.УжеСопоставлен
					Или СписокНайденных[ПараметрыДокумента1С.Ссылка] = Истина Тогда
					НоваяСтрока.Дубликат= Истина;
				Иначе
					НоваяСтрока.СопоставляемыйДокумент1С= ПараметрыДокумента1С.Ссылка;
					СписокНайденных.Вставить(ПараметрыДокумента1С.Ссылка, Истина);
				КонецЕсли;
				
				НоваяСтрока.СуммаДокумента1С = ПараметрыДокумента1С.СуммаДокумента;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьСтатусыСопоставленияДокументов(ТабДанные);
		
		ЗначениеВРеквизитФормы(ТабДанные, "ТаблицаДокументов");
		
	КонецПроцедуры
	
	&НаСервере
	Функция НайтиДокумент1С(ПараметрыПоиска)
		
		РезультатПМ = МетодСервера(, "ОбработкаСобытияПодключаемогоМодуля", "НайтиДокумент1С", ПараметрыПоиска);
		Если РезультатПМ <> Неопределено Тогда
			Возврат РезультатПМ;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Ссылка", Неопределено);
		Результат.Вставить("УжеСопоставлен", Ложь);
		Результат.Вставить("СуммаДокумента", 0);
		
		ИмяТипаЭД = ПараметрыПоиска.ФорматОтправки.ИмяТипа;
		ЭтоЭлектронныйСФ = Найти(ИмяТипаЭД, "Invoice") > 0 И ИмяТипаЭД <> "ProformaInvoice";
		
		Если ЭтоЭлектронныйСФ Тогда
			
			ПодходящаяСФ=			Неопределено;
			МассивСсылокРНК=		ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(ПараметрыПоиска.СписокСсылок, ПараметрыПоиска.BoxID);
			ВыборкаПодходящихСФ=	НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
			
			Если ВыборкаПодходящихСФ.Следующий() Тогда 
				ЗаполнитьЗначенияСвойств(Результат, ВыборкаПодходящихСФ);
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;	
		
		ТекстЗапроса = "";
		
		Если НЕ ПараметрыПоиска.Сумма = 0 Тогда
			
			Если ИмяТипаЭД = "XmlTorg12" ИЛИ ИмяТипаЭД = "XmlAcceptanceCertificate" Тогда
				
				Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11"
					ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					
					ТекстЗапроса =	
						"ВЫБРАТЬ
						|	ПоступлениеТоваровУслуг.Ссылка,
						|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
						|		ПО ПоступлениеТоваровУслуг.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	ПоступлениеТоваровУслуг.Организация = &Организация
						|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
						|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
						|	И ПоступлениеТоваровУслуг.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
					
						ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПоступлениеТоваровУслуг", "Документ." + МетодСервера(, "ПредставлениеДокументов").ПоступлениеТоваровУслуг);
					
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
						
					Если ИмяТипаЭД = "XmlAcceptanceCertificate" Тогда
						
						ТекстЗапроса=	
						"ВЫБРАТЬ
						|	ПоступлениеУслугРабот.Ссылка,
						|	ПоступлениеУслугРабот.СуммаДокумента,
						|	ВЫБОР
						|		КОГДА Сопоставленные.Значение ЕСТЬ NULL 
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПоступлениеУслугРабот КАК ПоступлениеУслугРабот
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сопоставленные
						|		ПО ПоступлениеУслугРабот.Ссылка = Сопоставленные.Объект
						|			И (Сопоставленные.Свойство = &Свойство)
						|			И (Сопоставленные.Значение <> """")
						|ГДЕ
						|	ПоступлениеУслугРабот.Организация = &Организация
						|	И ПоступлениеУслугРабот.Контрагент = &Контрагент
						|	И НЕ ПоступлениеУслугРабот.ПометкаУдаления
						|	И ПоступлениеУслугРабот.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеУслугРабот.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеУслугРабот.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
						
					Иначе
						
						ТекстЗапроса=	
						"ВЫБРАТЬ
						|	ПоступлениеТоваровУслуг.Ссылка,
						|	ПоступлениеТоваровУслуг.СуммаДокумента,
						|	ВЫБОР
						|		КОГДА Сопоставленные.Значение ЕСТЬ NULL 
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПоступлениеМЗ КАК ПоступлениеТоваровУслуг
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сопоставленные
						|		ПО ПоступлениеТоваровУслуг.Ссылка = Сопоставленные.Объект
						|			И (Сопоставленные.Свойство = &Свойство)
						|			И (Сопоставленные.Значение <> """")
						|ГДЕ
						|	ПоступлениеТоваровУслуг.Организация = &Организация
						|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
						|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
						|	И ПоступлениеТоваровУслуг.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеТоваровУслуг.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ПоступлениеОС.Ссылка,
						|	ПоступлениеОС.СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ
						|ИЗ
						|	Документ.ПоступлениеОС КАК ПоступлениеОС
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК УжеСопоставленные
						|		ПО ПоступлениеОС.Ссылка = УжеСопоставленные.Объект
						|			И (УжеСопоставленные.Свойство = &Свойство)
						|			И (УжеСопоставленные.Значение <> """")
						|ГДЕ
						|	ПоступлениеОС.Организация = &Организация
						|	И ПоступлениеОС.Контрагент = &Контрагент
						|	И ПоступлениеОС.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеОС.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеОС.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
						
					КонецЕсли;
					
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	ПриходнаяНакладная.Ссылка,
						|	ЕСТЬNULL(ПриходнаяНакладная.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
						|		ПО ПриходнаяНакладная.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	ПриходнаяНакладная.Организация = &Организация
						|	И ПриходнаяНакладная.Контрагент = &Контрагент
						|	И НЕ ПриходнаяНакладная.ПометкаУдаления
						|	И ПриходнаяНакладная.СуммаДокумента = &СуммаДокумента
						|	И ПриходнаяНакладная.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПриходнаяНакладная.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";	
				КонецЕсли;
				
			ИначеЕсли ЭтоЭлектронныйСФ Тогда
				
				Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(ОснованияСФ.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
						|			СчетФактураПолученныйДокументыОснования.ДокументОснование.СуммаДокумента КАК СуммаДокумента
						|		ИЗ
						|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования) КАК ОснованияСФ
						|		ПО СчетФактураПолученный.Ссылка = ОснованияСФ.Ссылка
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.Номер = &НомерВходящегоДокумента
						|	И ОснованияСФ.СуммаДокумента = &СуммаДокумента";
						
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента
						|	И (УжеСопоставленные.Значение ЕСТЬ NULL 
						|			ИЛИ УжеСопоставленные.Значение = """")";
						
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента";
						
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента
						|	И (УжеСопоставленные.Значение ЕСТЬ NULL 
						|			ИЛИ УжеСопоставленные.Значение = """")";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда 
			
			Запрос = Новый Запрос(ТекстЗапроса);
			
			Запрос.УстановитьПараметр("Организация", 				ПараметрыПоиска.Организация);
			Запрос.УстановитьПараметр("Контрагент", 				ПараметрыПоиска.Контрагент);
			Запрос.УстановитьПараметр("ДатаВходящегоДокумента", 	ПараметрыПоиска.Дата);
			Запрос.УстановитьПараметр("НомерВходящегоДокумента", 	ПараметрыПоиска.Номер);
			Запрос.УстановитьПараметр("СуммаДокумента", 			ПараметрыПоиска.Сумма);
			Запрос.УстановитьПараметр("Свойство", 					ИдентификаторДокументаВДиадок);
			Запрос.УстановитьПараметр("base64DocId", 				ПараметрыПоиска.base64DocId);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда 
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Заполняет служебные колонки таблицы сопоставления документов:
	//  * СостояниеОбработки
	//  * КомментарийКДействию
	//  * Вкл
	//
	// Параметры:
	//  ТаблицаДокументов	 - ТаблицаЗначений	 - таблица с данными сопоставления
	//  СтатусыСопоставления - Структура		 - см. инициализацию переменной СтруктураДействийПоДокументу
	//
	&НаСервереБезКонтекста
	Процедура ОбновитьСтатусыСопоставленияДокументов(ТаблицаДокументов)
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл 
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) Тогда 
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтатусыСопоставления_СопоставленРанее();
				СтрокаТаблицы.КомментарийКДействию 	= "Документ уже сопоставлен";
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) 
				Или СтрокаТаблицы.Дубликат // условие из старой логики метода НайтиДокументыДляСопоставленияСервер()
				Тогда 
				
				СтрокаТаблицы.СостояниеОбработки 	= СтатусыСопоставления_ГотовКСопоставлению();
				СтрокаТаблицы.КомментарийКДействию 	= "Для сопосталения документов необходимо нажать кнопку ""Выполнить"".";
				
			Иначе
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтатусыСопоставления_НеНайденУчетныйДокумент();
				СтрокаТаблицы.КомментарийКДействию 	= "При использовании текущего сценария сопоставления, документ в 1С не найден.";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьСопоставлениеДокументов()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Сопоставление документов'"));
		
		СопоставитьВыделенныеДокументыСервер();
		
		Для каждого СтрокаТЧ Из ТаблицаДокументов Цикл
			
			Если СтрокаТЧ.Вкл Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СопоставляемыйДокумент1С) Тогда
					
					ПараметрыОповещения = Новый Структура;
					ПараметрыОповещения.Вставить("ТипСущности"	, "Документ");
					ПараметрыОповещения.Вставить("BoxID"		, СтрокаТЧ.BoxId);
					ПараметрыОповещения.Вставить("DocumentID"	, СтрокаТЧ.DocumentId);
					ПараметрыОповещения.Вставить("Документ1С"	, СтрокаТЧ.СопоставляемыйДокумент1С);
					
					МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
					
					СтрокаТЧ.СостояниеОбработки		 = СтатусыСопоставления_Завершено();
					СтрокаТЧ.КомментарийКДействию	 = "Документ успешно сопоставлен";
					
				КонецЕсли;
				
				СтрокаТЧ.Вкл = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Сопоставление документов завершено'"), УникальныйИдентификатор);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СопоставитьВыделенныеДокументыСервер()
		
		Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
			
			Если СтрокаТаблицы.Вкл И ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) Тогда
				
				МетодСервера(,"УстановитьЗначениеСвойства", СтрокаТаблицы.СопоставляемыйДокумент1С, МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"), , СтрокаТаблицы.base64DocId);
				МетодСервера(,"УстановитьЗначениеСвойства", СтрокаТаблицы.СопоставляемыйДокумент1С, МетодСервера(,"ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок"), , СтрокаТаблицы.BoxId);
				
				СтрокаТаблицы.ПервичныйДокумент = СтрокаТаблицы.СопоставляемыйДокумент1С;
				
				МетодСервера(,"ОбновитьДанныеДокумента", СтрокаТаблицы.СопоставляемыйДокумент1С, СтрокаТаблицы.Дата, СтрокаТаблицы.Номер);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
#КонецОбласти

//} СТАРЫЙ ИНТЕРФЕЙС
////////////////////////////////////////////////////////////////////////////////

#ОБЛАСТЬ ОБЕРТКИ

	// Обертка. Возвращает сценарии, которые поддерживает групповая обработка документов
	&НаКлиенте
	Функция СценарииГрупповойОбработки()
		
		Результат = МетодКлиента("Модуль_Клиент", "СценарииГрупповойОбработки");
		
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Возвращает наименование интеграционной системы
	&НаКлиенте
	Функция Словарь_НаименованиеСистемы()
		
		Результат = Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Устанавливает связь между документом 1С и электронным документом
	//
	// Параметры:
	//	Документ1С		- ДокументСсылка	- сопоставляемый документ 1С
	//	DocumentId		- Строка			- идентификатор электронного документа в рамках организации
	//	BoxID			- Строка			- идентификатор ящика организации в сервисе Диадок
	&НаСервере
	Процедура СопоставитьЭлектронныйДокументДокументу1СНаСервере(Документ1С, ИдентификаторЭД)
		
		МетодСервера(, "Установить_DocumentID_Для_Документ"
			, Документ1С
			, ИдентификаторЭД.СоставнойИдентификатор
			, ИдентификаторЭД.ИдентификаторОрганизации);
		
	КонецПроцедуры
	
	// Обертка. Признак того, что электронный документ является счетом-фактурой
	&НаКлиенте
	Функция ЭтоСчетФактура(ФорматЭД)
		
		Результат = МетодКлиента("Модуль_Клиент", "ЭтоСчетФактура", ФорматЭД);
		
		Возврат Результат;
			
	КонецФункции
	
	// Обертка. Признак того, что электронный документ является формализованной накладной
	&НаКлиенте
	Функция ЭтоФормализованныйТОРГ12(ТипДокумента)
		
		Результат = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйТОРГ12", ТипДокумента);
				
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Признак того, что электронный документ является формализованным актом
	&НаКлиенте
	Функция ЭтоФормализованныйАктОВыполненииРабот(ТипДокумента)
		
		Результат = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйАктОВыполненииРабот", ТипДокумента); 
				
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Признак того, что документ 1С проведен
	&НаКлиенте
	Функция ДокументПроведен(ПроверяемыйДокумент1С)
		
		Результат = МетодКлиента("Модуль_Клиент", "ДокументПроведен", ПроверяемыйДокумент1С);
		
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Возвращает документ из сервиса Диадок
	&НаКлиенте
	Функция ПолучитьДокументДиадок(BoxID, DocumentID)
		
		Результат = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьДокументДиадок", BoxID, DocumentID);
		
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Возвращает коллекцию идентификаторов родительских документов
	&НаКлиенте
	Функция InitialDocumentIds(BoxID, DocumentID) 
		
		Результат = МетодКлиента("Модуль_РаботаССерверомДиадок", "InitialDocumentIds", BoxID, DocumentID);
		
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Признак того, что документ является актом сверки взаиморасчетов,
	// отправленным из сервиса Контур.Взаиморасчеты
	&НаКлиенте
	Функция ЭтоАктСверкиИзСервисаВзаиморасчеты(ТипДокумента, ПользовательскийИдентификатор)

		Результат = МетодКлиента(	"Модуль_Клиент", 
									"ЭтоАктСверкиИзСервисаВзаиморасчеты", 
									ТипДокумента, 
									ПользовательскийИдентификатор	);

		Возврат Результат;

	КонецФункции
	
	// Обертка. Вызывает сообщение пользователю 
	&НаКлиенте
	Процедура СообщитьПользователю(ТекстСообщения)
		
		МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения); 
		
	КонецПроцедуры
	
	// Обертка. Отправляет метрики при групповом создании документов поступления
	&НаКлиенте
	Процедура ДобавитьСтатистику_СоздатьДокументыПоступления(ИдентификаторПравила)
		
		ВидОперации = "";
		
		Для Каждого ЭлементСписка Из ПравилаОбработкиДОП Цикл
			
			ПравилоОбработки = ЭлементСписка.Значение;
			
			Если ПравилоОбработки.Идентификатор = ИдентификаторПравила Тогда
				// по аналогии с единичным созданием
				ВидОперации = ПравилоОбработки.Представление;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		НазваниеДействия = "Создать документ поступление";
		
		Для Каждого СтрокаТаблицы Из ТаблицаСоздатьДокументыПоступления Цикл
		
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			ФорматЭД 			= СтрокаТаблицы.ФорматОтправки;
			ИдентификаторыЭД 	= СтрокаТаблицы.ЭлектронныйДокумент.Идентификатор;
			BoxGuid 			= МетодКлиента("Модуль_Клиент", "ПолучитьBoxGuidПоId", ИдентификаторыЭД.ИдентификаторОрганизации);
			
			Переменные = Новый Структура;
			
			Переменные.Вставить("BoxID"					, BoxGuid);
			Переменные.Вставить("DocumentID"			, ИдентификаторыЭД.СоставнойИдентификатор);
			Переменные.Вставить("LetterID"				, ИдентификаторыЭД.ИдентификаторСообщения);
			Переменные.Вставить("ВидОперации"			, ВидОперации);
			Переменные.Вставить("ВерсияФормата"			, ФорматЭД.ВерсияФормата);
			Переменные.Вставить("ИмяТипа"				, ФорматЭД.ИмяТипа);
			Переменные.Вставить("ФункцияДокумента"		, ФорматЭД.ФункцияДокумента);
			Переменные.Вставить("СуммаВключаетНДС"		, СуммаВключаетНДС);
			Переменные.Вставить("СоздатьПоступлениеПоСФ", СоздаватьПоступлениеПоДаннымСФ);
		
			МетодКлиента("Модуль_Клиент", "Метрика_ДобавитьСтатистику_ГрупповоеСозданиеДокументов", НазваниеДействия, Переменные);
			
		КонецЦикла;
						
	КонецПроцедуры
	
	// Обертка. Отправляет метрики при групповом создании СФ 
	&НаКлиенте
	Процедура ДобавитьСтатистику_СоздатьСчетаФактуры(ИдентификаторПравила)
		
		ВидОперации = "";
		
		Для Каждого ЭлементСписка Из ПравилаОбработкиСЧФ Цикл
			
			ПравилоОбработки = ЭлементСписка.Значение;
			
			Если ПравилоОбработки.Идентификатор = ИдентификаторПравила Тогда
				// по аналогии с единичным созданием
				ВидОперации = ПравилоОбработки.Представление;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		НазваниеДействия = "Создать СФ";
		
		Для Каждого СтрокаТаблицы Из ТаблицаСоздатьСчетФактуры Цикл
		
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			ФорматЭД 			= СтрокаТаблицы.ФорматОтправки;
			ИдентификаторыЭД 	= СтрокаТаблицы.ЭлектронныйДокумент.Идентификатор;
			BoxGuid 			= МетодКлиента("Модуль_Клиент", "ПолучитьBoxGuidПоId", ИдентификаторыЭД.ИдентификаторОрганизации);
			
			Переменные = Новый Структура;
			
			Переменные.Вставить("BoxID"				, BoxGuid);
			Переменные.Вставить("DocumentID"		, ИдентификаторыЭД.СоставнойИдентификатор);
			Переменные.Вставить("LetterID"			, ИдентификаторыЭД.ИдентификаторСообщения);
			Переменные.Вставить("ВидОперации"		, ВидОперации);
			Переменные.Вставить("ВерсияФормата"		, ФорматЭД.ВерсияФормата);
			Переменные.Вставить("ИмяТипа"			, ФорматЭД.ИмяТипа);
			Переменные.Вставить("ФункцияДокумента"	, ФорматЭД.ФункцияДокумента);
		
			МетодКлиента("Модуль_Клиент", "Метрика_ДобавитьСтатистику_ГрупповоеСозданиеДокументов", НазваниеДействия, Переменные);
			
		КонецЦикла;
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиСоздатьДокументыПоступления()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма групповая обработка";
		НазваниеКатегории 	= Категории.ГрупповоеСоздание;
		НазваниеДействия 	= "Создать документ поступление";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_НажатиеКнопки",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиСоздатьСчетФактуру()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма групповая обработка";
		НазваниеКатегории 	= Категории.ГрупповоеСоздание;
		НазваниеДействия 	= "Создать СФ";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_НажатиеКнопки",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры
	
#КонецОбласти

СписокНайденных = Новый Массив();
МаксимальноеКоличествоЗаданий = 10;
