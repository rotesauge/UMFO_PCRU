
#Область ОписаниеПеременных

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

&НаКлиенте
Перем ДанныеСертификата;
&НаКлиенте
Перем ДанныеПодписанта;
&НаКлиенте
Перем ПодписантИП;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	УстановитьОбязательныеСвойстваЭлементов();
	
	Параметры.Свойство("BoxId", BoxId);
	Параметры.Свойство("ФорматЭД", ФорматЭД);
	Параметры.Свойство("Исходящие", Исходящие);
	Параметры.Свойство("ДанныеПодписанта" , ДанныеПодписантаСервер);
	
	Форма_УстановитьЗаголовок();
	
	ЗаполнитьСписокВыбора_ОбластьПолномочий();
	ЗаполнитьСписокВыбора_СтатусРаботника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
	
	НаименованиеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", BoxId, "ДанныеОрганизации").Name;
	
	ПолучитьДанныеСертификатаИПодписанта();
	
	ЗаполнитьФормуДаннымиПодписанта();
	ЗаполнитьСтрокуСертификата();
	ЗаполнитьФормуДаннымиПоУмолчанию();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбластьПолномочийПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРаботникаПриИзменении(Элемент)
	
	ЗаполнитьФормуДаннымиПоУмолчанию();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийОрганизацииПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийСотрудникаПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	НовыеЗначения = НовыеДанныеПодписанта();
	
	МетодКлиента("Модуль_РаботаССерверомДиадок", "ЗаписатьДанныеПодписанта"
		, НовыеЗначения
		, BoxId
		, БазовыйФормат
		, Исходящие);
	
	ОбновитьДанныеПодписанта(НовыеЗначения);
	
	Закрыть(ДанныеПодписанта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвидетельствоОРегистрацииИП(Команда)
	
	Организация = МетодСервераБезКонтекста(,"BoxID_2_Организация", BoxId);
	
	СвидетельствоОРегистрацииИП = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП", Организация);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныеПеречисления

&НаКлиенте
Функция БазовыеФорматыНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыКонтентаНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция БазовыеФорматыНаСервере()
	
	Результат = МетодСервера(, "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипыКонтентаНаСервере()
	
	Результат = МетодСервера(, "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УправлениеФормой()
	
	ПоказатьДолжностьИлиСвидетельствоОРегистрацииИП();
	ОснованияПолномочийСотрудника_УстановитьЗаголовок();
	ОснованияПолномочийОрганизации_УстановитьВидимость();
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДолжностьИлиСвидетельствоОРегистрацииИП()
	
	ОбновитьСвойствоЭлементаФормы(Элементы.Должность, "Видимость", НЕ ПодписантИП);
	ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаСвидетельствоОРегистрацииИП, "Видимость", ПодписантИП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийСотрудника_УстановитьЗаголовок()
	
	НовыйЗаголовок = Элементы.ОснованияПолномочийСотрудника.Заголовок;
	
	Если СтатусРаботника = OtherOrganizationEmployee() Тогда
		
		НовыйЗаголовок = "Основания полномочий
						 |сотрудника";
		
	Иначе
		НовыйЗаголовок = "Основания";
	КонецЕсли; 
	
	ОбновитьСвойствоЭлементаФормы(Элементы.ОснованияПолномочийСотрудника, "Заголовок", НовыйЗаголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийОрганизации_УстановитьВидимость()
	
	НоваяВидимость = СтатусРаботника = OtherOrganizationEmployee();
	ОбновитьСвойствоЭлементаФормы(Элементы.ОснованияПолномочийОрганизации, "Видимость", НоваяВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСохранить_УстановитьДоступность()
	
	Элементы.Сохранить.Доступность =
	
	ЗначениеЗаполнено(ОбластьПолномочий)
	И ЗначениеЗаполнено(СтатусРаботника)
	И ЗначениеЗаполнено(ОснованияПолномочийСотрудника)
	И (ЗначениеЗаполнено(Должность) ИЛИ ПодписантИП)
	И (ЗначениеЗаполнено(ОснованияПолномочийОрганизации)
		ИЛИ СтатусРаботника <> OtherOrganizationEmployee())
	
КонецПроцедуры

&НаСервере
Процедура Форма_УстановитьЗаголовок()
	
	БазовыеФорматы = БазовыеФорматыНаСервере();
	
	Если Исходящие Тогда
		Заголовок = "Полномочия для подписания исходящих ";
	Иначе
		Заголовок = "Полномочия для подписания входящих ";
	КонецЕсли; 
	
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если БазовыйФормат = БазовыеФорматы.utd820 Или БазовыйФормат = БазовыеФорматы.utd Тогда
		
		Заголовок = Заголовок + "УПД";
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736 Или БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		Заголовок = Заголовок + "УКД";
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
		
		Заголовок = Заголовок + "накладных";
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		Заголовок = Заголовок + "актов";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуСертификата()
	
	Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
		
		Элементы.СтрокаСертификат.Заголовок =
		ДанныеСертификата.OrganizationName + "
		|" + ДанныеСертификата.Name + "
		|" + "ИНН: " + ДанныеСертификата.INN + ", Годен до " + Формат(ДанныеСертификата.EndDate, "ДФ='dd MMMM yyyy'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоСпискуЗначений(Список, Источник)
	
	МетодСервера(, "ЗаполнитьСписокВыбораПоСпискуЗначений", Список, Источник);
	
КонецПроцедуры

#Область ЗаполнениеСпискаОбластейПолномочийПодписанта

&НаСервере
Процедура ЗаполнитьСписокВыбора_ОбластьПолномочий()
	
	СписокВыбора = Элементы.ОбластьПолномочий.СписокВыбора;
	
	ОбластиПолномочий = ОбластиПолномочийПодписанта(ФорматЭД.БазовыйФормат, Исходящие);
	
	ЗаполнитьСписокВыбораПоСпискуЗначений(СписокВыбора, ОбластиПолномочий);
	
КонецПроцедуры

&НаСервере
Функция ОбластиПолномочийПодписанта(БазовыйФормат, ДляИсходящих)
	
	БазовыеФорматы = БазовыеФорматыНаСервере();
	
	Если БазовыйФормат = БазовыеФорматы.utd820 Тогда
		
		Результат = ПодписантОблПолн820(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd Тогда
		
		Результат = ПодписантОблПолн155(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736 Тогда
		
		Результат = ПодписантОблПолн736(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		Результат = ПодписантОблПолн189(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
		
		Результат = ПодписантОблПолн551(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		Результат = ПодписантОблПолн552(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.torg2 Тогда
		
		Результат = ПодписантОблПолн423(ДляИсходящих);
		
	Иначе
		
		ТекстОшибки = СтрШаблон("Ошибка заполнения списка областей полномочий (БазовыйФормат = %1)", БазовыйФормат);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ОбластиПолномочий820

// Области полномочий подписанта (приказ 820@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантОблПолн820(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = ОблПолн820ИнформацияПродавца();
	Иначе
		Результат = ОблПолн820ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации продавца (приказ 820@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн820ИнформацияПродавца()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(InvoiceSigner()
		, "0 - лицо, ответственное за подписание счетов-фактур");
	
	Результат.Добавить(PersonMadeOperation()
		, "1 - лицо, совершившее сделку, операцию");
	
	Результат.Добавить(MadeAndSignOperation()
		, "2 - лицо, совершившее сделку, операцию и ответственное за ее оформление");
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление свершившегося события");
	
	Результат.Добавить(MadeOperationAndSignedInvoice()
		, "4 - лицо, совершившее сделку, операцию и ответственное за подписание счетов-фактур");
	
	Результат.Добавить(MadeAndResponsibleForOperationAndSignedInvoice()
		, "5 - лицо, совершившее сделку, операцию и ответственное за ее оформление и за подписание счетов-фактур");
	
	Результат.Добавить(ResponsibleForOperationAndSignerForInvoice()
		, "6 - лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур");
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации покупателя (приказ 820@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн820ИнформацияПокупателя()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(PersonMadeOperation()
		, "1 - лицо, совершившее сделку, операцию");
	
	Результат.Добавить(MadeAndSignOperation()
		, "2 - лицо, совершившее сделку, операцию и ответственное за ее оформление");
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление свершившегося события");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбластиПолномочий155

// Области полномочий подписанта (приказ 155@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантОблПолн155(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = ОблПолн155ИнформацияПродавца();
	Иначе
		Результат = ОблПолн155ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации продавца (приказ 155@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн155ИнформацияПродавца()
	
	Результат = ОблПолн820ИнформацияПродавца();
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации покупателя (приказ 155@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн155ИнформацияПокупателя()
	
	Результат = ОблПолн820ИнформацияПокупателя();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбластиПолномочий736

// Области полномочий подписанта (приказ 736@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантОблПолн736(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = ОблПолн736ИнформацияПродавца();
	Иначе
		Результат = ОблПолн736ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации продавца (приказ 736@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн736ИнформацияПродавца()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(InvoiceSigner()
		, "0 - лицо, ответственное за подписание счетов-фактур");
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление свершившегося события");
	
	Результат.Добавить(ResponsibleForOperationAndSignerForInvoice()
		, "6 - лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур");
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации покупателя (приказ 736@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн736ИнформацияПокупателя()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(InvoiceSigner()
		, "0 - лицо, ответственное за подписание счетов-фактур");
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление свершившегося события");
	
	Результат.Добавить(ResponsibleForOperationAndSignerForInvoice()
		, "6 - лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур");
	
	Результат.Добавить(PersonOtherPower()
		, "29 - лицо с иными полномочиями");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбластиПолномочий189

// Области полномочий подписанта (приказ 189@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантОблПолн189(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = ОблПолн189ИнформацияПродавца();
	Иначе
		Результат = ОблПолн189ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации продавца (приказ 189@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн189ИнформацияПродавца()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(InvoiceSigner()
		, "0 - лицо, ответственное за подписание счетов-фактур");
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление свершившегося события");
	
	Результат.Добавить(ResponsibleForOperationAndSignerForInvoice()
		, "6 - лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур");
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации покупателя (приказ 189@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн189ИнформацияПокупателя()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление свершившегося события");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбластиПолномочий551

// Области полномочий подписанта (приказ 551@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантОблПолн551(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = ОблПолн551ИнформацияПродавца();
	Иначе
		Результат = ОблПолн551ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации продавца (приказ 551@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн551ИнформацияПродавца()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(PersonMadeOperation()
		, "1 - лицо, совершившее сделку, операцию");
	
	Результат.Добавить(MadeAndSignOperation()
		, "2 - лицо, совершившее сделку, операцию и ответственное за ее оформление");
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление свершившегося события");
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации покупателя (приказ 551@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн551ИнформацияПокупателя()
	
	Результат = ОблПолн551ИнформацияПродавца();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбластиПолномочий552

// Области полномочий подписанта (приказ 552@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантОблПолн552(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = ОблПолн552ИнформацияПродавца();
	Иначе
		Результат = ОблПолн552ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации продавца (приказ 552@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн552ИнформацияПродавца()
	
	Результат = ОблПолн551ИнформацияПродавца();
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации покупателя (приказ 552@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн552ИнформацияПокупателя()
	
	Результат = ОблПолн551ИнформацияПродавца();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбластиПолномочий423

// Области полномочий подписанта (приказ 423@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантОблПолн423(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = ОблПолн423ИнформацияПокупателя();
	Иначе
		Результат = ОблПолн423ДопСведения();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта информации покупателя (приказ 423@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн423ИнформацияПокупателя()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(PersonMadeOperation()
		, "1 - лицо, принявшее ценности");
	
	Результат.Добавить(MadeAndSignOperation()
		, "2 - лицо, принявшее ценности и ответственное за оформление события (операции)");
	
	Результат.Добавить(PersonDocumentedOperation()
		, "3 - лицо, ответственное за оформление события (операции)");
	
	Результат.Добавить(ChairmanCommission()
		, "7 - председатель комиссии");
	
	Результат.Добавить(MemberCommission()
		, "8 - член комиссии");
	
	Возврат Результат;
	
КонецФункции

// Области полномочий подписанта дополнительных сведений по результатам приемки (приказ 423@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОблПолн423ДопСведения()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(PersonApprovedDocument()
		, "21 - лицо, в полномочия которого входит утверждение документа, оформляющего событие (факт хозяйственной жизни)");
	
	Результат.Добавить(PersonConfirmedDocument()
		, "22 - лицо, в полномочия которого входит подтверждение оформленного события (факта хозяйственной жизни)");
	
	Результат.Добавить(PersonAgreedOnDocument()
		, "23 - лицо, в полномочия которого входит согласование документа, оформляющего событие (факт хозяйственной жизни)");
	
	Результат.Добавить(PersonOtherPower()
		, "29 - лицо с иными полномочиями");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область SignerPowers

&НаКлиентеНаСервереБезКонтекста
Функция InvoiceSigner()
	Возврат "InvoiceSigner";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция PersonMadeOperation()
	Возврат "PersonMadeOperation";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция MadeAndSignOperation()
	Возврат "MadeAndSignOperation";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция PersonDocumentedOperation()
	Возврат "PersonDocumentedOperation";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция MadeOperationAndSignedInvoice()
	Возврат "MadeOperationAndSignedInvoice";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция MadeAndResponsibleForOperationAndSignedInvoice()
	Возврат "MadeAndResponsibleForOperationAndSignedInvoice";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ResponsibleForOperationAndSignerForInvoice()
	Возврат "ResponsibleForOperationAndSignerForInvoice";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ChairmanCommission()
	Возврат "ChairmanCommission";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция MemberCommission()
	Возврат "MemberCommission";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция PersonApprovedDocument()
	Возврат "PersonApprovedDocument";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция PersonConfirmedDocument()
	Возврат "PersonConfirmedDocument";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция PersonAgreedOnDocument()
	Возврат "PersonAgreedOnDocument";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция PersonOtherPower()
	Возврат "PersonOtherPower";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеСпискаСтатусовПодписанта

&НаСервере
Функция СтатусыПодписанта(БазовыйФормат, ДляИсходящих)
	
	БазовыеФорматы = БазовыеФорматыНаСервере();
	
	Если БазовыйФормат = БазовыеФорматы.utd820 Тогда
		
		Результат = ПодписантСтатус820(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd Тогда
		
		Результат = ПодписантСтатус155(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736 Тогда
		
		Результат = ПодписантСтатус736(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		Результат = ПодписантСтатус189(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
		
		Результат = ПодписантСтатус551(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		Результат = ПодписантСтатус552(ДляИсходящих);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.torg2 Тогда
		
		Результат = ПодписантСтатус423(ДляИсходящих);
		
	Иначе
		
		ТекстОшибки = СтрШаблон("Ошибка заполнения списка областей полномочий (БазовыйФормат = %1)", БазовыйФормат);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбора_СтатусРаботника()
	
	СписокВыбора = Элементы.СтатусРаботника.СписокВыбора;
	
	ОбластиПолномочий = СтатусыПодписанта(ФорматЭД.БазовыйФормат, Исходящие);
	
	ЗаполнитьСписокВыбораПоСпискуЗначений(СписокВыбора, ОбластиПолномочий);
	
КонецПроцедуры

#Область СтатусыПодписанта820

// Статусы подписанта (приказ 820@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантСтатус820(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = Статус820ИнформацияПродавца();
	Иначе
		Результат = Статус820ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации продавца (приказ 820@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус820ИнформацияПродавца()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(SellerEmployee()
		, "1 - работник организации продавца товаров (работ, услуг, имущественных прав)");
	
	Результат.Добавить(InformationCreatorEmployee()
		, "2 - работник организации - составителя файла обмена информации продавца, если составитель файла обмена информации не является продавцом");
	
	Результат.Добавить(OtherOrganizationEmployee()
		, "3 - работник иной уполномоченной организации");
	
	Результат.Добавить(AuthorizedPerson()
		, "4 - уполномоченное физическое лицо (в том числе индивидуальный предприниматель)");
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации покупателя (приказ 820@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус820ИнформацияПокупателя()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(OtherOrganizationEmployee()
		, "3 - работник иной уполномоченной организации");
	
	Результат.Добавить(AuthorizedPerson()
		, "4 - уполномоченное физическое лицо, в том числе индивидуальный предприниматель");
	
	Результат.Добавить(BuyerEmployee()
		, "5 - работник организации - покупателя");
	
	Результат.Добавить(InformationCreatorBuyerEmployee()
		, "6 - работник организации - составителя файла обмена информации покупателя, если составитель файла обмена информации покупателя не является покупателем");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусыПодписанта155

// Статусы подписанта (приказ 155@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантСтатус155(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = Статус155ИнформацияПродавца();
	Иначе
		Результат = Статус155ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации продавца (приказ 155@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус155ИнформацияПродавца()
	
	Результат = Статус820ИнформацияПродавца();
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации покупателя (приказ 155@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус155ИнформацияПокупателя()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(SellerEmployee()
		, "1 - работник организации покупателя");
	
	Результат.Добавить(InformationCreatorEmployee()
		, "2 - работник организации - составителя информации покупателя");
	
	Результат.Добавить(OtherOrganizationEmployee()
		, "3 - работник иной уполномоченной организации");
	
	Результат.Добавить(AuthorizedPerson()
		, "4 - уполномоченное физическое лицо, в том числе индивидуальный предприниматель");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусыПодписанта736

// Статусы подписанта (приказ 736@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантСтатус736(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = Статус736ИнформацияПродавца();
	Иначе
		Результат = Статус736ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации продавца (приказ 736@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус736ИнформацияПродавца()
	
	Результат = Статус820ИнформацияПродавца();
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации покупателя (приказ 736@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус736ИнформацияПокупателя()
	
	Результат = Статус820ИнформацияПокупателя();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусыПодписанта189

// Статусы подписанта (приказ 189@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантСтатус189(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = Статус189ИнформацияПродавца();
	Иначе
		Результат = Статус189ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации продавца (приказ 189@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус189ИнформацияПродавца()
	
	Результат = Статус155ИнформацияПродавца();
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации покупателя (приказ 189@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус189ИнформацияПокупателя()
	
	Результат = Статус155ИнформацияПокупателя();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусыПодписанта551

// Статусы подписанта (приказ 551@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантСтатус551(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = Статус551ИнформацияПродавца();
	Иначе
		Результат = Статус551ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации продавца (приказ 551@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус551ИнформацияПродавца()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(SellerEmployee()
		, "1 - Работник организации - продавца");
	
	Результат.Добавить(InformationCreatorEmployee()
		, "2 - Работник организации - составителя информации продавца");
	
	Результат.Добавить(OtherOrganizationEmployee()
		, "3 - Работник иной уполномоченной организации");
	
	Результат.Добавить(AuthorizedPerson()
		, "4 - Уполномоченное физическое лицо (в том числе индивидуальный предприниматель)");
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации покупателя (приказ 551@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус551ИнформацияПокупателя()
	
	Результат = Статус155ИнформацияПокупателя();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусыПодписанта552

// Статусы подписанта (приказ 552@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантСтатус552(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = Статус552ИнформацияПродавца();
	Иначе
		Результат = Статус552ИнформацияПокупателя();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации продавца (приказ 552@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус552ИнформацияПродавца()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(SellerEmployee()
		, "1 - Работник организации - исполнителя работ (услуг)");
	
	Результат.Добавить(InformationCreatorEmployee()
		, "2 - Работник организации - составителя информации исполнителя");
	
	Результат.Добавить(OtherOrganizationEmployee()
		, "3 - Работник иной уполномоченной организации");
	
	Результат.Добавить(AuthorizedPerson()
		, "4 - Уполномоченное физическое лицо (в том числе индивидуальный предприниматель)");
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации покупателя (приказ 552@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус552ИнформацияПокупателя()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(SellerEmployee()
		, "1 - Работник организации - заказчика работ (услуг)");
	
	Результат.Добавить(InformationCreatorEmployee()
		, "2 - Работник организации - составителя информации заказчика");
	
	Результат.Добавить(OtherOrganizationEmployee()
		, "3 - Работник иной уполномоченной организации");
	
	Результат.Добавить(AuthorizedPerson()
		, "4 - Уполномоченное физическое лицо (в том числе индивидуальный предприниматель)");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтатусыПодписанта423

// Статусы подписанта (приказ 423@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодписантСтатус423(ДляИсходящих)
	
	Если ДляИсходящих Тогда
		Результат = Статус423ИнформацияПокупателя();
	Иначе
		Результат = Статус423ДопСведения();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Статусы подписанта информации покупателя (приказ 423@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус423ИнформацияПокупателя()
	
	Результат = Статус820ИнформацияПокупателя();
	Возврат Результат;
	
КонецФункции

// Статусы подписанта дополнительных сведений по результатам приемки (приказ 423@)
// 
// Возвращаемое значение:
//  СписокЗначений.
//
&НаКлиентеНаСервереБезКонтекста
Функция Статус423ДопСведения()
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(SellerEmployee()
		, "1 - работник организации - продавца");
	
	Результат.Добавить(OtherOrganizationEmployee()
		, "3 - работник иной уполномоченной организации");
	
	Результат.Добавить(AuthorizedPerson()
		, "4 - уполномоченное физическое лицо (в том числе индивидуальный предприниматель)");
	
	Результат.Добавить(BuyerEmployee()
		, "5 - работник организации - покупателя");
	
	Результат.Добавить(InformationCreatorBuyerEmployee()
		, "6 - работник организации - составителя файла обмена информации покупателя");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область SignerStatus

&НаКлиентеНаСервереБезКонтекста
Функция SellerEmployee()
	Возврат "SellerEmployee";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция InformationCreatorEmployee()
	Возврат "InformationCreatorEmployee";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция OtherOrganizationEmployee()
	Возврат "OtherOrganizationEmployee";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция AuthorizedPerson()
	Возврат "AuthorizedPerson";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция BuyerEmployee()
	Возврат "BuyerEmployee";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция InformationCreatorBuyerEmployee()
	Возврат "InformationCreatorBuyerEmployee";
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ПолучитьДанныеСертификатаИПодписанта()
	
	ДанныеСертификата = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", BoxId, "ДанныеОрганизации").Certificate;
	
	Если ЗначениеЗаполнено(ДанныеПодписантаСервер) Тогда
		
		ДанныеПодписанта = ДанныеПодписантаСервер;
		ДанныеПодписантаСервер = Неопределено;
		
	Иначе
		
		БазовыеФорматы = БазовыеФорматыНаКлиенте();
		БазовыйФормат = ФорматЭД.БазовыйФормат;
		
		ДанныеПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта"
			, BoxId
			, БазовыйФормат
			, Исходящие);
		
		ДопФорматы = Новый Массив;
		ДопФорматы.Добавить(БазовыеФорматы.tovtorg);
		ДопФорматы.Добавить(БазовыеФорматы.rezru);
		
		// ДанныеПодписанта для TovTorg и Act552 пересекаются с UniversalTransferDocument, пробуем их получить.
		Если НЕ ЗначениеЗаполнено(ДанныеПодписанта) И ДопФорматы.Найти(БазовыйФормат) <> Неопределено Тогда
			ДанныеПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта"
				, BoxId
				, БазовыеФорматы.utd
				, Исходящие);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписантИП = МетодКлиента("Модуль_Клиент", "ПодписантИП", ДанныеСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФормуДаннымиПодписанта()
	
	Если Не ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПолномочий = ДанныеПодписанта.Powers;
	СтатусРаботника	  = ДанныеПодписанта.Status;
	ИныеСведения	  = ДанныеПодписанта.SignerInfo;
	ОснованияПолномочийСотрудника = ДанныеПодписанта.PowersBase;
	
	Если ДанныеПодписанта.Status = OtherOrganizationEmployee() Тогда
		ОснованияПолномочийОрганизации = ДанныеПодписанта.OrganizationPowersBase;
	КонецЕсли;
	
	Если ПодписантИП Тогда
		СвидетельствоОРегистрацииИП	= ДанныеПодписанта.RegistrationCertificate;
	Иначе
		Должность = ДанныеПодписанта.JobTitle;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФормуДаннымиПоУмолчанию()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если НЕ ЗначениеЗаполнено(ОбластьПолномочий) И БазовыйФормат = БазовыеФорматы.ucd Тогда
		ОбластьПолномочий = PersonDocumentedOperation();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОснованияПолномочийСотрудника) Тогда
		ОснованияПолномочийСотрудника = "Должностные обязанности";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПодписанта(НовыеЗначения)
	
	Если НЕ ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		
		БазовыйФормат = ФорматЭД.БазовыйФормат;
		ДанныеПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта"
			, BoxId
			, БазовыйФормат
			, Исходящие);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ДанныеПодписанта, НовыеЗначения);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция НовыеДанныеПодписанта()
	
	Результат = МетодКлиента("Модуль_Клиент", "Новый_ExtendedSignerDetailsToPost");
	
	Результат.Powers	 = ОбластьПолномочий;
	Результат.Status	 = СтатусРаботника;
	Результат.SignerInfo = ИныеСведения;
	Результат.PowersBase = ОснованияПолномочийСотрудника;
	
	Если СтатусРаботника = OtherOrganizationEmployee() Тогда
		Результат.OrganizationPowersBase = ОснованияПолномочийОрганизации;
	КонецЕсли;
	
	Если ПодписантИП Тогда
		Результат.JobTitle   = "";
		Результат.RegistrationCertificate = СвидетельствоОРегистрацииИП;
	Иначе
		Результат.JobTitle   = Должность;
		Результат.RegistrationCertificate = "";
	КонецЕсли;
	
	Результат.SignerType = ДанныеСертификата.OwnerType;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьОбязательныеСвойстваЭлементов()
	
	// Устанавливаем свойства программно, на случай если обработку сохранят платформой младше 8.3.7
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	ЗаполнитьЗначенияСвойств(Элементы.СтрокаСертификат, СвойствоАвтоМаксимальнаяШирина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСвойствоЭлементаФормы(Элемент, СвойствоЭлемента, ЗначениеСвойства)
	
	Если Элемент[СвойствоЭлемента] <> ЗначениеСвойства Тогда
		Элемент[СвойствоЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти