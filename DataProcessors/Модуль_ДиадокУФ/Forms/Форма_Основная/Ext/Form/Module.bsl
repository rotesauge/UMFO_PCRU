#Если ВебКлиент Тогда

ВызватьИсключение НСтр("ru = 'Недопустимый режим работы (Веб-клиент).'");

#Иначе

#Область ПЕРЕМЕННЫЕ_МОДУЛЯ
	
	&НаКлиенте
	Перем СтруктураИнтервалов Экспорт;
	
	&НаКлиенте
	Перем ДатаПоследнегоЗаполненияСписокВыбораКонтрагентID;
	
	&НаКлиенте
	Перем АктуальнаяВерсияМодуля;
	
	&НаКлиенте
	Перем ЕстьНастройкаОтправкиВУстаревшемФормате;
	
#КонецОбласти

#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем Кеш_ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
	Если Платформа.ВладелецФормы = Неопределено Тогда
		Платформа.ВладелецФормы = ЭтаФорма;
	КонецЕсли;
		
	Возврат Платформа.МетодКлиента(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Результат = Кеш_ОбработкаОбъект;
	
	Если Результат = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.ПараметрыКлиентСервер) Тогда
			
			СтруктураОбработки = ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			
			Если СтруктураОбработки <> Неопределено Тогда
				Результат = СтруктураОбработки.ОбработкаОбъект;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			
			Результат = РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", Результат), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			Результат.ПараметрыКлиентСервер = Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
		Кеш_ОбработкаОбъект = Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВызовИзРасширения"				, Параметры.Свойство("ВызовИзРасширения"));
	ДополнительныеПараметры.Вставить("КаталогМодулейСервера"			, КаталогМодулейСервера);
	ДополнительныеПараметры.Вставить("РежимОтладкиСервера"	 			, РежимОтладкиСервера);
	ДополнительныеПараметры.Вставить("ОтправкаФайловСтарыйИнтерфейс"	, ОтправкаФайловСтарыйИнтерфейс);
	ДополнительныеПараметры.Вставить("ИспользоватьФормуВводаНакладной"	, ИспользоватьФормуВводаНакладной);
	
	Объект.ПараметрыКлиентСервер = ОбработкаОбъект().ИнициализироватьОбщийКонтекстКлиентСервер(УникальныйИдентификатор, ДополнительныеПараметры);
	
	// ПараметрыКлиент - это одноразовый транспорт для передачи значений в Платформа.ПараметрыКлиент.
	Объект.ПараметрыКлиентСервер.Вставить("ПараметрыКлиент", Новый Структура);
	Объект.ПараметрыКлиентСервер.ПараметрыКлиент.Вставить("ПутьКФормам"			, ОбработкаОбъект().Метаданные().ПолноеИмя() + ".Форма.");
	Объект.ПараметрыКлиентСервер.ПараметрыКлиент.Вставить("СловарьWL"			, ОбработкаОбъект().ПолучитьСловарь());
	Объект.ПараметрыКлиентСервер.ПараметрыКлиент.Вставить("УстановкаРасширения"	, ОбработкаОбъект().ПроверитьНеобходимостьУстановкиРасширения());
	
	// Изменять ПараметрыКлиентСервер можно ТОЛЬКО на клиенте!
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПлатформу() Экспорт
	
	Платформа= ПолучитьФорму(Объект.ПараметрыКлиентСервер.ПараметрыКлиент.ПутьКФормам+"Платформа",,ЭтаФорма, Истина);
	Платформа.ИнициализироватьПлатформу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
		
		Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма, Истина, ЗавершениеРаботы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//{ УПРАВЛЕНИЕ ВЕРСИЯМИ

&НаКлиенте
Процедура ПроверитьЧтоМодульИнтеграцииОпределен(Отказ)
	
	Если ЗначениеЗаполнено(Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекстОшибки = СтрШаблон(НСтр(
	"ru = 'Текущая конфигурация программы %1 не поддерживается!
	|В настройках можно принудительно выбрать модуль интеграции'")
	, Платформа.ПараметрыКлиент.СинонимКонфигурации);
	
	ПараметрыФормы = НовыеПараметрыФормыВыводаОшибки();
	ПараметрыФормы.ОписаниеОшибки = НСтр("ru = 'Модуль интеграции не определен!'");
	ПараметрыФормы.Подробности = ТекстОшибки;
	
	ОткрытьФормуВыводаОшибки(ПараметрыФормы, Ложь, "ПослеПроверкиМодуляИнтеграции");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиМодуляИнтеграции(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ПоказатьВыборМаркераКонфигурации();
	
КонецПроцедуры

	&НаКлиенте
	Процедура ПроверитьНаличиеМодуляИнтеграции(Отказ)
		
		Если Не ЗначениеЗаполнено(Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции) Тогда
			
			Отказ = Истина;
			
			ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Текущая конфигурация %1 не поддерживается!
			|Обработка будет закрыта.
			|Список поддерживаемых конфигураций
			|%2'")
			, Платформа.ПараметрыКлиент.СинонимКонфигурации
			, ПолучитьТекстПоддерживаемыхКонфигураций());
			
			ПараметрыФормы = НовыеПараметрыФормыВыводаОшибки();
			ПараметрыФормы.ОписаниеОшибки = НСтр("ru = 'Ошибка поддержки конфигурации'");
			ПараметрыФормы.Подробности = ТекстОшибки;
			
			ОткрытьФормуВыводаОшибки(ПараметрыФормы, Истина);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьТекстПоддерживаемыхКонфигураций() Экспорт
		
		Возврат 
			"    - Бухгалтерия предприятия, ред 3.0
			|    - Бухгалтерия государственного учреждения, ред 2.0
			|    - Управление торговлей, ред 11.4
			|    - Комплексная автоматизация, ред 2.4
			|    - Управление предприятием (ERP), ред 2.4
			|    - Управление небольшой фирмой, ред 1.6";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьТекущуюВерсиюПлатформы() Экспорт
		
		СистемнаяИнформация=	Новый СистемнаяИнформация;
		Возврат СистемнаяИнформация.ВерсияПриложения;
		
	КонецФункции
	
//} УПРАВЛЕНИЕ ВЕРСИЯМИ

//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ФорматЭлектронногоДокумента(Document)
	
	Результат = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", Document);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиОтправкиДокументов()
	
	УстарелаИстина = Истина;
	УстарелаЛожь = Ложь;
	
	Результат = Новый Массив;
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СЧФДОП_820_736"
		, НСтр("ru = 'УПД, УКД в формате 736 приказа для комплектов передаточных документов и счетов-фактур'")
		, УстарелаЛожь);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СЧФ_ДОП_820_736"
		, НСтр("ru = 'УПД, УКД в формате 736 приказа раздельно для каждого передаточного документа и счета-фактуры'")
		, УстарелаЛожь);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СФТОРГ12АКТ_820_736"
		, НСтр("ru = 'СФ, ТОРГ12, АКТ в формате 820 приказа; КСФ в формате 736 приказа'")
		, УстарелаЛожь);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СЧФДОП_820"
		, НСтр("ru = 'УПД, УКД в формате 189 приказа для комплектов передаточных документов и счетов-фактур'")
		, УстарелаЛожь);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СЧФ_ДОП_820"
		, НСтр("ru = 'УПД, УКД в формате 189 приказа раздельно для каждого передаточного документа и счета-фактуры'")
		, УстарелаЛожь);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СФТОРГ12АКТ_820"
		, НСтр("ru = 'СФ, ТОРГ12, АКТ в формате 820 приказа; КСФ в формате 189 приказа'")
		, УстарелаЛожь);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СЧФДОП"
		, НСтр("ru = 'УПД в формате 155 приказа, УКД для комплектов передаточных документов и счетов-фактур'")
		, УстарелаИстина);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СЧФ_ДОП"
		, НСтр("ru = 'УПД в формате 155 приказа, УКД раздельно для каждого передаточного документа и счета-фактуры'")
		, УстарелаИстина);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СФТОРГ12АКТ"
		, НСтр("ru = 'СФ, ТОРГ12, АКТ в формате 155 приказа; КСФ в формате 189 приказа'")
		, УстарелаИстина);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "ТОРГ12АКТ"
		, НСтр("ru = 'ТОРГ12/Акт в формате 155 приказа'")
		, УстарелаИстина);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СФ"
		, НСтр("ru = 'СФ в формате 155 приказа, КСФ в формате 189 приказа'")
		, УстарелаИстина);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "ДОП"
		, НСтр("ru = 'УПД в формате 155 приказа, УКД только для передаточных документов'")
		, УстарелаИстина);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "СЧФ"
		, НСтр("ru = 'УПД в формате 155 приказа, УКД только для счетов-фактур'")
		, УстарелаИстина);
	
	ДобавитьОписаниеНастройкиОтправки(Результат
		, "НЕТ"
		, НСтр("ru = 'СФ, КСФ в устаревшем формате'")
		, УстарелаИстина);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьОписаниеНастройкиОтправки(ВсеНастройки, Ключ, Представление, Устарела = Ложь)
	
	НоваяНастройка = Новый Структура;
	НоваяНастройка.Вставить("Ключ", Ключ);
	НоваяНастройка.Вставить("Представление", Представление);
	НоваяНастройка.Вставить("Устарела", Устарела);
	
	ВсеНастройки.Добавить(Новый ФиксированнаяСтруктура(НоваяНастройка));
	
КонецПроцедуры

// Проверяет актуальность настройки отправки документов.
//
// Параметры:
//  КлючНастройки - Строка - значение настройки "ДиадокФормироватьУПД"
// 
// Возвращаемое значение:
//  Булево - Истина, если эта настройка позволяет отправлять документы в неактуальных форматах.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУстаревшаяНастройкаОтправки(КлючНастройки)
	
	НастройкиОтправки = НастройкиОтправкиДокументов();
	
	Результат = Ложь;
	
	Для Каждого ОписаниеНастройки Из НастройкиОтправки Цикл
		
		Если КлючНастройки = ОписаниеНастройки.Ключ
			И ОписаниеНастройки.Устарела Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭлектронныйДокументПоИдентификатору(ИдентификаторОрганизации, СоставнойИдентификаторДокумента)
	
	Результат = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьДокументДиадок"
		, ИдентификаторОрганизации
		, СоставнойИдентификаторДокумента);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияОбИзмененииСтатусаДокумента(ПараметрыОповещения)
	
	СоставнойИдентификатор	 = ПараметрыОповещения.DocumentID;
	ИдентификаторОрганизации = ПараметрыОповещения.BoxID;
	
	Попытка
		Док = ЭлектронныйДокументПоИдентификатору(ИдентификаторОрганизации, СоставнойИдентификатор);
	Исключение
		Возврат;
	КонецПопытки;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("BoxID", ИдентификаторОрганизации);
	ОтборСтрок.Вставить("DocumentID", СоставнойИдентификатор);
	
	НовыеЗначенияПолей = Новый Структура;
	НовыеЗначенияПолей.Вставить("Status", Док.Status);
	НовыеЗначенияПолей.Вставить("СостояниеДокументооборота"
		, МетодКлиента("Модуль_Клиент", "ПредставлениеСтатуса", Док));
	НовыеЗначенияПолей.Вставить("СостояниеСогласования"
		, МетодКлиента("Модуль_Клиент", "ПредставлениеСтатусаСогласования", Док));
	
	НайденныеСтроки = ТаблицаДокументовВходящих.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НовыеЗначенияПолей);
	КонецЦикла;
	
	НайденныеСтроки = ТаблицаДокументовВнутренних.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НовыеЗначенияПолей);
	КонецЦикла;
	
	НайденныеСтроки = ТаблицаДокументовИсходящих.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НовыеЗначенияПолей);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СопоставленныеОрганизации(ТолькоАктивные = Ложь)
	
	Результат = МетодКлиента("Модуль_Клиент", "СопоставленныеОрганизации", ТолькоАктивные);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбИнтеграционномМодуле()
	
	ИнтеграционныйМодуль = Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции;
	Гиперссылка = НавигационнаяСсылкаВыбратьМодульИнтеграции();
	ЦветТекста = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИнтеграционныйМодуль) Тогда
		ИнтеграционныйМодуль = НСтр("ru = 'Не определен'; en = 'Not defined'");
		ЦветТекста = WebЦвета.ТемноКрасный;
	КонецЕсли;
	
	ТекстМодульИнтеграции = Новый ФорматированнаяСтрока(ИнтеграционныйМодуль,, ЦветТекста,, Гиперссылка);;
	
КонецПроцедуры

	&НаКлиенте
	Процедура СообщитьПользователю(ТекстСообщения)
		
		МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения);
						
	КонецПроцедуры

	&НаКлиентеНаСервереБезКонтекста
	Функция НайтиСтрокиВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) //вместо НайтиСтроки таблицы значений
		Результат = Новый Массив;
		Для Каждого Стр из МассивСтруктур Цикл
			БылоНесоответствие = Ложь;
			Для Каждого Стр1 из ПараметрыОтбора Цикл
				Если СокрЛП(ПараметрыОтбора[Стр1.Ключ]) <>  СокрЛП(Стр[Стр1.Ключ]) Тогда
					БылоНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если БылоНесоответствие = Ложь Тогда
				Результат.Добавить(Стр);
			КонецЕсли;
			
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ЗаполнитьФормуИзСохраненныхНастроек();
		ОбновитьОпции();
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		УстановитьОбязательныеСвойстваЭлементов();
		
		ЗаполнитьСведенияОбИнтеграционномМодуле();
		ЗаполнитьРасположениеПодключаемогоМодуля();
		ЗаполнитьРеквизитыЗначениямиНастроек();
		
		НастроитьЭлементыФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьПараметрыВыборки(Режим =  Неопределено)
		
		ПараметрыВыборки = Новый Структура();
		
		ПараметрыВыборки.Вставить("Направление", ПолучитьЗначениеНаправления());
		ПараметрыВыборки.Вставить("СписокДокументооборота", ?(Режим = "Подписание", 2, ?(ПустаяСтрока(СостояниеДокументооборота), 0, Число(СостояниеДокументооборота))));
		ПараметрыВыборки.Вставить("ТипыДокументов", ТипыДокументов);
		ПараметрыВыборки.Вставить("ПодразделениеID", ПодразделениеID);
		ПараметрыВыборки.Вставить("ВключатьПодчиненныеПодазделения", ВключатьПодчиненныеПодазделения);
		
		Если ПараметрыВыборки.Направление = НаправленияДокументов().Входящий Тогда
			ОтбиратьПоДатеДокумента = СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента;
		Иначе
			ОтбиратьПоДатеДокумента = СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента;
		КонецЕсли;
		ПараметрыВыборки.Вставить("ОтбиратьПоДатеДокумента", ОтбиратьПоДатеДокумента);
		
		Возврат ПараметрыВыборки;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПоказатьДокументВДиадоке(ДокументДиадока) Экспорт
		
		МетодКлиента("Модуль_Клиент","ПоказатьДокументВДиадоке", ДокументДиадока.OrganizationId, ДокументДиадока.DocumentId);
		
	КонецПроцедуры 
	
	&НаСервереБезКонтекста
	Функция МассивСтруктур_2_ТаблицаЗначений(МассивСтруктур)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		Результат = Новый ТаблицаЗначений;
		Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
			Возврат Результат;
		Иначе 
			Образец = МассивСтруктур[0];
			Для Каждого  Стр из Образец Цикл
				Результат.Колонки.Добавить(Стр.Ключ,ПолучитьОписаниеТипаЗначение(Стр.Значение) );
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Стр Из МассивСтруктур Цикл
			СтрТ = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ПолучитьОписаниеТипаЗначение(ЗначениеЭл)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		
		ТипКолонки = ТипЗнч(ЗначениеЭл);
		МассивТ= Новый массив;
		МД = метаданные.найтипотипу(типзнч(ЗначениеЭл));
		Если МД = Неопределено Тогда
			ПолноеИмяТипа = Строка(ТипЗнч(ЗначениеЭл));
		Иначе
			ПолноеИмяТипа = МД.ПолноеИмя();
			Для Каждого стрхх из СтрЗаменТипов цикл
				Если Найти(ПолноеИмяТипа,стрхх.Ключ) <> 0 Тогда
					ПолноеИмяТипа = СтрЗаменить(ПолноеИмяТипа, стрхх.Ключ, стрхх.Значение);
					прервать;
				КонецЕсли;
			конеццикла;
		КонецЕсли;
		Если ПолноеИмяТипа  = "Не определено" ИЛИ ПолноеИмяТипа = "Форматированная строка" Тогда
			ПолноеИмяТипа = "Строка"; //проверить - заглушка пока!!!
		КонецЕсли;
		
		Если найти( ПолноеИмяТипа, "ДокументСсылка")>0 Тогда
			возврат Документы.ТипВсеСсылки();
		иначе;	
			возврат  новый ОписаниеТипов(ПолноеИмяТипа)
		КонецЕсли;	
	КонецФункции	
	
	&НаКлиенте
	Функция НовыеПараметрыФормыВыводаОшибки()
		
		Результат = Новый Структура;
		Результат.Вставить("Заголовок"		, "");
		Результат.Вставить("Подробности"	, "");
		Результат.Вставить("ОписаниеОшибки"	, "");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОткрытьФормуВыводаОшибки(Результат, ЗакрытьФорму = Ложь, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено) Экспорт
		
		ПараметрыФормы = Новый Структура;
		
		Если Результат.Свойство("Заголовок") Тогда
			ПараметрыФормы.Вставить("Заголовок", Результат.Заголовок);
		Иначе
			ПараметрыФормы.Вставить("Заголовок", "Ошибка работы с модулем " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ОписаниеОшибки", Результат.ОписаниеОшибки);
		ПараметрыФормы.Вставить("Подробности"	, Результат.Подробности);
		
		Если ИмяОбработчика = Неопределено Тогда
			ИмяОбработчика = "ОбработчикОткрытияФормыОшибки";
			ПараметрыОбработчика = ЗакрытьФорму;
		КонецЕсли;
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма, ИмяОбработчика, ПараметрыОбработчика);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НачатьОбновлениеСпискаДокументов() Экспорт
		
		ТаблицаДокументовВходящих.Очистить();
		ТаблицаДокументовИсходящих.Очистить();
		ТаблицаДокументовВнутренних.Очистить();
		СписокАктивные.Очистить();
		ТаблицаЖурналаДокументов.Очистить();
		
		//PCRU
		pcru_ТаблицаНеотработанныеДокументы_Счета.Очистить();
		pcru_ТаблицаНеотработанныеДокументы_Прочие.Очистить();
		pcru_ТаблицаВРаботеДокументы.Очистить();
		pcru_ТаблицаОтработанныеДокументы.Очистить();
		//PCRU
		
		ПодключитьОбработчикОжидания("ОбработчикОбновлениеСпискаДокументов", 0.1, Истина);
				
	КонецПроцедуры
	
	&НаСервере
	Процедура НастроитьЭлементыФормы()
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		Команды.ПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Подсказка= "Открыть карточку документа, отправленного через " + СловарьWL.НаименованиеСистемы;
			
		Команды.ДобавщитьЯщикДиадок.Подсказка= 		"Добавщить ящик " + СловарьWL.НаименованиеСистемы;
		Команды.УдалитьЯщикДиадок.Подсказка= 		"Удалить ящик " + СловарьWL.НаименованиеСистемы;
		Команды.КонтрагентыНайтиВДиадоке.Подсказка= "Контрагенты найти в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж;
				
		Элементы.ДекорацияТехподдержка.Заголовок= 	"Техподдержка (v " + МетодСервера(,"ВерсияОбработки") + ")";
		
		Элементы.УдалитьУстановитьРасширениеКонфигурации.Видимость= НЕ  Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.ОтсутствуютПраваАдминистратора
		                                                            И ( Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.НеобходимоУстановить
																	ИЛИ Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.РасширениеУжеУстановлено
																	ИЛИ Объект.ПараметрыКлиентСервер.ПараметрыКлиент.УстановкаРасширения.БылОтказОтУстановки);
																	
		Элементы.СтраницаЖурналыДокументов.Видимость = ЖурналыДокументовПоказать;
		
		УстановитьУсловноеОформлениеСпискаДокументов(Элементы.ТаблицаДокументовВходящих);
		УстановитьУсловноеОформлениеСпискаДокументов(Элементы.ТаблицаДокументовИсходящих);
		УстановитьУсловноеОформлениеСпискаДокументов(Элементы.ТаблицаДокументовВнутренних);
		
		//pcru
		УстановитьУсловноеОформлениеСпискаДокументов(Элементы.pcru_ТаблицаНеотработанныеДокументы_Счета);
		УстановитьУсловноеОформлениеСпискаДокументов(Элементы.pcru_ТаблицаНеотработанныеДокументы_Прочие);
		УстановитьУсловноеОформлениеСпискаДокументов(Элементы.pcru_ТаблицаВРаботеДокументы);
		УстановитьУсловноеОформлениеСпискаДокументов(Элементы.pcru_ТаблицаОтработанныеДокументы);
		//pcru
		
		УстановитьОформлениеНесопоставленныхКонтрагентов();
		
		УстановитьУсловноеОформлениеФорматДокументовНаОтправку(Элементы.СписокПочтовыхЯщиков, "СписокПочтовыхЯщиков");
		УстановитьУсловноеОформлениеФорматДокументовНаОтправку(Элементы.СписокАктивные, "СписокАктивные");
		УстановитьУсловноеОформлениеЗаблокирована(Истина);
		УстановитьУсловноеОформлениеЗаблокирована(Ложь);
		
		УстановитьВидимостьКнопкиОбновленияМодуля(Ложь);		
																		
	КонецПроцедуры

#Область УстановкаУсловногоОформленияСписковДокументов

&НаСервере
Процедура УстановитьУсловноеОформлениеСпискаДокументов(ТаблицаФормы)
	
	УстановитьФорматДатыУчета(ТаблицаФормы);
	УстановитьОформлениеТестовыхДокументов(ТаблицаФормы);
	УстановитьОформлениеАннулированныхДокументов(ТаблицаФормы);
	УстановитьОформлениеНесопоставленныхДокументов(ТаблицаФормы);
	УстановитьОформлениеДокументовВУстаревшемФормате(ТаблицаФормы);
	УстановитьОформлениеСостоянияПередачиЧерезРоуминг(ТаблицаФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматДатыУчета(ТаблицаФормы)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + "ДатаУчета");
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + ".ДатаУчета");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеТестовыхДокументов(ТаблицаФормы)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + "ТипДокумента");
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + ".ЭтоТестовыйДок");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ПесочноКоричневый);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеАннулированныхДокументов(ТаблицаФормы)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + "СостояниеДокументооборота");
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + ".СостояниеДокументооборота");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "Аннулирован";
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеНесопоставленныхДокументов(ТаблицаФормы)
	
	// Цвет фона колонки "ТипДокумента" для тестовых документов
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным);
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + ".ПервичныйДокумент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	//ГруппаОтбораИли = ЭлементУО.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + ".DocumentType");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ТипыДокументовДляСопоставленияСУчетнымиДокументами();
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДокументовВУстаревшемФормате(ТаблицаФормы)
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + "ТипДокумента");
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + ".УстаревшийФормат");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеСостоянияПередачиЧерезРоуминг(ТаблицаФормы)
	
	ИмяКолонки = "СостояниеПередачиЧерезРоуминг";
	ИмяЭлемента = ТаблицаФормы.Имя + ИмяКолонки;
	Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "Ошибка доставки документа через роуминг!";
	
	// Оформление колонки СостояниеПередачиЧерезРоуминг, если есть ошибка отправки в роуминг
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + ИмяКолонки);
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + "." + ИмяКолонки);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТекстОшибки;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	
	// Оформление колонки СостояниеПередачиЧерезРоуминг, если документ не роуминговый
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + ИмяКолонки);
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + "." + ИмяКолонки);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Оформление колонки СостояниеДокументооборота, если есть ошибка отправки в роуминг
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + "СостояниеДокументооборота");
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + "." + ИмяКолонки);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТекстОшибки;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипыДокументовДляСопоставленияСУчетнымиДокументами()
	
	// См. возможные значения в Модуль_ИнтеграцияУниверсальный.ИдентификаторыТиповДокументов()
	Результат = Новый СписокЗначений;
	Результат.Добавить("UniversalTransferDocument");
	Результат.Добавить("UniversalTransferDocumentRevision");
	Результат.Добавить("UniversalCorrectionDocument");
	Результат.Добавить("UniversalCorrectionDocumentRevision");
	Результат.Добавить("XmlTorg12");
	Результат.Добавить("XmlAcceptanceCertificate");
	Результат.Добавить("Invoice");
	Результат.Добавить("InvoiceRevision");
	Результат.Добавить("InvoiceCorrection");
	Результат.Добавить("InvoiceCorrectionRevision");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УстановкаПрочегоУсловногоОформления

&НаСервере
Процедура УстановитьОформлениеНесопоставленныхКонтрагентов()
	
	ТаблицаФормы = Элементы.СписокАктивные;
	ИмяКолонки = "ПредставлениеСпискаКонтрагентов1С";
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ТаблицаФормы.ПутьКДанным + ИмяКолонки);
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаФормы.Имя + "." + ИмяКолонки);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "Контрагент в 1С не сопоставлен");
	
КонецПроцедуры

	&НаСервере
	Процедура УстановитьУсловноеОформлениеФорматДокументовНаОтправку(ЭлементФормы, ИмяРеквизитаТаблицы)
		
		НастройкиОтправки = НастройкиОтправкиДокументов();
		
		Для Каждого ОписаниеНастройки Из НастройкиОтправки Цикл
			
			ЭлементУО = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.ПутьКДанным + "ФорматДокументовНаОтправку");
			
			ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяРеквизитаТаблицы + ".ФорматДокументовНаОтправку");
			ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение 	= ОписаниеНастройки.Ключ;
			
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", ОписаниеНастройки.Представление);
			
			Если ОписаниеНастройки.Устарела Тогда
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьУсловноеОформлениеЗаблокирована(Заблокирована)
		
		//оформление колонки Заблокирована
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокПочтовыхЯщиковЗаблокирована");
		
		ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокПочтовыхЯщиков.Заблокирована");
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение 	= Заблокирована;
		
		Если Заблокирована Тогда 
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "Оплатите модуль");
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		Иначе
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "Оплачено");
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
		КонецЕсли;
		
		//оформление строки
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокПочтовыхЯщиков");

		ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("СписокПочтовыхЯщиков.Заблокирована");
		ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение 	= Заблокирована;
		
		Если Заблокирована Тогда 
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
		Иначе
			ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Черный);
		КонецЕсли;
		
	КонецПроцедуры

#КонецОбласти

	&НаКлиенте
	Процедура УправлениеФормой()
		
		Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок;
		КонецЕсли;
		
		ВключатьПодчиненныеПодазделения= истина;

		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Элементы.СтраницаЖурналыДокументов.Доступность=	Ложь;
		КонецЕсли;
		
		НастроитьЭлементыПодключаемогоМодуля();
		
		НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьРасположениеПодключаемогоМодуля()
		
		ИспользоватьПодключаемыйМодуль	 = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль;
		РасположениеПодключаемогоМодуля	 = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля;
		РежимСовместимостиФорматов155и820= Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РежимСовместимостиФорматов155и820;
		
		Если РасположениеПодключаемогоМодуля = "НаДиске" Тогда
			
			ПутьКПодключаемомуМодулюДиск = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
			
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВБазеДанных" Тогда
			
			ПутьКПодключаемомуМодулюСсылка = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
			
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВСоставеКонфигурации" Тогда
			
			МетаданныеОбработки = Метаданные.Обработки.Найти(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю);
			
			Если МетаданныеОбработки <> Неопределено Тогда
				
				Элементы.ПутьКПодключаемомуМодулюИмяОбработки.СписокВыбора.Добавить(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю, МетаданныеОбработки.Представление());
				
				ПутьКПодключаемомуМодулюИмяОбработки = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьРеквизитыЗначениямиНастроек()
		
		ПутьКМодулюВСправочнике1С	= Объект.ПараметрыКлиентСервер.ПутьКМодулюВСправочнике1С;
		ЗапретитьРаботуСМетриками	= НЕ Объект.ПараметрыКлиентСервер.Метрики.ИспользоватьМетрики;
		ИспользоватьСервисКонтурМаркировка = Объект.ПараметрыКлиентСервер.ИспользоватьСервисКонтурМаркировка;
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЭлементыПодключаемогоМодуля()
		
		Если НЕ Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль Тогда
			
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница	 = Элементы.СтраницаПутьКПодключаемомуМодулюНеИспользуется;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница				 = Элементы.СтраницаПодключитьПМОтключен;
			
		ИначеЕсли РасположениеПодключаемогоМодуля = "НаДиске" Тогда
			
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница	 = Элементы.СтраницаПутьКПодключаемомуМодулюДиск;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница				 = Элементы.СтраницаПодключитьПМ;
			
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВБазеДанных" Тогда
			
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница	 = Элементы.СтраницаПутьКПодключаемомуМодулюСсылка;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница				 = Элементы.СтраницаПодключитьПМ;
			
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВСоставеКонфигурации" Тогда
			
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница	 = Элементы.СтраницаПутьКПодключаемомуМодулюИмяОбработки;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница				 = Элементы.СтраницаПодключитьПМ;
			
		Иначе
			
			Элементы.СтраницыПутьКПодключаемомуМодулю.ТекущаяСтраница	 = Элементы.СтраницаПутьКПодключаемомуМодулюНеВыбрано;
			Элементы.СтраницыПодключитьПМ.ТекущаяСтраница				 = Элементы.СтраницаПодключитьПМОтключен;
			
		КонецЕсли;
		
		Элементы.ПереключательРасположенияПодключаемогоМодуля.Доступность	 = ИспользоватьПодключаемыйМодуль;
		Элементы.ГруппаРасположениеПодключениеПМ.Доступность				 = ИспользоватьПодключаемыйМодуль;
		
		Элементы.РежимСовместимостиФорматов155и820.Видимость = ИспользоватьПодключаемыйМодуль;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации()
		
		Если Элементы.УдалитьУстановитьРасширениеКонфигурации.Видимость Тогда
			
			Если Платформа.ПараметрыКлиент.УстановкаРасширения.РасширениеУжеУстановлено Тогда
				Элементы.УдалитьУстановитьРасширениеКонфигурации.Заголовок= "Удалить расширение конфигурации";
			Иначе	
				Элементы.УдалитьУстановитьРасширениеКонфигурации.Заголовок= "Установить расширение конфигурации";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура РасположенияПодключаемогоМодуляПриИзменении()
		
		Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля	 = РасположениеПодключаемогоМодуля;
		Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю			 = ПутьКМодулюПМ();
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
		МетодСервераБезКонтекста( ,"СохранитьНастройкиПодключаемогоМодуля");
		МетодСервераБезКонтекста( ,"СброситьКэшМодулей");
		
	КонецПроцедуры
	
	Функция ПутьКМодулюПМ()
		
		Результат = Неопределено;
		
		Если РасположениеПодключаемогоМодуля = "НаДиске" Тогда
			
			Результат = ПутьКПодключаемомуМодулюДиск;
			
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВБазеДанных" Тогда
			
			Результат = ПутьКПодключаемомуМодулюСсылка;
			
		ИначеЕсли РасположениеПодключаемогоМодуля = "ВСоставеКонфигурации" Тогда
			
			Результат = ПутьКПодключаемомуМодулюИмяОбработки;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьЗначениеНаправления()
						
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда
			Результат = "OutboundWaitingForSenderSignature";
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда
			Результат = НаправленияДокументов().Исходящий;
		Иначе
			Результат = НаправленияДокументов().Входящий;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьТекущийПериод()
		
		Направление = ПолучитьЗначениеНаправления();
				
		Если Направление = НаправленияДокументов().Входящий Тогда
			ДатаНачала 				= СтруктураИнтервалов.Полученные.ДатаНачала;
			ДатаОкончания 			= СтруктураИнтервалов.Полученные.ДатаОкончания;
			ОтбиратьПоДатеДокумента = СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента;
		Иначе
			ДатаНачала 				= СтруктураИнтервалов.Отправленные.ДатаНачала;
			ДатаОкончания 			= СтруктураИнтервалов.Отправленные.ДатаОкончания;
			ОтбиратьПоДатеДокумента = СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента;
		КонецЕсли;
		
		//pcru
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета ИЛИ 
			 Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие ИЛИ
			 Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок ИЛИ
			 Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда
			ДатаНачала 				= СтруктураИнтервалов.Полученные.ДатаНачала;
			ДатаОкончания 			= СтруктураИнтервалов.Полученные.ДатаОкончания;
			ОтбиратьПоДатеДокумента = СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента;
		КонецЕсли;
		//pcru
		
		Результат = Новый Структура;
		
		Результат.Вставить("ДатаНачала"				, ДатаНачала);
		Результат.Вставить("ДатаОкончания"			, ДатаОкончания);
		Результат.Вставить("ОтбиратьПоДатеДокумента", ОтбиратьПоДатеДокумента);
		
		Возврат Результат;
						
	КонецФункции
	
	&НаСервере
	Функция РасшифровкаТекущегоСостоянияВзаимоотношенийСервер(ТекущийСтатус)
		Возврат МетодСервера(,"РасшифровкаТекущегоСостоянияВзаимоотношений", ТекущийСтатус);
	КонецФункции
	
	&НаКлиенте
	Процедура ОтправитьПринятьПриглашениеКонтрагенту(ПараметрыПриглашения, ТочкаВызова = "") Экспорт

		Контрагент = ПараметрыПриглашения.ТекущиеДанные;
		
		Organization	= МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		Результат		= МетодКлиента("Модуль_Клиент", "ОтправитьПринятьПриглашениеКонтрагенту", Organization, Контрагент.ID, Контрагент.ИНН, ПараметрыПриглашения.Комментарий, ПараметрыПриглашения.ПутьКФайлу);
		
		Если Результат = Истина Тогда
			
			Counteragent=	Organization.GetCounteragentById(Контрагент.ID);
			
			СтарыйСтатус 	= ПараметрыПриглашения.ТекущиеДанные.ТекущийСтатус;
			НовыйСтатус 	= Counteragent.GetStatus();
			
			Если 	 НовыйСтатус = СтарыйСтатус								// это тот случай, когда сервер ДД еще не успел изменить статус контрагента, поэтому нам вернулся старый
				И НЕ ТочкаВызова = "ГрупповаяОбработкаКонтрагентов" Тогда	// при закрытии формы групповой обработки статусы обновятся
				
				Если СтарыйСтатус = "InvitesMe" Тогда
					ТекстСообщения = "Приглашение от контрагента " + Контрагент.Контрагент + " принято.";
				Иначе
					ТекстСообщения = "Приглашение контрагенту " + Контрагент.Контрагент + " отправлено.";
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + "  
								|Для обновления статуса контрагента нажмите кнопку ""Обновить список"".";
				
				ПоказатьПредупреждение(, ТекстСообщения, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				
			КонецЕсли;
			
			ПараметрыПриглашения.ТекущиеДанные.ТекущийСтатус			= НовыйСтатус;
			ПараметрыПриглашения.ТекущиеДанные.ТекущийСтатусРасшифровка	= РасшифровкаТекущегоСостоянияВзаимоотношенийСервер(Контрагент.ТекущийСтатус);
			
			СписокАктивныеПриАктивизацииСтроки(Элементы);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьНаименованиеСистемы()
		
		НовыйЗаголовок = Платформа.ПараметрыКлиент.СловарьWL.Заголовок + ?(РежимОтладкиСервера, " (Режим отладки)", "");
		
		ЭтаФорма.Заголовок = НовыйЗаголовок;
		
		Элементы.СписокАктивныеКонтрагентыНайтиВДиадоке.Заголовок = "Найти контрагентов в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж;
		Элементы.СписокЯщиковДиадока.Заголовок = "Список ящиков " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		Элементы.СписокПочтовыхЯщиков.ПодчиненныеЭлементы.СписокПочтовыхЯщиковнаименованиеЯщика.Заголовок = "Наименование ящика в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж; 
		
		ОбновитьЗаголовокИнтервала("Полученные");				
		ОбновитьЗаголовокИнтервала("Отправленные");
		
		//pcru
		pcru_ОбновитьЗаголовокИнтервала("НеотработанныеСчета");
		pcru_ОбновитьЗаголовокИнтервала("НеотработанныеПрочие");
		pcru_ОбновитьЗаголовокИнтервала("ВРаботе");
		pcru_ОбновитьЗаголовокИнтервала("Отработанные");
		//pcru
		
		ОбновитьЗаголовокИнтервалаЖурналаДокументов();
		
		Если Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы <> "Диадок" Тогда
			ЗаменитьКартинкуЖурналовДокументов();
		КонецЕсли;
		
	КонецПроцедуры // ЗаполнитьЗаголовкиФормы()
	
	&НаКлиенте
	Процедура ЗаменитьКартинкуЖурналовДокументов()
		
		ТаблицаДокументовЕстьВДиадоке = ЭтаФорма.Элементы.ТаблицаДокументовРеализацияТоваровУслуг.ПодчиненныеЭлементы.ТаблицаДокументовЕстьВДиадоке;
		ТаблицаДокументовЕстьВДиадоке.КартинкаЗначений = БиблиотекаКартинок.ЗеленаяГалка;
		
	КонецПроцедуры // ()
	
	&НаКлиенте
	Процедура УстановитьТекущуюСтраницуПанелейОтбораПоШагу(Элемент, Шаг)
		
		ПозицияРазделителя= Найти(Элемент.Родитель.Имя, "_");
		
		Если ПозицияРазделителя > 0 Тогда
			
			НовыйНомерТекущейСтраницы= Число(Сред(Элемент.Родитель.Имя, ПозицияРазделителя + 1)) + Шаг;
			
			МаскаИмениЭлемента= Лев(Элемент.Родитель.Имя, ПозицияРазделителя - 1);
			
			НайденнаяСтаница= Элементы.Найти(МаскаИмениЭлемента + "_" + НовыйНомерТекущейСтраницы);
			
			Если НайденнаяСтаница <> Неопределено И НайденнаяСтаница.Родитель = Элемент.Родитель.Родитель Тогда
				Элемент.Родитель.Родитель.ТекущаяСтраница= Элементы.Найти(МаскаИмениЭлемента + "_" + НовыйНомерТекущейСтраницы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораКонтрагентID(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 1 И ТекущаяДата() - ДатаПоследнегоЗаполненияСписокВыбораКонтрагентID < 10 Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.СписокВыбора.Очистить();
		ДобавленныеЗначения = Новый Соответствие;
		
		СписокОрганизаций = ОрганизацииТекущегоКонтекста();
		
		Для Каждого ТекОрганизация ИЗ СписокОрганизаций Цикл 
			
			CounteragentList = МетодКлиента("Модуль_Клиент", "GetCounteragentListByStatus", ТекОрганизация, "IsMyCounteragent");
					
			Если CounteragentList <> Неопределено Тогда
					
				ВГраница = CounteragentList.Count - 1;
				
				Для ИндексЦикла = 0 ПО ВГраница Цикл
					
					Counteragent = CounteragentList.GetItem(ИндексЦикла);
					
					Если ДобавленныеЗначения[Counteragent.id] <> Истина Тогда 
						Элемент.СписокВыбора.Добавить(Counteragent.id, Counteragent.Name);
						ДобавленныеЗначения.Вставить(Counteragent.id, Истина);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;	
		
		ДобавленныеЗначения = Неопределено;
		Элемент.СписокВыбора.СортироватьПоПредставлению();
		
		ДатаПоследнегоЗаполненияСписокВыбораКонтрагентID = ТекущаяДата();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораСтатусВзаимоотношений(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.СписокВыбора.Добавить("IsMyCounteragent", "Партнерские отношения");
		Элемент.СписокВыбора.Добавить("InvitesMe"		, "Получен запрос");
		Элемент.СписокВыбора.Добавить("IsInvitedByMe"	, "Ожидается ответ");
		Элемент.СписокВыбора.Добавить("Rejected"		, "Заблокированные");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораТипыДокументов(Элемент)
		
		Если Элемент.СписокВыбора.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПустаяПиктограмма= МетодКлиента("Модуль_Клиент", "ЭДО_БиблиотекаКартинок").ПустаяПиктограмма;
				
		Элемент.СписокВыбора.Очистить();
		
		Элемент.СписокВыбора.Добавить("1",  "Накладные");
		Элемент.СписокВыбора.Добавить("11", "Торг-12"												, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("12", "Акт"													, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("13", МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "ДОП")	, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("14", МетодКлиента("Модуль_Клиент", "ТипДокументаУКД", "ДИС")	, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("15", МетодКлиента("Модуль_Клиент", "ТипДокументаИУПД","ДОП")	, , ПустаяПиктограмма);
				
		Элемент.СписокВыбора.Добавить("2",  "Счета-фактуры");
		Элемент.СписокВыбора.Добавить("21", "Оригинальные СФ"										, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("22", "Исправленные СФ"										, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("23", "Корректировочные СФ"									, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("24", МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФ")	, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("25", МетодКлиента("Модуль_Клиент", "ТипДокументаУКД", "КСЧФ"), , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("26", МетодКлиента("Модуль_Клиент", "ТипДокументаИУПД","СЧФ")	, , ПустаяПиктограмма);
				
		Элемент.СписокВыбора.Добавить("5",  МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФДОП"));
		Элемент.СписокВыбора.Добавить("6",  МетодКлиента("Модуль_Клиент", "ТипДокументаУКД", "КСЧФДИС"));
		Элемент.СписокВыбора.Добавить("7",  МетодКлиента("Модуль_Клиент", "ТипДокументаИУПД","СЧФДОП"));
		
		Элемент.СписокВыбора.Добавить("Torg2", "Акт о расхождениях ТОРГ-2");
		
		Элемент.СписокВыбора.Добавить("3",  "Счета на оплату");
		
		Элемент.СписокВыбора.Добавить("4",  "Неформализованные");
		Элемент.СписокВыбора.Добавить("41", "Акт сверки"				, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("42", "Детализация"				, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("43", "Договор"					, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("44", "Протокол согласования цены", , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("45", "Приглашение к ЭДО"			, ,	ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("46", "Реестр сертификатов"		, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("48", "Дополнительное соглашение"	, , ПустаяПиктограмма);
		Элемент.СписокВыбора.Добавить("47", "Прочее"					, ,	ПустаяПиктограмма);
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораСостояниеДокументооборота(Элемент)
		
		ТолькоСогласование = (Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок);
		
		Если Элемент.СписокВыбора.Количество() > 1 И ТолькоСогласование Тогда
			Возврат;
		КонецЕсли;
		
		ПустаяПиктограмма= МетодКлиента("Модуль_Клиент", "ЭДО_БиблиотекаКартинок").ПустаяПиктограмма;
		
		Список = Элемент.СписокВыбора;
		
		Список.Очистить();
		
		Список.Добавить("0", "Все документы");
		
		Если НЕ ТолькоСогласование Тогда
			
			Список.Добавить("-1",	"Статус подписания");  // "-1" = группа
			Список.Добавить("1",	"Завершен"			, , ПустаяПиктограмма);
			Список.Добавить("2",	"Не завершен"		, , ПустаяПиктограмма);
			Список.Добавить("3",	"Прекращен"			, , ПустаяПиктограмма);
			
			Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда  
				Список.Добавить("4", "Ожидается уточнение", , ПустаяПиктограмма);
			Иначе
				Список.Добавить("4", "Требуется уточнение", , ПустаяПиктограмма);
			КонецЕсли;
								
		КонецЕсли;
		
		Список.Добавить("-1",	"Статус согласования");  // "-1" = группа
		Список.Добавить("11",	"На согласовании"			, , ПустаяПиктограмма);
		Список.Добавить("12",	"Согласован"				, , ПустаяПиктограмма);
		Список.Добавить("13",	"Отказано в согласовании"	, , ПустаяПиктограмма);
		Список.Добавить("14",	"Отказано в подписании"		, , ПустаяПиктограмма);
					
		Если НЕ ТолькоСогласование Тогда
			
			Список.Добавить("-1",	"Статус аннулирования");  // "-1" = группа
			Список.Добавить("21",	"Ожидается аннулирование"	, , ПустаяПиктограмма);
			Список.Добавить("22",	"Требуется аннулирование"	, , ПустаяПиктограмма);
			Список.Добавить("23",	"Документ аннулирован"		, , ПустаяПиктограмма);
			Список.Добавить("24",	"Отказано в аннулировании"	, , ПустаяПиктограмма);
						
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЗаголовок()
		
		Если НЕ Элементы.ДекорацияТекущаяСтраница.Видимость Тогда
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда 
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Отправленные через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда 
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Полученные через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда 
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Исходящие на согласование через " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаКонтрагенты Тогда
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Список контрагентов";
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаНастройка Тогда
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Настройка";
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаЖурналыДокументов Тогда
			Элементы.ДекорацияТекущаяСтраница.Заголовок= "Журналы документов (beta)";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписок(Команда) Экспорт
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаКонтрагенты тогда 
			
			//Сбрасываем Кэш со статусами контрагентов
			Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "IsMyCounteragent");
			Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "InvitesMe");
			Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "IsInvitedByMe");
			Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "Rejected");
			
			ПриОткрытииСтраницыКонтрагентов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаЖурналыДокументов тогда 
			
			СформироватьЖурналДокументов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок тогда
			
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок тогда
			
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок тогда
			
			НачатьОбновлениеСпискаДокументов();
			
		//pcru
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета ИЛИ 
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие ИЛИ 
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок ИЛИ
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда
			НачатьОбновлениеСпискаДокументов();			
		//pcru
		
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьСтрокуДляФормыОплатыСервиса(СтрокаКонтекста)
		
		СтрокаСпискаОрганизаций = Новый Структура("Name, Inn, Kpp, ФИО");
		
		СтрокаСпискаОрганизаций.Name	= СтрокаКонтекста.ДанныеОрганизации.Name;
		СтрокаСпискаОрганизаций.Inn		= СтрокаКонтекста.ДанныеОрганизации.Inn;
		СтрокаСпискаОрганизаций.Kpp		= СтрокаКонтекста.ДанныеОрганизации.Kpp;
		СтрокаСпискаОрганизаций.ФИО		= СтрокаКонтекста.ДанныеСотрудника.ФИО;
		
		Возврат СтрокаСпискаОрганизаций;
		
	КонецФункции	
	
	&НаСервере
	Процедура ЗаполнитьФормуИзСохраненныхНастроек()
		
		ЗначенияРеквизитов = ЗначенияСохраненныхРеквизитовФормы();
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов);
		
	КонецПроцедуры
	
	&НаСервере
	Функция ЗначенияСохраненныхРеквизитовФормы()
		
		Результат = СохраняемыеРеквизитыФормы();
		СохраненныеЗначения = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
		
		Если ТипЗнч(СохраненныеЗначения) = Тип("Соответствие") Тогда
			
			Для каждого Элемент Из Результат Цикл
				
				ИмяРеквизита		 = Элемент.Ключ;
				ЗначениеРеквизита	 = СохраненныеЗначения[ИмяРеквизита];
				
				Результат[ИмяРеквизита] = ЗначениеРеквизита;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция СохраняемыеРеквизитыФормы()
		
		Результат = Новый Структура;
		Результат.Вставить("КаталогМодулейСервера");
		Результат.Вставить("РежимОтладкиСервера");
		Результат.Вставить("ОтправкаФайловСтарыйИнтерфейс");
		Результат.Вставить("ЖурналыДокументовПоказать");
		Результат.Вставить("ИспользоватьФормуВводаНакладной");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьОбязательныеСвойстваЭлементов()
		
		// Устанавливаем свойства программно, на случай если обработку сохранят платформой младше 8.3.7
		
		СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
		ЗаполнитьЗначенияСвойств(Элементы.ДекорацияТекущаяСтраница			  , СвойствоАвтоМаксимальнаяШирина);
		ЗаполнитьЗначенияСвойств(Элементы.ДекорацияТекущийПользовательВДиадоке, СвойствоАвтоМаксимальнаяШирина);
		
		ГоризонтальноеПоложениеЦентр = Новый Структура("ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Центр);
		ЗаполнитьЗначенияСвойств(Элементы.ПанельОкончанияОплаченногоПериода, ГоризонтальноеПоложениеЦентр);
		
		// Устанавливаем свойства программно, на случай если обработку сохранят платформой младше 8.3.8
		
		ЗначениеСвойства = МетодСервера(,"СвойствоСистемногоПеречисления", ВидКнопкиФормы, "ГиперссылкаКоманднойПанели");
		Если ЗначениеСвойства <> Неопределено Тогда
  			Элементы.ТаблицаДокументовИсходящихИнструкцияПоПереотправке.Вид = ЗначениеСвойства;
		КонецЕсли;
								
	КонецПроцедуры
	
	&НаКлиентеНаСервереБезКонтекста
	Функция СинонимТекущейФормы()
		
		Возврат "Форма основная";
		
	КонецФункции
	
//}СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	
	
//{ ЗАПУСК
	
	//{ Инициализация
	
		&НаКлиенте
		Процедура ОчиститьПеременныеМодуля()
			
			Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок= Неопределено;

		КонецПроцедуры
		
		&НаКлиенте
		Процедура ПодключитьКомпонентуДиадока(Отказ)
			
			Попытка
				
				РезультатПодключения = МетодКлиента("Модуль_Клиент", "ПодключитьКомпонентуДиадока");
				
			Исключение
				
				Отказ = Истина;
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ПараметрыФормы = НовыеПараметрыФормыВыводаОшибки();
				ПараметрыФормы.ОписаниеОшибки	 = НСтр("ru = 'Ошибка подключения внешней компоненты Диадока'");
				ПараметрыФормы.Подробности		 = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ОткрытьФормуВыводаОшибки(ПараметрыФормы, Истина);
				
				Возврат;
				
			КонецПопытки;
			
			ВерсияКомпоненты	 = РезультатПодключения.ВерсияКомпоненты;
			ТребуетсяПерезапуск	 = РезультатПодключения.ТребуетсяПерезапуск;
			
			Если ТребуетсяПерезапуск Тогда
				
				ПараметрыФормы = НовыеПараметрыФормыВыводаОшибки();
				ПараметрыФормы.Заголовок		 = НСтр("ru = 'Обновление внешней компоненты'");
				ПараметрыФормы.ОписаниеОшибки	 = НСтр("ru = 'Для обновления внешней компоненты необходимо перезапустить программу'");
				ПараметрыФормы.Подробности		 = СтрШаблон(НСтр("ru = 'Версия новой компоненты %1'"), ВерсияКомпоненты);
				
				ОткрытьФормуВыводаОшибки(ПараметрыФормы, Истина);
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ПроверитьОбъектыБазыДанных(Отказ)
			
			РезультатПодготовки = МетодСервераБезКонтекста(, "ПодготовкаКонфигурацииКРаботе");
			
			Если РезультатПодготовки.Отказ Тогда
				
				Отказ = Истина;
				
				ПараметрыФормы = НовыеПараметрыФормыВыводаОшибки();
				ЗаполнитьЗначенияСвойств(ПараметрыФормы, РезультатПодготовки);
				ОткрытьФормуВыводаОшибки(ПараметрыФормы, Истина);
				
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ИнициализироватьСтруктуруИнтервалов()
			
			Если СтруктураИнтервалов <> Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураИнтервалов = Новый Структура;
			СтруктураИнтервалов.Вставить("Полученные", НоваяСтруктураИнтервала());
			СтруктураИнтервалов.Вставить("Отправленные", НоваяСтруктураИнтервала());
			СтруктураИнтервалов.Вставить("ЖурналДокументов", НоваяСтруктураИнтервала());
			
		КонецПроцедуры
		
		&НаКлиенте
		Функция НоваяСтруктураИнтервала()
			
			ДатаНачала		 = НачалоДня(ТекущаяДата());
			ДатаОкончания	 = КонецДня(ТекущаяДата());
			
			Результат = Новый Структура;
			Результат.Вставить("ДатаНачала", ДатаНачала);
			Результат.Вставить("ДатаОкончания", ДатаОкончания);
			Результат.Вставить("ОтбиратьПоДатеДокумента", Ложь);
			
			Возврат Результат;
			
		КонецФункции
		
	//} Инициализация
	
	&НаКлиенте
	Процедура НачатьИнициализациюМодуля()
		
		Если Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ИнициализироватьМодуль", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ИнициализироватьМодуль() Экспорт
		
		Отказ = Ложь;
		
		ПроверитьОбъектыБазыДанных(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьЧтоМодульИнтеграцииОпределен(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьИнтернетПодключение(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПодключитьКомпонентуДиадока(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СоздатьОбъектКомпонентыДиадока(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьНаличиеМодуляИнтеграции(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ИнициализироватьСтруктуруИнтервалов();
		
		АвторизоватьсяИЗаполнитьКонтекст(Истина);
		
		НачатьСборСтатистики();
		
		НачатьПроверкуАктуальностиНастройкиФорматовОтправки();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НачатьПроверкуАктуальностиНастройкиФорматовОтправки()
		
		ЕстьНастройкаОтправкиВУстаревшемФормате = Ложь;
		ПодключитьОбработчикОжидания("ПроверитьАктуальностиНастройкиФорматовОтправки", 0.1, Истина);
		
	КонецПроцедуры
	
	// Проверяет настройки отправки документов по всем организациям контекста
	// и, если хотя бы у одной организации есть настройка, позволяющая отправлять
	// документы в устаревших форматах, показывает форму с текстом предупреждения
	// о необходимости изменить настройки отправки.
	//
	// Процедура вызывается при каждом открытии модуля.
	//
	&НаКлиенте
	Процедура ПроверитьАктуальностиНастройкиФорматовОтправки() Экспорт
		
		НастройкиОтправки = НастройкиОтправкиПоОрганизациям();
		
		Для Каждого Элемент Из НастройкиОтправки Цикл
			
			КлючНастройки = Элемент.Значение;
			
			Если ЭтоУстаревшаяНастройкаОтправки(КлючНастройки) Тогда
				ЕстьНастройкаОтправкиВУстаревшемФормате = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНастройкаОтправкиВУстаревшемФормате Тогда
			ПоказатьПредупреждениеОбУстаревшихНастройкахОтправки();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗапуститьМодуль()
		
		УправлениеФормой();
		ПредложитьУстановкуРасширенияКонфигурации();
		
		ПанельРежимовПриСменеСтраницы("", Элементы.ПанельРежимов.ТекущаяСтраница);
		
		МетодКлиента("Модуль_Клиент", "ЗаполнитьИдентификаторыЭДО");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаИзменитьпараметрыПодключенияПрокси(Команда)
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
						"НастройкаПроксиСервера",
						,
						,
						"ОбработчикОткрытияФормыНастройкаПроксиСервера",
						,
						ЭтаФорма);
		
	КонецПроцедуры
					
	&НаСервере
	Функция ПолучитьОписаниеКонфигурацииДляДиадок(ОписаниеКонтекстаРасширения="") 
		
		ОписаниеКонфигурации = Метаданные.Синоним + " ("+Метаданные.Версия+")";
		ОписаниеКонфигурации = ОписаниеКонфигурации + " extention: "+ОписаниеКонтекстаРасширения;
		
		Возврат ОписаниеКонфигурации;
				
	КонецФункции
	
	&НаКлиенте
	Процедура СоздатьОбъектКомпонентыДиадока(Отказ)
		
		Попытка
			
			ОбъектКомпоненты = МетодКлиента("Модуль_Клиент", "НовыйОбъектКомпонентыДиадока");
			
		Исключение
			
			Отказ = Истина;
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ПараметрыФормы = НовыеПараметрыФормыВыводаОшибки();
			ПараметрыФормы.ОписаниеОшибки	 = НСтр("ru = 'Ошибка создания объекта внешней компоненты'");
			ПараметрыФормы.Подробности		 = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ОткрытьФормуВыводаОшибки(ПараметрыФормы, Истина);
			
			Возврат;
			
		КонецПопытки;
		
		КонтекстРасширения	 = Платформа.ПараметрыКлиент.УстановкаРасширения.КонтекстРасширения;
		ОписаниеКонфигурации = ПолучитьОписаниеКонфигурацииДляДиадок(КонтекстРасширения);
		
		ОбъектКомпоненты.OneSConfiguration = ОписаниеКонфигурации;
		
		МетодКлиента("Модуль_Клиент", "ЗаполнитьНастройкиИнтернетаКомпонентыДиадока", ОбъектКомпоненты);
		
		КонтекстСервера = НовыйКонтекстСервераДиадок();
		КонтекстСервера.DiadocInvoiceAPI = ОбъектКомпоненты;
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок = КонтекстСервера;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция НовыйКонтекстСервераДиадок()
		
		Результат = Новый Структура;
		Результат.Вставить("DiadocInvoiceAPI");
		Результат.Вставить("DiadocConnection");
		Результат.Вставить("ПредставлениеПользователя");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПроверитьИнтернетПодключение(Отказ)
		
		ПодключениеУстановлено = МетодКлиента("Модуль_Клиент", "ПроверитьИнтернетПодключение");
		
		Если Не ПодключениеУстановлено Тогда
			Отказ = Истина;
			МетодКлиента(, "ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибкиИнтернет"
			, , ЭтаФорма, "ПослеНастройкиИнтернетПодключения");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеНастройкиИнтернетПодключения(НастройкиОбновлены, ДопПараметры) Экспорт
		
		Если НастройкиОбновлены = Истина Тогда
			ИнициализироватьМодуль();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция АвторизоватьсяИЗаполнитьКонтекст(ВходПоПоследнемуСертификату = Ложь) Экспорт
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		МассивНаименованийНастроек= Новый Массив;
		МассивНаименованийНастроек.Добавить("ДиадокПоследнийСертификатПользователя");
		МассивНаименованийНастроек.Добавить("ДиадокПоследнееПредставлениеПользователя");
		
		ПараметрыАвторизации= МетодСервераБезКонтекста(,"ПолучитьНастройкиПользователя", МассивНаименованийНастроек);
		
		Если Лев(ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя, 6) = "login:" Тогда
			Логин = Сред(ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя, 7);
			Режим = "АвторизацияПоЛогину";
		Иначе
			Режим = "АвторизацияПоСертификату";
		КонецЕсли;
		
		
		Если ВходПоПоследнемуСертификату = Истина
			И Режим = "АвторизацияПоСертификату" 
			И НЕ ПустаяСтрока(ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя) Тогда
			
			РезультатАвторизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьDiadocConnection", ПараметрыАвторизации.ДиадокПоследнийСертификатПользователя, ПараметрыАвторизации.ДиадокПоследнееПредставлениеПользователя);
			
			Если РезультатАвторизации.DiadocConnection <> Неопределено Тогда
				
				Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection= 		   РезультатАвторизации.DiadocConnection;
				Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.ПредставлениеПользователя= РезультатАвторизации.ПредставлениеПользователя;
				
				ВыполнитьЛогикуПослеАвторизации();
				
			Иначе
				
				ПараметрыФормы=	Новый Структура;
				ПараметрыФормы.Вставить("Режим"						 , Режим);
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_Авторизация", ПараметрыФормы, ЭтаФорма, "ОбработчикАвторизации");
				
			КонецЕсли;
			
		Иначе
			
			ПараметрыФормы=	Новый Структура;
			ПараметрыФормы.Вставить("Режим"						 , Режим);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_Авторизация", ПараметрыФормы, ЭтаФорма, "ОбработчикАвторизации");
			
		КонецЕсли;
	
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПредложитьУстановкуРасширенияКонфигурации()
		
		Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения И Платформа.ПараметрыКлиент.УстановкаРасширения.НеобходимоУстановить Тогда
			
			ПараметрыФормы= Новый Структура("ТекущяяВерсияРасширенияДиадок", Платформа.ПараметрыКлиент.УстановкаРасширения.ТекущяяВерсияРасширенияДиадок);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаУстановкиРасширенияКонфигурации", ПараметрыФормы, ЭтаФорма, "ОбработчикЗапросУстановкиРасширенияКонфигурации");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	//{ ОБНОВЛЕНИЕ МОДУЛЯ
	
	&НаКлиенте
	Процедура ПроверитьНаАктуальностьВерсиюМодуля()
		
		ТребуетсяОбновление = Ложь;
		ЕстьНезаблокированныеОрганизации = ЗначениеЗаполнено(МетодКлиента("Модуль_Клиент", "ПолучитьОрганизацииНезаблокированныеПоAPI"));
		
		Если ЕстьНезаблокированныеОрганизации Тогда
			
			ТекущаяВерсияМодуля = МетодСервераБезКонтекста(, "ВерсияОбработки");
			
			// Если в версии обработки есть не только цифры, значит модуль кастомный
			МодульКастомный = МетодКлиента("Модуль_Клиент", "ТолькоЦифрыВСтроке", СтрЗаменить(ТекущаяВерсияМодуля, ".", "")) = Ложь;
			
			Если Не МодульКастомный Тогда
				
				ПрочитатьАктуальнуюВерсиюМодуля();
				
				Если ТипЗнч(АктуальнаяВерсияМодуля) = Тип("Строка") Тогда
					ТребуетсяОбновление = МетодКлиента("Модуль_Клиент", "СравнитьВерсии", АктуальнаяВерсияМодуля, ТекущаяВерсияМодуля) > 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьКнопкиОбновленияМодуля(ТребуетсяОбновление);
		
	КонецПроцедуры
	
	&НаКлиенте
	//читаем из файла на сервере актуальную версию модуля
	Процедура ПрочитатьАктуальнуюВерсиюМодуля()
		
		АктуальнаяВерсияМодуля = 0;
		
		Попытка
			ФайлРезультата = МетодКлиента("Модуль_Клиент", "ЗапросНаПолучениеФайла", "https://diadoc-api.kontur.ru/1c-addin/versionDD.xml");
			Если ФайлРезультата = Неопределено Тогда 
				Возврат;
			КонецЕсли;	
		Исключение
			МетодСервера(,"ОбработатьОшибкуНаСервере", "ОшибкаПолученияФайла", ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		ФайлАктуальныхВерсий = Новый ЧтениеXML;
		ФайлАктуальныхВерсий.ОткрытьФайл(ФайлРезультата);
		
		ЭтоНовыйРелиз = Ложь;
		
		Пока ФайлАктуальныхВерсий.Прочитать() Цикл
			
			Если ФайлАктуальныхВерсий.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				//обработка блока новых релизов
				Если ФайлАктуальныхВерсий.Имя = "Active" Тогда
					ЭтоНовыйРелиз = Истина;
				ИначеЕсли ФайлАктуальныхВерсий.Имя = "UF" И ЭтоНовыйРелиз Тогда
					АктуальнаяВерсияМодуля = ФайлАктуальныхВерсий.ПолучитьАтрибут("version"); //формат "5_20_01"
					АктуальнаяВерсияМодуля = СтрЗаменить(АктуальнаяВерсияМодуля, "_", ".");
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФайлАктуальныхВерсий.Закрыть();
		УдалитьФайлы(ФайлРезультата);
		
	КонецПроцедуры	
	
	&НаСервере
	Процедура УстановитьВидимостьКнопкиОбновленияМодуля(ВерсияИзменилась)
		
		Элементы.КнопкаСкачатьОбновление.Видимость		= ВерсияИзменилась;		
		Элементы.ДекорацияИсторияОбновлений.Видимость	= НЕ ВерсияИзменилась;
		Элементы.ДекорацияКартинкаИстории.Видимость		= НЕ ВерсияИзменилась;
		
	КонецПроцедуры
	
	&НаКлиенте
	//алгоритм действий для обновления модуля при различных вариантах расположения модуля
	Процедура СкачатьОбновление(Команда)
		
		ТекущаяВерсияМодуля = МетодСервераБезКонтекста(,"ВерсияОбработкиБезНомераСборки");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НоваяВерсия",	 АктуальнаяВерсияМодуля);
		ПараметрыФормы.Вставить("ТекущаяВерсия", ТекущаяВерсияМодуля);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаНовости", ПараметрыФормы, ЭтаФорма);	
		
	КонецПроцедуры
	
	//} ОБНОВЛЕНИЕ МОДУЛЯ
	
//} ЗАПУСК

//{ НАСТРОЙКИ
	
	&НаКлиенте
	Процедура ОбновитьПараметрыПрокси()
		
		НастройкиПрокси = МетодСервераБезКонтекста(, "НастройкиПроксиСервера");
		
		ВариантыИспользованияПрокси = МетодКлиента("Модуль_Клиент", "ВариантыИспользованияПроксиСервера");
		
		ВариантПредставление = ВариантыИспользованияПрокси.НайтиПоЗначению(НастройкиПрокси.ВариантИспользования).Представление;
		
		Элементы.ЗначениеАдресПроксиСервера.Заголовок	 = НастройкиПрокси.Адрес;
		Элементы.ЗначениеПортПроксиСервера.Заголовок	 = НастройкиПрокси.Порт;
		Элементы.ЗначениеЛогинПроксиСервера.Заголовок	 = НастройкиПрокси.Логин;
		Элементы.ЗначениеВариантИспользованияПроксиСервера.Заголовок = ВариантПредставление;
		
		Если ЗначениеЗаполнено(НастройкиПрокси.Пароль) Тогда
			Элементы.ЗначениеПарольПроксиСервера.Заголовок = "***";
		Иначе
			Элементы.ЗначениеПарольПроксиСервера.Заголовок = "";
		КонецЕсли;
		
	КонецПроцедуры 
	
	&НаСервере
	Процедура ОбновитьОпции()
		
		ТочностьЦеныСФ = ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ТочностьЦеныСФ_Диадок");
		
		Если НЕ ЗначениеЗаполнено(ТочностьЦеныСФ) Тогда
			ТочностьЦеныСФ = 2;
			СохранитьЗначенияОпцийНаСервере(ТочностьЦеныСФ);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьПредставленияФормированияПечатныхФорм(СтрокаТаблицы)
		
		Если СтрокаТаблицы.СпособФормированияАкта = 0 Тогда
			СтрокаТаблицы.СпособФормированияАктаПредставление = "Использовать форму рекомендованную ФНС";
		Иначе
			СтрокаТаблицы.СпособФормированияАктаПредставление = "Использовать внешнюю печатную форму";
		КонецЕсли;
		
		Если СтрокаТаблицы.ФормироватьСчетНаОсновании = Неопределено Тогда
			ФормироватьСчетНаОсновании=	0;
		Иначе
			ФормироватьСчетНаОсновании=	СтрокаТаблицы.ФормироватьСчетНаОсновании;
		КонецЕсли;	
		
		ЗначениеСпискаФормироватьСчетНаОсновании=	СписокФормироватьСчетНаОсновании.НайтиПоЗначению(ФормироватьСчетНаОсновании);
		
		Если ФормироватьСчетНаОсновании = 2 Тогда
			СтрокаТаблицы.СпособФормированияСчетаПредставление=	ЗначениеСпискаФормироватьСчетНаОсновании.Представление;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВнешняяПечатнаяФормаСчета) Тогда
				СтрокаТаблицы.СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать стандартную форму";
			Иначе
				СтрокаТаблицы.СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать внешнюю печатную форму";
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьДанныеСтраницыНастроек()
		
		КонтекстДиадока = Платформа.ПараметрыКлиент.КонтекстДиадока;
		
		КэшФорматДокументовНаОтправку = НастройкиОтправкиПоОрганизациям();
		
		СписокПочтовыхЯщиков.Очистить();
		
		Для Каждого Стр Из КонтекстДиадока Цикл
			
			Стр2 = СписокПочтовыхЯщиков.Добавить();
			Стр2.Организация 		= Стр.Организация;
			Стр2.НаименованиеЯщика 	= Стр.Box.Name;
			Стр2.idBox 				= Стр.BoxId;
			Стр2.Заблокирована		= Стр.ЗаблокированаПоAPI;
			
			Стр2.ФорматДокументовНаОтправку = КэшФорматДокументовНаОтправку[Стр.Организация];
			
			ДанныеОрганизации = Стр.ДанныеОрганизации;
			Стр2.ИдентификаторУчастникаЭДО = ДанныеОрганизации.FnsParticipantId
			
		КонецЦикла;

		ОбновитьОпции();
				
	КонецПроцедуры	
	
	// Получает настройки отправки документов по всем организациям контекста.
	// 
	// Возвращаемое значение:
	//  Соответствие:
	//    * Ключ - СправочникСсылка - ссылка на организацию
	//    * Значение - Строка - значение настройки "ДиадокФормироватьУПД"
	//
	&НаКлиенте
	Функция НастройкиОтправкиПоОрганизациям()
		
		ОрганизацииВ1С = СопоставленныеОрганизации();
		
		Результат = МетодСервера(, "КлючиНастроекОтправки", ОрганизацииВ1С);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОчиститьФильтрОрганизация()
		ОрганизацияID = "";
		ПодразделениеID = "";
		ВключатьПодчиненныеПодазделения = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОчиститьФильтрКонтрагент()
		КонтрагентID = "";
	КонецПроцедуры 
	
	&НаКлиенте
	Процедура ИзменитьВидТаблицыДокументов(Вид)
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
			Таблица= ТаблицаДокументовВходящих;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда 
			Таблица= ТаблицаДокументовИсходящих;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда 
			Таблица= ТаблицаДокументовВнутренних;
		КонецЕсли;
		
		//pcru
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета Тогда
			Таблица= pcru_ТаблицаНеотработанныеДокументы_Счета;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие Тогда 
			Таблица= pcru_ТаблицаНеотработанныеДокументы_Прочие;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок Тогда 
			Таблица= pcru_ТаблицаВРаботеДокументы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда 
			Таблица= pcru_ТаблицаОтработанныеДокументы;
		КонецЕсли;
		//pcru
		
		Если Вид = "Классический" Тогда
					
			Для Каждого Строка ИЗ Таблица Цикл
				Строка.ИндексИконкиПакета= 0;
			КонецЦикла;
									
		ИначеЕсли Вид = "Пакеты" Тогда	
			
			Для Каждого Строка ИЗ Таблица Цикл
				Строка.ИндексИконкиПакета= Строка.ИндексИконкиПакетаКопия;
			КонецЦикла;
						
			Таблица.Сортировать("MessageId, ИндексИконкиПакета, ПозицияСортировки, ДатаУчета Убыв");
			
		КонецЕсли;
			
	КонецПроцедуры
	
//} НАСТРОЙКИ

//{ ОБРАБОТЧИК
	
	&НаКлиенте
	Процедура ОбработчикАвторизации(РезультатАвторизации, ДополнительныеПараметры) Экспорт
		
		Если РезультатАвторизации = Неопределено Тогда
			
			Если НЕ Объект.ПараметрыКлиентСервер.ВызовИзРасширения Тогда
				Закрыть();
			Иначе
				Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок= Неопределено;
				Платформа.ПараметрыКлиент.КонтекстДиадока.Очистить();	
			КонецЕсли;
			
			Возврат;
		Иначе 	
			Организация		 = Неопределено;
			ОрганизацияID	 = "";
			Платформа.ПараметрыКлиент.КонтекстДиадока.Очистить();
		КонецЕсли;
		
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection = РезультатАвторизации.DiadocConnection;
		Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.ПредставлениеПользователя = РезультатАвторизации.ПредставлениеПользователя;

		ВыполнитьЛогикуПослеАвторизации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыОшибки(РезультатВыбора, ЗакрытьФорму) Экспорт
		
		Если ЗакрытьФорму = Истина Тогда
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВыборОрганизации(РезультатВыбора, Элемент) Экспорт
		
		Если РезультатВыбора <> Неопределено тогда 
			
			Организация= РезультатВыбора.Значение;
			
			ОрганизацияКонтрагентыПриИзменении(Элемент);
									
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикБлокировкаКонтрагента(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
			Если Organization = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Counteragent = Organization.GetCounteragentById(ДополнительныеПараметры.ID);
			
			Попытка
				
				СтарыйСтатус = Counteragent.GetStatus();
				Counteragent.BreakWithCounteragent("");
				
			Исключение 
				
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с контрагентом");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось заблокировать контрагента");
				ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);

				Возврат;
				
			КонецПопытки;
			
			Counteragent = Organization.GetCounteragentById(ДополнительныеПараметры.ID);
			
			ДополнительныеПараметры.ТекущийСтатус				= Counteragent.GetStatus();
			ДополнительныеПараметры.ТекущийСтатусРасшифровка	= РасшифровкаТекущегоСостоянияВзаимоотношенийСервер(ДополнительныеПараметры.ТекущийСтатус);
			
			Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, СтарыйСтатус);
			Если ДополнительныеПараметры.ТекущийСтатус <> СтарыйСтатус Тогда
				Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, ДополнительныеПараметры.ТекущийСтатус);
			КонецЕсли;
			
			СписокАктивныеПриАктивизацииСтроки(Элементы);
			
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОбновлениеСпискаДокументов()
		
		Направление   = ПолучитьЗначениеНаправления();
		ПериодВыборки = ПолучитьТекущийПериод();
		
		Если Направление = "OutboundWaitingForSenderSignature" Тогда
			ТЧ = ТаблицаДокументовВнутренних;
		ИначеЕсли Направление = НаправленияДокументов().Исходящий Тогда
			ТЧ = ТаблицаДокументовИсходящих;
		Иначе
			ТЧ = ТаблицаДокументовВходящих;
		КонецЕсли;
		
		//pcru
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета Тогда
			ТЧ = pcru_ТаблицаНеотработанныеДокументы_Счета;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие Тогда
			ТЧ = pcru_ТаблицаНеотработанныеДокументы_Прочие;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок Тогда
			ТЧ = pcru_ТаблицаВРаботеДокументы;
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда
			ТЧ = pcru_ТаблицаОтработанныеДокументы;
		КонецЕсли;
		//pcru
		
		ТЧ.Очистить();
		
		МассивДокументов = МетодКлиента("Модуль_Клиент", "ВернутьВыборкуРНКИСчетовФактурДиадок",
						   ПериодВыборки.ДатаНачала, ПериодВыборки.ДатаОкончания, 
						   Организация, КонтрагентID, ПолучитьПараметрыВыборки());
						   
		ПараметрыПМ = Новый Структура;
		ПараметрыПМ.Вставить("Направление", Направление);
		ПараметрыПМ.Вставить("МассивДокументов", МассивДокументов);
		МетодСервера(, "ОбработкаСобытияПодключаемогоМодуля", "ПриОбновленииСпискаДокументов", ПараметрыПМ);
		
		МассивДокументов = ПараметрыПМ.МассивДокументов;
		
		ДобавленныеДокументы = Новый Соответствие; // запоминаем, данные каких документов уже добавили
		
		
		//pcru
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета ИЛИ 
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие ИЛИ 
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок ИЛИ
			Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда

	        Индекс = МассивДокументов.Количество() - 1; 
			Пока Индекс >= 0 Цикл 
				Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета Тогда
					Если СтрЧислоВхождений(ВРег(МассивДокументов[Индекс].ТипДокумента), ВРег("Счет на оплату")) < 1 Тогда
						МассивДокументов.Удалить(Индекс);
					ИначеЕсли pcru_СчетЗагруженВДО(МассивДокументов[Индекс].DocumentId) Тогда
						МассивДокументов.Удалить(Индекс);
					КонецЕсли;
					
				ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие Тогда
					Если СтрЧислоВхождений(ВРег(МассивДокументов[Индекс].ТипДокумента), ВРег("Счет на оплату")) > 0 Тогда
						МассивДокументов.Удалить(Индекс);
					ИначеЕсли МассивДокументов[Индекс].Свойство("ПервичныйДокумент") И ЗначениеЗаполнено(МассивДокументов[Индекс].ПервичныйДокумент) Тогда
						МассивДокументов.Удалить(Индекс);
					ИначеЕсли СтрЧислоВхождений(МассивДокументов[Индекс].СостояниеДокументооборота, "Подписан") > 0 ИЛИ СтрЧислоВхождений(МассивДокументов[Индекс].СостояниеДокументооборота, "Документооборот завершен") > 0 Тогда
						МассивДокументов.Удалить(Индекс);
					ИначеЕсли СтрЧислоВхождений(ВРег(МассивДокументов[Индекс].ТипДокумента), ВРег("акт сверки")) > 0 И СтрЧислоВхождений(МассивДокументов[Индекс].СостояниеДокументооборота, "Требуется подпись") > 0 Тогда
						МассивДокументов.Удалить(Индекс);
					КонецЕсли;

				ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок Тогда
					Если СтрЧислоВхождений(ВРег(МассивДокументов[Индекс].ТипДокумента), ВРег("Счет на оплату")) > 0 Тогда
						МассивДокументов.Удалить(Индекс);
					ИначеЕсли СтрЧислоВхождений(МассивДокументов[Индекс].СостояниеДокументооборота, "Требуется подпись") = 0 Тогда
						МассивДокументов.Удалить(Индекс);
					КонецЕсли;
					
				ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда
					Если СтрЧислоВхождений(ВРег(МассивДокументов[Индекс].ТипДокумента), ВРег("Счет на оплату")) > 0 Тогда
						Если НЕ pcru_СчетЗагруженВДО(МассивДокументов[Индекс].DocumentId) Тогда
							МассивДокументов.Удалить(Индекс);
						КонецЕсли;
					Иначе
						Если НЕ (СтрЧислоВхождений(МассивДокументов[Индекс].СостояниеДокументооборота, "Подписан") > 0 ИЛИ СтрЧислоВхождений(МассивДокументов[Индекс].СостояниеДокументооборота, "Документооборот завершен") > 0) Тогда
							МассивДокументов.Удалить(Индекс);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Индекс = Индекс - 1; 
			КонецЦикла;
		КонецЕсли;		
		//pcru
		
		
		Для Каждого СтруктураДокумента Из МассивДокументов Цикл
			
			ТекущийDocumentId= СтруктураДокумента.DocumentId;
			
			//pcru
			//ЗаполнитьРегистрСостоянийДиадок(ТекущийDocumentId);
			//ТекСостояние = ПолучитьСостояние(ТекущийDocumentId);
			//СтруктураДокумента.Вставить("PCRU_Состояние",ТекСостояние);
			//Pcru

			Если ДобавленныеДокументы[ТекущийDocumentId] = Истина Тогда
				// Дубли документов могут появиться, например, если документ отправлен в подразделение Диадока.
				// В этом случае документ будет отображаться дважды: для головной организации и организации, 
				// связанной с подразделением Диадока
				Продолжить;
			КонецЕсли;
			
			ДобавленныеДокументы.Вставить(ТекущийDocumentId, Истина);
			
			//pcru
			СтрокаТЧ = ТЧ.Добавить();
			//pcru
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураДокумента);

		КонецЦикла;
		
		МассивДокументов = Неопределено;
		
		ТЧ_Заполнить_ДатаУчета(ТЧ);
		
		ТЧ.Сортировать("ДатаУчета Убыв, MessageId, ПозицияСортировки");
		
		ТЧ_Заполнить_ИндексИконкиПакета(ТЧ);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТЧ_Заполнить_ДатаУчета(ТЧ)
		
		// Т.к. в качестве даты учета используется ConfirmationDate или Timestamp, для сообщения в целом берем максимальную дату.
		
		КэшДатыУчета = Новый Соответствие;
		
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			
			ДатаУчета = КэшДатыУчета[СтрокаТЧ.MessageId];
			ДатаУчета = ?(ДатаУчета = Неопределено, '00010101', ДатаУчета);
			
			КэшДатыУчета.Вставить(СтрокаТЧ.MessageId, Макс(СтрокаТЧ.ДатаУчета, ДатаУчета));
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			СтрокаТЧ.ДатаУчета = КэшДатыУчета[СтрокаТЧ.MessageId];
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТЧ_Заполнить_ИндексИконкиПакета(ТЧ)
	
	ВГраница = ТЧ.Количество() - 1;
	
	Для ИндексСтроки = 0 ПО ВГраница Цикл
		
		СтрокаТЧ = ТЧ[ИндексСтроки];
		
		MessageId = СтрокаТЧ.MessageId;
		
		MessageIdВыше = ?(ИндексСтроки - 1 > -1		  , ТЧ[ИндексСтроки-1].MessageId, Неопределено);
		MessageIdНиже = ?(ИндексСтроки + 1 <= ВГраница, ТЧ[ИндексСтроки+1].MessageId, Неопределено);
		
		Если MessageId <> MessageIdВыше И MessageId = MessageIdНиже Тогда
			
			СтрокаТЧ.ИндексИконкиПакета = 1; // Начало сообщения
			
		ИначеЕсли MessageId = MessageIdВыше И MessageId = MessageIdНиже Тогда
			
			СтрокаТЧ.ИндексИконкиПакета = 2; // Середина сообщения
			
		ИначеЕсли MessageId = MessageIdВыше И MessageId <> MessageIdНиже Тогда
			
			СтрокаТЧ.ИндексИконкиПакета = 3; // Окончание сообщения
			
		КонецЕсли;
		
		СтрокаТЧ.ИндексИконкиПакетаКопия = СтрокаТЧ.ИндексИконкиПакета;
		
	КонецЦикла;	
		
КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораИнтервала(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда 
			
			Если РезультатЗакрытия.ТекущаяСтраница = "СтраницаОтправленныеДиадок" Тогда
				
				Если 	РезультатЗакрытия.ДатаНачала <> СтруктураИнтервалов.Отправленные.ДатаНачала
					ИЛИ РезультатЗакрытия.ДатаОкончания <> СтруктураИнтервалов.Отправленные.ДатаОкончания
					ИЛИ РезультатЗакрытия.ОтбиратьПоДатеДокумента <> СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента
				Тогда
					ЗаполнитьЗначенияСвойств(СтруктураИнтервалов.Отправленные, РезультатЗакрытия);
					ОбновитьЗаголовокИнтервала("Отправленные");
					НачатьОбновлениеСпискаДокументов();
				КонецЕсли;
				
			ИначеЕсли РезультатЗакрытия.ТекущаяСтраница = "СтраницаПолученныеДиадок" Тогда
				
				Если 	РезультатЗакрытия.ДатаНачала <> СтруктураИнтервалов.Полученные.ДатаНачала
					ИЛИ РезультатЗакрытия.ДатаОкончания <> СтруктураИнтервалов.Полученные.ДатаОкончания
					ИЛИ РезультатЗакрытия.ОтбиратьПоДатеДокумента <> СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента
				Тогда
					ЗаполнитьЗначенияСвойств(СтруктураИнтервалов.Полученные, РезультатЗакрытия);
					ОбновитьЗаголовокИнтервала("Полученные");
					НачатьОбновлениеСпискаДокументов();
				КонецЕсли;
				
			ИначеЕсли РезультатЗакрытия.ТекущаяСтраница = "СтраницаЖурналыДокументов" Тогда
				
				Если 	РезультатЗакрытия.ДатаНачала <> СтруктураИнтервалов.ЖурналДокументов.ДатаНачала
					ИЛИ РезультатЗакрытия.ДатаОкончания <> СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания
				Тогда
					ЗаполнитьЗначенияСвойств(СтруктураИнтервалов.ЖурналДокументов, РезультатЗакрытия);
					ОбновитьЗаголовокИнтервалаЖурналаДокументов();
					СформироватьЖурналДокументов();
				КонецЕсли;
				
			КонецЕсли;
						
			//pcru
			Если РезультатЗакрытия.ТекущаяСтраница = "СтраницаПолученныеДиадок" ИЛИ
				 РезультатЗакрытия.ТекущаяСтраница = "pcru_СтраницаНеотработанныеДиадок_Счета" ИЛИ
				 РезультатЗакрытия.ТекущаяСтраница = "pcru_СтраницаНеотработанныеДиадок_Прочие" ИЛИ
				 РезультатЗакрытия.ТекущаяСтраница = "pcru_СтраницаВРаботеДиадок" ИЛИ 
				 РезультатЗакрытия.ТекущаяСтраница = "pcru_СтраницаОтработанныеДиадок" Тогда
				Если 	РезультатЗакрытия.ДатаНачала <> СтруктураИнтервалов.Полученные.ДатаНачала
					ИЛИ РезультатЗакрытия.ДатаОкончания <> СтруктураИнтервалов.Полученные.ДатаОкончания
					ИЛИ РезультатЗакрытия.ОтбиратьПоДатеДокумента <> СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента Тогда
					ЗаполнитьЗначенияСвойств(СтруктураИнтервалов.Полученные, РезультатЗакрытия);
					ОбновитьЗаголовокИнтервала("Полученные");
					pcru_ОбновитьЗаголовокИнтервала("НеотработанныеСчета");
					pcru_ОбновитьЗаголовокИнтервала("НеотработанныеПрочие");
					pcru_ОбновитьЗаголовокИнтервала("ВРаботе");
					pcru_ОбновитьЗаголовокИнтервала("Отработанные");
					НачатьОбновлениеСпискаДокументов();
				Иначе
					pcru_ОбновитьЗаголовокИнтервала("НеотработанныеСчета");
					pcru_ОбновитьЗаголовокИнтервала("НеотработанныеПрочие");
					pcru_ОбновитьЗаголовокИнтервала("ВРаботе");
					pcru_ОбновитьЗаголовокИнтервала("Отработанные");
				КонецЕсли;
			КонецЕсли;
			//pcru
			
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыКарточкиКонтрагента(РезультатЗакрытия, ТекущиеДанные) Экспорт

		Если РезультатЗакрытия.Свойство("ВнесеныИзменения") <> Неопределено И РезультатЗакрытия.ВнесеныИзменения = Истина Тогда
			
			ОтборСтрок=	Новый Структура("ИНН", ТекущиеДанные.ИНН);
			
			ЗаполнитьСписокКонтрагентов();
			
			НайденныеСтроки= СписокАктивные.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.СписокАктивные.ТекущаяСтрока=	НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыПараметрыОтправки(РезультатЗакрытия, ТекущиеДанные) Экспорт

		Если РезультатЗакрытия <> Неопределено Тогда
			
			ОтборСтрок = Новый Структура("Организация", РезультатЗакрытия.Организация);
			НайденныеСтроки = СписокПочтовыхЯщиков.НайтиСтроки(ОтборСтрок);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ФорматДокументовНаОтправку = РезультатЗакрытия.ФормироватьУПД;
			КонецЦикла;
			
			Если ЭтоУстаревшаяНастройкаОтправки(РезультатЗакрытия.ФормироватьУПД) Тогда
				ПоказатьПредупреждениеОбУстаревшихНастройкахОтправки();
			КонецЕсли;
			
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаКомментария(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			ПараметрыПриглашения=	Новый Структура();
			ПараметрыПриглашения.Вставить("ТекущиеДанные", 	ТекущиеДанные);
			ПараметрыПриглашения.Вставить("Комментарий", 	РезультатЗакрытия.Комментарий);
			ПараметрыПриглашения.Вставить("ПутьКФайлу", 	РезультатЗакрытия.ПутьКФайлу);
			
			ОтправитьПринятьПриглашениеКонтрагенту(ПараметрыПриглашения, "ФормаОсновная");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыДобавленияЯщиковПриСтарте(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			ЗаполнитьИерархиюОрганизацийDiadoc();
			ОбновитьКонтекстДиадока();
			ОбновитьДанныеСтраницыНастроек();
			ЗапуститьМодуль();
			
			НачатьПроверкуАктуальностиНастройкиФорматовОтправки();
			
			ПоказатьПанельОкончанияОплаченногоПериода();
			
		Иначе
			СброситьПоследнийСертификатПользователя();
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыДобавленияЯщиков(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			ЗаполнитьИерархиюОрганизацийDiadoc();
			ОбновитьКонтекстДиадока();
			ОбновитьДанныеСтраницыНастроек();
			
			НачатьПроверкуАктуальностиНастройкиФорматовОтправки();
			ПоказатьПанельОкончанияОплаченногоПериода();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикПутьКПодключаемомуМодулюДискЗавершениеВыбораФайла(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПутьКПодключаемомуМодулюДиск = РезультатЗакрытия[0];
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикКомандаСохранитьШаблонПМЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МетодКлиента(,"ВыгрузитьШаблонПодключаемогоМодуля", РезультатВыбора[0]);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикЗаполнитьСписок(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора <> Неопределено Тогда
			ЗаполнитьСписок(Неопределено);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыУведомленияОСтаромФормате(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> "ИзмененыНастройкиОтправки" Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийЭлемент = Элементы.СписокПочтовыхЯщиков;
		
		Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаПустойОтбор;
		ОбновитьДанныеСтраницыНастроек();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыНастройкаПроксиСервера(РезультатЗакрытия, ДопПараметры) Экспорт 
		
		Если РезультатЗакрытия = Истина Тогда
			
			Элементы.НадписьНеобходимоПерезапуститьМодуль.Видимость = Истина;
			
			ОбновитьПараметрыПрокси();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЖурналыДокументовПоказатьПриИзменении(Элемент)
		
		ИдентификаторФункциональности = "Опция_ПоказатьЖурналДокументов";
		
		Если ФункциональностьОграничена(ИдентификаторФункциональности) Тогда
			
			ЖурналыДокументовПоказать = Ложь;
			
			ПоказатьПредупреждениеОбОграниченнииФункциональности(ИдентификаторФункциональности);
									
			Возврат;
			
		КонецЕсли;
		
		Элементы.СтраницаЖурналыДокументов.Видимость = ЖурналыДокументовПоказать;
		
		ДобавитьСтатистику_ИзменилиПоказатьЖурналДокументов();
		
	КонецПроцедуры
	
	// Вызывается из формы "ФормаВыводаHTMLДокумента"
	&НаКлиенте
	Процедура ОбработчикПровестиДиагностику(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
			
		МетодКлиента("Модуль_Клиент", "ПровестиКонтурДиагностику");
		
	КонецПроцедуры //ОбработчикПровестиДиагностику()
	
	&НаКлиенте
	Процедура ОбработчикОткрытьОнлайнЧат(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
					
		МетодКлиента("Модуль_Клиент", "ОткрытьОнлайнЧат");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтправитьEmail(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
		
		МетодКлиента("Модуль_Клиент", "НаписатьПисьмоВТехПоддержку");
		
	КонецПроцедуры
	
	// Обработчик ожидания, который запускает отправку стека метрик
	&НаКлиенте
	Процедура ОбработчикОтправитьСтатистику()
		
		МетодКлиента("Модуль_Клиент", "Метрики_Отправить");
						
	КонецПроцедуры
	
	
//} ОБРАБОТЧИК

//{ КОМАНДЫ

	&НаКлиенте
	Процедура КомандаЗагрузитьИОтправить(Команда) Экспорт 
		
		ИдентификаторФункциональности = "ЗагрузитьИОтправить";
		Если ФункциональностьОграничена(ИдентификаторФункциональности) Тогда
			ПоказатьПредупреждениеОбОграниченнииФункциональности(ИдентификаторФункциональности);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ОтправкаФайловСтарыйИнтерфейс", ОтправкаФайловСтарыйИнтерфейс);
		ПараметрыФормы.Вставить("ЕстьНастройкаОтправкиВУстаревшемФормате", ЕстьНастройкаОтправкиВУстаревшемФормате);
		
		МетодКлиента(, "ОткрытьФормуОбработки", "Форма_Выгрузка", ПараметрыФормы, ЭтаФорма);
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовСоздать(Команда)
		
		Если ТекущийЭлемент.Имя = "ТаблицаДокументовРеализацияТоваровУслуг" Тогда
			РеализацияТоваровУслугПредставление = МетодСервераБезКонтекста(, "ПредставлениеДокументов").РеализацияТоваровУслуг;
			ИмяНовойФормы = "Документ." + РеализацияТоваровУслугПредставление + ".ФормаОбъекта";
		ИначеЕсли ТекущийЭлемент.Имя = "ТаблицаДокументовСчетФактураВыданный" Тогда
			СчетФактураВыданныйПредставление = МетодСервераБезКонтекста(, "ПредставлениеДокументов").СчетФактураВыданный;
			ИмяНовойФормы = "Документ." + СчетФактураВыданныйПредставление + ".ФормаОбъекта";
		КонецЕсли;
		
		МетодКлиента(, "ОткрытьФормуОбъектаИБ", , ИмяНовойФормы);
		СформироватьЖурналДокументов();
		
		ДобавитьСтатистику_НажалиДобавитьРеализациюВЖурналеДокументов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовИзменить(Команда)
		
		ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			МетодКлиента(, "ОткрытьФормуОбъектаИБ", ТекущиеДанные.Ссылка);
			СформироватьЖурналДокументов();
		КонецЕсли;
		
		ДобавитьСтатистику_НажалиИзменитьВЖурналеДокументов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовУдалить(Команда)
		
		Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
			СсылкаНаДокумент=	Элементы[ТекущийЭлемент.Имя].ТекущиеДанные.Ссылка;
			ПометитьДокументНаУдаление(СсылкаНаДокумент);
			ОтобразитьИзменениеДанных(СсылкаНаДокумент, ВидИзмененияДанных.Изменение);
			СформироватьЖурналДокументов();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовУстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"			 	  , СтруктураИнтервалов.ЖурналДокументов.ДатаНачала);
		ПараметрыФормы.Вставить("ДатаОкончания"			 	  , СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания);
		ПараметрыФормы.Вставить("ТекущаяСтраница"			  , Элементы.ПанельРежимов.ТекущаяСтраница.Имя);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовПровести(Команда)
		
		Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
			СсылкаНаДокумент=	Элементы[ТекущийЭлемент.Имя].ТекущиеДанные.Ссылка;
			Если ПровестиОтменитьДокумент(СсылкаНаДокумент, "Проведение") Тогда
				ОтобразитьИзменениеДанных(СсылкаНаДокумент, ВидИзмененияДанных.Изменение);
				СформироватьЖурналДокументов();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаТаблицаЖурналаДокументовОтменаПроведения(Команда)
		
		Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
			СсылкаНаДокумент=	Элементы[ТекущийЭлемент.Имя].ТекущиеДанные.Ссылка;
			Если ПровестиОтменитьДокумент(СсылкаНаДокумент, "ОтменаПроведения") Тогда
				ОтобразитьИзменениеДанных(СсылкаНаДокумент, ВидИзмененияДанных.Изменение);
				СформироватьЖурналДокументов();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаПолученныеДиадокКоманднаяПанельУстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"			 	  , СтруктураИнтервалов.Полученные.ДатаНачала);
		ПараметрыФормы.Вставить("ДатаОкончания"			 	  , СтруктураИнтервалов.Полученные.ДатаОкончания);
		ПараметрыФормы.Вставить("ОтбиратьПоДатеДокумента"	  , СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента);
		ПараметрыФормы.Вставить("ТекущаяСтраница"			  , Элементы.ПанельРежимов.ТекущаяСтраница.Имя);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаОтправленныеДиадокКоманднаяПанельУстановитьИнтервал(Команда)
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("ДатаНачала"			 	  , СтруктураИнтервалов.Отправленные.ДатаНачала);
		ПараметрыФормы.Вставить("ДатаОкончания"			 	  , СтруктураИнтервалов.Отправленные.ДатаОкончания);
		ПараметрыФормы.Вставить("ОтбиратьПоДатеДокумента"	  , СтруктураИнтервалов.Отправленные.ОтбиратьПоДатеДокумента);
		ПараметрыФормы.Вставить("ТекущаяСтраница"			  , Элементы.ПанельРежимов.ТекущаяСтраница.Имя);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораИнтервала", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораИнтервала");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ГрупповаяОбработкаКонтрагентовОткрыть(Команда)
		ТекДанные = Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		Если Organization = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("Контрагенты", СписокАктивные);

		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработкаКонтрагентов", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыКарточкиКонтрагента", ТекДанные);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаОткрытьКарточкуКонтрагента(Команда)
		
		ТекДанные = Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Organization = МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		Если Organization = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("СписокКонтрагентовВ1С", ТекДанные.СписокКонтрагентовВ1С);
		ПараметрыФормы.Вставить("CounteragentID"	   , ТекДанные.ID);
		ПараметрыФормы.Вставить("FnsParticipantId"	   , ТекДанные.FnsParticipantId);
		ПараметрыФормы.Вставить("НаименованиеДД"	   , ТекДанные.Контрагент + ?(ПустаяСтрока(ТекДанные.ИНН), "", " (" + ТекДанные.ИНН) + ?(ПустаяСтрока(ТекДанные.КПП), "", "/" + ТекДанные.КПП) + ")");
		ПараметрыФормы.Вставить("Организация"		   , Организация);
		ПараметрыФормы.Вставить("ИНН"				   , ТекДанные.ИНН);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаКарточкиКонтрагента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыКарточкиКонтрагента", ТекДанные);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаКонтрагентыЗаблокироватьКонтрагента(Команда)
		
		ТекущиеДанные= Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикБлокировкаКонтрагента", ЭтаФорма, ТекущиеДанные);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите заблокировать контрагента?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаКонтрагентыПринятьОтправитьПриглашение(Команда)
		
		ТекущиеДанные= Элементы.СписокАктивные.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ТекущийСтатус = "InvitesMe" Тогда
			
			ПараметрыПриглашения=	Новый Структура();
			ПараметрыПриглашения.Вставить("ТекущиеДанные", 	ТекущиеДанные);
			ПараметрыПриглашения.Вставить("Комментарий", 	"");
			ПараметрыПриглашения.Вставить("ПутьКФайлу", 	"");
			
			ОтправитьПринятьПриглашениеКонтрагенту(ПараметрыПриглашения, "ФормаОсновная");
			
		ИначеЕсли ТекущиеДанные.ТекущийСтатус = "RejectsMe" 
			ИЛИ ТекущиеДанные.ТекущийСтатус = "IsRejectedByMe" Тогда
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("Заголовок",	"Отправка приглашения");
			ПараметрыФормы.Вставить("Комментарий", 	"Предлагаем обмениваться электронными документами через систему " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + ".");
			ПараметрыФормы.Вставить("Режим", 		"ОтправкаПриглашения");
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментария", ТекущиеДанные);

		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаКонтрагентыНайтиВДиадоке(Команда)
		
		ФормаПоискаКонтрагента=									МетодКлиента(,"ПолучитьФормуОбработки", "ФормаПоискаИПриглашенияКонтрагента");
		ФормаПоискаКонтрагента.Organization=					МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", Организация);
		ФормаПоискаКонтрагента.Открыть();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаДобавщитьЯщикДиадок(Команда)
		
		СписокДобавленныхIdBox=	Новый СписокЗначений;
		Для каждого Ящик Из СписокПочтовыхЯщиков Цикл
			СписокДобавленныхIdBox.Добавить(Ящик.IdBox);
		КонецЦикла;
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("СписокДобавленныхIdBox", СписокДобавленныхIdBox);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДобавлениеЯщиков", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыДобавленияЯщиков");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаУдалитьЯщикДиадок(Команда)
		
		ТекСтрока = Элементы.СписокПочтовыхЯщиков.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		МетодСервераБезКонтекста(, "РазорватьСвязьСОрганизациейСервиса", ТекСтрока.Организация);
	
		ц = 0;
		Пока ц < Платформа.ПараметрыКлиент.КонтекстДиадока.Количество() Цикл 
			Если Платформа.ПараметрыКлиент.КонтекстДиадока[ц].Организация = ТекСтрока.Организация Тогда 
				Платформа.ПараметрыКлиент.КонтекстДиадока.Удалить(ц);
			Иначе 
				ц =ц+1;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьИерархиюОрганизацийDiadoc();
		
		Если Текстрока.Организация = Организация Тогда
			Организация= Неопределено;
		КонецЕсли;
		
		ОбновитьДанныеСтраницыНастроек();
		ПоказатьПанельОкончанияОплаченногоПериода();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВходящих");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаОтправленныеДиадокКоманднаяПанельОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовИсходящих");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаВнутренниеДиадокКоманднаяПанельОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВнутренних");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаГрупповаяОбработкаДокументовПодписатьИСоздать(Команда)
		
		Сценарии = СценарииГрупповойОбработки();
		ОткрытьГрупповуюОбработкуВходящихДокументов(Сценарии.ПодписатьИСоздать);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаГрупповаяОбработкаДокументовПодписать(Команда)
		
		Сценарии = СценарииГрупповойОбработки();
		ОткрытьГрупповуюОбработкуВходящихДокументов(Сценарии.Подписать);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаГрупповаяОбработкаДокументовСопоставить(Команда)
		
		Сценарии = СценарииГрупповойОбработки();
		ОткрытьГрупповуюОбработкуВходящихДокументов(Сценарии.Сопоставить);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаГрупповаяОбработкаДокументовСохранитьНаДиск(Команда)
		
		Сценарии = СценарииГрупповойОбработки();
		ОткрытьГрупповуюОбработкуВходящихДокументов(Сценарии.СохранитьНаДиск);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаГрупповаяОбработкаДокументовСоздать(Команда)
		
		Сценарии = СценарииГрупповойОбработки();
		ОткрытьГрупповуюОбработкуВходящихДокументов(Сценарии.Создать);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОткрытьГрупповуюОбработкуВходящихДокументов(ТекущийСценарий)
		
		ИдентификаторФункциональности = "ГрупповаяОбработка_" + ТекущийСценарий;
		
		Если ФункциональностьОграничена(ИдентификаторФункциональности) Тогда
			ПоказатьПредупреждениеОбОграниченнииФункциональности(ИдентификаторФункциональности);
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Режим", 			"");
		ПараметрыФормы.Вставить("ТекущийСценарий",	ТекущийСценарий);
		ПараметрыФормы.Вставить("ТекущийПериод", 	ПолучитьТекущийПериод());
		ПараметрыФормы.Вставить("КонтрагентID", 	КонтрагентID);
		ПараметрыФормы.Вставить("ПараметрыВыборки", ПолучитьПараметрыВыборки());
		ПараметрыФормы.Вставить("Организация", 		Организация);
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаГрупповаяОбработка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаНастроитьПараметрыОтправки(Команда)
		// Вставить содержимое обработчика.
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СохранитьЗначенияОпций(Команда)
		
		СохранитьЗначенияОпцийНаСервере(ТочностьЦеныСФ);
		
		ДобавитьСтатистику_ИзменениеТочностьЦеныСФ();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СохранитьЗначенияОпцийНаСервере(ТочностьЦеныСФ)
		ХранилищеОбщихНастроек.Сохранить("НастройкаОпций_Диадок", "ТочностьЦеныСФ_Диадок", ТочностьЦеныСФ);
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УдалитьУстановитьРасширениеКонфигурации(Команда)
		
		МетодКлиента("Модуль_Клиент","ПодтверждениеВыполненияОперации", "ОбработчикУдалитьУстановитьРасширениеКонфигурации", ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикУдалитьУстановитьРасширениеКонфигурации(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
			ОбработчикЗапросУстановкиРасширенияКонфигурации(Истина, Новый Структура("ТолькоУдалить", Платформа.ПараметрыКлиент.УстановкаРасширения.РасширениеУжеУстановлено));
			НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаПроверитьПодключениеПМ(Команда)
		
		ТекстСообщения = НСтр("ru = 'Подключаемый модуль успешно подключен'");
		
		Попытка
			
			МетодСервераБезКонтекста( ,"ПроверитьПодключениеПМ");
			
		Исключение
			
			Если РежимОтладкиСервера Тогда
				ВызватьИсключение;
			КонецЕсли;
			
			Ошибка = ИнформацияОбОшибке();
			ТекстСообщения = КраткоеПредставлениеОшибки(Ошибка);
			
		КонецПопытки;
		
		ПоказатьПредупреждение(
			, ТекстСообщения
			, 60
			, НСтр("ru = 'Инициализация подключаемого модуля'"));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаВыгрузитьСерверныеМодули(Команда)
		
		Если Не ЗначениеЗаполнено(КаталогМодулейСервера) Тогда
			Возврат;
		КонецЕсли;
		
		МетодСервераБезКонтекста(, "ВыгрузитьВложенныеОбработки", КаталогМодулейСервера);
		
		ТекстОповещения = НСтр("ru = 'Выгрузка модулей завершена.'");
		ПоказатьОповещениеПользователя(ТекстОповещения);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КомандаСохранитьШаблонПМ(Команда)
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.МножественныйВыбор= Ложь;
		ДиалогВыбораФайла.Фильтр = "Внешняя обработка (*.epf)|*.epf";
		ДиалогВыбораФайла.ПолноеИмяФайла= "ПодключаемыйМодульДиадок.epf";
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработчикКомандаСохранитьШаблонПМЗавершение", ЭтаФорма));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВидПакеты(Команда)
		
		ИзменитьВидТаблицыДокументов("Пакеты");
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовСортироватьАЯ(Команда)
		
		ИзменитьВидТаблицыДокументов("Классический");
		СортироватьТаблицуДокументов("Возр");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовСортироватьЯА(Команда)
		
		ИзменитьВидТаблицыДокументов("Классический");
		СортироватьТаблицуДокументов("Убыв");
						
	КонецПроцедуры	
	
	&НаКлиенте
	Процедура ПоказатьИнструкцию_ПереотправкаДокументов(Команда)
						
		МетодКлиента("Модуль_Клиент", "ПоказатьИнструкцию_ПереотправкаДокументов");
		
	КонецПроцедуры //ПоказатьИнструкцию_ПереотправкаДокументов()
	
//} КОМАНДЫ

//{ СОБЫТИЯ
	
	&НаКлиенте
	Процедура СтраницыДокументовПриСменеСтраницы(Элемент)
		
		СформироватьЖурналДокументов();
		
		ДобавитьСтатистику_СменилиСтраницуЖурналаДокументов();		
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПанельРежимовПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
		Элементы.ПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность								= Ложь;
		Элементы.ТаблицаДокументовИсходящихОтправленныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность	= Ложь;
		Элементы.ТаблицаДокументовВнутреннихВнутренниеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность		= Ложь;
		
		Элементы.СостояниеДокументооборота.Доступность = Истина;
				
		ОбновитьЗаголовок();
		
		Если ТекущаяСтраница = Элементы.СтраницаНастройка Тогда 
			
			Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаПустойОтбор;
			
			ОбновитьДанныеСтраницыНастроек();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКонтрагенты Тогда 
			
			Если ЗначениеЗаполнено(Организация) Тогда
				Элементы.СтраницыКонтрагенты.ТекущаяСтраница = Элементы.СтраницаКонтрагентыСписок;
			Иначе
				Элементы.СтраницыКонтрагенты.ТекущаяСтраница = Элементы.СтраницаКонтрагентыПодсказкаВыбораОрганизации;
			КонецЕсли;
			
			Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаОтборОрганизацияСтатус;
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				ПодключитьОбработчикОжидания("ВыборОрганизацииИзСписка", 0.3, Истина);
			Иначе
				ПриОткрытииСтраницыКонтрагентов();
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЖурналыДокументов Тогда 
			
			ДобавитьСтатистику_ПереходВЖурналДокументов();
			
			Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаПустойОтбор;
			
			СформироватьЖурналДокументов();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
			
			Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаОтбор;
						
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда
			
			Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаОтбор;
						
			НачатьОбновлениеСпискаДокументов();
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда
			
			Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаОтбор;
						
			Элементы.СостояниеДокументооборота.Доступность = Ложь;
			СостояниеДокументооборота = "0";
						
			НачатьОбновлениеСпискаДокументов();
			
		//PCRU
		ИначеЕсли ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета ИЛИ 
				  ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие ИЛИ 
				  ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок ИЛИ 
				  ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда
			
			Элементы.СтраницыОтбор.ТекущаяСтраница = Элементы.СтраницаОтбор;
						
			НачатьОбновлениеСпискаДокументов();
			
		//PCRU
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ЗначениеНастройкиХранилищаОбщихНастроек(КлючОбъекта, КлючНастроек)
		
		Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);	
		
	КонецФункции
	
	&НаКлиенте
	Процедура СтраницыНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
		Если ТекущаяСтраница = Элементы.Прокси
			И ПустаяСтрока(Элементы.ЗначениеВариантИспользованияПроксиСервера.Заголовок) Тогда
			
			ОбновитьПараметрыПрокси();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытииСтраницыКонтрагентов()
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыСписок;
		Иначе
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыПодсказкаВыбораОрганизации;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ЗаполнитьСписокКонтрагентов", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.ЗагрузитьЗначения(МетодКлиента("Модуль_Клиент","ПолучитьОрганизацииНезаблокированныеПоAPI"));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		Если Платформа = Неопределено Тогда
			ИнициализироватьПлатформу();
		КонецЕсли;
		
		ИнициализироватьСтруктуруИнтервалов();
		
		УстановитьНаименованиеСистемы();
		
		НачатьИнициализациюМодуля();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
		
		Если  НЕ Отказ 
			И НЕ ЗавершениеРаботы Тогда // при завершении сеанса серверные вызовы запрещены
													
			МетодКлиента("Модуль_Клиент", "Метрики_Отправить");
							
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии(ЗавершениеРаботы = Ложь)
		
		ПлатформаПриЗакрытии(ЗавершениеРаботы);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаЖурналаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ТекущиеДанные= Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовПриАктивизацииСтроки(Элемент)
		
		Если НЕ Элементы.СтраницыДокументов.ПодчиненныеЭлементы.Найти(ТекущийЭлемент.Имя) = Неопределено Тогда
			Если НЕ Элементы[ТекущийЭлемент.Имя].ТекущиеДанные = Неопределено Тогда
				
				КнопкаПроведения=		Элементы[Элемент.Имя].КоманднаяПанель.ПодчиненныеЭлементы.Найти(Элемент.Имя + "Провести");
				КнопкаОтменыПроведения=	Элементы[Элемент.Имя].КоманднаяПанель.ПодчиненныеЭлементы.Найти(Элемент.Имя + "ОтменаПроведения");
				
				Если Элементы[Элемент.Имя].ТекущиеДанные.СостояниеДокумента = 0 Тогда
					КнопкаПроведения.Доступность=		Ложь;
					КнопкаОтменыПроведения.Доступность=	Истина;
				ИначеЕсли Элементы[Элемент.Имя].ТекущиеДанные.СостояниеДокумента = 1 Тогда
					КнопкаПроведения.Доступность=		Истина;
					КнопкаОтменыПроведения.Доступность=	Ложь;
				Иначе
					КнопкаПроведения.Доступность=		Ложь;
					КнопкаОтменыПроведения.Доступность=	Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВходящих");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовИсходящихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		Если Поле.Имя = "ТаблицаДокументовИсходящихСостояниеПередачиЧерезРоуминг" Тогда
			
			ТекущиеДанные= Элемент.ТекущиеДанные;
			
			//ТекущаяСтрока= ТаблицаДокументовИсходящих.Получить(ВыбраннаяСтрока);
			
			Если НРег(Лев(ТекущиеДанные.СостояниеПередачиЧерезРоуминг, 6)) = "ошибка" Тогда
				
				ЭДОбъект = ЭлектронныйДокументПоИдентификатору(ТекущиеДанные.BoxID, ТекущиеДанные.DocumentID);
				
				ТекущиеДанные.СостояниеПередачиЧерезРоуминг= МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаРоуминг", ЭДОбъект);
				
				Если НРег(Лев(ТекущиеДанные.СостояниеПередачиЧерезРоуминг, 6)) = "ошибка" Тогда
					
					ПараметрыФормы= Новый Структура("Заголовок, ОписаниеОшибки, Подробности",
					ТекущиеДанные.СостояниеПередачиЧерезРоуминг,
					ТекущиеДанные.СостояниеПередачиЧерезРоуминг,
					ТекущиеДанные.СостояниеПередачиЧерезРоумингДетали);
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовИсходящих");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаДокументовВнутренних");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентIDНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораКонтрагентID(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентIDПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, КонтрагентID);
		
		НачатьОбновлениеСпискаДокументов()
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентIDАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораКонтрагентID(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихПередНачаломИзменения(Элемент, Отказ)
		Отказ = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПередУдалением(Элемент, Отказ)
		Отказ = истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовИсходящихПриАктивизацииСтроки(Элемент)
		
		Элементы.ТаблицаДокументовИсходящихОтправленныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихПриАктивизацииСтроки(Элемент)
		
		Элементы.ПолученныеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПриАктивизацииСтроки(Элемент)
		
		Элементы.ТаблицаДокументовВнутреннихВнутренниеДиадокКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, ПараметрыОповещения, Источник) Экспорт
		
		Если ИмяСобытия = "ИзменениеСтатусаДокументаДиадок" Тогда
			
			ОбработкаОповещенияОбИзмененииСтатусаДокумента(ПараметрыОповещения);
			
		ИначеЕсли ИмяСобытия = "ИзменениеСвязиДД1С"
			И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
			И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
			
			Если ПараметрыОповещения.ТипСущности = "Документ"
				И ПараметрыОповещения.Свойство("Документ1С") Тогда
				
				ОтборСтрок=	Новый Структура;
				ОтборСтрок.Вставить("BoxID", ПараметрыОповещения.BoxID);
				ОтборСтрок.Вставить("DocumentID", ПараметрыОповещения.DocumentID);
				
				НайденныеСтроки=	ТаблицаДокументовВходящих.НайтиСтроки(ОтборСтрок);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДокумента=					НайденныеСтроки[0];
					СтрокаДокумента.ПервичныйДокумент=	ПараметрыОповещения.Документ1С;
				КонецЕсли;
				
				НайденныеСтроки =	ТаблицаДокументовИсходящих.НайтиСтроки(ОтборСтрок);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДокумента						= НайденныеСтроки[0];
					СтрокаДокумента.ПервичныйДокумент	= ПараметрыОповещения.Документ1С;
				КонецЕсли;
								
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "УдалениеДокументов" Тогда
			
			Для каждого ПараметрыДокумента Из ПараметрыОповещения Цикл
				
				ОтборСтрок=	Новый Структура;
				ОтборСтрок.Вставить("BoxID", 		ПараметрыДокумента.BoxID);
				ОтборСтрок.Вставить("DocumentID", 	ПараметрыДокумента.DocumentID);
				
				ТаблицаДокументов=	Неопределено;
				Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
					ТаблицаДокументов=	ТаблицаДокументовВходящих;
				ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда
					ТаблицаДокументов=	ТаблицаДокументовИсходящих;
				ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда
					ТаблицаДокументов=	ТаблицаДокументовВнутренних;
				КонецЕсли;
				
				Если НЕ ТаблицаДокументов = Неопределено Тогда
					НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаДокумента=	НайденныеСтроки[0];
						ИндексСтроки=		ТаблицаДокументов.Индекс(СтрокаДокумента);
						ТаблицаДокументов.Удалить(ИндексСтроки);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ИмяСобытия = "ИзменениеПодразделения" Тогда
			
			ОтборСтрок=	Новый Структура;
			
			ОтборСтрок.Вставить("BoxID", 		ПараметрыОповещения.BoxID);
			ОтборСтрок.Вставить("DocumentID", 	ПараметрыОповещения.DocumentID);
			
			ТаблицаДокументов=	Неопределено;
			Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
				ТаблицаДокументов=	ТаблицаДокументовВходящих;
			ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда
				ТаблицаДокументов=	ТаблицаДокументовИсходящих;
			ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда
				ТаблицаДокументов=	ТаблицаДокументовВнутренних;
			КонецЕсли;
			
			Если НЕ ТаблицаДокументов = Неопределено Тогда
				НайденныеСтроки=	ТаблицаДокументов.НайтиСтроки(ОтборСтрок);
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаДокумента=	НайденныеСтроки[0];
					СтрокаДокумента.Подразделение=	ПараметрыОповещения.DepartmentName;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "ИзмененыНастройкиОтправки" Тогда
			
			ЕстьНастройкаОтправкиВУстаревшемФормате = Ложь;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьЖурналДокументов()
		
		ПараметрыЖурнала= Новый Структура;
		ПараметрыЖурнала.Вставить("НачалоПериода", СтруктураИнтервалов.ЖурналДокументов.ДатаНачала);
		ПараметрыЖурнала.Вставить("КонецПериода", СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания);
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Заполнение списка документов'"));
		
		ЗаполнитьТаблицуДокументов(ПараметрыЖурнала);
		
		ВсегоСтрок		 = ТаблицаЖурналаДокументов.Количество();
		ТекстСостояния	 = НСтр("ru = 'Обновление статуса документов'");
		
		Для Сч = 1 По ВсегоСтрок Цикл
			
			МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
			
			СтрокаТЧ = ТаблицаЖурналаДокументов[Сч-1];
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ИдЯщикОрганизации) И ЗначениеЗаполнено(СтрокаТЧ.ИдДокументДиадок) Тогда
				
				Попытка
					ОбновитьДанныеСтроки(СтрокаТЧ);
				Исключение КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокАктивныеПередНачаломИзменения(Элемент, Отказ)
		Отказ = истина;
		КомандаОткрытьКарточкуКонтрагента("")
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВходящихПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовИсходящихПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПередНачаломИзменения(Элемент, Отказ)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВнутреннихПередУдалением(Элемент, Отказ)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокАктивныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокПочтовыхЯщиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДекорацияВыходНажатие(Элемент)
		
		Элементы.ДекорацияТекущийПользовательВДиадоке.Заголовок = "< Авторизация... >";
		
		ДобавитьСтатистику_НажалиСменитьПользователя();
		
		СброситьПоследнийСертификатПользователя();
		ОчиститьПеременныеМодуля();
						
		ИнициализироватьМодуль();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДекорацияТехподдержкаНажатие(Элемент)
		
		ПоказатьОкноТехническойПоддержки();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДекорацияИсторияОбновленийНажатие(Элемент)
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаНовости",,ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусВзаимоотношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораСтатусВзаимоотношений(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусВзаимоотношенийПриИзменении(Элемент)
		
		ЗаполнитьСписокКонтрагентов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокАктивныеПриАктивизацииСтроки(Элемент)
		
		ТекущиеДанные= Элементы.СписокАктивные.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			Если 	ТекущиеДанные.ТекущийСтатус = "InvitesMe"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "RejectsMe"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "IsRejectedByMe" Тогда
				
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Доступность= Истина;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Доступность= Истина;
				
			Иначе
				
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Доступность= Ложь;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Доступность= Ложь;
				
			КонецЕсли;
			
			Если ТекущиеДанные.ТекущийСтатус = "InvitesMe" Тогда
				
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Заголовок= "Принять приглашение";
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Заголовок= "Принять приглашение";
				
			ИначеЕсли 	ТекущиеДанные.ТекущийСтатус = "RejectsMe"
					ИЛИ ТекущиеДанные.ТекущийСтатус = "IsRejectedByMe" Тогда
					
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыПринятьОтправитьПриглашение.Заголовок= "Отправить новое приглашение";
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыПринятьОтправитьПриглашение.Заголовок= "Отправить новое приглашение";
				
			КонецЕсли;
			
			Если 	ТекущиеДанные.ТекущийСтатус = "IsMyCounteragent"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "InvitesMe"
				ИЛИ ТекущиеДанные.ТекущийСтатус = "IsInvitedByMe" Тогда
				
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыЗаблокироватьКонтрагента.Доступность= Истина;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыЗаблокироватьКонтрагента.Доступность= Истина;
				
			Иначе
				
				Элементы.СписокАктивные.КоманднаяПанель.ПодчиненныеЭлементы.СписокАктивныеКонтрагентыЗаблокироватьКонтрагента.Доступность= Ложь;
				Элементы.СписокАктивные.КонтекстноеМеню.ПодчиненныеЭлементы.СписокАктивныеКонтекстноеМенюГруппа1.ПодчиненныеЭлементы.
				СписокАктивныеКонтекстноеМенюКонтрагентыЗаблокироватьКонтрагента.Доступность= Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТочностьЦеныСФПриИзменении(Элемент)
		
		Если ТочностьЦеныСФ < 2 ИЛИ ТочностьЦеныСФ > 11 Тогда
			
			ТочностьЦеныСФ = 2;
			
			ТекстСообщения = НСтр("ru = 'Точность цены счета-фактуры должна иметь значение от 2 до 11 знаков.'");
			СообщитьПользователю(ТекстСообщения);
									
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ИспользоватьПодключаемыйМодульПриИзменении(Элемент)
		
		ИдентификаторФункциональности = "Опция_ИспользоватьПодключаемыйМодуль";
		Если ФункциональностьОграничена(ИдентификаторФункциональности) Тогда
		
			ИспользоватьПодключаемыйМодуль = Ложь;
		
			ПоказатьПредупреждениеОбОграниченнииФункциональности(ИдентификаторФункциональности);
		
			Возврат;
		
		КонецЕсли;
		
		Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль = ИспользоватьПодключаемыйМодуль;
		
		Если Не ИспользоватьПодключаемыйМодуль Тогда
			РежимСовместимостиФорматов155и820 = Ложь;
			Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РежимСовместимостиФорматов155и820 = Ложь;
		КонецЕсли;
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
		МетодСервераБезКонтекста( ,"СохранитьНастройкиПодключаемогоМодуля");
		МетодСервераБезКонтекста( ,"СброситьКэшМодулей");
		
		НастроитьЭлементыПодключаемогоМодуля();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура РежимСовместимостиФорматов155и820ПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РежимСовместимостиФорматов155и820 = РежимСовместимостиФорматов155и820;
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
		МетодСервераБезКонтекста( ,"СохранитьНастройкиПодключаемогоМодуля");
		МетодСервераБезКонтекста( ,"СброситьКэшМодулей");
		
	КонецПроцедуры
			
	&НаКлиенте
	Процедура ПереключательРасположенияПодключаемогоМодуляПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
		НастроитьЭлементыПодключаемогоМодуля();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюСсылкаПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиПриИзменении(Элемент)
		
		РасположенияПодключаемогоМодуляПриИзменении();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ДиалогВыбораФайла= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.МножественныйВыбор= Ложь;
		ДиалогВыбораФайла.ПолноеИмяФайла= ПутьКПодключаемомуМодулюДиск;
		ДиалогВыбораФайла.Фильтр = "Внешняя обработка (*.epf)|*.epf";
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработчикПутьКПодключаемомуМодулюДискЗавершениеВыбораФайла", ЭтаФорма));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		
		СписокОбработокДереваКонфигурации= МетодКлиента("Модуль_Клиент","СписокОбработокДереваКонфигурации");
		
		Для Каждого ЭлементСписка ИЗ СписокОбработокДереваКонфигурации Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
		
		Элемент.СписокВыбора.Очистить();
		
		СписокОбработокДереваКонфигурации= МетодКлиента("Модуль_Клиент","СписокОбработокДереваКонфигурации");
		
		Для Каждого ЭлементСписка ИЗ СписокОбработокДереваКонфигурации Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКПодключаемомуМодулюИмяОбработкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
		ОбратныйИндекс= Элемент.СписокВыбора.Количество()-1;
		Пока ОбратныйИндекс > -1 Цикл
			
			Если Элемент.СписокВыбора[ОбратныйИндекс].Значение <> ВыбранноеЗначение Тогда
				Элемент.СписокВыбора.Удалить(ОбратныйИндекс);
			КонецЕсли;
			
			ОбратныйИндекс= ОбратныйИндекс - 1;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораТипыДокументов(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТипыДокументовПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, ТипыДокументов);
		
		НачатьОбновлениеСпискаДокументов()
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СостояниеДокументооборотаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораСостояниеДокументооборота(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СостояниеДокументооборотаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
		ЗаполнитьСписокВыбораСостояниеДокументооборота(Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СостояниеДокументооборотаПриИзменении(Элемент)
		
		Если СостояниеДокументооборота = "-1" Тогда
			СостояниеДокументооборота = "0";  // Запретим выбирать группы
		КонецЕсли;
		
		НачатьОбновлениеСпискаДокументов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, Организация);
		
		НачатьОбновлениеСпискаДокументов()
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияКонтрагентыПриИзменении(Элемент)
		
		МетодКлиента("Модуль_Клиент","ЭлементВРежимеВыбораИзСпискаПриИзменении", ЭтаФорма, Элемент, Организация);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыСписок;
			
			ЗаполнитьСписокКонтрагентов();
			
		Иначе
			Элементы.СтраницыКонтрагенты.ТекущаяСтраница= Элементы.СтраницаКонтрагентыПодсказкаВыбораОрганизации;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПутьКМодулюВСправочнике1СПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.ПутьКМодулюВСправочнике1С = ПутьКМодулюВСправочнике1С;
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
		МетодСервера( , "УстановитьЗначениеКонстанты", "ПутьКМодулюВСправочнике1С", ПутьКМодулюВСправочнике1С);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтправкаФайловСтарыйИнтерфейсПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.ОтправкаФайловСтарыйИнтерфейс = ОтправкаФайловСтарыйИнтерфейс;
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
		МетодКлиента( ,"ОповеститьФормы", "ИзмененПараметр_ОтправкаФайловСтарыйИнтерфейс",,,"Форма_Выгрузка");
		
		ДобавитьСтатистику_ИзменилиОтправкаВСтаромИнтерфейсе();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗапретитьРаботуСМетрикамиПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.Метрики.ИспользоватьМетрики = НЕ ЗапретитьРаботуСМетриками;
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
		МетодСервераБезКонтекста( , "СохранитьНастройкуСбораМетрик");
		
		ВключитьОтключитьПериодическуюОтправкуСтатистики(Объект.ПараметрыКлиентСервер.Метрики.ИспользоватьМетрики);
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ИспользоватьФормуВводаНакладнойПриИзменении(Элемент)
		
		ИдентификаторФункциональности = "Опция_ИспользоватьФормуВводаНакладной";
		
		Если ФункциональностьОграничена(ИдентификаторФункциональности) Тогда
			
			ИспользоватьФормуВводаНакладной = Ложь;
			ПоказатьПредупреждениеОбОграниченнииФункциональности(ИдентификаторФункциональности);
			
			Возврат;
			
		КонецЕсли;
		
		Объект.ПараметрыКлиентСервер.ИспользоватьФормуВводаНакладной = ИспользоватьФормуВводаНакладной;
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
	КонецПроцедуры
	
&НаКлиенте
Процедура ИспользоватьФормуВводаНакладнойРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	АдресаРесурсов = МетодКлиента("Модуль_Клиент", "АдресаИнтернетРесурсов");
	НавигационнаяСсылкаФорматированнойСтроки = АдресаРесурсов.Инструкция_ФормаВводаНакладной;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервисКонтурМаркировкаПриИзменении(Элемент)
	
	Объект.ПараметрыКлиентСервер.ИспользоватьСервисКонтурМаркировка = ИспользоватьСервисКонтурМаркировка;
	
	МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
	
	МетодСервераБезКонтекста( , "СохранитьНастройкуИспользоватьСервисКонтурМаркировка");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервисКонтурМаркировкаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	АдресаРесурсов = МетодКлиента("Модуль_Клиент", "АдресаИнтернетРесурсов");
	НавигационнаяСсылкаФорматированнойСтроки = АдресаРесурсов.Инструкция_ИспользоватьСервисКонтурМаркировка;
	
КонецПроцедуры

//} СОБЫТИЯ

//{ ТЕЛО МОДУЛЯ

	&НаСервере
	функция ПровестиОтменитьДокумент(СсылкаНаДокумент, Действие)
		
		ДокИзменен=	Ложь;
		
		Док=	СсылкаНаДокумент.ПолучитьОбъект();
		Попытка
			Док.Записать(РежимЗаписиДокумента[Действие]);
			ДокИзменен=	Истина;
		Исключение
			СообщениеПользователю=	Новый СообщениеПользователю;
			СообщениеПользователю.Текст=	ОписаниеОшибки();
			СообщениеПользователю.Сообщить();
		КонецПопытки;
		
		Возврат ДокИзменен;
		
	КонецФункции
	
	&НаСервере
	Процедура ПометитьДокументНаУдаление(СсылкаНаДокумент)
		
		ДокументОбъект=	СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(НЕ ДокументОбъект.ПометкаУдаления);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьКонтекстДиадока()
		
		Платформа.ПараметрыКлиент.КонтекстДиадока.Очистить();
		
		//получаем массив всех организаций и их подразделений 
		МассивOrganizationDepartment = Новый Массив;
		
		OrganizationList = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationList(); 

		Для Индекс = 0 По OrganizationList.Count - 1 Цикл
			
			Organization = OrganizationList.GetItem(Индекс);
			
			СтруктураОрганизации = Новый Структура;
			СтруктураОрганизации.Вставить("OrganizationId", Organization.Id);
			СтруктураОрганизации.Вставить("DepartmentKpp",	Неопределено);
			СтруктураОрганизации.Вставить("Организация1С",	Неопределено);
			
			МассивOrganizationDepartment.Добавить(СтруктураОрганизации);
			
			Для ИндексПодразделения = 0 По Organization.Departments.Count - 1 Цикл
				
				department = Organization.Departments.GetItem(ИндексПодразделения);
				
				Если НЕ ПустаяСтрока(department.Kpp) И department.Kpp <> Organization.Kpp Тогда
					
					СтруктураПодразделенияОрганизации =	Новый Структура;
					СтруктураПодразделенияОрганизации.Вставить("OrganizationId",	Organization.Id);
					СтруктураПодразделенияОрганизации.Вставить("DepartmentKpp",		department.Kpp);
					СтруктураПодразделенияОрганизации.Вставить("Организация1С",		Неопределено);
					
					МассивOrganizationDepartment.Добавить(СтруктураПодразделенияОрганизации);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		КонтекстДиадока = Платформа.ПараметрыКлиент.КонтекстДиадока;
		//проверяем ранее заполненный массив на наличие сопоставленной организации в 1С и добавляем в контекст
		МассивOrganizationDepartment = МетодСервера(,"ПолучитьСопоставленныеОрганизациив1С", МассивOrganizationDepartment);
		Для Каждого ТекОрганизация Из МассивOrganizationDepartment Цикл
			
			Если ТекОрганизация.Организация1С <> Неопределено Тогда 
				
				НайденныеСтрокиСОрганизацией = НайтиСтрокиВМассивеСтруктур(КонтекстДиадока, Новый Структура("Организация", ТекОрганизация.Организация1С));
				Если НайденныеСтрокиСОрганизацией.Количество() = 0 Тогда
					МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ТекОрганизация.Организация1С);
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры	
	
	&НаКлиенте
	Процедура СброситьПоследнийСертификатПользователя()
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ДиадокПоследнийСертификатПользователя",Неопределено);
		СтруктураНастроек.Вставить("ДиадокПоследнееПредставлениеПользователя", 	"");
		
		МетодСервераБезКонтекста(,"УстановитьНастройкиПользователей", СтруктураНастроек);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьРасширениеФайлаДиадок(ИмяФайла)
		КолСим = СтрДлина(ИмяФайла);
		Для ИндЦикла = 1 По КолСим Цикл
			Инд = КолСим + 1 - ИндЦикла;
			Если Сред(ИмяФайла, Инд, 1) = "." Тогда
				Возврат ?(КолСим = Инд, 0, Сред(ИмяФайла, Инд + 1, КолСим - Инд));
			КонецЕсли;
		КонецЦикла;
	КонецФункции
	
	&НаКлиенте
	Функция НовоеОписаниеДокументаПакета()
		
		Результат = МетодКлиента("Модуль_Клиент", "НовоеОписаниеДокументаПакета");
		
		Возврат Результат;
		
	КонецФункции
	
	// Заполняет описание документа по данным строки таблицы формы
	// со списком входящих или исходящих документов.
	//
	// Параметры:
	//  ОписаниеДокумента	 - Структура - см. функцию НовоеОписаниеДокументаПакета;
	//  СтрокаТаблицы		 - ДанныеФормыЭлементКоллекции - строка таблицы формы;
	//
	&НаКлиенте
	Процедура ЗаполнитьОписаниеДокументаПоСтрокеТаблицы(ОписаниеДокумента, СтрокаТаблицы)
		
		ЗаполнитьЗначенияСвойств(ОписаниеДокумента, СтрокаТаблицы);
		
		Буфер = Новый Структура;
		Буфер.Вставить("CounteragentId");
		Буфер.Вставить("Номер");
		Буфер.Вставить("Дата");
		Буфер.Вставить("ПервичныйДокумент");
		Буфер.Вставить("DocumentFunction");
		Буфер.Вставить("ContentType");
		
		ЗаполнитьЗначенияСвойств(Буфер, СтрокаТаблицы);
		
		ОписаниеДокумента.CounteragentBoxID		 = Буфер.CounteragentId;
		ОписаниеДокумента.НомерДокумента		 = Буфер.Номер;
		ОписаниеДокумента.ДатаДокумента			 = Буфер.Дата;
		ОписаниеДокумента.Документ1С			 = Буфер.ПервичныйДокумент;
		ОписаниеДокумента.ФункцияУПД			 = Буфер.DocumentFunction;
		ОписаниеДокумента.ТипКонтента			 = Буфер.ContentType;
		ОписаниеДокумента.РасширениеФайлаДиадок	 = ПолучитьРасширениеФайлаДиадок(СтрокаТаблицы.FileName);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьПечатнуюФормуПоФайлуДиадок(ИмяТаблицыДокументов)
		
		ТекущиеДанные = Элементы[ИмяТаблицыДокументов].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(, "Не выбран документ", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		ПараметрМассивДокументовПакета = Новый Массив;
		
		Если ИмяТаблицыДокументов = "ТаблицаДокументовВходящих" Тогда
			
			МассивДокументовПакета = ТаблицаДокументовВходящих.НайтиСтроки(Новый Структура("MessageID", ТекущиеДанные.MessageID));
			
			Для каждого ДокументПакета из МассивДокументовПакета Цикл
				
				ЭтоТекущаяСтрока = (ДокументПакета = ТекущиеДанные);
				
				ЭлементМассива = НовоеОписаниеДокументаПакета();
				ЗаполнитьОписаниеДокументаПоСтрокеТаблицы(ЭлементМассива, ДокументПакета);
				ЭлементМассива.ЭтоТекущиеДанные = ЭтоТекущаяСтрока;
				ЭлементМассива.Вкл = ЭлементМассива.Вкл Или ЭтоТекущаяСтрока;
				
				ПараметрМассивДокументовПакета.Добавить(ЭлементМассива);
				
			КонецЦикла;
			
		Иначе
			
			ЭлементМассива = НовоеОписаниеДокументаПакета();
			ЗаполнитьОписаниеДокументаПоСтрокеТаблицы(ЭлементМассива, ТекущиеДанные);
			ЭлементМассива.ЭтоТекущиеДанные = Истина;
			ЭлементМассива.Вкл = Истина;
			
			ПараметрМассивДокументовПакета.Добавить(ЭлементМассива);

		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("DepartmentKpp"			, ТекущиеДанные.DepartmentKpp);
		ПараметрыФормы.Вставить("DepartmentId"			, ТекущиеДанные.DepartmentId);
		ПараметрыФормы.Вставить("BoxID"					, ТекущиеДанные.BoxID);
		ПараметрыФормы.Вставить("CounteragentBoxID"		, ТекущиеДанные.CounteragentId);
		ПараметрыФормы.Вставить("МассивДокументовПакета", ПараметрМассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова"			, ИмяТаблицыДокументов);
		ПараметрыФормы.Вставить("Операция"				, "ОткрытьПакет");
		
		Попытка
			
			Document = ЭлектронныйДокументПоИдентификатору(ТекущиеДанные.BoxID, ТекущиеДанные.DocumentID);
			
		Исключение
			
			Результат =	Новый Структура();
			Результат.Вставить("ОписаниеОшибки", 	"Ошибка получения документа с сервера " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Результат.Вставить("Подробности", 		ТекущиеДанные.DocumentID);
			ОткрытьФормуВыводаОшибки(Результат, Истина);
			
			Возврат;
			
		КонецПопытки;
		
		ДокументЗашифрован = Ложь;
		МетодКлиента("Модуль_Клиент", "ЕстьСвойствоCOMОбъекта", Document, "IsEncryptedContent", ДокументЗашифрован);
		
		Если ДокументЗашифрован Тогда
			
			Результат =	Новый Структура();
			Результат.Вставить("ОписаниеОшибки"	, "Работа с зашифрованными документами не поддерживается");
			Результат.Вставить("Подробности"	, ТекущиеДанные.DocumentID);
			ОткрытьФормуВыводаОшибки(Результат);
			
			Возврат;
			
		КонецЕсли;
		
		ИмяФормыПросмотра = МетодКлиента("Модуль_Клиент", "ПолучитьИмяФормыДокумента", Document);
		
		ФормаПросмотра = МетодКлиента(, "ПолучитьФормуОбработки", ИмяФормыПросмотра, ПараметрыФормы, ЭтаФорма, СокрЛП(ТекущиеДанные.DocumentID) + "/" + СокрЛП(ТекущиеДанные.BoxID));
		ФормаПросмотра.ЭДОбъект = Document;
		ФормаПросмотра.Открыть();
		
	КонецПроцедуры
	
	&НаСервере
	процедура ЗаполнитьСписокКонтрагентовСервер(МассивЗагрузки) 
		
		ТаблицаКонтрагентовСервер = Новый ТаблицаЗначений;
		ТаблицаКонтрагентовСервер.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
		ТаблицаКонтрагентовСервер.Колонки.Добавить("Контрагент");
		ТаблицаКонтрагентовСервер.Колонки.Добавить("ИНН");
		ТаблицаКонтрагентовСервер.Колонки.Добавить("КПП");
		ТаблицаКонтрагентовСервер.Колонки.Добавить("FnsParticipantId");
		ТаблицаКонтрагентовСервер.Колонки.Добавить("ТекущийСтатус");
		
		Для каждого Элемент Из МассивЗагрузки Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаКонтрагентовСервер.Добавить(), Элемент);
		КонецЦикла; 
		
		ТабКонтагентовДляМаршрутизации = МетодСервера(,"ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов", ТаблицаКонтрагентовСервер.Скопировать(,"ID"));
		
		Для Каждого СтрокаТаблицыКонтрагентов Из ТаблицаКонтрагентовСервер Цикл
			
			СтрокаСписка = СписокАктивные.Добавить();
			
			СтрокаСписка.ID					= СтрокаТаблицыКонтрагентов.ID;
			СтрокаСписка.FnsParticipantId	= СтрокаТаблицыКонтрагентов.FnsParticipantId;
			СтрокаСписка.ИНН				= СтрокаТаблицыКонтрагентов.ИНН;
			СтрокаСписка.КПП				= СтрокаТаблицыКонтрагентов.КПП;
			СтрокаСписка.Контрагент			= СтрокаТаблицыКонтрагентов.Контрагент;
			СтрокаСписка.ТекущийСтатус		= СтрокаТаблицыКонтрагентов.ТекущийСтатус;
			
			СтрокаСписка.ТекущийСтатусРасшифровка =	МетодСервера(,"РасшифровкаТекущегоСостоянияВзаимоотношений", СтрокаСписка.ТекущийСтатус);

			ПараметрыОтбора 	= Новый Структура("Id", СтрокаТаблицыКонтрагентов.Id);
			ТабМаршрутизации 	= ТабКонтагентовДляМаршрутизации.НайтиСтроки(ПараметрыОтбора);
			
			Для каждого СтрокаТабМаршрутизации Из ТабМаршрутизации Цикл
				
				СтрокаПоКонтрагенту = СтрокаСписка.СписокКонтрагентовВ1С.ПолучитьЭлементы().Добавить();
				СтрокаПоКонтрагенту.КонтрагентВ1С				= СтрокаТабМаршрутизации.Контрагент;
				СтрокаПоКонтрагенту.ПодразделениеКонтрагента	= СтрокаТабМаршрутизации.ПодразделениеКонтрагента;
				СтрокаПоКонтрагенту.ToDepartmentID				= СтрокаТабМаршрутизации.ToDepartmentID;
				
				ТабМаршрутизацииПоДоговорам = МетодСервера(,"ВернутьТаблицуМаршрутизацииПоДоговорам", Организация, СтрокаТабМаршрутизации.Контрагент);
				Для каждого СтрокаТабМаршрутизацииПоДоговорам Из ТабМаршрутизацииПоДоговорам Цикл
					
					СтрокаПоДоговорам = СтрокаПоКонтрагенту.ПолучитьЭлементы().Добавить();
					СтрокаПоДоговорам.Договор					= СтрокаТабМаршрутизацииПоДоговорам.Договор;
					СтрокаПоДоговорам.ПодразделениеКонтрагента	= СтрокаТабМаршрутизацииПоДоговорам.ПодразделениеДоговора;
					СтрокаПоДоговорам.ToDepartmentID			= СтрокаТабМаршрутизацииПоДоговорам.ToDepartmentID;
					СтрокаПоДоговорам.КонтрагентВ1С				= СтрокаПоКонтрагенту.КонтрагентВ1С;
					
				КонецЦикла;
				
				СтрокаСписка.ПредставлениеСпискаКонтрагентов1С = СтрокаСписка.ПредставлениеСпискаКонтрагентов1С + ?(ПустаяСтрока(СтрокаСписка.ПредставлениеСпискаКонтрагентов1С), "", "; ") + СтрокаТабМаршрутизации.КонтрагентНаименование;
				
				ФорматДокументовНаОтправку = СтрокаТабМаршрутизации.ФорматДокументовНаОтправку;
				
				Если ТипЗнч(ФорматДокументовНаОтправку) = Тип("Строка") Тогда
					СтрокаСписка.ФорматДокументовНаОтправку = ФорматДокументовНаОтправку;
				Иначе
					СтрокаСписка.ФорматДокументовНаОтправку = "";
				КонецЕсли;	
				
			КонецЦикла;
			
			Если СтрокаСписка.СписокКонтрагентовВ1С.ПолучитьЭлементы().Количество() > 1 Тогда
				СтрокаСписка.ПредставлениеСпискаКонтрагентов1С=	СтрокаСписка.ПредставлениеСпискаКонтрагентов1С + ";";
			КонецЕсли;
			
		КонецЦикла;	
		
		СписокАктивные.Сортировать("Контрагент Возр");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентов)
		
		Если КоллекцияКонтрагентов <> Неопределено Тогда
			
			Для Индекс = 0 По КоллекцияКонтрагентов.Count - 1 Цикл
				
				ЭлементКоллекции = КоллекцияКонтрагентов.GetItem(Индекс);
				
				ЗаполненнаяСтруктура = Новый Структура;
				ТекстДополнения = "";
				Если МетодКлиента("Модуль_Клиент", "ЭтоТестоваяОрганизация", ЭлементКоллекции) Тогда
					ТекстДополнения = "тестовый";	
				КонецЕсли;
				Если ЭлементКоллекции.IsRoaming Тогда
					ТекстДополнения = ТекстДополнения + ?(ЗначениеЗаполнено(ТекстДополнения), ", ", "") + "роуминговый";	
				КонецЕсли;
				ЗаполненнаяСтруктура.Вставить("Контрагент", 				ЭлементКоллекции.Name + ?(ЗначениеЗаполнено(ТекстДополнения), " (" + ТекстДополнения + ")", ""));
				
				ЗаполненнаяСтруктура.Вставить("ИНН", 						ЭлементКоллекции.Inn);
				ЗаполненнаяСтруктура.Вставить("КПП", 						ЭлементКоллекции.Kpp);
				ЗаполненнаяСтруктура.Вставить("Id",							ЭлементКоллекции.ID);
				ЗаполненнаяСтруктура.Вставить("FnsParticipantId",			ЭлементКоллекции.FnsParticipantId);
				ЗаполненнаяСтруктура.Вставить("ТекущийСтатус",				ЭлементКоллекции.GetStatus());
				ЗаполненнаяСтруктура.Вставить("ТекущийСтатусРасшифровка",	Неопределено);
				
				МассивЗагрузки.Добавить(ЗаполненнаяСтруктура);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокКонтрагентов()
		
		СписокАктивные.Очистить();
		
		МассивЗагрузки = Новый Массив;
		
		Если ПустаяСтрока(СтатусВзаимоотношений) Тогда
			
			КоллекцияКонтрагентовActive = МетодКлиента("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "IsMyCounteragent");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовActive);
			
			КоллекцияКонтрагентовInviting =	МетодКлиента("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "InvitesMe");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовInviting);
			
			КоллекцияКонтрагентовIsInvited = МетодКлиента("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "IsInvitedByMe");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовIsInvited);
			
			КоллекцияКонтрагентовDenied = МетодКлиента("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "Rejected");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовDenied);
			
		ИначеЕсли СтатусВзаимоотношений = "RejectsMe" ИЛИ СтатусВзаимоотношений = "IsRejectedByMe" Тогда
			
			КоллекцияКонтрагентовDenied = МетодКлиента("Модуль_Клиент", "GetCounteragentListByStatus", Организация, "Rejected");
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовDenied);
			
		Иначе
			
			КоллекцияКонтрагентовFilter = МетодКлиента("Модуль_Клиент", "GetCounteragentListByStatus", Организация, СтатусВзаимоотношений);
			ЗаполнитьСписокКонтрагентовПоСтатусу(МассивЗагрузки, КоллекцияКонтрагентовFilter);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МассивЗагрузки) Тогда
			ЗаполнитьСписокКонтрагентовСервер(МассивЗагрузки);
		КонецЕсли; 
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьЛогикуПослеАвторизации()
		
		ИспользуетсяСертификатПоГОСТ2001 = МетодКлиента("Модуль_Клиент", "ИспользуетсяСертификатПоГОСТ2001");
		
		Если ИспользуетсяСертификатПоГОСТ2001 Тогда
			МетодКлиента("Модуль_Клиент", "ПоказатьПредупреждениеОбИспользованииСертификатаГОСТ2001");
		КонецЕсли;
		
		ЗаполнитьИерархиюОрганизацийDiadoc();
		ОбновитьКонтекстДиадока();
		
		Элементы.ДекорацияТекущийПользовательВДиадоке.Заголовок= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.ПредставлениеПользователя;
		
		ОчиститьФильтрОрганизация();
		ОчиститьФильтрКонтрагент();
		
		Если Платформа.ПараметрыКлиент.КонтекстДиадока.Количество()=0 Тогда
			
			СписокДобавленныхIdBox=	Новый СписокЗначений;
			Для каждого Ящик Из СписокПочтовыхЯщиков Цикл
				СписокДобавленныхIdBox.Добавить(Ящик.IdBox);
			КонецЦикла;
			
			ПараметрыФормы=	Новый Структура();
			ПараметрыФормы.Вставить("СписокДобавленныхIdBox", СписокДобавленныхIdBox);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДобавлениеЯщиков", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыДобавленияЯщиковПриСтарте");
			
		Иначе
			ЗапуститьМодуль();
			
			//если есть заблокированные по API организации, то выводим информационное окно
			ОтборЗаблокированныхОрганизаций = Новый Структура;
			ОтборЗаблокированныхОрганизаций.Вставить("ЗаблокированаПоAPI", Истина);
			ЗаблокированныеОрганизации = МетодКлиента("Модуль_Клиент","НайтиСтрокиКонтекстДиадокаПоОтбору", ОтборЗаблокированныхОрганизаций);
			
			Если ЗаблокированныеОрганизации.Количество() > 0 Тогда 
				
				ПараметрыФормы = Новый Структура;
				СписокОрганизаций = Новый СписокЗначений();
				Для Каждого ТекСтрока Из ЗаблокированныеОрганизации Цикл
					СписокОрганизаций.Добавить(ПолучитьСтрокуДляФормыОплатыСервиса(ТекСтрока));
				КонецЦикла;
				ПараметрыФормы.Вставить("СписокОрганизаций", СписокОрганизаций);
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОплатаСервиса", ПараметрыФормы, ЭтаФорма);
				
			КонецЕсли;
			
			ПроверитьНаАктуальностьВерсиюМодуля();
			ПоказатьПанельОкончанияОплаченногоПериода();
			
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьПодразделенияВИерархиюОрганизацийDiadoc(Organization, Parent, Departments)
		
		ВГраница = Departments.Count-1;
		
		Для ИндексЦикла = 0 По ВГраница Цикл
			
			Item= Departments.GetItem(ИндексЦикла);
			
			Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc.Вставить(Item.Id, 
			Новый Структура("Name, Id, Inn, Kpp, DepartmentKpp, ParentId", 
			Item.Name, Item.Id, Organization.Inn, Item.Kpp, Item.Kpp, Parent.Id));
			
			ДобавитьПодразделенияВИерархиюОрганизацийDiadoc(Organization, Item, Item.Subdepartments);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьИерархиюОрганизацийDiadoc()
		
		OrganizationList= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationList();
		
		ВГраница= OrganizationList.Count-1;
		
		Для ИндексЦикла = 0 По ВГраница Цикл
			
			Item= OrganizationList.GetItem(ИндексЦикла);
			
			//проверяем на блокировку по API
			Попытка
				Item.GetUserPermissions();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc.Вставить(Item.Id, 
			Новый Структура("Name, Id, Inn, Kpp, DepartmentKpp, ParentId", Item.Name, Item.Id, Item.Inn, Item.Kpp));
			
			ДобавитьПодразделенияВИерархиюОрганизацийDiadoc(Item, Item, Item.Departments);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Возвращает список организаций 1С, для которых настроено сопоставление с ящиками ДД.
	// Если в отборе для документов выбрана организация, то в список добавляется только она.
	// 
	// Возвращаемое значение:
	//  Массив – список значений типа СправочникСсылка.Организации.
	//
	&НаКлиенте
	Функция ОрганизацииТекущегоКонтекста()
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			Результат = Новый Массив;
			Результат.Добавить(Организация);
			
		Иначе
			Результат = СопоставленныеОрганизации(Истина);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции //ОрганизацииТекущегоКонтекста()	

	&НаСервере
	Функция ПолучитьСписокДокументов(ТекущаяСтраницаИмя, ПараметрыСписка)
		
		Запрос=	Новый Запрос;
		
		Если ТекущаяСтраницаИмя = "СтраницаРеализацияТоваровУслуг" Тогда
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
				Запрос.Текст=
					"ВЫБРАТЬ
					|	РасходнаяНакладная.Номер,
					|	РасходнаяНакладная.Дата КАК Дата,
					|	РасходнаяНакладная.Организация,
					|	РасходнаяНакладная.Контрагент,
					|	РасходнаяНакладная.СтруктурнаяЕдиница КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	РасходнаяНакладная.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА РасходнаяНакладная.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ РасходнаяНакладная.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	РасходнаяНакладная.СуммаДокумента
					|ИЗ
					|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО РасходнаяНакладная.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО РасходнаяНакладная.Ссылка = ИдДокументДиадок.Объект
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ РасходнаяНакладная.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И РасходнаяНакладная.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";
					
			Иначе
					
				Запрос.Текст=
					"ВЫБРАТЬ
					|	РеализацияТоваровУслуг.Номер,
					|	РеализацияТоваровУслуг.Дата КАК Дата,
					|	РеализацияТоваровУслуг.Организация,
					|	РеализацияТоваровУслуг.Контрагент,
					|	РеализацияТоваровУслуг.Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	РеализацияТоваровУслуг.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА РеализацияТоваровУслуг.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ РеализацияТоваровУслуг.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	РеализацияТоваровУслуг.СуммаДокумента
					|ИЗ
					|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО РеализацияТоваровУслуг.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО РеализацияТоваровУслуг.Ссылка = ИдДокументДиадок.Объект
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ РеализацияТоваровУслуг.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";		
				
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраницаИмя = "СтраницаСчетФактураВыданный" Тогда
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				
				Запрос.Текст=
					"ВЫБРАТЬ
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата КАК Дата,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.ДокументОснование.Контрагент КАК Контрагент,
					|	"""" КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	СчетФактураВыданный.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА СчетФактураВыданный.ДокументОснование.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ СчетФактураВыданный.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	СчетФактураВыданный.ДокументОснование.СуммаДокумента КАК СуммаДокумента
					|ИЗ
					|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО СчетФактураВыданный.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО СчетФактураВыданный.Ссылка = ИдДокументДиадок.Объект
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ СчетФактураВыданный.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";
					
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					
				Запрос.Текст=
					"ВЫБРАТЬ
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата КАК Дата,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.ДокументОснование.Контрагент КАК Контрагент,
					|	"""" КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	СчетФактураВыданный.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА СчетФактураВыданный.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ СчетФактураВыданный.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	ТаблицаДокОснований.СуммаДокумента КАК СуммаДокумента
					|ИЗ
					|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО СчетФактураВыданный.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО СчетФактураВыданный.Ссылка = ИдДокументДиадок.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			СУММА(СчетФактураВыданныйДокументыОснования.ДокументОснование.СуммаДокумента) КАК СуммаДокумента,
					|			СчетФактураВыданныйДокументыОснования.Ссылка КАК СсылкаНаСФ
					|		ИЗ
					|			Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
					|		
					|		СГРУППИРОВАТЬ ПО
					|			СчетФактураВыданныйДокументыОснования.Ссылка) КАК ТаблицаДокОснований
					|		ПО СчетФактураВыданный.Ссылка = ТаблицаДокОснований.СсылкаНаСФ
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ СчетФактураВыданный.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";

			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
				Запрос.Текст=
					"ВЫБРАТЬ
					|	СчетФактураВыданный.Номер,
					|	СчетФактураВыданный.Дата КАК Дата,
					|	СчетФактураВыданный.Организация,
					|	СчетФактураВыданный.ДокументОснование.Контрагент КАК Контрагент,
					|	"""" КАК Склад,
					|	ИдЯщикОрганизации.Значение КАК ИдЯщикОрганизации,
					|	ИдДокументДиадок.Значение КАК ИдДокументДиадок,
					|	СчетФактураВыданный.Ссылка,
					|	"""" КАК СостояниеДокументооборота,
					|	ВЫБОР
					|		КОГДА ИдДокументДиадок.Значение ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ЕстьВДиадоке,
					|	ВЫБОР
					|		КОГДА СчетФактураВыданный.Проведен
					|			ТОГДА 0
					|		ИНАЧЕ ВЫБОР
					|				КОГДА НЕ СчетФактураВыданный.ПометкаУдаления
					|					ТОГДА 1
					|				ИНАЧЕ 2
					|			КОНЕЦ
					|	КОНЕЦ КАК СостояниеДокумента,
					|	ТаблицаДокОснований.СуммаДокумента КАК СуммаДокумента
					|ИЗ
					|	Документ.СчетФактура КАК СчетФактураВыданный
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваЯщикОрганизации) КАК ИдЯщикОрганизации
					|		ПО СчетФактураВыданный.Организация = ИдЯщикОрганизации.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ДополнительныеСведения.Объект КАК Объект,
					|			ДополнительныеСведения.Свойство КАК Свойство,
					|			ДополнительныеСведения.Значение КАК Значение
					|		ИЗ
					|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
					|		ГДЕ
					|			ДополнительныеСведения.Свойство = &ИдентификаторСвойстваИдентификаторДокументаВДиадок) КАК ИдДокументДиадок
					|		ПО СчетФактураВыданный.Ссылка = ИдДокументДиадок.Объект
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			СУММА(СчетФактураВыданныйДокументыОснования.ДокументОснование.СуммаДокумента) КАК СуммаДокумента,
					|			СчетФактураВыданныйДокументыОснования.Ссылка КАК СсылкаНаСФ
					|		ИЗ
					|			Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
					|		
					|		СГРУППИРОВАТЬ ПО
					|			СчетФактураВыданныйДокументыОснования.Ссылка) КАК ТаблицаДокОснований
					|		ПО СчетФактураВыданный.Ссылка = ТаблицаДокОснований.СсылкаНаСФ
					|ГДЕ
					|	ВЫБОР
					|			КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ СчетФактураВыданный.Ссылка = &Ссылка
					|		КОНЕЦ
					|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
					|
					|УПОРЯДОЧИТЬ ПО
					|	Дата";				
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Параметры.Свойство("Ссылка") Тогда
			Запрос.УстановитьПараметр("Ссылка", ПараметрыСписка.Ссылка);
		Иначе
			Запрос.УстановитьПараметр("Ссылка", Неопределено);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НачалоПериода", ПараметрыСписка.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", ПараметрыСписка.КонецПериода);
		
		ИдентификаторСвойстваЯщикОрганизации= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваЯщикОрганизации"));
		Запрос.УстановитьПараметр("ИдентификаторСвойстваЯщикОрганизации", ИдентификаторСвойстваЯщикОрганизации);
		
		ИдентификаторСвойстваИдентификаторДокументаВДиадок=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"));
		Запрос.УстановитьПараметр("ИдентификаторСвойстваИдентификаторДокументаВДиадок", ИдентификаторСвойстваИдентификаторДокументаВДиадок);
		
		ТабДанных= Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТабДанных Из ТабДанных Цикл
			СтрокаТабДанных.ИдДокументДиадок= МетодСервера(,"Документ_2_DocumentID", СтрокаТабДанных.Ссылка);
		КонецЦикла;
		
		Возврат ТабДанных;
		
	КонецФункции
	
	&НаСервере
	Процедура ЗаполнитьТаблицуДокументов(ПараметрыЖурнала)
		
		ИмяТекущейСтраницы=	Элементы.СтраницыДокументов.ТекущаяСтраница.Имя;
		ТабДанных=			ПолучитьСписокДокументов(ИмяТекущейСтраницы, ПараметрыЖурнала);
		ЗначениеВДанныеФормы(ТабДанных, ТаблицаЖурналаДокументов);
		
	КонецПроцедуры
			
	&НаКлиенте
	Процедура ВыборОрганизацииИзСписка() Экспорт
		
		Элементы.Организация_2.СписокВыбора.Очистить();
		Элементы.Организация_2.СписокВыбора.ЗагрузитьЗначения(МетодКлиента("Модуль_Клиент","ПолучитьОрганизацииНезаблокированныеПоAPI"));
		Элементы.Организация_2.СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОбработчикВыборОрганизации", ЭтаФорма, Элементы.Организация_2));

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЗаголовокИнтервала(ИмяИнтервала)
		
		Элементы["Интервал"+ИмяИнтервала].Заголовок= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", СтруктураИнтервалов[ИмяИнтервала].ДатаНачала, СтруктураИнтервалов[ИмяИнтервала].ДатаОкончания) + " " + ?(СтруктураИнтервалов[ИмяИнтервала].ОтбиратьПоДатеДокумента, "(по дате документа)", "(по дате учета)");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЗаголовокИнтервалаЖурналаДокументов()
		
		ПредставлениеПериодаДД= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", СтруктураИнтервалов.ЖурналДокументов.ДатаНачала, СтруктураИнтервалов.ЖурналДокументов.ДатаОкончания);
		
		Элементы.ИнтервалЖурналДокументов_1.Заголовок= ПредставлениеПериодаДД;
		Элементы.ИнтервалЖурналДокументов_2.Заголовок= ПредставлениеПериодаДД;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьДанныеСтроки(СтрокаТЧ)
		
		Document = ЭлектронныйДокументПоИдентификатору(СтрокаТЧ.ИдЯщикОрганизации, СтрокаТЧ.ИдДокументДиадок);
		
		СтрокаТЧ.СостояниеДокументооборота= МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса", Document);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокПочтовыхЯщиковПараметрыОтправки(Команда)
		
		ТекущиеДанные = Элементы.СписокПочтовыхЯщиков.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(,"Не выбрана организация!", , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		//если организация заблокирована по API, то выводим информационное окно вместо формы настройки параметров	
		ИначеЕсли ТекущиеДанные.Заблокирована Тогда 
			
			ПараметрыФормы = Новый Структура;
			СписокОрганизаций = Новый СписокЗначений();
			
			ДанныеОрганизации = МетодКлиента("Модуль_Клиент","НайтиСтрокиКонтекстДиадокаПоОтбору", Новый Структура("Организация", ТекущиеДанные.Организация));
			
			Если ДанныеОрганизации.Количество() > 0 Тогда 
				СписокОрганизаций.Добавить(ПолучитьСтрокуДляФормыОплатыСервиса(ДанныеОрганизации[0]));
			КонецЕсли;	
			
			ПараметрыФормы.Вставить("СписокОрганизаций", СписокОрганизаций);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОплатаСервиса", ПараметрыФормы, ЭтаФорма);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			
			ПараметрыФормы.Вставить("BoxId"		 , ТекущиеДанные.IdBox);
			ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
			ПараметрыФормы.Вставить("ПредставлениеОрганизации", ТекущиеДанные.НаименованиеЯщика);
		
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаНастройкаПараметровОтправки", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПараметрыОтправки");
			
		КонецЕсли;
								
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СписокПочтовыхЯщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		СписокПочтовыхЯщиковПараметрыОтправки("");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СортироватьТаблицуДокументов(НаправлениеСортировки)
		
		Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
			
			ПараметрКолонки= ПараметрыСортировки(Элементы.ТаблицаДокументовВходящих.ТекущийЭлемент.Имя, "ТаблицаДокументовВходящих", НаправлениеСортировки);
			ТаблицаДокументовВходящих.Сортировать(ПараметрКолонки);
						
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаОтправленныеДиадок Тогда 
			
			ПараметрКолонки= ПараметрыСортировки(Элементы.ТаблицаДокументовИсходящих.ТекущийЭлемент.Имя, "ТаблицаДокументовИсходящих", НаправлениеСортировки);
			ТаблицаДокументовИсходящих.Сортировать(ПараметрКолонки);
					
		ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаВнутренниеДиадок Тогда 
			
			ПараметрКолонки= ПараметрыСортировки(Элементы.ТаблицаДокументовВнутренних.ТекущийЭлемент.Имя, "ТаблицаДокументовВнутренних", НаправлениеСортировки);
			ТаблицаДокументовВнутренних.Сортировать(ПараметрКолонки);
								
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПараметрыСортировки(ИмяТекущегоЭлемента, ИмяТаблицыДокументов, НаправлениеСортировки)
		
		ИмяКолонкиСортировки= 	СтрЗаменить(ИмяТекущегоЭлемента, ИмяТаблицыДокументов, "");
		ИмяКолонкиСортировки= 	СтрЗаменить(ИмяКолонкиСортировки, "ИконкаПакета", "ИндексИконкиПакета");
		ПараметрКолонки= 		ИмяКолонкиСортировки + ?(ЗначениеЗаполнено(НаправлениеСортировки), " " + НаправлениеСортировки, "");
		
		Возврат ПараметрКолонки;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПоказатьПредупреждениеОбУстаревшихНастройкахОтправки()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьПредупреждениеОбУстаревшихНастройкахОтправки"
			, ЭтаФорма
			, "ОбработчикОткрытиеФормыУведомленияОСтаромФормате");
		
	КонецПроцедуры
	
//} ТЕЛО МОДУЛЯ

//{ РАСШИРЕНИЕ КОНФИГУРАЦИИ

	&НаКлиенте
	Функция РазобратьВерсиюПриложенияПоРазрядам(Знач ВерсияПриложения)
		
		Платформа1С = Новый Структура("ПервыеДвеЦифры, ТретьяЦифра, ЧетвертаяЦифра");
		
		ВерсияПриложения 	= СокрЛП(ВерсияПриложения);
				
		ПерваяЦифра = Сред(ВерсияПриложения, 1, Найти(ВерсияПриложения, ".")-1);
		ПромежуточнаяСтрока = Сред(ВерсияПриложения, Найти(ВерсияПриложения, ".")+1, СтрДлина(ВерсияПриложения));
		
		ВтораяЦифра = Сред(ПромежуточнаяСтрока, 1, Найти(ПромежуточнаяСтрока, ".")-1);
		ПромежуточнаяСтрока = Сред(ПромежуточнаяСтрока, Найти(ПромежуточнаяСтрока, ".")+1, СтрДлина(ПромежуточнаяСтрока));
		
		ПервыеДвеЦифры = ПерваяЦифра + "." + ВтораяЦифра;
		
		ТретьяЦифра = Сред(ПромежуточнаяСтрока, 1, Найти(ПромежуточнаяСтрока, ".")-1);
		ПромежуточнаяСтрока = Сред(ПромежуточнаяСтрока, Найти(ПромежуточнаяСтрока, ".")+1, СтрДлина(ПромежуточнаяСтрока));
		
		ЧетвертаяЦифра = СокрЛП(ПромежуточнаяСтрока);
		
		Платформа1С.Вставить("ПервыеДвеЦифры", ПервыеДвеЦифры);
		Платформа1С.Вставить("ТретьяЦифра", ТретьяЦифра);
		Платформа1С.Вставить("ЧетвертаяЦифра", ЧетвертаяЦифра);
		
		Возврат Платформа1С;
		
	КонецФункции
			
	&НаКлиенте
	Процедура ОбработчикЗапросУстановкиРасширенияКонфигурации(РезультатЗапроса, ДополнительныеПараметры) Экспорт
		
		ТолькоУдалить= Ложь;
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Свойство("ТолькоУдалить", ТолькоУдалить);
		КонецЕсли;
		
		Если РезультатЗапроса <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		ТекстСообщения= 			"";
		РазделительТекстаСообщения= "";
		ПерезапуститьПрограмму= 	Ложь;
		
		Результат= МетодСервераБезКонтекста(,"УдалитьРасширениеКонфигурации");
		Если НЕ Результат.Отказ Тогда
			Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
				ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + Результат.ОписаниеОшибки;
				РазделительТекстаСообщения = Символы.ПС + Символы.ПС;
			КонецЕсли;
			ПерезапуститьПрограмму= МАКС(ПерезапуститьПрограмму, Результат.ПерезапуститьПрограмму);
		Иначе
			ОткрытьФормуВыводаОшибки(Результат);
			Возврат;
		КонецЕсли;
		
		Если НЕ ТолькоУдалить Тогда
			
			Результат= МетодСервераБезКонтекста(,"УстановитьРасширениеКонфигурации");
			Если НЕ Результат.Отказ Тогда
				Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
					ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + Результат.ОписаниеОшибки;
					РазделительТекстаСообщения = Символы.ПС + Символы.ПС;
				КонецЕсли;
				ПерезапуститьПрограмму= МАКС(ПерезапуститьПрограмму, Результат.ПерезапуститьПрограмму);
			Иначе
				ОткрытьФормуВыводаОшибки(Результат);
				Возврат;
			КонецЕсли;
			
			СведенияОМодуле = МетодСервераБезКонтекста(, "ЗаполнитьДанныеОПомещаемомМодуле");
			Ф = Новый Файл(СведенияОМодуле.АдресОбработки);
			
			Если НЕ Ф.Существует() Тогда
				
				Результат.Отказ = Истина;
				Результат.ОписаниеОшибки = "Не обнаружен файл модуля на диске: " + Символы.ПС + "СведенияОМодуле.АдресОбработки";
				ОткрытьФормуВыводаОшибки(Результат);
				Возврат;
				
			КонецЕсли;
			
			ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(СведенияОМодуле.АдресОбработки);
			АдресДвоичныеДанныеОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки, УникальныйИдентификатор);
			Результат= МетодСервераБезКонтекста(,"ПоместитьИнтеграционныйМодульВДополнительныеОбработки", АдресДвоичныеДанныеОбработки);
			УдалитьИзВременногоХранилища(АдресДвоичныеДанныеОбработки);
			
			Если НЕ Результат.Отказ Тогда
				Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
					ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + Результат.ОписаниеОшибки;
					РазделительТекстаСообщения = Символы.ПС + Символы.ПС;
				КонецЕсли;
			Иначе
				ОткрытьФормуВыводаОшибки(Результат);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		КнопкиВопроса= Новый СписокЗначений;
		Если ПерезапуститьПрограмму Тогда
			ТекстСообщения= ТекстСообщения + РазделительТекстаСообщения + "Программу необходимо перезапустить!";
			КнопкиВопроса.Добавить("ПерезапуститьПрограмму", "Перезапустить программу");
		КонецЕсли;
		КнопкиВопроса.Добавить("ПродолжитьРаботу", "Продолжить работу");
		
		Платформа.ПараметрыКлиент.УстановкаРасширения= МетодСервераБезКонтекста(,"ПроверитьНеобходимостьУстановкиРасширения");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикЗапросУстановкиРасширенияКонфигурацииЗавершение", ЭтаФорма), ТекстСообщения, КнопкиВопроса, 120, "ПродолжитьРаботу");
		
		НастроитьЭлементУдалитьУстановитьРасширениеКонфигурации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикЗапросУстановкиРасширенияКонфигурацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = "ПерезапуститьПрограмму" Тогда
			ПрекратитьРаботуСистемы(Истина);
		КонецЕсли;
		
	КонецПроцедуры
	

	//{ РАБОТА С ОРГАНИЗАЦИЕЙ
		&НаКлиенте
		Процедура ВыполнитьСопоставлениеОрганизации() Экспорт
			
			СписокДобавленныхIdBox = ПолучитьСписокСписокДобавленныхIdBox(МетодКлиента("Модуль_Клиент","ПолучитьОрганизацииНезаблокированныеПоAPI"));
				
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("СписокДобавленныхIdBox", СписокДобавленныхIdBox);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаДобавлениеЯщиков", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыДобавленияЯщиковРасширение");
			
		КонецПроцедуры
	
		&НаСервере
		Функция ПолучитьСписокСписокДобавленныхIdBox(ОрганизацииФилиалыСопоставленныеСДиадоком)
			
			ТаблицаЯщиков= МетодСервера(,"ПолучитьТаблицуЯщиковДиадокОрганизации", ОрганизацииФилиалыСопоставленныеСДиадоком);
			
			СписокДобавленныхIdBox = Новый СписокЗначений;
			
			Для каждого СтрокаТаблицы Из ТаблицаЯщиков Цикл
				СписокДобавленныхIdBox.Добавить(СтрокаТаблицы.BoxId);
			КонецЦикла;
			
		КонецФункции
			
		&НаКлиенте
		Процедура ОбработчикОткрытиеФормыДобавленияЯщиковРасширение(РезультатЗакрытия, ТекущиеДанные) Экспорт
			
			Если РезультатЗакрытия <> Неопределено Тогда
				Оповестить("РасширениеДиадокСопосталениеОрганизации");
			КонецЕсли;
			
		КонецПроцедуры
		
	//} РАБОТА С ОРГАНИЗАЦИЕЙ
	
	//{ РАБОТА С КОНТРАГЕНТОМ
	
		&НаКлиенте
		Процедура ЗаполнитьПараметрыПриглашенияИзДД(ПараметрыПриглашенияКА) Экспорт
			
			Organization = МетодКлиента("Модуль_Клиент", "ПолучитьЯщикДиадокДляОрганизации", ПараметрыПриглашенияКА.Организация);
			
			Если Organization <> Неопределено Тогда 
				
				КоллекцияКонтрагентов = Organization.GetCounteragentListByInnKpp(ПараметрыПриглашенияКА.ИннКонтрагента);
				
				Если КоллекцияКонтрагентов.Count = 0 Тогда
					
					ТекстСообщения = НСтр("ru = 'Контрагент по ИНН и КПП не найден!'"); //!! необходимо обработать ситуацию
					СообщитьПользователю(ТекстСообщения);
					
				Иначе 
					
					Counteragent = КоллекцияКонтрагентов.GetItem(0);
					ПараметрыПриглашенияКА.Organization			= Organization;
					ПараметрыПриглашенияКА.CounteragentId		= Counteragent.Id;
					ПараметрыПриглашенияКА.FnsParticipantId		= Counteragent.FnsParticipantId;
					ПараметрыПриглашенияКА.CounteragentStatus	= Counteragent.GetStatus();
					
				КонецЕсли;
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Не найдена Организация!'");
				СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ПригласитьКАРасширение(ПараметрыПриглашенияКА) Экспорт
			
			CounteragentStatus 	= ПараметрыПриглашенияКА.CounteragentStatus;
			
			Organization		= ПараметрыПриглашенияКА.Organization;
			CounteragentId		= ПараметрыПриглашенияКА.CounteragentId;
			FnsParticipantId 	= ПараметрыПриглашенияКА.FnsParticipantId;
				
			Если CounteragentStatus = "InvitesMe" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент","ОтправитьПринятьПриглашениеКонтрагенту", Organization, CounteragentId, ПараметрыПриглашенияКА.ИннКонтрагента, "", "");
				Если Результат = Истина Тогда
					УстановитьCounteragentBoxID(CounteragentId, ПараметрыПриглашенияКА.Контрагент);
					МетодСервераБезКонтекста(,"УстановитьИдентификаторЭДОДляКонтрагента", ПараметрыПриглашенияКА.Контрагент, FnsParticipantId);
					ПоказатьПредупреждение(,"Контрагенту отправлено приглашение");
					Оповестить("РасширениеДиадокРаботаСКонтрагентом");
				КонецЕсли;
				
			ИначеЕсли CounteragentStatus = "NotInCounteragentList" или CounteragentStatus = "RejectsMe" или CounteragentStatus = "IsRejectedByMe" Тогда
				
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 	"Отправка приглашения");
				ПараметрыФормы.Вставить("Комментарий", 	"Предлагаем обмениваться электронными документами через систему Диадок");
				ПараметрыФормы.Вставить("Режим", 		"ОтправкаПриглашения");
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаКомментарияРасширение", ПараметрыПриглашенияКА);
				
			ИначеЕсли CounteragentStatus = "IsMyCounteragent" ИЛИ CounteragentStatus = "IsInvitedByMe" Тогда
				
				УстановитьCounteragentBoxID(CounteragentId, ПараметрыПриглашенияКА.КонтрагентСсылка);
				МетодСервераБезКонтекста(,"УстановитьИдентификаторЭДОДляКонтрагента", ПараметрыПриглашенияКА.КонтрагентСсылка, FnsParticipantId);
				ПоказатьПредупреждение(,"Контрагент из Диадок сопоставлен контрагенту из 1С");
				Оповестить("РасширениеДиадокРаботаСКонтрагентом");
				
			КонецЕсли;
				
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ОбработчикОткрытиеФормыВводаКомментарияРасширение(РезультатЗакрытия, ТекущиеДанные) Экспорт
			
			Organization 		= ТекущиеДанные.Organization;
			CounteragentID 		= ТекущиеДанные.CounteragentID;
			FnsParticipantId 	= ТекущиеДанные.FnsParticipantId;
			
			Результат =	МетодКлиента("Модуль_Клиент","ОтправитьПринятьПриглашениеКонтрагенту", Organization, CounteragentID, ТекущиеДанные.ИннКонтрагента, РезультатЗакрытия.Комментарий, РезультатЗакрытия.ПутьКФайлу);
			
			Если Результат = Истина Тогда
				УстановитьCounteragentBoxID(CounteragentID, ТекущиеДанные.КонтрагентСсылка);
				МетодСервераБезКонтекста(,"УстановитьИдентификаторЭДОДляКонтрагента", ТекущиеДанные.КонтрагентСсылка, FnsParticipantId);
				ПоказатьПредупреждение(,"Контрагенту отправлено приглашение");
				Оповестить("РасширениеДиадокРаботаСКонтрагентом");
			КонецЕсли;
					
		КонецПроцедуры
		
		&НаСервере
		Процедура УстановитьCounteragentBoxID(Id, ВыбКонтрагент) Экспорт
		
			МетодСервера(,"Установить_CounteragentBoxID_для_Контрагент", ВыбКонтрагент, id);
		
		КонецПроцедуры
	
	//} РАБОТА С КОНТРАГЕНТОМ

	
	//{ ОТПРАВИТЬ ДОКУМЕНТ
	
		&НаКлиенте
		Процедура ОтправитьЧерезДиадокРасширение(ПараметрыОтправкиДокумента) Экспорт
			
			ТекущаяОрганизация=	ПараметрыОтправкиДокумента.Организация;
			ДанныеКонтрагента= 	ПараметрыОтправкиДокумента.ДанныеКонтрагента;
			Контрагент = ПараметрыОтправкиДокумента.КонтрагентСсылка;
			
			НаименованиеСистемы = Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
			
			Organization= МетодКлиента("Модуль_Клиент","ПолучитьЯщикДиадокДляОрганизации", ТекущаяОрганизация);
			Если Organization = Неопределено Тогда 
				ПараметрыФормы= Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка отправки документа");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось отправить документ");
				ПараметрыФормы.Вставить("Подробности", 		"Не могу получить текущую организацию на сервере Диадок.");
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				Возврат;
			КонецЕсли;
			
			ЗаголовокОшибки= 	"";
			ОписаниеОшибки= 	"";
			ПодробностиОшибки= 	"";
			
			CounteragentBoxID = МетодСервераБезКонтекста(,"Контрагент_2_CounteragentBoxID", Контрагент);
			Если ЗначениеЗаполнено(CounteragentBoxID) Тогда
				Counteragent = Organization.GetCounteragentById(CounteragentBoxID);
				Status = Counteragent.GetStatus();
				Если Status <> "IsMyCounteragent" Тогда
					ЗаголовокОшибки= 	"Ошибка отправки документа";
					ОписаниеОшибки= 	"Не удалось отправить документ";
					ПодробностиОшибки= 	"Нельзя отправить документы контрагенту, с которым не установлены партнерские отношения.";
				КонецЕсли;
			Иначе
				ЗаголовокОшибки		 = НСтр("ru = 'Ошибка отправки документа'");
				ОписаниеОшибки		 = НСтр("ru = 'Не удалось отправить документ'");
				ПодробностиОшибки	 = СтрШаблон(НСтр(
				"ru = 'Контрагент %1 не сопоставлен сервисом %2
				|Необходимо открыть модуль %2,
				|перейти на вкладку ""Контрагенты""
				|и выполнить сопоставление'"), Контрагент, НаименованиеСистемы);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ПараметрыФормы= Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		ЗаголовокОшибки);
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	ОписаниеОшибки);
				ПараметрыФормы.Вставить("Подробности", 		ПодробностиОшибки);
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				Возврат;	
			КонецЕсли;
			
			//ЗаполнитьСписокКонтрагентов();
		
			Форма_Выгрузка= МетодКлиента(,"ПолучитьФормуОбработки", "Форма_Выгрузка",,ЭтаФорма);
			
			Форма_Выгрузка.СтруктураПараметрыДокументаРасширение= ПараметрыОтправкиДокумента;
			
			Форма_Выгрузка.НачатьВыгрузку(Новый Структура("Организация", Организация));
			
		КонецПроцедуры
	
	//} ОТПРАВИТЬ ДОКУМЕНТ


	//{ ПОСМОТРЕТЬ ДОКУМЕНТ
	
	&НаКлиенте
	Процедура ПоказатьОтправленныйДокумент(СтруктураИсходныеДанные) Экспорт
		
		СтруктураID = ПолучитьСтруктуруId(СтруктураИсходныеДанные);
		
		Document = ЭлектронныйДокументПоИдентификатору(СтруктураID.BoxID, СтруктураID.DocumentID);
		
		ПараметрыФормы= Новый Структура;
		
		Если НЕ Document.Department = Неопределено Тогда
			ПараметрыФормы.Вставить("DepartmentKpp", 		Document.Department.Kpp);
			ПараметрыФормы.Вставить("DepartmentId", 		Document.Department.Id);
		КонецЕсли;
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		
		ЭлементМассива = НовоеОписаниеДокументаПакета();
		ЭлементМассива.ФорматОтправки = ФорматЭД;
		ЭлементМассива.DocumentType = ФорматЭД.ИмяТипа;
		ЭлементМассива.DocumentFunction = ФорматЭД.ФункцияДокумента;
		ЭлементМассива.Документ1С = СтруктураИсходныеДанные.ДокументСсылка;
		ЭлементМассива.CounteragentBoxID = Document.Counteragent.ID;
		ЭлементМассива.РасширениеФайлаДиадок = ПолучитьРасширениеФайлаДиадок(Document.FileName);
		
		МассивДокументовПакета= Новый Массив;
		МассивДокументовПакета.Добавить(ЭлементМассива);
			
		ПараметрыФормы.Вставить("BoxID", 					Document.OrganizationID);
		ПараметрыФормы.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
		ПараметрыФормы.Вставить("МассивДокументовПакета", 	МассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова", 				"ТаблицаДокументовИсходящих");
				
		ИмяФормыПросмотра= 	МетодКлиента("Модуль_Клиент","ПолучитьИмяФормыДокумента", Document);
		ФормаПросмотра= 	МетодКлиента(,"ПолучитьФормуОбработки", ИмяФормыПросмотра, ПараметрыФормы, ЭтаФорма, СокрЛП(Document.DocumentID) + "/" + СокрЛП(Document.OrganizationID));
		
		ФормаПросмотра.ЭДОбъект= Document;
		ФормаПросмотра.Открыть();
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьСтруктуруId(Знач СтруктураИсходныеДанные)
		
		СтруктураID = Новый Структура("BoxID, DocumentID");
		
		НаименованиеСвойстваИдентификаторЯщикДокументаВДиадок = МетодСервера(,"ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок");
		ПВХИдентификаторЯщикДокументаВДиадок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеСвойстваИдентификаторЯщикДокументаВДиадок);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеСведения.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство";
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Объект", СтруктураИсходныеДанные.ДокументСсылка);
		Запрос.УстановитьПараметр("Свойство", ПВХИдентификаторЯщикДокументаВДиадок);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество()>0 Тогда
			СтруктураID.BoxID = РезультатЗапроса[0].Значение;				
		КонецЕсли;
		
		СтруктураID.DocumentID = МетодСервера(,"Документ_2_DocumentID", СтруктураИсходныеДанные.ДокументСсылка);
		
		Возврат СтруктураID;			
		
	КонецФункции

	//} ПОСМОТРЕТЬ ДОКУМЕНТ
	
	//{ ОТМЕНИТЬ СОПОСТАВЛЕНИЕ
	
	&НаКлиенте
	Процедура ОтменитьСопоставлениеРасширение(ПараметрыОтмены) Экспорт
		
		НаименованиеСистемы= Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		КоличествоДокументовОтмены= ПараметрыОтмены.МассивДокументов.Количество();
		Если КоличествоДокументовОтмены > 1 Тогда
			ТекстНачалоВопроса= "Вы действительно хотите отменить сопоставление для " + КоличествоДокументовОтмены + " документов";
		Иначе
			ТекстНачалоВопроса= "Вы действительно хотите отменить сопоставление для документа";
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработчикОтменитьСопоставление", ЭтаФорма, ПараметрыОтмены), 
					   ТекстНачалоВопроса + " " + НаименованиеСистемы + "?", 
					   РежимДиалогаВопрос.ДаНет, 
					   120, 
					   КодВозвратаДиалога.Нет, 
					   НаименованиеСистемы, 
					   КодВозвратаДиалога.Нет);
			
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтменитьСопоставление(РезультатВопроса, ПараметрыОбработчика) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			Для Каждого ТекДок Из ПараметрыОбработчика.МассивДокументов Цикл
				МетодСервера(,"Установить_DocumentID_Для_Документ", ТекДок, "", "");
				МетодСервера(,"ОчиститьCustomDocumentId", ТекДок);
			КонецЦикла;
			Если ПараметрыОбработчика.ФормаВызова <> Неопределено Тогда
				ПараметрыОбработчика.ФормаВызова.РасширениеДиадок_НастроитьФормуДокумента();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	//} ОТМЕНИТЬ СОПОСТАВЛЕНИЕ

//} РАСШИРЕНИЕ КОНФИГУРАЦИИ	

//} ОТЛАДКА

	&НаКлиенте
	Процедура РежимОтладкиСервераПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.РежимОтладкиСервера = РежимОтладкиСервера;
		
		ЗаполнитьПутьКаталогаОбработок();
		
		МетодСервераБезКонтекста( , "СброситьКэшМодулей");
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
		УстановитьНаименованиеСистемы();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура КаталогМодулейСервераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		ДиалогВыбораФайла= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.МножественныйВыбор= Ложь;
		ДиалогВыбораФайла.Каталог= КаталогМодулейСервера;
		ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ОбработчикКаталогМодулейСервераЗавершениеВыбораКаталога", ЭтаФорма));
		
	КонецПроцедуры

	&НаКлиенте
	Процедура КаталогМодулейСервераПриИзменении(Элемент)
		
		Объект.ПараметрыКлиентСервер.КаталогМодулейСервера = КаталогМодулейСервера;
		
		МетодКлиента( , "СинхронизироватьПараметрыКлиентСервера", Объект.ПараметрыКлиентСервер);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ЗаполнитьПутьКаталогаОбработок()
		
		Если Не РежимОтладкиСервера Или ЗначениеЗаполнено(КаталогМодулейСервера) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайла = Объект.ПараметрыКлиентСервер.ИспользуемоеИмяФайла;
		
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			Файл = Новый Файл(ИмяФайла);
			КаталогМодулейСервера = Файл.Путь;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикКаталогМодулейСервераЗавершениеВыбораКаталога(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КаталогМодулейСервера= РезультатВыбора[0];
		
		КаталогМодулейСервераПриИзменении(Неопределено);
		
	КонецПроцедуры
	
//{ ОТЛАДКА

//{ ОНЛАЙН СЧЕТ

&НаКлиенте
Процедура НадписьОкончанияОплаченногоПериодаНажатие(Элемент)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПанельОкончанияОплаченногоПериода()
	
	
	
КонецПроцедуры //ПоказатьПанельОкончанияОплаченногоПериода()

//} ОНЛАЙН СЧЕТ

//{ ОБЕРТКИ

	&НаКлиенте
	Процедура ДобавитьСтатистику_ОткрытиеФормы()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= СинонимТекущейФормы();
		НазваниеКатегории 	= Категории.ИнициализацияМодуля;
		НазваниеДействия 	= "Открыть форму";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ДействиеСФормой",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_ОткрытьФормуТехподдержки()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы = СинонимТекущейФормы();
		НазваниеКатегории = Категории.Техподдержка;
		НазваниеДействия = "Техподдержка";
		
		МетодКлиента("Модуль_Клиент", "Метрика_ДобавитьПоведение_НажатиеКнопки", НазваниеФормы, НазваниеКатегории,
					 НазваниеДействия);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиСменитьПользователя()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= СинонимТекущейФормы();
		НазваниеКатегории 	= Категории.ИнициализацияМодуля;
		НазваниеДействия 	= "Сменить пользователя";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_НажатиеКнопки",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменилиПоказатьЖурналДокументов()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= СинонимТекущейФормы();
		НазваниеКатегории 	= Категории.НастройкиМодуля;
		НазваниеДействия 	= "Изменить показать журнал документов";
		ФлагУстановлен		= ЖурналыДокументовПоказать;
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПриИзмененииФлага",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия,
						ФлагУстановлен	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеТочностьЦеныСФ()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= СинонимТекущейФормы();
		НазваниеКатегории 	= Категории.НастройкиМодуля;
		НазваниеДействия 	= "Изменить точность цены в СФ";
										
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_НажатиеКнопки",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменилиОтправкаВСтаромИнтерфейсе()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= СинонимТекущейФормы();
		НазваниеКатегории 	= Категории.НастройкиМодуля;
		НазваниеДействия 	= "Изменить отправка файлов в старом интерфейсе";
		ФлагУстановлен		= ОтправкаФайловСтарыйИнтерфейс;
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПриИзмененииФлага",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия,
						ФлагУстановлен	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_Авторизация()
		
		Переменные = Новый Структура;
		
		Переменные.Вставить("ОтправкаФайловСтарыйИнтерфейс"	, ОтправкаФайловСтарыйИнтерфейс);
		Переменные.Вставить("ЖурналыДокументовПоказать"		, ЖурналыДокументовПоказать);
		Переменные.Вставить("ТочностьЦеныСФ"				, ТочностьЦеныСФ);
		Переменные.Вставить("ФормаВводаНакладной"			, ИспользоватьФормуВводаНакладной);
		Переменные.Вставить("ИспользоватьСервисКонтурМаркировка", ИспользоватьСервисКонтурМаркировка);
		Переменные.Вставить("ИспользоватьПМ"				, ИспользоватьПодключаемыйМодуль);
		Переменные.Вставить("РежимСовместимостиФорматов"	, РежимСовместимостиФорматов155и820);
		
		МетодКлиента("Модуль_Клиент", "Метрика_ДобавитьСтатистику_Авторизации", Переменные);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_НастройкиОрганизаций()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		МетодКлиента(	"Модуль_Клиент", 
						"Метрика_ДобавитьСтатистику_НастройкиОрганизации",
						Категории.ИнициализацияМодуля	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_ПереходВЖурналДокументов()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы		= "Форма основная";
		НазваниеКатегории	= Категории.ЖурналДокументов; 
		НазваниеДействия	= "Открыть журнал документов";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПриСменеСтраницы",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_СменилиСтраницуЖурналаДокументов()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы		= СинонимТекущейФормы();
		НазваниеКатегории	= Категории.ЖурналДокументов; 
		
		Если Элементы.СтраницыДокументов.ТекущаяСтраница = Элементы.СтраницаСчетФактураВыданный Тогда
			НазваниеДействия = "Перейти к СФ";
		Иначе
			НазваниеДействия = "Перейти к РТУ";
		КонецЕсли;
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПриСменеСтраницы",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиДобавитьРеализациюВЖурналеДокументов()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= СинонимТекущейФормы();
		НазваниеКатегории 	= Категории.ЖурналДокументов;
		НазваниеДействия 	= "Создать";
		
		МетодКлиента(	"Модуль_Клиент", 
						"Метрика_ДобавитьПоведение_НажатиеКнопки", 
						НазваниеФормы, 
						НазваниеКатегории,
					 	НазваниеДействия	);
		
	КонецПроцедуры
					
	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиИзменитьВЖурналеДокументов()
	
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= СинонимТекущейФормы();
		НазваниеКатегории 	= Категории.ЖурналДокументов;
				
		Если Элементы.СтраницыДокументов.ТекущаяСтраница = Элементы.СтраницаСчетФактураВыданный Тогда
			НазваниеДействия = "Изменить СФ";
		Иначе
			НазваниеДействия = "Изменить РТУ";
		КонецЕсли;
		
		МетодКлиента(	"Модуль_Клиент", 
						"Метрика_ДобавитьПоведение_НажатиеКнопки", 
						НазваниеФормы, 
						НазваниеКатегории,
					 	НазваниеДействия	);
	
	КонецПроцедуры
					
	
	// Управляет запуском(отключением) периодической отправки статистики
	//
	// Параметры:
	//	ВключитьОтправку	- Булево	- признак включаем или отключаем периодическую отправку
	&НаКлиенте
	Процедура ВключитьОтключитьПериодическуюОтправкуСтатистики(ВключитьОтправку)
		
		ИмяОбработчикаОтправки		= "ОбработчикОтправитьСтатистику"; 
		ИнтервалОтправкиВСекундах	= 120;
		
		Если ВключитьОтправку Тогда
			ПодключитьОбработчикОжидания(ИмяОбработчикаОтправки, ИнтервалОтправкиВСекундах);
		Иначе
			ОтключитьОбработчикОжидания(ИмяОбработчикаОтправки);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Собирает первые события статистики
	// и запускает обработчик её отправки
	//
	&НаКлиенте
	Процедура НачатьСборСтатистики()
		
		ИспользоватьМетрики = МетодКлиента("Модуль_Клиент", "ИспользоватьМетрики");
		
		Если Не ИспользоватьМетрики Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьСтатистику_ОткрытиеФормы();
		ДобавитьСтатистику_Авторизация();
		ДобавитьСтатистику_НастройкиОрганизаций();
		
		ВключитьОтключитьПериодическуюОтправкуСтатистики(Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция СценарииГрупповойОбработки()
		
		Результат = МетодКлиента("Модуль_Клиент", "СценарииГрупповойОбработки");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ФункциональностьОграничена(ИдентификаторФункциональности)
		
		Результат = МетодКлиента("Модуль_Клиент", "ФункциональностьОграничена", ИдентификаторФункциональности);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПоказатьПредупреждениеОбОграниченнииФункциональности(ИдентификаторФункциональности)
		
		МетодКлиента("Модуль_Клиент", "ПоказатьПредупреждениеОбОграниченнииФункциональности", ИдентификаторФункциональности);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция НаправленияДокументов()
		
		Результат = МетодКлиента("Модуль_Клиент", "НаправленияДокументов");
		
		Возврат Результат;
		
	КонецФункции
	
//} ОБЕРТКИ

&НаКлиенте
Процедура ПоказатьОкноТехническойПоддержки()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально"
		, "ФормаТехподдержка"
		, ПараметрыФормы
		, ЭтаФорма);
	
	ДобавитьСтатистику_ОткрытьФормуТехподдержки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НавигационнаяСсылкаВыбратьМодульИнтеграции()
	
	Возврат "ВыбратьМодульИнтеграции";
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкуМаркераКонфигурации(ЗначениеМаркера)
	
	КлючОбъекта	 = "МодульДиадок";
	КлючНастроек = "МаркерКонфигурации";
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, ЗначениеМаркера, , "");
	
КонецПроцедуры

&НаКлиенте
Функция КраткоеНаименованиеСистемы()
	
	Результат = Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВыборМаркераКонфигурации()
	
	МаркерыКонфигураций	 = МетодСервераБезКонтекста(, "ДопустимыеМаркерыКонфигураций");
	ОбработкаЗавершения	 = Новый ОписаниеОповещения("ПослеВыбораМаркераКонфигурации", ЭтаФорма);
	ЗаголовокОкнаВыбора	 = СтрШаблон("%1: Выбор базовой конфигурации", КраткоеНаименованиеСистемы());
	ТекущийЭлементСписка = МаркерыКонфигураций.НайтиПоЗначению(Объект.ПараметрыКлиентСервер.МаркерКонфигурации);
	
	МаркерыКонфигураций.ПоказатьВыборЭлемента(ОбработкаЗавершения
		, ЗаголовокОкнаВыбора
		, ТекущийЭлементСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораМаркераКонфигурации(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено ИЛИ ВыбранныйЭлемент.Значение = Объект.ПараметрыКлиентСервер.МаркерКонфигурации Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкуМаркераКонфигурации(ВыбранныйЭлемент.Значение);
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации <> МетодСервераБезКонтекста(, "ПолучитьМаркерКонфигурации") Тогда
		
		ПоказатьПредупреждение(,
			"Необходима повторная инициализация!
			|Закройте модуль и откройте его заново."
			,
			, КраткоеНаименованиеСистемы());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМодульИнтеграцииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = НавигационнаяСсылкаВыбратьМодульИнтеграции() Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьВыборМаркераКонфигурации();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли


&НаСервере
Процедура ЗаполнитьРегистрСостоянийДиадок(ТекущийDocumentId)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_ex_ДокументыДиадок.ИдентификаторДиадок КАК ИдентификаторДиадок,
	|	pcru_ex_ДокументыДиадок.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.pcru_ex_ДокументыДиадок КАК pcru_ex_ДокументыДиадок
	|ГДЕ
	|	pcru_ex_ДокументыДиадок.ИдентификаторДиадок = &ИдентификаторДиадок";
	Запрос.УстановитьПараметр("ИдентификаторДиадок",ТекущийDocumentId );
	Если  Запрос.Выполнить().Пустой() Тогда
		Мз  = РегистрыСведений.pcru_ex_ДокументыДиадок.СоздатьМенеджерЗаписи();
		Мз.ИдентификаторДиадок = ТекущийDocumentId;
		Мз.Записать(Истина);
	КонецЕсли;  

КонецПроцедуры

	&НаСервереБезКонтекста
Функция ПолучитьСостояние(ТекущийDocumentId)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	pcru_ex_ДокументыДиадок.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.pcru_ex_ДокументыДиадок КАК pcru_ex_ДокументыДиадок
	|ГДЕ
	|	pcru_ex_ДокументыДиадок.ИдентификаторДиадок = &ИдентификаторДиадок";
	Запрос.УстановитьПараметр("ИдентификаторДиадок",ТекущийDocumentId );
	Если  Запрос.Выполнить().Пустой() Тогда
		Возврат "Не найден"
		
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Состояние;	
	КонецЕсли;  	
	
КонецФункции


&НаКлиенте
Процедура ОтправитьВДО(Команда)
	СписокВыбора = pcru_ex_WSWORKS.ПолучитьСписокПодразделенийДО();
	Если СписокВыбора.Количество() > 0  Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВидДокумента","Заявка на оплату");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбораТипа",ЭтаФорма,ДопПараметры);
		ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбора);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияВыбораТипа(ЗначениеВыбора, ДопПараметры) Экспорт
	// Процедура  обработки оповещений должна быть экспортной, должна иметь как минимум 2 параметра
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
		ТекущиеДанные = Элементы.ТаблицаДокументовВходящих.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета Тогда
		ТекущиеДанные = Элементы.pcru_ТаблицаНеотработанныеДокументы_Счета.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие Тогда 
		ТекущиеДанные = Элементы.pcru_ТаблицаНеотработанныеДокументы_Прочие.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок Тогда 
		ТекущиеДанные = Элементы.pcru_ТаблицаВРаботеДокументы.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда 
		ТекущиеДанные = Элементы.pcru_ТаблицаОтработанныеДокументы.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Document= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ТекущиеДанные.BoxID).GetDocumentById(ТекущиеДанные.DocumentID);
		Если Document.type <> "Nonformalized" и Document.type <> "NonformalizedProforma"  Тогда
			РасширениеФайлаДиадок = "XLSX";
			ТД =   СформироватьПечатнуюФормуПоДокументуДиадока(Document);
			ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
			ТД.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.XLSX) ;
			ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
			Строка64 = 	Base64Строка(ДД);
			УдалитьФайлы(ИмяВременногоФайла);
		Иначе
			РасширениеФайлаДиадок = СтрПолучитьСтроку(СтрЗаменить(Document.FileName,".",Символы.ПС),СтрЧислоСтрок(СтрЗаменить(Document.FileName,".",Символы.ПС))); 
			Если Document.HasCustomPrintForm = Ложь Тогда
				ИмяВременногоФайла=	ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
				Document.SaveSenderContent(ИмяВременногоФайла);
			Иначе
				РасширениеФайлаДиадок = "pdf";
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
				Document.GetPrintForm(ИмяВременногоФайла, 30);
			КонецЕсли;
			ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
			Строка64 = 	Base64Строка(ДД);			
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли; 
		Список =  pcru_ex_WSWORKS.ПолучитьСписокПодразделенийДО();
		ОтправитьВДОНаСервере(ТекущиеДанные.DocumentId,Строка64,РасширениеФайлаДиадок,ЗначениеВыбора.Значение,ДопПараметры.ВидДокумента);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьВДОНаСервере(DocumentId,Строка64,РасширениеФайлаДиадок,Подр,ВидДокумента)
	Отбор = Новый Структура();
	Отбор.Вставить("DocumentId",DocumentId);
		
	//Строки = ТаблицаДокументовВходящих.НайтиСтроки(Отбор);
	Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
		Строки = ТаблицаДокументовВходящих.НайтиСтроки(Отбор);
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета Тогда
		Строки = pcru_ТаблицаНеотработанныеДокументы_Счета.НайтиСтроки(Отбор);
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие Тогда 
		Строки = pcru_ТаблицаНеотработанныеДокументы_Прочие.НайтиСтроки(Отбор);
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок Тогда 
		Строки = pcru_ТаблицаВРаботеДокументы.НайтиСтроки(Отбор);
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда 
		Строки = pcru_ТаблицаОтработанныеДокументы.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Если Строки.Количество() > 0 Тогда
		
		СтрокаJSON = СтруктураДокументДиадок(Строки[0], Строка64, РасширениеФайлаДиадок, Подр, ВидДокумента);
		ргОбменДанными.ОтправитьВОбмен("ДокументИзДиадок", Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("UMFO"), Справочники.ОбменДаннымиКлиенты.НайтиПоКоду("DOCMNG"), Неопределено, СтрокаJSON);
		
		//Стр = Новый Структура;
		//Стр.Вставить("AttachmentVersion",Строки[0].AttachmentVersion);
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ДополнительныеСведения.Объект КАК Объект
		//|ИЗ
		//|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		//|ГДЕ
		//|	ДополнительныеСведения.Значение = &Значение";
		//Запрос.УстановитьПараметр("Значение",Строки[0].CounteragentId);
		//Выборка = Запрос.Выполнить().Выбрать();
		//Пока Выборка.Следующий() Цикл
		//	Стр.Вставить("ИНН",Выборка.Объект.ИНН);
		//КонецЦикла;
		//Стр.Вставить("BoxID",Строки[0].BoxID);
		//Стр.Вставить("ContentType",Строки[0].ContentType);
		//Стр.Вставить("CounteragentId",Строки[0].CounteragentId);
		//Стр.Вставить("DepartmentId",Строки[0].DepartmentId);
		//Стр.Вставить("DepartmentKpp",Строки[0].DepartmentKpp);
		//Стр.Вставить("DocumentDirection",Строки[0].DocumentDirection);
		//Стр.Вставить("DocumentFunction",Строки[0].DocumentFunction);
		//Стр.Вставить("DocumentId",Строки[0].DocumentId);
		//Стр.Вставить("DocumentType",Строки[0].DocumentType);
		//Стр.Вставить("FileGUID",Строки[0].FileGUID);
		//Стр.Вставить("FileName",Строки[0].FileName);
		//Стр.Вставить("MessageID",Строки[0].MessageID);
		//Стр.Вставить("Resolutions",Строки[0].Resolutions);
		//Стр.Вставить("RevocationStatus",Строки[0].RevocationStatus);
		//Стр.Вставить("Status",Строки[0].Status);
		//Стр.Вставить("Валюта",Строки[0].Валюта);
		//Стр.Вставить("Дата",Строки[0].Дата);
		//Стр.Вставить("ДатаУчета",Строки[0].ДатаУчета);
		//Стр.Вставить("ЕстьInitialDocuments",Строки[0].ЕстьInitialDocuments);
		//Стр.Вставить("ИндексИконкиПакета",Строки[0].ИндексИконкиПакета);
		//Стр.Вставить("ИндексИконкиПакетаКопия",Строки[0].ИндексИконкиПакетаКопия);
		//Стр.Вставить("Номер",Строки[0].Номер);
		////	Стр.Вставить("ПервичныйДокумент",Строки[0].ПервичныйДокумент);
		//Стр.Вставить("Подразделение",Подр);
		//Стр.Вставить("ПозицияСортировки",Строки[0].ПозицияСортировки);
		//Стр.Вставить("Покупатель",Строки[0].Покупатель);
		//Стр.Вставить("Контрагент",Строки[0].Продавец);
		//Стр.Вставить("СостояниеДокументооборота",Строки[0].СостояниеДокументооборота);
		//Стр.Вставить("СостояниеСогласования",Строки[0].СостояниеСогласования);
		//Стр.Вставить("Сумма",Строки[0].Сумма);
		//Стр.Вставить("СуммаДокументаЗначение",Строки[0].СуммаДокументаЗначение);
		//Стр.Вставить("СуммаНДС",Строки[0].СуммаНДС);
		//Стр.Вставить("ТекстОшибки",Строки[0].ТекстОшибки);
		//Стр.Вставить("НаименованиеДокумента",Строки[0].ТипДокумента +" "+Строки[0].Номер );
		//Стр.Вставить("ЭтоТестовыйДок",Строки[0].ЭтоТестовыйДок);
		//Стр.Вставить("РасширениеФайлаДиадок",РасширениеФайлаДиадок);	
		//Стр.Вставить("Данные",Строка64);
		//Стр.Вставить("ВидДокумента",ВидДокумента);
		////
		//ЗаписьJSON = Новый ЗаписьJSON;
		//ЗаписьJSON.УстановитьСтроку();
		//ЗаписатьJSON(ЗаписьJSON, Стр ); 
		//СтрJSON = ЗаписьJSON.Закрыть();
		
		////
		////Если Тест Тогда
		////	Определение = Новый WSОпределения("http://ruspbpacc01/DOCMNG_TEST/ws/DocumentWorkflow.1cws?wsdl","WS","123");
		////	Прокси = Новый WSПрокси(Определение, "http://ruspbpacc01/DocumentWorkflow","Pcru_DocumentWorkflow" ,"Pcru_DocumentWorkflowSoap" );       
		////	Прокси.Пользователь = "WS";      Прокси.Пароль = "123";
		////Иначе
		
			//Определение = Новый WSОпределения("http://ruspbpacc01/DOCMNG/ws/DocumentWorkflow.1cws?wsdl","WS","WS159753");
			//Прокси = Новый WSПрокси(Определение, "http://ruspbpacc01/DocumentWorkflow","Pcru_DocumentWorkflow" ,"Pcru_DocumentWorkflowSoap" );       
			//Прокси.Пользователь = "WS";      Прокси.Пароль = "WS159753";
		////КонецЕсли; 
		//Результат = Прокси.NewDocument(СтрJSON);
		//Сообщить(Результат);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция СтруктураДокументДиадок(СтрокаДокумента, Строка64, РасширениеФайлаДиадок, Подр, ВидДокумента) Экспорт
	
	Стр = Новый Структура;
	Стр.Вставить("AttachmentVersion",СтрокаДокумента.AttachmentVersion);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение";
	Запрос.УстановитьПараметр("Значение",СтрокаДокумента.CounteragentId);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Стр.Вставить("ИНН",Выборка.Объект.ИНН);
	КонецЦикла;
	Стр.Вставить("BoxID",СтрокаДокумента.BoxID);
	Стр.Вставить("ContentType",СтрокаДокумента.ContentType);
	Стр.Вставить("CounteragentId",СтрокаДокумента.CounteragentId);
	Стр.Вставить("DepartmentId",СтрокаДокумента.DepartmentId);
	Стр.Вставить("DepartmentKpp",СтрокаДокумента.DepartmentKpp);
	Стр.Вставить("DocumentDirection",СтрокаДокумента.DocumentDirection);
	Стр.Вставить("DocumentFunction",СтрокаДокумента.DocumentFunction);
	Стр.Вставить("DocumentId",СтрокаДокумента.DocumentId);
	Стр.Вставить("DocumentType",СтрокаДокумента.DocumentType);
	Стр.Вставить("FileGUID",СтрокаДокумента.FileGUID);
	Стр.Вставить("FileName",СтрокаДокумента.FileName);
	Стр.Вставить("MessageID",СтрокаДокумента.MessageID);
	Стр.Вставить("Resolutions",СтрокаДокумента.Resolutions);
	Стр.Вставить("RevocationStatus",СтрокаДокумента.RevocationStatus);
	Стр.Вставить("Status",СтрокаДокумента.Status);
	Стр.Вставить("Валюта",СтрокаДокумента.Валюта);
	Стр.Вставить("Дата",СтрокаДокумента.Дата);
	Стр.Вставить("ДатаУчета",СтрокаДокумента.ДатаУчета);
	Стр.Вставить("ЕстьInitialDocuments",СтрокаДокумента.ЕстьInitialDocuments);
	Стр.Вставить("ИндексИконкиПакета",СтрокаДокумента.ИндексИконкиПакета);
	Стр.Вставить("ИндексИконкиПакетаКопия",СтрокаДокумента.ИндексИконкиПакетаКопия);
	Стр.Вставить("Номер",СтрокаДокумента.Номер);
	//	Стр.Вставить("ПервичныйДокумент",СтрокаДокумента.ПервичныйДокумент);
	Стр.Вставить("Подразделение",Подр);
	Стр.Вставить("ПозицияСортировки",СтрокаДокумента.ПозицияСортировки);
	Стр.Вставить("Покупатель",СтрокаДокумента.Покупатель);
	Стр.Вставить("Контрагент",СтрокаДокумента.Продавец);
	Стр.Вставить("СостояниеДокументооборота",СтрокаДокумента.СостояниеДокументооборота);
	Стр.Вставить("СостояниеСогласования",СтрокаДокумента.СостояниеСогласования);
	Стр.Вставить("Сумма",СтрокаДокумента.Сумма);
	Стр.Вставить("СуммаДокументаЗначение",СтрокаДокумента.СуммаДокументаЗначение);
	Стр.Вставить("СуммаНДС",СтрокаДокумента.СуммаНДС);
	Стр.Вставить("ТекстОшибки",СтрокаДокумента.ТекстОшибки);
	Стр.Вставить("НаименованиеДокумента",СтрокаДокумента.ТипДокумента +" "+СтрокаДокумента.Номер );
	Стр.Вставить("ЭтоТестовыйДок",СтрокаДокумента.ЭтоТестовыйДок);
	Стр.Вставить("РасширениеФайлаДиадок",РасширениеФайлаДиадок);	
	Стр.Вставить("Данные",Строка64);
	Стр.Вставить("ВидДокумента",ВидДокумента);
    //
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Стр ); 
	СтрJSON = ЗаписьJSON.Закрыть();

	Возврат СтрJSON;
	
КонецФункции


&НаКлиенте
Процедура pcru_ПоказатьТабдок(Команда)
	
	//ТекущиеДанные = Элементы.ТаблицаДокументовВходящих.ТекущиеДанные;
	Если Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.СтраницаПолученныеДиадок Тогда
		ТекущиеДанные = Элементы.ТаблицаДокументовВходящих.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Счета Тогда
		ТекущиеДанные = Элементы.pcru_ТаблицаНеотработанныеДокументы_Счета.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаНеотработанныеДиадок_Прочие Тогда 
		ТекущиеДанные = Элементы.pcru_ТаблицаНеотработанныеДокументы_Прочие.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаВРаботеДиадок Тогда 
		ТекущиеДанные = Элементы.pcru_ТаблицаВРаботеДокументы.ТекущиеДанные;
	ИначеЕсли Элементы.ПанельРежимов.ТекущаяСтраница = Элементы.pcru_СтраницаОтработанныеДиадок Тогда 
		ТекущиеДанные = Элементы.pcru_ТаблицаОтработанныеДокументы.ТекущиеДанные;
	КонецЕсли;

	Если ТекущиеДанные <> Неопределено Тогда
		Попытка
			Document= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ТекущиеДанные.BoxID).GetDocumentById(ТекущиеДанные.DocumentID);
		Исключение
			Результат=	Новый Структура();
			Результат.Вставить("ОписаниеОшибки", 	"Ошибка получения документа с сервера " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Результат.Вставить("Подробности", 		ТекущиеДанные.DocumentID);
			ОткрытьФормуВыводаОшибки(Результат, Истина);
			Возврат;
		КонецПопытки;
		//  эти 2 типа относятся к неформализованным документам , которые передаются бинарными данными
		//  Если в дальнейшем выяснятся еще такие типы - стоит добавить их сюда.
		Если Document.type <> "Nonformalized" и Document.type <> "NonformalizedProforma"  Тогда
			ТД =   СформироватьПечатнуюФормуПоДокументуДиадока(Document);
			ТД.Показать();
		Иначе
			РасширениеФайлаДиадок = СтрПолучитьСтроку(СтрЗаменить(Document.FileName,".",Символы.ПС),СтрЧислоСтрок(СтрЗаменить(Document.FileName,".",Символы.ПС)));    
			Если Document.HasCustomPrintForm = Ложь Тогда
				ИмяВременногоФайла=	ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
				Document.SaveSenderContent(ИмяВременногоФайла);
			Иначе
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
				Document.GetPrintForm(ИмяВременногоФайла, 30);
			КонецЕсли;
			ЗапуститьПриложение(ИмяВременногоФайла);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
// Параметры:
//	Document				- СОМ Объект	- обрабатываемый электронный документ
//	СтруктураSellerContent	- Структура 	- контент отправителя, соответствующий SellerContent, обрабатываемого электронного документа
//	СтруктураBuyerContent 	- Структура 	- контент получателя, соответствующий BuyerContent, обрабатываемого электронного документа 
Функция СформироватьДанныеОПодписях(Document, Content, BuyerContent)
	
	Результат = Новый Структура;
	
	Результат.Вставить("SellerSigner", МетодКлиента("Модуль_Клиент", "Новый_Signer"));
	Результат.Вставить("BuyerSigner" , МетодКлиента("Модуль_Клиент", "Новый_Signer"));
	
	Результат.Вставить("SenderSignature"   , МетодКлиента("Модуль_Клиент", "Новый_Signature"));
	Результат.Вставить("RecipientSignature", МетодКлиента("Модуль_Клиент", "Новый_Signature"));
	
	Результат.Вставить("DocumentMetaData", Новый Структура("Timestamp, DocumentID, SenderSignatureStatus, SenderName, RecipientName"));
	
	Результат.DocumentMetaData.DocumentID			 = Document.DocumentID;
	Результат.DocumentMetaData.TimeStamp			 = Document.TimeStamp;
	Результат.DocumentMetaData.SenderSignatureStatus = Document.SenderSignatureStatus;
	
	SenderSignature = Document.GetSenderSignature();
	Если SenderSignature <> Неопределено Тогда
		Результат.DocumentMetaData.SenderName = SenderSignature.Certificate.OrganizationName;
	КонецЕсли;
	
	RecipientSignature = Document.GetRecipientSignature();
	Если RecipientSignature <> Неопределено Тогда
		Результат.DocumentMetaData.RecipientName = RecipientSignature.Certificate.OrganizationName;
	КонецЕсли;
	
	Если Content.Свойство("Signer") Тогда
		
		Результат.SellerSigner = Content.Signer;
		
	ИначеЕсли Content.Свойство("Signers") И ЗначениеЗаполнено(Content.Signers) Тогда
		
		Результат.SellerSigner = Content.Signers[0].SignerDetails;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(BuyerContent) Тогда
		
		Если BuyerContent.Свойство("Signer") Тогда
			
			Результат.BuyerSigner = BuyerContent.Signer;
			
		ИначеЕсли BuyerContent.Свойство("Signers") И ЗначениеЗаполнено(BuyerContent.Signers) Тогда
			
			Результат.BuyerSigner = BuyerContent.Signers[0].SignerDetails;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetSenderSignature()	  , Результат.SenderSignature);
	МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetRecipientSignature(), Результат.RecipientSignature);
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция СформироватьПечатнуюФормуПоДокументуДиадока(Document)
	
	Результат = Неопределено;
	
	ПротоСтруктура		 = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Ложь);
	ПротоСтруктураОтвета = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Истина);
	
	Если ПротоСтруктура.Свойство("Контент") Тогда
		
		
		ПротоКонтентОтвета = Неопределено;
		ПротоСтруктураОтвета.Свойство("Контент", ПротоКонтентОтвета);
		
		ПротоКонтент		 = ПротоСтруктура.Контент;
		ТипКонтента			 = ПротоСтруктура.ТипКонтента;
		ТипДокумента		 = Document.Type;
		ДанныеШтампа		 = СформироватьДанныеОПодписях(Document, ПротоКонтент, ПротоКонтентОтвета);
		
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПротоКонтентОтвета"	, ПротоКонтентОтвета);
		ДопПараметры.Вставить("ДанныеШтампа"		, ДанныеШтампа);
		ДопПараметры.Вставить("ПоказатьДопСведения"	, Истина);
		
		Результат = МетодСервераБезКонтекста("ПечатныеФормы", "ПечатнаяФормаПротоКонтента", ПротоКонтент, ТипКонтента, ТипДокумента, ДопПараметры);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьВДОТест(Команда)
	СписокВыбора = pcru_ex_WSWORKS.ПолучитьСписокПодразделенийДО();
	Если СписокВыбора.Количество() > 0  Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВидДокумента","Входящий");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбораТипа",ЭтаФорма,ДопПараметры);
		ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбора);
	КонецЕсли; 	
	//Если Элементы.ТаблицаДокументовВходящих.ТекущиеДанные<>Неопределено Тогда
	//	ТекущиеДанные =Элементы.ТаблицаДокументовВходящих.ТекущиеДанные;		
	//	Document= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ТекущиеДанные.BoxID).GetDocumentById(ТекущиеДанные.DocumentID);
	//	Если Document.type <> "Nonformalized" и Document.type <> "NonformalizedProforma"  Тогда
	//		РасширениеФайлаДиадок = "XLSX";
	//		ТД =   СформироватьПечатнуюФормуПоДокументуДиадока(Document);
	//		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
	//		ТД.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.XLSX) ;
	//		ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
	//		Строка64 = 	Base64Строка(ДД);
	//		УдалитьФайлы(ИмяВременногоФайла);
	//	Иначе
	//		РасширениеФайлаДиадок = СтрПолучитьСтроку(СтрЗаменить(Document.FileName,".",Символы.ПС),СтрЧислоСтрок(СтрЗаменить(Document.FileName,".",Символы.ПС)));    
	//		Если Document.HasCustomPrintForm = Ложь Тогда
	//			ИмяВременногоФайла=	ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
	//			Document.SaveSenderContent(ИмяВременногоФайла);
	//		Иначе
	//			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	//			Document.GetPrintForm(ИмяВременногоФайла, 30);
	//		КонецЕсли;
	//		ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
	//		Строка64 = 	Base64Строка(ДД);
	//		УдалитьФайлы(ИмяВременногоФайла);
	//	КонецЕсли; 
	//	ОтправитьВДОНаСервере(Элементы.ТаблицаДокументовВходящих.ТекущиеДанные.DocumentId,Строка64,РасширениеФайлаДиадок,true);
	//КонецЕсли; 
	
КонецПроцедуры


&НаКлиенте
Процедура pcru_ВРаботеКоманднаяПанельОткрытьКарточкуДокумента(Команда)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаВРаботеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура pcru_НеотработанныеПрочиеКоманднаяПанельОткрытьКарточкуДокумента(Команда)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаНеотработанныеДокументы_Прочие");
КонецПроцедуры

&НаКлиенте
Процедура pcru_НеотработанныеСчетаКоманднаяПанельОткрытьКарточкуДокумента(Команда)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаНеотработанныеДокументы_Счета");
КонецПроцедуры

&НаКлиенте
Процедура pcru_ОтработанныеКоманднаяПанельОткрытьКарточкуДокумента(Команда)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаОтработанныеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура pcru_ОбновитьЗаголовокИнтервала(ИмяИнтервала)
	
	Элементы["Интервал"+ИмяИнтервала].Заголовок= МетодКлиента("Модуль_Клиент","ПредставлениеПериодаДД", СтруктураИнтервалов.Полученные.ДатаНачала, СтруктураИнтервалов.Полученные.ДатаОкончания) + " " + ?(СтруктураИнтервалов.Полученные.ОтбиратьПоДатеДокумента, "(по дате документа)", "(по дате учета)");
	
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_СчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаНеотработанныеДокументы_Счета");
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_СчетаПриАктивизацииСтроки(Элемент)
	Элементы.pcru_НеотработанныеСчетаКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_СчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_СчетаПередНачаломИзменения(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_СчетаПередУдалением(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_ПрочиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаНеотработанныеДокументы_Прочие");
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_ПрочиеПриАктивизацииСтроки(Элемент)
	Элементы.pcru_НеотработанныеПрочиеКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_ПрочиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_ПрочиеПередНачаломИзменения(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаНеотработанныеДокументы_ПрочиеПередУдалением(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаВРаботеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаВРаботеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаВРаботеДокументыПриАктивизацииСтроки(Элемент)
	Элементы.pcru_ВРаботеКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаВРаботеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаВРаботеДокументыПередНачаломИзменения(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаВРаботеДокументыПередУдалением(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаОтработанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СформироватьПечатнуюФормуПоФайлуДиадок("pcru_ТаблицаОтработанныеДокументы");
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаОтработанныеДокументыПриАктивизацииСтроки(Элемент)
	Элементы.pcru_ОтработанныеКоманднаяПанельОткрытьКарточкуДокумента.Доступность= Элемент.ТекущаяСтрока <> Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаОтработанныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаОтработанныеДокументыПередНачаломИзменения(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаКлиенте
Процедура pcru_ТаблицаОтработанныеДокументыПередУдалением(Элемент, Отказ)
	Отказ =	Истина;
КонецПроцедуры

&НаСервере
Функция pcru_СчетЗагруженВДО(DocumentId)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	pcru_ex_ДокументыДиадок.ЗагруженВДО КАК ЗагруженВДО
	|ИЗ
	|	РегистрСведений.pcru_ex_ДокументыДиадок КАК pcru_ex_ДокументыДиадок
	|ГДЕ
	|	pcru_ex_ДокументыДиадок.ИдентификаторДиадок = &ИдентификаторДиадок
	|	И pcru_ex_ДокументыДиадок.ЗагруженВДО";
	Запрос.УстановитьПараметр("ИдентификаторДиадок", DocumentId);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Определение = Новый WSОпределения("http://ruspbpacc01/DOCMNGWS/ws/DocumentWorkflow.1cws?wsdl","WS","WS159753");
	Прокси = Новый WSПрокси(Определение, "http://ruspbpacc01/DocumentWorkflow","Pcru_DocumentWorkflow" ,"Pcru_DocumentWorkflowSoap" );
	Прокси.Пользователь = "WS";
	Прокси.Пароль = "WS159753";
	Возврат Прокси.GetDocDiadocToID(DocumentId);
	
КонецФункции

&НаКлиенте
Процедура pcru_ПометитьКакОтработанный(Команда)
	
	Если Элементы.pcru_ТаблицаНеотработанныеДокументы_Счета.ТекущиеДанные<>Неопределено Тогда
		ТекущиеДанные = Элементы.pcru_ТаблицаНеотработанныеДокументы_Счета.ТекущиеДанные;
		pcru_ПометитьКакОтработанныйНаСервере(ТекущиеДанные.DocumentId);
	КонецЕсли;
	
	pcru_ТаблицаНеотработанныеДокументы_Счета.Очистить();
	ОбработчикОбновлениеСпискаДокументов();
	
КонецПроцедуры

&НаСервере
Процедура pcru_ПометитьКакОтработанныйНаСервере(DocumentId);
	
	набор = РегистрыСведений.pcru_ex_ДокументыДиадок.СоздатьНаборЗаписей();
	набор.Отбор.ИдентификаторДиадок.Установить(DocumentId);
	набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Для Каждого Строка Из набор Цикл
			Строка.ЗагруженВДО = Истина;
		КонецЦикла;
	Иначе
		Строка = набор.Добавить();
		Строка.ИдентификаторДиадок = DocumentId;
		Строка.ЗагруженВДО = Истина;
	КонецЕсли;
	набор.Записать(Истина);
КонецПроцедуры
