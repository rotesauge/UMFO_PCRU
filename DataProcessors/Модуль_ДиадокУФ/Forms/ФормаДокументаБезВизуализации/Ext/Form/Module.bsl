#Если ВебКлиент Тогда
	
	ВызватьИсключение НСтр("ru = 'Недопустимый режим работы (Веб-клиент).'");
	
#Иначе
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ПЕРЕМЕННЫЕ МОДУЛЯ
	
	&НаКлиенте
	Перем UserPermissions;
	
	&НаКлиенте
	Перем ПраваПользователяОрганизации;
	
	&НаКлиенте
	Перем ЭтоНовыйЭлектронныйДокумент;
	
	&НаКлиенте
	Перем ЭтоТестовыйДокумент;
	
	&НаКлиенте
	Перем ЕстьКЭП;
	
	&НаКлиенте
	Перем СтатусЭД;
	
	&НаКлиенте
	Перем Organization Экспорт; 
	
	&НаКлиенте
	Перем МассивСсылокРНК Экспорт;
	&НаКлиенте
	Перем ПодходящаяСФ;
	
	&НаКлиенте
	Перем ЭДОбъект Экспорт;
	
	&НаКлиенте
	Перем ПредставлениеСтатусаРоуминг, ПредставлениеСтатусаРоумингДетали;
	
	//} ПЕРЕМЕННЫЕ МОДУЛЯ
	////////////////////////////////////////////////////////////////////////////////
	
	#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ
	
	&НаКлиенте
	Перем Платформа Экспорт;
	
	&НаСервере
	Перем ОбработкаОбъект;
	
	#КонецОбласти
	
	#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ
	
	&НаКлиенте
	Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
		Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
	КонецФункции
	
	&НаКлиенте
	Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
		Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
	КонецФункции
	
	&НаСервере
	Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
		Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
	КонецФункции
	
	&НаСервере
	Функция ОбработкаОбъект() Экспорт
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			
			Если СтруктураОбработки <> Неопределено Тогда
				ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
			КонецЕсли;
			
			Если ОбработкаОбъект = Неопределено Тогда
				
				ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
				
				Попытка
					ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
				Исключение КонецПопытки;
				
			Иначе
				ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ОбработкаОбъект;
		
	КонецФункции
	
	&НаКлиенте
	Функция ОсновнаяФорма(ТекущийВладелецФормы)
		
		Если ТекущийВладелецФормы = Неопределено Тогда
			Возврат Неопределено
		ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
			Возврат ТекущийВладелецФормы;
		Иначе
			Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
		КонецЕсли;
		
	КонецФункции
	
	
	&НаСервере
	Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПлатформаПриОткрытии(Отказ)
		
		ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
		
		Если ОсновнаяФорма <> Неопределено Тогда
			Платформа= ОсновнаяФорма.Платформа;
		КонецЕсли;
		
		Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПлатформаПриЗакрытии()
		
		Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
		
	КонецПроцедуры
	
	#КонецОбласти
	
	
	#Область СлужебныеПроцедурыИФункции
	
	// Конструктор структуры с описанием статусов электронного документа
	// 
	// Возвращаемое значение:
	//  Структура - содержит поля:
	//   * ОтветноеДействие - Строка - состояние ответного действия со стороны получателя документа (RecipientResponseStatus).
	//                                 см. https://diadoc-sdk.readthedocs.io/ru/latest/proto/RecipientResponseStatus.html
	//   * Аннулирование - Строка - статус аннулирования документа (RevocationStatus).
	//                              см. https://diadoc-sdk.readthedocs.io/ru/latest/proto/RevocationStatus.html
	//
	&НаКлиентеНаСервереБезКонтекста
	Функция НовыйСтатусЭлектронногоДокумента()
		
		Результат = Новый Структура;
		Результат.Вставить("Аннулирование");
		Результат.Вставить("ОтветноеДействие");
		Результат.Вставить("Подписание");
		Результат.Вставить("Согласование");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПрочитатьСтатусыДокумента()
		
		СтатусЭД = НовыйСтатусЭлектронногоДокумента();
		
		Если ЭДОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтатусЭД.ОтветноеДействие = ЭДОбъект.RecipientResponseStatus;
		СтатусЭД.Аннулирование = ЭДОбъект.RevocationStatus;
		СтатусЭД.Подписание = ЭДОбъект.SenderSignatureStatus;
		
		Если ЭДОбъект.ResolutionStatus <> Неопределено Тогда
			СтатусЭД.Согласование = ЭДОбъект.ResolutionStatus.Type;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиентеНаСервереБезКонтекста
	Функция НовыйРазрешенияПользователяОрганизации()
		
		Результат = Новый Структура;
		Результат.Вставить("Подписание", Ложь);
		Результат.Вставить("Согласование", Ложь);
		Результат.Вставить("ЗапросРезолюции", Ложь);
		Результат.Вставить("УдалениеВосстановление", Ложь);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПрочитатьРазрешенияПользователяОрганизации()
		
		ПраваПользователяОрганизации = НовыйРазрешенияПользователяОрганизации();
		
		Если ЭДОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		UserPermissions = ЭДОбъект.Organization.GetUserPermissions();
		ПраваПользователяОрганизации.Подписание = UserPermissions.CanSignDocuments;
		ПраваПользователяОрганизации.Согласование = UserPermissions.CanAddResolutions;
		ПраваПользователяОрганизации.ЗапросРезолюции = UserPermissions.CanRequestResolutions;
		ПраваПользователяОрганизации.УдалениеВосстановление = UserPermissions.CanDeleteRestoreDocuments;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция СуществуетСвязьСДокументомУчета()
		
		Результат = ЗначениеЗаполнено(Документ1С);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция СоздаватьДокументыУчетаСПредварительнымПросмотром()
		
		Результат = Ложь;
		
		Если ЭДОбъект <> Неопределено Тогда
			
			ФорматЭД = ФорматЭлектронногоДокумента(ЭДОбъект);
			Результат = МетодКлиента("Модуль_Клиент", "ИспользоватьФормуВводаНакладной", ФорматЭД);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭтоВходящийДокумент()
		
		Результат = Ложь;
		
		Если ЭДОбъект <> Неопределено Тогда
			
			Результат = МетодКлиента("Модуль_Клиент", "ЭтоВходящийЭлектронныйДокумент", ЭДОбъект.Direction);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ФорматЭлектронногоДокумента(Document)
		
		Результат = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", Document);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭтоФормализованныйФормат(ФорматЭД)
		
		Результат = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйФормат", ФорматЭД);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭтоФормализованныйДокумент(ЭД)
		
		Результат = Ложь;
		
		Если ЭД <> Неопределено Тогда
			
			ФорматЭД = ФорматЭлектронногоДокумента(ЭД);
			Результат = ЭтоФормализованныйФормат(ФорматЭД);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПользовательАвторизованПоСертификату()
		
		ТипАутентификации = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.AuthenticateType;
		
		Результат = (ТипАутентификации = "Certificate");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПоказатьПредупреждениеОбУстаревшемФормате()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьПредупреждениеОбУстаревшемФормате"
		, ЭтаФорма
		, Неопределено);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция МодульКлиент_ФормироватьОтветныйТитул(ВидДокументооборота)
		
		Результат = МетодКлиента("Модуль_Клиент", "ФормироватьОтветныйТитул", ВидДокументооборота);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция МодульКлиент_ПараметрыФормыПодписанияДокумента()
		
		Результат = МетодКлиента("Модуль_Клиент", "ПараметрыФормыПодписанияДокумента");
		
		Возврат Результат;
		
	КонецФункции
	
	#КонецОбласти
	
	////////////////////////////////////////////////////////////////////////////////
	//{ СОБЫТИЯ ФОРМЫ
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		Организация	 = МетодСервера(,"BoxID_2_Организация", Параметры.BoxID, Параметры.DepartmentKpp);
		Контрагент	 = МетодСервера(,"CounteragentBoxID_2_Контрагент", Параметры.CounteragentBoxID);
		ТочкаВызова	 = Параметры.ТочкаВызова;
		BoxID		 = Параметры.BoxID;
		
		Параметры.Свойство("DepartmentId", DepartmentId);
		
		ПрочитатьПараметрыТекущегоДокумента();
		
		ЭтаФорма.Команды.ПерейтиВДиадок.Подсказка = "Перейти в " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = МетодКлиента("Модуль_Клиент", "НайтиОрганизациюВИерархииОрганизацийDiadoc", BoxID, DepartmentId);
		КонецЕсли;
		
		Organization = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
		
		ПрочитатьРазрешенияПользователяОрганизации();
		
		ЕстьКЭП = Ложь;
		ЭтоТестовыйДокумент = Ложь;
		ЭтоНовыйЭлектронныйДокумент = (ЭДОбъект = Неопределено);
		
		Если Не ЭтоНовыйЭлектронныйДокумент Тогда
			
			ЕстьКЭП = (ЭДОбъект.Organization.AuthenticateType = "Certificate");
			
			ЭтоТестовыйДокумент = ЭДОбъект.IsTest;
			
			ПрочитатьСтатусыДокумента();
			
		КонецЕсли;
		
		ПросмотрФормы();
		
		//+ikornienko@pcru.local
		Попытка
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
			Если ЭДОбъект.HasCustomPrintForm = Ложь Тогда
				ЭДОбъект.SaveSenderContent(ИмяВременногоФайла);
			Иначе
				ЭДОбъект.GetPrintForm(ИмяВременногоФайла, 30);
			КонецЕсли;
			ЭтаФорма.PCRU_ДвоичныеДанныеДокумента = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));
			ЭтаФорма.PCRU_РасширениеФайла = Прав(ЭДОбъект.FileName,3);
			ЭтаФорма.PCRU_ИмяФайла = ЭДОбъект.FileName;
		Исключение
		КонецПопытки;
		//-ikornienko@pcru.local
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	//} СОБЫТИЯ ФОРМЫ
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	&НаКлиенте
	Процедура СообщениеОбОшибкеДиадок(текстОшибки) Экспорт 
		
		ТекстПредуреждения = МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ТекстОшибки);
		МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", ТекстПредуреждения); 
		
	КонецПроцедуры	
	
	&НаКлиенте
	Процедура ОбновитьЭДОбъект()
		
		ЭДОбъект=	ЭДОбъект.Organization.GetDocumentById(ЭДОбъект.DocumentId);
		ПрочитатьСтатусыДокумента();
		ПросмотрФормы();
		ОбновитьСтатусЭД();
		
		ПараметрыОповещения=	Новый Структура;
		ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
		
		МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьДокумент1С()
		
		ФорматЭД = ФорматЭлектронногоДокумента(ЭДОбъект);
		ИмяТипа	 = ФорматЭД.ИмяТипа;
		
		ОграничитьРезультатСчетФактурой = ФорматЭД.ЕстьФункцияСФ;
		
		Документ1С = ПолучитьDocumentID_2_Документ(ЭДОбъект.DocumentID, ЭДОбъект.OrganizationID, ОграничитьРезультатСчетФактурой);
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьDocumentID_2_Документ(DocumentID, BoxID, ОграничитьРезультатСчетФактурой)
		
		Возврат МетодСервера(,"DocumentID_2_Документ", DocumentID, BoxID, ОграничитьРезультатСчетФактурой);
		
	КонецФункции
	
	&НаСервере
	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета = Ложь, ОчиститьИД_Документов1СсОдинаковымDocumentID)
		
		МетодСервера(,"Установить_DocumentID_Для_Документ", Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета, ОчиститьИД_Документов1СсОдинаковымDocumentID);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ОчиститьCustomDocumentId(Документ, ИспользоватьИдентификаторСчета = Ложь)
		
		МетодСервера(,"ОчиститьCustomDocumentId", Документ, ИспользоватьИдентификаторСчета);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздатьДокумент(Режим) Экспорт
		
		ФорматЭД = ФорматЭлектронногоДокумента(ЭДОбъект);
		
		Если Режим = "Ввод" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ФорматДокумента", ФорматЭД);
			ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
			ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
			ПараметрыФормы.Вставить("Direction", 			ЭДОбъект.Direction);
			ПараметрыФормы.Вставить("CounteragentBoxID",	ЭДОбъект.Counteragent.ID);
			
			ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
			ПараметрыФормы.Вставить("Организация", 			Организация);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаНакладной", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаНакладной");
			
		ИначеЕсли Режим = "Сопоставление" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ФорматДокумента", ФорматЭД);
			ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
			ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
			ПараметрыФормы.Вставить("CounteragentBoxID", 	ЭДОбъект.Counteragent.ID);
			ПараметрыФормы.Вставить("DocumentDate", 		ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 		ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Total",				ЭДОбъект.Total);
			ПараметрыФормы.Вставить("Режим", 				Режим);
			ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
			ПараметрыФормы.Вставить("Организация", 			Организация);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокумента");
			
		ИначеЕсли Режим = "ВводСВыборомОснований" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ФорматДокумента", ФорматЭД);
			ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
			ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
			ПараметрыФормы.Вставить("CounteragentBoxID",	ЭДОбъект.Counteragent.ID);
			ПараметрыФормы.Вставить("DocumentDate", 		ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 		ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Режим", 				Режим);
			ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
			ПараметрыФормы.Вставить("Организация", 			Организация);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокументаСОснованием");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПредставлениеПодписи()
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization.Id);
		
		Результат = Organization.Name;
		
		Если НЕ ПустаяСтрока(ФИОПодписанта) Тогда
			
			Результат = Результат + ", " + ФИОПодписанта;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ТекстЗаглушкиДляАктаСверки()
		
		АдресаИнтернетРесурсов = МетодКлиента("Модуль_Клиент", "АдресаИнтернетРесурсов");
		СтраницаКонтурВзаиморасчеты = АдресаИнтернетРесурсов.СтраницаКонтурВзаиморасчеты;
		
		ТекстЗаглушки = "Я - технический файл, не подписывайте меня в Диадоке :)
		|Автоматическая сверка доступна в сервисе Контур.Взаиморасчеты";
		
		СсылкаНаСервисВзаиморасчеты = Новый ФорматированнаяСтрока(СтраницаКонтурВзаиморасчеты,,,, СтраницаКонтурВзаиморасчеты);
		
		МассивСтрок = Новый Массив;
		
		МассивСтрок.Добавить(ТекстЗаглушки);
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(СсылкаНаСервисВзаиморасчеты);
		
		Результат = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭтоАктСверкиИзСервисаВзаиморасчеты()
		
		Результат = Ложь;
		
		Если ЭДОбъект <> Неопределено Тогда
			
			ЭлектронныйДокумент = МетодКлиента("Модуль_Клиент", "ЭлектронныйДокумент", ЭДОбъект);
			
			Результат = МетодКлиента(	"Модуль_Клиент",
			"ЭтоАктСверкиИзСервисаВзаиморасчеты",
			ЭлектронныйДокумент.Формат.ИмяТипа,
			ЭлектронныйДокумент.Идентификатор.ПользовательскийИдентификатор);
		КонецЕсли;								
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОтменитьСопоставлениеДокумента()
		
		ИдентификаторДокумента	= ЭДОбъект.DocumentId;
		ИдентификаторЯщика 		= ЭДОбъект.OrganizationID;
		
		ФорматЭД = ФорматЭлектронногоДокумента(ЭДОбъект);
		
		ОчиститьИД_Документов1СсОдинаковымDocumentID = ФорматЭД.ЕстьФункцияСФ;
		
		ЭтоСчет = МетодКлиента("Модуль_Клиент", "ЭтоСчетНаОплату", ФорматЭД);
		
		ОтменитьСопоставлениеДокументаНаСервере(ИдентификаторДокумента, ИдентификаторЯщика, ЭтоСчет, ОчиститьИД_Документов1СсОдинаковымDocumentID);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ОтменитьСопоставлениеДокументаНаСервере(ИдентификаторДокумента, ИдентификаторЯщика, ЭтоСчет, ОчиститьИД_Документов1СсОдинаковымDocumentID)
		
		НачатьТранзакцию();
		
		Попытка
			
			Установить_DocumentID_Для_Документ(Документ1С,,, ЭтоСчет, ОчиститьИД_Документов1СсОдинаковымDocumentID);								
			
			ОчиститьCustomDocumentId(Документ1С, ЭтоСчет);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СобытиеЖР = "Диадок";
			
			КомментарийЖР = СтрШаблон("Не удалось отменить сопоставление электронного документа с документом информационной базы:
			|DocId = %1; BoxId = %2;
			|Причина ошибки:
			|%3"
			, ИдентификаторДокумента
			, ИдентификаторЯщика
			, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖР
			, УровеньЖурналаРегистрации.Ошибка
			,
			,
			, КомментарийЖР);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецПроцедуры
	
	//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//{ УПРАВЛЕНИЕ ФОРМОЙ
	
	&НаСервере
	Процедура ПрочитатьПараметрыТекущегоДокумента()
		
		ДокументыПакета = Параметры.МассивДокументовПакета;
		
		Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийДокумент = Неопределено;
		Для Каждого Элемент Из ДокументыПакета Цикл
			
			Если Элемент.ЭтоТекущиеДанные Тогда
				ТекущийДокумент = Элемент;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ТекущийДокумент) Тогда
			ТекущийДокумент = ДокументыПакета[0];
		КонецЕсли;
		
		Документ1С = ТекущийДокумент.Документ1С;
		РасширениеФайлаДиадок = ТекущийДокумент.РасширениеФайлаДиадок;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПоказатьДокументВДиадоке(ДокументДиадока)
		
		МетодКлиента("Модуль_Клиент","ПоказатьДокументВДиадоке", ДокументДиадока.OrganizationId, ДокументДиадока.DocumentId);
		
	КонецПроцедуры 
	
	&НаКлиентеНаСервереБезКонтекста
	Функция Подпись_ОжидаетсяПодписьОтправителя()
		
		Возврат "WaitingForSenderSignature";
		
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция ОтветныеДействия_ОжидаетсяПодписьПолучателя()
		
		Возврат "WaitingForRecipientSignature";
		
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция ПредложениеОбАннулировании_Отсутствует()
		
		Возврат "RevocationStatusNone";
		
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция ПредложениеОбАннулировании_Отклонено()
		
		Возврат "RevocationRejected";
		
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция ПредложениеОбАннулированииПолучено()
		
		Возврат "RequestsMyRevocation";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокПодписания()
		
		Результат = Ложь;
		
		МожноПодписывать = (ЕстьКЭП Или ЭтоТестовыйДокумент);
		
		Если МожноПодписывать И ПраваПользователяОрганизации.Подписание Тогда
			
			ПредложениеОбАннулированииОтсутствует = (СтатусЭД.Аннулирование = ПредложениеОбАннулировании_Отсутствует());
			ОжидаетсяПодписьПолучателя = (СтатусЭД.ОтветноеДействие = ОтветныеДействия_ОжидаетсяПодписьПолучателя());
			ЭтоВходящийЭД = ЭтоВходящийДокумент();
			
			Если ЭтоВходящийЭД
				И ПредложениеОбАннулированииОтсутствует
				И ОжидаетсяПодписьПолучателя Тогда
				Результат = Не ЭтоАктСверкиИзСервисаВзаиморасчеты();
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтменитьСопоставление()
		
		Результат = Ложь;
		
		Если Не ЭтоНовыйЭлектронныйДокумент Тогда
			Результат = ЗначениеЗаполнено(Документ1С);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокСогласования()
		
		Результат = Ложь;
		
		Если Не ПраваПользователяОрганизации.Согласование Тогда
			Возврат Результат;
		КонецЕсли;
		
		СтатусСогласования = СтатусЭД.Согласование;
		
		Если СтатусСогласования = Неопределено
			Или СтатусСогласования = "None" Тогда
			
			//Такой кейс возможен в двух случаях:
			//1. По документу еще не запрашивали согласование
			//2. Документ был согласован, далее подписан и отправлен. После этого ResolutionStatus возвращается Неопределено, как будто бы и не согласовывался. 
			
			Результат = МетодКлиента("Модуль_Клиент", "ДокументНеСогласованРанее", ЭДОбъект);
			
		ИначеЕсли 	СтатусСогласования = "ApprovementRequested" 	 		// Документ в состоянии согласования
			И (ЭДОбъект.ResolutionStatus.TargetUser = Неопределено    	 		// Документ отправлен на согласование любому пользователю подразделения
			ИЛИ ЭДОбъект.ResolutionStatus.TargetUser.IsCurrentUser) Тогда 	// Документ отправлен на согласование текущему пользователю
			
			Результат = Истина;
			
		ИначеЕсли СтатусСогласования = "ActionsRequested" И ЭДОбъект.Resolutions.Count > 0 // запрошено действие
			И (ЭДОбъект.ResolutionStatus.TargetUser = Неопределено // Документ отправлен на согласование любому пользователю подразделения
			Или ЭДОбъект.ResolutionStatus.TargetUser.IsCurrentUser) // Документ отправлен на согласование текущему пользователю
			И (ЭДОбъект.ResolutionStatus.TargetDepartment = Неопределено
			Или МетодКлиента("Модуль_Клиент", "УСотрудникаЕстьДоступВПодразделение", UserPermissions, ЭДОбъект.ResolutionStatus.TargetDepartment.Id)) Тогда
			
			Resolution = ЭДОбъект.Resolutions.GetItem(ЭДОбъект.Resolutions.Count - 1);
			Если (Resolution.ResolutionType = "ResolutionRequest" // Запрос согласования документа
				Или Resolution.ResolutionType = "Custom") // Запрос резолюции сформирован шагом маршрута и имеет нестандартный тип
				И ЭДОбъект.ResolutionRequests.Count > 0 Тогда
				
				ResolutionRequest = ЭДОбъект.ResolutionRequests.GetItem(ЭДОбъект.ResolutionRequests.Count - 1);
				Если ResolutionRequest.AvaliableActions.Count > 0
					И ResolutionRequest.AvaliableActions.GetItem(ResolutionRequest.AvaliableActions.Count - 1) = "ApproveAction" Тогда
					
					Результат = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуПередачиНаСогласование()
		
		ПоказатьКнопку = Ложь;
		
		Если ПраваПользователяОрганизации.ЗапросРезолюции Тогда
			
			СтатусСогласования = СтатусЭД.Согласование;
			
			ДопустимыеСтатусыСогласования = Новый Массив;
			ДопустимыеСтатусыСогласования.Добавить(Неопределено);
			ДопустимыеСтатусыСогласования.Добавить("None");
			ДопустимыеСтатусыСогласования.Добавить("Approved");
			ДопустимыеСтатусыСогласования.Добавить("Disapproved");
			ДопустимыеСтатусыСогласования.Добавить("SignatureDenied");
			
			ПоказатьКнопку = (ДопустимыеСтатусыСогласования.Найти(СтатусСогласования) <> Неопределено);
			
		КонецЕсли;
		
		Возврат ПоказатьКнопку;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуПередачиНаПодпись()
		
		Результат = Ложь;
		
		ЗаблокироватьПодписание = ЭтоАктСверкиИзСервисаВзаиморасчеты();
		
		Если ПраваПользователяОрганизации.ЗапросРезолюции
			И Не ЗаблокироватьПодписание Тогда
			
			ДопустимыеСтатусыСогласования = Новый Массив;
			ДопустимыеСтатусыСогласования.Добавить(Неопределено);
			ДопустимыеСтатусыСогласования.Добавить("None");
			ДопустимыеСтатусыСогласования.Добавить("Approved");
			ДопустимыеСтатусыСогласования.Добавить("Disapproved");
			ДопустимыеСтатусыСогласования.Добавить("SignatureDenied");
			
			СтатусСогласования = СтатусЭД.Согласование;
			
			СтатусСогласованияПодходит = (ДопустимыеСтатусыСогласования.Найти(СтатусСогласования) <> Неопределено);
			
			ОжидаетсяПодписьПолучателя = (СтатусЭД.ОтветноеДействие = ОтветныеДействия_ОжидаетсяПодписьПолучателя());
			ОжидаетсяПодписьОтправителя = (СтатусЭД.Подписание = Подпись_ОжидаетсяПодписьОтправителя());
			
			ОжидаетсяПодпись = ОжидаетсяПодписьОтправителя Или ОжидаетсяПодписьПолучателя;
			
			ДопустимыеТипыДокументов = Новый Массив;
			ДопустимыеТипыДокументов.Добавить("XmlTorg12");
			ДопустимыеТипыДокументов.Добавить("XmlAcceptanceCertificate");
			ДопустимыеТипыДокументов.Добавить("ProformaInvoice");
			ДопустимыеТипыДокументов.Добавить("Nonformalized");
			ДопустимыеТипыДокументов.Добавить("ServiceDetails");
			ДопустимыеТипыДокументов.Добавить("PriceListAgreement");
			ДопустимыеТипыДокументов.Добавить("ReconciliationAct");
			ДопустимыеТипыДокументов.Добавить("CertificateRegistry");
			ДопустимыеТипыДокументов.Добавить("PriceList");
			ДопустимыеТипыДокументов.Добавить("NonformalizedAcceptanceCertificate");
			ДопустимыеТипыДокументов.Добавить("Contract");
			ДопустимыеТипыДокументов.Добавить("Torg2");
			
			ИмяТипа = ЭДОбъект.TypeNamedId;
			ТипПодходит = (ДопустимыеТипыДокументов.Найти(ИмяТипа) <> Неопределено);
			
			Результат =  СтатусСогласованияПодходит
			И ОжидаетсяПодпись
			И ТипПодходит;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуУдалить()
		
		Результат = Ложь;
		
		Если Не ЭтоНовыйЭлектронныйДокумент
			И Не ЭДОбъект.IsDeleted Тогда
			
			Результат = ПраваПользователяОрганизации.УдалениеВосстановление;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НужноОтразитьВУчете()
		
		Результат = Ложь;
		
		Если ЭтоВходящийДокумент()
			И Не СуществуетСвязьСДокументомУчета() Тогда
			
			ФорматЭД = ФорматЭлектронногоДокумента(ЭДОбъект);
			Результат = ЭтоФормализованныйФормат(ФорматЭД);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСоздатьДокумент1С()
		
		Результат = Ложь;
		
		Если НужноОтразитьВУчете() Тогда
			Результат = СоздаватьДокументыУчетаСПредварительнымПросмотром();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтразитьДокументВУчете()
		
		Результат = Ложь;
		
		Если НужноОтразитьВУчете() Тогда
			Результат = Не СоздаватьДокументыУчетаСПредварительнымПросмотром();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаАннулирования()
		
		Результат = Ложь;
		
		Если ПраваПользователяОрганизации.Подписание И ЕстьКЭП Тогда
			
			ДопустимыеСтатусыАннулирования = Новый Массив;
			ДопустимыеСтатусыАннулирования.Добавить(ПредложениеОбАннулировании_Отсутствует());
			ДопустимыеСтатусыАннулирования.Добавить(ПредложениеОбАннулировании_Отклонено());
			
			СтатусАннулированияПодходит = (ДопустимыеСтатусыАннулирования.Найти(СтатусЭД.Аннулирование) <> Неопределено);
			
			ПодписьОтправителяВалидна = (ЭДОбъект.SenderSignatureStatus = "SenderSignatureCheckedAndValid");
			
			Результат = ПодписьОтправителяВалидна И СтатусАннулированияПодходит;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуАннулирования()
		
		Результат = Ложь;
		
		Если ПраваПользователяОрганизации.Подписание И ЕстьКЭП Тогда
			Результат = (СтатусЭД.Аннулирование = ПредложениеОбАннулированииПолучено());
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаУточнения(ЭДОбъект)
		
		Результат = Ложь;
		
		Если ЭДОбъект <> Неопределено Тогда
			
			ИмяТипа = ЭДОбъект.TypeNamedId;
			
			Результат = ЛЕВ(ИмяТипа, 7) = "Invoice"
			И ЭДОбъект.Direction = "Inbound"
			И ЭДОбъект.Status = "InboundFinished"
			И НЕ ЭДОбъект.Corrected 
			И НЕ ЭДОбъект.Revised 
			И НЕ ЭДОбъект.AmendmentRequested
			И ЕстьКЭП;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуПодписатьЗапрошенный(Document)
		
		Результат = Ложь;
		
		Если Истина
			И ТочкаВызова = "ТаблицаДокументовВнутренних"
			И ПраваПользователяОрганизации.Подписание
			И Document <> Неопределено
			И Document.Status = "OutboundWaitingForSenderSignature" // Документ ожидает подписания перед отправкой (не отправлен и не подписан)
			Тогда
			
			// основные условия выполнены, проверим, доступно ли подписание в текущем статусе согласования
			СтатусСогласования = СтатусЭД.Согласование;
			
			Если СтатусСогласования = Неопределено Тогда 
				
				// согласование не требуется
				Результат = Истина;
				
			ИначеЕсли СтатусСогласования = "Approved" Тогда 
				
				// документ уже согласован
				Результат = Истина;
				
			ИначеЕсли СтатусСогласования = "SignatureRequested" Тогда
				
				// Документ отправлен на подпись - проверяем, может ли его подписать текущий пользователь
				TargetUser = Document.ResolutionStatus.TargetUser;
				Результат = TargetUser = Неопределено 		// направлен на подпись любому пользователю подразделения
				Или TargetUser.IsCurrentUser; 	// направлен на подпись текущему пользователю
				
			Иначе 
				
				Результат = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат
		
	КонецФункции
	
	&НаКлиенте
	Процедура НастроитьКнопкиКоманднойПанели()
		
		НастройкиВидимости = Новый Массив;
		
		ФлагВидимости = Не ЭтоНовыйЭлектронныйДокумент;
		
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаПерейтиВДиадок", ФлагВидимости, ФлагВидимости);
		ДобавитьНастройкуВидимости(НастройкиВидимости, "ФормаСтруктураПодчиненности", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ЭтоФормализованныйДокумент(ЭДОбъект);
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаОтправитьСвязанныйДокумент", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьГруппуКнопокПодписания();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "ГруппаКнопокПодписания", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьКнопкуОтменитьСопоставление();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаОтменитьСопоставление", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьГруппуКнопокСогласования();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "ГруппаСогласование", ФлагВидимости, ФлагВидимости);
		
		ПередачаНаСогласованиеВидимость = ПоказатьКнопкуПередачиНаСогласование();
		ПередачаНаПодписьВидимость = ПоказатьКнопкуПередачиНаПодпись();
		
		ФлагВидимостиГруппыСогласования = ПередачаНаПодписьВидимость Или ПередачаНаСогласованиеВидимость;
		ДобавитьНастройкуВидимости(НастройкиВидимости, "ГруппаПередачаНаСогласование", ФлагВидимостиГруппыСогласования, ФлагВидимостиГруппыСогласования);
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаПередатьНаСогласование", ПередачаНаСогласованиеВидимость, ПередачаНаСогласованиеВидимость);
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаПередатьНаПодписание", ПередачаНаПодписьВидимость, ПередачаНаПодписьВидимость);
		
		ФлагВидимости = ПоказатьКнопкуУдалить();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаУдалить", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьКнопкуСоздатьДокумент1С();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаСоздатьДокумент1С", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьКнопкуОтразитьДокументВУчете();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаОтразитьДокументВУчете", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьКнопкуЗапросаАннулирования();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаЗапроситьАннулирование", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьКнопкуАннулирования();
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаАннулировать", ФлагВидимости, ФлагВидимости);
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаОтказатьВАннулировании", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьКнопкуЗапросаУточнения(ЭДОбъект);
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаЗапроситьУточнение", ФлагВидимости, ФлагВидимости);
		
		ФлагВидимости = ПоказатьКнопкуПодписатьЗапрошенный(ЭДОбъект);
		ДобавитьНастройкуВидимости(НастройкиВидимости, "КнопкаПодписатьЗапрошенный", ФлагВидимости, ФлагВидимости);
		
		НастроитьВидимостьЭлементовФормыНаСервере(НастройкиВидимости);
		
		//+asevryugin@PCRU.LOCAL, 2020-09-15 11:01:51
		Если Прав(ЭДОбъект.FileName,3) = "pdf" и не ЗначениеЗаполнено(ЭтотОбъект.Документ1С) тогда
			Элементы.PCRU_ОтразитьДокументВУчете.Видимость = Истина;
		Иначе
			Элементы.PCRU_ОтразитьДокументВУчете.Видимость = Ложь;
		КонецЕсли; 
		//+/asevryugin@PCRU.LOCAL, 2020-09-15 11:01:51
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьНастройкуВидимости(МассивНастройкиВидимости, ИмяРеквизита, Видимость, Доступность)
		
		НастройкаВидимости = Новый Структура("ИмяРеквизита, Видимость, Доступность", ИмяРеквизита, Видимость, Доступность);
		МассивНастройкиВидимости.Добавить(НастройкаВидимости);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура НастроитьВидимостьЭлементовФормыНаСервере(МассивНастройкиВидимости)
		
		Для каждого НастройкаВидимости из МассивНастройкиВидимости Цикл
			
			ИмяРеквизита 		= НастройкаВидимости.ИмяРеквизита;
			НастройкаВидимость 	= НастройкаВидимости.Видимость;
			НастройкаДоступность= НастройкаВидимости.Доступность;
			
			Элементы[ИмяРеквизита].Видимость 	= НастройкаВидимость;
			Элементы[ИмяРеквизита].Доступность 	= НастройкаДоступность;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЭлементыФормы()
		
		Если ЭДОбъект <> Неопределено Тогда
			
			НастроитьЗаглушкуДляАктаСверкиВзаиморасчетов();
			
			Если ЭтоВходящийДокумент() Тогда
				
				МассивСсылокРНК	= МетодКлиента("Модуль_Клиент", "ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок", ЭДОбъект);
				ПодходящаяСФ	= МетодКлиента("Модуль_Клиент", "ПолучитьПодходящуюСФ", МассивСсылокРНК);
				
				ПредставлениеКнопкиСоздать = МетодКлиента(	"Модуль_Клиент",
				"СформироватьПредставлениеКнопкиСоздатьДокументВ1С",
				Документ1С,
				ЭДОбъект,
				МассивСсылокРНК,
				ПодходящаяСФ	);
				
				Если ЗначениеЗаполнено(ПредставлениеКнопкиСоздать) Тогда
					Элементы.КнопкаСоздатьДокумент1С.Заголовок = ПредставлениеКнопкиСоздать;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЭтоФормализованныйДокумент(ЭДОбъект) Тогда
				Элементы.Сумма.Видимость = Ложь;
			КонецЕсли;
			
			Элементы.ДекорацияПодробно.Видимость = ЭДОбъект.Resolutions.Count > 0;
			
			Если ЗначениеЗаполнено(Документ1С) Тогда
				Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
			Иначе
				Элементы.ДокументВ1С.Заголовок = "";
			КонецЕсли;
			
			Элементы.РамкаСтатуса.Видимость = Истина;
			
			Если ЭДОбъект.Department = Неопределено Тогда
				ПредставлениеПодразделения = "Головное подразделение";
			Иначе
				ПредставлениеПодразделения = ЭДОбъект.Department.Name;
			КонецЕсли;
			
		Иначе
			
			Элементы.РамкаСтатуса.Видимость = Ложь;
			
		КонецЕсли;
		
		ЭтаФорма.Элементы.КнопкаПерейтиВДиадок.Заголовок = "Перейти в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЗаглушкуДляАктаСверкиВзаиморасчетов()
		
		ПоказатьЗаглушку = ЭтоВходящийДокумент()
		И ЭтоАктСверкиИзСервисаВзаиморасчеты();
		
		Элементы.ГруппаЗаглушкаАктаСверки.Видимость = ПоказатьЗаглушку;
		
		Если ПоказатьЗаглушку Тогда
			
			Элементы.ТекстЗаглушки.Заголовок = ТекстЗаглушкиДляАктаСверки();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		ОбновитьСтатусЭД();
		НастроитьЗаголовок();
		НастроитьКнопкиКоманднойПанели();
		НастроитьЭлементыФормы();
		
	КонецПроцедуры	 
	
	&НаКлиенте
	Процедура ОбновитьСтатусЭД()
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			
			ПредставлениеСтатуса=		 МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса"			, ЭДОбъект);
			ПредставлениеСогласования=	 МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаСогласования", ЭДОбъект);
			
			ПредставлениеСтатусаРоуминг= МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаРоуминг"		, ЭДОбъект);
			ПредставлениеСтатусаРоумингДетали= ?(ЭДОбъект.RoamingNotificationStatus = "RoamingNotificationStatusError", ЭДОбъект.RoamingNotificationStatusDescription, "");
			
			СводныйСтатус= Новый Массив;
			Разделитель= "";
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатуса) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатуса);
				Разделитель= " ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСогласования) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСогласования);
				Разделитель= ". ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатусаРоуминг) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатусаРоуминг);
				Разделитель= ". ";
			КонецЕсли;
			
			Элементы.СтатусДокумента.Заголовок=	Новый ФорматированнаяСтрока(СводныйСтатус); 
			
		Иначе
			
			Элементы.СтатусДокумента.Заголовок=	""; 
			
			ПредставлениеСтатусаРоуминг= 		"";
			ПредставлениеСтатусаРоумингДетали=  "";
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьЗаголовок()
		
		Заголовок=	МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПросмотрФормы()
		
		СтруктураПредставленияЭД = МетодКлиента("Модуль_Клиент", "ПолучитьСтруктуруПредставленияЭД", ЭДОбъект);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПредставленияЭД);
		
		Если Дата < '20000101' Тогда 
			Дата = "";
		КонецЕсли;
		
		ФорматЭД = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", ЭДОбъект);
		ДатаОтправки = ЭДОбъект.Timestamp;
		
		Элементы.ГруппаПредупреждениеОНовомФормате.Видимость = ДокументВУстаревшемФормате(ФорматЭД, ДатаОтправки);
		
		Элементы.FileName.Заголовок 			= ЭДОбъект.FileName;
		Элементы.AttachmentComment.Заголовок 	= ЭДОбъект.GetAnyComment("AttachmentComment");
		
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ДокументВУстаревшемФормате(ФорматОтправки, Знач ДатаОтправки = Неопределено)
		
		Результат = МетодКлиента("Модуль_Клиент", "ДокументВУстаревшемФормате"
		, ФорматОтправки
		, ДатаОтправки);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура FileNameНажатие(Элемент, СтандартнаяОбработка)
		
		Если ЭДОбъект.HasCustomPrintForm = Ложь Тогда
			ИмяВременногоФайла=	ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
			ЭДОбъект.SaveSenderContent(ИмяВременногоФайла);
		Иначе
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
			ЭДОбъект.GetPrintForm(ИмяВременногоФайла, 30);
		КонецЕсли;
		
		ЗапуститьПриложение(ИмяВременногоФайла);
		
	КонецПроцедуры
	
	//} УПРАВЛЕНИЕ ФОРМОЙ И ОБРАБОТКА СОБЫТИЙ
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ОБРАБОТКА СОБЫТИЙ
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда 
			Если НЕ РезультатЗакрытия.DepartmentID = ТекущийDepartmentId Тогда
				
				ЭДОбъект.Move(РезультатЗакрытия.DepartmentID);
				
				ОбновитьЭДОбъект();
				
				ПараметрыОповещения=	Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", 			ЭДОбъект.OrganizationID);
				ПараметрыОповещения.Вставить("DocumentId", 		ЭДОбъект.DocumentID);
				ПараметрыОповещения.Вставить("DepartmentName", 	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Name));
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеПодразделения", ПараметрыОповещения);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПолучателя(ПараметрыОтправкиНаСогласование, ТекущиеДанные) Экспорт
		
		МетодКлиента("Модуль_Клиент","ОтправитьНаОбработку", ЭДОбъект, ПараметрыОтправкиНаСогласование);
		ОбновитьЭДОбъект();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыПодписанияДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			Попытка
				МетодКлиента("Модуль_Клиент", "ПодписатьВДиадоке", ЭДОбъект, РезультатЗакрытия.ОтветныйТитул);
			Исключение
				Ошибка = ИнформацияОбОшибке();
				ОписаниеОшибки = КраткоеПредставлениеОшибки(Ошибка);
				СообщениеОбОшибкеДиадок(ОписаниеОшибки);
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Элементы.ГруппаКнопокПодписания.Видимость = Ложь;
				ОбновитьЭДОбъект();
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтменитьСопоставление(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса <> КодвозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ОтменитьСопоставлениеДокумента();
		
		Документ1С = Неопределено;
		
		ОбновитьДокумент1С();
		ПросмотрФормы();
		
		ДобавитьСтатистику_ОтменитьСопоставление();
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ТипСущности"	, "Документ");
		ПараметрыОповещения.Вставить("BoxID"		, ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID"	, ЭДОбъект.DocumentID);
		ПараметрыОповещения.Вставить("Документ1С"	, Документ1С);
		
		МетодКлиента(, "ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапроситьУточнение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			ЭтоФормализованныйДокумент = ЭтоФормализованныйДокумент(ЭДОбъект);
			
			Попытка
				
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
				
				ЭДОбъект.SendCorrectionRequest(РезультатЗакрытия.Комментарий);
				
				ОбновитьЭДОбъект();
				
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаНакладной(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			Если РезультатЗакрытия.Свойство("Документ1С") Тогда
				
				ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
				
			ИначеЕсли РезультатЗакрытия.Свойство("Режим") Тогда
				
				СоздатьДокумент(РезультатЗакрытия.Режим);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если ЗначениеЗаполнено(РезультатЗакрытия.Документ1С) Тогда
				ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокументаСОснованием(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			Если РезультатЗакрытия.СписокСсылокРНК.Количество() > 0 Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, РезультатЗакрытия.СписокСсылокРНК.ВыгрузитьЗначения());
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикЗакрытиеФормыСФ(РезультатЗакрытия, ДокументОбъект) Экспорт
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			ОбработчикСозданиеДокумента(ДокументОбъект.Ссылка);
		КонецЕсли;
		
		МассивСсылокРНК=	Новый Массив;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикСозданиеДокумента(ДокументССылка) Экспорт
		
		Если ЗначениеЗаполнено(ДокументССылка) Тогда
			МетодКлиента("Модуль_Клиент","ОбработчикСозданиеДокумента", ДокументССылка, ЭДОбъект);
			ОбновитьДокумент1С();
			ПросмотрФормы();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикУдалитьДокумент(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			ПараметрУдаляемогоДокумента = Новый Структура();
			ПараметрУдаляемогоДокумента.Вставить("DocumentId", 	ЭДОбъект.DocumentId);
			ПараметрУдаляемогоДокумента.Вставить("BoxID", 		ЭДОбъект.Organization.Id);
			
			МассивДокументов = Новый Массив();
			МассивДокументов.Добавить(ПараметрУдаляемогоДокумента);
			
			Если СуществуетСвязьСДокументомУчета() Тогда
				ОтменитьСопоставлениеДокумента();	
			КонецЕсли;
			
			Если НЕ ЭДОбъект.IsDeleted Тогда
				
				ПредставлениеЭД = МетодКлиента("Модуль_Клиент", "ПредставлениеЭД", ЭДОбъект);
				
				Попытка
					ЭДОбъект.Delete();
					НаименованиеСистемы = Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
					ПоказатьПредупреждение(, "Документ " + ПредставлениеЭД + " перемещен в удаленные.", 120, НаименованиеСистемы);
				Исключение
					
					Подробно		= ОписаниеОшибки();
					ОписаниеОшибки	= Подробно;
					Если Найти(ОписаниеОшибки, "is already delete") Тогда
						ОписаниеОшибки = "Документ " + ПредставлениеЭД + " уже был удален.";
					Иначе
						ОписаниеОшибки = "Ошибка удаления документа";
					КонецЕсли;
					
					ПараметрыФормы = Новый Структура();
					ПараметрыФормы.Вставить("Заголовок"		, "Ошибка удаления");
					ПараметрыФормы.Вставить("ОписаниеОшибки", ОписаниеОшибки);
					ПараметрыФормы.Вставить("Подробности"	, Подробно);
					
					МетодКлиента( , "ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
				КонецПопытки;
				
			КонецЕсли;
			
			ПросмотрФормы();
			МетодКлиента( , "ОповеститьФормы", "УдалениеДокументов", МассивДокументов);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	//} ОБРАБОТКА СОБЫТИЙ
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура ПерейтиВДиадок(Команда)
		
		Если НЕ ЭдОбъект = Неопределено Тогда
			ПоказатьДокументВДиадоке(ЭдОбъект);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Подписать(Команда)
		
		ФорматЭД = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", ЭДОбъект);
		
		ПараметрыФормы = МодульКлиент_ПараметрыФормыПодписанияДокумента();
		ПараметрыФормы.ФорматДокумента = ФорматЭД;
		ПараметрыФормы.ТребуетсяОтветныйТитул = МодульКлиент_ФормироватьОтветныйТитул(ЭДОбъект.WorkflowId);
		ПараметрыФормы.ИдентификаторОрганизации = Organization.Id;
		ПараметрыФормы.ЗаголовокФормыПодписания = Заголовок;
		
		ИмяОбработчика = "ОбработчикОткрытиеФормыПодписанияДокумента";
		
		МетодКлиента("Модуль_Клиент", "ПоказатьФормуПодписания"
		, ПараметрыФормы
		, ЭтаФорма
		, ИмяОбработчика);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВПодписи(Команда)
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("РежимИспользования"	, 1);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
		
		ПредставлениеПодписи = ПредставлениеПодписи();
		ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаОтветаПоДокументу",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыОтветаОтказаВПодписи"	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Согласовать(Команда)
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("РежимИспользования"	, 2);
		ПараметрыФормы.Вставить("AuthenticateType"		, Organization.AuthenticateType);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
		
		ПредставлениеПодписи = ПредставлениеПодписи();
		ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаОтветаПоДокументу",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыОтветаСогласовать"	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВСогласовании(Команда)
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("РежимИспользования"	, 3);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
		
		ПредставлениеПодписи = ПредставлениеПодписи();
		ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаОтветаПоДокументу",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании"	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Удалить(Команда)
		
		Оповещение 				= Новый ОписаниеОповещения("ОбработчикУдалитьДокумент", ЭтаФорма);
		ТекстВопроса			= НСтр("ru='Вы действительно хотите удалить документ?'");
		Кнопки					= РежимДиалогаВопрос.ДаНет;
		ЗаголовокОкнаВопроса	= Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы; 
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, 120, КодВозвратаДиалога.Нет, ЗаголовокОкнаВопроса, КодВозвратаДиалога.Нет);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтменитьСопоставление(Команда)
		
		ДобавитьСтатистику_НажалиОтменитьСопоставление();
		
		Оповещение 		= Новый ОписаниеОповещения("ОбработчикОтменитьСопоставление", ЭтаФорма);
		ТекстВопроса 	= НСтр("ru = 'Вы действительно хотите отменить сопоставление с документом 1С?'");
		ЗаголовокОкнаВопроса = Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
		ПоказатьВопрос(	Оповещение, 
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет, 
		120, 
		КодВозвратаДиалога.Нет, 
		ЗаголовокОкнаВопроса, 
		КодВозвратаДиалога.Нет);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтруктураПодчиненности(Команда)
		
		ПараметрыФормы=	Новый Структура("Режим", "СтруктураПодчиненности");
		
		ФормаСвязейДокументов= МетодКлиента(,"ПолучитьФормуОбработки", "ФормаСвязейДокументов", ПараметрыФормы, ЭтаФорма, СокрЛП(ЭДОбъект.DocumentID) + "/" + СокрЛП(ЭДОбъект.OrganizationID));
		ФормаСвязейДокументов.ЭДОбъект=		ЭДОбъект;
		ФормаСвязейДокументов.Organization=	Organization;
		
		ОткрытьФорму(ФормаСвязейДокументов);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДекорацияПодробноНажатие(Элемент)
		
		HTMLДокумент	= МетодКлиента("Модуль_Клиент", "СформироватьHTMLПредставлениеРезолюций", ЭДОбъект, Организация);
		ПараметрыФормы	= Новый Структура("HTMLДокумент", HTMLДокумент);
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусДокументаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "RoamingNotificationStatusError" Тогда
			
			СтандартнаяОбработка= Ложь;
			
			Если НРег(Лев(ПредставлениеСтатусаРоуминг, 6)) = "ошибка" Тогда
				
				ПараметрыФормы= Новый Структура("Заголовок, ОписаниеОшибки, Подробности",
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоумингДетали);
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				
			Иначе
				ОбновитьСтатусЭД();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаСогласование(Команда)
		
		МетодКлиента("Модуль_Клиент", "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, Организация, "ApprovementRequest");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаПодписание(Команда)
		
		МетодКлиента("Модуль_Клиент", "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, Организация, "SignatureRequest");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗапроситьАннулирование(Команда)
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("РежимИспользования", 		5);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		
		ПредставлениеПодписи = ПредставлениеПодписи();
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	ПредставлениеПодписи);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаОтветаПоДокументу",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыОтветаЗапросАннулирования");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура АннулироватьДокумент(Команда)
		
		ПредставлениеДокумента = Заголовок;
		
		Подстроки = Новый Массив;
		Подстроки.Добавить(ПредставлениеДокумента);
		
		Если ПользовательАвторизованПоСертификату() Тогда
			
			Подстроки.Добавить(Символы.ПС);
			Подстроки.Добавить(Символы.ПС);
			Подстроки.Добавить(Новый ФорматированнаяСтрока("Соглашение об аннулировании будет подписано", , WebЦвета.ТемноКрасный));
			Подстроки.Добавить(Символы.ПС);
			Подстроки.Добавить(ПредставлениеПодписи());
			
		КонецЕсли;
		
		ТекстВопроса = Новый ФорматированнаяСтрока(Подстроки);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК, "Аннулировать");
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ОбработкаОтвета = Новый ОписаниеОповещения("ОбработчикОткрытиеФормыОтветаАннулироватьДокумент", ЭтаФорма);
		
		ПоказатьВопрос(ОбработкаОтвета
		, ТекстВопроса
		, Кнопки
		,
		,
		, "Аннулирование");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВАннулировании(Команда)
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("РежимИспользования"	, 6);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
		
		ПредставлениеПодписи = ПредставлениеПодписи();
		ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаОтветаПоДокументу",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздатьДокумент1С(Команда)
		
		ИмяТипа = ЭДОбъект.TypeNamedId;
		
		Если ЛЕВ(ИмяТипа, 7) = "Invoice"  Тогда
			
			Если ЗначениеЗаполнено(ПодходящаяСФ) Тогда
				ОбработчикСозданиеДокумента(ПодходящаяСФ);
			ИначеЕсли МассивСсылокРНК.Количество() > 0 И ИмяТипа = "Invoice" Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, МассивСсылокРНК);
			Иначе
				СоздатьДокумент("ВводСВыборомОснований");
			КонецЕсли;
			
		Иначе
			СоздатьДокумент("Ввод");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗапроситьУточнение(Команда)
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("РежимИспользования"	, 7);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
		
		ПредставлениеПодписи = ПредставлениеПодписи();
		ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаОтветаПоДокументу",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыОтветаЗапроситьУточнение");
		
	КонецПроцедуры
	
	//} КОМАНДЫ
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ИНТЕГРАЦИЯ
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказаВПодписи(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			Попытка
				МетодКлиента("Модуль_Клиент", "ОтказатьВПодписи", ЭДОбъект, РезультатЗакрытия.Комментарий);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				СообщениеОбОшибкеДиадок(ОписаниеОшибки);
			Иначе
				Элементы.ГруппаКнопокПодписания.Видимость = Истина;
				ОбновитьЭДОбъект();
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаСогласовать(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.Approve(РезультатЗакрытия.Комментарий);
				Элементы.ГруппаКнопокСогласования.Доступность=	Ложь;
				Элементы.ГруппаКнопокСогласования.Видимость= 	Истина;
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторное согласование не возможно", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете согласовать документ", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.DisApprove(РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторный отказ в согласовании не возможен", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете отказать в согласовании", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапросАннулирования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			ЭтоФормализованныйДокумент = ЭтоФормализованныйДокумент(ЭДОбъект);
			
			Попытка
				
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
				
				ЭДОбъект.SendRevocationRequest(РезультатЗакрытия.Комментарий);
				
				ОбновитьЭДОбъект();
				
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаАннулироватьДокумент(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			МетодКлиента("Модуль_Клиент", "АннулироватьДокумент", ЭДОбъект);
			ОбновитьЭДОбъект();
		Исключение 
			СообщениеОбОшибкеДиадок(ОписаниеОшибки());
		КонецПопытки;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				МетодКлиента("Модуль_Клиент", "ОтказатьВАннулированииДокумента", ЭДОбъект, РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодразделениеНажатие(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка=	Ложь;
		
		ТекущийDepartmentId=	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Id);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("DepartmentId", 	ТекущийDepartmentId);
		ПараметрыФормы.Вставить("OrganizationId",	ЭДОбъект.Organization.Id);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущийDepartmentId);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтправитьсвязанныйДокумент(Команда)
		
		Если ЗначениеЗаполнено(Контрагент)=Ложь тогда
			ПоказатьПредупреждение(, "С "+ЭДОбъект.Counteragent.Name+" не сопоставлено ни одной карточки контрагента в 1С", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			возврат
		КонецЕсли;		
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("InitialDocumentID", ЭДОбъект.DocumentID);
		
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ОписаниеКонтрагента", Новый структура("Контрагент, CounteragentName, CounteragentID",  Контрагент, ЭДОбъект.Counteragent.Name, ЭДОбъект.Counteragent.ID));
		
		Форма_Выгрузка = МетодКлиента(,"ОткрытьФормуОбработки", "Форма_Выгрузка", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтразитьДокументВУчете(Команда)
		
		МетодКлиента("Модуль_Клиент", "ОтразитьДокументВУчете", ЭтаФорма, ЭДОбъект);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздатьДокументУчетаЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт 
		
		ОбновитьДокумент1С();
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Декорация4Нажатие(Элемент)
		
		ПоказатьПредупреждениеОбУстаревшемФормате();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодписатьЗапрошенный(Команда)
		
		СтруктураSigner = МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
		
		Если НЕ ЗначениеЗаполнено(СтруктураSigner.ДолжностьПодписанта) Тогда
			
			ФорматЭД = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", ЭДОбъект);
			БазовыйФормат = ФорматЭД.БазовыйФормат;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("BoxId", BoxId);
			ПараметрыФормы.Вставить("ФорматЭД", ФорматЭД);
			ПараметрыФормы.Вставить("Организация", Организация);
			
			МетодКлиента(, "ОткрытьФормуОбработкиМодально", "НастройкаПодписиАкт"
			,
			, ЭтаФорма
			, "ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного"
			, Новый Структура("Document", ЭДОбъект));
			
		Иначе
			ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ЭДОбъект);	
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
			
			СтруктураSigner = МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
			ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ДополнительныеПараметры.Document);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, Document) 
		
		СтруктураРезультатОперации= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПодписатьИОтправить_ПодписаниеЗапрошенного", СтруктураSigner, Document);
		
		Если СтруктураРезультатОперации.ВыполненоУспешно Тогда 
			ОбновитьЭДОбъект();
		Иначе
			ТекстОшибкиПодписания= СтруктураРезультатОперации.ТекстОшибки;
			
			ПараметрыФормы= Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 		"Ошибка при подписании документа");
			ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось подписать документ");
			ПараметрыФормы.Вставить("Подробности", 		ТекстОшибкиПодписания+Символы.ПС+"BoxId: "+Document.OrganizationId+Символы.ПС+"DocumentId: "+Document.DocumentId);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	КонецПроцедуры
	
	//} ИНТЕГРАЦИЯ
	////////////////////////////////////////////////////////////////////////////////
	
	#Область Метрики
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиОтменитьСопоставление()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма документа без визуализации";
		НазваниеКатегории 	= Категории.ОтражениеВУчете;
		НазваниеДействия 	= "Отменить сопоставление с документом 1С";
		
		МетодКлиента(	"Модуль_Клиент",
		"Метрика_ДобавитьПоведение_НажатиеКнопки",
		НазваниеФормы,
		НазваниеКатегории,
		НазваниеДействия	);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьСтатистику_ОтменитьСопоставление()
		
		Если ЭДОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭлектронныйДокумент = МетодКлиента("Модуль_Клиент", "ЭлектронныйДокумент", ЭДОбъект);
		
		ФорматЭД = ЭлектронныйДокумент.Формат;
		
		Направления = Новый Структура;
		
		Направления.Вставить("Inbound"	, "Входящий");
		Направления.Вставить("Outbound"	, "Исходящий");
		Направления.Вставить("Internal"	, "Внутренний");
		
		Направление = Направления[ЭДОбъект.Direction];
		
		ИдентификаторыЭД 	= ЭлектронныйДокумент.Идентификатор;
		BoxGuid 			= МетодКлиента("Модуль_Клиент", "ПолучитьBoxGuidПоId", ИдентификаторыЭД.ИдентификаторОрганизации);
		
		Переменные = Новый Структура;
		
		Переменные.Вставить("BoxID"				, BoxGuid);
		Переменные.Вставить("Direction"			, Направление);
		Переменные.Вставить("DocumentID"		, ИдентификаторыЭД.СоставнойИдентификатор);
		Переменные.Вставить("LetterID"			, ИдентификаторыЭД.ИдентификаторСообщения);
		Переменные.Вставить("ВерсияФормата"		, ФорматЭД.ВерсияФормата);
		Переменные.Вставить("ИмяТипа"			, ФорматЭД.ИмяТипа);
		Переменные.Вставить("ФункцияДокумента"	, ФорматЭД.ФункцияДокумента);
		
		МетодКлиента(	"Модуль_Клиент",
		"Метрика_ДобавитьСтатистику_ОтменитьСопоставление",
		Переменные	);
		
	КонецПроцедуры
	
	#КонецОбласти
	
	
	
#КонецЕсли

//+asevryugin@PCRU.LOCAL, 2020-09-15 11:04:59
&НаСервере
Процедура PCRU_ОтразитьДокументВУчетеНаСервере(СтруктураДокумента)
	
	Если СтруктураДокумента.ТипДокумента = "СчетФактура" Тогда
		НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
		Если СтруктураДокумента.Свойство("Дата") Тогда
			НовыйДокумент .Дата                                      =  СтруктураДокумента.Дата ;
		КонецЕсли; 
		НовыйДокумент .Организация                                   =  Справочники.Организации.ОрганизацияПоУмолчанию();
		НовыйДокумент .ВидСчетаФактуры                               =  Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
		Запрос.УстановитьПараметр("ИНН",СтруктураДокумента.ИНН );
		Запрос.УстановитьПараметр("НаименованиеПолное",СтруктураДокумента.Наименование );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйДокумент .Контрагент                        = Выборка.Ссылка;
		КонецЦикла;
		
		НовыйДокумент .ДоговорКонтрагента                    = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Организация",НовыйДокумент.Организация,,НовыйДокумент.Контрагент);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Организация",НовыйДокумент.Организация );
		Запрос.УстановитьПараметр("Контрагент",НовыйДокумент.Контрагент );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйДокумент .ДоговорКонтрагента            = Выборка.Ссылка;
		КонецЦикла;
		НовыйДокумент .НомерВходящегоДокумента                       =  СтруктураДокумента.Номер;
		НовыйДокумент .ДатаВходящегоДокумента                        =  СтруктураДокумента.Дата;
		НовыйДокумент .КодВидаОперации                               =  "01";
		НовыйДокумент .КППКонтрагента                                =  СтруктураДокумента.КПП;
		НовыйДокумент .Ответственный                                 =  ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент .Комментарий                                   =  "Передано из диадок";
		//НовыйДокумент .Исправление                                   =  ;
		//НовыйДокумент .НомерИсправления                              =  ;
		//НовыйДокумент .ДатаИсправления                               =  ;
		//НовыйДокумент .ИсправляемыйСчетФактура                       =  ;
		//НовыйДокумент .НомерИсходногоДокумента                       =  ;
		//НовыйДокумент .ДатаИсходногоДокумента                        =  ;
		//НовыйДокумент .УдалитьУчитыватьИсправлениеИсходногоДокумента =  ;
		//НовыйДокумент .УдалитьНомерИсправленияИсходногоДокумента     =  ;
		//НовыйДокумент .УдалитьДатаИсправленияИсходногоДокумента      =  ;
		//НовыйДокумент .НДСПредъявленКВычету                          =  ;
		//НовыйДокумент .Продавец                                      =  ;
		//НовыйДокумент .Комитент                                      =  ;
		//НовыйДокумент .ДоговорКомитента                              =  ;
		//НовыйДокумент .ДокументОснование                             =  ;
		//НовыйДокумент .СчетФактураБезНДС                             =  ;
		//НовыйДокумент .КодСпособаПолучения                           =  ;
		НовыйДокумент .СуммаДокумента                                =  СтруктураДокумента.ИТОГО;
		//НовыйДокумент .СуммаУвеличение                               =  ;
		//НовыйДокумент .СуммаУменьшение                               =  ;
		//НовыйДокумент .СуммаНДСДокумента                             =  ;
		//НовыйДокумент .СуммаНДСУвеличение                            =  ;
		//НовыйДокумент .СуммаНДСУменьшение                            =  ;
		НовыйДокумент .ВалютаДокумента                               =   pcru_УМФО.ВалютаРубль();
		//НовыйДокумент .РучнаяКорректировка                           =  ;
		//НовыйДокумент .СформированПриВводеНачальныхОстатковНДС       =  ;
		//НовыйДокумент .УдалитьКорректировочныйСчетФактура            =  ;
		//НовыйДокумент .УдалитьНаАванс                                =  ;
		//НовыйДокумент .БланкСтрогойОтчетности                        =  ;
		//НовыйДокумент .СводныйКорректировочный                       =  ;
		//НовыйДокумент .ПредставлениеНомера                           =  ;
		//НовыйДокумент .ВозвратЧерезКомиссионера                      =  ;
		//НовыйДокумент .Субкомиссионер                                =  ;
		//НовыйДокумент .СчетФактураВыданныйПокупателю                 =  ;
		//НовыйДокумент .СуммаДокументаКомиссия                        =  ;
		//НовыйДокумент .СуммаНДСДокументаКомиссия                     =  ;
		//НовыйДокумент .СуммаУвеличениеКомиссия                       =  ;
		//НовыйДокумент .СуммаУменьшениеКомиссия                       =  ;
		//НовыйДокумент .СуммаНДСУвеличениеКомиссия                    =  ;
		//НовыйДокумент .СуммаНДСУменьшениеКомиссия                    =  ;
		//НовыйДокумент .СводныйКомиссионный                           =  ;
		//НовыйДокумент .ИсправлениеСобственнойОшибки                  =  ;
		//НовыйДокумент .НомерВходящегоДокументаДоИзменения            =  ;
		//НовыйДокумент .ДатаВходящегоДокументаДоИзменения             =  ;
		//НовыйДокумент .НомерИсправленияДоИзменения                   =  ;
		//НовыйДокумент .ДатаИсправленияДоИзменения                    =  ;
		//НовыйДокумент .КодВидаОперацииДоИзменения                    =  ;
		//НовыйДокумент .ИННКонтрагентаДоИзменения                     =  ;
		//НовыйДокумент .КППКонтрагентаДоИзменения                     =  ;
		//НовыйДокумент .ИННКонтрагента                                =  ;
		//НовыйДокумент .КодВидаОперацииНаУменьшение                   =  ;
		//НовыйДокумент .КодВидаОперацииНаУменьшениеДоИзменения        =  ;
		
		//ИдентификаторДокументаВДиадок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок", Истина);
		//ИдентификаторЯщикДокументаВДиадок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторЯщикДокументаВДиадок", Истина);
		//
		//МассивСтруктур = Новый Массив;
		//МассивСтруктур.Добавить(Новый Структура("Свойство, Значение", ИдентификаторДокументаВДиадок,СтруктураДокумента.documentId));
		//МассивСтруктур.Добавить(Новый Структура("Свойство, Значение", ИдентификаторЯщикДокументаВДиадок, СтруктураДокумента.OrganizationId));
		//
		//УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НовыйДокумент.Ссылка, МассивСтруктур);
		
		НовыйДокумент.Записать();
		ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);
		адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
		СтрПарам.ВладелецФайлов = НовыйДокумент.Ссылка;
		СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
		СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
		РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
		
		Документ1С = НовыйДокумент.Ссылка;
		Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
	КонецЕсли; 
	//	
	Если СтруктураДокумента.ТипДокумента = "ПоступлениеТоваровИУслуг" Тогда
		НовыйДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Если СтруктураДокумента.Свойство("Дата") Тогда
			НовыйДокумент .Дата                              =  СтруктураДокумента.Дата ;
		КонецЕсли;
		НовыйДокумент.ВидОперации                            =  Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		НовыйДокумент .Организация                           =  Справочники.Организации.ОрганизацияПоУмолчанию();
		НовыйДокумент .Контрагент                            =  Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураДокумента.ИНН);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.НаименованиеПолное = &НаименованиеПолное";
		Запрос.УстановитьПараметр("ИНН",СтруктураДокумента.ИНН );
		Запрос.УстановитьПараметр("НаименованиеПолное",СтруктураДокумента.Наименование );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйДокумент .Контрагент                        = Выборка.Ссылка;
		КонецЦикла;
		
		НовыйДокумент .ДоговорКонтрагента                    = Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Организация",НовыйДокумент.Организация,,НовыйДокумент.Контрагент);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("Организация",НовыйДокумент.Организация );
		Запрос.УстановитьПараметр("Контрагент",НовыйДокумент.Контрагент );
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйДокумент .ДоговорКонтрагента            = Выборка.Ссылка;
		КонецЦикла;
		
		НовыйДокумент .НомерВходящегоДокумента               =  СтруктураДокумента.Номер;
		НовыйДокумент .ДатаВходящегоДокумента                =  СтруктураДокумента.Дата;
		НовыйДокумент .Ответственный                         =  ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент .Комментарий                           =  "Передано из диадок";
		НовыйДокумент.Склад                                  =  Справочники.Склады.ПолучитьСкладПоУмолчанию();
		НовыйДокумент.ПодразделениеОрганизации               =  pcru_УМФО.ФинОтдел();
		НовыйДокумент.СпособЗачетаАвансов                    =  Перечисления.СпособыЗачетаАвансов.Автоматически ;
		//БНФО
		НовыйДокумент.СчетУчетаРасчетовСКонтрагентом         =  pcru_УМФО.ПолучитьСчетПоАналитике("60311",НовыйДокумент.Контрагент);
		НовыйДокумент.СчетУчетаРасчетовПоАвансам             =  pcru_УМФО.ПолучитьСчетПоАналитике("60312",НовыйДокумент.Контрагент);
		НовыйДокумент.СчетУчетаРасчетовПоТаре                =  pcru_УМФО.ПолучитьСчетПоАналитике("60311",НовыйДокумент.Контрагент);
		//БНФО
		НовыйДокумент.ВалютаДокумента                        =  pcru_УМФО.ВалютаРубль();
		НовыйДокумент.КурсВзаиморасчетов                     =  1;
		НовыйДокумент.НДСВключенВСтоимость                   =  Истина;
		НовыйДокумент.СуммаВключаетНДС                       =  Истина;
		НовыйДокумент .СуммаДокумента                                =  СтруктураДокумента.ИТОГО;
		НовыйДокумент.НДСНеВыделять                          =  Ложь;
		НовыйДокумент.БНФОПризнакДоверительногоУправления    =  Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
		
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент КАК Контрагент,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат КАК СчетЗатрат,
		|	КОЛИЧЕСТВО(ПоступлениеТоваровУслугУслуги.Ссылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТ_КОНТРСчет
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	ПоступлениеТоваровУслугУслуги.Ссылка.ВидОперации = &ВидОперации
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент = &Контрагент
		|	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
		|	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатрат КАК СчетЗатрат,
		|	ПоступлениеТоваровУслугУслуги.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
		|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ КАК СчетЗатратНУ,
		|	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС КАК СчетУчетаНДС,
		|	ПоступлениеТоваровУслугУслуги.СпособУчетаНДС КАК СпособУчетаНДС,
		|	ПоступлениеТоваровУслугУслуги.БНФОСтатьяЗатрат КАК БНФОСтатьяЗатрат,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто1 КАК БНФОСубконто1,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто2 КАК БНФОСубконто2,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконто3 КАК БНФОСубконто3,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ1 КАК БНФОСубконтоНУ1,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ2 КАК БНФОСубконтоНУ2,
		|	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ3 КАК БНФОСубконтоНУ3
		|ИЗ
		|	ВТ_КОНТРСчет КАК ВТ_КОНТРСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		|		ПО ВТ_КОНТРСчет.Контрагент = ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент
		|			И ВТ_КОНТРСчет.СчетЗатрат = ПоступлениеТоваровУслугУслуги.СчетЗатрат
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслугУслуги.Ссылка УБЫВ";
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
		Запрос.УстановитьПараметр("Контрагент",НовыйДокумент .Контрагент  );
		Запрос.УстановитьПараметр("Дата",НачалоГода(ТекущаяДата()) );
		ВыборкаПараметровСтроки = Запрос.Выполнить().Выбрать();                                                              
		ЕстьВыборка = ВыборкаПараметровСтроки.Следующий();
		Если СтруктураДокумента.Свойство("Таблица") Тогда
			Для каждого СтрокаУслуги Из СтруктураДокумента.Таблица Цикл
				//Если СтрокаУслуги.Свойство("Номер") Тогда
				Если СтрокаУслуги.Количество() > 0 Тогда
					НоваяСтрокаУслуг = НовыйДокумент.Услуги.Добавить();    
					Если ЕстьВыборка Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуг,ВыборкаПараметровСтроки);
					КонецЕсли; 
					Для каждого Элемент Из СтрокаУслуги Цикл
						Единицы = "";
						Наименование = "";
						ОтрицательноеКоличество = Ложь;// Гори в аду ЮТС!!!!!
						Если Элемент.Ключ = "Цена" Тогда
							//НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(Элемент.Значение," ",""));
							НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));	
						ИначеЕсли Элемент.Ключ = "Сумма" or Элемент.Ключ = "всегобез"Тогда
							//НоваяСтрокаУслуг.Сумма    = Число(СтрЗаменить(Элемент.Значение," ",""));	
							НоваяСтрокаУслуг.Сумма = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));	
							//НоваяСтрокаУслуг.СуммаНДС = НоваяСтрокаУслуг.Сумма*0.2;	
						ИначеЕсли Элемент.Ключ = "Цена" Тогда
							//НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(Элемент.Значение," ",""));	
							НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));	
						ИначеЕсли Элемент.Ключ = "Колво" или Элемент.Ключ = "Количество" Тогда
							//НоваяСтрокаУслуг.Количество = Число(СтрЗаменить(Элемент.Значение," ",""));
							ЧисКол = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));
							Если ЧисКол >= 0 ТОгда
								НоваяСтрокаУслуг.Количество = ЧисКол;
							Иначе
								НоваяСтрокаУслуг.Количество = - ЧисКол;
								ОтрицательноеКоличество = Истина;	
							КонецЕсли;	
							
						ИначеЕсли Элемент.Ключ = "Ед" или Элемент.Ключ = "Единицы" или Элемент.Ключ =  "Изм"Тогда
							Единицы = Элемент.Значение;	
						ИначеЕсли Элемент.Ключ = "НДС" Тогда
							Если Элемент.Значение = "Без НДС" Тогда
								НоваяСтрокаУслуг.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
							КонецЕсли;
						ИначеЕсли Элемент.Ключ = "СуммаНДС" Тогда
							НоваяСтрокаУслуг.СуммаНДС = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));
						ИначеЕсли Элемент.Ключ = "всегосучётом" Тогда
							//
						ИначеЕсли Элемент.Ключ = "Номер" Тогда
							//
						Иначе
							Наименование = ЛЕВ(Элемент.Значение,1000);	
						КонецЕсли;
						
						Если ОтрицательноеКоличество  Тогда
							НоваяСтрокаУслуг.Цена =  - НоваяСтрокаУслуг.Цена;
							НоваяСтрокаУслуг.Сумма =  - НоваяСтрокаУслуг.Цена*НоваяСтрокаУслуг.Количество;
						КонецЕсли;
						
						
						
						Если ЗначениеЗаполнено(Наименование)  Тогда
							Номенклатура = Неопределено;
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							|	Номенклатура.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.Номенклатура КАК Номенклатура
							|ГДЕ
							|	Номенклатура.НаименованиеПолное = &НаименованиеПолное";
							Запрос.УстановитьПараметр("НаименованиеПолное",Наименование );
							Выборка = Запрос.Выполнить().Выбрать();
							Пока Выборка.Следующий() Цикл
								Номенклатура =  Выборка.Ссылка;
							КонецЦикла;	
							Если не ЗначениеЗаполнено(Номенклатура)  Тогда
								НоменклатураОб                            = Справочники.Номенклатура.СоздатьЭлемент();
								НоменклатураОб.ВидНоменклатуры            = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга");
								НоменклатураОб.Наименование               = Наименование;
								НоменклатураОб.НаименованиеПолное         = Наименование;
								НоменклатураОб.БНФОГруппаФинансовогоУчета = Справочники.БНФОГруппыФинансовогоУчетаАктивов.НайтиПоНаименованию("Услуги");
								//НоменклатураОб.ЕдиницаИзмерения
								НоменклатураОб.Записать();
								Номенклатура = НоменклатураОб.Ссылка;
							КонецЕсли; 
							НоваяСтрокаУслуг.Номенклатура = Номенклатура;
						КонецЕсли; 
					КонецЦикла; 
					
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		
		//  Число(СтрЗаменить(СтрокаУслуги.Сумма," ",""))
		
		
		//НовыйДокумент.СчетНаОплатуПоставщика                 =  ;
		//
		//НовыйДокумент.Грузоотправитель                       =  ;
		//НовыйДокумент.Грузополучатель                        =  ;
		//НовыйДокумент.КратностьВзаиморасчетов                =  1;
		//
		//НовыйДокумент.ТипЦен                                 =  ;
		////НовыйДокумент.РучнаяКорректировка                    =  ;
		////НовыйДокумент.КодВидаТранспорта                      =  ;
		//НовыйДокумент.БНФОСПОД                               =  ;
		//НовыйДокумент.БНФОСтатьяРасходовНДС                  =  ;
		//
		//НовыйДокумент.БНФОСчетРасходовНДС                    =  ;
		//
		//НовыйДокумент.БНФОВидДеятельностиНПФ                 =  ;
		//НовыйДокумент.ЕстьМаркируемаяПродукцияГИСМ           =  ;
		//НовыйДокумент.МОЛ                                    =  ;
		//НовыйДокумент.МестонахождениеОС                      =  ;
		//НовыйДокумент.ГруппаОС                               =  ;
		//НовыйДокумент.СпособОтраженияРасходовПоАмортизации   =  ;
		//НовыйДокумент.ОбъектыПредназначеныДляСдачиВАренду    =  ;
		//НовыйДокумент.БНФОАвтоматическиОпределятьПарныеСчета =  ;
		//
		//НовыйДокумент.АЭ_Идентификатор                       =  ;
		//НовыйДокумент.АЭ_РежимИнтеграции                     =  ;
		//НовыйДокумент.АЭ_ДанныеИнтеграции                    =  ;
		//НовыйДокумент.БНФОСчетАрендныеОбязательства          =  ;
		//НовыйДокумент.ЕстьРасхождения                        =  ;
		
		НовыйДокумент.СуммаДокумента = НовыйДокумент.Услуги.Итог("Сумма");
		НовыйДокумент.Записать();
		ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);
		адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
		СтрПарам.ВладелецФайлов = НовыйДокумент.Ссылка;
		СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
		СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
		РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
		
		Документ1С = НовыйДокумент.Ссылка;
		Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаСервере
Функция PCRU_ПолучитьКомпоненту()
	ДД =  РеквизитФормыВЗначение("Объект").ПолучитьМакет("PCRU_pdftotext");
	Возврат Base64Строка(ДД); 
КонецФункции 

&НаКлиенте 
Процедура ВыполнитьПослеВыбораТипаДокумента(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Прав(ЭДОбъект.FileName,3) = "pdf"  Тогда
		ДД =  Base64Значение(PCRU_ПолучитьКомпоненту());
		ПутьКPDFtoTEXT = ПолучитьИмяВременногоФайла("exe");
		ДД.Записать(ПутьКPDFtoTEXT);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
		ИмяВременногоФайлаТекст = ПолучитьИмяВременногоФайла("txt");
		Если ЭДОбъект.HasCustomPrintForm = Ложь Тогда
			ЭДОбъект.SaveSenderContent(ИмяВременногоФайла);
		Иначе
			ЭДОбъект.GetPrintForm(ИмяВременногоФайла, 30);
		КонецЕсли;
		ЭтаФорма.PCRU_ДвоичныеДанныеДокумента = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));
		ЭтаФорма.PCRU_РасширениеФайла = "pdf";
		ЭтаФорма.PCRU_ИмяФайла = ЭДОбъект.FileName;
		Команд = ПутьКPDFtoTEXT  + " -layout -table -enc UTF-8 -nodiag " + ИмяВременногоФайла + " " + ИмяВременногоФайлаТекст; 
		ЗапуститьПриложение(Команд,,Истина);
		ТД = Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяВременногоФайлаТекст,КодировкаТекста.UTF8);
		СтрокаПДФ = ТД.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайлаТекст);
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПДФ,Символы.ПС,Истина,Истина);
		МассивСтруктур = Новый Массив;
		СтруктураСтроки = Новый Структура;
		МассивКолонок = Новый Массив;
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("ИНН",ЭДОбъект.Counteragent.Inn);
		СтруктураДокумента.Вставить("КПП",ЭДОбъект.Counteragent.Kpp);
		СтруктураДокумента.Вставить("Наименование",ЭДОбъект.Counteragent.Name);
		СтруктураДокумента.Вставить("Дата",ЭДОбъект.Timestamp);
		НачалоШапки = Истина;
		НачалоТаблицы = Ложь;
		НачалоПодвала = Ложь;
		ТекущийНомерСтроки = 0;
		Для каждого Строка Из МассивСтрок Цикл
			Строка = ОбработатьСтрокуНаИсключения(Строка);
			ТекущийНомерСтроки = ТекущийНомерСтроки +1;
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка,"  ",Истина,Истина);
			//Если СтрЧислоВхождений(ВРЕГ(Строка),"№") > 0 И СтрЧислоВхождений(ВРЕГ(Строка), ВРег("Цена")) > 0 И СтрЧислоВхождений(ВРЕГ(Строка), ВРег("Наименование работ,услуг")) > 0 И СтрЧислоВхождений(ВРЕГ(Строка), ВРег("Сумма")) > 0 Тогда
			//	НачалоШапки = Истина;
			//	НачалоТаблицы = Ложь;
			//КонецЕсли;
			Если НачалоПодвала Тогда
				// 	
			КонецЕсли; 
			Если НачалоТаблицы Тогда
				Если  СтрЧислоВхождений(ВРЕГ(МассивПодстрок[0]),"ИТОГО") > 0 Тогда
					НачалоТаблицы = Ложь;
					НачалоПодвала = Истина;
					МассивСтруктур.Добавить(СтруктураСтроки);
					СтруктураДокумента.Вставить("Таблица",МассивСтруктур);
					СтруктураДокумента.Вставить("Итого",Число(СтрЗаменить(МассивПодстрок[1]," ","")));
				ИначеЕсли  МассивПодстрок.Количество() = 1 Тогда 
					Попытка 
						СтруктураСтроки[МассивКолонок[1]] = СтруктураСтроки[МассивКолонок[1]] + " " + МассивПодстрок[0]; 
					Исключение
					КонецПопытки;
				ИначеЕсли  МассивПодстрок.Количество() =   МассивКолонок.Количество() Тогда
					Если СтруктураСтроки <> Неопределено Тогда
						МассивСтруктур.Добавить(СтруктураСтроки);
					КонецЕсли; 
					СтруктураСтроки = Новый Структура;
					Для каждого Колонка Из МассивКолонок Цикл
						СтруктураСтроки.Вставить(Колонка,"");
					КонецЦикла;
					ТекущийНомерСтроки = МассивПодстрок[0];
					Для Итер = 0 По МассивПодстрок.Количество()-1 Цикл
						СтруктураСтроки[МассивКолонок[Итер]] = МассивПодстрок[Итер]; 
					КонецЦикла; 
				ИначеЕсли  МассивПодстрок.Количество() =   МассивКолонок.Количество() Тогда
					Если СтруктураСтроки <> Неопределено Тогда
						МассивСтруктур.Добавить(СтруктураСтроки);
					КонецЕсли; 
					СтруктураСтроки = Новый Структура;
					
					СтруктураСтроки.Вставить(МассивКолонок[1],МассивПодстрок[1]);
					СтруктураСтроки.Вставить(МассивКолонок[2],МассивПодстрок[2]);
					
					СтруктураСтроки.Вставить("Колво",1);
					СтруктураСтроки.Вставить("Ед","шт");
					
					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-2],МассивПодстрок[МассивПодстрок.Количество()-2]);
					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-1],МассивПодстрок[МассивПодстрок.Количество()-1]);					
				ИначеЕсли МассивПодстрок.Количество() + 1 = МассивКолонок.Количество() Тогда
					Если СтрНайти(МассивПодстрок[2], "мес") = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтруктураСтроки <> Неопределено Тогда
						МассивСтруктур.Добавить(СтруктураСтроки);
					КонецЕсли; 
					СтруктураСтроки = Новый Структура;
					
					СтруктураСтроки.Вставить(МассивКолонок[1],МассивПодстрок[1]);
					СтруктураСтроки.Вставить(МассивКолонок[2], СокрЛП(СтрЗаменить(СтрЗаменить(МассивПодстрок[2], "мес", ""), "шт", "")));
					
					СтруктураСтроки.Вставить("Колво",1);
					
					Если СтрНайти(МассивПодстрок[2], "мес") Тогда
						СтруктураСтроки.Вставить("Ед","мес");
					Иначе
						СтруктураСтроки.Вставить("Ед","шт");
					КонецЕсли;
					
					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-2],МассивПодстрок[МассивПодстрок.Количество()-2]);
					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-1],МассивПодстрок[МассивПодстрок.Количество()-1]);					
					
				КонецЕсли;
			КонецЕсли; 
			Если НачалоШапки Тогда
				Если (СтрЧислоВхождений(ВРЕГ(Строка),"№") > 0) и (СтрЧислоВхождений(ВРЕГ(Строка),"ОТ") > 0) и (Лев(Строка,1) <> "№") Тогда
					Если  (СтрЧислоВхождений(ВРЕГ(Строка),"ОСНОВАНИЕ") > 0)  Тогда
						МассивПодстрокОснования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка," ",Истина,Истина);
					Иначе
						МассивПодстрокНомера = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка," ",Истина,Истина);
						ИндексНомера = МассивПодстрокНомера.Найти("№");
						Если ИндексНомера <> Неопределено Тогда
							СтруктураДокумента.Вставить("Номер",МассивПодстрокНомера[ИндексНомера+1]); 
						КонецЕсли;
						ИндексДаты = МассивПодстрокНомера.Найти("от");
						Если ИндексДаты <> Неопределено Тогда
							Попытка
								ДатаЧисло = МассивПодстрокНомера[ИндексДаты + 1];
								ДатаИзСтроки = pcru_ex_РаботаСоСтроками.ПолучитьДатуИзСтроки(ДатаЧисло);
								Если  ЗначениеЗаполнено(ДатаИзСтроки)  Тогда
									СтруктураДокумента.Вставить("Дата",ДатаИзСтроки);
								КонецЕсли;
							Исключение
								ДатаЧисло = МассивПодстрокНомера[ИндексДаты + 1];
								СтрокаМесяц = МассивПодстрокНомера[ИндексДаты + 2];
								ЧислоГод = МассивПодстрокНомера[ИндексДаты + 3];
								ДатаИзСтроки = Дата(ЧислоГод, pcru_ex_РаботаСоСтроками.МесяцИзСтрокиВЧисло(СтрокаМесяц), ДатаЧисло);
								Если  ЗначениеЗаполнено(ДатаИзСтроки)  Тогда
									СтруктураДокумента.Вставить("Дата",ДатаИзСтроки);
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Лев(Строка,1) = "№" Тогда
					
					Для каждого Колонка Из МассивПодстрок Цикл
						Если СокрЛП(Колонка) = "№" Тогда
							МассивКолонок.Добавить("Номер");
						Иначе
							МассивКолонок.Добавить(pcru_ex_РаботаСоСтроками.ПолучитьТолькоБуквы(Колонка));
						КонецЕсли;
					КонецЦикла; 
					
					Если МассивКолонок.Количество() > 1 Тогда						
						НачалоТаблицы = Истина;
						НачалоШапки = Ложь;
					Иначе
						МассивКолонок.Очистить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
		СтруктураДокумента.Вставить("documentId",МетодСервера(, "КонвертироватьГуидВЧисло64",ЭДОбъект.documentId));
		СтруктураДокумента.Вставить("OrganizationId",ЭДОбъект.OrganizationId);
		СтруктураДокумента.Вставить("FileName",ЭДОбъект.FileName);
		СтруктураДокумента.Вставить("ТипДокумента",Результат.Значение);
		PCRU_ОтразитьДокументВУчетеНаСервере(СтруктураДокумента);
		Если ЗначениеЗаполнено(Документ1С) Тогда
			ОбработчикСозданиеДокумента(Документ1С);
			Элементы.PCRU_ОтразитьДокументВУчете.Доступность =Ложь;
			Элементы.PCRU_ОтразитьДокументВУчете.Доступность =Ложь;
			ПоказатьЗначение(,Документ1С);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ОбработатьСтрокуНаИсключения(ВхСтрока)
	Строка = СтрЗаменить(ВхСтрока,"шт"," шт");
	Строка = СтрЗаменить(Строка,"ед"," ед");
	Строка = СтрЗаменить(Строка," года","года");
	Строка = СтрЗаменить(Строка," за","за");
	Строка = СтрЗаменить(Строка,"1ч","1  ч");
	Строка = СтрЗаменить(Строка,"2ч","2  ч");
	Строка = СтрЗаменить(Строка,"3ч","3  ч");
	Строка = СтрЗаменить(Строка,"4ч","4  ч");
	Строка = СтрЗаменить(Строка,"5ч","5  ч");
	Строка = СтрЗаменить(Строка,"6ч","6  ч");
	Строка = СтрЗаменить(Строка,"7ч","7  ч");
	Строка = СтрЗаменить(Строка,"8ч","8  ч");
	Строка = СтрЗаменить(Строка,"9ч","9  ч");
	Строка = СтрЗаменить(Строка,"0ч","0  ч");
	Строка = СтрЗаменить(Строка,", ",",");
	Строка = СтрЗаменить(Строка,"усл ","  усл ");
	Строка = СтрЗаменить(Строка,"Без НДС","Без НДС   0");
	Строка = СтрЗаменить(Строка,"Без  НДС","Без НДС   0");
	//++ 30.03 САА
	//месяц прописью
	Строка = СтрЗаменить(Строка," января "  ,".01."); 
	Строка = СтрЗаменить(Строка," февраля " ,".02."); 
	Строка = СтрЗаменить(Строка," марта "   ,".03."); 
	Строка = СтрЗаменить(Строка," апреля "  ,".04."); 
	Строка = СтрЗаменить(Строка," мая "     ,".05."); 
	Строка = СтрЗаменить(Строка," июня "    ,".06."); 
	Строка = СтрЗаменить(Строка," июля "    ,".07."); 
	Строка = СтрЗаменить(Строка," августа " ,".08."); 
	Строка = СтрЗаменить(Строка," сентября ",".09."); 
	Строка = СтрЗаменить(Строка," октября " ,".10."); 
	Строка = СтрЗаменить(Строка," ноября "  ,".11."); 
	Строка = СтрЗаменить(Строка," декабря " ,".12."); 
	//
	
	//
	Индекс = СтрДлина(Строка);
	Пока Индекс > 0 Цикл
		Если Сред(Строка,Индекс,1) = "," Тогда
			Если Сред(Строка,Индекс - 4,1) = " " Тогда
				Строка =  Лев(Строка,Индекс - 5)+Сред(Строка,Индекс - 3);
				Индекс = СтрДлина(Строка);
				ПРодолжить;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс -1;
	КонецЦикла;  
	//
	Строка = СтрЗаменить(Строка,"шт","шт  ");
	Возврат Строка;
КонецФункции // ОбработатьСтрокуНаИсключения()

&НаКлиенте
Функция Эточисло(Символ)
	Если лев(Символ,1) = "1" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "2" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "3" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "4" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "5" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "6" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "7" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "8" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "9" Тогда
		Возврат Истина;
	КонецЕсли;
	Если лев(Символ,1) = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура PCRU_ОтразитьДокументВУчете(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораТипаДокумента", ЭтаФорма);
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить("СчетФактура","Счет-Фактура");
	СписокВидовОбъектов.Добавить("ПоступлениеТоваровИУслуг","Поступление Товаров И Услуг");
	//СписокВидовОбъектов.Добавить("ПоступлениеТоваровИУслугТовары","Поступление Товаров И Услуг (Товары)");
	//СписокВидовОбъектов.Добавить("ПоступлениеТоваровИУслугУслуги","Поступление Товаров И Услуг (Услуги)");
	ПоказатьВыборИзМеню(Оповещение, СписокВидовОбъектов);
КонецПроцедуры

&НаКлиенте
Процедура PCRU_ВыбратьДокументДляПривязки(Команда)
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора",ПараметрыВыбора,ЭтаФорма);
КонецПроцедуры
//+/asevryugin@PCRU.LOCAL, 2020-09-15 11:04:59

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) ///Событие формы
	Документ1С =  ВыбранноеЗначение;
	Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
	ПривязатьФайлКДокументу(Документ1С);
	ОбработчикСозданиеДокумента(Документ1С);
	ВернутьРеквизитыДокументу(Документ1С);
КонецПроцедуры

&НаСервере
Процедура ПривязатьФайлКДокументу(Документ1С)
	
	ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);	
	адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
	СтрПарам.ВладелецФайлов = Документ1С;
	СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
	СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
	РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
	
	PCRU_СвойстваДокумента = Новый Структура;
	Если ЗначениеЗаполнено(Документ1С.НомерВходящегоДокумента) Тогда
		PCRU_СвойстваДокумента.Вставить("НомерВходящегоДокумента", Документ1С.НомерВходящегоДокумента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ1С.ДатаВходящегоДокумента) Тогда
		PCRU_СвойстваДокумента.Вставить("ДатаВходящегоДокумента", Документ1С.ДатаВходящегоДокумента);
	КонецЕсли;
	
КонецПроцедуры // ПривязатьФайлКДокументу()

&НаСервере
Процедура ВернутьРеквизитыДокументу(Документ1С)
	
	ПроверкаДатЗапретаОтключена = ДатыЗапретаИзменения.ПроверкаДатЗапретаОтключена();
	
	УстановитьПривилегированныйРежим(Истина);
	ДатыЗапретаИзменения.ОтключитьПроверкуДатЗапрета(Истина);
	УстановитьПривилегированныйРежим(Ложь); 
	
	ОбъектДокумент1С = Документ1С.ПолучитьОбъект();
	ОбъектДокумент1С.ОбменДанными.Загрузка = Ложь;
	Если НЕ ЗначениеЗаполнено(Документ1С.НомерВходящегоДокумента) И PCRU_СвойстваДокумента.Свойство("НомерВходящегоДокумента") Тогда
		ОбъектДокумент1С.НомерВходящегоДокумента = PCRU_СвойстваДокумента.НомерВходящегоДокумента;
	КонецЕсли;
	Если Документ1С.ДатаВходящегоДокумента < '20000101' И PCRU_СвойстваДокумента.Свойство("ДатаВходящегоДокумента") Тогда
		ОбъектДокумент1С.ДатаВходящегоДокумента = PCRU_СвойстваДокумента.ДатаВходящегоДокумента;
	КонецЕсли;		
	ОбъектДокумент1С.Записать();
	
	//	Включаем контроль
	УстановитьПривилегированныйРежим(Истина);
	ДатыЗапретаИзменения.ОтключитьПроверкуДатЗапрета(ПроверкаДатЗапретаОтключена);
	УстановитьПривилегированныйРежим(Ложь);
	
	
	Если ТипЗнч(Документ1С) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		НаборРег = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		НаборРег.Отбор.Документ.Установить(Документ1С.Ссылка);
		НаборРег.Прочитать();
		Если НаборРег.Количество() > 0 Тогда
			Для Каждого стрНабора Из НаборРег Цикл
				стрНабора.Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
			КонецЦикла;
		Иначе
			стрНабора = НаборРег.Добавить();
			стрНабора.Организация = Документ1С.Организация;
			стрНабора.Документ = Документ1С.Ссылка;
			стрНабора.Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
		КонецЕсли;
		
		НаборРег.Записать();
	КонецЕсли;
	
КонецПроцедуры
