
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Элементы.ВерхнийЗаголовокФормы.Заголовок = "для " + Параметры.ПредставлениеОрганизации;
	
	Параметры.Свойство("Организация", Организация);
	
	НастройкиОрганизации = МетодСервера(, "ПолучитьНастройкиОрганизации", Организация);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиОрганизации);
	
	СписокДополнительныхВПФ.ЗагрузитьЗначения(НастройкиОрганизации.МассивДополнительныхВПФ);
	
	НастройкаФорматаОтправки 	= НастройкиОрганизации.ФормироватьУПД;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);

	ЗаполнитьСписокФормироватьСчетНаОсновании();
	СформироватьПредставленияФормированияПечатныхФорм();
	ОтображениеПредставленияДополнительныхВнешнихПечатныхФорм();
	СформироватьПредставлениеДополнительныхВнешнихПечатныхФорм();
	
	ЗаполнитьНастройкиФорматовОтправки(НастройкаФорматаОтправки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокФормироватьСчетНаОсновании()
		
	СписокФормироватьСчетНаОсновании.Очистить();
	
	СписокФормироватьСчетНаОсновании.Добавить(0, "Счета на оплату");
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		СписокФормироватьСчетНаОсновании.Добавить(4, "Заказа клиента");
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		СписокФормироватьСчетНаОсновании.Добавить(4, "Заказа покупателя");
	КонецЕсли;
	
	СписокФормироватьСчетНаОсновании.Добавить(1, "Документов продажи");
	СписокФормироватьСчетНаОсновании.Добавить(2, "Не формировать");
				
КонецПроцедуры
	
&НаКлиенте
Процедура НадписьДополнительныеВПФДляРеализацииНажатие(Элемент)
		
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаДополнительныхВнешнихПечатныхФорм", Новый Структура("МассивВнешнихПечатныхФорм", СписокДополнительныхВПФ.ВыгрузитьЗначения()), ЭтаФорма, "ОбработчикОткрытиеФормыДополнительныхВнешнихПечатныхФорм");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработчикОткрытиеФормыДополнительныхВнешнихПечатныхФорм(МассивВнешнихПечатныхФорм, ТекущиеДанные) Экспорт
	
	Если МассивВнешнихПечатныхФорм <> Неопределено Тогда
		
		СписокДополнительныхВПФ.ЗагрузитьЗначения(МассивВнешнихПечатныхФорм);
				
		СформироватьПредставлениеДополнительныхВнешнихПечатныхФорм();
		
	КонецЕсли;
	
КонецПроцедуры


	//{ Формирование Торг-12, Акта
		
	&НаКлиенте
	Процедура НадписьНакладныеСТоварамиНажатие(Элемент)
		
		СписокВыбора = Новый СписокЗначений;
		
		СписокВыбора.Добавить("Торг-12");
		СписокВыбора.Добавить("Акт");
				
		ОбработчикНакладныеСТоварами = Новый ОписаниеОповещения("ОбработчикВыборИзМенюНакладныеСТоварами", ЭтаФорма);
		ПоказатьВыборИзМеню(ОбработчикНакладныеСТоварами, СписокВыбора, Элементы.НадписьНакладныеСТоварами);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВыборИзМенюНакладныеСТоварами(РезультатВыбора, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатВыбора = Неопределено Тогда
			ПечатнаяФормаДляТоваров = РезультатВыбора.Значение;
			СформироватьПредставленияФормированияПечатныхФорм();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура НадписьНакладныеСУслугамиБезТоваровНажатие(Элемент)
		
		СписокВыбора = Новый СписокЗначений;
		
		СписокВыбора.Добавить("Торг-12");
		СписокВыбора.Добавить("Акт");
				
		ОбработчикНакладныеСУслугами=	Новый ОписаниеОповещения("ОбработчикВыборИзМенюНакладныеСУслугами", ЭтаФорма);
		ПоказатьВыборИзМеню(ОбработчикНакладныеСУслугами, СписокВыбора, Элементы.НадписьНакладныеСУслугамиБезТоваров);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВыборИзМенюНакладныеСУслугами(РезультатВыбора, ТекущиеДанные) Экспорт
		
		Если НЕ РезультатВыбора = Неопределено Тогда
			ПечатнаяФормаДляУслуг = РезультатВыбора.Значение;
			СформироватьПредставленияФормированияПечатныхФорм();
		КонецЕсли;
		
	КонецПроцедуры
	
	//} Формирование Торг-12, Акта
	

	//{ Формирование прочих документов
	
	&НаКлиенте
	Процедура НадписьСпособФормированияСчетаНажатие(Элемент)
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипДокумента", "Счет");
				
		ПараметрыФормы.Вставить("ВнешняяПечатнаяФорма",			ВнешняяПечатнаяФормаСчета);
		ПараметрыФормы.Вставить("ФормироватьСчетНаОсновании",	ФормироватьСчетНаОсновании);
		
		ПараметрыФормы.Вставить("СписокФормироватьСчетНаОсновании",	СписокФормироватьСчетНаОсновании);
		ПараметрыФормы.Вставить("СтандартнаяФормаСчетаНаОплату",	СтандартнаяФормаСчетаНаОплату);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПечатныхФорм", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройки");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НадписьСпособФормированияАктаНажатие(Элемент)
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипДокумента", "Акт");
				
		ПараметрыФормы.Вставить("ВнешняяПечатнаяФорма",				ВнешняяПечатнаяФормаАкта);
		ПараметрыФормы.Вставить("ФормироватьСчетНаОсновании",		СпособФормированияАкта);
		ПараметрыФормы.Вставить("СпособФормированияПечатнойФормы",	СпособФормированияАкта);
		
		ПараметрыФормы.Вставить("СписокФормироватьСчетНаОсновании",	СписокФормироватьСчетНаОсновании);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПечатныхФорм", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройки");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НадписьСпособФормированияАктаСверкиНажатие(Элемент)
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ТипДокумента", "АктСверки");
				
		ПараметрыФормы.Вставить("ВнешняяПечатнаяФорма",			ВнешняяПечатнаяФормаАктаСверки);
		ПараметрыФормы.Вставить("ФормироватьСчетНаОсновании",	СпособФормированияАктаСверки);
		
		ПараметрыФормы.Вставить("СписокФормироватьСчетНаОсновании",	СписокФормироватьСчетНаОсновании);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПечатныхФорм", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройки");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыНастройки(РезультатЗакрытия, ТекущиеДанные) Экспорт
			
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Если РезультатЗакрытия.ТипДокумента = "Акт" Тогда
				СпособФормированияАкта 		= РезультатЗакрытия.СпособФормированияПечатнойФормы;
				ВнешняяПечатнаяФормаАкта 	= РезультатЗакрытия.ВнешняяПечатнаяФорма;
			ИначеЕсли РезультатЗакрытия.ТипДокумента = "АктСверки" Тогда
				СпособФормированияАктаСверки 	= РезультатЗакрытия.СпособФормированияПечатнойФормы;
				ВнешняяПечатнаяФормаАктаСверки 	= РезультатЗакрытия.ВнешняяПечатнаяФорма;
			Иначе
				ФормироватьСчетНаОсновании	 	= РезультатЗакрытия.ФормироватьСчетНаОсновании;
				ВнешняяПечатнаяФормаСчета 		= РезультатЗакрытия.ВнешняяПечатнаяФорма;
				СтандартнаяФормаСчетаНаОплату 	= РезультатЗакрытия.СтандартнаяФормаСчетаНаОплату;
			КонецЕсли;
			
			СформироватьПредставленияФормированияПечатныхФорм();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьПредставленияФормированияПечатныхФорм()
		
		Элементы.НадписьНакладныеСТоварами.Заголовок = ПечатнаяФормаДляТоваров;
		Элементы.НадписьНакладныеСУслугамиБезТоваров.Заголовок = ПечатнаяФормаДляУслуг;
		
		Если СпособФормированияАкта = 0 Тогда
			СпособФормированияАктаПредставление = "Использовать форму рекомендованную ФНС";
		Иначе
			СпособФормированияАктаПредставление = "Использовать внешнюю печатную форму";
		КонецЕсли;
		Элементы.НадписьСпособФормированияАкта.Заголовок = СпособФормированияАктаПредставление;
		
		Если ФормироватьСчетНаОсновании = Неопределено Тогда
			ФормироватьСчетНаОсновании = 0;
		КонецЕсли;	
		
		ЗначениеСпискаФормироватьСчетНаОсновании = СписокФормироватьСчетНаОсновании.НайтиПоЗначению(ФормироватьСчетНаОсновании);
		
		Если ФормироватьСчетНаОсновании = 2 Тогда
			СпособФормированияСчетаПредставление = ЗначениеСпискаФормироватьСчетНаОсновании.Представление;
		Иначе
			Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФормаСчета) Тогда
				Если СтандартнаяФормаСчетаНаОплату Тогда
					СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать стандартную форму (из конфигурации)";
				Иначе
					СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать стандартную форму";
				КонецЕсли;
				
			Иначе
				СпособФормированияСчетаПредставление = "На основании: " + ЗначениеСпискаФормироватьСчетНаОсновании.Представление + ", использовать внешнюю печатную форму";
			КонецЕсли;
		КонецЕсли;
		Элементы.НадписьСпособФормированияСчета.Заголовок = СпособФормированияСчетаПредставление;
		
		Если СпособФормированияАктаСверки = 0 Тогда
			СпособФормированияАктаСверкиПредставление = "Использовать стандартную форму";
		Иначе
   			СпособФормированияАктаСверкиПредставление = "Использовать внешнюю печатную форму";
		КонецЕсли;
		Элементы.НадписьСпособФормированияАктаСверки.Заголовок = СпособФормированияАктаСверкиПредставление;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьПредставлениеДополнительныхВнешнихПечатныхФорм()
		
		Если ЗначениеЗаполнено(СписокДополнительныхВПФ) Тогда
			
			Разделитель		= "";
			СтрокаЗаголовка = "";
			
			Для каждого ЭлементСписка Из СписокДополнительныхВПФ Цикл
				СтрокаЗаголовка = СтрокаЗаголовка + Разделитель + Строка(ЭлементСписка.Значение);
				Разделитель = "; ";
			КонецЦикла;
			
		Иначе
			СтрокаЗаголовка = "не настроено";
		КонецЕсли;
		
		Элементы.НадписьДополнительныеВПФДляРеализации.Заголовок = СтрокаЗаголовка;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтображениеПредставленияДополнительныхВнешнихПечатныхФорм()
		
		Скрывать = НастройкаФорматаОтправки = "СЧФДОП_820"
				 ИЛИ НастройкаФорматаОтправки = "СЧФДОП";
		
		Элементы.Декорация3.Видимость								= НЕ Скрывать;
		Элементы.НадписьДополнительныеВПФДляРеализации.Видимость	= НЕ Скрывать;
		
		
	КонецПроцедуры	
		
	//} Формирование прочих документов
	
&НаКлиенте
Процедура Применить(Команда)
	
	НастройкиОрганизации = Новый Структура;
	
	НастройкиОрганизации.Вставить("ПечатнаяФормаДляТоваров"		  , ПечатнаяФормаДляТоваров);
	НастройкиОрганизации.Вставить("ПечатнаяФормаДляУслуг"		  , ПечатнаяФормаДляУслуг);
	НастройкиОрганизации.Вставить("ОтправлятьНеПроведенные"		  ,	ОтправлятьНеПроведенные);
	
	НастройкиОрганизации.Вставить("ВнешняяПечатнаяФормаСчета"	  , ВнешняяПечатнаяФормаСчета);
	НастройкиОрганизации.Вставить("ВнешняяПечатнаяФормаАкта"	  , ВнешняяПечатнаяФормаАкта);
	НастройкиОрганизации.Вставить("ВнешняяПечатнаяФормаАктаСверки", ВнешняяПечатнаяФормаАктаСверки);
	
	НастройкиОрганизации.Вставить("СпособФормированияАктаСверки"  , СпособФормированияАктаСверки);
	НастройкиОрганизации.Вставить("ФормироватьСчетНаОсновании"	  , ФормироватьСчетНаОсновании);
	НастройкиОрганизации.Вставить("СтандартнаяФормаСчетаНаОплату" , СтандартнаяФормаСчетаНаОплату);
	НастройкиОрганизации.Вставить("СпособФормированияАкта"		  , СпособФормированияАкта);
	
	НастройкиОрганизации.Вставить("МассивДополнительныхВПФ"		  , СписокДополнительныхВПФ.ВыгрузитьЗначения());
	
	НастройкиОрганизации.Вставить("УказыватьОтсутствиеОснованияУПД"	, УказыватьОтсутствиеОснованияУПД);
	НастройкиОрганизации.Вставить("ТекстКомментарияДиадок"		  	, ТекстКомментарияДиадок);
	
	НастройкаФорматаОтправки = МетодКлиента("Модуль_Клиент", "НастройкаФорматаОтправкиДокументов", ВариантОтправкиСФ, ВариантОтправкиНакладныхАктов);
	НастройкиОрганизации.Вставить("ФормироватьУПД"				  ,	НастройкаФорматаОтправки);
	
	МетодСервера(,"УстановитьНастройкиОрганизации", Организация, НастройкиОрганизации);
	
	ДобавитьСтатистику_НастройкиОрганизаций();
	
	Если ВнесеныИзменения Тогда
		ПараметрыЗакрытия = Новый Структура("Организация, ФормироватьУПД", Организация, НастройкаФорматаОтправки);
		Закрыть(ПараметрыЗакрытия);	
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодробнееОНастройкахНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ЗаголовокФормы, HTMLДокумент", "Руководство пользователя", "https://wiki.diadoc.ru/pages/viewpage.action?pageId=7668836");
	МетодКлиента(,"ОткрытьФормуОбработки", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

	//{ Формат документов на отправку по умолчанию
	
	&НаКлиенте
	Процедура ВариантОтправкиСФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СписокВыбора = МетодКлиента("Модуль_Клиент", "СписокВыбораВариантовОтправкиСчетовФактур");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИсходныйСписокВыбора", Элемент.СписокВыбора.Скопировать()); 
				
		ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораВариантаОтправкиСФ", ЭтаФорма, ДополнительныеПараметры);
		
		Элемент.СписокВыбора.Очистить();
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);		
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВариантОтправкиСФОчистка(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		ВывестиНастройкуФорматаОтправкиДокументовПоУмолчанию();
		ОтображениеПредставленияДополнительныхВнешнихПечатныхФорм();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеВыбораВариантаОтправкиСФ(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
		
		Если ВыбранныйЭлемент <> Неопределено Тогда
			
			ВариантОтправкиСФ = ВыбранныйЭлемент.Значение;
			УстановитьЗначениеЭлементаСоСпискомВыбора(Элементы.ВариантОтправкиСФ, ВыбранныйЭлемент.Значение, ВыбранныйЭлемент.Представление);
			
			ВариантОтправкиНакладныхАктов	= МетодКлиента("Модуль_Клиент", "ВариантОтправкиНакладныхПоУмолчанию", ВариантОтправкиСФ);			
			Представление	 				= МетодКлиента("Модуль_Клиент", "ПредставлениеВариантаОтправкиНакладных", ВариантОтправкиНакладныхАктов);
			УстановитьЗначениеЭлементаСоСпискомВыбора(Элементы.ВариантОтправкиНакладныхАктов, ВариантОтправкиНакладныхАктов, Представление);
			
			ВнесеныИзменения			= Истина;
			НастройкаФорматаОтправки	= МетодКлиента("Модуль_Клиент", "НастройкаФорматаОтправкиДокументов", ВариантОтправкиСФ, ВариантОтправкиНакладныхАктов);
			
		Иначе
			
			Для каждого ЭлементСписка Из ДополнительныеПараметры.ИсходныйСписокВыбора Цикл
				
				Элементы.ВариантОтправкиСФ.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				
			КонецЦикла;
									
		КонецЕсли;
		
		ОтображениеПредставленияДополнительныхВнешнихПечатныхФорм();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВариантОтправкиНакладныхАктовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СписокВыбора = МетодКлиента("Модуль_Клиент", "СписокВыбораВариантовОтправкиНакладных", ВариантОтправкиСФ);
		
		Если ЗначениеЗаполнено(СписокВыбора) Тогда
		
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИсходныйСписокВыбора", Элемент.СписокВыбора.Скопировать()); 
		
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПослеВыбораВариантаОтправкиНокладнойАкта", ЭтаФорма, ДополнительныеПараметры);
		
			Элемент.СписокВыбора.Очистить();
		
			ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);
							
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПослеВыбораВариантаОтправкиНокладнойАкта(РезультатВыбора, ДополнительныеПараметры) Экспорт
		
		Если РезультатВыбора <> Неопределено Тогда
			
			ВариантОтправкиНакладныхАктов	= РезультатВыбора.Значение;
			Представление					= РезультатВыбора.Представление;
			УстановитьЗначениеЭлементаСоСпискомВыбора(Элементы.ВариантОтправкиНакладныхАктов, ВариантОтправкиНакладныхАктов, Представление);
			
			ВнесеныИзменения			= Истина;
			НастройкаФорматаОтправки	= МетодКлиента("Модуль_Клиент", "НастройкаФорматаОтправкиДокументов", ВариантОтправкиСФ, ВариантОтправкиНакладныхАктов);
			
		Иначе
			
			Для каждого ЭлементСписка Из ДополнительныеПараметры.ИсходныйСписокВыбора Цикл
				
				Элементы.ВариантОтправкиНакладныхАктов.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтображениеПредставленияДополнительныхВнешнихПечатныхФорм();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВариантОтправкиНакладныхАктовОчистка(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		ВывестиНастройкуФорматаОтправкиДокументовПоУмолчанию();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьЗначениеЭлементаСоСпискомВыбора(Элемент, Значение, Представление)
			
		Элемент.СписокВыбора.Очистить();
		Элемент.СписокВыбора.Добавить(Значение, Представление);
					
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьНастройкиФорматовОтправки(Знач КлючНастройки)
		
		Если Не ЗначениеЗаполнено(КлючНастройки) Тогда
			КлючНастройки 	= МетодКлиента("Модуль_Клиент", "НастройкаФорматаОтправкиДокументовПоУмолчанию");
			ВнесеныИзменения = Истина;
		КонецЕсли;
			
		ВариантОтправкиСФ	= МетодКлиента("Модуль_Клиент", "ВариантОтправкиСчетовФактурПоКлючуНастройки", КлючНастройки);
		Представление	 	= МетодКлиента("Модуль_Клиент", "ПредставлениеВариантаОтправкиСчетовФактур", ВариантОтправкиСФ);
		УстановитьЗначениеЭлементаСоСпискомВыбора(Элементы.ВариантОтправкиСФ, ВариантОтправкиСФ, Представление);
				
		ВариантОтправкиНакладныхАктов	= МетодКлиента("Модуль_Клиент", "ВариантОтправкиНакладныхПоКлючуНастройки", КлючНастройки);
		Представление					= МетодКлиента("Модуль_Клиент", "ПредставлениеВариантаОтправкиНакладных", ВариантОтправкиНакладныхАктов);
		УстановитьЗначениеЭлементаСоСпискомВыбора(Элементы.ВариантОтправкиНакладныхАктов, ВариантОтправкиНакладныхАктов, Представление);
			
	КонецПроцедуры
	
	//} Формат документов на отправку по умолчанию

//{ ОБЕРТКИ

	&НаКлиенте
	Процедура ДобавитьСтатистику_НастройкиОрганизаций()
		
		МетодКлиента(	"Модуль_Клиент", 
						"Метрика_ДобавитьСтатистику_НастройкиОрганизации",
						"Изменение настроек"	);
		
	КонецПроцедуры // ДобавитьСтатистику_НастройкиОрганизаций()
	
	&НаКлиенте
	Процедура ВывестиНастройкуФорматаОтправкиДокументовПоУмолчанию()
		
		НастройкаФорматаОтправки = МетодКлиента("Модуль_Клиент", "НастройкаФорматаОтправкиДокументовПоУмолчанию");
		ЗаполнитьНастройкиФорматовОтправки(НастройкаФорматаОтправки);	
		
	КонецПроцедуры
	
//} ОБЕРТКИ