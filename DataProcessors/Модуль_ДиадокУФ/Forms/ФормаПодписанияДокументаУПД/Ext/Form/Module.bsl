
#Область ОписаниеПеременных

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

&НаКлиенте
Перем ДанныеСертификата;

&НаКлиенте
Перем ДанныеПодписанта;

&НаКлиенте
Перем ПодписантИП;

&НаКлиенте
Перем КнопкаЗаполнитьНажата;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	УстановитьОбязательныеСвойстваЭлементов();
	
	BoxId	 = Параметры.BoxId;
	ФорматЭД = Параметры.ФорматЭД;
	
	НастроитьФормуПоФормату();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
	
	КнопкаЗаполнитьНажата_ПолучитьЗначение();
	ПолучитьДанныеСертификатаИПодписанта();
	КнопкаРедактироватьПолномочия_УстановитьДоступность();
	ПрочитатьНастройкиПоУмолчанию();
	ЗаполнитьСтрокуПодписант();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	КнопкаЗаполнитьНажата_СохранитьЗначение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатПриемкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРаботникаДаннымиПодписанта(Команда)
	
	Если Не ЗначениеЗаполнено(ДанныеПодписанта) Тогда 
		Возврат;
	КонецЕсли;
	
	РаботникИмя		 = ДанныеПодписанта.FirstName;
	РаботникФамилия  = ДанныеПодписанта.Surname;
	РаботникОтчество = ДанныеПодписанта.Patronymic;
	
	РаботникДолжность			= ДанныеПодписанта.JobTitle;
	РаботникОснованиеПолномочий = ДанныеПодписанта.PowersBase;
	РаботникИныеСведения		= ДанныеПодписанта.SignerInfo;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьНажатие(Команда)
	
	КнопкаЗаполнитьНажата = НЕ КнопкаЗаполнитьНажата;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если ЕстьОшибкиЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ОтветныйТитул", ОтветныйТитул());
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПолномочия(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("BoxId", BoxId);
	ПараметрыФормы.Вставить("ФорматЭД", ФорматЭД);
	ПараметрыФормы.Вставить("ДанныеПодписанта" , ДанныеПодписанта);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально", "НастройкаПодписиУПД"
		, ПараметрыФормы
		, ЭтаФорма
		, "НастроитьПолномочияЗавершение");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолномочияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		ДанныеПодписанта = РезультатЗакрытия;
		НадписьНеЗаполненыПолномочия_УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительноеСведение(Команда)
	
	КоличествоДопСведений = КоличествоДопСведений + 1;
	ДобавитьПоляВводаДополнительногоСведения(КоличествоДопСведений);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныеПеречисления

&НаКлиенте
Функция БазовыеФорматыНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыКонтентаНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция БазовыеФорматыНаСервере()
	
	Результат = МетодСервера(, "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипыКонтентаНаСервере()
	
	Результат = МетодСервера(, "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтветногоТитула

&НаКлиенте
Функция ОтветныйТитул()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Результат = Неопределено;
	
	Если БазовыйФормат = БазовыеФорматы.utd820 Тогда
		
		Результат = Utd820BuyerContent();
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		Результат = Act552BuyerContent();
	
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
	
		Результат = TovTorgBuyerContent();
	
	ИначеЕсли БазовыйФормат = БазовыеФорматы.torg2 Тогда
	
		Результат = Torg2RecipientTitle();
		
	Иначе
		Результат = UtdBuyerContent();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Act552BuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("DocumentCreator", DocumentCreator());
	
	Если ЗначениеЗаполнено(ДанныеПодписанта.OrganizationPowersBase) Тогда
		Результат.Вставить("DocumentCreatorBase", Лев(ДанныеПодписанта.OrganizationPowersBase, 120));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПриемки) Тогда
		Результат.Вставить("AcceptanceDate", ДатаПриемки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		Результат.Вставить("OperationType", ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеОперации) Тогда
		Результат.Вставить("OperationContent", СодержаниеОперации);
	КонецЕсли;
	
	Если КнопкаЗаполнитьНажата Тогда
		
		Если ЗначениеЗаполнено(ДатаПолучения) Тогда
			Результат.Вставить("CreatedThingAcceptDate", ДатаПолучения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОПолучении) Тогда
			Результат.Вставить("CreatedThingInfo", СведенияОПолучении);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		Результат.Вставить("Signers", Новый Массив);
		Результат.Signers.Добавить(Новый Структура("SignerDetails", ДанныеПодписанта));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция TovTorgBuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("DocumentCreator", DocumentCreator());
	
	Если ЗначениеЗаполнено(ДанныеПодписанта.OrganizationPowersBase) Тогда
		Результат.Вставить("DocumentCreatorBase", Лев(ДанныеПодписанта.OrganizationPowersBase, 120));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПриемки) Тогда
		Результат.Вставить("AcceptanceDate", ДатаПриемки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		Результат.Вставить("OperationCode", ВидОперации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СодержаниеОперации) Тогда
		Результат.Вставить("OperationContent", СодержаниеОперации);
	КонецЕсли;
	
	Если КнопкаЗаполнитьНажата Тогда
		
		Результат.Вставить("Employee", Новый Структура);
		
		Результат.Employee.Вставить("FirstName", РаботникИмя);
		Результат.Employee.Вставить("Surname"  , РаботникФамилия);
		
		Если ЗначениеЗаполнено(РаботникОтчество) Тогда
			Результат.Employee.Вставить("Patronymic", РаботникОтчество);
		КонецЕсли;
		
		Результат.Employee.Вставить("EmployeePosition", РаботникДолжность);
		
		Если ЗначениеЗаполнено(РаботникОснованиеПолномочий) Тогда
			Результат.Employee.Вставить("EmployeeBase", РаботникОснованиеПолномочий);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РаботникИныеСведения) Тогда
			Результат.Employee.Вставить("EmployeeInfo", РаботникИныеСведения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		Результат.Вставить("Signers", Новый Массив);
		Результат.Signers.Добавить(Новый Структура("SignerDetails", ДанныеПодписанта));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция UtdBuyerContent()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Creator", DocumentCreator());
	
	Если ЗначениеЗаполнено(ДанныеПодписанта.OrganizationPowersBase) Тогда
		Результат.Вставить("CreatorBase", Лев(ДанныеПодписанта.OrganizationPowersBase, 120));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПриемки) Тогда
		Результат.Вставить("AcceptanceDate", ДатаПриемки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		Результат.Вставить("OperationCode", ВидОперации);
	КонецЕсли;
	
	Результат.Вставить("OperationContent", СодержаниеОперации);
	
	Если КнопкаЗаполнитьНажата Тогда
		
		Результат.Вставить("Employee", Новый Структура);
		
		Результат.Employee.Вставить("FirstName", РаботникИмя);
		Результат.Employee.Вставить("Surname"  , РаботникФамилия);
		
		Если ЗначениеЗаполнено(РаботникОтчество) Тогда
			Результат.Employee.Вставить("Patronymic", РаботникОтчество);
		КонецЕсли;
		
		Результат.Employee.Вставить("EmployeePosition", РаботникДолжность);
		Результат.Employee.Вставить("EmployeeBase"	  , РаботникОснованиеПолномочий);
		
		Если ЗначениеЗаполнено(РаботникИныеСведения) Тогда
			Результат.Employee.Вставить("EmployeeInfo", РаботникИныеСведения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		Результат.Вставить("Signers", Новый Массив);
		Результат.Signers.Добавить(Новый Структура("SignerDetails", ДанныеПодписанта));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Utd820BuyerContent()
	
	Результат = МетодКлиента("Модуль_Клиент", "Новый_Utd820BuyerContent");
	
	Результат.DocumentCreator = DocumentCreator();
	
	Если ЗначениеЗаполнено(ДанныеПодписанта.OrganizationPowersBase) Тогда
		Результат.DocumentCreatorBase = Лев(ДанныеПодписанта.OrganizationPowersBase, 120);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПриемки) Тогда
		Результат.AcceptanceDate = ДатаПриемки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		Результат.OperationCode = ВидОперации;
	КонецЕсли;
	
	Результат.OperationContent = СодержаниеОперации;
	
	Если КнопкаЗаполнитьНажата Тогда
		
		Результат.Employee.FirstName = РаботникИмя;
		Результат.Employee.Surname = РаботникФамилия;
		
		Если ЗначениеЗаполнено(РаботникОтчество) Тогда
			Результат.Employee.Patronymic = РаботникОтчество;
		КонецЕсли;
		
		Результат.Employee.EmployeePosition = РаботникДолжность;
		Результат.Employee.EmployeeBase = РаботникОснованиеПолномочий;
		
		Если ЗначениеЗаполнено(РаботникИныеСведения) Тогда
			Результат.Employee.EmployeeInfo = РаботникИныеСведения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПриемки) Тогда
		
		Результат.ContentOperCode.TotalCode = РезультатПриемки;
		
		Если ЗначениеЗаполнено(ДокументОРазногласияхНаименование) Тогда
			Результат.ContentOperCode.NameDiscrepDocument = ДокументОРазногласияхНаименование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОРазногласияхВид) Тогда
			Результат.ContentOperCode.TypeDiscrepDocument = ДокументОРазногласияхВид;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОРазногласияхНомер) Тогда
			Результат.ContentOperCode.NumberDiscrepDocument = ДокументОРазногласияхНомер;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОРазногласияхДата) Тогда
			Результат.ContentOperCode.DateDiscrepDocument = ДокументОРазногласияхДата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		ExtendedSigner = МетодКлиента("Модуль_Клиент", "Новый_ExtendedSigner");
		ЗаполнитьЗначенияСвойств(ExtendedSigner.SignerDetails, ДанныеПодписанта);
		Результат.Signers.Добавить(ExtendedSigner);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция DocumentCreator() 
	
	Результат = "";
	
	Если ПодписантИП Тогда
		Результат = "ИП " + ДанныеПодписанта.Surname + " " + ДанныеПодписанта.FirstName + ?(ЗначениеЗаполнено(ДанныеПодписанта.Patronymic), " " + ДанныеПодписанта.Patronymic, "");
	Иначе
		Результат = ДанныеСертификата.OrganizationName;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Torg2RecipientTitle()
	
	Результат = МетодКлиента("Модуль_Клиент", "Новый_Torg2RecipientTitle");
	
	Результат.DocumentCreator = DocumentCreator();
	
	Если ЗначениеЗаполнено(ДанныеПодписанта.OrganizationPowersBase) Тогда
		Результат.DocumentCreatorBase = Лев(ДанныеПодписанта.OrganizationPowersBase, 120);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПриемки) Тогда
		Результат.CompilationInfoDate = ДатаПриемки;
	КонецЕсли;
	
	Результат.TotalAcceptanceContent = СодержаниеОперации;
	
	Если ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		
		ExtendedSigner = МетодКлиента("Модуль_Клиент", "Новый_SignerTorg2");
		
		ЗаполнитьСведенияОПодписантеТорг2(ExtendedSigner.SignerDetails, ДанныеПодписанта);
		
		Результат.Signers.Добавить(ExtendedSigner);
		
	КонецЕсли;
	
	ЗаполнитьAdditionalInfoTorg2(Результат.AdditionalInfoId.AdditionalInfo);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОПодписантеТорг2(SignerDetails, ДанныеПодписанта)
	
	СоответствиеПолей = Новый Структура;
	СоответствиеПолей.Вставить("FirstName", "FirstName");
	СоответствиеПолей.Вставить("Patronymic", "MiddleName");
	СоответствиеПолей.Вставить("Surname", "LastName");
	СоответствиеПолей.Вставить("Inn", "Inn");
	СоответствиеПолей.Вставить("JobTitle", "Position");
	СоответствиеПолей.Вставить("OrganizationName", "SignerOrganizationName");
	СоответствиеПолей.Вставить("OrganizationPowersBase", "SignerOrgPowersBase");
	СоответствиеПолей.Вставить("Powers", "SignerPowers");
	СоответствиеПолей.Вставить("PowersBase", "SignerPowersBase");
	СоответствиеПолей.Вставить("RegistrationCertificate", "RegistrationCertificate");
	СоответствиеПолей.Вставить("SignerInfo", "SignerInfo");
	СоответствиеПолей.Вставить("SignerType", "SignerType");
	СоответствиеПолей.Вставить("Status", "SignerStatus");
	
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = ДанныеПодписанта[Элемент.Ключ];
		ИмяПоля	 = Элемент.Значение;
		
		SignerDetails[ИмяПоля] = Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьAdditionalInfoTorg2(КоллекцияДопСведений)
	
	Для НомерСведения = 1 По КоличествоДопСведений Цикл
		
		ИмяРеквизитаКлюч = ИмяПоляКлюч(НомерСведения);
		ИмяРеквизитаЗначение = ИмяПоляЗначение(НомерСведения);
		
		КлючСведения = ЭтаФорма[ИмяРеквизитаКлюч];
		ЗначениеСведения = ЭтаФорма[ИмяРеквизитаЗначение];
		
		Если Не ЗначениеЗаполнено(КлючСведения)
			И Не ЗначениеЗаполнено(ЗначениеСведения) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДопСведение = Новый Структура;
		ДопСведение.Вставить("Id", КлючСведения);
		ДопСведение.Вставить("Value", ЗначениеСведения);
		
		КоллекцияДопСведений.Добавить(ДопСведение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеСведения

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляКлюч(ПорядковыйНомер)
	
	Возврат "КлючСведения" + ПорядковыйНомер;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоляЗначение(ПорядковыйНомер)
	
	Возврат "ЗначениеСведения" + ПорядковыйНомер;
	
КонецФункции

&НаСервере
Функция НоваяГруппаДополнительногоСведения(ПорядковыйНомер)
	
	ИмяГруппы = "ГруппаДополнительноеСведение" + ПорядковыйНомер;
	
	Результат = Элементы.Добавить(ИмяГруппы
		, Тип("ГруппаФормы")
		, Элементы.ГруппаКоллекцияДополнительынхСведений);
	
	Результат.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Результат.ОтображатьЗаголовок = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НовоеПолеФормы(ИмяПоля, ЭлементРодитель = Неопределено)
	
	Результат = Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), ЭлементРодитель);
	Результат.Вид = ВидПоляФормы.ПолеВвода;
	Результат.ПутьКДанным = ИмяПоля;
	Результат.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Результат.АвтоМаксимальнаяШирина = Ложь;
	Результат.РастягиватьПоГоризонтали = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьПоляВводаДополнительногоСведения(ПорядковыйНомер)
	
	ТипСтрока50 = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	ИмяРеквизитаКлюч = ИмяПоляКлюч(ПорядковыйНомер);
	РеквизитКлюч = Новый РеквизитФормы(ИмяРеквизитаКлюч, ТипСтрока50);
	
	ТипСтрока2000 = ОбщегоНазначения.ОписаниеТипаСтрока(2000);
	ИмяРеквизитаЗначение = ИмяПоляЗначение(ПорядковыйНомер);
	РеквизитЗначение = Новый РеквизитФормы(ИмяРеквизитаЗначение, ТипСтрока2000);
	
	НовыеРеквизиты = Новый Массив;
	НовыеРеквизиты.Добавить(РеквизитКлюч);
	НовыеРеквизиты.Добавить(РеквизитЗначение);
	
	ИзменитьРеквизиты(НовыеРеквизиты);
	
	НоваяГруппа = НоваяГруппаДополнительногоСведения(ПорядковыйНомер);
	
	ЭлементКлюч = НовоеПолеФормы(ИмяРеквизитаКлюч, НоваяГруппа);
	ЭлементКлюч.ПодсказкаВвода = "Тип";
	ЭлементКлюч.Ширина = 15;
	
	ЭлементЗначение = НовоеПолеФормы(ИмяРеквизитаЗначение, НоваяГруппа);
	ЭлементЗначение.ПодсказкаВвода = "Значение";
	ЭлементЗначение.Ширина = 35;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьФормуПодписанияУПД_820()
	
	ЭтаФорма.Заголовок = "Подписание УПД";
	Элементы.ДатаПриемки.Заголовок = "Дата приемки";
	
	ОграничитьДлинуСодержанияОперации(255);
	     	
	ЗаполнитьСписокВыбора_РезультатыПриемки();
	ЗаполнитьСписокВыбора_ДокументОРазногласияхВид();

	СкрытьДополнительныеСведения();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПодписанияУПД()
	
	ЭтаФорма.Заголовок = "Подписание УПД";
	Элементы.ДатаПриемки.Заголовок = "Дата приемки";
	
	ОграничитьДлинуСодержанияОперации(255);
	
	СкрытьСведенияРезультатПриемки();
	СкрытьДополнительныеСведения();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПодписанияУКД()
	
	ЭтаФорма.Заголовок = "Подписание УКД";
	Элементы.ДатаПриемки.Заголовок = "Дата согласования";
	
	СкрытьСведенияОПолучении();
	ОграничитьДлинуСодержанияОперации(255);
	
	СкрытьСведенияРезультатПриемки();
	СкрытьДополнительныеСведения();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПодписанияНакладной()
	
	ЭтаФорма.Заголовок = "Подписание накладной";
	Элементы.ДатаПриемки.Заголовок = "Дата приемки";
	
	ОграничитьДлинуСодержанияОперации(255);
	
	СкрытьСведенияРезультатПриемки();
	СкрытьДополнительныеСведения();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПодписанияАкта()
	
	ЭтаФорма.Заголовок = "Подписание акта";
	Элементы.ДатаПриемки.Заголовок = "Дата";
	Элементы.НадписьЗаполнить.Заголовок = "Сведения по договору подряда";
	
	СкрытьСведенияРезультатПриемки();
	СкрытьДополнительныеСведения();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПодписанияТорг2()
	
	ЭтаФорма.Заголовок = "Подписание акта о расхождениях";
	Элементы.ДатаПриемки.Заголовок = "Дата составления";
	Элементы.СодержаниеОперации.Заголовок = "Сведения о приемке";
	Элементы.СодержаниеОперации.ПодсказкаВвода = "Например, материальные ценности приняты и оприходованы";
	
	СкрытьСведенияРезультатПриемки();
	СкрытьСведенияОПолучении();
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьДлинуСодержанияОперации(ДлинаСтроки = 255)
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки);
	Элементы.СодержаниеОперации.ОграничениеТипа = ОписаниеТипаСтрока;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьСведенияРезультатПриемки()
	
	Элементы.ГруппаРезультатПриемки.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОРазногласиях_УстановитьДоступность()
	
	НоваяДоступность = Ложь;
	
	Если РезультатПриемки = ПринятоСРазногласиями()
		ИЛИ РезультатПриемки = НеПринято() Тогда
		НоваяДоступность = Истина;
	КонецЕсли;
	
	ОбновитьСвойствоЭлементаФормы(Элементы.ДокументОРазногласияхНаименование, "Доступность", НоваяДоступность);
	ОбновитьСвойствоЭлементаФормы(Элементы.ДокументОРазногласияхВид			, "Доступность", НоваяДоступность);
	ОбновитьСвойствоЭлементаФормы(Элементы.ДокументОРазногласияхНомер		, "Доступность", НоваяДоступность);
	ОбновитьСвойствоЭлементаФормы(Элементы.ДокументОРазногласияхДата		, "Доступность", НоваяДоступность);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьСведенияОПолучении()
	
	СкрываемыеЭлементы = Новый Массив;
	СкрываемыеЭлементы.Добавить(Элементы.ВидОперации);
	СкрываемыеЭлементы.Добавить(Элементы.ГруппаЗаполнить);
	СкрываемыеЭлементы.Добавить(Элементы.ГруппаКнопкиЗаполнить);
	
	Для Каждого ЭлементФормы Из СкрываемыеЭлементы Цикл
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьДополнительныеСведения()
	
	Элементы.ГруппаДополнительныеСведения.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоФормату()
	
	Элементы.ПредставлениеДокумента.Заголовок = Параметры.ПредставлениеДокумента;
	
	БазовыеФорматы = БазовыеФорматыНаСервере();
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если БазовыйФормат = БазовыеФорматы.utd820 Тогда
		
		НастроитьФормуПодписанияУПД_820();
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd Тогда
		
		НастроитьФормуПодписанияУПД();
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736
		Или БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		НастроитьФормуПодписанияУКД();
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
		
		НастроитьФормуПодписанияНакладной();
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		НастроитьФормуПодписанияАкта();
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.torg2 Тогда
		
		НастроитьФормуПодписанияТорг2();
		
	Иначе
		
		ТекстОшибки = СтрШаблон("Неожиданное значение базового формата (%1)", БазовыйФормат);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитов

&НаКлиенте
Функция ЕстьОшибкиЗаполнения()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Отказ = Ложь;
	
	ВыполнитьОбщиеПроверки(Отказ);
	
	Если БазовыйФормат = БазовыеФорматы.utd820 Тогда
		
		ПроверитьТитулУПД_820(Отказ);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd Тогда
		
		ПроверитьТитулУПД(Отказ);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736
		Или БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		ПроверитьТитулУКД(Отказ);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
		
		ПроверитьТитулУПД(Отказ);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		ПроверитьТитулАкта(Отказ);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.torg2 Тогда
		
		ПроверитьТитулТорг2(Отказ);
		
	Иначе
		
		ТекстОшибки = СтрШаблон("Неожиданное значение базового формата (%1)", БазовыйФормат);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбщиеПроверки(Отказ)
	
	Если Не ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		СообщитьПользователю("Не заполнены сведения о подписанте!",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		СообщитьПользователю("Подписание документов без сертификата невозможно!",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТитулУПД_820(Отказ)
	
	ПроверитьЗаполнениеПоля(ДатаПриемки, "ДатаПриемки", "Дата приемки", Отказ);
	
	ПроверитьЗаполнениеПолейРезультатаПриемки(Отказ);
	
	Если КнопкаЗаполнитьНажата Тогда
		
		ПроверитьЗаполнениеПоля(РаботникИмя, "РаботникИмя", "Имя", Отказ);
		ПроверитьЗаполнениеПоля(РаботникФамилия, "РаботникФамилия", "Фамилия", Отказ);
		ПроверитьЗаполнениеПоля(РаботникДолжность, "РаботникДолжность", "Должность", Отказ);
		ПроверитьЗаполнениеПоля(РаботникОснованиеПолномочий, "РаботникОснованиеПолномочий", "Основание полномочий", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПолейРезультатаПриемки(Отказ)
	
	Если ЗначениеЗаполнено(СодержаниеОперации) ИЛИ ЗначениеЗаполнено(РезультатПриемки) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Содержание операции"" или ""Результат приемки""!'");
	Отказ = Истина;

	СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТитулУПД(Отказ)
	
	ПроверитьЗаполнениеПоля(ДатаПриемки, "ДатаПриемки", "Дата приемки", Отказ);
	ПроверитьЗаполнениеПоля(СодержаниеОперации, "СодержаниеОперации", "Содержание операции", Отказ);
	
	Если КнопкаЗаполнитьНажата Тогда
		
		ПроверитьЗаполнениеПоля(РаботникИмя, "РаботникИмя", "Имя", Отказ);
		ПроверитьЗаполнениеПоля(РаботникФамилия, "РаботникФамилия", "Фамилия", Отказ);
		ПроверитьЗаполнениеПоля(РаботникДолжность, "РаботникДолжность", "Должность", Отказ);
		ПроверитьЗаполнениеПоля(РаботникОснованиеПолномочий, "РаботникОснованиеПолномочий", "Основание полномочий", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТитулУКД(Отказ)
	
	ПроверитьЗаполнениеПоля(ДатаПриемки, "ДатаПриемки", "Дата согласования", Отказ);
	ПроверитьЗаполнениеПоля(СодержаниеОперации, "СодержаниеОперации", "Содержание операции", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТитулАкта(Отказ)
	
	ПроверитьЗаполнениеПоля(ДатаПриемки, "ДатаПриемки", "Дата", Отказ);
	ПроверитьЗаполнениеПоля(СодержаниеОперации, "СодержаниеОперации", "Содержание операции", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТитулТорг2(Отказ)
	
	ПроверитьЗаполнениеПоля(ДатаПриемки, "ДатаПриемки", "Дата составления", Отказ);
	ПроверитьЗаполнениеПоля(СодержаниеОперации, "СодержаниеОперации", "Сведения о приемке", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПоля(ТекущееЗначение, Поле = "", НазваниеПоля = "", Отказ = Ложь)
	
	Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон("Не заполнено поле ""%1""!", НазваниеПоля);
	СообщитьПользователю(ТекстСообщения, Поле, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователю(ТекстСообщенияПользователю, Поле = "", Отказ = Ложь)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатПриемки

&НаСервере
Процедура ЗаполнитьСписокВыбора_РезультатыПриемки()
	
	СписокВыбора = Элементы.РезультатПриемки.СписокВыбора;
	
	РезультатыПриемки = Новый СписокЗначений;
	
	РезультатыПриемки.Добавить(ПринятоБезРазногласий()	, "1 - Принято без разногласий");
	РезультатыПриемки.Добавить(ПринятоСРазногласиями()	, "2 - Принято с разногласиями");
	РезультатыПриемки.Добавить(НеПринято()				, "3 - Не принято");
	
	ЗаполнитьСписокВыбораПоСпискуЗначений(СписокВыбора, РезультатыПриемки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПринятоБезРазногласий()
	Возврат "1";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПринятоСРазногласиями()
	Возврат "2";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеПринято()
	Возврат "3";
КонецФункции

#КонецОбласти

#Область ДокументО_Разногласиях

&НаСервере
Процедура ЗаполнитьСписокВыбора_ДокументОРазногласияхВид()
	
	СписокВыбора = Элементы.ДокументОРазногласияхВид.СписокВыбора;
	
	ВидыДокументовОРазногласиях = Новый СписокЗначений;
	
	ВидыДокументовОРазногласиях.Добавить(ДокументОПриемкеСРасхождениями()	, "2 - Документ о приемке с расхождениями");
	ВидыДокументовОРазногласиях.Добавить(ДокументОРасхождениях()			, "3 - Документ о расхождениях");
	
	ЗаполнитьСписокВыбораПоСпискуЗначений(СписокВыбора, ВидыДокументовОРазногласиях);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументОПриемкеСРасхождениями()
	Возврат "2";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДокументОРасхождениях()
	Возврат "3";
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьОбязательныеСвойстваЭлементов()
	
	// Устанавливаем свойства программно, на случай если обработку сохранят платформой младше 8.3.7
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	ЗаполнитьЗначенияСвойств(Элементы.СтрокаПодписант, СвойствоАвтоМаксимальнаяШирина);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
			
	ДокументОРазногласиях_УстановитьДоступность();
		
	ГруппаЗаполнить_УстановитьТекущуюСтраницу();
	КнопкаЗаполнить_УстановитьЗаголовок();
	КнопкаЗаполнитьРаботника_УстановитьВидимость();
	КартинкаСертификат_УстановитьВидимость();
	НадписьНеЗаполненыПолномочия_УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗаполнить_УстановитьТекущуюСтраницу()
	
	Если НЕ Элементы.ГруппаЗаполнить.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если КнопкаЗаполнитьНажата Тогда
		
		Если БазовыйФормат = БазовыеФорматы.rezru Тогда
			Элементы.ГруппаЗаполнить.ТекущаяСтраница = Элементы.ГруппаЗаполнитьДоговор;
		Иначе
			Элементы.ГруппаЗаполнить.ТекущаяСтраница = Элементы.ГруппаЗаполнитьРаботника;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаЗаполнить.ТекущаяСтраница = Элементы.ГруппаЗаполнитьПустая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнить_УстановитьЗаголовок()
	
	Если Элементы.ГруппаКнопкиЗаполнить.Видимость Тогда
		
		НовыйЗаголовок = ?(КнопкаЗаполнитьНажата, "Отменить заполнение", "Заполнить");
		ОбновитьСвойствоЭлементаФормы(Элементы.КнопкаЗаполнить, "Заголовок", НовыйЗаголовок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьРаботника_УстановитьВидимость()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	ВидимостьЭлемента = Элементы.ГруппаКнопкиЗаполнить.Видимость
						И КнопкаЗаполнитьНажата
						И ЗначениеЗаполнено(ДанныеПодписанта)
						И БазовыйФормат <> БазовыеФорматы.rezru;
	
	ОбновитьСвойствоЭлементаФормы(Элементы.КнопкаЗаполнитьРаботника, "Видимость", ВидимостьЭлемента)
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаРедактироватьПолномочия_УстановитьДоступность()
	
	Элементы.КнопкаРедактироватьПолномочия.Доступность = ЗначениеЗаполнено(ДанныеСертификата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаСертификат_УстановитьВидимость()
	
	ВидимостьЭлемента = ЗначениеЗаполнено(ДанныеСертификата);
	
	ОбновитьСвойствоЭлементаФормы(Элементы.КартинкаСертификат, "Видимость", ВидимостьЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНеЗаполненыПолномочия_УстановитьВидимость()
	
	ВидимостьЭлемента = НЕ ЗначениеЗаполнено(ДанныеПодписанта);
	
	ОбновитьСвойствоЭлементаФормы(Элементы.НадписьНеЗаполненыПолномочия, "Видимость", ВидимостьЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатаИПодписанта()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	ДанныеСертификата = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", BoxId, "ДанныеОрганизации").Certificate;
	ДанныеПодписанта  = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта", BoxId, БазовыйФормат, Ложь);
	
	ДопФорматы = Новый Массив;
	ДопФорматы.Добавить(БазовыеФорматы.tovtorg);
	ДопФорматы.Добавить(БазовыеФорматы.rezru);
	
	// ДанныеПодписанта для TovTorg и Act552 пересекаются с UniversalTransferDocument, пробуем их получить.
	Если НЕ ЗначениеЗаполнено(ДанныеПодписанта) И ДопФорматы.Найти(БазовыйФормат) <> Неопределено Тогда
		ДанныеПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта", BoxId, БазовыеФорматы.utd, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПодписанта) И НЕ ЗначениеЗаполнено(ДанныеПодписанта.PowersBase) Тогда
		ДанныеПодписанта.PowersBase = "Должностные обязанности"; // Значение по умолчанию
	КонецЕсли; 
	
	ПодписантИП = ЗначениеЗаполнено(ДанныеСертификата) И СтрДлина(ДанныеСертификата.INN) = 12;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуПодписант()
	
	Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Элементы.СтрокаПодписант.Заголовок = ДанныеСертификата.OrganizationName + ", " + ДанныеСертификата.Name;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройкиПоУмолчанию()
	
	СодержаниеОперации = СодержаниеОперацииПоУмолчанию();
	
	ДатаПриемки = ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(РаботникОснованиеПолномочий) Тогда
		РаботникОснованиеПолномочий = "Должностные обязанности";
	КонецЕсли;
	
	РезультатПриемки = ПринятоБезРазногласий();
	
КонецПроцедуры

&НаКлиенте
Функция СодержаниеОперацииПоУмолчанию()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	Результат = "";
	
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если БазовыйФормат = БазовыеФорматы.utd820
		Или БазовыйФормат = БазовыеФорматы.utd Тогда
		
		Результат = "Товары и услуги получены, работы приняты";
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736
		Или БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		Результат = "С изменением стоимости согласен";
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
		
		Результат = "Перечисленные в документе ценности переданы";
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		Результат = "Результаты работ переданы (услуги оказаны)";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КнопкаЗаполнитьНажата_ПолучитьЗначение()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если БазовыйФормат = БазовыеФорматы.rezru Тогда
		КнопкаЗаполнитьНажата = ЗаполнитьДоговор;
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd Тогда
		КнопкаЗаполнитьНажата = Ложь;
	Иначе
		КнопкаЗаполнитьНажата = ЗаполнитьРаботника;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗаполнитьНажата_СохранитьЗначение()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если БазовыйФормат = БазовыеФорматы.rezru Тогда
		ЗаполнитьДоговор   = КнопкаЗаполнитьНажата;
	ИначеЕсли БазовыйФормат <> БазовыеФорматы.ucd Тогда
		ЗаполнитьРаботника = КнопкаЗаполнитьНажата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСвойствоЭлементаФормы(Элемент, СвойствоЭлемента, ЗначениеСвойства)
	
	Если Элемент[СвойствоЭлемента] <> ЗначениеСвойства Тогда
		Элемент[СвойствоЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоСпискуЗначений(Список, Источник)
	
	МетодСервера(, "ЗаполнитьСписокВыбораПоСпискуЗначений", Список, Источник);
	
КонецПроцедуры

#КонецОбласти