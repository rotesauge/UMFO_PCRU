
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем РасположениеМодуля;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
	ВидимостьГруппы = ЗначениеЗаполнено(Параметры.НоваяВерсия); 
	Элементы.ГруппаТекстОбновления.Видимость		= ВидимостьГруппы;
	Элементы.ГруппаДляОбновленияМодуля.Видимость	= ВидимостьГруппы;
	
	Если ВидимостьГруппы Тогда 
		Элементы.НадписьВерсияМодуля.Заголовок	= "Текущая версия модуля " + Параметры.ТекущаяВерсия + " будет обновлена до версии " + Параметры.НоваяВерсия;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "НоваяВерсия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
	
	АдресаРесурсов = МетодКлиента("Модуль_Клиент", "АдресаИнтернетРесурсов");
	
	Если ЗначениеЗаполнено(НоваяВерсия) Тогда
		ПоказатьВозможныеДействияДляОбновленияМодуля();
		ПолеНовости = АдресаРесурсов.Инструкция_ОбновлениеИОписаниеВерсий;
	Иначе
		ПолеНовости = АдресаРесурсов.Инструкция_ОписаниеВерсий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//{ОБНОВЛЕНИЕ МОДУЛЯ

&НаКлиенте
//варианты действий пользователя для обновления модуля, в зависимости от его расположения
Процедура ПоказатьВозможныеДействияДляОбновленияМодуля()
	
	СтруктураРасположенияМодуля	= МетодСервера(,"МестоРасположенияМодуля");
	
	ИмяФайлаМодуля				= СтруктураРасположенияМодуля.Путь;
	РасположениеМодуля			= СтруктураРасположенияМодуля.Место;
	
	ВладелецФормы.ПутьКМодулюВСправочнике1С = СтруктураРасположенияМодуля.ПутьКМодулюВСправочнике1С;
	
	Заголовок = "Обновление модуля с доработками";
	Элементы.ПанельКнопокСДоработками.Видимость	= Ложь;
	Элементы.ПанельКнопокБезДоработок.Видимость	= Ложь;
	
	Если РасположениеМодуля = "ВКонфигурации" Тогда 
		Элементы.ПанельКнопокСДоработками.Видимость	= Истина;
	Иначе	
		
		АктивнаяКнопка	= МетодКлиента("Модуль_Клиент", "ДействиеПриОбновленииМодуляФайловыйВариант", СтруктураРасположенияМодуля);
		
		Если АктивнаяКнопка = "Скачать" Тогда
			
			Заголовок									= "Скачайте и обновите модуль";
			Элементы.НадписьУспокаивающая.Заголовок		= "Обновление модуля не влияет на работу 1С, все ваши данные будут сохранены.";
			Элементы.ПанельКнопокБезДоработок.Видимость	= Истина;
			
		ИначеЕсли АктивнаяКнопка = "ОставитьЗаявку" Тогда
			
			Элементы.ПанельКнопокСДоработками.Видимость	= Истина;
			
			Если ИмяФайлаМодуля = "" Тогда
				 Элементы.НадписьУспокаивающая.Заголовок	= "Возможно, ваш" + Сред(Элементы.НадписьУспокаивающая.Заголовок, 4);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСкачатьОбновлениеМодуля(Команда)
	СохранитьФайлОбновления();
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОставитьЗаявкуНаОбновление(Команда)
	ОставитьЗаявкуНаОбновление();
КонецПроцедуры

&НаКлиенте
//сохранение файла с новой версией модуля
Процедура СохранитьФайлОбновления()
	
	Каталог = "";
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Все файлы(*.*)|*.*'");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог для сохранения новой версии модуля'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ИмяКаталога = ДиалогОткрытияФайла.Каталог;
		СоздатьКаталог(ИмяКаталога);
		
		//определяем наименование файла с новой версией модуля
		ИмяФайлаОбновления = "Diadoc1C_UF_" + СтрЗаменить(НоваяВерсия, ".", "_") + ".epf";
		
		ИмяФайлаОбновленияНаДиске = ИмяКаталога + "\" + ИмяФайлаОбновления;
		
		Попытка
			
			ФайлОбновления = МетодКлиента("Модуль_Клиент", "ЗапросНаПолучениеФайла", "https://diadoc-api.kontur.ru/1c-addin/update/" + ИмяФайлаОбновления, ИмяФайлаОбновленияНаДиске);
			Если ФайлОбновления = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
		 Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			МетодСервера(,"ОбработатьОшибкуНаСервере", "ОшибкаПолученияФайлаОбновления", ТекстОшибки);
			
			Если Найти(ТекстОшибки, "Файл не обнаружен") <> 0 Тогда 
				ПоказатьПредупреждение(, "Файл не обнаружен.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);	
			Иначе
				СообщениеПользователю =	Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстОшибки;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
			Возврат;
			
		КонецПопытки;
		
		ДвоичныеДанныеОбновления = Новый ДвоичныеДанные(ФайлОбновления);
		УдалитьФайлы(ФайлОбновления);
		
		ДвоичныеДанныеОбновления.Записать(ИмяФайлаОбновленияНаДиске);
		
		ТекстСообщения = "Файл с новой версией модуля успешно сохранен: " + ИмяФайлаОбновленияНаДиске;
		Если РасположениеМодуля = "ВКонфигурации" Тогда 
			ТекстСообщения = ТекстСообщения + " 
							|Обновите обработку в конфигураторе.";
		ИначеЕсли РасположениеМодуля = "ВСправочнике" Тогда 
			ТекстСообщения = ТекстСообщения + "
							|Обновите модуль в справочнике 1С.";
		ИначеЕсли РасположениеМодуля = "НаДиске" Тогда 
			ТекстСообщения = ТекстСообщения + " 
							|Используйте новый файл для работы.";
		КонецЕсли;
		
		СообщениеПользователю =	Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры		

&НаКлиенте
//открываем форму заполнения заявки на обновление модуля через IE
Процедура ОставитьЗаявкуНаОбновление()
	
	Попытка
		
		ЗапуститьПриложение("https://www.diadoc.ru/order1c?comment=модуль_1C_8_3_управляемое_приложение");
		
	Исключение
		
		ТекстОшибки = ИнформацияОбОшибке().Описание;
		Сообщить(ТекстОшибки);
		Возврат;
		
	КонецПопытки;
	
	СообщениеПользователю =	Новый СообщениеПользователю;
	СообщениеПользователю.Текст = "Открыта форма заявки на обновление модуля.";
	СообщениеПользователю.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОнлайнКонсультантНажатие(Элемент)
	
	ФормаТП = МетодКлиента(,"ПолучитьФормуОбработки", "ФормаТехподдержка",,ВладелецФормы);
	ФормаТП.Платформа = Платформа;
	
	ФормаТП.ОбработатьНажатие_ОткрытьОнлайнЧат();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПисьмоВТехподдержкуНажатие(Элемент)
	
	ФормаТП = МетодКлиента(,"ПолучитьФормуОбработки", "ФормаТехподдержка",,ВладелецФормы);
	ФормаТП.Платформа = Платформа;
	
	ФормаТП.ОбработатьНажатие_ОтправитьEmail();
	
КонецПроцедуры

//}ОБНОВЛЕНИЕ МОДУЛЯ

#КонецОбласти
