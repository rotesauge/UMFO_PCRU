&НаКлиенте
Перем ТекущийПользовательДиадок;

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	Результат = Новый Структура;
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьDiadocConnection");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СтрокаКонтекста");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПроверитьДоступКОрганизации");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьФИОПодписанта");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДолжностьПодписанта");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьТекущегоПользователяДиадок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПодписатьИОтправить_ПодписаниеЗапрошенного");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СертификатыДляШифрования");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ИдентификаторЭДО");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПрочитатьДанныеПодписанта");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДанныеКонтекстаДиадок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьДокументДиадок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьФайлТитулаПродавца");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьФайлПодписиПродавца");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьФайлТитулаПокупателя");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоОшибкаАпиНеНастроеныПараметрыПодписания");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТребуетсяВыводитьНаименованиеТовараСКодами");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "InitialDocumentIds");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ReplySendTask");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция БазовыеФорматы()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыКонтента()
	
	Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция УровеньЖурналаПредупреждение()
	
	Возврат "Предупреждение";
	
КонецФункции

&НаКлиенте
Функция УровеньЖурналаОшибка()
	
	Возврат "Ошибка";
	
КонецФункции

&НаКлиенте
Функция СобытиеЖурналаРегистрации()
	
	Возврат Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПолучитьDiadocConnection(ДиадокПоследнийСертификатПользователя, ДиадокПоследнееПредставлениеПользователя) Экспорт
	
	РезультатАвторизации = Новый Структура("ПредставлениеПользователя, DiadocConnection", ДиадокПоследнееПредставлениеПользователя);
	
	ТекущийПользовательДиадок= Неопределено;
	
	Попытка
		ConnectionByCertificate = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI.CreateConnectionByCertificate(ДиадокПоследнийСертификатПользователя);
		РезультатАвторизации.DiadocConnection= ConnectionByCertificate;
	Исключение КонецПопытки;
	
	Возврат РезультатАвторизации;

КонецФункции

&НаКлиенте
Функция СтрокаКонтекста(BoxID_или_Организация1С) Экспорт
	
	Результат = Неопределено;
	
	ПолеКонтекста = ?(ТипЗнч(BoxID_или_Организация1С) = Тип("Строка"), "BoxID", "Организация");
	
	Для Каждого СтрокаКонтекста Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
		Если СтрокаКонтекста[ПолеКонтекста] = BoxID_или_Организация1С Тогда
			Результат = СтрокаКонтекста;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДоступКОрганизации(DiadocConnection, Организация) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	BoxID  = МетодСервера(,"Организация_2_BoxID", Организация);
	
	Если BoxID = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		DiadocConnection.GetOrganizationById(BoxID).GetDocumentById("127CB1F7-BD30-444B-99BA-DAB072DA70BF127CB1F7-BD30-444B-99BA-DAB072DA70BF");
		Возврат Истина;
	Исключение
		строкаИсключения = ОписаниеОшибки();
		Если Найти(нрег(строкаИсключения), "code:403") <> 0 Тогда
			Возврат Ложь;
		ИначеЕсли Найти(нрег(строкаИсключения), "code:404") <> 0 Тогда
			Возврат Истина;
		Иначе
			ВызватьИсключение строкаИсключения;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФИОПодписанта(BoxId) Экспорт
	
	Результат = "";
	
	СтрокаКонтекста = СтрокаКонтекста(BoxId);
	
	Если СтрокаКонтекста.ДанныеОрганизации.AuthenticateType = "Certificate" Тогда
		Результат = СтрокаКонтекста.ДанныеОрганизации.Certificate.Name;
	Иначе
		Результат = СтрокаКонтекста.ДанныеСотрудника.ФИО;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДолжностьПодписанта(BoxId) Экспорт
	
	СтрокаКонтекста = СтрокаКонтекста(BoxId);
	
	Результат = СтрокаКонтекста.ДанныеСотрудника.Должность;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущегоПользователяДиадок() Экспорт
	
	Результат = Неопределено;
	
	Соединение = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection;
	Если Соединение <> Неопределено Тогда
		Результат = Соединение.GetMyUser();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СертификатыДляШифрования(Организация1С, BoxId = Неопределено) Экспорт
	
	МассивСертификатов = Новый Массив;
	
	СтрокаКонтекста = СтрокаКонтекста(Организация1С);
	
	Если BoxId = Неопределено Тогда
		BoxId = СтрокаКонтекста.BoxId;
	КонецЕсли;
	
	Certificates = СтрокаКонтекста.Box.GetCounteragentById(BoxId).GetCertificates();
	
	ВГраница = Certificates.Count - 1;
	Для ИндексЦикла = 0 ПО ВГраница Цикл
		
		Сертификат = Certificates.GetItem(ИндексЦикла);
		
		Если Сертификат.CanEncrypt Тогда
			МассивСертификатов.Добавить(Сертификат);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСертификатов.Количество() = 0 Тогда
		
		ОписаниеОш = "Нет сертификатов, доступных для шифрования исходящих документов!";
		ВызватьИсключение ОписаниеОш;
		
	КонецЕсли;
	
	Возврат МассивСертификатов;
	
КонецФункции

// Получает ИдентификаторЭДО по BoxID с любого доступного ящика.
//
// Параметры:
//  BoxID - Строка.
//
&НаКлиенте
Функция ИдентификаторЭДО(BoxID) Экспорт
	
	Для Каждого СтрокаКонтекста Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
		
		Попытка
			FnsParticipantId = СтрокаКонтекста.Box.GetCounteragentById(BoxID).FnsParticipantId;
		Исключение 
		КонецПопытки;
		
		Если ЗначениеЗаполнено(FnsParticipantId) Тогда
			Возврат FnsParticipantId;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция ПрочитатьДанныеПодписанта(BoxId, БазовыйФормат, IsSeller) Экспорт
	
	Результат = Неопределено;
	ExtendedSignerDetails = Неопределено;
	
	СтрокаКонтекста = СтрокаКонтекста(BoxId);
	
	Если СтрокаКонтекста <> Неопределено И СтрокаКонтекста.ДанныеОрганизации.AuthenticateType = "Certificate" Тогда
		
		DocumentTitleType = ПолучитьDocumentTitleType(БазовыйФормат, IsSeller);
		
		Попытка
			ExtendedSignerDetails = СтрокаКонтекста.Box.GetExtendedSignerDetails2(СтрокаКонтекста.ДанныеОрганизации.Certificate.Thumbprint, DocumentTitleType);
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Если Не ЭтоОшибкаАпиНеНастроеныПараметрыПодписания(ТекстОшибки) Тогда
				ВызватьИсключение;
			КонецЕсли;
		
		КонецПопытки;
		
	КонецЕсли;
	
	Если ExtendedSignerDetails <> Неопределено Тогда
		Результат = МетодКлиента("Модуль_Клиент", "Новый_ExtendedSignerDetails");
		МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", ExtendedSignerDetails, Результат, "ExtendedSignerDetails");
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьДанныеПодписанта(ДанныеПодписанта, BoxId, БазовыйФормат, IsSeller) Экспорт
	
	СтрокаКонтекста = СтрокаКонтекста(BoxId);
	
	Task = СтрокаКонтекста.Box.CreateSetExtendedSignerDetailsTask(СтрокаКонтекста.ДанныеОрганизации.Certificate.thumbprint);
	
	ЗаполнитьЗначенияСвойств(Task.ExtendedSignerDetailsToPost, ДанныеПодписанта);
	
	Task.DocumentTitleType = ПолучитьDocumentTitleType(БазовыйФормат, IsSeller);
	
	Task.Send();
	
КонецПроцедуры

&НаКлиенте
Функция ТипТитулаОтправителя(БазовыйФормат)
	
	БазовыеФорматы = БазовыеФорматы();
	
	ТипыТитулов = Новый Соответствие;
	ТипыТитулов.Вставить(БазовыеФорматы.tovtorg	, "TovTorg551Seller");
	ТипыТитулов.Вставить(БазовыеФорматы.utd820	, "UtdSeller");
	ТипыТитулов.Вставить(БазовыеФорматы.rezru	, "AccCert552Seller");
	ТипыТитулов.Вставить(БазовыеФорматы.torg2	, "Torg2Buyer");
	ТипыТитулов.Вставить(БазовыеФорматы.utd		, "UtdSeller");
	ТипыТитулов.Вставить(БазовыеФорматы.ucd		, "UcdSeller");
	ТипыТитулов.Вставить(БазовыеФорматы.ucd736	, "UcdSeller");
	
	Результат = ТипыТитулов[БазовыйФормат];
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипОтветногоТитула(БазовыйФормат)
	
	БазовыеФорматы = БазовыеФорматы();
	
	ТипыТитулов = Новый Соответствие;
	ТипыТитулов.Вставить(БазовыеФорматы.tovtorg	, "TovTorg551Buyer");
	ТипыТитулов.Вставить(БазовыеФорматы.utd820	, "Utd820Buyer");
	ТипыТитулов.Вставить(БазовыеФорматы.ucd736	, "Ucd736Buyer");
	ТипыТитулов.Вставить(БазовыеФорматы.rezru	, "AccCert552Buyer");
	ТипыТитулов.Вставить(БазовыеФорматы.torg2	, "Torg2AdditionalInfo");
	ТипыТитулов.Вставить(БазовыеФорматы.utd		, "UtdBuyer");
	ТипыТитулов.Вставить(БазовыеФорматы.ucd		, "UcdBuyer");
	
	Результат = ТипыТитулов[БазовыйФормат];
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьDocumentTitleType(БазовыйФормат, IsSeller)
	
	Если IsSeller Тогда
		Результат = ТипТитулаОтправителя(БазовыйФормат);
	Иначе
		Результат = ТипОтветногоТитула(БазовыйФормат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеКонтекстаДиадок(BoxID_или_Организация1С, ПолеКонтекста) Экспорт
	
	Результат = Неопределено;
	
	СтрокаКонтекста = СтрокаКонтекста(BoxID_или_Организация1С);
	
	Если СтрокаКонтекста <> Неопределено Тогда
		Результат = СтрокаКонтекста[ПолеКонтекста];
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Возвращает документ из сервиса Диадок
//
// Параметры:
//	BoxId		- Строка- идентификатор "ящика" организации в сервисе Диадок
//	DocumentId	- Строка- идентификатор документа в сервисе Диадок
//
// Возвращаемое значение:
//	ComОбъект - см. http://1c-docs.diadoc.ru/ru/latest/ComObjects/Document.html
//
&НаКлиенте
Функция ПолучитьДокументДиадок(BoxId, DocumentId) Экспорт
	
	Попытка
		
		// http://1c-docs.diadoc.ru/ru/latest/ComObjects/Document.html
		Результат = СтрокаКонтекста(BoxId).Box.GetDocumentById(DocumentId);
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		ШаблонКомментария = 
		"Не удалось получить сведения об электронном документе (boxId = %1; docId = %2) по причине:
		|%3";
		
		Комментарий = СтрШаблон(ШаблонКомментария
			, BoxId
			, DocumentId
			, ПодробноеПредставлениеОшибки(Ошибка));
		
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации()
			, УровеньЖурналаПредупреждение()
			, Комментарий);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает коллекцию идентификаторов документов в сервисе Диадок,
// которые являются родительскими для документа с переданным DocumentID
//
// Параметры:
//	BoxID		- Строка	- идентификатор "ящика" в сервисе Диадок
//	DocumentID	- Строка	- идентификатор документа в сервисе Диадок
//
// Возвращаемое значение:
//	Массив
&НаКлиенте
Функция InitialDocumentIds(BoxID, DocumentID) Экспорт
			
	Результат = Новый Массив;
	
	Document = ПолучитьДокументДиадок(BoxID, DocumentID);
	
	Collection = Document.InitialDocumentIds; 
	
	Для Индекс = 0 По Collection.Count - 1 Цикл
		Результат.Добавить(Collection.GetItem(Индекс));
	КонецЦикла;
				
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФайлТитулаПродавца(Document) Экспорт
	
	СтрокаBase64 = Document.GetBase64Content("Seller");
	Результат	 = Base64Значение(СтрокаBase64);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФайлТитулаПокупателя(Document) Экспорт
	
	Результат = Неопределено;
	
	СтрокаBase64 = Document.GetBase64Content("Buyer");
	
	Если ЗначениеЗаполнено(СтрокаBase64) Тогда
		Результат = Base64Значение(СтрокаBase64);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФайлПодписиПродавца(Document) Экспорт
	
	Результат = Неопределено;
	
	СтрокаBase64 = Document.GetBase64OriginalSignature("Seller");
	
	Если ЗначениеЗаполнено(СтрокаBase64) Тогда
		Результат = Base64Значение(СтрокаBase64);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоОшибкаАпиНеНастроеныПараметрыПодписания(ТекстОшибки) Экспорт
	
	ВариантыОшибок = Новый Массив;
	ВариантыОшибок.Добавить("SignerDetails not found");
	ВариантыОшибок.Добавить("Signer details not found");
	ВариантыОшибок.Добавить("Could not find signer details");
	
	Результат = Ложь;
	
	Для каждого ВариантОшибки Из ВариантыОшибок Цикл
		
		Если Найти(ТекстОшибки, ВариантОшибки) > 0 Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
		
// Возвращает значение настройки организации "ВыводитьНаименованиеТовараСКодами" из контекста
//
// Параметры:
//	BoxID_или_Организация1С - Строка - BoxID ящика;
//							- СправочникСсылка.Организации - организация 1С
// 
// Возвращаемое значение:
//  Булево
//
&НаКлиенте
Функция ТребуетсяВыводитьНаименованиеТовараСКодами(BoxID_или_Организация1С) Экспорт
	
	Возврат ДанныеКонтекстаДиадок(BoxID_или_Организация1С, "ВыводитьНаименованиеТовараСКодами");
	
КонецФункции

// Создает задание на выполнение ответного действия с документом
//
// Параметры:
//	Document	- ComОбъект - электронный документ
//	ReplyType 	- Строка 	- тип требуемого ответа
//
// Возвращаемое значение:
//	ComОбъект
&НаКлиенте
Функция ReplySendTask(Document, ReplyType) Экспорт
	
	Если Document.IsLockedPackage Тогда
		Результат = Document.GetDocumentPackage().CreateReplySendTask(ReplyType);
	Иначе
		Результат = Document.CreateReplySendTask2(ReplyType);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////
////			 ПОДПИСАТЬ И ОТПРАВИТЬ ДОКУМЕНТ, ПО КОТОРОМУ ЗАПРОШЕНА ПОДПИСЬ

&НаКлиенте
Функция ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, Document) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура("ВыполненоУспешно, ТекстОшибки", Истина, "");
				
	ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", Document.Type);
	
	Попытка
		МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", Document.Organization.Id, ЭтоФормализованныйДокумент);
	Исключение
		
		ВозвращаемаяСтруктура.ВыполненоУспешно 	= Ложь;
		ВозвращаемаяСтруктура.ТекстОшибки		= МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ОписаниеОшибки());
		
		Возврат ВозвращаемаяСтруктура;
		
	КонецПопытки;
				
	OutDocumentSignTask = Document.CreateOutDocumentSignTask();
	
	БазовыеФорматы = БазовыеФорматы();
	
	ФорматЭД = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", Document);
	БазовыйФормат = ФорматЭД.БазовыйФормат;
	
	Если БазовыйФормат = БазовыеФорматы.utd820 
		Или БазовыйФормат = БазовыеФорматы.utd
		Или БазовыйФормат = БазовыеФорматы.ucd736
		Или БазовыйФормат = БазовыеФорматы.ucd Тогда
	
		ExtendedSigner = OutDocumentSignTask.AddExtendedSigner();
		
		Если Document.Organization.AuthenticateType = "Certificate" Тогда
			
			ExtendedSigner.BoxId = Document.Organization.Id;
			ExtendedSigner.CertificateThumbprint = Document.Organization.Certificate.thumbprint;
			
		Иначе
			
			UserPermissions = Document.Organization.GetUserPermissions();
			
			Если НЕ UserPermissions.CanSignDocuments Тогда
				
				ExtendedSigner.SignerDetails.Surname	= "-";
				ExtendedSigner.SignerDetails.FirstName	= "-";
				ExtendedSigner.SignerDetails.SignerType	= "IndividualEntity";
				ExtendedSigner.SignerDetails.Status		= "InformationCreatorEmployee";
				ExtendedSigner.SignerDetails.Powers		= "PersonDocumentedOperation";
				ExtendedSigner.SignerDetails.Inn		= "999999999950";
				
			Иначе
				
				User = ПолучитьТекущегоПользователяДиадок();
				
				ExtendedSigner.SignerDetails.Surname	= User.LastName;
				ExtendedSigner.SignerDetails.FirstName	= User.FirstName;
				ExtendedSigner.SignerDetails.Patronymic	= User.MiddleName ;
				ExtendedSigner.SignerDetails.SignerType	= "LegalEntity";
				ExtendedSigner.SignerDetails.Status		= "SellerEmployee";
				ExtendedSigner.SignerDetails.JobTitle	= UserPermissions.JobTitle;
				ExtendedSigner.SignerDetails.Powers		= "ResponsibleForOperationAndSignerForInvoice";
				ExtendedSigner.SignerDetails.Inn		= Document.Organization.Inn;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		OutDocumentSignTask.Signer.Surname		= СтруктураSigner.Фамилия;
		OutDocumentSignTask.Signer.FirstName	= СтруктураSigner.Имя;
		OutDocumentSignTask.Signer.Patronymic	= СтруктураSigner.Отчество;
		OutDocumentSignTask.Signer.JobTitle		= СтруктураSigner.ДолжностьПодписанта;
		OutDocumentSignTask.Signer.Inn			= Document.Organization.Inn;
		
	КонецЕсли;
	
	Попытка
		OutDocumentSignTask.Send();
	Исключение
		
		ВозвращаемаяСтруктура.ВыполненоУспешно	= Ложь;
		ВозвращаемаяСтруктура.ТекстОшибки		= МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции
