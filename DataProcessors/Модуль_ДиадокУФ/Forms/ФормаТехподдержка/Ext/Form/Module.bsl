
#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Параметры.Свойство("Организация", Организация);
	
	СловарьWL = МетодСервера(,"ПолучитьСловарь");
	НаименованиеСервиса = СловарьWL.КраткоеНаименованиеСистемы;
	ЭтоСервисДиадок = ВРег(НаименованиеСервиса) = ВРег("Диадок");
	ТелефонТП = СловарьWL.ТелефонТехподдержки;
	
	Если СтрДлина(ТелефонТП) < 20 Тогда
		ТелефонТП = "Телефон техподдержки: " + ТелефонТП;
	КонецЕсли;
	
	Заголовок = СтрШаблон("%1: Техническая поддержка", НаименованиеСервиса);
	
	Элементы.ГруппаТелефоны.Видимость = ЭтоСервисДиадок;
	Элементы.НадписьТелефонТехподдержки.Заголовок = ТелефонТП;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПлатформаПриОткрытии(Отказ);
	
	УстановитьВидимостьКнопкиСкачатьПМ();
	
	Метрики_ДобавитьСтатистику_ОткрытиеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредупрежденияОбУспешномКопированииТехническойИнформации()
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Техническая информация скопирована.'; en = 'Техническая информация скопирована.'"));
	Подстроки.Добавить(НСтр("ru = 'Вставьте ее в письмо или чат с помощью клавиш'; en = 'Вставьте ее в письмо или чат с помощью клавиш'"));
	Подстроки.Добавить(НСтр("ru = 'Ctrl + V для отправки в Техподдержку.'; en = 'Ctrl + V для отправки в Техподдержку.'"));
	
	Результат = СтрСоединить(Подстроки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредупрежденияОбОшибкеКопированияТехническойИнформации()
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Не удалось скопировать техническую информацию!'; en = 'Не удалось скопировать техническую информацию!'"));
	Подстроки.Добавить(НСтр("ru = 'Скопируйте информацию вручную:'; en = 'Скопируйте информацию вручную:'"));
	Подстроки.Добавить(НСтр("ru = '1. Щёлкните мышкой по окну с тех. информацией.'; en = '1. Щёлкните мышкой по окну с тех. информацией.'"));
	Подстроки.Добавить(НСтр("ru = '2. Нажмите Ctrl+A.'; en = '2. Нажмите Ctrl+A.'"));
	Подстроки.Добавить(НСтр("ru = '3. Нажмите Ctrl+C.'; en = '3. Нажмите Ctrl+C.'"));
	Подстроки.Добавить(НСтр("ru = '4. Отправьте информацию в техподдержку.'; en = '4. Отправьте информацию в техподдержку.'"));
	
	Результат = СтрСоединить(Подстроки, Символы.ПС);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьТехИнформацию(Команда)
	
	ТехИнфо = МетодКлиента("Модуль_Клиент", "ПредставлениеТехническойИнформации");
	
	Успех = ПоместитьТекстВБуферОбмена(ТехИнфо);
	
	Если Успех Тогда
		ТекстПредупреждения = ТекстПредупрежденияОбУспешномКопированииТехническойИнформации();
	Иначе
		ТекстПредупреждения = ТекстПредупрежденияОбОшибкеКопированияТехническойИнформации();
	КонецЕсли;
	
	ПоказатьПростоеПредупреждение(ТекстПредупреждения);
	
	Действие = "Скопировать тех информацию";
	
	Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистику(Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьПодключаемыйМодуль(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СкачатьПодключаемыйМодульЗавершение", ЭтаФорма);
	
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохранения.Заголовок = "Укажите куда сохранить файл с Подключаемым модулем";
	ДиалогСохранения.МножественныйВыбор= Ложь;
	ДиалогСохранения.Фильтр = "Внешняя обработка (*.epf)|*.epf";
	
	КаталогСохранения = КаталогСохраненияПодключаемогоМодуля();
	Если Не КаталогСохранения = Неопределено Тогда
		ДиалогСохранения.Каталог = КаталогСохранения;
	КонецЕсли;
	
	ДиалогСохранения.ПолноеИмяФайла = ДиалогСохранения.Каталог + "Подключаемый модуль.epf";
	ДиалогСохранения.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьПодключаемыйМодульЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыбранныеФайлы[0];
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ЗапомнитьКаталогСохраненияПодключаемогоМодуля(Файл.Путь);
	
	ТекстПредупреждения = НСтр("ru = 'Подключаемый модуль сохранен'");
	
	Действие = "Скачать ПМ";
	
	Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
	Метрики_ДобавитьСтатистику(Действие);
	
	Попытка
		МетодКлиента("Модуль_Клиент", "СохранитьПодключаемыйМодуль", ПолноеИмяФайла);
	Исключение
		ТекстПредупреждения = НСтр("ru = 'Не удалось сохранить подключаемый модуль'");
		ПричинаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Метрики_ДобавитьЛог(Действие, ПричинаОшибки);
	КонецПопытки;
	
	ПоказатьПростоеПредупреждение(ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОнлайнКонсультантНажатие(Элемент)
	
	ОбработатьНажатие_ОткрытьОнлайнЧат();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОнлайнКонсультантНажатие(Элемент)
	
	ОбработатьНажатие_ОткрытьОнлайнЧат();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНаписатьПисьмоНажатие(Элемент)
	
	ОбработатьНажатие_ОтправитьEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаEmailНажатие(Элемент)
	
	ОбработатьНажатие_ОтправитьEmail();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУдаленноеПодключениеVNCНажатие(Элемент)
	
	ОбработатьНажатие_УдаленноеПодключениеVNC();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаУдаленноеПодключениеVNCНажатие(Элемент)
	
	ОбработатьНажатие_УдаленноеПодключениеVNC();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПровестиДиагностикуНажатие(Элемент)
	
	ОбработатьНажатие_ПровестиДиагностику();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПровестиДиагностикуНажатие(Элемент)
	
	ОбработатьНажатие_ПровестиДиагностику();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРуководствоПользователяНажатие(Элемент)
	
	ОбработатьНажатие_РуководствоПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаРуководствоПользователяНажатие(Элемент)
	
	ОбработатьНажатие_РуководствоПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаказатьОбратныйЗвонокНажатие(Элемент)
	
	ОбработатьНажатие_ЗаказатьОбратныйЗвонок();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТехническаяИнформацияНажатие(Элемент)
	
	ОбработатьНажатие_ТехническаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаТехническаяИнформацияНажатие(Элемент)
	
	ОбработатьНажатие_ТехническаяИнформация();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Помещает текст в буфер обмена
//
// Параметры:
//  Текст - Строка - запоминаемый текст
// 
// Возвращаемое значение:
//  Булево - Истина, если текст успешно скопирован в буфер.
//
&НаКлиенте
Функция ПоместитьТекстВБуферОбмена(Текст)
	
	htmlfile = Новый COMОбъект("htmlfile");
	Результат = htmlfile.ParentWindow.ClipboardData.Setdata("Text", Текст);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазмещениеПМ_НаДиске()
	Возврат "На диске";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазмещениеПМ_ВСправочнике()
	Возврат "В справочнике";
КонецФункции

&НаКлиенте
Функция МожноСкачатьПМ()
	
	Результат = Ложь;
	
	ТехИнфо = МетодКлиента("Модуль_Клиент", "ТехническаяИнформация");
	РазмещениеПМ = ТехИнфо.ИнформацияПМ.Размещение;
	
	Если РазмещениеПМ = РазмещениеПМ_НаДиске()
		Или РазмещениеПМ = РазмещениеПМ_ВСправочнике() Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СинонимТекущейФормы()
	
	Возврат "Форма техподдержки";
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКнопкиСкачатьПМ()
	
	Элементы.ФормаСкачатьПодключаемыйМодуль.Видимость = МожноСкачатьПМ();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек_КаталогСохраненияПодключаемогоМодуля()
	
	Возврат "КаталогСохраненияПодключаемогоМодуля";
	
КонецФункции

&НаКлиенте
Функция КлючОбъектаСохраненияНастроек()
	
	Результат = Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция КаталогСохраненияПодключаемогоМодуля()
	
	КлючНастроек = КлючНастроек_КаталогСохраненияПодключаемогоМодуля();
	КлючОбъекта = КлючОбъектаСохраненияНастроек();
	Результат = НастройкиПользователяЗагрузить(КлючОбъекта, КлючНастроек);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапомнитьКаталогСохраненияПодключаемогоМодуля(Путь)
	
	КлючОбъекта = КлючОбъектаСохраненияНастроек();
	КлючНастроек = КлючНастроек_КаталогСохраненияПодключаемогоМодуля();
	НастройкиПользователяСохранить(КлючОбъекта, КлючНастроек, Путь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПользователяЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
					, КлючНастроек
					, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НастройкиПользователяСохранить(КлючОбъекта, КлючНастроек, Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта
		, КлючНастроек
		, Настройки);
	
КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_ПровестиДиагностику()
		
		МетодКлиента("Модуль_Клиент", "ПровестиКонтурДиагностику");
		
		Действие = "Провести диагностику";
		
		Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
		Метрики_ДобавитьСтатистику(Действие);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_УдаленноеПодключениеVNC()
		
		МетодКлиента("Модуль_Клиент", "ЗапуститьУдаленноеПодключениеVNC");
		
		Действие = "Удаленное подключение VNC";
		
		Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
		Метрики_ДобавитьСтатистику(Действие);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_ОтправитьEmail() Экспорт
		
		ОбработкаВыбораОрганизации = Новый ОписаниеОповещения("ОтправитьEmailПродолжение", ЭтотОбъект);
		
		ВыбратьОрганизациюДляОбращения(ОбработкаВыбораОрганизации);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОтправитьEmailПродолжение(ВыбранныйЭлемент = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
		
		Если ВыбранныйЭлемент = Неопределено Тогда 
			
			// вызов из формы экстренного уведомления - авторизация не пройдена
			Организация = Неопределено;
			
		Иначе
			
			Организация = ВыбранныйЭлемент.Значение;
			
		КонецЕсли;
		
		МетодКлиента("Модуль_Клиент", "НаписатьПисьмоВТехПоддержку", Организация);
		
		Действие = "Написать в техподдержку";
		
		Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
		Метрики_ДобавитьСтатистику(Действие);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_ОткрытьОнлайнЧат() Экспорт
		
		ОбработкаВыбораОрганизации = Новый ОписаниеОповещения("ОткрытьОнлайнЧатПродолжение", ЭтотОбъект);
		ВыбратьОрганизациюДляОбращения(ОбработкаВыбораОрганизации);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОткрытьОнлайнЧатПродолжение(ВыбранныйЭлемент = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
		
		Если ВыбранныйЭлемент = Неопределено Тогда 
			
			// вызов из формы экстренного уведомления - авторизация не пройдена
			Организация = Неопределено;
			
		Иначе
			
			Организация = ВыбранныйЭлемент.Значение;
			
		КонецЕсли;
		
		МетодКлиента("Модуль_Клиент", "ОткрытьОнлайнЧат", Организация);
		
		Действие = "Онлайн-консультант";
		
		Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
		Метрики_ДобавитьСтатистику(Действие);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_РуководствоПользователя()
		
		МетодКлиента("Модуль_Клиент", "ОткрытьРуководствоПользователя");
		
		Действие = "Руководство пользователя";
		
		Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
		Метрики_ДобавитьСтатистику(Действие);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьНажатие_ЗаказатьОбратныйЗвонок()
		
		МетодКлиента("Модуль_Клиент", "ЗаказатьОбратныйЗвонок");
		
		Действие = "Заказать обратный звонок";
		
		Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
		Метрики_ДобавитьСтатистику(Действие);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьНажатие_ТехническаяИнформация()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьИнформациюДляТехническойПоддержки", ЭтаФорма);
		
		Действие = "Техническая информация";
		
		Метрики_ДобавитьПоведение_НажатиеКнопки(Действие);
		Метрики_ДобавитьСтатистику(Действие);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыбратьОрганизациюДляОбращения(ОписаниеОповещения)
		
		ДоступныеОрганизации 		= МетодКлиента("Модуль_Клиент", "ПолучитьОрганизацииНезаблокированныеПоAPI");
		ЗаголовокВыбораОрганизации 	= НСтр("ru = 'Выберите организацию, от которой идет обращение'");
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации);
		СписокВыбора.СортироватьПоПредставлению();
		
		Если СписокВыбора.Количество() = 0 Тогда 
			
			ТекстСообщения = НСтр("ru = 'Список организаций пуст!'");
			ПоказатьПростоеПредупреждение(ТекстСообщения, 60);
			
		ИначеЕсли СписокВыбора.Количество() = 1 Тогда 
			
			ВыбранныйЭлемент = СписокВыбора[0];
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВыбранныйЭлемент);
			
		Иначе 
			
			НачальныйЭлемент = СписокВыбора.НайтиПоЗначению(Организация);
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, ЗаголовокВыбораОрганизации, НачальныйЭлемент);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПоказатьПростоеПредупреждение(ТекстПредупреждения, Таймаут = 120)
		
		МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", ТекстПредупреждения, Таймаут);
		
	КонецПроцедуры
	
#КонецОбласти

#Область Метрики

&НаКлиенте
Процедура Метрики_ДобавитьСтатистику_ОткрытиеФормы()
	
	Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
	Категория = Категории.Техподдержка;
	
	Действие = "Открытие формы";
	
	Метка = СинонимТекущейФормы();
	
	МетодКлиента("Модуль_Клиент", "Метрика_ЗаписатьСтатистику", Категория, Действие, Метка);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ДобавитьПоведение_НажатиеКнопки(Действие)
	
	НазваниеФормы = СинонимТекущейФормы();
	
	Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
	Категория = Категории.Техподдержка;
	
	МетодКлиента("Модуль_Клиент", "Метрика_ДобавитьПоведение_НажатиеКнопки", НазваниеФормы, Категория, Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ДобавитьСтатистику(Действие)
	
	Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
	Категория = Категории.Техподдержка;
	
	Переменные = Неопределено;
	Если Организация <> Неопределено Тогда
		
		BoxId = МетодСервераБезКонтекста(,"Организация_2_BoxID", Организация);
		
		Переменные = Новый Соответствие;
		Переменные.Вставить("BoxID", BoxId);
		
	КонецЕсли;
	
	МетодКлиента("Модуль_Клиент", "Метрика_ЗаписатьСтатистику", Категория, Действие,, Переменные);
	
КонецПроцедуры

&НаКлиенте
Процедура Метрики_ДобавитьЛог(Действие, Причина)
	
	Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
	Категория = Категории.Техподдержка;
	
	Переменные = Новый Соответствие;
	Переменные.Вставить("Причина", Причина);
	
	Если Организация <> Неопределено Тогда
		BoxId = МетодСервераБезКонтекста(,"Организация_2_BoxID", Организация);
		Переменные.Вставить("BoxID", BoxId);
	КонецЕсли;
	
	МетодКлиента("Модуль_Клиент", "Метрика_ЗаписатьЛог", Категория, Действие,, Переменные);
	
КонецПроцедуры

#КонецОбласти