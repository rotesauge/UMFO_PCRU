#Если ВебКлиент Тогда

ВызватьИсключение НСтр("ru = 'Недопустимый режим работы (Веб-клиент).'");

#Иначе

#Область ПЕРЕМЕННЫЕ_МОДУЛЯ

&НаКлиенте
Перем МассивСтруктурКонтент;
&НаКлиенте
Перем МаксимальноеКоличествоЗаданий;
&НаКлиенте
Перем КэшПротоКонтента;
&НаКлиенте
Перем КэшМетрики_Клиент;
&НаКлиенте
Перем КэшИнтернетСоединений;
&НаКлиенте
Перем КэшНастроекПодключения;

#КонецОбласти

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	Результат = Новый Структура;
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "СтрокаКоличествоДокументов");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СформироватьПредставлениеКнопкиСоздатьДокументВ1С");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеПродавца");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеПокупателя");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеПодразделения");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеЭД", "ЭДОбъект");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьСтруктуруПредставленияЭД");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеНомераЭД");
	Платформа.ДобавитьФункциюВМанифест(Результат, "РасшифровкаСтатуса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеСтатуса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеСтатусаРоуминг");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеСуммы");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеСуммыНДС");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеПериодаДД");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеТипаРезолюции");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СформироватьHTMLПредставлениеОшибок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СформироватьHTMLПредставлениеРезолюций");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СформироватьТекстОшибкиДиадок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоИнформацияОбОшибкахВалидации");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеAuthor");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеTargetUser");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеСтатусаСогласования");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьФИОСИнициалами");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НайтиСтрокиВМассивеСтруктур");
	Платформа.ДобавитьФункциюВМанифест(Результат, "BoxID_2_Организация_Форма");
	Платформа.ДобавитьФункциюВМанифест(Результат, "CounteragentBoxID_2_Контрагент_Форма");
	Платформа.ДобавитьФункциюВМанифест(Результат, "GetCounteragentListByStatus", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьОсновнуюФормуОбъекта");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьОписаниеФормы");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВернутьМассивВыбранныхФайлов");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьИмяФормыДокумента");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьDocumentID_2_Документ");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоФормализованныйДокумент");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоСчетФактура");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоСчетНаОплату");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоФормализованныйТОРГ12");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоФормализованныйАктОВыполненииРабот");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НайтиОрганизациюВИерархииОрганизацийDiadoc", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТекстИнформацииОНовомФормате", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СписокОбработокДереваКонфигурации", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДатаГоризонта", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойства", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПроверитьФорматДатыПрото");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьСписокФильтровДляДокументовДиадок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьФилиаловDepartmentId");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьDepartmentByKpp");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВернутьМассивDepartmentId");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьСтруктуруЗадачи");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьМассивАсинхронныхЗадач");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВернутьВыборкуРНКИСчетовФактурДиадок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьЗначениеКонтентаКэш");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьЯщикДиадокДляОрганизации");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьОрганизацииНезаблокированныеПоAPI");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоОшибкаОтсутствиеРегистрацииФНС", ,"НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ИспользуетсяСертификатПоГОСТ2001");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НайтиСтрокиКонтекстДиадокаПоОтбору");
	Платформа.ДобавитьФункциюВМанифест(Результат, "РазвернутьGUID");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьURLНаДокументДиадока");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьПутьКWEBСерверу");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОтправитьНаОбработку");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьКраткоеИмяФайла");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОтправитьПринятьПриглашениеКонтрагенту");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НайтиПодходящийСчетФактуруИзРНК");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьПодходящуюСФ");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьМассивТиповДокументов");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВариантыИспользованияПроксиСервера");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СравнитьВерсии");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НеобходимоОграничениеНаОтправку", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТипДокументаУПД");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТипДокументаУКД");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТипДокументаИУПД");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОбластьПолномочийУПД_ОтветственныйЗаПодписаниеСЧФ");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОбластьПолномочийУПД_ЛицоСовершившееСделку");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОбластьПолномочийУПД_ОтветственныйЗаОформление");
	Платформа.ДобавитьФункциюВМанифест(Результат, "УдалитьЛишниеНулиИНН");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СтруктураФИО");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЗаменитьНедопустимыеСимволыИмениФайла");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОформитьОшибкиВHTML");
	Платформа.ДобавитьФункциюВМанифест(Результат, "HTMLТекстОшибкиОтправки");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТолькоЦифрыВСтроке");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НовыйОбъектКомпонентыДиадока");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПодключитьКомпонентуДиадока");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоТестоваяОрганизация");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПроверитьИнтернетПодключение");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НаправленияДокументов");
	Платформа.ДобавитьФункциюВМанифест(Результат, "УСотрудникаЕстьДоступВПодразделение");
			
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Torg12SellerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Torg12BuyerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_AcceptanceCertificateSellerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_AcceptanceCertificateBuyerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceCorrectionContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_UtdSellerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_UtdBuyerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Utd820BuyerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_UcdSellerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_UcdBuyerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_TovTorgSellerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_TovTorgBuyerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Act552SellerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Act552BuyerContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Torg2RecipientTitle");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_OrganizationInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ExtendedOrganizationInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Shipper");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ShipperOrConsigneeInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_AddressInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_AdditionalInfoId");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_StructedAdditionalInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceForCorrectionInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceRevisionInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_OriginalInvoice");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_PaymentDocument");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InfoFundsLiab");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Torg12Item");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_AcceptanceCertificateItem");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceItem");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceCorrectionItem");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceTable");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ExtendedInvoiceItem");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceCorrectionTable");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ExtendedInvoiceCorrectionItem");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_TovTorgTable");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_TovTorgItem");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Act552WorkDescription");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Act552WorkItem");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_CustomDeclaration");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceItemFields");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_TransferInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_TovTorgTransferInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Act552TransferInfo");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_TransferBase");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Waybill");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_EventContent");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_CorrectionBase");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_GroundInfo");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Organization");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Signer");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ExtendedSigner");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ExtendedSignerDetails");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_SignerTorg2");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Signature");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_PersonalCertificate");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ExtendedSignerDetailsToPost");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Official");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Employee");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_OtherIssuer");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Attorney");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Torg12Commons");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Torg12Totals");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_InvoiceTotals");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_AmountsDiff");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_NonformalizedDocumentToSend");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_ServiceDetails");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_NonformalizedProforma");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_PriceList");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_AcceptanceCertificate");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Torg12");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Новый_Contract");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВыделитьСлово");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭДО_БиблиотекаКартинок", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЗаполненныйДиалогВыбораФайла");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДокументНеСогласованРанее");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДокументПроведен");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьСвязанныйInvoice");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЕстьСвойствоCOMОбъекта");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ФункцияДокументаДляСбораКонтента");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЗапросНаПолучениеФайла");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьProto");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПротоКонтентДокумента");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьСтруктуруСодержанияДокумента");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОрганизацияПоУмолчанию");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДействиеПриОбновленииМодуляФайловыйВариант");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "Компонента_HttpTransport");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Преобразование_МассивВСтроку");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Преобразование_СтрокуВМассивСлов");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СвойствоСтруктуры");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПараметрыОповещенияВСтрокуHTMLСообщения");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПараметрыОповещенияИзСтрокиHTMLСообщения");
	Платформа.ДобавитьФункциюВМанифест(Результат, "МассивСтруктур_Найти");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТехническаяИнформация");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеТехническойИнформации");
	Платформа.ДобавитьФункциюВМанифест(Результат, "АдресаИнтернетРесурсов", , "НаВремяСеанса");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "БазовыеФорматы", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТипыКонтента", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОписаниеФорматаЭлектронногоДокумента", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДокументВУстаревшемФормате");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ИспользоватьФормуВводаНакладной");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "НовоеОписаниеДокументаПакета");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ФорматЭлектронногоДокумента");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭлектронныйДокумент");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеТипаЭлектронногоДокумента");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоФормализованныйФормат");
	
	// {Метрики
	Платформа.ДобавитьФункциюВМанифест(Результат, "ТопикиМетрики", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ИспользоватьМетрики");
	Платформа.ДобавитьФункциюВМанифест(Результат, "МаксимальныйРазмерСтека");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОписаниеПриложения", , "НаВремяСеанса");
	Платформа.ДобавитьФункциюВМанифест(Результат, "Метрика_Категории", , "НаВремяСеанса");
	// }Метрики
	
	// {Настройка формата отправки документов
	Платформа.ДобавитьФункциюВМанифест(Результат, "НастройкаФорматаОтправкиДокументов");
	Платформа.ДобавитьФункциюВМанифест(Результат, "НастройкаФорматаОтправкиДокументовПоУмолчанию");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВариантОтправкиСчетовФактурПоКлючуНастройки");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеВариантаОтправкиСчетовФактур");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВариантОтправкиНакладныхПоКлючуНастройки");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВариантОтправкиНакладныхПоУмолчанию");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПредставлениеВариантаОтправкиНакладных");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СписокВыбораВариантовОтправкиСчетовФактур");
	Платформа.ДобавитьФункциюВМанифест(Результат, "СписокВыбораВариантовОтправкиНакладных");
	// }Настройка формата отправки документов
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "СценарииГрупповойОбработки");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "СопоставленныеОрганизации");
	
	// {Признак
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоАктСверкиИзСервисаВзаиморасчеты");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЭтоВходящийЭлектронныйДокумент");
	// }Признак
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ФункциональностьОграничена", , "НаВремяСеанса");
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ФормироватьОтветныйТитул");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПараметрыФормыПодписанияДокумента");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьBoxGuidПоId");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Описывает возможные значения базовых версий форматов контента.
// 
// Возвращаемое значение:
//  Структура - см. тело функции.
//
&НаКлиенте
Функция БазовыеФорматы() Экспорт
	
	Результат = МетодСервера(, "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция БазовыеФорматыНаСервере()
	
	Результат = МетодСервера(, "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

// Описывает возможные значения типов протоконтента.
// 
// Возвращаемое значение:
//  Структура - см. тело функции.
//
&НаКлиенте
Функция ТипыКонтента() Экспорт
	
	Результат = МетодСервера(, "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

// Инициализирует структуру с описанием электронного документа,
// которая используется для передачи в форму документа
// 
// Возвращаемое значение:
//  Структура - см. тело функции.
//
&НаКлиенте
Функция НовоеОписаниеДокументаПакета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("CounteragentBoxID");
	Результат.Вставить("НомерДокумента");
	Результат.Вставить("ДатаДокумента");
	Результат.Вставить("РасширениеФайлаДиадок");
	Результат.Вставить("DocumentType");
	Результат.Вставить("DocumentFunction");
	Результат.Вставить("Документ1С");
	Результат.Вставить("ТипДокумента");
	Результат.Вставить("ДопСведения", "");
	Результат.Вставить("DocumentID");
	Результат.Вставить("Проведен", Истина);
	Результат.Вставить("IdСтроки");
	Результат.Вставить("ЭтоТекущиеДанные", Истина);
	Результат.Вставить("НомерЗаказа", "");
	Результат.Вставить("ОшибкаВалидации", "");
	Результат.Вставить("ЭтоФайл", Ложь);
	Результат.Вставить("ФункцияУПД");
	Результат.Вставить("ТипКонтента");
	Результат.Вставить("Вкл", Истина);
	Результат.Вставить("isTest", Ложь);
	Результат.Вставить("DepartmentID");
	Результат.Вставить("ВнешняяПечатнаяФорма");
	Результат.Вставить("СвойстваФайла");
	Результат.Вставить("ДанныеФайла");
	Результат.Вставить("ФорматОтправки");
	
	Возврат Результат;
	
КонецФункции

// Контракт на структуру, описывающую формат электронного документа.
// ВНИМАНИЕ! Результат функции должен полностью соответствовать методу
// Модуль_ИнтеграцияУниверсальный.ОписаниеФорматаЭлектронногоДокумента()
//
// Возвращаемое значение:
//  Структура - см. тело функции.
//
&НаКлиенте
Функция ОписаниеФорматаЭлектронногоДокумента(ИмяТипа, ФункцияДокумента, ВерсияФормата) Экспорт
	
	Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ОписаниеФорматаЭлектронногоДокумента"
					, ИмяТипа
					, ФункцияДокумента
					, ВерсияФормата);
	
	Возврат Результат;
	
КонецФункции

// Получает описание формата из объекта Document.
//
// Параметры:
//  ЭДОбъект - COMОбъект - Объект, производный от Document;
//
// Возвращаемое значение:
//  Структура - см. функцию ОписаниеФорматаЭлектронногоДокумента.
//
&НаКлиенте
Функция ФорматЭлектронногоДокумента(ЭДОбъект) Экспорт
	
	// Вызов через МетодКлиента для использования клиентского кэша
	Результат = МетодКлиента("Модуль_Клиент", "ОписаниеФорматаЭлектронногоДокумента"
					, ЭДОбъект.TypeNamedId
					, ЭДОбъект.DocumentFunction
					, ЭДОбъект.Version);
	
	Возврат Результат;
	
КонецФункции

// Возвращает представление типа электронных документов
// Для неформализованного документа возвращается имя файла
// Дополняет имя признаками тестовый и зашифрован
//
// Параметры:
//  Document - ComОбъект - объект электронного документа;
//  ФорматЭД - Структура - (Необязательный) см. ОписаниеФорматаЭлектронногоДокумента;
// 
// Возвращаемое значение:
//  Строка - представление типа
//
&НаКлиенте
Функция ПредставлениеТипаЭлектронногоДокумента(Document, ФорматЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ФорматЭД) Тогда
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
	КонецЕсли;
	
	Если ФорматЭД.ИмяТипа = "Nonformalized" Тогда
		Результат = Document.FileName;
	Иначе
		Результат = ФорматЭД.Представление;
	КонецЕсли;
	
	Результат = Результат + ДополнениеКПредставлениюЭД(Document);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, является ли формат документа формализованным.
//
// Параметры:
//  ФорматЭД - Структура - см. ОписаниеФорматаЭлектронногоДокумента;
// 
// Возвращаемое значение:
//  Булево - Истина, если это формат для отправки формализованных документов.
//
&НаКлиенте
Функция ЭтоФормализованныйФормат(ФорматЭД) Экспорт
	
	БазовыеФорматы = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	ФормализованныеФорматы = Новый Массив;
	ФормализованныеФорматы.Добавить(БазовыеФорматы.utd820);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.utd);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.ucd736);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.ucd);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.tovtorg);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.rezru);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.invoice);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.invoicecor);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.torg12);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.act);
	ФормализованныеФорматы.Добавить(БазовыеФорматы.torg2);
	
	Результат = Ложь;
	Если ФормализованныеФорматы.Найти(ФорматЭД.БазовыйФормат) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует и заполняет описание электронного документа.
//
// Параметры:
//  ЭДОбъект - COMОбъект - Объект, производный от Document;
// 
// Возвращаемое значение:
//  Структура - см. НовыйЭлектронныйДокумент;
//
&НаКлиенте
Функция ЭлектронныйДокумент(ЭДОбъект) Экспорт
	
	Результат = НовыйЭлектронныйДокумент();
	Результат.Статус = СтатусЭлектронногоДокумента(ЭДОбъект);
	Результат.Формат = ФорматЭлектронногоДокумента(ЭДОбъект);
	Результат.Идентификатор = ИдентификаторЭлектронногоДокумента(ЭДОбъект);
	Результат.КонтрагентСервиса = РеквизитыОрганизацииСервиса(ЭДОбъект.Counteragent);
	Результат.ОрганизацияСервиса = РеквизитыОрганизацииСервиса(ЭДОбъект.Organization);
	Результат.ПодразделениеОрганизацииСервиса = РеквизитыПодразделенияСервиса(ЭДОбъект.Department);
	Результат.ВидДокументооборота = ЭДОбъект.WorkflowId;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Проверяет, актуален ли формат отправки документа.
//
// Параметры:
//  ФорматОтправки	 - Структура - формат документа (см. ОписаниеФорматаЭлектронногоДокумента)
//  ДатаОтправки	 - Дата - (Необязательный) Дата отправки документа. Если не задана, проверка
//                            выполняется на текущую дату.
// 
// Возвращаемое значение:
//  Булево - Истина, если формат электронного документа устарел.
//
&НаКлиенте
Функция ДокументВУстаревшемФормате(ФорматОтправки, Знач ДатаОтправки = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ДатаОтправки) Тогда
		ДатаОтправки = ТекущаяДата();
	КонецЕсли;
	
	ДатаОкончанияДействияФормата = ФорматОтправки.ПриказОбУтверждении.ДатаОкончанияДействия;
	Если ДатаОтправки > ДатаОкончанияДействияФормата Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИспользоватьФормуВводаНакладной(ФорматОтправки) Экспорт
	
	Результат = Ложь;
	
	ОпцияВключена = Объект.ПараметрыКлиентСервер.ИспользоватьФормуВводаНакладной;
	
	Если ОпцияВключена Тогда
		
		БазовыеФорматы = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
		
		ДопустимыеФорматы = Новый Массив;
		ДопустимыеФорматы.Добавить(БазовыеФорматы.utd);
		ДопустимыеФорматы.Добавить(БазовыеФорматы.invoice);
		ДопустимыеФорматы.Добавить(БазовыеФорматы.torg12);
		ДопустимыеФорматы.Добавить(БазовыеФорматы.act);
		ДопустимыеФорматы.Добавить(БазовыеФорматы.tovtorg);
		ДопустимыеФорматы.Добавить(БазовыеФорматы.rezru);
		
		Результат = (ДопустимыеФорматы.Найти(ФорматОтправки.БазовыйФормат) <> Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтразитьДокументВУчете(ФормаВладелец, ЭДОбъект) Экспорт 
	
	ПротоКонтент = МетодКлиента("Модуль_Клиент", "ПолучитьProto", ЭДОбъект, Ложь);
	
	Отказ = Ложь;
	
	ПроверитьКонтентПередОтражениемВУчете(ПротоКонтент, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокумент = ЭлектронныйДокумент(ЭДОбъект);
	ОсновнойМодуль_ПередОтражениемДокументаВУчете(ЭлектронныйДокумент);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент"		, ЭлектронныйДокумент.КонтрагентСервиса.Ссылка);
	ПараметрыФормы.Вставить("Организация"		, ЭлектронныйДокумент.ОрганизацияСервиса.Ссылка);
	ПараметрыФормы.Вставить("ПротоКонтент"		, ПротоКонтент.Контент);
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаОтраженияДокументаВУчете"
		, ПараметрыФормы
		, ФормаВладелец
		, "СоздатьДокументУчетаЗавершение");
	
КонецПроцедуры

// Открывает служебную форму с информационным сообщением об устаревшем формате электронного документа.
//
// Параметры:
//  ВладелецФормыСообщения - УправляемаяФорма - форма, из которой открывается предупреждение
//  ИмяОбработчика - Строка - имя экспортной процедуры-обаботчика оповещения о закрытии формы предупреждения
//
&НаКлиенте
Процедура ПоказатьПредупреждениеОбУстаревшемФормате(ВладелецФормыСообщения, ИмяОбработчика) Экспорт
	
	ДобавитьИнструкцию = Истина;
	ТекстСообщения = ТекстПредпрежденияОбУстаревшемФормате(ДобавитьИнструкцию);
	ЗаголовокСообщения = ЗаголовокПредпрежденияОбУстаревшемФормате();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокСообщения);
	ПараметрыФормы.Вставить("HTMLДокумент", ТекстСообщения);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально"
		, "ФормаВыводаHTMLДокумента"
		, ПараметрыФормы
		, ВладелецФормыСообщения
		, ИмяОбработчика);
	
КонецПроцедуры

// Открывает служебную форму с информационным сообщением об использовании устаревших настроек отправки.
//
// Параметры:
//  ВладелецФормыСообщения - УправляемаяФорма - форма, из которой открывается предупреждение
//  ИмяОбработчика - Строка - имя экспортной процедуры-обаботчика оповещения о закрытии формы предупреждения
//  ДобавитьИнструкцию - Булево - Истина, если в текст сообщения нужно включить ссылку на инструкцию по настройкам отправки
//
&НаКлиенте
Процедура ПоказатьПредупреждениеОбУстаревшихНастройкахОтправки(ВладелецФормыСообщения, ИмяОбработчика = Неопределено, ДобавитьИнструкцию = Истина) Экспорт
	
	ТекстСообщения = ТекстПредпрежденияОбУстаревшемФормате(ДобавитьИнструкцию);
	ЗаголовокСообщения = ЗаголовокПредпрежденияОбУстаревшемФормате();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокСообщения);
	ПараметрыФормы.Вставить("HTMLДокумент", ТекстСообщения);
	ПараметрыФормы.Вставить("ПоказатьКоманду_ОбновитьНастройки", Истина);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально"
		, "ФормаВыводаHTMLДокумента"
		, ПараметрыФормы
		, ВладелецФормыСообщения
		, ИмяОбработчика);
	
КонецПроцедуры

// Получает список организаций информационной базы, сопоставленных с организациями сервиса.
//
// Параметры:
//  ТолькоАктивные - Булево - Истина, если учитывать только активные (незаблокирвоанные) организации.
// 
// Возвращаемое значение:
//  Массив - список организаций, связанных с ящиками в сервисе.
//
&НаКлиенте
Функция СопоставленныеОрганизации(ТолькоАктивные = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	КонтекстДиадока = Платформа.ПараметрыКлиент.КонтекстДиадока;
	
	Для Каждого СтрокаКонтекста Из КонтекстДиадока Цикл
		
		Если ТолькоАктивные И СтрокаКонтекста.ЗаблокированаПоAPI Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(СтрокаКонтекста.Организация);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, требуется ли отправка ответного титула для заданого вида документооборота.
// См. https://api-docs.diadoc.ru/ru/latest/proto/DocumentWorkflow.html
//
// Параметры:
//  ВидДокументооборота - Число - идентификатор вида документооборота.
// 
// Возвращаемое значение:
//  Булево - Истина, если для данного вида документооборота требуется ответный титул.
//
&НаКлиенте
Функция ФормироватьОтветныйТитул(ВидДокументооборота) Экспорт
	
	ПодходящиеВидыДО = Новый Массив;
	ПодходящиеВидыДО.Добавить(3); 	// Акты, накладные, УПД ДОП, УКД ДИС и т.д.
	ПодходящиеВидыДО.Добавить(5); 	// УПД СЧФДОП, УКД КСЧФДИС
	ПодходящиеВидыДО.Добавить(16); 	// УПД СЧФДОП, УКД КСЧФДИС workflowId в рамках 14Н 
	ПодходящиеВидыДО.Добавить(8);
	ПодходящиеВидыДО.Добавить(11); 	// Договоры
	
	Результат = (ПодходящиеВидыДО.Найти(ВидДокументооборота) <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметра ПараметрыПодписания процедуры ПоказатьФормуПодписания.
//
// Возвращаемое значение:
//  Структура - параметры открытия формы подписания электронного документа:
//    * ФорматЭД - Структура - Формат электронного документа (см. ОписаниеФорматаЭлектронногоДокумента)
//    * ИдентификаторОрганизации - Строка - Идентификатор организации в сервисе (BoxId).
//    * ЗаголовокФормыПодписания - Строка - Заголовок формы подписания.
//
&НаКлиенте
Функция ПараметрыФормыПодписанияДокумента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяОтветныйТитул", Ложь);
	Результат.Вставить("ФорматДокумента");
	Результат.Вставить("ИдентификаторОрганизации");
	Результат.Вставить("ЗаголовокФормыПодписания");
	
	Возврат Результат;
	
КонецФункции

// Открывает форму подписания электронных документов.
//
// Параметры:
//  ПараметрыПодписания - Структура - параметры формы подписания (см. ПараметрыФормыПодписанияДокумента).
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается.
//  ИмяОбработчика - Строка - содержит имя процедуры, вызов которой будет произведен
//                            после закрытия формы подписания.
//
&НаКлиенте
Процедура ПоказатьФормуПодписания(ПараметрыПодписания, ФормаВладелец, ИмяОбработчика, ПараметрыОбработчика = Неопределено) Экспорт
	
	BoxId = ПараметрыПодписания.ИдентификаторОрганизации;
	ФорматЭД = ПараметрыПодписания.ФорматДокумента;
	ТребуетсяОтветныйТитул = ПараметрыПодписания.ТребуетсяОтветныйТитул;
	ЗаголовокФормыПодписания = ПараметрыПодписания.ЗаголовокФормыПодписания;
	
	ТребуютсяРасширенныеСведенияОПодписанте = ТребуютсяРасширенныеСведенияОПодписанте(ФорматЭД.БазовыйФормат);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредставлениеДокумента", ЗаголовокФормыПодписания);
	
	Если ТребуетсяОтветныйТитул
		И ТребуютсяРасширенныеСведенияОПодписанте Тогда
		
		ИмяФормыПодписания = "ФормаПодписанияДокументаУПД";
		
		ПараметрыФормы.Вставить("BoxId", BoxId);
		ПараметрыФормы.Вставить("ФорматЭД", ФорматЭД);
		
	Иначе
		
		ИмяФормыПодписания = "ФормаПодписанияДокумента";
		
		ДанныеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", BoxId, "ДанныеОрганизации");
		ФИОПодписанта	  = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", BoxId);
		ДолжностьПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДолжностьПодписанта", BoxId);
		
		ПредставлениеПодписи = ДанныеОрганизации.Name;
		Если ЗначениеЗаполнено(ФИОПодписанта) Тогда
			ПредставлениеПодписи = ПредставлениеПодписи + ", " + ФИОПодписанта;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ИНН", ДанныеОрганизации.Inn);
		ПараметрыФормы.Вставить("ФИО", ФИОПодписанта);
		ПараметрыФормы.Вставить("Должность", ДолжностьПодписанта);
		ПараметрыФормы.Вставить("DocumentType", ФорматЭД.ИмяТипа);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", ПредставлениеПодписи);
		
	КонецЕсли;
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально"
		, ИмяФормыПодписания
		, ПараметрыФормы
		, ФормаВладелец
		, ИмяОбработчика
		, ПараметрыОбработчика);
	
КонецПроцедуры


// Проверяет наличие доступа в подразделение у сотрудника
//
// Параметры:
//  UserPermissions	 - 	COMОбъект - см. https://diadocsdk-1c.readthedocs.io/ru/latest/ComObjects/UserPermissions.html
//  DepartmentId	 - 	Строка - идентификатор подразделения в Диадоке, доступ к которому проверяется
// 
// Возвращаемое значение:
//  Булево - Истина - доступ есть,
//           Ложь - доступа нет
//
&НаКлиенте
Функция УСотрудникаЕстьДоступВПодразделение(UserPermissions, DepartmentId) Экспорт 
	
	Результат = Ложь;
	
	Если UserPermissions.DocumentsAccessLevel = "AllDocuments" Тогда
		
		Результат = Истина; // права ко всем подразделениям
		
	ИначеЕсли UserPermissions.DocumentsAccessLevel = "SelectedDepartments" Тогда
		
		// доступ только в указанные подразделения, и DepartmentId как раз туда входит
		Для Каждого Department Из UserPermissions.SelectedDepartments Цикл
			
			Если Department.Id = DepartmentId Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли UserPermissions.DocumentsAccessLevel = "DepartmentOnly"
		И UserPermissions.UserDepartment.Id = DepartmentId Тогда
		
		Результат = Истина; // доступ только в свое подразделение, и оно совпадает с желаемым
		
	ИначеЕсли UserPermissions.DocumentsAccessLevel = "DepartmentAndSubdepartments"
		И ПодразделениеВходитВРодителя(DepartmentId, UserPermissions.UserDepartment) Тогда
		
		Результат = Истина; // доступ в подразделение UserPermissions.UserDepartment и все его дочерние
		
	Иначе
		
		Результат = Ложь; // все остальные случаи
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Подразделение входит в родителя
//
// Параметры:
//  DepartmentId - 	Строка - идентификатор подразделения в Диадоке
//  Department	 - 	COMОбъект - https://diadocsdk-1c.readthedocs.io/ru/latest/ComObjects/Department.html
// 
// Возвращаемое значение:
//  Булево - Истина - DepartmentId является Department или его дочерним подразделением
//           Ложь - DepartmentId не принадлежит DepartmentId и не является дочерним подразделением
//
&НаКлиенте
Функция ПодразделениеВходитВРодителя(DepartmentId, Department)
	
	Если Department = Неопределено // головное подразделение
		Или Department.Id = DepartmentId Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Subdepartment Из Department.Subdepartments Цикл
		
		Если ПодразделениеВходитВРодителя(DepartmentId, Subdepartment) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, требуется ли при подписании заполнять расширенные сведения о подписанте.
//
// Параметры:
//  БазовыйФормат - Строка - идентификатор базового формата (см. БазовыеФорматы)
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ТребуютсяРасширенныеСведенияОПодписанте(БазовыйФормат)
	
	БазовыеФорматы = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	ПодходящиеФорматы = Новый Массив;
	ПодходящиеФорматы.Добавить(БазовыеФорматы.utd820);
	ПодходящиеФорматы.Добавить(БазовыеФорматы.utd);
	ПодходящиеФорматы.Добавить(БазовыеФорматы.ucd736);
	ПодходящиеФорматы.Добавить(БазовыеФорматы.ucd);
	ПодходящиеФорматы.Добавить(БазовыеФорматы.tovtorg);
	ПодходящиеФорматы.Добавить(БазовыеФорматы.rezru);
	ПодходящиеФорматы.Добавить(БазовыеФорматы.torg2);
	
	Результат = (ПодходящиеФорматы.Найти(БазовыйФормат) <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Получает идентификатор электронного документа.
//
// Параметры:
//  ЭДОбъект - COMОбъект - Объект, производный от Document;
// 
// Возвращаемое значение:
//  Структура - см. НовыйИдентификаторЭлектронногоДокумента()
//
&НаКлиенте
Функция ИдентификаторЭлектронногоДокумента(ЭДОбъект)
	
	СоставнойИдентификатор	 	= ЭДОбъект.DocumentId;
	ИдентификаторОрганизации 	= ЭДОбъект.OrganizationId;
	ПользовательскийИдентификатор = ЭДОбъект.CustomDocumentId;
	
	ДлинаИдентификатора = 36;
	ИдентификаторСообщения	 = Лев(СоставнойИдентификатор, ДлинаИдентификатора);
	ИдентификаторТранзакции	 = Сред(СоставнойИдентификатор, ДлинаИдентификатора + 1);
	
	Результат = НовыйИдентификаторЭлектронногоДокумента();
	Результат.ИдентификаторОрганизации	 	= ИдентификаторОрганизации;
	Результат.ИдентификаторСообщения	 	= ИдентификаторСообщения;
	Результат.ИдентификаторТранзакции	 	= ИдентификаторТранзакции;
	Результат.СоставнойИдентификатор	 	= СоставнойИдентификатор;
	Результат.ПользовательскийИдентификатор	= ПользовательскийИдентификатор;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции

// Инициализиирует новую структуру, описывающую идентификатор электронного документа.
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//    * ИдентификаторОрганизации 		- Строка - идентификатор ящика (BoxId);
//    * ИдентификаторСообщения 			- Строка - идентификатор сообщения (MessageId);
//    * ИдентификаторТранзакции 		- Строка - идентификатор транзакции (EntityId);
//    * СоставнойИдентификатор 			- Строка - (для совместимости) составной идентификатор документа (DocumentId);
//	  * ПользовательскийИдентификатор 	- Строка - идентификатор документа заданный пользователем или внешней системой(CustomDocumentId);
//
&НаКлиенте
Функция НовыйИдентификаторЭлектронногоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторОрганизации");
	Результат.Вставить("ИдентификаторСообщения");
	Результат.Вставить("ИдентификаторТранзакции");
	Результат.Вставить("СоставнойИдентификатор");
	Результат.Вставить("ПользовательскийИдентификатор");
	
	Возврат Результат;
	
КонецФункции

// @КОПИЯ: Модуль_ИнтеграцияУниверсальный.НовыйКлючевыеСвойстваЮрФизЛицо
// Инициализирует пустую структуру свойств 
// юридического или физического лица.
// 
// Возвращаемое значение:
//  Структура - см. текст функции.
//
&НаКлиентеНаСервереБезКонтекста
Функция НовыйКлючевыеСвойстваЮрФизЛицо()
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("ИдентификаторУчастникаЭДО"); // fnsParticipantId
	Результат.Вставить("ИдентификаторОрганизации"); // boxId
	Результат.Вставить("ИНН");
	Результат.Вставить("КПП");
	Результат.Вставить("Наименование");
	Результат.Вставить("НаименованиеПолное");
	
	Возврат Результат;
	
КонецФункции

// Формирует описание организации сервиса
//
// Параметры:
//  ИнформацияОбОрганизации - COMОбъект - представление организации (контрагента) сервиса.
//                                        Соответствует объекту Organization, Counteragent или BoxInfo.
// 
// Возвращаемое значение:
//  Структура - см. НовыйКлючевыеСвойстваЮрФизЛицо
//
&НаКлиенте
Функция РеквизитыОрганизацииСервиса(ИнформацияОбОрганизации)
	
	Результат = НовыйКлючевыеСвойстваЮрФизЛицо();
	
	Результат.ИдентификаторУчастникаЭДО	 = ИнформацияОбОрганизации.FnsParticipantId;
	Результат.ИдентификаторОрганизации	 = ИнформацияОбОрганизации.Id;
	Результат.НаименованиеПолное = ИнформацияОбОрганизации.Name;
	Результат.Наименование		 = ИнформацияОбОрганизации.Name;
	Результат.ИНН = ИнформацияОбОрганизации.Inn;
	Результат.КПП = ИнформацияОбОрганизации.Kpp;
	
	Возврат Результат;
	
КонецФункции

// Инициализирует пустую структуру реквизитов подразделения сервиса.
// 
// Возвращаемое значение:
//  Структура - см. тело функции.
//
&НаКлиентеНаСервереБезКонтекста
Функция НовоеПодразделениеСервиса()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Наименование");
	Результат.Вставить("КПП");
	
	Возврат Результат;
	
КонецФункции

// Формирует описание подразделения сервиса.
//
// Параметры:
//  ИнформацияОПодразделении - COMОбъект, Неопределено - представление подразделения сервиса.
//                                                       Соответствует объекту Department.
// 
// Возвращаемое значение:
//  Структура - см. НовоеПодразделениеСервиса
//
&НаКлиенте
Функция РеквизитыПодразделенияСервиса(ИнформацияОПодразделении)
	
	Если ИнформацияОПодразделении = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = НовоеПодразделениеСервиса();
	Результат.Идентификатор = ИнформацияОПодразделении.Id;
	Результат.Наименование = ИнформацияОПодразделении.Name;
	Результат.КПП = ИнформацияОПодразделении.Kpp;
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры с описанием статусов электронного документа
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//   * ОтветноеДействие - Строка - состояние ответного действия со стороны получателя документа (RecipientResponseStatus).
//                                 см. https://diadoc-sdk.readthedocs.io/ru/latest/proto/RecipientResponseStatus.html
//   * Аннулирование - Строка - статус аннулирования документа (RevocationStatus).
//                              см. https://diadoc-sdk.readthedocs.io/ru/latest/proto/RevocationStatus.html
//
&НаКлиентеНаСервереБезКонтекста
Функция НовыйСтатусЭлектронногоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("Аннулирование");
	Результат.Вставить("ОтветноеДействие");
	Результат.Вставить("Подписание");
	Результат.Вставить("Согласование");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СтатусЭлектронногоДокумента(ЭДОбъект)
	
	СтатусЭД = НовыйСтатусЭлектронногоДокумента();
	
	Если ЭДОбъект = Неопределено Тогда
		Возврат СтатусЭД;
	КонецЕсли;
	
	СтатусЭД.ОтветноеДействие = ЭДОбъект.RecipientResponseStatus;
	СтатусЭД.Аннулирование = ЭДОбъект.RevocationStatus;
	СтатусЭД.Подписание = ЭДОбъект.SenderSignatureStatus;
	
	Если ЭДОбъект.ResolutionStatus <> Неопределено Тогда
		СтатусЭД.Согласование = ЭДОбъект.ResolutionStatus.Type;
	КонецЕсли;
	
	Возврат СтатусЭД;
	
КонецФункции

// Инициализиирует новую структуру, описывающую электронный документ.
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//    * Идентификатор - Структура - Идентификатор документа (см. ИдентификаторЭлектронногоДокумента);
//    * Формат - Структура - Описание формата документа (см. ОписаниеФорматаЭлектронногоДокумента);
//    * ОрганизацияСервиса - Структура - Реквизиты ящика организации (см. РеквизитыОрганизацииСервиса);
//    * ПодразделениеОрганизацииСервиса - Структура - Реквизиты подразделения организации (см. РеквизитыПодразделенияСервиса);
//    * КонтрагентСервиса - Структура - Реквизиты ящика контрагента (см. РеквизитыОрганизацииСервиса);
//    * Мета - Структура - содержит поля меты документа (Metadata);
//    * ПользовательскиеПоля - Структура - содержит пользовательские поля документа (CustomData);
//    * Файл - ДвоичныеДанные, Строка - содержимое документа;
//    * ЭтоКорректировка - Булево - Истина, если это корректировочный документ;
//    * ЭтоИсправление - Булево - Истина, если это исправительный документ;
//    * Тестовый - Булево - Истина, если это тестовый документ;
//    * ВидДокументооборота - Число - Идентификатор вида документооборота
//                                    (см. https://api-docs.diadoc.ru/ru/latest/proto/DocumentWorkflow.html);
//
&НаКлиенте
Функция НовыйЭлектронныйДокумент()
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Формат");
	Результат.Вставить("ОрганизацияСервиса");
	Результат.Вставить("ПодразделениеОрганизацииСервиса");
	Результат.Вставить("КонтрагентСервиса");
	Результат.Вставить("Мета");
	Результат.Вставить("ПользовательскиеПоля");
	Результат.Вставить("Тестовый", Ложь);
	Результат.Вставить("Статус", НовыйСтатусЭлектронногоДокумента());
	Результат.Вставить("ВидДокументооборота", -1);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьКонтентПередОтражениемВУчете(ПротоКонтент, Отказ)
	
	ТипКонтента = ВРег(ПротоКонтент.ТипКонтента);
	
	Если ТипКонтента = ВРег("InvoiceCorrectionContent") Тогда 
		
		ТекстСообщения = НСтр("ru = 'Отражение в учете счета-фактуры в устаревшем формате не поддерживается!'");
		ПоказатьПредупреждение(, ТекстСообщения, 60);
		Отказ = Истина;
		
	ИначеЕсли ТипКонтента = ВРег("Torg2SenderTitle") Тогда
		
		ТекстСообщения = НСтр("ru = 'Отражение в учете акта о расхождениях не поддерживается!'");
		ПоказатьПредупреждение(, ТекстСообщения, 60);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекстПредпрежденияОбУстаревшемФормате(ДобавитьИнструкцию = Ложь)
	
	АдресаРесурсов		= АдресаИнтернетРесурсов();
	СсылкаНаПриказ820	= АдресаРесурсов.ПриказОбУтвержденииФормата820;
	
	ТекстСообщения =
	"<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<STYLE type=""text/css"">h3{margin-top:0.5em; margin-bottom:1em;} p{margin-top:0.2em; margin-bottom:1em;}</STYLE></HEAD>
	|<BODY>
	|<P>С 1 января 2020 года счета-фактуры и УПД можно выставлять только в новом формате <A href=""" + СсылкаНаПриказ820 + """> по приказу ФНС №820</A>. Перейти на новый формат должны все организации, работающие с электронными документами.</P>";
	
	Если ДобавитьИнструкцию Тогда 
		
		СсылкаИнструкцияПараметрыОтправки = АдресаРесурсов.Инструкция_ПараметрыОтправки;
		
		ТекстСообщения = ТекстСообщения + "
		
		|<P>Для отправки документов в новом формате проверьте и настройте параметры отправки в модуле. <A href=""" + СсылкаИнструкцияПараметрыОтправки + """>Подробнее..</A></P>
		|<P>Также договоритесь с поставщиками о переходе на новый формат. Если поставщик продолжает отправлять документы в старом формате, запросите аннулирование документов и попросите перевыставить их в новом формате.</P>";
								
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения + "
	|</BODY></HTML>";
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокПредпрежденияОбУстаревшемФормате()
	
	Возврат НСтр("ru = 'Прекращаем поддержку устаревшего формата'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОшибкаНастройкиПараметровПодписания(ТекстОшибки)
	
	Результат = Найти(ТекстОшибки, "не настроены параметры подписи");
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОшибкаЗаполненияДолжностиПодписанта(ТекстОшибки)
	
	Результат = Найти(ТекстОшибки, "The required attribute 'Должн' is missing");
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараграфHTML(ТекстПараграфа)
	
	Результат = "<p>" + ТекстПараграфа + "</p>";
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГиперссылкаHTML(Адрес, Текст)
	
	Результат = СтрШаблон("<a href=""%1"">%2</a>", Адрес, Текст);
	Возврат Результат;
	
КонецФункции

	&НаКлиенте
	Функция ПредставлениеПродавца(ЭДОбъект, НаименованиеЯщика=неопределено) Экспорт
		Если ЭДОбъект.Direction = "Outbound"  тогда 
			Возврат ?(НаименованиеЯщика=неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
		Иначе 
			Возврат ЭДОбъект.CounterAgent.name;
		КонецЕсли;
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеПокупателя(ЭДОбъект, НаименованиеЯщика=неопределено) Экспорт
		Если ЭДОбъект.Direction = "Outbound"  тогда
			Возврат ЭДОбъект.CounterAgent.name;
		Иначе 
			Возврат ?(НаименованиеЯщика=неопределено, ЭДОбъект.Organization.name, НаименованиеЯщика);
		КонецЕсли;
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеПодразделения(ЭДОбъект) Экспорт
		
		Если ЭДОбъект.Department = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат  ЭДОбъект.Department.Name;
		КонецЕсли;
		
	КонецФункции
	
	// Формирует представление электронного документа по его типу
	//
	// Параметры:
	//	Document	- ComОбъект	- электронный документ
	//
	// Возвращаемое значение:
	//	Строка
	&НаКлиенте
	Функция ПредставлениеЭД(Document) Экспорт
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		
		СвойстваЭД = Новый Структура;
		СвойстваЭД.Вставить("Title", Document);
		
		ЗаполнитьЗначенияСвойств(СвойстваЭД, Document);
		
		Если ЗначениеЗаполнено(СвойстваЭД.Title) Тогда
			
			Результат = СвойстваЭД.Title;
			
		ИначеЕсли ФорматЭД.ИмяТипа = "TrustConnectionRequest"
			ИЛИ ФорматЭД.ИмяТипа = "SupplementaryAgreement" Тогда
			
			Результат = Document.FileName;
		
		ИначеЕсли СтрНайти(ФорматЭД.ИмяТипа, "Revision") > 0 Тогда
			
			Результат = ПредставлениеИсправленияЭД(ФорматЭД.ИмяТипа, Document);
			
		Иначе
			
			Подстроки = Новый Массив;
			Подстроки.Добавить(ФорматЭД.Представление);
			Подстроки.Добавить("№");
			Подстроки.Добавить(Document.DocumentNumber);
			Подстроки.Добавить("от");
			Подстроки.Добавить(Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy"));
			
			Результат = СтрСоединить(Подстроки);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			
			Результат = Результат + ДополнениеКПредставлениюЭД(Document);
			
		Иначе
			
			Результат = "Тип документа не определен";
			
		КонецЕсли;
						
		Возврат Результат;
		
	КонецФункции // ПредставлениеЭД()
	
	&НаКлиенте
	Функция ПредставлениеИсправленияЭД(ИмяТипа, Document)
		
		Если ИмяТипа = "InvoiceRevision" Тогда
			
			ИмяПервичного	= "счета-фактуры";
			НомерПервичного	= Document.OriginalDocumentNumber;
			ДатаПервичного	= Формат(Document.OriginalDocumentDate, "ДФ=dd.MM.yyyy");
													
		ИначеЕсли ИмяТипа = "InvoiceCorrectionRevision" Тогда
			
			ИмяПервичного	= "корректировочного счета-фактуры";
			НомерПервичного	= Document.OriginalInvoiceCorrectionNumber;
			ДатаПервичного	= Формат(Document.OriginalInvoiceCorrectionDate, "ДФ=dd.MM.yyyy");
												
		ИначеЕсли ИмяТипа = "UniversalTransferDocumentRevision" Тогда
			
			ИмяПервичного	= "УПД";
			НомерПервичного = Document.OriginalDocumentNumber;
			ДатаПервичного	= Формат(Document.OriginalDocumentDate, "ДФ=dd.MM.yyyy");
			
		Иначе
			
			ИмяПервичного	= "";
			НомерПервичного	= "";
			ДатаПервичного	= "";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПервичного) Тогда
			
			ДатаДокумента = Формат(Document.DocumentDate, "ДФ=dd.MM.yyyy");
			
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Исправление № %1 от %2 %3 № %4 от %5'"),
				Document.DocumentNumber,
				ДатаДокумента,
				ИмяПервичного,
				НомерПервичного,
				ДатаПервичного	);
				
		Иначе
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПредставлениеИсправленияЭД()
	
	&НаКлиенте
	Функция ПолучитьСтруктуруПредставленияЭД(док) Экспорт
		
		Box = Док.Organization;
		
		СтруктураЭД = Новый Структура;
		
		СтруктураЭД.Вставить("ЭДОбъект", док);
		СтруктураЭД.Вставить("BoxID", док.OrganizationID);
		СтруктураЭД.Вставить("DocumentId", док.DocumentId);
		СтруктураЭД.Вставить("Организация", BoxID_2_Организация_Форма(док.OrganizationID));
		СтруктураЭД.Вставить("Контрагент", CounteragentBoxID_2_Контрагент_Форма(док.CounterAgent.Id, док.OrganizationID));
		СтруктураЭД.Вставить("Дата", док.DocumentDate);
		СтруктураЭД.Вставить("Номер", док.DocumentNumber);

		Если док.Direction = "Outbound"  тогда 
			СтруктураЭД.Вставить("Получатель", док.CounterAgent.name);
			СтруктураЭД.Вставить("Отправитель", Box.name);
		Иначе 
			СтруктураЭД.Вставить("Отправитель", док.CounterAgent.name);
			СтруктураЭД.Вставить("Получатель", Box.name);
		КонецЕсли;	
		СтруктураЭД.Вставить("Сумма", ПредставлениеСуммы(док));
		
		Если док.TypeNamedId = "Invoice" Тогда
			СтруктураЭД.Вставить("ДатаУчета", док.ConfirmationDate);
		Иначе
			СтруктураЭД.Вставить("ДатаУчета", док.Timestamp);
		КонецЕсли;
		
		Возврат СтруктураЭД;
		
	КонецФункции
	
	&НаКлиенте
	Функция ДополнениеКПредставлениюЭД(Document)
		
		Стр			= "";
		Разделитель = "";
		
		Если Document.IsTest Тогда
			Стр = "тестовый";
			Разделитель = ", ";
		КонецЕсли;
		
		Если Document.IsEncryptedContent Тогда
			Стр = Стр + Разделитель + "зашифрован";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр) Тогда
			Стр = " ("+Стр+")";
		КонецЕсли;
		
		Возврат Стр;
		
	КонецФункции
	
	&НаКлиенте
	Функция Перечисление_СтатусыДокументов()
		
		Результат = Новый Структура;
		
		Результат.Вставить("Отправлен"							, "Отправлен");
		Результат.Вставить("НеОтправлен"						, "Не отправлен");
		Результат.Вставить("ОжидаетсяИзвещениеОПолучении"		, "Ожидается извещение о получении");
		Результат.Вставить("Доставлен"							, "Доставлен");
		Результат.Вставить("ТребуетсяПодпись"					, "Требуется подпись");
		Результат.Вставить("Подписан"							, "Подписан");
		Результат.Вставить("ПодписанКонтрагентом"				, "Подписан контрагентом");
		Результат.Вставить("ПодписанСРазногласиями"				, "Подписан с разногласиями");
		Результат.Вставить("ПодписанСРазногласиямиКонтрагент"	, "Подписан с разногласиями контрагентом");
		Результат.Вставить("ОжидаетсяПодписьКонтрагента"		, "Ожидается подпись контрагента");
		Результат.Вставить("ОтказаноВПодписи"					, "Отказано в подписи");
		Результат.Вставить("ОтказаноВПодписиКонтрагенту"		, "Отказано в подписи контрагенту");
		Результат.Вставить("ОшибкаПодписи"						, "Ошибка подписи");
		Результат.Вставить("ОшибкаПодписиКонтрагента"			, "Ошибка подписи контрагента");
		Результат.Вставить("ОжидаетсяИзвещениеОтПокупателя"		, "Ожидается извещение от покупателя");
		Результат.Вставить("ДокументооборотНеЗавершен"			, "Документооборот не завершен");
		Результат.Вставить("ДокументооборотЗавершен"			, "Документооборот завершен");
		Результат.Вставить("Исправлен"							, "Исправлен");
		Результат.Вставить("Откорректирован"					, "Откорректирован");
		Результат.Вставить("Аннулирован"						, "Аннулирован");
		Результат.Вставить("ОжидаетсяАннулирование"				, "Ожидается аннулирование");
		Результат.Вставить("ТребуетсяАннулирование"				, "Требуется аннулирование");
		Результат.Вставить("ОжидаетсяУточнение"					, "Ожидается уточнение");
		Результат.Вставить("ТребуетсяУточнение"					, "Требуется уточнение");
		Результат.Вставить("КонтрагентОтказалВПодписи"			, "Контрагент отказал в подписи");
		Результат.Вставить("ТребуетсяПодписатьИОтправить"		, "Требуется подписать и отправить");
		Результат.Вставить("ТребуетсяПодписатьИзвещение"		, "Требуется подписать извещение");
		Результат.Вставить("ОтказаноВАннулировании"				, "Отказано в аннулировании");
		Результат.Вставить("ОшибкаДоставкиЧерезРоуминг"			, "Ошибка доставки документа через роуминг");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатуса(Document) Экспорт
		
		ПредставленияСтатусовЭД = Перечисление_СтатусыДокументов();
		СтатусИзвещений = ПредставлениеСтатусаИзвещений(Document, ПредставленияСтатусовЭД);
		СтатусДокумента = ПредставлениеСтатусаПередачиЧерезРоуминг(Document, ПредставленияСтатусовЭД);
		 		
		Если Не ЗначениеЗаполнено(СтатусДокумента) Тогда
			СтатусДокумента = ПредставлениеСтатусаПроверкиПодписи(Document, ПредставленияСтатусовЭД);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтатусДокумента) Тогда
			СтатусДокумента = ПредставлениеСтатусаАннулирования(Document, ПредставленияСтатусовЭД);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтатусДокумента) Тогда
			СтатусДокумента = ПредставлениеСтатусаУведомленияОбУточнении(Document, ПредставленияСтатусовЭД);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтатусДокумента) Тогда
			СтатусДокумента = ПредставлениеСтатусаОтветногоДействия(Document, ПредставленияСтатусовЭД);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтатусДокумента) И Не ЗначениеЗаполнено(СтатусИзвещений) Тогда
			СтатусДокумента = ПредставленияСтатусовЭД.ДокументооборотЗавершен;
		КонецЕсли;
		
		Разделитель = ". ";
		Подстроки = Новый Массив;
		
		Если ЗначениеЗаполнено(СтатусДокумента) Тогда
			Подстроки.Добавить(СтатусДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтатусИзвещений) И СтатусДокумента <> ПредставленияСтатусовЭД.Аннулирован Тогда
			Подстроки.Добавить(СтатусИзвещений);
		КонецЕсли;
		
		Результат = СтрСоединить(Подстроки, Разделитель);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаПередачиЧерезРоуминг(Document, ПредставленияСтатусовЭД)
		
		СтатусПередачиЧерезРоуминг = Document.RoamingNotificationStatus;
		
		Если СтатусПередачиЧерезРоуминг = "RoamingNotificationStatusError" Тогда
			
			Результат = ПредставленияСтатусовЭД.ОшибкаДоставкиЧерезРоуминг;
			
		Иначе
			
			// Документ не доставлялся в роуминг
			// Документ с подтверждением успешной доставки в роуминг
			// Неизвестный роуминговый статус документа
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаАннулирования(Document, ПредставленияСтатусовЭД)
		
		СтатусАннулирования = Document.RevocationStatus;
		
		Если СтатусАннулирования = "RevocationIsRequestedByMe" Тогда
			
			Результат = ПредставленияСтатусовЭД.ОжидаетсяАннулирование;
			
		ИначеЕсли СтатусАннулирования = "RequestsMyRevocation" Тогда
			
			Результат = ПредставленияСтатусовЭД.ТребуетсяАннулирование;
			
		ИначеЕсли СтатусАннулирования = "RevocationAccepted" Тогда
			
			Результат = ПредставленияСтатусовЭД.Аннулирован;
			
		Иначе
			
			// Получен или отправлен отказ от предложения об аннулировании документа
			// Документ не аннулирован, и не было предложений об аннулировании
			// Неизвестный статус аннулирования документа
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаУведомленияОбУточнении(Document, ПредставленияСтатусовЭД)
		
		ДанныеУведомления	 = Document.AmendmentRequestMetadata;
		ЕстьУведомление		 = ДанныеУведомления.AmendmentRequested;
		ЕстьИсправление		 = ДанныеУведомления.Revised;
		ЕстьКорректировка	 = ДанныеУведомления.Corrected;
		ЭтоВходящийДокумент	 = (Document.Direction = "Inbound");
		
		Если ЕстьУведомление Тогда
			
			Если ЕстьКорректировка Тогда
				
				Результат = ПредставленияСтатусовЭД.Откорректирован;
				
			ИначеЕсли ЕстьИсправление Тогда
				
				Результат = ПредставленияСтатусовЭД.Исправлен;
				
			Иначе
				
				Если ЭтоВходящийДокумент Тогда
					Результат = ПредставленияСтатусовЭД.ОжидаетсяУточнение;
				Иначе
					Результат = ПредставленияСтатусовЭД.ТребуетсяУточнение;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаОтветногоДействия(Document, ПредставленияСтатусовЭД)
		
		ЭтоВходящийДокумент		 = (Document.Direction = "Inbound");
		СтатусОтветногоДействия	 = Document.RecipientResponseStatus;
				
		Если СтатусОтветногоДействия = "WaitingForRecipientSignature" Тогда
			
			Если ЭтоВходящийДокумент Тогда
				Результат = ПредставленияСтатусовЭД.ТребуетсяПодпись;
			Иначе
				Результат = ПредставленияСтатусовЭД.ОжидаетсяПодписьКонтрагента;
			КонецЕсли;
			
		ИначеЕсли СтатусОтветногоДействия = "WithRecipientSignature" Тогда
			
			Если ЭтоВходящийДокумент Тогда
				Результат = ПредставленияСтатусовЭД.Подписан;
			Иначе
				Результат = ПредставленияСтатусовЭД.ПодписанКонтрагентом;
			КонецЕсли;
			
		ИначеЕсли СтатусОтветногоДействия = "RecipientSignatureRequestRejected" Тогда
			
			Если ЭтоВходящийДокумент Тогда
				Результат = ПредставленияСтатусовЭД.ОтказаноВПодписиКонтрагенту;
			Иначе
				Результат = ПредставленияСтатусовЭД.ОтказаноВПодписи;
			КонецЕсли;
			
		ИначеЕсли СтатусОтветногоДействия = "InvalidRecipientSignature" Тогда
			
			Результат = ПредставленияСтатусовЭД.ОшибкаПодписиКонтрагента;
			
		ИначеЕсли СтатусОтветногоДействия = "WithRecipientPartiallySignature" Тогда
			
			Если ЭтоВходящийДокумент Тогда
				Результат = ПредставленияСтатусовЭД.ПодписанСРазногласиями;
			Иначе
				Результат = ПредставленияСтатусовЭД.ПодписанСРазногласиямиКонтрагент;
			КонецЕсли;
			
		Иначе
			
			// Ответного действия не требуется
			// Неизвестный статус ответного действия
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаПроверкиПодписи(Document, ПредставленияСтатусовЭД)
		
		СтатусПроверкиПодписи = Document.SenderSignatureStatus;
		
		Если СтатусПроверкиПодписи = "WaitingForSenderSignature" Тогда
			
			Результат = ПредставленияСтатусовЭД.ТребуетсяПодписатьИОтправить;
			
		ИначеЕсли СтатусПроверкиПодписи = "SenderSignatureCheckedAndInvalid" Тогда
			
			Результат = ПредставленияСтатусовЭД.ОшибкаПодписи;
			
		Иначе
			
			// Подпись отправителя еще не проверена
			// Подпись отправителя проверена и валидна
			// Неизвестный статус проверки подписи
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаИзвещений(Document, ПредставленияСтатусовЭД)
		
		СтатусПодтвержденияОператором	 = Document.ConfirmationMetadata.ReceiptStatus;
		СтатусИзвещенияОПолучении		 = Document.RecipientReceiptMetadata.ReceiptStatus;
		СтатусПодтвержденияИзвещения	 = Document.RecipientReceiptMetadata.ConfirmationMetadata.ReceiptStatus;
		
		ОжидаетсяИзвещение			 = "WaitingForReceipt";
		ТребуетсяПодписатьИзвещение	 = "HaveToCreateReceipt";
		
		Если СтатусПодтвержденияОператором = ОжидаетсяИзвещение
			Или СтатусИзвещенияОПолучении = ОжидаетсяИзвещение
			Или СтатусПодтвержденияИзвещения = ОжидаетсяИзвещение Тогда
			
			Результат = ПредставленияСтатусовЭД.ОжидаетсяИзвещениеОПолучении;
			
		ИначеЕсли СтатусПодтвержденияОператором = ТребуетсяПодписатьИзвещение
			Или СтатусИзвещенияОПолучении = ТребуетсяПодписатьИзвещение
			Или СтатусПодтвержденияИзвещения = ТребуетсяПодписатьИзвещение Тогда
			
			Результат = ПредставленияСтатусовЭД.ТребуетсяПодписатьИзвещение;
			
		Иначе
			
			// Извещения не поддерживаются либо не запрошены
			// Извещения подписаны, действий не требуется
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаРоуминг(ЭДОбъект) Экспорт
		
		RoamingNotificationStatus= ЭДОбъект.RoamingNotificationStatus;
		
		Если RoamingNotificationStatus= "RoamingNotificationStatusNone" Тогда
			Статус= "";
		ИначеЕсли RoamingNotificationStatus = "RoamingNotificationStatusError" Тогда
			Статус = Новый ФорматированнаяСтрока("Ошибка доставки документа через роуминг!",,WebЦвета.Красный,,RoamingNotificationStatus);
		ИначеЕсли RoamingNotificationStatus = "RoamingNotificationStatusSuccess" Тогда
			Статус = "Доставлен через роуминг.";
		ИначеЕсли RoamingNotificationStatus = "UnknownRoamingNotificationStatus" Тогда
			Статус = "Идет доставка через роуминг.";
		КонецЕсли;
		
		Возврат Статус;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСуммы(Document, ФорматЭД = Неопределено) Экспорт
		
		Если ФорматЭД = Неопределено Тогда
			ФорматЭД = ФорматЭлектронногоДокумента(Document);
		КонецЕсли;
		
		ИмяТипа = ФорматЭД.ИмяТипа;
		
		Если ФорматЭД.ЭтоКорректировка Тогда
			
			стрУв = ?(Окр(Document.TotalInc, 2) <> 0, "+" + Формат(Окр(Document.TotalInc, 2), "ЧДЦ=2"), "");
			стрУв = СтрЗаменить(стрУв, Символы.НПП, " ");
			
			стрУм = ?(Окр(Document.TotalDec, 2) <> 0, "-" + Формат(Окр(Document.TotalDec, 2), "ЧДЦ=2"), "");
			стрУм = СтрЗаменить(стрУм, Символы.НПП, " ");
			
			Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
				Возврат стрУв + " " + СтрУм;
			ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
				Возврат стрУв;
			Иначе
				Возврат стрУм;
			КонецЕсли;

		ИначеЕсли 
				ИмяТипа = "Nonformalized"
			ИЛИ ИмяТипа = "ReconciliationAct"
			ИЛИ ИмяТипа = "CertificateRegistry"
			ИЛИ ИмяТипа = "ServiceDetails" 
			ИЛИ ИмяТипа = "Contract"
			ИЛИ ИмяТипа = "PriceListAgreement"
			ИЛИ ИмяТипа = "TrustConnectionRequest"
			ИЛИ ИмяТипа = "PriceList"
			ИЛИ ИмяТипа = "SupplementaryAgreement"

		Тогда
			Возврат "";
		Иначе
			
			Попытка
				Возврат СтрЗаменить(Формат(Окр(Document.Total, 2), "ЧДЦ=2"), Символы.НПП, " ");
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция СуммаПоDocument(Document)
		
		ИмяТипа = Document.TypeNamedId;
		
		Если 	ИмяТипа = "InvoiceCorrection"
			ИЛИ ИмяТипа = "InvoiceCorrectionRevision"
			ИЛИ ИмяТипа = "UniversalCorrectionDocument" 
			ИЛИ ИмяТипа = "UniversalCorrectionDocumentRevision" 
			
			ИЛИ ИмяТипа = "Nonformalized"
			ИЛИ ИмяТипа = "ReconciliationAct"
			ИЛИ ИмяТипа = "CertificateRegistry"
			ИЛИ ИмяТипа = "ServiceDetails" 
			ИЛИ ИмяТипа = "Contract"
			ИЛИ ИмяТипа = "PriceListAgreement"
			ИЛИ ИмяТипа = "TrustConnectionRequest"
			ИЛИ ИмяТипа = "PriceList"
			ИЛИ ИмяТипа = "SupplementaryAgreement"
		Тогда
		
			Возврат 0;
		
		Иначе
			
			Попытка
				Возврат Окр(Document.Total, 2);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСуммыНДС(Document, ФорматЭД = Неопределено)
		
		Если ФорматЭД = Неопределено Тогда
			ФорматЭД = ФорматЭлектронногоДокумента(Document);
		КонецЕсли;
		
		ИмяТипа = ФорматЭД.ИмяТипа;
		
		Если ФорматЭД.ЭтоКорректировка Тогда
			
			стрУв = ?(Окр(Document.VatInc, 2) <> 0, "+" + Формат(Окр(Document.VatInc, 2), "ЧДЦ=2"), "");
			стрУм = ?(Окр(Document.VatDec, 2) <> 0, "-" + Формат(Окр(Document.VatDec, 2), "ЧДЦ=2"), "");
			Если НЕ ПустаяСтрока(стрУв) И НЕ ПустаяСтрока(стрУм) Тогда
				Возврат стрУв + " " + СтрУм;
			ИначеЕсли НЕ ПустаяСтрока(стрУв) Тогда
				Возврат стрУв;
			Иначе
				Возврат стрУм;
			КонецЕсли;
			
		Иначе
			
			Попытка
				Возврат Формат(Окр(Document.Vat, 2), "ЧДЦ=2");
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте 
	Функция ПредставлениеПериодаДД(ДатаНачала, Знач ДатаОкончания) Экспорт
		
		ДатаОкончания= ?(ДатаОкончания = МетодКлиента("Модуль_Клиент","ДатаГоризонта"), '00010101', ДатаОкончания);
		ПредставлениеПериодаДД= "";
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				ПредставлениеПериодаДД= ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания), "ФП = Истина");
			Иначе
				ПредставлениеПериодаДД= "по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
			ПредставлениеПериодаДД= "с " + Формат(Датаначала, "ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеПериодаДД= "Без ограничения";
		КонецЕсли;
		
		Возврат ПредставлениеПериодаДД;	
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеТипаРезолюции(ResolutionType) Экспорт
		
		Если ResolutionType = "ResolutionApprove" Тогда
			Действие=	"Согласовано";
		ИначеЕсли ResolutionType = "ResolutionDisapprove" Тогда
			Действие=	"Отказано в согласовании";
		ИначеЕсли ResolutionType = "ResolutionRequest" Тогда
			Действие=	"Отправлен запрос на согласование";
		ИначеЕсли ResolutionType = "SignatureApprove" Тогда
			Действие=	"Подписан";
		ИначеЕсли ResolutionType = "SignatureDisapprove" Тогда
			Действие=	"Отказано в подписи";
		ИначеЕсли ResolutionType = "SignatureRequest" Тогда
			Действие=	"Отправлен запрос на подпись";
		ИначеЕсли ResolutionType = "RevocationRequest" Тогда
			Действие=	"Отправлен запрос на аннулирование";
		ИначеЕсли ResolutionType = "RevocationApprove" Тогда
			Действие=	"Аннулирован";
		ИначеЕсли ResolutionType = "RevocationDisapprove" Тогда
			Действие=	"Отказано в аннулировании";
		ИначеЕсли ResolutionType = "InvoiceCorrectionRequest" Тогда
			Действие = "Отправлен запрос на уточнение";
		Иначе
			Действие=	"Тип согласования не определен";
		КонецЕсли;
		
		Возврат Действие;
		
	КонецФункции
	
	&НаКлиенте 
	Функция СформироватьHTMLПредставлениеОшибок(Document, Организация, МассивОшибок) Экспорт
		
		HTMLДокумент=	"";
		
		HTMLДокумент= 	"<style>
		|
		|p1 {font-family: 'Times New Roman', Times, serif; font-size: 11pt; }
		|p2 {font-family: 'Times New Roman', Times, serif; font-size: 10pt; }
		|p {font-family: 'Times New Roman', Times, serif; font-size: 9pt;}
		|
		|.left_block {
		|display: block;
		|float: left; 
		|}
		|
		|.right_block {
		|display: block;
		|float: right;
		|}
		|
		|.bottom_brd {
		|border-bottom-width: 1px;
		|border-bottom-style: solid;
		|border-bottom-color: black;
		|}
		|
		|.block_comment {
		|width: 98%;
		|float: right;
		|}
		|
		|</style>";
		
		ЭтоВходящийДокумент = (Document.Direction = "Inbound");
		HTMLДокумент=	HTMLДокумент + "<body>" +
		"<div>" +
		"<div>" +
		
		"<div>" + 
		
		"<div>" +
		"<div class=""bottom_brd"">" +
		"<h3>" + ПредставлениеЭД(Document) + "</h3>" +
		"<h4 style=""margin-bottom: -15px;"">" + ?(ЭтоВходящийДокумент, "Отправитель: ", "Получатель: ") + Document.Organization.Name + "</h4>" +
		"<h4>" + ?(ЭтоВходящийДокумент = "Inbound", "Получатель: ", "Отправитель: ") + Document.Counteragent.Name + "</h4>" +
		"</div>" +
		"</div>";
		
		НомерОшибки=				0;
		ПредыдущаяКатегорияОшибки=	"";
		
		Для каждого Ошибка Из МассивОшибок Цикл
			
			Если НЕ ПредыдущаяКатегорияОшибки = Ошибка.КатегорияОшибки Тогда
				
				НомерОшибки=				0;
				ПредыдущаяКатегорияОшибки=	Ошибка.КатегорияОшибки;
				
				HTMLДокумент=	HTMLДокумент +
				"<div>" +
				
				"<div>" +
				
				"<div style= ""color = red"">" +
				"<p2 align=""left"">" + Ошибка.КатегорияОшибки + "</p2>" + 
				"</div>"
				
				"</div>" +
				
				"</div>";
				
			КонецЕсли;
			
			НомерОшибки=	НомерОшибки + 1;
			
			HTMLДокумент=	HTMLДокумент +
			"<div>" + 
			"<div class=""block_comment"" style= ""white-space: normal; word-wrap: break-word"">" +
			"<p>" + НомерОшибки + ". " + Ошибка.ТекстОшибки + "</p>" +
			"</div>" + 
			"</div>";
			
		КонецЦикла;
		
		HTMLДокумент=	HTMLДокумент + "</div></div></div></<body>";
		
		Возврат HTMLДокумент;
		
	КонецФункции
	
	&НаКлиенте 
	Функция СформироватьHTMLПредставлениеРезолюций(Document, Организация) Экспорт
		
		//Верстальщик бы меня на рее повесил...
		
		HTMLДокумент=	"";
		
		HTMLДокумент= 	"<!DOCTYPE html PUBLIC """"-//W3C//DTD XHTML 1.0 Transitional//EN
		|http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"""">
		|
		|<html xmlns=""""http://www.w3.org/1999/xhtml"""">
		|
		|<head>
		|<meta http-equiv=""""Content-Type"""" content=""""text/html; charset=utf-8""""/>
		|
		|<style>	
		|p1 {font-family: 'Times New Roman', Times, serif; font-size: 11pt; }
		|p2 {font-family: 'Times New Roman', Times, serif; font-size: 10pt; }
		|p {font-family: 'Times New Roman', Times, serif; font-size: 9pt; color = #828282; 
		|}
		|
		|.background.block_creationdate {
		|height: auto !important;
		|padding-bottom: 0;
		|right: 0;
		|width: 50%;
		|}
		|
		|.block_creationdate {
		|width: 30%;
		|padding-bottom: 0px;
		|text-align: right; 
		|}
		|
		|.block_resolutiontype {
		|width: 70%;
		|display: block;
		|float: left;
		|}
		|
		|.block_author {
		|width: 98%;
		|display: block;
		|float: left;
		|}
		|
		|.left_block {
		|display: block;
		|float: left; 
		|}
		|
		|.right_block {
		|display: block;
		|float: right;
		|}
		|
		|.bottom_brd {
		|border-bottom-width: 1px;
		|border-bottom-style: solid;
		|border-bottom-color: black;
		|}
		|
		|.block_comment {
		|width: 96%;
		|float: right; 
		|}
		|
		|</style>
		|
		|</head>";
		
		ЭтоВходящийДокумент = (Document.Direction = "Inbound");
		HTMLДокумент=	HTMLДокумент + "<body>" +
		"<div>" +
		"<div>" +
		
		"<div>" + 
		
		"<div>" +
		"<div class=""bottom_brd"">" +
		"<h3>" + ПредставлениеЭД(Document) + "</h3>" +
		"<h4 style=""margin-bottom: -15px;"">" + ?(ЭтоВходящийДокумент, "Получатель: ", "Отправитель: ") + Document.Organization.Name + "</h4>" +
		"<h4>" + ?(ЭтоВходящийДокумент, "Отправитель: ", "Получатель: ") + Document.Counteragent.Name + "</h4>" +
		"</div>" +
		"</div>";
		
		МассивРезолюций=	Document.Resolutions;
		
		Для Индекс = 0 По МассивРезолюций.Count - 1 Цикл
			
			Резолюция=	МассивРезолюций.GetItem(Индекс);
			
			Color=	"#0000FF";
			Если Резолюция.ResolutionType = "ResolutionApprove"
				ИЛИ Резолюция.ResolutionType = "SignatureApprove" Тогда
				Color=	"#00D403";
			ИначеЕсли  Резолюция.ResolutionType = "ResolutionDisapprove"
				ИЛИ Резолюция.ResolutionType = "SignatureDisapprove" Тогда
				Color=	"#FF0000";
			КонецЕсли;
			
			ResolutionType=	ПредставлениеТипаРезолюции(Резолюция.ResolutionType);
			
			Если Резолюция.ResolutionType = "ResolutionApprove" Тогда
				Пояснение=		"Согласовал: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "ResolutionDisapprove" Тогда
				Пояснение=		"Отклонил: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "SignatureApprove" Тогда
				Пояснение=		"Подписал: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "SignatureDisapprove" Тогда
				Пояснение=		"Отказал: " + Резолюция.Author;
			ИначеЕсли Резолюция.ResolutionType = "ResolutionRequest" ИЛИ 
				Резолюция.ResolutionType = "SignatureRequest" ИЛИ
				Резолюция.ResolutionType = "RevocationRequest" Тогда
				ПолучательРезолюции=	?(Резолюция.TargetDepartment = Неопределено, "", " " + Резолюция.TargetDepartment.Name) + 
				?(Резолюция.TargetUser = Неопределено, "", ?(Резолюция.TargetDepartment = Неопределено, " ",", ") + ПолучитьФИОСИнициалами(Резолюция.TargetUser.Name));
				
				Пояснение=				"" + ПолучитьФИОСИнициалами(Резолюция.Author) + ?(НЕ ПустаяСтрока(ПолучательРезолюции), " &rarr; " + ПолучательРезолюции, "");
			Иначе
				Пояснение=		"";
			КонецЕсли;
			
			HTMLДокумент=	HTMLДокумент +
			"<div class=""block_left"">" +
			
			"<div>" +
			
			"<div class= ""right_block"">" +
			
			"<div class=""block_resolutiontype"" style= ""color: " + Color + """>" +
			"<p2 align=""left"">" + ResolutionType + "</p2>" + 
			"</div>"
			
			"<div class=""right_block block_creationdate"" >" + 
			"<div>" +
			"<p2 align=""right""  style=""vertical-align: baseline"" > &nbsp; " + Формат(Резолюция.CreationDate, "ДФ='dd.MM.yy HH:mm'") + "</p2>" +
			"</div>" +
			"</div>" +
			
			"</div>" +
			
			"</div>" +
			
			"<div>" +
			"<div class=""block_author"">" +
			"<p1>" + Пояснение + "</p1>" +
			"</div>" +
			"</div>" +
			
			"<div>" + 
			"<div class=""block_comment"" style= ""background-color: #FFFBF0; white-space: normal; word-wrap: break-word"">" +
			"<p><pre>" + Резолюция.Comment + "</pre></p>" +
			"</div>" + 
			
			"<div class=""block_comment"">" + 
			"<p>&nbsp</p>" +
			"</div>" + 
			
			"</div>"+
			
			"</div>";
			
		КонецЦикла;
		
		HTMLДокумент=	HTMLДокумент + "</div></div></div></div></<body>";
		
		Возврат HTMLДокумент;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеAuthor(ResolutionStatus)
		
		Результат = "";
		
		Если ResolutionStatus.Author <> Неопределено Тогда
			Результат = ": " + ПолучитьФИОСИнициалами(ResolutionStatus.Author.Name);
		КонецЕсли;
		
		Возврат Результат;
				
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеTargetUser(ResolutionStatus)
		
		Результат = "";
		
		Если ResolutionStatus.TargetDepartment = Неопределено Тогда
			Результат = ": ";
		Иначе
			Результат = ResolutionStatus.TargetDepartment.Name;
		КонецЕсли;
		
		Если ResolutionStatus.TargetUser <> Неопределено Тогда
			
			Если ResolutionStatus.TargetDepartment <> Неопределено Тогда
				
				Результат = Результат + ", "; 
				
			КонецЕсли;
			
			Результат = Результат + ПолучитьФИОСИнициалами(ResolutionStatus.TargetUser.Name);
			
		КонецЕсли;
		
		Возврат Результат;
						
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеСтатусаСогласования(Document) Экспорт
		
		ResolutionStatus = Document.ResolutionStatus;
		
		Если ResolutionStatus = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		
		СтатусСогласования = ResolutionStatus.Type;
		
		АвторЗапроса 	= ПредставлениеAuthor(ResolutionStatus);
		Согласующий 	= ПредставлениеTargetUser(ResolutionStatus);
		
		Если СтатусСогласования = "Approved" Тогда
			Результат = "Согласовано" + АвторЗапроса;
		ИначеЕсли СтатусСогласования = "Disapproved" Тогда
			Результат = "Отказано в согласовании" + АвторЗапроса;
		ИначеЕсли СтатусСогласования = "ApprovementRequested" Тогда
			Результат = "На согласовании " + Согласующий;
		ИначеЕсли СтатусСогласования = "SignatureRequested" Тогда
			Результат = "На подписании " + Согласующий;
		Иначе
			Результат = "";
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьФИОСИнициалами(ФИО) Экспорт
		
		СтрокаФИОСИнициалами=	"";
		
		ИсходнаяСтрока=			ФИО;
		ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
		Фамилия=				Лев(ИсходнаяСтрока, ПозицияПослПробела);
		
		ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		ПозицияПослПробела=		Найти(ИсходнаяСтрока, " ");
		Имя=					Лев(ИсходнаяСтрока, ПозицияПослПробела);
		
		ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		Отчество=				ИсходнаяСтрока;
		ИсходнаяСтрока=			Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Если НЕ ПустаяСтрока(Фамилия) Тогда
			СтрокаФИОСИнициалами=	Фамилия + 
			?(НЕ ПустаяСтрока(Имя), Лев(Имя, 1) + ".", "") +
			?(НЕ ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", "");
		КонецЕсли;
		
		Возврат СтрокаФИОСИнициалами;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЕстьСвойствоCOMОбъекта(COMОбъект, ИмяСвойства, ЗначениеСвойства = "") Экспорт 
		
		Попытка
			ЗначениеСвойства = COMОбъект[ИмяСвойства];
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецФункции
	
//} ПРЕДСТАВЛЕНИЯ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Функция НастройкиИнтернетПодключения()
	
	Если КэшНастроекПодключения = Неопределено Тогда
		КэшНастроекПодключения = МетодСервера(, "НастройкиИнтернетПодключения");
	КонецЕсли;
	
	Возврат КэшНастроекПодключения;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНастройкиПрокси(НастройкиПрокси) Экспорт
	
	КэшНастроекПодключения = Неопределено;
	
	МетодСервера(, "СохранитьНастройкиПрокси", НастройкиПрокси);
	
	КонтекстСервера = СвойствоСтруктуры(Платформа.ПараметрыКлиент, "КонтекстРаботаССерверомДиадок");
	
	Если ЗначениеЗаполнено(КонтекстСервера) Тогда
		ЗаполнитьНастройкиИнтернетаКомпонентыДиадока(КонтекстСервера.DiadocInvoiceAPI);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОсновнойМодуль_ПередОтражениемДокументаВУчете(ЭлектронныйДокумент)
	
	МетодСервера(, "ПередОтражениемДокументаВУчете"
		, ЭлектронныйДокумент);
	
КонецПроцедуры

// Возвращает коллекцию функциональностей модуля, которые имеют ограничения
//
// Возвращаемое значение:
//	Структура, где 	ключ 		- произвольный идентификатор функциональности модуля
//					Значение	- текст предупреждения о том, что функциональность ограничена
&НаКлиенте
Функция ПереченьОграниченныхФункциональностей()
	
	Результат = Новый Структура;
	
	ИдентификаторКонфигурации = Платформа.Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
	
	Если ИдентификаторКонфигурации = "Розница" Тогда
		
		ЗаполнитьОграниченияФункциональностиРозница(Результат);
		
	ИначеЕсли ИдентификаторКонфигурации = "АльфаАвто6" Тогда
		
		ЗаполнитьОграниченияФункциональностиАльфаАвто6(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОграниченияФункциональностиРозница(Ограничения)
	
	Ограничения.Вставить(Врег("ЗагрузитьИОтправить"), "Отправка документов");
	Ограничения.Вставить(Врег("ОтправкаСвязанногоДокумента"), "Отправка связанного документа");
	Ограничения.Вставить(Врег("ГрупповаяОбработка_Сопоставить"), "Групповое сопоставление");
	Ограничения.Вставить(ВРег("Опция_ПоказатьЖурналДокументов"), "Журнал документов");
	Ограничения.Вставить(ВРег("Опция_ИспользоватьФормуВводаНакладной"), "Старый интерфейс для отражения документов в учете");
	Ограничения.Вставить(Врег("СоздатьДокумент1С_СтарыйИнтерфейс"), "Старый интерфейс для создания документов");
	Ограничения.Вставить(Врег("СопоставитьДокумент1С_СтарыйИнтерфейс"), "Старый интерфейс для сопоставления документов");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОграниченияФункциональностиАльфаАвто6(Ограничения)
	
	Ограничения.Вставить(Врег("ГрупповаяОбработка_Сопоставить"), "Групповое сопоставление");
	Ограничения.Вставить(ВРег("Опция_ПоказатьЖурналДокументов"), "Журнал документов");
	Ограничения.Вставить(ВРег("Опция_ИспользоватьФормуВводаНакладной"), "Старый интерфейс для отражения документов в учете");
	Ограничения.Вставить(Врег("СоздатьДокумент1С_СтарыйИнтерфейс"), "Старый интерфейс для создания документов");
	Ограничения.Вставить(Врег("СопоставитьДокумент1С_СтарыйИнтерфейс"), "Старый интерфейс для сопоставления документов");
	
КонецПроцедуры

// Проверяет есть ли ограничение на функциональность
// Параметры:
//	ИдентификаторФункциональности - Строка - произвольная строка, выступающая идентификатором
//
// Возвращаемое значение:
//	Булево - Истина, если функциональность имеет ограничение
&НаКлиенте
Функция ФункциональностьОграничена(ИдентификаторФункциональности) Экспорт
	
	ПереченьОграниченныхФункциональностей = ПереченьОграниченныхФункциональностей();
	
	Результат = ПереченьОграниченныхФункциональностей.Свойство(Врег(ИдентификаторФункциональности));
	
	Возврат Результат;

КонецФункции

// Показывает предупреждение пользователю о том, что функциональность модуля имеет ограничение
// Параметры:
//	ИдентификаторФункциональности - Строка - произвольный идентификатор функциональности
//											см. метод "ПереченьОграниченныхФункциональностей"
&НаКлиенте
Процедура ПоказатьПредупреждениеОбОграниченнииФункциональности(ИдентификаторФункциональности) Экспорт
	
	ПереченьОграниченныхФункциональностей = ПереченьОграниченныхФункциональностей();
	
	ПредставлениеФункциональности = Неопределено;
	
	ПереченьОграниченныхФункциональностей.Свойство(ВРег(ИдентификаторФункциональности), ПредставлениеФункциональности);
	Если Не ЗначениеЗаполнено(ПредставлениеФункциональности) Тогда
		ПредставлениеФункциональности = ИдентификаторФункциональности;
	КонецЕсли;

	ШаблонПредупреждения = НСтр("ru = 'Данная функциональность недоступна в текущей конфигурации (%1)'");
	ТекстПредупреждения = СтрШаблон(ШаблонПредупреждения, ПредставлениеФункциональности);
	
	ПоказатьПростоеПредупреждение(ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеВнешнейКомпоненты

// Подключает внешнюю компоненту к процессу программы
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//   * ВерсияКомпоненты        - Строка - версия подключенной компоненты;
//   * ТребуетсяПерезапуск     - Булево - Истина, если для подключения
//                                        требуется перезапуск программы;
//
&НаКлиенте
Функция ПодключитьКомпонентуДиадока() Экспорт
	
	МинимальнаяВерсия = МетодСервера(, "ВерсияВнешнейКомпоненты");
	ВерсияКомпоненты = СкачатьИлиНайтиНаДискеФайлКомпонентыДиадока();
	
	Если СравнитьВерсии(ВерсияКомпоненты, МинимальнаяВерсия) < 0 Тогда
		
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Версия доступной компоненты %1 ниже чем требуется %2'")
		, ВерсияКомпоненты, МинимальнаяВерсия);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	КомпонентаПодключена = КомпонентаУжеПодключенаЧерезРегистрацию();
	
	Если Не КомпонентаПодключена Тогда
		
		КомпонентаПодключена = ПодключитьКомпонентуДиадокаБезРегистрации(ВерсияКомпоненты);
		
		Если Не КомпонентаПодключена Тогда
			КомпонентаПодключена = ПодключитьКомпонентуДиадокаЧерезРегистрацию(ВерсияКомпоненты);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не КомпонентаПодключена Тогда
		
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось подключить внешнюю компоненту %1'")
		, ВерсияКомпоненты);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ПодключеннаяВерсия = ВерсияУстановленнойКомпонентыДиадока();
	ТребуетсяПерезапуск = (ВерсияКомпоненты <> ПодключеннаяВерсия);
	
	Результат = Новый Структура;
	Результат.Вставить("ВерсияКомпоненты"	, ВерсияКомпоненты);
	Результат.Вставить("ТребуетсяПерезапуск", ТребуетсяПерезапуск);
	
	Возврат Результат;
	
КонецФункции

// Создает новый com объект внешней компоненты Диадока
//
// Возвращаемое значение:
//  COMОбъект - Объект компоненты Диадока
//
&НаКлиенте
Функция НовыйОбъектКомпонентыДиадока() Экспорт
	
	ИдентификаторКласса = ИдентификаторКлассаКомпонентыДиадока();
	
	Результат = Новый COMОбъект(ИдентификаторКласса);
	
	Возврат Результат;
	
КонецФункции

// Проверяет и если нужно скачивает актуальную версию внешней компоненты
// Если скачать не удалось, находит последнюю подходящую версию на диске
// 
// Возвращаемое значение:
//  Строка - актуальная или подходящая версия компоненты
//
&НаКлиенте
Функция СкачатьИлиНайтиНаДискеФайлКомпонентыДиадока()
	
	Попытка
		
		Результат = СкачатьАктуальнуюВерсиюКомпонентыДиадока();
		
		ПолученаАктуальнаяВерсия = Истина;
		
	Исключение
		
		ПолученаАктуальнаяВерсия = Ложь;
		
		Ошибка = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(Ошибка);
		ВидОперации = "Скачивание файла компоненты Диадока";
		ТекстСообщения = НСтр("ru = 'Не удалось скачать файл компоненты Диадока'");
		АдресСтраницы = АдресаИнтернетРесурсов().СтраницаФайловВнешнейКомпоненты;
		Ошибка_Обработать(ВидОперации, ТекстОшибки, АдресСтраницы, ТекстСообщения);
		
	КонецПопытки;
	
	Если Не ПолученаАктуальнаяВерсия Тогда
		Результат = НайтиНаДискеПоследнююВерсиюКомпонентыДиадока();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подключает компоненту Диадока без регистрации в реестре MS Windows
//
// Параметры:
//  ТребуемаяВерсия - Строка - версия компоненты, которую нужно подключить
// 
// Возвращаемое значение:
//  Булево - Истина, если компоненту удалось подключить
//
&НаКлиенте
Функция ПодключитьКомпонентуДиадокаБезРегистрации(ТребуемаяВерсия)
	
	ПутьКФайлу = ПутьКФайлуКомпонентыДиадока(ТребуемаяВерсия);
	ИмяКомпоненты = ИмяКомпонентыДиадока();
	
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(ПутьКФайлу, ИмяКомпоненты, ТипВнешнейКомпоненты.Native);
	
	Возврат КомпонентаПодключена;
	
КонецФункции

// Регистрирует компоненту Диадока в реестре MS Windows,
// а затем подключает её к процессу программы
//
// Параметры:
//  ТребуемаяВерсия - Строка - версия компоненты, которую нужно подключить
// 
// Возвращаемое значение:
//  Булево - Истина, если компоненту удалось подключить
//
&НаКлиенте
Функция ПодключитьКомпонентуДиадокаЧерезРегистрацию(ТребуемаяВерсия)
	
	ПутьКФайлу = ПутьКФайлуКомпонентыДиадока(ТребуемаяВерсия);
	ИдентификаторКомпоненты = ИдентификаторОбъектаКомпонентыДиадока();
	
	// Пробуем подключить компоненту по ProgID, чтобы узнать её версию
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(ИдентификаторКомпоненты);
	ТекущаяВерсия		 = ВерсияУстановленнойКомпонентыДиадока();
	
	ТребуетсяПерезапуск	 = ЗначениеЗаполнено(ТекущаяВерсия) И ТекущаяВерсия <> ТребуемаяВерсия;
	ТребуетсяРегистрация = (ТекущаяВерсия <> ТребуемаяВерсия);
	
	Если ТребуетсяРегистрация Тогда
		
		ДождатьсяЗавершенияРегистрации = Не ТребуетсяПерезапуск;
		
		ЗарегистрироватьВнешнююКомпоненту(ПутьКФайлу, ДождатьсяЗавершенияРегистрации);
		
		Если Не ТребуетсяПерезапуск Тогда
			
			// Проверяем что компоненту удалось зарегистрировать в реестре
			КомпонентаПодключена = ПодключитьВнешнююКомпоненту(ИдентификаторКомпоненты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КомпонентаПодключена;
	
КонецФункции

// Регистрирует внешнюю компоненту в профиль пользователя реестра MS Windows
//
// Параметры:
//  ИмяФайла            - Строка - имя файла внешней компоненты
//  ДождатьсяЗавершения - Булево - Истина, если необходимо дождаться
//                                 завершения регистрации компоненты
//
&НаКлиенте
Процедура ЗарегистрироватьВнешнююКомпоненту(ИмяФайла, ДождатьсяЗавершения)
	
	// Компонента регистрируется только в профиль пользователя
	ЗапуститьПриложение("RegSvr32 """ + ИмяФайла + """ /s /n /i:user");
	
	Если ДождатьсяЗавершения Тогда
		
		// В Windows XP процесс RegSvr32 после регистрации не завершается,
		// поэтому использовать параметр ДождатьсяЗавершения
		// метода ЗапуститьПриложение() нельзя
		Таймаут(5000);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие подключенной к процессу программы компоненты
// зарегестрированной в реестре MS Windows
// 
// Возвращаемое значение:
//  Булево - Истина, если внешняя компонента была подключена
//
&НаКлиенте
Функция КомпонентаУжеПодключенаЧерезРегистрацию()
	
	ИдентификаторКомпоненты = ИдентификаторОбъектаКомпонентыДиадока();
	
	Попытка
		ОбъектКомпоненты = Новый(ИдентификаторКомпоненты);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	Результат = ОбъектКомпоненты <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Возвращает версию внешней компоненты,
// которая была подключена к процессу программы ранее
// или зарегистрирована в реестре MS Windows
// 
// Возвращаемое значение:
//  Строка       - версия внешней компоненты;
//  Неопределено - если компонента не подключена;
//
&НаКлиенте
Функция ВерсияУстановленнойКомпонентыДиадока()
	
	Результат = Неопределено;
	
	Попытка
		ОбъектКомпоненты = НовыйОбъектКомпонентыДиадока();
		Результат = ОбъектКомпоненты.GetVersion();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Находит в каталоге временных файлов самую свежую версию внешней компоненты
// 
// Возвращаемое значение:
//  Строка - версия найденной компоненты
//
&НаКлиенте
Функция НайтиНаДискеПоследнююВерсиюКомпонентыДиадока()
	
	ПоследняяВерсия = "";
	
	Префикс = ИмяКомпонентыДиадока() + "_";
	Постфикс = "_" + АрхитектураКомпонентыДиадока();
	
	НайденныеПапки = НайтиФайлы(КаталогВременныхФайлов(), Префикс + "*" + Постфикс);
	
	Для каждого Папка Из НайденныеПапки Цикл
		
		Если Не Папка.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ВерсияНаДиске = СтрЗаменить(Папка.Имя, Префикс, "");
		ВерсияНаДиске = СтрЗаменить(ВерсияНаДиске, Постфикс, "");
		ВерсияНаДиске = СтрЗаменить(ВерсияНаДиске, "_", ".");
		
		Попытка
			ВерсияНаДискеВышеПоследней = СравнитьВерсии(ВерсияНаДиске, ПоследняяВерсия) > 0;
		Исключение
			ВерсияНаДискеВышеПоследней = Ложь;
		КонецПопытки;
		
		Если ВерсияНаДискеВышеПоследней И ФайлКомпонентыЕстьНаДиске(ВерсияНаДиске) Тогда
			ПоследняяВерсия = ВерсияНаДиске;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоследняяВерсия;
	
КонецФункции

// Проверяет что указанная версия компоненты есть в каталоге временных файлов
//
// Параметры:
//  ВерсияКомпоненты - Строка - версия, которую нужно проверить
// 
// Возвращаемое значение:
//  Булево - Истина, если файл компоненты найден
//
&НаКлиенте
Функция ФайлКомпонентыЕстьНаДиске(ВерсияКомпоненты)
	
	ПутьКФайлу = ПутьКФайлуКомпонентыДиадока(ВерсияКомпоненты);
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Результат = Файл.Существует();
	
	Возврат Результат;
	
КонецФункции

// Возвращает архитектуру компоненты, которую нужно использовать
// зависит от разрядности программы
// 
// Возвращаемое значение:
//  Строка
//
&НаКлиенте
Функция АрхитектураКомпонентыДиадока()
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Если Найти(Строка(СисИнфо.ТипПлатформы), "64") > 0 Тогда
		Результат = "x86_64";
	Иначе
		Результат = "x86";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Путь к файлу компоненты в каталоге временных файлов,
// файл расположен в папке с номером версии и архитектурой
//
// Параметры:
//  ВерсияКомпоненты - Строка - версия, которую нужно записать
//                              в имя папки с файлом компоненты
// 
// Возвращаемое значение:
//  Строка
//
&НаКлиенте
Функция ПутьКФайлуКомпонентыДиадока(ВерсияКомпоненты)
	
	Архитектура = АрхитектураКомпонентыДиадока();
	ИмяКомпоненты = ИмяКомпонентыДиадока();
	
	// Имя файла должно быть точно таким же как в манифесте внутри компоненты,
	// поэтому версию и архитектуру записываем в имя папки
	ИмяФайла = ИмяКомпоненты + ".dll";
	ИмяПапки = ИмяКомпоненты + "_" + СтрЗаменить(ВерсияКомпоненты, ".", "_") + "_" + Архитектура;
	
	Результат = ОбъединитьПути(КаталогВременныхФайлов(), ИмяПапки, ИмяФайла);
	
	Возврат Результат;
	
КонецФункции

// Имя компоненты, как оно записано в манифесте файла dll
// 
// Возвращаемое значение:
//  Строка
//
&НаКлиенте
Функция ИмяКомпонентыДиадока()
	
	Возврат "AddInDiadocAPI";
	
КонецФункции

// Идентификатор объекта внешней компоненты
// в виде ProgID реестра MS Windows
// 
// Возвращаемое значение:
//  Строка
//
&НаКлиенте
Функция ИдентификаторОбъектаКомпонентыДиадока()
	
	Возврат "AddIn.DiadocInvoiceAPI";
	
КонецФункции

// Идентификатор класса внешней компоненты
// в виде ProgID класса COM
// 
// Возвращаемое значение:
//  Строка
//
&НаКлиенте
Функция ИдентификаторКлассаКомпонентыДиадока()
	
	Возврат "Diadoc.Api.InvoiceApi";
	
КонецФункции

#КонецОбласти

#Область ПолучениеВнешнейКомпонентыИзИнтернета

// Проверяет и если нужно скачивает на диск
// актуальную версию внешней компоненты
// 
// Возвращаемое значение:
//  Строка - актуальная версия компоненты
//
&НаКлиенте
Функция СкачатьАктуальнуюВерсиюКомпонентыДиадока()
	
	АктуальнаяВерсия = АктуальнаяВерсияКомпонентыДиадока();
	
	Если Не ФайлКомпонентыЕстьНаДиске(АктуальнаяВерсия) Тогда
		СкачатьКомпонентуДиадока(АктуальнаяВерсия);
	КонецЕсли;
	
	Возврат АктуальнаяВерсия;
	
КонецФункции

// Скачивает в каталог временных файлов
// необходимую версию внешней компоненты
//
// Параметры:
//  ВерсияКомпоненты - Строка - версия компоненты, которую нужно скачать
//
&НаКлиенте
Процедура СкачатьКомпонентуДиадока(ВерсияКомпоненты)
	
	ПутьКФайлу = ПутьКФайлуКомпонентыДиадока(ВерсияКомпоненты);
	ПутьКАрхиву = ПолучитьИмяВременногоФайла("zip");
	СсылкаНаАрхив = СсылкаНаФайлКомпонентыДиадока(ВерсияКомпоненты);
	
	Файл = Новый Файл(ПутьКФайлу);
	КаталогКомпоненты = Файл.Путь;
	
	ДвоичныеДанные = СкачатьФайлИзИнтернета(СсылкаНаАрхив);
	ДвоичныеДанные.Записать(ПутьКАрхиву);
	
	ЧтениеАрхива = Новый ЧтениеZipФайла(ПутьКАрхиву);
	ПервыйЭлемент = ЧтениеАрхива.Элементы[0];
	ЧтениеАрхива.Извлечь(ПервыйЭлемент, КаталогКомпоненты);
	
	ПутьКФайлуИзАрхива = ОбъединитьПути(КаталогКомпоненты, ПервыйЭлемент.Имя);
	
	ЧтениеАрхива.Закрыть();
	
	УдалитьФайлы(ПутьКАрхиву);
	
	ПереместитьФайл(ПутьКФайлуИзАрхива, ПутьКФайлу);
	
КонецПроцедуры

// Получает значение актуальной на текущий момент
// версии внешней компоненты
// 
// Возвращаемое значение:
//  Строка - актуальная версия компоненты
//
&НаКлиенте
Функция АктуальнаяВерсияКомпонентыДиадока()
	
	ИмяФайлаВерсии = "version.txt";
	
	АдресСтраницы = АдресаИнтернетРесурсов().СтраницаФайловВнешнейКомпоненты;
	
	СтруктураURI = СтруктураURI(АдресСтраницы);
	
	ПараметрыСервиса = ОбщиеПараметрыHTTPСервиса();
	ПараметрыЗапроса = НовыеПараметрыHTTPЗапроса();
	
	ПараметрыСервиса.АдресВебСервиса = СтруктураURI.Хост;
	ПараметрыЗапроса.АдресМетода = СтруктураURI.ПутьНаСервере + "/" + ИмяФайлаВерсии;
	
	Ответ = ВыполнитьHTTPЗапрос(ПараметрыСервиса, ПараметрыЗапроса);
	
	Результат = Ответ.ТелоОтвета;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СсылкаНаФайлКомпонентыДиадока(ВерсияКомпоненты)
	
	АдресСтраницы = АдресаИнтернетРесурсов().СтраницаФайловВнешнейКомпоненты;
	ИмяАрхива = ИмяИнтернетАрхиваКомпонентыДиадока(ВерсияКомпоненты);
	
	Результат = АдресСтраницы + "/" + ИмяАрхива;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИмяИнтернетАрхиваКомпонентыДиадока(ВерсияКомпоненты)
	
	Префикс = "Diadoc_";
	Расширение = "zip";
	
	ВерсияБезТочек = СтрЗаменить(ВерсияКомпоненты, ".", "_");
	
	Если АрхитектураКомпонентыДиадока() = "x86_64" Тогда
		Архитектура = "_x64";
	Иначе
		Архитектура = "";
	КонецЕсли;
	
	Результат = Префикс + ВерсияБезТочек + Архитектура + "." + Расширение;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНастройкиИнтернетаКомпонентыДиадока(ОбъектКомпоненты) Экспорт
	
	НастройкиПодключения = НастройкиИнтернетПодключения();
	НастройкиПрокси = НастройкиПодключения.НастройкиПрокси;
	РежимПрокси = НастройкиПрокси.ВариантИспользования;
	
	ОбъектКомпоненты.ServerURL	 = КэшНастроекПодключения.АдресАПИ;
	ОбъектКомпоненты.ApiClientId = КэшНастроекПодключения.КлючРазработчика;
	
	Если РежимПрокси = "ИспользоватьНастройкиIE" Тогда
		
		ОбъектКомпоненты.ProxyMode = "UseDefaultProxy";
		
	ИначеЕсли РежимПрокси = "ИспользоватьПроксиСервер" Тогда
		
		ОбъектКомпоненты.ProxyMode = "UseProxy";
		ОбъектКомпоненты.ProxySettings.URL		 = НастройкиПрокси.АдресПорт;
		ОбъектКомпоненты.ProxySettings.Login	 = НастройкиПрокси.Логин;
		ОбъектКомпоненты.ProxySettings.Password	 = НастройкиПрокси.Пароль;
		
	Иначе
		
		ОбъектКомпоненты.ProxyMode = "NoProxy";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВстроенныйТранспортHTTP

#Область МетодыАпиДиадока

&НаКлиенте
Функция DD_API_GetOrganizationsByInnKpp(ПараметрыСервиса, Inn, Knn)
	
	//https://api-docs.diadoc.ru/ru/latest/http/GetOrganizationsByInnKpp.html
	
	ПараметрыЗапроса = НовыеПараметрыHTTPЗапроса();
	
	ПараметрыЗапроса.АдресМетода = "/GetOrganizationsByInnKpp";
	
	ПараметрыЗапроса.Параметры.Вставить("Inn", Inn);
	ПараметрыЗапроса.Параметры.Вставить("Knn", Knn);
	
	ДобавитьЗаголовокАвторизацииДиадок(ПараметрыСервиса, ПараметрыЗапроса);
	
	Ответ = ВыполнитьHTTPЗапрос(ПараметрыСервиса, ПараметрыЗапроса);
	
	Результат = ЗначениеИзСтрокиJSON(Ответ.ТелоОтвета);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

// Проверят связь с сервисом Диадока
// с помощью запроса данных служебной организации
//
// Параметры:
//  НастройкиПрокси - Структура - (необязательный) см. НастройкиПроксиСервера()
//                                если не указаны то используются сохраненные настройки
// 
// Возвращаемое значение:
//  Булево - Истина, если связь с сервисом есть
//
&НаКлиенте
Функция ПроверитьИнтернетПодключение(НастройкиПрокси = Неопределено) Экспорт
	
	КэшИнтернетСоединений = Неопределено;
	
	ПараметрыСервиса = ОбщиеПараметрыHTTPСервиса();
	
	Если ЗначениеЗаполнено(НастройкиПрокси) Тогда
		ПараметрыСервиса.НастройкиПрокси = НастройкиПрокси;
	КонецЕсли;
	
	ИНН = 1;
	КПП = 1;
	
	Попытка
		Ответ = DD_API_GetOrganizationsByInnKpp(ПараметрыСервиса, ИНН, КПП);
		Результат = Истина;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		Результат = Ложь;
	КонецПопытки;
	
	КэшИнтернетСоединений = Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Скачивает файл из интернета по ссылке
//
// Параметры:
//  СсылкаНаФаил - Строка - URL адрес файла в интернете
// 
// Возвращаемое значение:
//  ДвоичныеДанные - скаченный файл
//
&НаКлиенте
Функция СкачатьФайлИзИнтернета(СсылкаНаФаил)
	
	СтруктураURI = СтруктураURI(СсылкаНаФаил);
	
	ПараметрыСервиса = ОбщиеПараметрыHTTPСервиса();
	ПараметрыЗапроса = НовыеПараметрыHTTPЗапроса();
	
	ПараметрыСервиса.АдресВебСервиса = СтруктураURI.Хост;
	ПараметрыЗапроса.АдресМетода = СтруктураURI.ПутьНаСервере;
	
	ПараметрыЗапроса.ТелоОтветаКакДвоичныеДанные = Истина;
	
	Ответ = ВыполнитьHTTPЗапрос(ПараметрыСервиса, ПараметрыЗапроса);
	
	Результат = Ответ.ТелоОтвета;
	
	Возврат Результат;
	
КонецФункции

// Выполняет HTTP запрос и проверяет, что код ответа является допустимым
//
// Параметры:
//  ПараметрыСервиса - Структура - см. ОбщиеПараметрыHTTPСервиса();
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыHTTPЗапроса();
// 
// Возвращаемое значение:
//  Структура - см. ВыполнитьИнтернетЗапросИПрочитатьОтвет()
//
&НаКлиенте
Функция ВыполнитьHTTPЗапрос(ПараметрыСервиса, ПараметрыЗапроса)
	
	Попытка
		
		Результат = ВыполнитьHTTPЗапросИПрочитатьОтвет(ПараметрыСервиса, ПараметрыЗапроса);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбработатьОшибкуHTTP(ПараметрыСервиса, ПараметрыЗапроса, ТекстОшибки);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если НЕ Результат.КодОтветаДопустимый Тогда
		
		ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Ошибка HTTP запроса
		|Код ошибки: %1
		|%2'"), Результат.КодОтвета, Результат.ТелоОтвета);
		
		ОбработатьОшибкуHTTP(ПараметрыСервиса, ПараметрыЗапроса, ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет HTTP запрос средствами платформы и получает необходимые данные из ответа
//
// Параметры:
//  ПараметрыСервиса - Структура - см. ОбщиеПараметрыHTTPСервиса();
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыHTTPЗапроса();
// 
// Возвращаемое значение:
//  Структура - содержит свойства:
//   * КодОтвета           - Число                  - код ответа от http сервера;
//   * ТелоОтвета          - Строка, ДвоичныеДанные - тело ответа;
//   * Заголовки           - Соответствие           - заголовки ответа;
//   * КодОтветаДопустимый - Булево                 - Истина, если код ответа является
//                                                    допустимым для запроса;
//
&НаКлиенте
Функция ВыполнитьHTTPЗапросИПрочитатьОтвет(ПараметрыСервиса, ПараметрыЗапроса)
	
	ДопустимыеКодыОтвета		 = ПараметрыЗапроса.ДопустимыеКодыОтвета;
	ТелоОтветаКакДвоичныеДанные	 = ПараметрыЗапроса.ТелоОтветаКакДвоичныеДанные;
	
	Ответ = ОтправитьHTTPЗапрос(ПараметрыСервиса, ПараметрыЗапроса);
	
	КодОтвета			 = Ответ.КодСостояния;
	ЗаголовкиОтвета		 = Ответ.Заголовки;
	КодОтветаДопустимый	 = ДопустимыеКодыОтвета.Найти(КодОтвета) <> Неопределено;
	
	Если ТелоОтветаКакДвоичныеДанные И КодОтветаДопустимый Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("КодОтвета"			, КодОтвета);
	Результат.Вставить("ТелоОтвета"			, ТелоОтвета);
	Результат.Вставить("Заголовки"			, ЗаголовкиОтвета);
	Результат.Вставить("КодОтветаДопустимый", КодОтветаДопустимый);
	
	Возврат Результат;
	
КонецФункции

// Выполняет отправку встроенного в платформу HTTP запроса
//
// Параметры:
//  ПараметрыСервиса - Структура - см. ОбщиеПараметрыHTTPСервиса();
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыHTTPЗапроса();
// 
// Возвращаемое значение:
//  HTTPОтвет
//
&НаКлиенте
Функция ОтправитьHTTPЗапрос(ПараметрыСервиса, ПараметрыЗапроса)
	
	Метод		 = ПараметрыЗапроса.Метод;
	АдресМетода	 = ПараметрыЗапроса.АдресМетода;
	ТелоЗапроса	 = ПараметрыЗапроса.ТелоЗапроса;
	Заголовки	 = ПараметрыЗапроса.Заголовки;
	ПараметрыHTTPЗапроса = ПараметрыЗапроса.Параметры;
	
	Соединение	 = HTTPСоединение(ПараметрыСервиса);
	АдресРесурса = АдресРесурсаHTTP(АдресМетода, ПараметрыHTTPЗапроса);
	HTTPЗапрос	 = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если Метод = "GET" Тогда
		
		Результат = Соединение.Получить(HTTPЗапрос);
		
	ИначеЕсли Метод = "POST" Тогда
		
		Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
			
			Если ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
				
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса
				, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
				
			Иначе
				
				HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Записывает информацию об ошибке в журнал регистрации
//
// Параметры:
//  ПараметрыСервиса - Структура - см. ОбщиеПараметрыHTTPСервиса();
//  ПараметрыЗапроса - Структура - см. НовыеПараметрыHTTPЗапроса();
//  ТекстОшибки      - Строка    - текст ошибки, которую надо записать;
//
&НаКлиенте
Процедура ОбработатьОшибкуHTTP(ПараметрыСервиса, ПараметрыЗапроса, ТекстОшибки)
	
	Метод			 = ПараметрыЗапроса.Метод;
	АдресМетода		 = ПараметрыЗапроса.АдресМетода;
	АдресВебСервиса	 = ПараметрыСервиса.АдресВебСервиса;
	ДопИнформация	 = Новый Массив;
	
	ВидОперации = ПодставитьПараметрыВСтроку(НСтр(
	"ru = 'HTTP запрос в сервис %1'"), АдресВебСервиса);
	
	ДопИнформация.Добавить(ПодставитьПараметрыВСтроку(НСтр(
	"ru = 'Метод: %1'"), Метод));
	
	ДопИнформация.Добавить(ПодставитьПараметрыВСтроку(НСтр(
	"ru = 'Адрес метода: https:// %1%2'"), АдресВебСервиса, АдресМетода));
	
	Ошибка_Обработать(ВидОперации, ТекстОшибки, ДопИнформация);
	
КонецПроцедуры

// Возвращает объект HTTP cоединение по адресу вэб сервиса
//
// Параметры:
//  ПараметрыСервиса - Структура - см. функцию ядра ПараметрыСервиса().
//
// Возвращаемое значение:
//   HTTPСоединение - если ИспользоватьВнешнийHTTP() = Ложь;
//   COMОбъект      - если ИспользоватьВнешнийHTTP() = Истина;
//
&НаКлиенте
Функция HTTPСоединение(ПараметрыСервиса)
	
	АдресВебСервиса = ПараметрыСервиса.АдресВебСервиса;
	Порт = 443;
	
	Если КэшИнтернетСоединений = Неопределено Тогда
		КэшИнтернетСоединений = Новый Соответствие;
	КонецЕсли;
	
	Результат = КэшИнтернетСоединений.Получить(АдресВебСервиса);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Прокси = НовыйИнтернетПрокси(ПараметрыСервиса.НастройкиПрокси);
	Таймаут = 180;
	
	Результат = Новый HTTPСоединение(АдресВебСервиса, Порт
	,
	,
	, Прокси
	, Таймаут
	, Новый ЗащищенноеСоединениеOpenSSL);
	
	КэшИнтернетСоединений.Вставить(АдресВебСервиса, Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЗаголовокАвторизацииДиадок(ПараметрыСервиса, ПараметрыЗапроса)
	
	Токен			 = ПараметрыСервиса.Токен;
	КлючРазработчика = ПараметрыСервиса.КлючРазработчика;
	Заголовки		 = ПараметрыЗапроса.Заголовки;
	
	ТекстЗаголовка = "DiadocAuth ddauth_api_client_id=" + КлючРазработчика;
	
	Если ЗначениеЗаполнено(Токен) Тогда
		
		ТекстЗаголовка = ТекстЗаголовка + ",ddauth_token=" + Токен;
		
	КонецЕсли;
	
	Заголовки.Вставить("Authorization", ТекстЗаголовка);
	
КонецПроцедуры

// Вычисляет адрес ресурса по имени метода API и его параметрам
//
&НаКлиенте
Функция АдресРесурсаHTTP(ИмяМетода, ПараметрыHTTPЗапроса = Неопределено)
	
	ПараметрыСтрокой = "";
	
	Если ЗначениеЗаполнено(ПараметрыHTTPЗапроса) Тогда
		
		Если Найти(ИмяМетода, "?") = 0 Тогда
			Разделитель = "?";
		Иначе
			Разделитель = "&";
		КонецЕсли;
		
		Для Каждого Параметр Из ПараметрыHTTPЗапроса Цикл
			// Метод ПодставитьПараметрыВСтроку использовать нельзя, в параметрах может быть %n
			ПараметрыСтрокой = ПараметрыСтрокой + Разделитель + Параметр.Ключ + "=" + Параметр.Значение;
			Разделитель = "&";
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = ИмяМетода + ПараметрыСтрокой;
	
	Возврат Результат;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры
// На основе RFC 3986 (метод БСП)
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//
&НаКлиенте
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Создает и заполняет новый объект ИнтернетПрокси
//
// Параметры:
//  НастройкиПрокси - Структура - см. НастройкиПроксиСервера()
// 
// Возвращаемое значение:
//  ИнтернетПрокси
//
&НаКлиенте
Функция НовыйИнтернетПрокси(НастройкиПрокси)
	
	РежимПрокси = НастройкиПрокси.ВариантИспользования;
	
	Если РежимПрокси = "ИспользоватьПроксиСервер" Тогда
		
		Адрес	 = НастройкиПрокси.Адрес;
		Логин	 = НастройкиПрокси.Логин;
		Пароль	 = НастройкиПрокси.Пароль;
		Порт	 = Неопределено;
		
		Если ЗначениеЗаполнено(НастройкиПрокси.Порт) Тогда
			ОписаниеЧисла = Новый ОписаниеТипов("Число");
			Порт = ОписаниеЧисла.ПривестиЗначение(НастройкиПрокси.Порт);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			ВызватьИсключение "Не заполнены настройки прокси сервера";
		КонецЕсли;
		
		Результат = Новый ИнтернетПрокси;
		
		Если ЗначениеЗаполнено(Логин) Тогда
			
			Результат.Установить("http"	, Адрес, Порт, Логин, Пароль, Ложь);
			Результат.Установить("https", Адрес, Порт, Логин, Пароль, Ложь);
			
		Иначе
			
			Результат.Установить("http"	, Адрес, Порт);
			Результат.Установить("https", Адрес, Порт);
			
		КонецЕсли;
		
	ИначеЕсли РежимПрокси = "ИспользоватьНастройкиIE" Тогда
		
		Результат = Новый ИнтернетПрокси(Истина);
		// Будет использован прокси по умолчанию:
		// либо из файла inetcfg.xml, если он расположен на данной машине, либо из настроек Internet Explorer.
		// Пример файла inetcfg.xml можно найти в официальной документации:
		// https://its.1c.ru/db/v8doc#content:26:1:issogl1_3.13.inetcfg.xml
		
	Иначе
		
		Результат = Новый ИнтернетПрокси(Ложь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбщиеПараметрыHTTPСервиса()
	
	НастройкиПодключения = НастройкиИнтернетПодключения();
	
	Результат = НовыеПараметрыHTTPСервиса();
	
	СтруктураURI = СтруктураURI(КэшНастроекПодключения.АдресАпи);
	
	Результат.АдресВебСервиса	 = СтруктураURI.Хост;
	Результат.КлючРазработчика	 = НастройкиПодключения.КлючРазработчика;
	Результат.НастройкиПрокси	 = НастройкиПодключения.НастройкиПрокси;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НовыеПараметрыHTTPСервиса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Токен");
	Результат.Вставить("АдресВебСервиса");
	Результат.Вставить("КлючРазработчика");
	Результат.Вставить("НастройкиПрокси");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НовыеПараметрыHTTPЗапроса()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Метод");
	Результат.Вставить("АдресМетода");
	Результат.Вставить("ТелоЗапроса");
	Результат.Вставить("Параметры"					, Новый Структура);
	Результат.Вставить("Заголовки"					, Новый Соответствие);
	Результат.Вставить("ДопустимыеКодыОтвета"		, Новый Массив);
	Результат.Вставить("ТелоОтветаКакДвоичныеДанные", Ложь);
	
	Результат.Метод = "GET";
	
	Результат.Заголовки.Вставить("Accept"		, "application/json");
	Результат.Заголовки.Вставить("Content-Type"	, "application/json;charset=utf-8");
	
	Результат.ДопустимыеКодыОтвета.Добавить(200);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Вызывает регистрацию ошибки в журнал регистрации и списке ошибок, а также сообщение пользователю.
//
// Параметры:
//  ВидОперации			 - Строка - вид операции при которой возникла ошибка.
//  ПодробныйТекстОшибки - Строка - подробное описание ошибки, с номером строки кода и т.д.
//  ТекстСообщения		 - Строка - текст сообщения пользователю.
//  ИдентификаторФормы	 - УникальныйИдентификатор - см. процедуру Ошибка_СообщитьПользователю
//  ПолеФормы			 - Строка                  - см. процедуру Ошибка_СообщитьПользователю
//
&НаКлиенте
Процедура Ошибка_Обработать(ВидОперации, ПодробныйТекстОшибки
	, ДопИнформация		 = Неопределено
	, ТекстСообщения	 = Неопределено
	, ИдентификаторФормы = Неопределено
	, ПолеФормы			 = Неопределено)
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		Если ЗначениеЗаполнено(ПодробныйТекстОшибки) Тогда
			ТекстСообщенияПользователю = ТекстСообщения + Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		Иначе
			ТекстСообщенияПользователю = ТекстСообщения;
		КонецЕсли;
		
		Ошибка_СообщитьПользователю(ТекстСообщенияПользователю, ИдентификаторФормы, ПолеФормы);
		
	КонецЕсли;
	
	Если Прав(ВидОперации, 1) <> "." Тогда
		ВидОперации = ВидОперации + ".";
	КонецЕсли;
	
	ПредставлениеОперации		 = СтрШаблон(НСтр("ru = 'Выполнение операции: %1'"), ВидОперации);
	ПредставлениеДопИнформации	 = СтрСоединить(ЗначениеВМассив(ДопИнформация), Символы.ПС);
	
	Если ЗначениеЗаполнено(ПодробныйТекстОшибки) Тогда
		ТекстОшибкиДляЖурналаРегистрации = ПодробныйТекстОшибки;
	Иначе
		ТекстОшибкиДляЖурналаРегистрации = ТекстСообщения;
	КонецЕсли;
	
	СтрокиОшибки = ПараметрыВМассив(ПредставлениеОперации, ТекстОшибкиДляЖурналаРегистрации, ПредставлениеДопИнформации);
	ТекстОшибки	 = СтрСоединить(СтрокиОшибки, Символы.ПС);
	
	Ошибка_ДобавитьВЖурналРегистрации(ТекстОшибки);
	
КонецПроцедуры

// Выполняет запись ошибки в журнал регистрации.
//
// Параметры:
//  ТекстОшибки - Строка - подробное описание ошибки, с номером строки кода и т.д.
//
&НаСервере
Процедура Ошибка_ДобавитьВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации("Диадок", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	
КонецПроцедуры

// Формирует и выводит сообщение, которое может быть "привязано" к форме.
//
// Параметры:
//  ТекстСообщения     - Строка                  - текст выводимого сообщения.
//  ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы, к которой должно быть "привязано" сообщение.
//                                                 Если не указан, сообщение привязывается к активному окну.
//  ПолеФормы          - Строка                  - путь к реквизиту формы, для которого нужно вывести сообщение.
//
// Варианты вызова:
//   СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'")) - Сообщение будет "привязано" к активной форме.
//
//   СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),
//   ОбщийКонтекстКлиентСервер.ИдентификаторФормы)       - Сообщение будет "привязано" к основной форме.
//
//   СообщитьПользователю(НСтр("ru = 'Сообщение об ошибке.'"),
//   ОбщийКонтекстКлиентСервер.ИдентификаторФормы,
//   "Объект.СписокДокументов[2]")                             - Сообщение выводится в списке документов основной формы
//                                                               рядом со строкой с индексом 2.
//
Процедура Ошибка_СообщитьПользователю(ТекстСообщения, ИдентификаторФормы = Неопределено, ПолеФормы = Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = ТекстСообщения;
	
	Если ЗначениеЗаполнено(ИдентификаторФормы) Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторФормы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолеФормы) Тогда
		Сообщение.Поле = ПолеФормы;
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти


//{ УПРАВЛЕНИЕ ФОРМОЙ

	&НаКлиенте
	Функция СформироватьПредставлениеКнопкиСоздатьДокументВ1С(Документ1С, ЭДОбъект, МассивСсылокРНК, ПодходящаяСФ) Экспорт 
		
		ПредставлениеКнопки = "";
		
		Если ЗначениеЗаполнено(Документ1С)
			Или ЭДОбъект.Direction <> "Inbound" Тогда
			Возврат ПредставлениеКнопки;
		КонецЕсли;
		
		ФорматЭД = ФорматЭлектронногоДокумента(ЭДОбъект);
		
		ИмяТипа = ФорматЭД.ИмяТипа;
		ФункцияДокумента = ФорматЭД.ФункцияДокумента;
		
		Если ИмяТипа = "UniversalTransferDocument" И ФункцияДокумента = "СЧФ"
			Или ИмяТипа = "Invoice" Тогда
			
			СокращенноеИмяДокумента = "СФ";
			
		ИначеЕсли ИмяТипа = "UniversalTransferDocumentRevision" И ФункцияДокумента = "СЧФ"
			И ИмяТипа = "InvoiceRevision" Тогда
			
			СокращенноеИмяДокумента = "ИСФ";
			
		ИначеЕсли ИмяТипа = "UniversalCorrectionDocument" И ФункцияДокумента = "КСЧФ"
			Или ИмяТипа = "InvoiceCorrection" Тогда
			
			СокращенноеИмяДокумента = "КСФ";
			
		ИначеЕсли ИмяТипа = "UniversalCorrectionDocumentRevision" И ФункцияДокумента = "КСЧФ"
			Или ИмяТипа = "InvoiceCorrectionRevision" Тогда
			СокращенноеИмяДокумента = "ИКСФ";
			
		Иначе
			СокращенноеИмяДокумента = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СокращенноеИмяДокумента) Тогда
			
			Если ЗначениеЗаполнено(ПодходящаяСФ) Тогда
				ПредставлениеКнопки= "Сопоставить с "+СокращенноеИмяДокумента+" в 1С";
			ИначеЕсли МассивСсылокРНК.Количество() > 0 И (ИмяТипа = "Invoice") Тогда
				ПредставлениеКнопки= "Создать на основании накладной";
			Иначе
				ПредставлениеКнопки= "Создать "+СокращенноеИмяДокумента+" в 1С";
			КонецЕсли;
			
		Иначе
			
			ПредставлениеКнопки= "Создать документ в 1С";
			
		КонецЕсли;
		
		Возврат ПредставлениеКнопки;
		
	КонецФункции
	
//} УПРАВЛЕНИЕ ФОРМОЙ

//{ ПРЕДСТАВЛЕНИЯ

	&НаКлиенте
	Функция СтрокаКоличествоДокументов(КоличествоДокументов) Экспорт
		
		ЧислоПрописью	 = ЧислоПрописью(КоличествоДокументов, ,",,,,,,,,0");
		ОбщаяСтрока		 = ЧислоПрописью(КоличествоДокументов, ,"документ, документа, документов, м,,,,,0");
		Результат		 = Строка(КоличествоДокументов) + " " + СтрЗаменить(ОбщаяСтрока, ЧислоПрописью, "");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция ЗначениеПоляМеты(ЭДОбъект, ИмяПоля)
		
		МаксИндекс = ЭДОбъект.Metadata.Count - 1;
		ИмяПоляВРег = ВРег(ИмяПоля);
		
		Результат = Неопределено;
		
		Для Индекс = 0 По МаксИндекс Цикл
			
			КлючЗначение = ЭДОбъект.Metadata.GetItem(Индекс);
			
			Если ВРег(КлючЗначение.Key) = ИмяПоляВРег Тогда
				Результат = КлючЗначение.Value;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПредставлениеНомераЭД(ЭДОбъект) Экспорт
		
		РеквизитыДокумента = Новый Структура;
		РеквизитыДокумента.Вставить("DocumentNumber");
		РеквизитыДокумента.Вставить("OriginalDocumentNumber");
		РеквизитыДокумента.Вставить("RevisionNumber");
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ЭДОбъект);
		
		Если Не ЗначениеЗаполнено(РеквизитыДокумента.RevisionNumber) Тогда
			РеквизитыДокумента.RevisionNumber = ЗначениеПоляМеты(ЭДОбъект, "RevisionNumber");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.OriginalDocumentNumber) Тогда
			
			НомерДокумента = РеквизитыДокумента.OriginalDocumentNumber;
			НомерИсправления = РеквизитыДокумента.DocumentNumber;
			
		ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.RevisionNumber) Тогда
			
			НомерДокумента = РеквизитыДокумента.DocumentNumber;
			НомерИсправления = РеквизитыДокумента.RevisionNumber;
			
		Иначе
			
			НомерДокумента = РеквизитыДокумента.DocumentNumber;
			НомерИсправления = Неопределено;
		
		КонецЕсли;
		
		Результат = НомерДокумента;
		Если ЗначениеЗаполнено(НомерИсправления) Тогда
			
			Результат = СтрШаблон("%1 (испр. %2)"
				, НомерДокумента
				, НомерИсправления);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
//} ПРЕДСТАВЛЕНИЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	&НаКлиентеНаСервереБезКонтекста
	Функция НайтиСтрокиВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) //вместо НайтиСтроки таблицы значений
		
		Результат = Новый Массив;
		
		Для Каждого Стр из МассивСтруктур Цикл
			БылоНесоответствие = Ложь;
			Для Каждого Стр1 из ПараметрыОтбора Цикл
				Если СокрЛП(ПараметрыОтбора[Стр1.Ключ]) <>  СокрЛП(Стр[Стр1.Ключ]) Тогда
					БылоНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если БылоНесоответствие = Ложь Тогда
				Результат.Добавить(Стр);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция BoxID_2_Организация_Форма(BoxID, DepartmentKpp = "") Экспорт 
		Возврат МетодСервера(,"BoxID_2_Организация", BoxID, DepartmentKpp);
	КонецФункции
	
	&НаСервере
	Функция CounteragentBoxID_2_Контрагент_Форма(CounteragentID, BoxID = Неопределено) экспорт 
		Возврат МетодСервера(,"CounteragentBoxID_2_Контрагент", CounteragentID, BoxID);
	КонецФункции
		
	// Возвращает коллекцию COM-объектов типа Counteragent по запрошенной организации и статусу.
	//
	// Параметры:
	//  Организация – СправочникСсылка.Организации – организация, по которой необходимо получить список контрагентов;
	//  Status – Строка – статус, в котором находятся контрагенты; возможные статусы перечислены в документации в методе GetCounteragentListByStatus.
	// 
	// Возвращаемое значение:
	//  Коллекция COM-объектов типа Counteragent, Неопределено – если контрагенты в запрошенном статусе существуют, то возвращается их коллекция, в противном случае возвращается Неопределено.
	//
	&НаКлиенте
	Функция GetCounteragentListByStatus(Организация, Status) Экспорт
		
		Результат = Неопределено;
		
		Box = ПолучитьЯщикДиадокДляОрганизации(Организация);
		
		Если Box <> Неопределено Тогда
			Результат = Box.GetCounteragentListByStatus(Status);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции //GetCounteragentListByStatus()
	
	// Проверяет, что объект ИнформацияОбОшибке содержит сведения об ошибках валидации.
	// Проверка осуществляет путем парсинга текста ошибки. Если текст содержит HTML,
	// значит это ошибка, сгенерированная подсистемой валидации контента.
	//
	// Параметры:
	//  ИнформацияОбОшибке - ИнформацияОбОшибке - сведения об ошибке.
	// 
	// Возвращаемое значение:
	//  Булево.
	//
	&НаКлиенте
	Функция ЭтоИнформацияОбОшибкахВалидации(ИнформацияОбОшибке) Экспорт
		
		Результат = Ложь;
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Если Найти(ВРег(ТекстОшибки), "<HTML>") = 1 Тогда
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Интерпретирует текст ошибки, возвращаемый исключением
	//
	// Параметры:
	//	ТекстОшибки	-	Строка	- интерпретируемый текст
	//
	// Возвращаемое значение:
	//	Строка
	&НаКлиенте
	Функция СформироватьТекстОшибкиДиадок(Знач ТекстОшибки) Экспорт
		
		КраткоеСообщение	= ТекстОшибки;
		КраткоеСообщение	= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "##") + 1);
		КраткоеСообщение	= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "[" ) + 1);
		КраткоеСообщение	= Сред(КраткоеСообщение, Найти(КраткоеСообщение, "]" ) + 1);
		
		НаименованиеСистемыРодительныйПадеж = Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		
		Если ЭтоОшибкаОтсутствиеРегистрацииФНС(КраткоеСообщение) Тогда
			
			ПодстрокаПоиска	= "is not registered in FNS for box";
			ДлинаПодстроки	= СтрДлина(ПодстрокаПоиска);
			
			BoxID	= Сред(КраткоеСообщение, Найти(КраткоеСообщение, ПодстрокаПоиска) + ДлинаПодстроки);
			BoxID	= Лев(BoxID, Найти(BoxID, ".") - 1);
			
			ОтпечатокСертификата	= Лев(КраткоеСообщение, Найти(КраткоеСообщение, ПодстрокаПоиска) - 1);
			
			ПодстрокаПоиска = "Signer certificate";
			ДлинаПодстроки	= СтрДлина(ПодстрокаПоиска);
			ОтпечатокСертификата = Сред(ОтпечатокСертификата, Найти(ОтпечатокСертификата, ПодстрокаПоиска) + ДлинаПодстроки);
			ОтпечатокСертификата = СокрЛП(ОтпечатокСертификата);
			
			Результат	=
			"Сертификат, которым подписано сообщение, не зарегистрирован в ФНС.
			|Для решения данной проблемы обратитесь в техподдержку.
			|Отладочная информация: 
			|Отпечаток сертификата: " + ОтпечатокСертификата + "
			|Идентификатор ящика организации: " + BoxID;
			
		ИначеЕсли МетодКлиента("Модуль_РаботаССерверомДиадок", "ЭтоОшибкаАпиНеНастроеныПараметрыПодписания", ТекстОшибки) Тогда
			
			Результат = "Для сертификата, которым подписано сообщение, не настроены параметры подписи.";
			
		ИначеЕсли Найти(ТекстОшибки, "##3") > 0 Тогда
			
			// ошибки крипто про
			
			Результат = "Произошла ошибка при работе с КриптоПро:
						 |" + КраткоеСообщение;
			
		ИначеЕсли Найти(ТекстОшибки, "##1") > 0 Тогда
			
			// ошибки сервера Диадок
			
			Результат = ТекстОшибкиДиадокСерии_100(ТекстОшибки, КраткоеСообщение); 
												   
		ИначеЕсли Найти(ТекстОшибки, "##2") > 0 Тогда
			
			// ошибки передачи данных
			
			Результат = ТекстОшибкиДиадокСерии_200(КраткоеСообщение);
								
		ИначеЕсли Найти(ТекстОшибки, "##9") > 0 Тогда
			
			Результат = КраткоеСообщение;
			
		Иначе
			
			Результат = ТекстОшибки;
			
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции // СформироватьТекстОшибкиДиадок()
	
	&НаКлиенте
	Функция ТекстОшибкиДиадокСерии_100(ТекстОшибки, КраткоеСообщение)
		
		НаименованиеСистемыРодительныйПадеж = Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		
		Если Найти(ТекстОшибки, "Код ошибки: 500") > 0 И Найти(ТекстОшибки, "GetTokenByCertificate") > 0 Тогда 
				
			Результат = "При работе программы произошла ошибка:
						 |Выбранный сертификат не имеет доступа в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
			
		ИначеЕсли 	Найти(ТекстОшибки, "for entity that already signed") > 0 
				ИЛИ Найти(ТекстОшибки, "Receipt for document which already has one") > 0 Тогда
			
			Результат = "При работе программы произошла ошибка:
						 |данный документ уже подписан";
			
		ИначеЕсли 	  Найти(ТекстОшибки, "for entity that has requested signature rejection") > 0 
			 	  ИЛИ Найти(ТекстОшибки, "RequestedSignatureRejection for document that already has one") > 0
			 	  ИЛИ Найти(ТекстОшибки, "for entity that already have requested signature rejection") > 0 Тогда
			
			Результат = "При работе программы произошла ошибка:
						 |по данному документу уже сформирован отказ в подписи";
			
		ИначеЕсли Найти(ТекстОшибки, "Access to Box") > 0 И Найти(ТекстОшибки, "is denied") > 0 Тогда 
			
			Результат = "При работе программы произошла ошибка:
						 |у пользователя отсутствует доступ к ящику " + НаименованиеСистемыРодительныйПадеж;
			
		ИначеЕсли 	  Найти(ТекстОшибки, "Organization is not allowed to get counteragent certificates") > 0 
		 		  ИЛИ Найти(ТекстОшибки, "Organization is not allowed to send encrypted documents") > 0  Тогда 
			
			Результат = "Отправка зашифрованных документов невозможна! " + 
							"Для того чтобы включить опцию отправки зашифрованных документов, обратитесь в техподдержку.";
			
		ИначеЕсли Найти(КраткоеСообщение, "code:407") > 0 ИЛИ Найти(КраткоеСообщение, "code:401") > 0 Тогда
						   
			Результат = "Настройки прокси-сервера не позволяют установить соединение с сервером " 
							+ НаименованиеСистемыРодительныйПадеж + "
						 	|(" + КраткоеСообщение + ")";
			
		Иначе
			
			Результат = "Произошла ошибка при работе с сервером " + НаименованиеСистемыРодительныйПадеж + ":
						 |" + КраткоеСообщение;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ТекстОшибкиДиадокСерии_100()
	
	&НаКлиенте
	Функция ТекстОшибкиДиадокСерии_200(КраткоеСообщение)
		
		НаименованиеСистемыРодительныйПадеж = Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		
		Если Найти(КраткоеСообщение, "code:407") > 0 ИЛИ Найти(КраткоеСообщение, "code:401") > 0 Тогда
				
			Результат = "Настройки прокси-сервера не позволяют установить соединение с сервером " 
							+ НаименованиеСистемыРодительныйПадеж + "
						 	|(" + КраткоеСообщение + ")";
			
		Иначе 	
			
			Результат = "Невозможно установить соединение с сервером " + НаименованиеСистемыРодительныйПадеж + " по причине:
						 |" + КраткоеСообщение;
			
		КонецЕсли;
		
		Возврат Результат; 
		
	КонецФункции // ТекстОшибкиДиадокСерии_200()
	
	&НаСервере
	Функция ПолучитьОсновнуюФормуОбъекта(Объект1С)
		
		МетаданныеОбъекта=	Объект1С.ПолучитьОбъект().Метаданные();
		ИмяОбъекта1С=		МетаданныеОбъекта.Имя;
		
		Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			КореньОбъекта=	"Документ";
		ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
			КореньОбъекта=	"Справочник";
		КонецЕсли;
		
		Попытка
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				Если ТипЗнч(Объект1С) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					ФормыСчетаФактуры=			Новый ФиксированноеСоответствие(Документы.СчетФактураПолученный.ПолучитьСоответствиеВидовСчетаФактурыФормам());
					ИмяФормыОбъекта=			ФормыСчетаФактуры[Объект1С.ВидСчетаФактуры];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					ФормыСчетаФактуры= 			Новый ФиксированноеСоответствие(Документы.СчетФактураВыданный.ПолучитьСоответствиеВидовСчетаФактурыФормам());
					ИмяФормыОбъекта=			ФормыСчетаФактуры[Объект1С.ВидСчетаФактуры];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ФормыДокументаНакладной=	Новый ФиксированноеСоответствие(Документы.РеализацияТоваровУслуг.ПолучитьСоответствиеВидовОперацийФормам());
					ИмяФормыОбъекта=			ФормыДокументаНакладной[Объект1С.ВидОперации];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					ФормыДокументаНакладной=	Новый ФиксированноеСоответствие(Документы.ПоступлениеТоваровУслуг.ПолучитьСоответствиеВидовОперацийФормам());
					ИмяФормыОбъекта=			ФормыДокументаНакладной[Объект1С.ВидОперации];
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") тогда 
					ИмяФормыОбъекта= 			"ФормаДокументаОбщая";
				ИначеЕсли ТипЗнч(Объект1С) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
					ФормыОтчетовКомитенту= 		Новый ФиксированноеСоответствие(Документы.ОтчетКомитентуОПродажах.ПолучитьСоответствиеВидовОтчетаКомитентуФормам());
					ИмяФормыОбъекта=			ФормыОтчетовКомитенту[Объект1С.ВидОперации];
				Иначе
					ИмяФормыОбъекта=			МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
				КонецЕсли;
			Иначе
				ИмяФормыОбъекта=			МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
			КонецЕсли;
		Исключение
			ИмяФормыОбъекта=			МетаданныеОбъекта.ОсновнаяФормаОбъекта.Имя;
		КонецПопытки;
		
		Возврат КореньОбъекта + "." + ИмяОбъекта1С + ".Форма." + ИмяФормыОбъекта;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьОписаниеФормы(Документ1С) Экспорт
		
		Возврат ПолучитьОсновнуюФормуОбъекта(Документ1С);
		
	КонецФункции
	
	&НаКлиенте
	Функция ВернутьМассивВыбранныхФайлов(МножественныйВыбор =  Ложь) Экспорт
		
		Попытка
			WshShell= 			Новый COMОбъект("WScript.Shell");
			КаталогФайлов=	WshShell.CurrentDirectory;
		Исключение
			КаталогФайлов=	"";
		КонецПопытки;
		
		ДиалогВыбора=						Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Заголовок=				?(МножественныйВыбор, "Выберите файлы", "Выберите файл");
		ДиалогВыбора.Каталог=				КаталогФайлов;
		ДиалогВыбора.Фильтр=				НСтр("ru = 'Все файлы(*.*)|*.*'"); 
		ДиалогВыбора.МножественныйВыбор=	МножественныйВыбор;
		
		Если ДиалогВыбора.Выбрать() Тогда
			Возврат ДиалогВыбора.ВыбранныеФайлы;
		Иначе
			Возврат Новый Массив();
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Процедура Установить_CounteragentBoxID_для_Контрагент(ВыбКонтрагент, CounteragentId)
		
		МетодСервера(,"Установить_CounteragentBoxID_для_Контрагент", ВыбКонтрагент, CounteragentId);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьИмяФормыДокумента(Document) Экспорт
		
		Если ЭтоФормализованныйДокумент(Document.TypeNamedId) И Document.HasCustomPrintForm = Ложь Тогда
			ИмяФормыПросмотра=	"ФормаДокумента";
		Иначе
			ИмяФормыПросмотра=	"ФормаДокументаБезВизуализации";
		КонецЕсли;
		
		Возврат ИмяФормыПросмотра;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьDocumentID_2_Документ(DocumentID, BoxID)
		
		Возврат МетодСервера(,"DocumentID_2_Документ", DocumentID, BoxID);
		
	КонецФункции
		
	// Признак того, что электронный документ является счетом-фактурой
	//
	// Параметры:
	//	ТипДокумента	- Строка	- Тип электронного документа
	&НаКлиенте
	Функция ЭтоСчетФактура(ФорматЭД) Экспорт
		
		ИмяТипа = ФорматЭД.ИмяТипа;
		
		Результат = Ложь;
		
		Если ИмяТипа = "Invoice"
			Или ИмяТипа = "InvoiceRevision"
			Или ИмяТипа = "InvoiceCorrection"
			Или ИмяТипа = "InvoiceCorrectionRevision" Тогда
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Признак того, что электронный документ является счетом на оплату
	//
	// Параметры:
	//	ФорматЭД - Структура - см. функцию ОписаниеФорматаЭлектронногоДокумента
	//
	// Возвращаемое значение:
	//	Булево - Истина, если электронный документ это счет на оплату
	&НаКлиенте
	Функция ЭтоСчетНаОплату(ФорматЭД) Экспорт
		
		ИмяТипа = ФорматЭД.ИмяТипа;
		
		Результат = Ложь;
		
		Если ИмяТипа = "ProformaInvoice" Тогда
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Признак того, что электронный документ является формализованной накладной
	//
	// Параметры:
	//	ТипДокумента	- Строка	- Тип электронного документа
	&НаКлиенте
	Функция ЭтоФормализованныйТОРГ12(ТипДокумента) Экспорт
		
		Если ТипДокумента = "XmlTorg12" Тогда
			Результат = Истина;
		Иначе 
			Результат = Ложь;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Признак того, что электронный документ является формализованным актом
	//
	// Параметры:
	//	ТипДокумента	- Строка	- Тип электронного документа
	&НаКлиенте
	Функция ЭтоФормализованныйАктОВыполненииРабот(ТипДокумента) Экспорт
		
		Если ТипДокумента = "XmlAcceptanceCertificate" Тогда 
			Результат = Истина;
		Иначе 
			Результат = Ложь;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Признак того, что электронный документ(ЭД) является актом сверки взаиморасчетов
	//
	// Параметры:
	//	ТипДокумента	- Строка	- Тип электронного документа
	//
	// Возвращаемое значение:
	//	Булево - Истина, если ЭД является актом сверки
	&НаКлиенте
	Функция ЭтоАктСверкиВзаиморасчетов(ТипДокумента)
		
		Результат = ТипДокумента = "ReconciliationAct";
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЕстьИдентификаторСервисаВзаиморасчеты(ПользовательскийИдентификатор)
		
		Результат = Врег(ПользовательскийИдентификатор) = "COACSU";	// отправлен из сервиса сверки
		
		Возврат Результат;
		
	КонецФункции
	
	// Признак того, что электронный документ(ЭД) это акт сверки, который был отправлен из сервиса Контур.Взаиморасчеты
	//
	// Параметры:
	//	ТипДокумента					- Строка	- Тип электронного документа
	//	ПользовательскийИдентификатор 	- Строка 	- CustomDocumentId(см. НовыйИдентификаторЭлектронногоДокумента())
	//
	// Возвращаемое значение:
	// 	Булево - Истина, если ЭД это акт сверки, отправленный из сервиса Контур.Взаиморасчеты  
	&НаКлиенте
	Функция ЭтоАктСверкиИзСервисаВзаиморасчеты(ТипДокумента, ПользовательскийИдентификатор) Экспорт
		
		Результат = ЭтоАктСверкиВзаиморасчетов(ТипДокумента)
					И ЕстьИдентификаторСервисаВзаиморасчеты(ПользовательскийИдентификатор);
		
		Возврат Результат;
		
	КонецФункции
	
	// Признак того, что электронный документ(ЭД) является входящим
	//
	// Параметры: 
	//	НаправлениеДокумента - Строка - направление из электронного документа
	//
	// Возвращаемое значение:
	//	Булево - Истина, если документ входящий
	&НаКлиенте
	Функция ЭтоВходящийЭлектронныйДокумент(НаправлениеДокумента) Экспорт
		
		ВсеНаправления = НаправленияДокументов();
		
		Результат = Врег(НаправлениеДокумента) = Врег(ВсеНаправления.Входящий);
		
		Возврат Результат;
		
	КонецФункции
			
	&НаКлиенте
	Функция НайтиОрганизациюВИерархииОрганизацийDiadoc(BoxID, DepartmentId) Экспорт
		
		Возврат НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия(BoxID, Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc[DepartmentId]);
		
	КонецФункции
	
	&НаКлиенте
	Функция НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия(BoxID, СтруктураПодразделения)
		
		Если СтруктураПодразделения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Организация= МетодСервера(,"BoxID_2_Организация", BoxID, СтруктураПодразделения.DepartmentKpp);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Возврат Организация;
		КонецЕсли;
		
		Возврат НайтиОрганизациюВИерархииОрганизацийDiadocРекурсия(BoxID, Платформа.ПараметрыКлиент.ИерархияОрганизацийDiadoc[СтруктураПодразделения.ParentId]);
		
	КонецФункции
	
	&НаКлиенте
	Функция ТекстИнформацииОНовомФормате(ConfirmationDate) Экспорт
		
		ДатаПрименения = ?(ConfirmationDate<'20010101', ТекущаяДата(), ConfirmationDate);
		
		Если ДатаПрименения >= '20170701' Тогда // с 01.07.2017 СФ должен отправляться в формате УПД
			
			ТекстИнформации =
			"<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<META name=GENERATOR content=""MSHTML 11.00.10240.17202"">
			|<STYLE type=""text/css"">h3{margin-top:0.5em; margin-bottom:1em;} p{margin-top:0.2em; margin-bottom:0em;}</STYLE></HEAD>
			|<BODY>
			|<H3>С 1 июля 2017 года изменился формат счета-фактуры</H3>
			|<H4>После 1 июля налоговая может отказать в вычете НДС за старый формат</H4>
			|<P>Счет-фактура старого формата не считается выставленным, если он отправлен после 1 июля. Налоговая может отказать в вычете НДС получателю при представлении документов.</P>
			|<H4>Договоритесь с поставщиками о переходе на новый формат</H4>
			|<P>С 1 июля счета-фактуры нужно передавать в новом формате по <A href=""https://normativ.kontur.ru/document?moduleId=1&documentId=339569""> приказу №155 ФНС</A>. Если поставщик продолжает отправлять документы в старом формате, запросите аннулирование документов и попросите отправить их в новом формате.</P></BODY></HTML>";
			
		Иначе // с 14.04.2015 версия 5.02
			
			ТекстИнформации =
			"<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<META name=GENERATOR content=""MSHTML 11.00.10240.17202"">
			|<STYLE type=""text/css"">h3{margin-top:0.5em; margin-bottom:1em;} p{margin-top:0.2em; margin-bottom:0em;}</STYLE></HEAD>
			|<BODY>
			|<H3>14 апреля 2015 года изменился формат электронных счетов-фактур</H3>
			|<P>Согласно <A href=""http://publication.pravo.gov.ru/Document/View/0001201504030034"">приказу ФНС от 04.03.2015 № ММВ-7-6/93@</A> с 14 апреля 2015 года электронные счета-фактуры необходимо передавать в новом формате.</P>
			|<P>Как принимать к учету счета-фактуры в старом формате, переданные после 14 апреля, вы можете узнать в вашей ИФНС</P>
			|<P>На данный момент "+Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы+" поддерживает счета-фактуры как старого, так и нового форматов. Чтобы быть в курсе изменений в законодательстве, <A href=""http://www.diadoc.ru/blog"">подпишитесь на новости на нашем сайте</A></P></BODY></HTML>";
			
		КонецЕсли;
		
		Возврат ТекстИнформации;

	КонецФункции
	
	&НаСервере
	Функция СписокОбработокДереваКонфигурации() Экспорт
		
		СписокОбработок= 	 Новый СписокЗначений;
		МетаданныеОбработки= Метаданные.Обработки;
		
		Для Каждого МетаданныеОбработка ИЗ МетаданныеОбработки Цикл
			СписокОбработок.Добавить(МетаданныеОбработка.Имя, МетаданныеОбработка.Представление());
		КонецЦикла;
		
		Возврат СписокОбработок;
		
	КонецФункции
	
	&НаКлиенте
	Функция ДатаГоризонта() Экспорт
		
		Возврат ДобавитьМесяц(ТекущаяДата(), 12);
		
	КонецФункции
	
	&НаКлиенте
	Функция ИдентификаторСвойства(ИмяСвойства) Экспорт
		
		Возврат МетодСервера(,"ИдентификаторСвойства"+ИмяСвойства);
		
	КонецФункции
	
	&НаКлиенте
	Функция ВариантыИспользованияПроксиСервера() Экспорт
		
		ВариантыИспользованияПроксиСервера = Новый СписокЗначений;
		
		ВариантыИспользованияПроксиСервера.Добавить("НеИспользовать"		  , "Не использовать");
		ВариантыИспользованияПроксиСервера.Добавить("ИспользоватьПроксиСервер", "Использовать прокси-сервер");
		ВариантыИспользованияПроксиСервера.Добавить("ИспользоватьНастройкиIE" , "Использовать настройки Internet Explorer");
		
		Возврат ВариантыИспользованияПроксиСервера;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЭлементВРежимеВыбораИзСпискаПриИзменении(Форма, Элемент, ВыбранноеЗначение) Экспорт
		
		СократитьСписокВыбораДоВыбранногоЗначения(Элемент, ВыбранноеЗначение);
		
		СброситьКартинкуСпискаВыбора(Элемент);
		
		СинхронизироватьСпискиВыбораЭлементовПовторителей(Форма, Элемент);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СократитьСписокВыбораДоВыбранногоЗначения(Элемент, ВыбранноеЗначение) Экспорт
		
		ОбратныйИндекс= Элемент.СписокВыбора.Количество() - 1;
		
		Пока ОбратныйИндекс > -1 Цикл
			Если Элемент.СписокВыбора[ОбратныйИндекс].Значение <> ВыбранноеЗначение Тогда
				Элемент.СписокВыбора.Удалить(ОбратныйИндекс);
			КонецЕсли;
			ОбратныйИндекс= ОбратныйИндекс - 1;
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СброситьКартинкуСпискаВыбора(Элемент)
		
		Если Элемент.СписокВыбора.Количество() = 1 Тогда
			Элемент.СписокВыбора[0].Картинка= Новый Картинка;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СинхронизироватьСпискиВыбораЭлементовПовторителей(Форма, Элемент)
		
		МаскаИмени= Лев(Элемент.Имя, Найти(Элемент.Имя, "_") - 1);
		
		Для НомерЭлемента=1 ПО 10 Цикл
			
			ЭлементПовторитель= Форма.Элементы.Найти(МаскаИмени + "_" + Формат(НомерЭлемента, "ЧГ="));
			
			Если ЭлементПовторитель = Неопределено Тогда
				
				Прервать;
				
			ИначеЕсли ЭлементПовторитель <> Элемент Тогда
				
				ЭлементПовторитель.СписокВыбора.Очистить();
				
				Для Каждого ЭлементСписка ИЗ Элемент.СписокВыбора Цикл
					ЭлементПовторитель.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаписатьВЛог(ИдентификаторСобытия, Комментарий = "", ДокументСсылка = Неопределено) Экспорт
		
		ЗаписьЖурналаРегистрации(МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы + "."+СтрЗаменить(ИдентификаторСобытия, " ", "_"),,,ДокументСсылка, Комментарий);
		
	КонецПроцедуры
	
	// Сравнить две строки версий.
	//
	// Параметры
	//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
	//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии
	//
	// Возвращаемое значение:
	//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
	//
	&НаКлиенте
	Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
		
		Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
		Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
		
		// Для составных номеров версий берем только первую часть.
		Строка1 = ПреобразоватьСтрокуВМассивПодстрок(Строка1, "/")[0];
		Строка2 = ПреобразоватьСтрокуВМассивПодстрок(Строка2, "/")[0];
		
		Версия1 = ПреобразоватьСтрокуВМассивПодстрок(Строка1, ".");
		Если Версия1.Количество() > 4 Тогда
			ВызватьИсключение СтрЗаменить(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), "%1", СтрокаВерсии1);
		Иначе
			Для Инекс = Версия1.Количество() По 4 Цикл
				Версия1.Добавить("0");
			КонецЦикла;
		КонецЕсли;
		Версия2 = ПреобразоватьСтрокуВМассивПодстрок(Строка2, ".");
		Если Версия2.Количество() > 4 Тогда
			ВызватьИсключение СтрЗаменить(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), "%1", СтрокаВерсии2);
		Иначе
			Для Инекс = Версия2.Количество() По 4 Цикл
				Версия2.Добавить("0");
			КонецЦикла;
		КонецЕсли;
		
		Результат = 0;
		Для Разряд = 0 По 3 Цикл
			Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
			Если Результат <> 0 Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НеобходимоОграничениеНаОтправку(Документ1С, ВнешняяПечатнаяФорма, ПризнакПроведен) Экспорт
		
		ВозвращаемоеЗначение= Ложь;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) = Истина Тогда //внешняя печатная форма всегда не проведена
				
				ДокументВалютный= МетодСервера("Модуль_ИнтеграцияБП30", "ЭтоВалютныйДокумент", Документ1С);
				Если ДокументВалютный И НЕ ДокументПроведен(Документ1С) Тогда
					ВозвращаемоеЗначение= Истина;	
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ПризнакПроведен) = Истина И ПризнакПроведен = Ложь Тогда
				
				ДокументВалютный= МетодСервера("Модуль_ИнтеграцияБП30", "ЭтоВалютныйДокумент", Документ1С);
				Если ДокументВалютный = Истина Тогда
					ВозвращаемоеЗначение= Истина;	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ВозвращаемоеЗначение= Ложь;
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ДокументПроведен(ДокументНаПроверку) Экспорт
		
		Возврат ДокументНаПроверку.Проведен; 	
		
	КонецФункции

	&НаКлиенте
	Функция ВыделитьСлово(ИсходнаяСтрока, Разделитель = " ") Экспорт
		
		Буфер = СокрЛ(ИсходнаяСтрока);
		ПозицияПослПробела = Найти(Буфер, Разделитель);
		
		Если ПозицияПослПробела = 0 Тогда
			ИсходнаяСтрока = "";
			Возврат Буфер;
		КонецЕсли;
		
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Возврат ВыделенноеСлово;	
		
	КонецФункции
	
	&НаКлиенте
	Функция ЭДО_БиблиотекаКартинок() Экспорт
		
		Возврат МетодСервера(,"ЭДО_БиблиотекаКартинок");
		
	КонецФункции
	
	&НаКлиенте
	Функция ЗаполненныйДиалогВыбораФайла(МножественныйВыбор, Каталог) Экспорт
		
		ДиалогВыбора=						Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.Заголовок=				НСтр("ru = 'Выбор " + ?(МножественныйВыбор, "файлов", "файла") + "'");
		ДиалогВыбора.Каталог=				Каталог;
		ДиалогВыбора.Фильтр=				НСтр("ru = 'Все файлы (*.*)|*.*'"); 
		ДиалогВыбора.МножественныйВыбор=	МножественныйВыбор;
		
		Возврат ДиалогВыбора;
		
	КонецФункции
	
	// Определяет значение параметра ФункцияУПД, используемого при
	// сборе контента по документам, отправляемым в формате УПД или УКД.
	//
	// Параметры:
	//  ФорматОтправки - Структура - см. функцию ОписаниеФорматаЭлектронногоДокумента;
	// 
	// Возвращаемое значение:
	//  Строка - для накладных, актов или счетов-фактур в формате УПД/УКД.
	//  Неопределено - для всех остальных
	//
	&НаКлиенте
	Функция ФункцияДокументаДляСбораКонтента(ФорматОтправки) Экспорт
		
		ВерсияФормата = ФорматОтправки.ВерсияФормата;
		Если ВерсияФормата = "v1" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ФорматОтправки.ФункцияДокумента <> "default" Тогда
			Возврат ФорматОтправки.ФункцияДокумента;
		КонецЕсли;
		
		// Вызов через МетодКлиента для использования клиентского кэша
		БазовыеФорматы = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
		БазовыйФормат = ФорматОтправки.БазовыйФормат;
		
		ТребуетсяВычислитьФункцию = Ложь;
		Если БазовыйФормат = БазовыеФорматы.utd820
			Или БазовыйФормат = БазовыеФорматы.utd
			Или БазовыйФормат = БазовыеФорматы.ucd Тогда
			ТребуетсяВычислитьФункцию = Истина;
		КонецЕсли;
		
		Если Не ТребуетсяВычислитьФункцию Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипДокумента = ФорматОтправки.ИмяТипа;
		
		Если ТипДокумента = "Invoice" 
			Или ТипДокумента = "InvoiceRevision" Тогда
			
			Результат = "СЧФ";
			
		ИначеЕсли ТипДокумента = "InvoiceCorrection" 
			Или ТипДокумента = "InvoiceCorrectionRevision" Тогда
			
			Результат = "КСЧФ";
			
		Иначе // Накладные или акты в формате УПД
			Результат = "ДОП";
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	//выполнение GET запроса
	Функция ЗапросНаПолучениеФайла(ПутьКФайлу, ФайлРезультата = "", Заголовки = Неопределено) Экспорт
		
		Результат = Неопределено;
		
		Если ФайлРезультата = "" Тогда 
			ФайлРезультата = ПолучитьИмяВременногоФайла();
		КонецЕсли;	
		
		Ответ = Компонента_HttpTransport(ПутьКФайлу, Заголовки, ФайлРезультата);
		
		Если Ответ.StatusCode = 200 Тогда
			Результат = Ответ.HttpContent.FilePath;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Отправляет HTTP запрос, используя внешнюю компоненту
	//
	// Параметры:
	//  АдресЗапроса  	- Строка 		- адрес метода, к которому обращаемся
	//  Заголовки 		- Соответствие 	- заголовки для HTTP запроса
	//  ФайлРезультата	- Строка 		- полный путь до файла, в который необходимо вернуть результат запроса
	//
	// Возвращаемое значение:
	//   Структура   	- содержит ключи: DataString, FilePath
	//
	&НаКлиенте
	Функция Компонента_HttpTransport( АдресЗапроса 
									, Заголовки = Неопределено 
									, ФайлРезультата = "" 
									, ТелоЗапроса = "" 
									, МетодPost = Ложь	) Экспорт
		
		Ответ = Новый_HttpОтвет();
		
		DiadocConnection = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection;
		
		Если ТипЗнч(DiadocConnection) = Тип("COMОбъект") Тогда
			
			Transport 	= DiadocConnection.CreateHttpTransport();
			Factory 	= Transport.CreateContentFactory();
			
			Request		= Transport.CreateRequest();
			Request.Uri = АдресЗапроса;
			
			// По умолчанию используется метод GET
			Если МетодPost Тогда
				Request.Method = "POST";
			КонецЕсли;
			
			Если ТипЗнч(Заголовки) = Тип("Соответствие") Тогда
				Для каждого ЭлЗаголовок из Заголовки Цикл
					Request.AddHeader(ЭлЗаголовок.Ключ, ЭлЗаголовок.Значение);
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
				Request.RequestContent = Factory.CreateMemoryContentFromString(ТелоЗапроса);	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлРезультата) Тогда
				Request.ResponseContent	= Factory.CreateFileContent(ФайлРезультата);
			Иначе
				Request.ResponseContent = Factory.CreateMemoryContent();
			КонецЕсли;
						
			Response = Transport.Send(Request);
						
			Ответ.StatusCode 				= Response.StatusCode;
			Ответ.HttpContent.FilePath		= Request.ResponseContent.FilePath;
			Ответ.HttpContent.DataString	= Request.ResponseContent.DataString;
			
		КонецЕсли;
						
		Возврат Ответ;
	
	КонецФункции // Компонента_HttpTransport()
	
	&НаКлиенте
	Функция Новый_HttpContent()
		
		Возврат Новый Структура("DataString, FilePath", "", Неопределено);
		
	КонецФункции //Новый_HttpContent()
	
	&НаКлиенте
	Функция Новый_HttpОтвет()
		
		Возврат Новый Структура("StatusCode, HttpContent", 0, Новый_HttpContent());
		
	КонецФункции //Новый_HttpОтвет()

	// Преобразует содержимое JSON в коллекцию
	//
	// Параметры:
	//  СтрокаJSON  - Строка - ответ сервера в формате JSON
	// Возвращаемое значение:
	//   Структура, Строка
	//
	&НаКлиенте
	Функция РазобранныйОтветАПИ(СтрокаJSON)
		
		Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		Если НЕ ПлатформаСтаршеЧем_8_3_6_1977() Тогда
		
			ИмяВремФайла = ПолучитьИмяВременногоФайла();
			
			ТД = Новый ТекстовыйДокумент;
			ТД.УстановитьТекст(СтрокаJSON);
			ТД.Записать(ИмяВремФайла, "UTF-8");
		
			Чтение = Новый("ЧтениеJSON");//8.3
			Чтение.ОткрытьФайл(ИмяВремФайла, "UTF-8");
			Попытка
				Результат = Вычислить("ПрочитатьJSON(Чтение)");
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат СтрокаJSON;  // некорректный JSON - сервер вернул текст ошибки. Вернем его просто как строку.
			КонецПопытки;
			Чтение.Закрыть();
			УдалитьФайлы(ИмяВремФайла);
			
		Иначе
			
			Результат = СтрокаJSON;
			
		КонецЕсли;
		
		Возврат Результат;
	
	КонецФункции // РазобранныйОтветАПИ()
	
	&НаКлиенте
	Функция ПлатформаСтаршеЧем_8_3_6_1977()

		СИ = Новый СистемнаяИнформация;
		ВерсияПлатформы = СИ.ВерсияПриложения;
		
		ВерсияПлатформыМассивом = Преобразование_СтрокуВМассивСлов(СИ.ВерсияПриложения, ".");
		ВтораяЦифраВерсии = Число(ВерсияПлатформыМассивом[1]);
		ТретьяЦифраВерсии = Число(ВерсияПлатформыМассивом[2]);
		
		Если ВтораяЦифраВерсии < 3
			ИЛИ (ВтораяЦифраВерсии = 3 И ТретьяЦифраВерсии < 6)  Тогда
			// 8.3.6 - самая первая официальная платформа на https://releases.1c.ru/project/Platform83
			// Предполагаем, что старше нее в линейке 8.3.6 ничего нет.
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции //ПлатформаСтаршеЧем_8_3_6_1977()
	
	// Объединяет элементы массива в строку с использованием разделителя
	//
	// Параметры:
	//  МассивСтрок	 - Массив 		- обрабатываемый массив 
	//  Разделитель	 - Произвольный	- добавляется между элементами массива
	// 
	// Возвращаемое значение:
	//   Строка - 
	//
	&НаКлиенте
	Функция Преобразование_МассивВСтроку(МассивСтрок, Знач Разделитель = Неопределено) Экспорт
	
		Результат = "";
		
		Если ТипЗнч(МассивСтрок) = Тип("Массив") Тогда
			
			Если Разделитель = Неопределено Тогда
				Разделитель = Символы.ПС;
			КонецЕсли;
			
			Для Каждого Эл Из МассивСтрок Цикл
				Результат = Результат + ?(СтрДлина(Результат) = 0, "", Разделитель) + Эл;
			КонецЦикла;		
			
		ИначеЕсли ТипЗнч(МассивСтрок) = Тип("Строка") Тогда
			Результат = МассивСтрок;		
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции //Преобразование_МассивВСтроку()
	
	// Разбивает строку на элементы, помещая их в массив
	//
	// Параметры:
	//  Строка			 - Строка		- исходная строка
	//  РазделителиСлов	 - Произвольный	- разделитель по которому происходит декомпозиция строки 
	// 
	// Возвращаемое значение:
	//   Массив 
	//
	&НаКлиенте
	Функция Преобразование_СтрокуВМассивСлов(Знач Строка, РазделителиСлов = ",") Экспорт

		Слова = Новый Массив;
		
		Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
			Строка = СтрЗаменить(Строка, Сред(РазделителиСлов, Сч, 1), Символы.ПС);
		КонецЦикла;
		
		Для Сч = 1 По СтрЧислоСтрок(Строка) Цикл
			
			ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка, Сч));
			Если ТекСлово <> "" Тогда
				Слова.Добавить(ТекСлово);
			КонецЕсли;
			
		КонецЦикла;	
		
		Возврат Слова;
		
	КонецФункции //Служебные_СтрокуВМассивСлов()
	
	// Возвращает значение свойства структуры или фиксированной структуры.
	//
	// Параметры:
	//   Структура           - Структура, ФиксированнаяСтруктура - объект, из которого необходимо прочитать значение ключа.
	//   Ключ                - Строка       - имя свойства структуры, для которого необходимо прочитать значение.
	//   ЗначениеПоУмолчанию - Произвольный - необязательный, возвращается когда в структуре нет значения по указанному ключу.
	//
	// Возвращаемое значение:
	//   Произвольный        - значение свойства структуры или параметра "ЗначениеПоУмолчанию".
	//
	&НаКлиенте
	Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
		
		Результат = ЗначениеПоУмолчанию;

		ЭтоСтруктура = Ложь
			Или ТипЗнч(Структура) = Тип("Структура")
			Или ТипЗнч(Структура) = Тип("ФиксированнаяСтруктура");
		
		Если ЭтоСтруктура И Структура.Свойство(Ключ) Тогда
			Результат = Структура[Ключ];
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции //СвойствоСтруктуры()
		
	&НаКлиенте
	Функция ПолучитьСтруктуруСодержанияДокумента(Document) Экспорт
		
		// Вызов через МетодКлиента для использования клиентского кэша
		ТипыКонтента = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
		
		Прото = ПолучитьProto(Document);
		
		ТипКонтента = Прото.ТипКонтента;
		Контент = Прото.Контент;
		
		ИмяТипа = Document.TypeNamedId;
		
		Результат = Новый_СтруктураСодержаниеДокумента();
		Результат.Document	 = Document;
		Результат.Type		 = ИмяТипа;
		
		Если ТипКонтента = ТипыКонтента.Utd820SellerContent 
			Или ТипКонтента = ТипыКонтента.UtdSellerContent Тогда
			
			ЗаполнитьСтруктуруСодержанияДокументаПоUniversalTransferDocument(Результат, Прото);
			
		ИначеЕсли ТипКонтента = ТипыКонтента.Torg12SellerContent Тогда
			
			ЗаполнитьСтруктуруСодержанияДокументаПоXmlTorg12(Результат, Прото);
			
		ИначеЕсли ТипКонтента = ТипыКонтента.AcceptanceCertificateSellerContent Тогда
			
			ЗаполнитьСтруктуруСодержанияДокументаПоXmlAcceptanceCertificate(Результат, Прото);
			
		ИначеЕсли ТипКонтента = ТипыКонтента.InvoiceContent Тогда
			
			ЗаполнитьСтруктуруСодержанияДокументаПоInvoice(Результат, Прото);
			
		ИначеЕсли ТипКонтента = ТипыКонтента.TovTorgSellerContent Тогда
			
			ЗаполнитьСтруктуруСодержанияДокументаПоTovTorg(Результат, Прото);
			
		ИначеЕсли ТипКонтента = ТипыКонтента.Act552SellerContent Тогда
			
			ЗаполнитьСтруктуруСодержанияДокументаПоAct552(Результат, Прото);
			
		Иначе
			ВызватьИсключение "Неизвестный тип объекта ЭДОбъект: """ + ИмяТипа + """";
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруСодержанияДокументаПоXmlTorg12(стДокумент, Прото)
		
		тзТабличнаяЧасть = Новый Массив();
		ПротоКонтент	 = Прото.Контент;
		
		НалоговыйАгентПоНДС = Ложь;
		
		СуммаВсего = 0;
		НДСВсего = 0;
		
		Для Каждого Item Из ПротоКонтент.Items Цикл
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
			
			СтрокаТЧ.Name		= ?(ЗначениеЗаполнено(Item.Product), Item.Product, Неопределено);
			СтрокаТЧ.Code		= ?(ЗначениеЗаполнено(Item.ProductCode), Item.ProductCode, Неопределено);
			СтрокаТЧ.NomenclatureArticle = ?(ЗначениеЗаполнено(Item.Article), Item.Article, Неопределено);
			СтрокаТЧ.UnitCode	= ?(ЗначениеЗаполнено(Item.UnitCode), Item.UnitCode, Неопределено);
			СтрокаТЧ.UnitName	= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
			СтрокаТЧ.Quantity	= ЧислоИзКомпоненты(Item.Quantity);
			СтрокаТЧ.Price		= ЧислоИзКомпоненты(Item.Price);
			СтрокаТЧ.SubtotalWithVatExcluded = ЧислоИзКомпоненты(Item.TotalWithVatExcluded);
			СтрокаТЧ.Vat		= ЧислоИзКомпоненты(Item.Vat);
			СтрокаТЧ.Subtotal	= ЧислоИзКомпоненты(Item.Total);
			СтрокаТЧ.TaxRate	= ?(ЗначениеЗаполнено(Item.TaxRate), Item.TaxRate, Неопределено);
			СтрокаТЧ.VatIsCalculatedByTaxAgent = НДСИсчисляетсяНалоговымАгентом(Item.TaxRate);
			
			НалоговыйАгентПоНДС = НалоговыйАгентПоНДС Или СтрокаТЧ.VatIsCalculatedByTaxAgent;
			
			тзТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			СуммаВсего = СуммаВсего + СтрокаТЧ.Subtotal;
			НДСВсего = НДСВсего + СтрокаТЧ.Vat;
			
		КонецЦикла;
		
		стДокумент.Items = тзТабличнаяЧасть;
		
		стДокумент.ДатаДоговора 		= ?(ЗначениеЗаполнено(ПротоКонтент.GroundDate), ПротоКонтент.GroundDate, "");
		стДокумент.НомерДоговора 		= ?(ЗначениеЗаполнено(ПротоКонтент.GroundNumber), ПротоКонтент.GroundNumber, "");
		стДокумент.НаименованиеДоговора = ?(ЗначениеЗаполнено(ПротоКонтент.GroundName), ПротоКонтент.GroundName, "");
		
		стДокумент.Total 	= СуммаВсего;
		стДокумент.Vat 		= НДСВсего;
		стДокумент.isTaxAgent 	= НалоговыйАгентПоНДС;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруСодержанияДокументаПоXmlAcceptanceCertificate(стДокумент, Прото)
		
		тзТабличнаяЧасть = Новый Массив();
		ПротоКонтент	 = Прото.Контент;
		
		СуммаВсего = 0;
		НДСВсего = 0;
		
		Для Каждого Item Из ПротоКонтент.Items Цикл
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
					
			Если ЗначениеЗаполнено(Item.Name) Тогда
				СтрокаТЧ.Name = Item.Name;
			ИначеЕсли ЗначениеЗаполнено(Item.Description) Тогда
				СтрокаТЧ.Name = Item.Description;
			Иначе
				СтрокаТЧ.Name = Неопределено;
			КонецЕсли;
			
			СтрокаТЧ.Code		= "";
			СтрокаТЧ.UnitCode	= ?(ЗначениеЗаполнено(Item.UnitCode), Item.UnitCode, Неопределено);
			СтрокаТЧ.UnitName	= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
			СтрокаТЧ.Quantity	= ?(ЗначениеЗаполнено(Item.Quantity), ЧислоИзКомпоненты(Item.Quantity), 0);
			СтрокаТЧ.Price		= ?(ЗначениеЗаполнено(Item.Price), ЧислоИзКомпоненты(Item.Price), 0);
			СтрокаТЧ.SubtotalWithVatExcluded = ?(ЗначениеЗаполнено(Item.TotalWithVatExcluded), ЧислоИзКомпоненты(Item.TotalWithVatExcluded), 0);
			СтрокаТЧ.Vat		= ?(ЗначениеЗаполнено(Item.Vat), ЧислоИзКомпоненты(Item.Vat), 0);
			СтрокаТЧ.Subtotal	= ?(ЗначениеЗаполнено(Item.Total), ЧислоИзКомпоненты(Item.Total), 0);
			СтавкаНДС			= ОпределитьСтавкуНДСПоУслуге(?(ЗначениеЗаполнено(Item.TotalWithVatExcluded), Item.TotalWithVatExcluded, 0), ?(ЗначениеЗаполнено(Item.Vat), Item.Vat, 0));
			СтрокаТЧ.TaxRate	= ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, Неопределено);
			
			Если СтрокаТЧ.TaxRate = "0" Тогда
				СтрокаТЧ.TaxRate = ""; //для того, чтобы выводилась ставка "Без НДС"	
			КонецЕсли;
			
			тзТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			СуммаВсего = СуммаВсего + СтрокаТЧ.Subtotal;
			НДСВсего = НДСВсего + СтрокаТЧ.Vat;
			
		КонецЦикла;
		
		стДокумент.Items = тзТабличнаяЧасть;
		
		стДокумент.ДатаДоговора 		= "";
		стДокумент.НомерДоговора 		= "";
		стДокумент.НаименованиеДоговора = "";
		
		стДокумент.Total 	= СуммаВсего;
		стДокумент.Vat 		= НДСВсего;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруСодержанияДокументаПоInvoice(стДокумент, Прото)
		
		тзТабличнаяЧасть = Новый Массив;
		ПротоКонтент	 = Прото.Контент;
		
		СуммаВсего = 0;
		НДСВсего = 0;
		
		Для Каждого Item Из ПротоКонтент.Items Цикл
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ(Истина);
			
			СтрокаТЧ.Name			= Item.Product;
			СтрокаТЧ.UnitCode		= Item.UnitCode;
			СтрокаТЧ.Quantity		= ЧислоИзКомпоненты(Item.Quantity);
			СтрокаТЧ.Price			= ЧислоИзКомпоненты(Item.Price);
			СтрокаТЧ.SubtotalWithVatExcluded = Item.TotalWithVatExcluded;
			СтрокаТЧ.Subtotal		= Item.Total;
			СтрокаТЧ.Vat			= ЧислоИзКомпоненты(Item.Vat);
			СтрокаТЧ.TaxRate		= Item.TaxRate;
			СтрокаТЧ.CountryCode	= Item.CountriesOfOrigin;
			СтрокаТЧ.TDNumber		= Item.CustomsDeclarationNumbers;
			
			тзТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			СуммаВсего = СуммаВсего + СтрокаТЧ.Subtotal;
			НДСВсего = НДСВсего + СтрокаТЧ.Vat;
			
		КонецЦикла;
		
		стДокумент.Items = тзТабличнаяЧасть;
		
		стДокумент.ДатаДоговора 		= "";
		стДокумент.НомерДоговора 		= "";
		стДокумент.НаименованиеДоговора = "";
		
		стДокумент.Total 	= СуммаВсего;
		стДокумент.Vat 		= НДСВсего;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруСодержанияДокументаПоUniversalTransferDocument(стДокумент, Прото)
		
		ЭтоУПД820 = (Прото.ТипКонтента = ТипыКонтента().Utd820SellerContent);
		
		тзТабличнаяЧасть = Новый Массив();
		ПротоКонтент	 = Прото.Контент;
		
		НалоговыйАгентПоНДС = Ложь;
		
		СуммаВсего = 0;
		НДСВсего = 0;
		
		КоллекцияСтрок = ?(ЭтоУПД820, ПротоКонтент.Table.Items, ПротоКонтент.InvoiceTable.Items);
		
		Для Каждого Item Из КоллекцияСтрок Цикл
		
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ(Истина);
			
			Если ЭтоУПД820 Тогда
				Артикул = Item.ItemVendorCode;
				КодЕдИзм = Item.Unit;
			Иначе
				Артикул = Item.VendorCode;
				КодЕдИзм = Item.UnitCode;
			КонецЕсли;
			
			СтрокаТЧ.NomenclatureArticle = ?(ЗначениеЗаполнено(Артикул), Артикул, Неопределено);
			СтрокаТЧ.Name		= Item.Product;
			СтрокаТЧ.UnitCode	= КодЕдИзм;
			СтрокаТЧ.UnitName	= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
			СтрокаТЧ.Quantity	= ЧислоИзКомпоненты(Item.Quantity);
			СтрокаТЧ.Price		= ЧислоИзКомпоненты(Item.Price);
			СтрокаТЧ.SubtotalWithVatExcluded = Item.SubtotalWithVatExcluded;
			СтрокаТЧ.Subtotal	= Item.Subtotal;
			СтрокаТЧ.Vat		= ЧислоИзКомпоненты(Item.Vat);
			СтрокаТЧ.TaxRate	= Item.TaxRate;
			СтрокаТЧ.VatIsCalculatedByTaxAgent = НДСИсчисляетсяНалоговымАгентом(Item.TaxRate);
			
			НалоговыйАгентПоНДС = НалоговыйАгентПоНДС Или СтрокаТЧ.VatIsCalculatedByTaxAgent;
			
			CustomDeclarations 	= Item.CustomDeclarations;
			
			КоличествоCustomDeclarations = CustomDeclarations.Количество();
			Если КоличествоCustomDeclarations > 0 Тогда
				Если КоличествоCustomDeclarations = 1 Тогда
					СтрокаCustomDeclarations 	= CustomDeclarations[0];
					СтрокаТЧ.CountryCode		= СтрокаCustomDeclarations.CountryCode;
					СтрокаТЧ.TDNumber			= СтрокаCustomDeclarations.DeclarationNumber;
				Иначе
					Сообщить("" + СтрокаТЧ.Name + ", количество = " + СтрокаТЧ.Quantity + ", цена = " + СтрокаТЧ.Price + ": указано более одного значения ""CustomsDeclaration"", данные по ГТД в строке не заполнены!");
				КонецЕсли;
			КонецЕсли;
				
			тзТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			СуммаВсего = СуммаВсего + СтрокаТЧ.Subtotal;
			НДСВсего = НДСВсего + СтрокаТЧ.Vat;
			
		КонецЦикла;
		
		стДокумент.Items = тзТабличнаяЧасть;
		
		стДокумент.ДатаДоговора 		= "";
		стДокумент.НомерДоговора 		= "";
		стДокумент.НаименованиеДоговора = "";
		
		стДокумент.Total 	= СуммаВсего;
		стДокумент.Vat 		= НДСВсего;
		стДокумент.isTaxAgent 	= НалоговыйАгентПоНДС;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруСодержанияДокументаПоTovTorg(стДокумент, Прото)
		
		тзТабличнаяЧасть = Новый Массив();
		ПротоКонтент	 = Прото.Контент;
		
		НалоговыйАгентПоНДС = Ложь;
		
		СуммаВсего = 0;
		НДСВсего = 0;
		
		Для Каждого Item Из ПротоКонтент.Table.Items Цикл
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
					
			СтрокаТЧ.Code		= ?(ЗначениеЗаполнено(Item.ProductCode ), Item.ProductCode, Неопределено);
			СтрокаТЧ.NomenclatureArticle = ?(ЗначениеЗаполнено(Item.VendorCode ), Item.VendorCode, Неопределено);
			СтрокаТЧ.Name		= Item.Product;
			СтрокаТЧ.UnitCode	= Item.Unit;
			СтрокаТЧ.UnitName	= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
			СтрокаТЧ.Quantity	= ЧислоИзКомпоненты(Item.Net);
			СтрокаТЧ.Price		= ЧислоИзКомпоненты(Item.Price);
			СтрокаТЧ.SubtotalWithVatExcluded = Item.SubtotalWithVatExcluded;
			СтрокаТЧ.Subtotal	= Item.Subtotal;
			СтрокаТЧ.Vat		= ЧислоИзКомпоненты(Item.Vat);
			СтрокаТЧ.TaxRate	= Item.TaxRate;
			СтрокаТЧ.VatIsCalculatedByTaxAgent = НДСИсчисляетсяНалоговымАгентом(Item.TaxRate);
			
			НалоговыйАгентПоНДС = НалоговыйАгентПоНДС Или СтрокаТЧ.VatIsCalculatedByTaxAgent;
			
			тзТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			СуммаВсего = СуммаВсего + СтрокаТЧ.Subtotal;
			НДСВсего = НДСВсего + СтрокаТЧ.Vat;
			
		КонецЦикла;
		
		стДокумент.Items=	тзТабличнаяЧасть;
		
		стДокумент.ДатаДоговора 		= "";
		стДокумент.НомерДоговора 		= "";
		стДокумент.НаименованиеДоговора = "";
		
		стДокумент.Total 	= СуммаВсего;
		стДокумент.Vat 		= НДСВсего;
		стДокумент.isTaxAgent 	= НалоговыйАгентПоНДС;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруСодержанияДокументаПоAct552(стДокумент, Прото)
		
		тзТабличнаяЧасть = Новый Массив;
		ПротоКонтент	 = Прото.Контент;
		
		НалоговыйАгентПоНДС = Ложь;
		
		Works_TotalVat	= 0;
		Works_Total		= 0;
		
		Если ЗначениеЗаполнено(ПротоКонтент.Works) Тогда
			
			Work_0 = ПротоКонтент.Works[0];
			
			Для Каждого Item Из Work_0.Items Цикл
				
				СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
				
				Если ЗначениеЗаполнено(Item.Name) Тогда
					СтрокаТЧ.Name = Item.Name;
				ИначеЕсли ЗначениеЗаполнено(Item.Description) Тогда
					СтрокаТЧ.Name = Item.Description;
				Иначе
					СтрокаТЧ.Name = Неопределено;
				КонецЕсли;
				
				СтрокаТЧ.Code		= "";
				СтрокаТЧ.UnitCode	= ?(ЗначениеЗаполнено(Item.UnitCode), Item.UnitCode, Неопределено);
				СтрокаТЧ.UnitName	= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
				СтрокаТЧ.Quantity	= ?(ЗначениеЗаполнено(Item.Quantity), ЧислоИзКомпоненты(Item.Quantity), 0);
				СтрокаТЧ.Price		= ?(ЗначениеЗаполнено(Item.Price), ЧислоИзКомпоненты(Item.Price), 0);
				СтрокаТЧ.SubtotalWithVatExcluded = ?(ЗначениеЗаполнено(Item.SubtotalWithVatExcluded), ЧислоИзКомпоненты(Item.SubtotalWithVatExcluded), 0);
				СтрокаТЧ.Vat		= ?(ЗначениеЗаполнено(Item.Vat), ЧислоИзКомпоненты(Item.Vat), 0);
				СтрокаТЧ.Subtotal	= ?(ЗначениеЗаполнено(Item.Subtotal), ЧислоИзКомпоненты(Item.Subtotal), 0);
				СтрокаТЧ.TaxRate	= Item.TaxRate;
				СтрокаТЧ.VatIsCalculatedByTaxAgent = НДСИсчисляетсяНалоговымАгентом(Item.TaxRate);
				
				НалоговыйАгентПоНДС = НалоговыйАгентПоНДС Или СтрокаТЧ.VatIsCalculatedByTaxAgent;
				
				тзТабличнаяЧасть.Добавить(СтрокаТЧ);
				
			КонецЦикла;
			
			Works_TotalVat	= Work_0.TotalVat;
			Works_Total		= Work_0.Total;
			
		КонецЕсли;
				
		стДокумент.Items = тзТабличнаяЧасть;
		
		стДокумент.ДатаДоговора 		= "";
		стДокумент.НомерДоговора 		= "";
		стДокумент.НаименованиеДоговора = "";
		
		стДокумент.Total 		= Works_Total;
		стДокумент.Vat 			= Works_TotalVat;
		стДокумент.isTaxAgent 	= НалоговыйАгентПоНДС;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция Новый_СтруктураСодержаниеДокумента()

		СодержаниеДокумента = Новый Структура;
		
		СодержаниеДокумента.Вставить("Document", 		Неопределено);
		СодержаниеДокумента.Вставить("Type", 			Неопределено);
		СодержаниеДокумента.Вставить("Items", 			Неопределено);
		СодержаниеДокумента.Вставить("ДатаДоговора",	Неопределено);
		СодержаниеДокумента.Вставить("НомерДоговора", 	Неопределено);
		СодержаниеДокумента.Вставить("НаименованиеДоговора", Неопределено);
		СодержаниеДокумента.Вставить("Total", 			Неопределено);
		СодержаниеДокумента.Вставить("Vat", 			Неопределено);
		СодержаниеДокумента.Вставить("isTaxAgent", 		Неопределено); // Истина, если есть хотя бы одна строка ТЧ со ставкой "НДС исчисляется налоговым агентом"
		
		Возврат СодержаниеДокумента; 
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_СтруктураСтрокаТЧ(ЕстьГТД = Ложь)
		
		СтрокаТЧ = Новый Структура;
		
		СтрокаТЧ.Вставить("Name", 		Неопределено);
		СтрокаТЧ.Вставить("Code", 		Неопределено);
		СтрокаТЧ.Вставить("NomenclatureArticle", Неопределено);
		СтрокаТЧ.Вставить("Quantity", 	Неопределено);
		СтрокаТЧ.Вставить("UnitCode", 	Неопределено);
		СтрокаТЧ.Вставить("UnitName", 	Неопределено);
		СтрокаТЧ.Вставить("Price", 		Неопределено);
		СтрокаТЧ.Вставить("SubtotalWithVatExcluded", Неопределено);
		СтрокаТЧ.Вставить("Vat",		Неопределено);
		СтрокаТЧ.Вставить("Subtotal",	Неопределено);
		СтрокаТЧ.Вставить("TaxRate",	Неопределено);
		СтрокаТЧ.Вставить("VatIsCalculatedByTaxAgent", Неопределено);
		
		Если ЕстьГТД Тогда
			СтрокаТЧ.Вставить("CountryCode",	Неопределено);
			СтрокаТЧ.Вставить("TDNumber",		Неопределено);
		КонецЕсли;
		
		Возврат СтрокаТЧ;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЧислоИзКомпоненты(Значение)
		
		Результат = 0;
		
		Если ЗначениеЗаполнено(Значение) И НРег(Значение) <> "без ндс" Тогда
			Результат = Число(Значение);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ОпределитьСтавкуНДСПоУслуге(СуммаБезНДС, СуммаНДС)
		
		Если СуммаБезНДС = 0 Тогда
			Возврат 0;
		Конецесли;
		
		РасчетнаяСтавка = 100 * СуммаНДС / СуммаБезНДС;
		Если РасчетнаяСтавка < 5 Тогда
			Возврат "0";
		ИначеЕсли РасчетнаяСтавка < 14 Тогда
			Возврат "10";
		ИначеЕсли РасчетнаяСтавка < 19 Тогда
			Возврат "18";	
		Иначе
			Возврат "20";
		КонецЕсли;
		
	КонецФункции
	
	// Признак того, что применяется обратное обложение НДС (п. 8 ст. 161 НК РФ)
	//
	// Параметры:
	//  TaxRate - Строка - Значение свойства TaxRate объекта <Имя коллекции>Item
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если НДС исчисляется налоговым агентом
	//
	&НаКлиенте
	Функция НДСИсчисляетсяНалоговымАгентом(TaxRate)
		
		Возврат ВРег(TaxRate) = ВРег("ИсчНалАг");
		
	КонецФункции
	
	&НаКлиенте
	Процедура ДополнитьСтруктуруСоответствие(Приемник, Источник) Экспорт
		
		Для Каждого КлючИЗначение Из Источник Цикл
			Приемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ЗаменитьНедопустимыеСимволыИмениФайла(ИмяФайла) Экспорт
		
		Результат = ИмяФайла;
		
		НедопустимыеСимволы = "\/:*?""<>|";
		КоличествоНедопустимыхСимволов = СтрДлина(НедопустимыеСимволы);
		
		Для Сч = 1 По КоличествоНедопустимыхСимволов Цикл
			Результат = СтрЗаменить(Результат, Сред(НедопустимыеСимволы, Сч, 1), "_");
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Возвращает организацию 1С
	//
	// Возвращаемое значение:
	//   <СправочникСсылка>   - организация 1С, принятая как значение по умолчанию
	//
	&НаКлиенте
	Функция ОрганизацияПоУмолчанию() Экспорт
		
		ОрганизацияПоУмолчанию = Неопределено;
		
		АктивныеОрганизации = СопоставленныеОрганизации(Истина);
		
		Если АктивныеОрганизации.Количество() = 1 Тогда
			
			ОрганизацияПоУмолчанию = АктивныеОрганизации[0];
			
		КонецЕсли;
		
		Возврат ОрганизацияПоУмолчанию;
	
	КонецФункции // ОрганизацияПоУмолчанию()
	
	&НаКлиенте
	Функция ОформитьОшибкиВHTML(Ошибка, Заголовок = "") Экспорт
		
		Результат = "";
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			
			ТелоHTML = "<H2>" + Заголовок + "</H2>" + Ошибка;
			
			Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
				
				// Если заголовок не указан, ставим рядом с сообщением пиктограмму ошибки.
				
				КартинкаВниманиеОшибка = Base64Строка(
				МетодКлиента("Модуль_Клиент", "ЭДО_БиблиотекаКартинок").ВниманиеОшибка.ПолучитьДвоичныеДанные());
				
				ТелоHTML = СтрЗаменить(ТелоHTML, "<p>", "<p><IMG src=""data:image/png;base64," + КартинкаВниманиеОшибка + """> ");
				
			КонецЕсли;
			
			Результат = "<HTML><HEAD>
			|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
			|<STYLE type=text/css>H3{MARGIN-BOTTOM:0em;MARGIN-TOP:0.5em}P{MARGIN-BOTTOM:0em;MARGIN-TOP:0.2em}</STYLE></HEAD>
			|<BODY>" + ТелоHTML + "</BODY></HTML>";
			
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция HTMLТекстОшибкиОтправки(ТекстОшибки) Экспорт
		
		Если ЭтоОшибкаНастройкиПараметровПодписания(ТекстОшибки) Тогда
			
			СсылкаНастроитьПараметрыПодписи = ГиперссылкаHTML("НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ", "Настроить параметры подписи");
			
			Результат = ПараграфHTML(ТекстОшибки) + Символы.ПС + СсылкаНастроитьПараметрыПодписи;
			
		ИначеЕсли ЭтоОшибкаЗаполненияДолжностиПодписанта(ТекстОшибки) Тогда
			
			СсылкаНастройкиСотрудника = ГиперссылкаHTML("НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА", "настройки сотрудника Диадока");
			
			АдресИнструкции = АдресаИнтернетРесурсов().Инструкция_ЗаполнитьДолжностьСотрудника;
			СсылкаНаИнструкцию = ГиперссылкаHTML(АдресИнструкции, "Инструкция по заполнению должности");
			
			РасшифровкаОшибки = Новый Массив;
			РасшифровкаОшибки.Добавить("Отсутствует должность подписанта.");
			РасшифровкаОшибки.Добавить(СтрШаблон("Перейдите в %1 и заполните должность.", СсылкаНастройкиСотрудника));
			РасшифровкаОшибки.Добавить("После этого перезапустите модуль.");
			РасшифровкаОшибки.Добавить(СсылкаНаИнструкцию);
			
			Результат = ПараграфHTML(СтрСоединить(РасшифровкаОшибки, " "));
			
		Иначе
			
			Результат = ПараграфHTML(ТекстОшибки);
			
		КонецЕсли;
		
		Результат = ОформитьОшибкиВHTML(Результат);
		
		Возврат Результат;
		
	КонецФункции
	
	// Осуществляет поиск значения в указанных колонках таблицы значений, представленной в виде массива структур.
	// Аналог метода ТаблицаЗначений.Найти(<Значение>, <Колонки>)
	//
	// Параметры:
	//  МассивСтруктур  - Массив     	- Все элементы массива - структуры с одинаковым набором ключей.
	//  Значение     	- Произвольный  - Искомое значение.
	//  Ключ       		- Строка     	- Список ключей структуры, разделенных запятыми, по которым производится поиск.
	//                                    	Если параметр не указан, поиск осуществляется по всем свойствам.
	// 
	// Возвращаемое значение:
	//  Структура   - Первый элемент массива, содержащий искомое значение.
	//  Неопределено - Если значение не найдено.
	//
	&НаКлиенте
	Функция МассивСтруктур_Найти(МассивСтруктур, Значение, Ключ) Экспорт
		
		Результат = Неопределено;
		
		Если ЗначениеЗаполнено(МассивСтруктур) Тогда
			
			Для Каждого Структура Из МассивСтруктур Цикл 
				
				Если Структура[Ключ] = Значение Тогда
					Результат = Структура;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПараметрыОповещенияВСтрокуHTMLСообщения(ОбработчикОповещения, РезультатОповещения = Неопределено) Экспорт
		
		Результат = "Оповещение:" + ОбработчикОповещения;
		
		Если ЗначениеЗаполнено(РезультатОповещения) Тогда
			
			Результат = Результат + "?" + РезультатОповещения;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции //ПараметрыОповещенияВСтрокуHTMLСообщения()
	
	&НаКлиенте
	Функция ПараметрыОповещенияИзСтрокиHTMLСообщения(СтрокаОповещения) Экспорт
		
		ОбработчикОповещения = "";
		РезультатОповещения	 = "";
		
		Поз = Найти(НРег(СтрокаОповещения), НРег("Оповещение:"));
		СтрокаОповещенияБезПрефикса = Сред(СтрокаОповещения, Поз + СтрДлина("Оповещение:"));
		
		ЧастиСтроки = Преобразование_СтрокуВМассивСлов(СтрокаОповещенияБезПрефикса, "?");
		
		ОбработчикОповещения = ЧастиСтроки[0];
		
		Если ЧастиСтроки.Количество() > 1 Тогда
			ЧастиСтроки.Удалить(0); // Удаляем обработчик
			РезультатОповещения = Преобразование_МассивВСтроку(ЧастиСтроки, "?");
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("ОбработчикОповещения"	, ОбработчикОповещения);
		Результат.Вставить("РезультатОповещения"	, РезультатОповещения);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Base64СтрокаИзДвоичныхДанных(ДвоичныеДанные)
		
		Результат = Base64Строка(ДвоичныеДанные);
		Результат = СтрЗаменить(Результат, Символы.ВК, "");
		Результат = СтрЗаменить(Результат, Символы.ПС, "");
		
		Возврат Результат;
		
	КонецФункции

	// Формирует строковое представление имени конфигурациии
	//
	// Возвращаемое значение:
	//	Строка
	&НаСервереБезКонтекста
	Функция ОписаниеКонфигурации()
		
		Результат = Метаданные.ПодробнаяИнформация + " (" + Метаданные.Версия + ")";
		
		Возврат Результат;
		
	КонецФункции //ОписаниеКонфигурации()
	
	&НаКлиенте
	Функция ВидКлиента()
		
		Результат = Неопределено;
		
		#Если ТонкийКлиент Тогда
			Результат = "Тонкий клиент";
		#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
			Результат = "Толстый клиент обычное приложение";
		#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
			Результат = "Толстый клиент управляемые формы";
		#ИначеЕсли ВебКлиент Тогда
			Результат = "Веб клиент";
		#ИначеЕсли НаСервере Тогда
			Результат = "Сервер";
		#ИначеЕсли ВнешнееСоединение Тогда
			Результат = "Внешнее соединение";
		#КонецЕсли
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция МодульТиповой()
		
		Результат = "";
		
		СтруктураРасположенияМодуля	= МетодСервера(,"МестоРасположенияМодуля");
		
		ИмяФайлаМодуля				= СтруктураРасположенияМодуля.Путь;
		РасположениеМодуля			= СтруктураРасположенияМодуля.Место;
						
		Если РасположениеМодуля = "ВКонфигурации" Тогда
			Результат = "Неизвестно";
		Иначе
			
			Действие = ДействиеПриОбновленииМодуляФайловыйВариант(СтруктураРасположенияМодуля);
			
			Если Действие = "Скачать" Тогда
				Результат = "Да";
			ИначеЕсли НЕ ЗначениеЗаполнено(ИмяФайлаМодуля) Тогда
				Результат = "Неизвестно";
			Иначе
				Результат = "Нет";
			КонецЕсли;	
			
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции	
	
	// Функция - Описание организации
	//
	// Параметры:
	//  Организация - СправочникСсылка - организация, сведения о которой нужно получить
	// 
	// Возвращаемое значение:
	//  Структура - содержит поля:
	//   * Наименование - Строка - полное (если заполнено) или краткое наименование организации
	//   * ИНН - Строка - ИНН организации
	//   * КПП - Строка - КПП организации
	//
	&НаКлиенте
	Функция ОписаниеОрганизации(Организация)
		
		ОписаниеОрганизации = Новый Структура;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Наименование");
		Реквизиты.Вставить("НаименованиеПолное");
		Реквизиты.Вставить("ИНН");
		Реквизиты.Вставить("КПП");
		
		ЗначенияРеквизитов = МетодСервера(, "ЗначенияРеквизитовОбъекта", Организация, Реквизиты);
		
		Если ЗначениеЗаполнено(ЗначенияРеквизитов.НаименованиеПолное) Тогда 
			ОписаниеОрганизации.Вставить("Наименование", ЗначенияРеквизитов.НаименованиеПолное);
		Иначе 
			ОписаниеОрганизации.Вставить("Наименование", ЗначенияРеквизитов.Наименование);
		КонецЕсли;
		
		ОписаниеОрганизации.Вставить("ИНН", ЗначенияРеквизитов.ИНН);
		ОписаниеОрганизации.Вставить("КПП", ЗначенияРеквизитов.КПП);
		
		Возврат ОписаниеОрганизации;
		
	КонецФункции //ОписаниеОрганизации()
	
	// Обертка для формирования ключей параметров, передаваемых в URL.
	// Используется при формировании URL для открытия онлайн-чата.
	// Параметры, используемые большим количеством сервисов,
	// должны иметь префикс "base/"
	//
	&НаКлиенте
	Функция СтрокаБазовогоПараметраОнлайнКонсультанта(ИмяПараметра)
		
		Возврат СтрЗаменить("base/%ИмяПараметра%", "%ИмяПараметра%", ИмяПараметра);
		
	КонецФункции

	// Обертка для формирования ключей параметров, передаваемых в URL.
	// Используется при формировании URL для открытия онлайн-чата.
	// Параметры, имеющие отношение только к конкретному сервису, 
	// должны иметь префикс "scope/%service_name%/".
	// В данном случае %service_name% = 1CDiadoc
	// 
	&НаКлиенте
	Функция СтрокаПродуктовогоПараметраОнлайнКонсультанта(ИмяПараметра)
		
		Возврат СтрЗаменить("scope/1CDiadoc/%ИмяПараметра%", "%ИмяПараметра%", ИмяПараметра);
		
	КонецФункции
	
	// Преобразует коллекцию элементов КлючИЗначение в строку, представляющую собой массив параметров URI
	//
	// Параметры:
	//  КоллекцияПараметров - Структура, Соответствие - коллекция элементов КлючИЗначение
	// 
	// Возвращаемое значение:
	//  Строка - коллекция KeyValue в формате: {"key1":"value1","key2":"value2",...,"keyN":"valueN"}
	//
	&НаКлиенте
	Функция СтруктуруВКоллекциюПараметровURI(КоллекцияПараметров)
		
		Результат = "";
		
		Для Каждого Параметр Из КоллекцияПараметров Цикл 
			
			Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда 
				Продолжить;
			КонецЕсли;
			
			Ключ 		= Параметр.Ключ;
			Значение 	= СокрЛП(Параметр.Значение);
			Значение 	= СтрЗаменить(Значение, "\"	, "\\"	); // экранируем обратный слеш
			Значение 	= СтрЗаменить(Значение, """", "\"""	); // экранируем кавычки
			
			ПараметрСтрокой = """"+Ключ+""":"""+Значение+"""";
			
			Результат = Результат + ПараметрСтрокой + ",";
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Результат) Тогда 
			Результат = Лев(Результат, СтрДлина(Результат)-1);
			Результат = СтрЗаменить("{%Параметры%}", "%Параметры%", Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Преобразует коллекцию элементов КлючИЗначение в строку параметров URI
	//
	// Параметры:
	//  КоллекцияПараметров - Структура - коллекция элементов КлючИЗначение
	// 
	// Возвращаемое значение:
	//  Строка - строка параметров в формате ?paramName1=paramValue1&paramName2=paramValue2&...&paramNameN=paramValueN
	//
	&НаКлиенте
	Функция СтруктуруВСтрокуПараметровURI(КоллекцияПараметров)
		
		Результат = "";
		
		Для Каждого Параметр Из КоллекцияПараметров Цикл 
			
			Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда 
				Продолжить;
			КонецЕсли;
			
			Результат = Результат 
						+ "" + Параметр.Ключ
						+ "=" + СокрЛП(Параметр.Значение)
						+ "&";
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Результат) Тогда 
			Результат = "?" + Лев(Результат, СтрДлина(Результат)-1);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Разделяет строку на части по указанным символам-разделителям.
	// По аналогии с глобальным методом СтрРазделить, добавленным в платформу версии 8.3.6.
	//
	// Параметры:
	//  Строка         - Строка - разделяемая строка;
	//  Разделитель    - Строка - строка символов, каждый из которых является индивидуальным разделителем;
	//  ВключатьПустые - Булево - Ложь, если пустые части строки включать в результат не нужно.
	// 
	// Возвращаемое значение:
	//   Массив - массив со строками, которые получились в результате разделения исходной строки.
	//
	&НаКлиенте
	Функция РазделитьСтроку(Знач Строка, Разделитель = ",", ВключатьПустые = Истина)
		
		Результат = Новый Массив;
		
		МассивРазделителей = Новый Массив;
		
		Для Сч = 1 По СтрДлина(Разделитель) Цикл
			СимволРазделителя = Сред(Разделитель, Сч, 1);
			МассивРазделителей.Добавить(СимволРазделителя);
		КонецЦикла;
		
		Пока Истина Цикл
			
			Поз = 0;
			
			Для Каждого СимволРазделителя Из МассивРазделителей Цикл
				
				Поз = Найти(Строка, СимволРазделителя);
				
				Если Поз > 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Поз = 0 Тогда
				Подстрока	 = СокрЛП(Строка);
				Строка		 = "";
			Иначе
				Подстрока	 = СокрЛП(Лев(Строка, Поз - 1));
				Строка		 = Сред(Строка, Поз + 1);
			КонецЕсли;
			
			Если ВключатьПустые ИЛИ ЗначениеЗаполнено(Подстрока) Тогда
				Результат.Добавить(Подстрока);
			КонецЕсли;
			
			Если Поз = 0 Тогда
				Прервать; // Нет разделителя, за которым могла бы быть следующая часть строки.
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Проверяет, содержит ли строка только цифры.
	//
	// Параметры:
	//  Значение - Строка - проверяемая строка.
	//
	// Возвращаемое значение:
	//  Булево - Истина, если строка содержит только цифры или пустая.
	//
	&НаКлиенте
	Функция ТолькоЦифрыВСтроке(Значение) Экспорт
		
		Результат	 = Истина;
		ДлинаСтроки	 = СтрДлина(Значение);
		
		Для НомерСимвола = 1 По ДлинаСтроки Цикл
			
			КодСимвола = КодСимвола(Значение, НомерСимвола);
			
			Если КодСимвола < 48 Или КодСимвола > 57 Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Возврат Результат;
				
	КонецФункции
	
	// Безопасно получает значение из массива по его индексу
	//
	// Параметры:
	//  Массив              - Массив       - массив, из которого нужно получить значение
	//  ИндексЗначения      - Число        - индекс значения
	//  ЗначениеПоУмолчанию - Произвольный - значение, которое нужно вернуть
	//                                       если указанный индекс выходит за границу массива
	// 
	// Возвращаемое значение:
	//  Произвольный - значение из массива. ЗначениеПоУмолчанию если индекс выходит за границы массива
	//
	&НаКлиенте
	Функция ЗначениеИзМассива(Массив, ИндексЗначения, ЗначениеПоУмолчанию = Неопределено)
		
		Результат = ЗначениеПоУмолчанию;
		
		Если ИндексЗначения <= Массив.ВГраница() Тогда
			Результат = Массив[ИндексЗначения];
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Добавляет значение в массив
	//
	// Параметры:
	//	Значение - Произвольный - преобразуемое значение
	//
	// Возвращаемое значение:
	//	Массив
	&НаКлиенте
	Функция ЗначениеВМассив(Значение)
	
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Результат = Значение;
			
		Иначе
			
			Результат = Новый Массив;
			Результат.Добавить(Значение);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Подставляет параметры в строку, максимальное число параметров - 5.
	//
	// Параметры:
	//  ШаблонСтроки - Строка - шаблон содержащий маркеры подстановки вида: "%1..%N"
	//                        . Нумерация маркеров начинается с 1.
	//                          N не может быть более 5.
	//  Параметр<n>  - Строка - подставляемые параметры.
	//
	// Возвращаемое значение:
	//   Строка - строка шаблона с подставленными параметрами.
	//
	&НаКлиенте
	Функция ПодставитьПараметрыВСтроку(ШаблонСтроки, Параметр1
		, Параметр2 = Неопределено
		, Параметр3 = Неопределено
		, Параметр4 = Неопределено
		, Параметр5 = Неопределено) Экспорт
		
		Результат = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
		Результат = СтрЗаменить(Результат	, "%2", Параметр2);
		Результат = СтрЗаменить(Результат	, "%3", Параметр3);
		Результат = СтрЗаменить(Результат	, "%4", Параметр4);
		Результат = СтрЗаменить(Результат	, "%5", Параметр5);
		
		Возврат Результат;
		
	КонецФункции
	
	// Объединяет части пути через разделитель
	//
	&НаКлиенте
	Функция ОбъединитьПути(П1, П2, П3 = Неопределено, П4 = Неопределено) Экспорт
		
		Результат = П1;
		РазделительПути = ПолучитьРазделительПути();
		
		ЧастиПути = Новый Массив;
		ЧастиПути.Добавить(П2);
		ЧастиПути.Добавить(П3);
		ЧастиПути.Добавить(П4);
		
		Для Каждого Элемент Из ЧастиПути Цикл
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				Прервать;
			КонецЕсли;
			
			Если Прав(Результат, 1) <> РазделительПути Тогда
				Результат = Результат + РазделительПути;
			КонецЕсли;
			
			Результат = Результат + Элемент;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Псевдоперечисление. Варианты сценариев групповой обработки
	&НаКлиенте
	Функция СценарииГрупповойОбработки() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("Создать"			, "Создать");
		Результат.Вставить("Подписать"			, "Подписать");
		Результат.Вставить("Сопоставить"		, "Сопоставить");
		Результат.Вставить("СохранитьНаДиск"	, "СохранитьНаДиск");
		Результат.Вставить("ПодписатьИСоздать"	, "ПодписатьИСоздать");
				
		Возврат Результат;
		
	КонецФункции
	
	// Возвращает массив переданных параметров в порядке их расположения
	// 
	// Параметры:
	//  Параметр0 - Произвольный - значение, которое будет добавлено в массив по индексу 0
	//  Параметр1 - Произвольный - значение, которое будет добавлено в массив по индексу 1
	//  Параметр2 - Произвольный - значение, которое будет добавлено в массив по индексу 2
	//  Параметр3 - Произвольный - значение, которое будет добавлено в массив по индексу 3
	//  Параметр4 - Произвольный - значение, которое будет добавлено в массив по индексу 4
	//
	// Возвращаемое значение:
	//   Массив - массив переданных параметров.
	//
	&НаКлиенте
	Функция ПараметрыВМассив(Параметр0 = NULL
		, Параметр1 = NULL
		, Параметр2 = NULL
		, Параметр3 = NULL
		, Параметр4 = NULL) Экспорт
		
		Результат = Новый Массив(5);
		
		Результат[0] = Параметр0;
		Результат[1] = Параметр1;
		Результат[2] = Параметр2;
		Результат[3] = Параметр3;
		Результат[4] = Параметр4;
		
		Для Сч = -Результат.ВГраница() По 0 Цикл
			
			Если Результат[-Сч] = NULL Тогда
				Результат.Удалить(-Сч);
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЗначениеВСтрокуJSON(Значение)
	
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		
		ЗаписатьJSON(Запись, Значение);
		
		Результат = Запись.Закрыть();
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ЗначениеИзСтрокиJSON(СтрокаJSON)
	
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		
		Результат = ПрочитатьJSON(Чтение);
		
		Чтение.Закрыть();
		
		Возврат Результат;
		
	КонецФункции
	
	// Псевдоперечисление. Варианты направления документов
	// в терминологии конпоненты
	//
	// Возвращаемое значение:
	//	Фиксированная структура с ключами:
	//	* Входящий
	//	* Исходящий
	//	* Внутренний
	&НаКлиенте
	Функция НаправленияДокументов() Экспорт
		
		// http://1c-docs.diadoc.ru/ru/latest/ComObjects/Enums/DocumentDirection.html
		
		ВозможныеНаправления = Новый Структура;
		
		ВозможныеНаправления.Вставить("Входящий"	, "Inbound");
		ВозможныеНаправления.Вставить("Исходящий"	, "Outbound");
		ВозможныеНаправления.Вставить("Внутренний"	, "Internal");
		
		Результат = Новый ФиксированнаяСтруктура(ВозможныеНаправления);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьBoxGuidПоId(BoxId) Экспорт
		
		Результат = "";
		
		Для каждого ЭлементКонтекста Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			
			Если ЭлементКонтекста.BoxId = BoxId Тогда 
				Результат = ЭлементКонтекста.Box.Guid;
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Перечисление_ТипыОтветногоДействия()
		
		// https://1c-docs.diadoc.ru/ru/latest/ComObjects/Enums/ReplyType.html
		
		ВозможныеДействия = Новый Структура;
		
		ВозможныеДействия.Вставить("ПодписаниеДокумента"			, "AcceptDocument");
		ВозможныеДействия.Вставить("ОтказВПодписиДокумента"			, "RejectDocument");
		ВозможныеДействия.Вставить("ЗапроcНаУточнениеДокумента"		, "CorrectionRequest");
		ВозможныеДействия.Вставить("ЗапроcНаАннулированиеДокумента"	, "RevocationRequest");
		ВозможныеДействия.Вставить("ПринятиеАннулированияДокумента"	, "AcceptRevocation");
		ВозможныеДействия.Вставить("ОтказОтАннулированияДокумента"	, "RejectRevocation");
		
		Результат = Новый ФиксированнаяСтруктура(ВозможныеДействия);
		
		Возврат Результат;
				
	КонецФункции
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ИНТЕГРАЦИЯ

	&НаКлиенте
	Функция ПроверитьФорматДатыПрото(ЗначениеПоля, ПредставлениеПоля, ОбязательноеЗаполнение= Ложь) Экспорт  
		
		если ОбязательноеЗаполнение и (ЗначениеЗаполнено(ЗначениеПоля)=Ложь) тогда 
			возврат  "<p>не указана "+ПредставлениеПоля+"</p>
			|"
		конецЕсли;
		
		Если ТипЗнч(ЗначениеПоля) = тип("Дата") тогда 
			Если (ЗначениеПоля < '18000101') или (ЗначениеПоля>='21000101') тогда 
				возврат "<p>"+ПредставлениеПоля+" ("+формат(ЗначениеПоля,"ДФ=dd.MM.yyyy")+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЗначениеПоля) = тип("Строка") тогда 	
			ДатаГод = прав(ЗначениеПоля, 4);
			Если (ДатаГод <"1800") или (ДатаГод >"2099") тогда 
				возврат "<p>"+ПредставлениеПоля+" ("+ЗначениеПоля+") должна находиться в интервале 01.01.1800 - 31.12.2099</p>"
			КонецЕсли;
		КонецЕсли;
		
		возврат ""
		
	КонецФункции

	&НаКлиенте
	Процедура ДобавитьВСписокФильтр(СписокФильтров, МассивТиповФильтруемыхДокументов, СтрокаФильтра)
		
		Для каждого ТипДокумента Из МассивТиповФильтруемыхДокументов Цикл
			
			СтруктураФильтра=	Новый Структура();
			СтруктураФильтра.Вставить("ТипДокумента", 	ТипДокумента);
			СтруктураФильтра.Вставить("Фильтр", 		СтрокаФильтра);
			
			СписокФильтров.Добавить(СтруктураФильтра);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьСписокФильтровДляДокументовДиадок(Направление, ФильтрПоСостояниюДокументооборота, ФильтрПотипамДокументов) 
		
		//ФильтрПотипамДокументов =1 выводим РНК
		//ФильтрПотипамДокументов =2 выводим СФ
		//ФильтрПотипамДокументов =3 выводим Счета на оплату
		//ФильтрПотипамДокументов =4 выводим неформализованные 
		//ФильтрПотипамДокументов =5 выводим Акты сверки
		//ФильтрПотипамДокументов =0 выводим все 
		
		// ФильтрПоСостояниюДокументооборота = 0 все состояния
		// ФильтрПоСостояниюДокументооборота = 1 завершен
		// ФильтрПоСостояниюДокументооборота = 2 не завершен
		// ФильтрПоСостояниюДокументооборота = 3 прекращен
		
		фильтрDirection = направление;
		СписокФильтров = Новый Массив;
		
		Если Направление = "OutboundWaitingForSenderSignature" Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), ФильтрDirection);
			
			Возврат СписокФильтров;
		КонецЕсли;
		
		Если ФильтрПоСостояниюДокументооборота = 0  Тогда // все состояния
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), ФильтрDirection);
		ИначеЕсли  ФильтрПоСостояниюДокументооборота = 1 Тогда // завершен
			
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), ФильтрDirection+"Finished"); //сф
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 3), фильтрDirection+""); //строго односторонние
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"WithRecipientSignature"); //строго двусторонние
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"WithRecipientSignature"); //односторонние или двусторонние
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"NoRecipientSignatureRequest"); //односторонние или двусторонние
	
			// Для актов/накладных в 820@ существует статус "подписан с разногласиями"
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов("1", 2), фильтрDirection + "WithRecipientPartiallySignature");
		
		ИначеЕсли  ФильтрПоСостояниюДокументооборота = 2 Тогда // не завершен
			
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), фильтрDirection+"NotFinished"); //сф
 	   		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"WaitingForRecipientSignature"); //строго двусторонние
 	   		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"WaitingForRecipientSignature"); //односторонние или двусторонние

		ИначеЕсли  ФильтрПоСостояниюДокументооборота = 3 Тогда // прекращен                                                
						
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationAccepted");
			Если фильтрDirection = "Outbound" Тогда
				ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"InvalidSenderSignature");
	  		КонецЕсли;
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 2), фильтрDirection+"RecipientSignatureRequestRejected"); //строго двусторонние
	 	   	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 4), фильтрDirection+"RecipientSignatureRequestRejected"); //односторонние или двусторонние
			
		ИначеЕсли	ФильтрПоСостояниюДокументооборота = 4 Тогда //Требуется уточнение
     		ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 1), фильтрDirection+"InvoiceAmendmentRequested"); //сф	
		ИначеЕсли	ФильтрПоСостояниюДокументооборота = 21 Тогда 
	    	ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationIsRequestedByMe");  //ожидается Аннулирование
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 22 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RequestsMyRevocation");  //запрошено Аннулирование
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 23 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationAccepted");  //Документ аннулирован
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 24 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"RevocationRejected");  //отказано в аннулировании
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 11 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"WaitingForResolution");  //передано на согласование
		ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 12 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"Approved");  //согласовано		
	   	ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 13 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"Disapproved");  //отказано в согласованияя		
	    ИначеЕсли 	ФильтрПоСостояниюДокументооборота = 14 Тогда 
			ДобавитьВСписокФильтр(СписокФильтров, ПолучитьМассивТиповДокументов(ФильтрПотипамДокументов, 0), фильтрDirection+"SignatureRequestRejected");  //отказано в подписании		
		КонецЕсли;
				
		Возврат СписокФильтров;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьФилиаловDepartmentId()
		
		ФилиаловDepartmentId = Новый Массив;
		
		Возврат ФилиаловDepartmentId;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьDepartmentByKpp(Organization, DepartmentKpp)
		
		Для Индекс = 0 По Organization.Departments.Count - 1 Цикл
			dep=	Organization.Departments.GetItem(Индекс);
			Если dep.Kpp = DepartmentKpp Тогда
				Возврат dep.Id;
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
		
	Конецфункции
	
	&НаКлиенте
	Функция ВернутьМассивDepartmentId(стрЯщик, Box, ПодразделениеID, ВключатьПодчиненныеПодазделения)
		
		ПодразделениеID_текущее = ПодразделениеID;
		Если ПустаяСтрока(ПодразделениеID) Тогда
			Если НЕ ПустаяСтрока(стрЯщик.КПППодразделения) Тогда
				ПодразделениеID_текущее = ПолучитьDepartmentByKpp(Box, стрЯщик.КПППодразделения);   
			КонецЕсли;
		КонецЕсли;
		
		массивDepartmentId = Новый Массив;
		Если ПодразделениеID_текущее = "" Тогда
			ФилиаловDepartmentId = ПолучитьФилиаловDepartmentId();
			ЕстьПодразделенеКоторыеНужноОбходить = Ложь;
			массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", "", Ложь));
			Если ВключатьПодчиненныеПодазделения Тогда
				Для Индекс = 0 По Box.Departments.Count - 1 Цикл
					
					department=	Box.Departments.GetItem(Индекс);
					
					Если ФилиаловDepartmentId.Найти(department.Id) = Неопределено Тогда
						массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", department.Id, Истина));
					Иначе
						ЕстьПодразделенеКоторыеНужноОбходить = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЕстьПодразделенеКоторыеНужноОбходить = Ложь Тогда
				массивDepartmentId.Очистить();
			КонецЕсли;
		Иначе
			массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", ПодразделениеID_текущее, ВключатьПодчиненныеПодазделения));
		КонецЕсли;
		
		Если массивDepartmentId.Количество()=0 Тогда 
			//добавим пустой фильтр 
			массивDepartmentId.Добавить(Новый Структура("DepartmentID, вклДочерниеПодразделения", "", ВключатьПодчиненныеПодазделения));
		КонецЕсли;	
		
		Возврат  массивDepartmentId;
		
	КонецФункции	
	
	&НаКлиенте
	Функция ПолучитьСтруктуруЗадачи(НаименованиеЯщика, Организация, AsyncTask)
		
		Задача=	Новый Структура();
		Задача.Вставить("НаименованиеЯщика", 	НаименованиеЯщика);
		Задача.Вставить("Организация", 			Организация);
		Задача.Вставить("Task", 				AsyncTask);
		
		Возврат Задача;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьМассивАсинхронныхЗадач(СписокФильтров, ДатаНачала, ДатаОкончания, СписокЯщиков, counterAgentBoxId, ПараметрыВыборки)
		
		ПодразделениеID=					?(ПараметрыВыборки.Свойство("ПодразделениеID"), ПараметрыВыборки.ПодразделениеID, "");
		ВключатьПодчиненныеПодазделения=	?(ПараметрыВыборки.Свойство("ВключатьПодчиненныеПодазделения"), ПараметрыВыборки.ВключатьПодчиненныеПодазделения, Истина);
		ОтбиратьПоДатеДокумента=			?(ПараметрыВыборки.Свойство("ОтбиратьПоДатеДокумента"), ПараметрыВыборки.ОтбиратьПоДатеДокумента, Ложь);
		
		МассивЗадач=	Новый Массив;
		
		Для Каждого стрЯщик Из СписокЯщиков Цикл
			
			ОбработкаПрерыванияПользователя();
			
			Box=	 			ПолучитьЯщикДиадокДляОрганизации(стрЯщик.Организация, стрЯщик.BoxId);
			НаименованиеЯщика=	Box.name;
			массивDepartmentId=	ВернутьМассивDepartmentId(стрЯщик, Box, ПодразделениеID, ВключатьПодчиненныеПодазделения);
			
			Для каждого ФильтрАпи Из СписокФильтров Цикл
				Для каждого depId Из массивDepartmentId Цикл
					
					ОбработкаПрерыванияПользователя();
					
					DocumentsTask=	Box.getDocumentsTask();
					
					Если ОтбиратьПоДатеДокумента Тогда
						DocumentsTask.FromDocumentDate=			ДатаНачала;
						Если НЕ ПараметрыВыборки.Направление = "OutboundWaitingForSenderSignature" Тогда
							DocumentsTask.ToDocumentDate=		КонецДня(Датаокончания);
						КонецЕсли;
					Иначе
						DocumentsTask.FromSendDate=			ДатаНачала;
						Если НЕ ПараметрыВыборки.Направление = "OutboundWaitingForSenderSignature" Тогда
							DocumentsTask.ToSendDate=		КонецДня(Датаокончания);
						КонецЕсли;
					КонецЕсли;
					DocumentsTask.Category=					ФильтрАпи.ТипДокумента + "." + ФильтрАпи.Фильтр;
					DocumentsTask.counterAgentId=			counterAgentBoxId;
					DocumentsTask.DepartmentId=				depId.DepartmentId;
					DocumentsTask.ExcludeSubdepartments=	НЕ depId.вклДочерниеПодразделения;
					
					AsyncTask=	DocumentsTask.GetDocumentsAsync();
					Задача=		ПолучитьСтруктуруЗадачи(НаименованиеЯщика, СтрЯщик.Организация, AsyncTask);
					МассивЗадач.Вставить(0, Задача);
					
				КонецЦикла;
			КонецЦикла;
		Конеццикла;  
		
		Возврат МассивЗадач;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьРезультатВыполненияЗадач(МассивЗадач, ПараметрыВыборки)
		
		Результат = Новый Массив;
		
		Пока ЗначениеЗаполнено(МассивЗадач) Цикл
			
			Для Сч = -МассивЗадач.ВГраница() По 0 Цикл
				
				Задача = МассивЗадач[-Сч];
				
				ПоказатьСостояниеОбработки(НСтр("ru = 'Заполнение списка документов'"));
				
				Если Задача.Task.IsCompleted Тогда
					
					DocumentsTask	 = Задача.Task.Result;
					ВГраница		 = DocumentsTask.Count - 1;
					
					Для ИндексДокумента = 0 По ВГраница Цикл
						
						ОбработкаПрерыванияПользователя();
						
						Document = DocumentsTask.GetItem(ИндексДокумента);
						ИмяТипа = Document.TypeNamedId;
						
						Если Document.Counteragent <> Неопределено Тогда
							
							// Фильтры УПД, пока в API нет фильтров по Function.
							ФильтрПотипамДокументов = ПараметрыВыборки.ТипыДокументов;
							ЭтоУПД = (ИмяТипа = "UniversalTransferDocument" Или ИмяТипа = "UniversalTransferDocumentRevision");
							Если Не ПустаяСтрока(ФильтрПотипамДокументов) И ЭтоУПД Тогда
								
								ТипДокумента = ТипДокументаУПД(Document.Function);
								
								Если 	ТипДокумента = ТипДокументаУПД("СЧФДОП")
									И ФильтрПотипамДокументов <> "5"
									И ФильтрПотипамДокументов <> "7"
								ИЛИ ТипДокумента = ТипДокументаУПД("СЧФ")
									И ФильтрПотипамДокументов <> "2"
									И ФильтрПотипамДокументов <> "24"
									И ФильтрПотипамДокументов <> "26"
								ИЛИ ТипДокумента = ТипДокументаУПД("ДОП")
									И ФильтрПотипамДокументов <> "1"
									И ФильтрПотипамДокументов <> "13"
									И ФильтрПотипамДокументов <> "15"
								Тогда
									Продолжить;
								КонецЕсли;
								
							КонецЕсли;
							
							// Фильтры УКД, пока в API нет фильтров по Function.
							ЭтоУКД = (ИмяТипа = "UniversalCorrectionDocument" Или ИмяТипа = "UniversalCorrectionDocumentRevision");
							Если Не ПустаяСтрока(ФильтрПотипамДокументов) И ЭтоУКД Тогда
								
								ТипДокумента = ТипДокументаУКД(Document.Function);
								
								Если 	ТипДокумента = ТипДокументаУКД("КСЧФДИС")
									И ФильтрПотипамДокументов <> "6"
								ИЛИ ТипДокумента = ТипДокументаУКД("КСЧФ")
									И ФильтрПотипамДокументов <> "2"
									И ФильтрПотипамДокументов <> "25"
								ИЛИ ТипДокумента = ТипДокументаУКД("ДИС")
									И ФильтрПотипамДокументов <> "1"
									И ФильтрПотипамДокументов <> "14"
								Тогда
									Продолжить;
								КонецЕсли;
								
							КонецЕсли;
							
							СтруктураДокумента	= Новый Структура;
							ЗаполнитьСтрокуТаблицыДокумента(Document, СтруктураДокумента, Задача.НаименованиеЯщика, Ложь);
							Результат.Добавить(СтруктураДокумента);
							
						КонецЕсли;
						
					КонецЦикла;
					
					МассивЗадач.Удалить(-Сч);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СвернутьТаблицуДокументовДиадок(Результат);
			
		КонецЦикла;
		
		ДобавитьПервичныйДокумент(Результат);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ДобавитьПервичныйДокумент(МассивДокументов)
		
		Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
			Возврат;
		КонецЕсли; 
		
		МассивДокументовСервер = Новый Массив;
		
		// Формируем сокращенную структуру документа для передачи её на сервер 1С.
		Для Каждого СтруктураДокумента Из МассивДокументов Цикл
			
			СтруктураДокументаСервер = Новый Структура;
			СтруктураДокументаСервер.Вставить("DocumentID"		 , СтруктураДокумента.DocumentID);
			СтруктураДокументаСервер.Вставить("BoxID"			 , СтруктураДокумента.BoxID);
			СтруктураДокументаСервер.Вставить("DocumentDirection", СтруктураДокумента.DocumentDirection);
			СтруктураДокументаСервер.Вставить("DocumentType"	 , СтруктураДокумента.DocumentType);
			СтруктураДокументаСервер.Вставить("DocumentFunction" , СтруктураДокумента.DocumentFunction);
			СтруктураДокументаСервер.Вставить("ЭлектронныйДокумент", СтруктураДокумента.ЭлектронныйДокумент);
			СтруктураДокументаСервер.Вставить("ПервичныйДокумент");
			
			МассивДокументовСервер.Добавить(СтруктураДокументаСервер);
			
		КонецЦикла;
		
		ДобавитьПервичныйДокументНаСервере(МассивДокументовСервер);
		
		// В результате МассивДокументовСервер содержит только ИндексСтроки и ПервичныйДокумент.
		Для Каждого СтруктураДокумента Из МассивДокументовСервер Цикл
			МассивДокументов[СтруктураДокумента.ИндексСтроки].Вставить("ПервичныйДокумент", СтруктураДокумента.ПервичныйДокумент);
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ДобавитьПервичныйДокументНаСервере(МассивДокументов)
		
		МетодСервера(,"ЗаполнитьТаблицуДокументовДиадокДокументами1С", МассивДокументов);
		
		// Оставляем в МассивДокументов только ИндексСтроки и ПервичныйДокумент
		ОбратныйИндекс = МассивДокументов.ВГраница();
		Пока ОбратныйИндекс > -1 Цикл
			
			ПервичныйДокумент = МассивДокументов[ОбратныйИндекс].ПервичныйДокумент;
			
			Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
				МассивДокументов[ОбратныйИндекс] = Новый Структура("ИндексСтроки, ПервичныйДокумент", ОбратныйИндекс, ПервичныйДокумент);
			Иначе
				МассивДокументов.Удалить(ОбратныйИндекс);
			КонецЕсли;
			
			ОбратныйИндекс = ОбратныйИндекс - 1;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СвернутьТаблицуДокументовДиадок(ТаблицаДокументовДиадок)
		
		// УПД - документ с квантовой запутанностью, может существовать сразу в двух статусах (InboundFinished и InboundWithRecipientSignature)
		// Поэтому в ТаблицаДокументовДиадок он может попадать дважды (DDSUPPORT-10335).
		// Вот здесь и будем искать дубли.
		// Алгоритм будет общий для ОФ и УФ, поэтому предполагаем, что в ТаблицаДокументовДиадок может быть как ТаблицаЗначений, так и Массив из Структур (&НаКлиенте).
		
		СоответствиеУПД = Новый Соответствие;
		
		ОбратныйИндекс = ТаблицаДокументовДиадок.Количество()-1;
		
		Пока ОбратныйИндекс > -1 Цикл
			
			Строка= ТаблицаДокументовДиадок[ОбратныйИндекс];
			
			Если Строка.DocumentType = "UniversalTransferDocument" Тогда
				
				DocumentIdBoxId = Строка.DocumentId + Строка.BoxId;
				
				// Если документ уже есть в СоответствиеУПД значит текущий можно удалить.
				Если СоответствиеУПД[DocumentIdBoxId] = Истина Тогда
					ТаблицаДокументовДиадок.Удалить(ОбратныйИндекс);
				Иначе
					СоответствиеУПД.Вставить(DocumentIdBoxId, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			ОбратныйИндекс = ОбратныйИндекс - 1;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ВернутьВыборкуРНКИСчетовФактурДиадок(ДатаНачала, ДатаОкончания, Организация = Неопределено, counterAgentBoxId = "", ПараметрыВыборки) Экспорт
		
		Результат = Новый Массив;
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Заполнение списка документов'"));
		
		Направление				= ?(ПараметрыВыборки.Свойство("Направление"), ПараметрыВыборки.Направление, "Inbound");
		СписокДокументооборота	= ?(ПараметрыВыборки.Свойство("СписокДокументооборота"), ПараметрыВыборки.СписокДокументооборота, 0);
		ТипыДокументов			= ?(ПараметрыВыборки.Свойство("ТипыДокументов"), ПараметрыВыборки.ТипыДокументов, "");
		
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			ДатаОкончания = Дата("20500101");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			СписокЯщиков = МетодСервера(,"ПолучитьТаблицуЯщиковДиадокОрганизации", Организация);
		Иначе
			СопоставленныеОрганизации = МетодКлиента("Модуль_Клиент","ПолучитьОрганизацииНезаблокированныеПоAPI");
			СписокЯщиков = МетодСервера(,"ПолучитьТаблицуЯщиковДиадокОрганизации", СопоставленныеОрганизации);
		КонецЕсли;
		
		СписокФильтров	 = ПолучитьСписокФильтровДляДокументовДиадок(Направление, СписокДокументооборота, ТипыДокументов);
		МассивЗадач		 = ПолучитьМассивАсинхронныхЗадач(СписокФильтров, ДатаНачала, ДатаОкончания, СписокЯщиков, counterAgentBoxId, ПараметрыВыборки);
		Результат		 = ПолучитьРезультатВыполненияЗадач(МассивЗадач, ПараметрыВыборки);
				
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьМассивСтруктурКонтент() Экспорт
		
		МассивЗадачПолучениеКонтента = Новый Массив;
		
		Если НЕ МассивСтруктурКонтент = Неопределено Тогда
		
			Для каждого СтрокаМассива Из МассивСтруктурКонтент Цикл
				
				ОбработкаПрерыванияПользователя();
				
				Пока МассивЗадачПолучениеКонтента.Количество() = МаксимальноеКоличествоЗаданий Цикл
					ОбработатьМассивЗадачКонтента(МассивЗадачПолучениеКонтента, МассивСтруктурКонтент);
				КонецЦикла;

				Попытка
					ДобавитьЗадачуПолучитьКонтент(МассивЗадачПолучениеКонтента, СтрокаМассива.DocumentId, СтрокаМассива.BoxId, СтрокаМассива.Document);
				Исключение
										
				КонецПопытки;
				
			КонецЦикла;
			
			Пока НЕ МассивЗадачПолучениеКонтента.Количество() = 0 Цикл
				ОбработатьМассивЗадачКонтента(МассивЗадачПолучениеКонтента, МассивСтруктурКонтент);
			КонецЦикла;
			
		Иначе	
			
		КонецЕсли;
		
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьЗадачуПолучитьКонтент(МассивЗадачПолучениеКонтента, DocumentId, BoxId, Document)
		
		Попытка
			
			Если ЭтоФормализованныйДокумент(Document.TypeNamedId) Тогда
			
				СтруктураЗадачи = Новый Структура();
				СтруктураЗадачи.Вставить("DocumentId", DocumentId);
				СтруктураЗадачи.Вставить("BoxId", BoxId);
				СтруктураЗадачи.Вставить("Task", Document.GetBase64ContentAsync());
			
				МассивЗадачПолучениеКонтента.Добавить(СтруктураЗадачи);
			
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьМассивЗадачКонтента(МассивЗадачПолучениеКонтента, МассивСтруктурКонтент)
		
		МассивУдаляемых = Новый Массив();
		
		Для каждого ЗадачаПолучениеКонтента Из МассивЗадачПолучениеКонтента Цикл
			Если ЗадачаПолучениеКонтента.Task.IsCompleted Тогда
				
				Попытка
					
					ФайлXML = Base64Значение(ЗадачаПолучениеКонтента.Task.Result);
					ПротоКонтент = МетодСервера("ГенерацияXML", "XML_В_ProtoСтруктура", ФайлXML);
					
					СтрокаМассива = ПолучитьЗначениеКонтентаКэш(ЗадачаПолучениеКонтента.BoxId, ЗадачаПолучениеКонтента.DocumentId);
					
					Если НЕ СтрокаМассива = Неопределено Тогда
						СтрокаМассива.Content = ПротоКонтент;
					Иначе
						
					КонецЕсли;
														
				Исключение
					
				КонецПопытки;		
				
				МассивУдаляемых.Добавить(ЗадачаПолучениеКонтента);
				
			КонецЕсли;
		КонецЦикла;
		
		Для каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
			Индекс=	МассивЗадачПолучениеКонтента.Найти(УдаляемыйЭлемент);
			Если НЕ Индекс = Неопределено Тогда
				МассивЗадачПолучениеКонтента.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
		
	&НаКлиенте
	Функция ПолучитьЗначениеКонтентаКэш(BoxID, DocumentId) Экспорт
		
		Результат = Неопределено;
		
		Если ЗначениеЗаполнено(МассивСтруктурКонтент) Тогда
			
			Для Каждого СтрокаМассива ИЗ МассивСтруктурКонтент Цикл
				
				Если СтрокаМассива.DocumentId = DocumentId И СтрокаМассива.BoxID = BoxID Тогда
					Результат = СтрокаМассива;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьСтрокуТаблицыДокумента(Document, СтруктураДокумента, НаименованиеЯщика = Неопределено, ЗаполнятьПервичныйДокумент = Истина)
		
		ЭлектронныйДокумент = ЭлектронныйДокумент(Document);
		ФорматЭД = ЭлектронныйДокумент.Формат;
		ИмяТипа = ФорматЭД.ИмяТипа;
		ФункцияДокумента = ФорматЭД.ФункцияДокумента;
		ЕстьФункцияСФ = ФорматЭД.ЕстьФункцияСФ;
		ЕстьФункцияПД = ФорматЭД.ЕстьФункцияПД;
		УстаревшийФормат = ДокументВУстаревшемФормате(ФорматЭД, Document.Timestamp);
		
		СтруктураДокумента.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
		СтруктураДокумента.Вставить("ФорматОтправки", ФорматЭД);
		СтруктураДокумента.Вставить("УстаревшийФормат", УстаревшийФормат);
		СтруктураДокумента.Вставить("ТипДокумента", 	 ПредставлениеТипаЭлектронногоДокумента(Document, ФорматЭД));
		СтруктураДокумента.Вставить("BoxID", 			 "" + Document.OrganizationID);
		СтруктураДокумента.Вставить("DocumentId", 		 "" + Document.DocumentId);
		СтруктураДокумента.Вставить("DocumentType", 	 ИмяТипа);
		СтруктураДокумента.Вставить("AttachmentVersion", ФорматЭД.БазовыйФормат);
		СтруктураДокумента.Вставить("ContentType", 		 ФорматЭД.ТипКонтента);
		СтруктураДокумента.Вставить("DocumentFunction",  ФункцияДокумента);
		СтруктураДокумента.Вставить("DocumentDirection", Document.Direction);
		СтруктураДокумента.Вставить("CounteragentId", 	 Document.counteragent.id);
		СтруктураДокумента.Вставить("Дата", 			 ?(Document.DocumentDate<'20000101', "" ,Document.DocumentDate));
		СтруктураДокумента.Вставить("Номер", 			 ПредставлениеНомераЭД(Document));
		СтруктураДокумента.Вставить("Продавец", 		 ПредставлениеПродавца(Document, НаименованиеЯщика)); 
		СтруктураДокумента.Вставить("Покупатель", 		 ПредставлениеПокупателя(Document, НаименованиеЯщика)); 
		СтруктураДокумента.Вставить("Подразделение", 	 ПредставлениеПодразделения(Document));
		СтруктураДокумента.Вставить("Сумма", 			 ПредставлениеСуммы(Document, ФорматЭД));
		СтруктураДокумента.Вставить("СуммаДокументаЗначение", 				СуммаПоDocument(Document));
		СтруктураДокумента.Вставить("СостояниеДокументооборота", 			ПредставлениеСтатуса(Document));
		СтруктураДокумента.Вставить("СостояниеСогласования", 				ПредставлениеСтатусаСогласования(Document));
		СтруктураДокумента.Вставить("СостояниеПередачиЧерезРоуминг", 		ПредставлениеСтатусаРоуминг(Document));
		СтруктураДокумента.Вставить("СостояниеПередачиЧерезРоумингДетали", 	?(Document.RoamingNotificationStatus = "RoamingNotificationStatusError", Document.RoamingNotificationStatusDescription, ""));
		СтруктураДокумента.Вставить("Status", 			 "" + Document.Status);
		СтруктураДокумента.Вставить("RevocationStatus",	 "" + Document.RevocationStatus);
		СтруктураДокумента.Вставить("ЭтоТестовыйДок", 	 Document.IsTest);
		СтруктураДокумента.Вставить("FileName", 		 Document.FileName);
		СтруктураДокумента.Вставить("DepartmentKpp", 	 ?(Document.Department <> Неопределено, Document.Department.Kpp, ""));
		СтруктураДокумента.Вставить("DepartmentId", 	 ?(Document.Department <> Неопределено, Document.Department.Id, ""));
		
		Если Document.RoamingNotificationStatus <> "RoamingNotificationStatusNone" И Document.RoamingNotificationStatus <> "RoamingNotificationStatusError" Тогда
			СтруктураДокумента.СостояниеДокументооборота=		СтруктураДокумента.СостояниеПередачиЧерезРоуминг + ?(ЗначениеЗаполнено(СтруктураДокумента.СостояниеДокументооборота), " " + СтруктураДокумента.СостояниеДокументооборота, "");
			СтруктураДокумента.СостояниеПередачиЧерезРоуминг= 	"";
		КонецЕсли;
		
		Если МассивСтруктурКонтент = Неопределено Тогда
			МассивСтруктурКонтент= Новый Массив;
		КонецЕсли;
		
		МассивСтруктурКонтент.Добавить(Новый Структура("BoxID, DocumentId, Document, Content", Document.OrganizationID, Document.DocumentId, Document));
				
		Department= Document.Department;
		
		Если ЭтоСчетФактура(ФорматЭД) Тогда
			СтруктураДокумента.Вставить("СуммаНДС", ПредставлениеСуммыНДС(Document, ФорматЭД));
			СтруктураДокумента.Вставить("ДатаУчета", Document.ConfirmationDate);
		Иначе
			СтруктураДокумента.Вставить("СуммаНДС", 0);
			СтруктураДокумента.Вставить("Валюта", "");
			СтруктураДокумента.Вставить("ДатаУчета", Document.Timestamp+4*60*60);  // Timestamp - по UTC, переводим в МСК +4 часа
		КонецЕсли;
		
		СтруктураДокумента.Вставить("MessageId", Сред(СокрЛП(Document.DocumentId), 1, 36));
		
		Если ИмяТипа = "ProformaInvoice" Тогда
			СтруктураДокумента.Вставить("ПозицияСортировки", 1);
			
		ИначеЕсли ЕстьФункцияСФ Тогда
			СтруктураДокумента.Вставить("ПозицияСортировки", 4);
			
		ИначеЕсли ЕстьФункцияПД Тогда
			СтруктураДокумента.Вставить("ПозицияСортировки", 2);
			
		Иначе
			СтруктураДокумента.Вставить("ПозицияСортировки", 3);
		КонецЕсли;
		
		СтруктураДокумента.Вставить("ИндексИконкиПакета", 0);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьЯщикДиадокДляОрганизации(Организация, BoxID=неопределено, Connection = неопределено) Экспорт
		
		Результат = Неопределено;
		
		Если BoxId = Неопределено тогда
			BoxId = МетодСервера(,"Организация_2_BoxID", Организация);
		КонецЕсли;
		
		Если BoxId <> Неопределено Тогда
			
			СтрокаКонтекста = МетодКлиента("Модуль_РаботаССерверомДиадок", "СтрокаКонтекста", Организация);
			
			Если СтрокаКонтекста = Неопределено Тогда
				
				СтрокаКонтекста = НоваяСтрокаКонтекста(Организация, BoxId);
				
				Платформа.ПараметрыКлиент.КонтекстДиадока.Добавить(СтрокаКонтекста);
				
				ПоместитьДанныеСотрудникаВоВременноеХранилище(Организация, СтрокаКонтекста.ДанныеСотрудника);
				
				ИнициализироватьMagic();
				
			КонецЕсли;
			
			Результат = СтрокаКонтекста.Box;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НоваяСтрокаКонтекста(Организация, BoxId)
		
		Результат = Новый Структура;
		Результат.Вставить("BoxId"	   		   , BoxId);
		Результат.Вставить("Организация"	   , Организация);
		Результат.Вставить("Connection" 	   , Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection);
		Результат.Вставить("Box"		  	   , Результат.Connection.GetOrganizationById(BoxId));
		Результат.Вставить("ЗаблокированаПоAPI", НоваяСтрокаКонтекста_ЗаблокированаПоAPI(Результат.Box));
		Результат.Вставить("ДанныеСотрудника"  , НоваяСтрокаКонтекста_ДанныеСотрудника(Результат.Box, Результат.Connection, Результат.ЗаблокированаПоAPI));
		Результат.Вставить("ДанныеОрганизации" , НоваяСтрокаКонтекста_ДанныеОрганизации(Результат.Box));
		Результат.Вставить("ОшибкаСертификата" , НоваяСтрокаКонтекста_ОшибкаСертификата(Результат));
		Результат.Вставить("Magic");
		
		Результат.Вставить("ВыводитьНаименованиеТовараСКодами", НоваяСтрокаКонтекста_ВыводитьНаименованиеТовараСКодами(Результат.Box));
		
		Возврат Результат;
		
	КонецФункции
	
	// Проверяет наличие доступа к ящику сервиса через API
	//
	// Параметры:
	//  Organization - ComОбъект - объект Organization внешней компоненты
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если доступ заблокирован
	//
	&НаКлиенте
	Функция НоваяСтрокаКонтекста_ЗаблокированаПоAPI(Organization)
		
		Результат = Ложь;
		
		Попытка
			Permissions = Organization.GetUserPermissions(); // Метод не доступен если доступ заблокирован
		Исключение
			
			Ошибка				 = ИнформацияОбОшибке();
			ТекстОшибки			 = КраткоеПредставлениеОшибки(Ошибка);
			ДоступЗаблокирован	 = Найти(ТекстОшибки, "code:402") > 0;
			
			Если ДоступЗаблокирован Тогда
				Результат = Истина;
			Иначе
				ВызватьИсключение;
			КонецЕсли;
			
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НоваяСтрокаКонтекста_ДанныеСотрудника(Box, Connection, ЗаблокированаПоAPI)
		
		Результат = Новый Структура;
		
		User = Connection.GetMyUser();
		Результат.Вставить("Id"		 , User.Id);
		Результат.Вставить("Фамилия" , User.LastName);
		Результат.Вставить("Имя"	 , User.FirstName);
		Результат.Вставить("Отчество", User.MiddleName);
		
		ФИО = "";
		Разделитель = "";
		Если ЗначениеЗаполнено(Результат.Фамилия) Тогда
			ФИО = ФИО + Разделитель + Результат.Фамилия;
			Разделитель = " ";
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.Имя) Тогда
			ФИО = ФИО + Разделитель + Результат.Имя;
			Разделитель = " ";
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.Отчество) Тогда
			ФИО = ФИО + Разделитель + Результат.Отчество;
			Разделитель = " ";
		КонецЕсли;
		Результат.Вставить("ФИО", ФИО);
		
		Если НЕ ЗаблокированаПоAPI Тогда
			
			UserPermissions = Box.GetUserPermissions();
			
			Результат.Вставить("Должность", UserPermissions.JobTitle);
			
			Результат.Вставить("ПраваДоступа", Новый Структура);
			Результат.ПраваДоступа.Вставить("IsAdministrator"	   , UserPermissions.IsAdministrator);
			Результат.ПраваДоступа.Вставить("CanSignDocuments"	   , UserPermissions.CanSignDocuments);
			Результат.ПраваДоступа.Вставить("CanAddResolutions"	   , UserPermissions.CanAddResolutions);
			Результат.ПраваДоступа.Вставить("CanRequestResolutions", UserPermissions.CanRequestResolutions);
			Результат.ПраваДоступа.Вставить("DocumentsAccessLevel" , UserPermissions.DocumentsAccessLevel);
			
		Иначе
			
			Результат.Вставить("Должность", "");
			
			Результат.Вставить("ПраваДоступа", Новый Структура);
			Результат.ПраваДоступа.Вставить("IsAdministrator"	   , Ложь);
			Результат.ПраваДоступа.Вставить("CanSignDocuments"	   , Ложь);
			Результат.ПраваДоступа.Вставить("CanAddResolutions"	   , Ложь);
			Результат.ПраваДоступа.Вставить("CanRequestResolutions", Ложь);
			Результат.ПраваДоступа.Вставить("DocumentsAccessLevel" , Ложь);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НоваяСтрокаКонтекста_ДанныеОрганизации(Box)
		
		Результат = Новый_Organization();
		
		ЗаполнитьСтруктуруПоКонтенту(Box, Результат);
		
		Если Результат.AuthenticateType = "Certificate" Тогда
			Результат.Certificate.Inn = УдалитьЛишниеНулиИНН(Результат.Certificate.Inn);
		Иначе
			Результат.Certificate = Неопределено;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НоваяСтрокаКонтекста_ОшибкаСертификата(СтрокаКонтекста)
		
		Результат = "";
		
		ДанныеОрганизации = СтрокаКонтекста.ДанныеОрганизации;
			
		Если ДанныеОрганизации.AuthenticateType <> "Certificate" Тогда
			Возврат Результат;
		КонецЕсли;
		
		Если ИспользуетсяСертификатПоГОСТ2001()
			И ДатаЗапретаГОСТ2001_Наступила() Тогда
			
			Результат = ТекстОшибкиИспользованиеСертификатаГОСТ2001();
		
		ИначеЕсли НЕ СтрокаКонтекста.ЗаблокированаПоAPI
			И НЕ ЭтоТестоваяОрганизация(ДанныеОрганизации)Тогда
				
			Результат = СтрокаКонтекста.Box.CanSendInvoice(ДанныеОрганизации.Certificate.Thumbprint);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Добавляет в контекст настройку организации
	// "Включить вывод наименования товара в Актах, СЧФ, УПД вместе с его кодами"
	//
	// Параметры:
	//  Organization - ComОбъект - объект Organization внешней компоненты
	// 
	// Возвращаемое значение:
	//  Булево
	//
	&НаКлиенте
	Функция НоваяСтрокаКонтекста_ВыводитьНаименованиеТовараСКодами(Organization)
		
		Результат = Ложь;
		
		Попытка
			Features = Organization.GetFeatures(); // Метод не доступен если доступ заблокирован
		Исключение
			Возврат Результат;
		КонецПопытки;

		Для к=0 По Features.Count - 1 Цикл
			
			ДопФункция = Features.GetItem(к);
			
			Если ДопФункция = "EnableProductNameAlongWithCodes" Тогда
				Результат = Истина;
			    Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПоместитьДанныеСотрудникаВоВременноеХранилище(Организация, ДанныеСотрудника)
		
		ДанныеСотрудников = ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресДанныеСотрудников);
		
		Если ДанныеСотрудников = Неопределено Тогда
			ДанныеСотрудников = Новый Соответствие;
		КонецЕсли;
		
		ДанныеСотрудников.Вставить(Организация, ДанныеСотрудника);
		
		ПоместитьВоВременноеХранилище(ДанныеСотрудников, Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресДанныеСотрудников);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьОрганизацииНезаблокированныеПоAPI() Экспорт
		
		СписокОрганизаций = СопоставленныеОрганизации(Истина);
		
		Возврат СписокОрганизаций;
		
	КонецФункции
		
	&НаКлиенте
	Процедура ИнициализироватьMagic() Экспорт
		
		ОбработанныеBoxId= Новый Соответствие;
		
		Для каждого СтрокаКонтекста Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			
			Если ОбработанныеBoxId[СтрокаКонтекста.BoxId] = Истина
				ИЛИ СтрокаКонтекста.ЗаблокированаПоAPI Тогда
				Продолжить;
			КонецЕсли;
			
			Если  СтрокаКонтекста.ДанныеОрганизации.AuthenticateType = "Certificate"
				И СтрокаКонтекста.Magic = Неопределено
				И НЕ ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
				
				Попытка
					СтрокаКонтекста.Magic = СтрокаКонтекста.Box.GetReceiptGenerationProcess();
					СтрокаКонтекста.Magic.Start();
				Исключение КонецПопытки;
				
			КонецЕсли;
			
			ОбработанныеBoxId.Вставить(СтрокаКонтекста.BoxId, Истина);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Определяет содержится ли в переданном тексте ошибки
	// признак того, что сертификат не зарегистрирован в ФНС
	//
	// Параметры:
	//	ТекстОшибки - Строка - текст полученной ошибки	
	&НаКлиенте
	Функция ЭтоОшибкаОтсутствиеРегистрацииФНС(ТекстОшибки) Экспорт
		
		Результат = Найти(ТекстОшибки, "FNS reg message was not sent for box") > 0
					ИЛИ Найти(ТекстОшибки, "is not registered in FNS for box") > 0
					ИЛИ Найти(ТекстОшибки, "No registration message to FNS found for boxId") > 0 
					ИЛИ Найти(ТекстОшибки, "Unknown FnsRegStatus") > 0;
		
		Возврат Результат;
		
	КонецФункции
	
	// Проверяет сертификат на ошибки в зависимости от принадлежности типа документа
	// к формализованному/неформализованному:
	// 	- если ошибка связана с тем, что сертификат неквалифицированный,
	// 	  то неформализованные документы могут подписываться, а формализованные - нет;
	// 	- если ошибка связана с тем, что сертификат выпущен по ГОСТ-2001, то
	//	  документы любого типа не могут быть подписаны
	//
	// Параметры:
	//	BoxId 						- Строка - идентификатор ящика организации в Диадоке	
	//	ЭтоФормализованныйДокумент 	- Булево - признак проверки для формализованного документа
	&НаКлиенте
	Процедура ПроверитьСертификат(BoxId, ЭтоФормализованныйДокумент) Экспорт
		
		СтрокаКонтекста = МетодКлиента("Модуль_РаботаССерверомДиадок", "СтрокаКонтекста", BoxId);
		
		Если НЕ ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЭтоФормализованныйДокумент
			И Найти(СтрокаКонтекста.ОшибкаСертификата, "Сертификат подписанта не является квалифицированным") > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ЭтоОшибкаОтсутствиеРегистрацииФНС(СтрокаКонтекста.ОшибкаСертификата) Тогда
			
			СтрокаКонтекста.Box.SendFnsRegistrationMessage(СтрокаКонтекста.ДанныеОрганизации.Certificate.Thumbprint);
			
			Если Не ЭтоТестоваяОрганизация(СтрокаКонтекста.ДанныеОрганизации) Тогда
				СтрокаКонтекста.ОшибкаСертификата = СтрокаКонтекста.Box.CanSendInvoice(СтрокаКонтекста.ДанныеОрганизации.Certificate.Thumbprint);
			КонецЕсли;
			
			ИнициализироватьMagic();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаКонтекста.ОшибкаСертификата) Тогда
			ВызватьИсключение "##9[]" + СтрокаКонтекста.ОшибкаСертификата;
		КонецЕсли;
		
	КонецПроцедуры
	
	// Проверяет возможность отправки формализованных и неформализованных документов пакета
	// 
	// Параметры:
	//	МассивДокументовПакета 	- Массив - массив структур, обязательное свойство "DocumentType"
	//	BoxId					- Строка - идентификатор ящика организации в Диадоке
	&НаКлиенте
	Процедура ПроверитьСертификатПоМассивуДокументов(МассивДокументовПакета, BoxId) Экспорт
		
		ФормализованныйПроверен		= Ложь;
		НеформализованныйПроверен 	= Ложь;
		
		Для Каждого СтруктураДокументВПакете Из МассивДокументовПакета Цикл
			
			ЭтоФормализованныйДокумент = ЭтоФормализованныйДокумент(СтруктураДокументВПакете.DocumentType);
			
			Если ЭтоФормализованныйДокумент И НЕ ФормализованныйПроверен Тогда
				ПроверитьСертификат(BoxId, ЭтоФормализованныйДокумент);
				ФормализованныйПроверен = Истина;
			ИначеЕсли НЕ ЭтоФормализованныйДокумент И НЕ НеформализованныйПроверен Тогда
				ПроверитьСертификат(BoxId, ЭтоФормализованныйДокумент);
				НеформализованныйПроверен = Истина;
			КонецЕсли;
				
			Если ФормализованныйПроверен И НеформализованныйПроверен Тогда
				Прервать;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецПроцедуры
	
	// Формирует текст начала ошибки об использовании сертификата ГОСТ 2001
	//
	// Возвращаемое значение:
	//	Строка - текст начала ошибки
	&НаКлиенте
	Функция ОшибкаИспользованиеСертификатаГОСТ2001_Начало()
		
		DiadocConnection = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection;
		
		Certificate = DiadocConnection.Certificate;
		
		Результат = "Сертификат " + Certificate.Name + " (" 
					+ Формат(Certificate.BeginDate, "ДФ='dd.MM.yy'") + " - " 
					+ Формат(Certificate.EndDate, "ДФ='dd.MM.yy'")
					+ ") выпущен по устаревшему ГОСТ-2001.";
					
		Возврат Результат;
		
	КонецФункции
	
	// Формирует текст ошибки об использовании сертификата ГОСТ 2001
	// и выводит ее в форму ФормаВыводаHTMLДокумента
	&НаКлиенте
	Процедура ПоказатьПредупреждениеОбИспользованииСертификатаГОСТ2001() Экспорт
		
		Если ДатаЗапретаГОСТ2001_Наступила() Тогда
			ТекстОграничения = "Вы не можете подписывать документы этим сертификатом.";
		Иначе
			ТекстОграничения = "С 1 января 2020 года вы не сможете подписывать документы этим сертификатом.";	
		КонецЕсли;
		
		HTMLТекст = "<HTML><HEAD>
					|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
					|<STYLE type=""text/css"">h3{margin-top:0.5em; margin-bottom:1em;} p{margin-top:0.2em; margin-bottom:0em;}</STYLE></HEAD>
					|<BODY>
					|<H4>#НачалоОшибки</H4>
					|<P>#ТекстОграничения</P>
					|<P>#ОкончаниеОшибки</P>		
					|</BODY></HTML>";
		
		HTMLТекст = СтрЗаменить(HTMLТекст, "#НачалоОшибки"		, ОшибкаИспользованиеСертификатаГОСТ2001_Начало());
		HTMLТекст = СтрЗаменить(HTMLТекст, "#ТекстОграничения"	, ТекстОграничения);
		HTMLТекст = СтрЗаменить(HTMLТекст, "#ОкончаниеОшибки"	, "Обновите сертификат на ГОСТ-2012 через свой сервисный центр.");
						
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокФормы", "Обновите сертификат на ГОСТ-2012");
		ПараметрыФормы.Вставить("HTMLДокумент"	, HTMLТекст);
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма.ВладелецФормы);
	
	КонецПроцедуры
	
	// Формирует текст ошибки об использовании сертификата ГОСТ 2001
	// для показа во время выполнения запрещенных действий:
	//	- подписание исходящих/входящих;
	//	- отказ в подписи входящих;
	//	- аннулирование;
	//	- запрос уточнения.
	//
	// Возвращаемое значение:
	//	Строка - текст ошибки
	&НаКлиенте
	Функция ТекстОшибкиИспользованиеСертификатаГОСТ2001()
		
		Результат = СтрШаблон("%1
		|Вы не можете подписывать документы этим сертификатом."
		, ОшибкаИспользованиеСертификатаГОСТ2001_Начало());
		
		Возврат Результат;
		
	КонецФункции

	// Проверяет сертификат на выпуск по ГОСТ 2001
	//
	// Возвращаемое значение:
	//	Булево - является ли сертификат, под которым авторизован пользователь,
	//			 сертификатом, выпущенным по ГОСТ 2001
	&НаКлиенте
	Функция ИспользуетсяСертификатПоГОСТ2001() Экспорт
		
		Результат = Ложь;
		
		DiadocConnection = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection;
		
		Если DiadocConnection.AuthenticateType <> "Certificate" Тогда
			Возврат Результат;
		КонецЕсли;
		
		Certificate = DiadocConnection.Certificate;
		
		// OID алгоритма открытого ключа сертификата по ГОСТ 2001
		Если Certificate.AlgorithmOID = "1.2.643.2.2.19" Тогда 
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Проверяет, что текущая дата больше даты запрета использования сертификатов,
	// выпущенных по ГОСТ 2001
	//
	// Возвращаемое значение:
	//	Булево - текущая дата больше даты запрета использования сертификатов
	&НаКлиенте
	Функция ДатаЗапретаГОСТ2001_Наступила()
		
		Результат = Ложь;
		
		ДатаПерехода = Дата(2020, 1, 1);

		Если УниверсальноеВремя(ТекущаяДата()) > ДатаПерехода Тогда
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НайтиСтрокиКонтекстДиадокаПоОтбору(СтруктураОтбор) Экспорт
		Возврат НайтиСтрокиВМассивеСтруктур(Платформа.ПараметрыКлиент.КонтекстДиадока, СтруктураОтбор);//КонтекстДиадока.НайтиСтроки(СтруктураОтбор);
	КонецФункции
	
	&НаКлиенте
	Функция РазвернутьGUID(СтрНач) Экспорт
		
		СтрРез = "";
		Если СтрДлина(Стрнач) > 36 Тогда
			СтрРез = лев(Стрнач, 32);
			СтрРез = Сред(СтрРез, 1, 8) + "-" + Сред(СтрРез, 9, 4) + "-" + Сред(СтрРез, 13, 4) + "-" + Сред(СтрРез, 17, 4) + "-" + Сред(СтрРез, 21, 12);
		ИначеЕсли СтрДлина(Стрнач) < 36 Тогда
			СтрРез = Сред(Стрнач, 1, 8) + "-" + Сред(Стрнач, 9, 4) + "-" + Сред(Стрнач, 13, 4) + "-" + Сред(Стрнач, 17, 4) + "-" + Сред(Стрнач, 21, 12);
		Иначе
			СтрРез = СтрНач;
		КонецЕсли;
		
		Возврат СтрРез;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьURLНаДокументДиадока(BoxId, DocumentId)  
		
		MessageId = Сред(DocumentId, 1, 36);
		EntityId = Сред(DocumentId, 37, 36);
		
		Возврат  РазвернутьGUID(BoxId) + "/Document/Show?letterId=" + РазвернутьGUID(MessageId) + "&documentId=" + РазвернутьGUID(EntityId);
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьПутьКWEBСерверу()
		
		Возврат МетодСервера(,"ПолучитьПутьКWEBСерверу");
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОткрытьСтраницуВДиадоке(ПутьПослеСлэша)
		
		ТекстURL = ПолучитьПутьКWEBСерверу() + ПутьПослеСлэша;
		
		//// Открытие ссылки в IE
		//Попытка
		//	IE=	Новый COMОбъект("InternetExplorer.Application"); 
		//Исключение
		//	Сообщить("Ошибка при открытии приложения Internet Explorer");
		//	Сообщить(ОписаниеОшибки());
		//	Возврат;
		//КонецПопытки;
		//
		//IE.Visible=	True; 
		//IE.Navigate2(ТекстURL);
		
		ЗапуститьПриложение(текстURL);
		
	КонецПроцедуры 
	
	&НаКлиенте
	Процедура  ПоказатьДокументВДиадоке(OrganizationId, DocumentId) Экспорт
		
		ТекстURL = ПолучитьURLНаДокументДиадока(OrganizationId, DocumentId);
		ОткрытьСтраницуВДиадоке(ТекстURL);
		
	КонецПроцедуры 
	
	&НаКлиенте
	Процедура ОбработчикСозданиеДокумента(ДокументССылка, ЭДОбъект) Экспорт
		
		РезультатОбновления = МетодСервера(,"ОбновитьДанныеДокумента", ДокументССылка, ЭДОбъект.DocumentDate, ЭДОбъект.DocumentNumber);
		Если РезультатОбновления.ДанныеОбновлены = Истина Тогда
			ОтобразитьИзменениеДанных(ДокументССылка, ВидИзмененияДанных.Изменение);
		КонецЕсли;
		
		Если НЕ РезультатОбновления.ОписаниеОшибки = "" Тогда
			ПоказатьПростоеПредупреждение(РезультатОбновления.ОписаниеОшибки);
		КонецЕсли;
		
		МетодСервера(,"Установить_DocumentID_Для_Документ", ДокументССылка, ЭДОбъект.DocumentId, ЭДОбъект.OrganizationId);
		
		ПараметрыОповещения=	Новый Структура;
		ПараметрыОповещения.Вставить("ТипСущности", "Документ");
		ПараметрыОповещения.Вставить("BoxID", 		ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID", 	ЭДОбъект.DocumentID);
		ПараметрыОповещения.Вставить("Документ1С",	ДокументССылка);
		
		МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьПодписанта(Content, Organization, ПараметрыОтправкиНаСогласование = Неопределено) Экспорт
		
		ТипКонтента = Content.Type;
		Если 	ТипКонтента = "UniversalTransferDocument" ИЛИ Лев(ТипКонтента, 3) = "Utd"
			ИЛИ ТипКонтента = "UniversalCorrectionDocument" ИЛИ Лев(ТипКонтента, 3) = "Ucd" Тогда 
					
			ExtendedSigner= Content.AddSigner();
			
			Если ПараметрыОтправкиНаСогласование <> Неопределено Тогда 
				
				Если ПараметрыОтправкиНаСогласование.ResolutionRequestType = "SignatureRequest" Тогда
					ФИОПодписанта= ПараметрыОтправкиНаСогласование.ФИОПолучателя;
					ДолжностьПодписанта = ПараметрыОтправкиНаСогласование.ДолжностьПолучателя;
				Иначе
					ФИОПодписанта= ПараметрыОтправкиНаСогласование.ФИОПодписанта;
					ДолжностьПодписанта = ПараметрыОтправкиНаСогласование.ДолжностьПодписанта;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ФИОПодписанта) Тогда
					ExtendedSigner.SignerDetails.Surname=	 ВыделитьСлово(ФИОПодписанта);
					ExtendedSigner.SignerDetails.FirstName=  ВыделитьСлово(ФИОПодписанта);
					ExtendedSigner.SignerDetails.Patronymic= ВыделитьСлово(ФИОПодписанта);
				Иначе
					ExtendedSigner.SignerDetails.Surname=	 "-";
					ExtendedSigner.SignerDetails.FirstName=	 "-";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДолжностьПодписанта) Тогда
					ExtendedSigner.SignerDetails.JobTitle = ДолжностьПодписанта;
				КонецЕсли;
				
				ExtendedSigner.SignerDetails.SignerType= ?(СтрДлина(УдалитьЛишниеНулиИНН(Organization.Inn)) = 12, "IndividualEntity", "LegalEntity");
				ExtendedSigner.SignerDetails.Status= 	 "InformationCreatorEmployee";
				
				ExtendedSigner.SignerDetails.Powers= 	 "PersonDocumentedOperation";
				ExtendedSigner.SignerDetails.Inn= 	 	 Organization.Inn;
				
			ИначеЕсли Organization.AuthenticateType = "Certificate" Тогда
				
				ExtendedSigner.BoxId= Organization.Id;
				ExtendedSigner.CertificateThumbprint= Organization.Certificate.thumbprint;
				
			Иначе
				
				UserPermissions= Organization.GetUserPermissions();
			
				Если НЕ UserPermissions.CanSignDocuments Тогда
					
					ExtendedSigner.SignerDetails.Surname=	 "-";
					ExtendedSigner.SignerDetails.FirstName=	 "-";
					
					ExtendedSigner.SignerDetails.SignerType= "IndividualEntity";
					ExtendedSigner.SignerDetails.Status= 	 "InformationCreatorEmployee";
					ExtendedSigner.SignerDetails.Powers= 	 "PersonDocumentedOperation";
					ExtendedSigner.SignerDetails.Inn= 	 	 "999999999950";
					
				Иначе
					
					User= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьТекущегоПользователяДиадок");
					
					ExtendedSigner.SignerDetails.Surname=	 User.LastName;
					ExtendedSigner.SignerDetails.FirstName=	 User.FirstName;
					ExtendedSigner.SignerDetails.Patronymic= User.MiddleName ;
					
					ExtendedSigner.SignerDetails.SignerType= "LegalEntity";
					ExtendedSigner.SignerDetails.Status= 	 "SellerEmployee";
					ExtendedSigner.SignerDetails.JobTitle=   UserPermissions.JobTitle;
					ExtendedSigner.SignerDetails.Powers=   	 "ResponsibleForOperationAndSignerForInvoice";
					ExtendedSigner.SignerDetails.Inn= 		 Organization.Inn;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			UserPermissions= Organization.GetUserPermissions();
			
			Если НЕ UserPermissions.CanSignDocuments Тогда
				
				Content.Signer.Surname=		"-";
				Content.Signer.FirstName=	"-";
				
			Иначе
				
				User= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьТекущегоПользователяДиадок");
				
				Content.Signer.Surname=		User.LastName;
				Content.Signer.FirstName=	User.FirstName;
				Content.Signer.Patronymic=	User.MiddleName ;
				Content.Signer.JobTitle= 	UserPermissions.JobTitle;
				
			КонецЕсли;
			
			Content.Signer.Inn= Organization.Inn;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ТипДокументаУПД(ФункцияУПД) Экспорт
		
		Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "InvoiceAndBasic" Тогда
			Возврат "УПД Счф Доп";
		ИначеЕсли ФункцияУПД = "ДОП" ИЛИ ФункцияУПД = "Basic" Тогда
			Возврат "УПД Доп";
		ИначеЕсли ФункцияУПД = "СЧФ" ИЛИ ФункцияУПД = "Invoice" Тогда
			Возврат "УПД Счф";
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ТипДокументаУКД(ФункцияУКД) Экспорт
		
		Если ФункцияУКД = "КСЧФДИС" ИЛИ ФункцияУКД = "InvoiceAndBasic" Тогда
			Возврат "УКД Ксчф Дис";
		ИначеЕсли ФункцияУКД = "ДИС" ИЛИ ФункцияУКД = "Basic" Тогда
			Возврат "УКД Дис";
		ИначеЕсли ФункцияУКД = "КСЧФ" ИЛИ ФункцияУКД = "Invoice" Тогда
			Возврат "УКД Ксчф";
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ТипДокументаИУПД(ФункцияИУПД) Экспорт
		
		Если ФункцияИУПД = "СЧФДОП" ИЛИ ФункцияИУПД = "InvoiceAndBasic" Тогда
			Возврат "Исправление УПД Счф Доп";
		ИначеЕсли ФункцияИУПД = "ДОП" ИЛИ ФункцияИУПД = "Basic" Тогда
			Возврат "Исправление УПД Доп";
		ИначеЕсли ФункцияИУПД = "СЧФ" ИЛИ ФункцияИУПД = "Invoice" Тогда
			Возврат "Исправление УПД Счф";
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ОбластьПолномочийУПД_ОтветственныйЗаПодписаниеСЧФ(Powers) Экспорт
		
		Возврат
		
			Powers = "InvoiceSigner"
		ИЛИ Powers = "MadeOperationAndSignedInvoice"
		ИЛИ Powers = "MadeAndResponsibleForOperationAndSignedInvoice"
		ИЛИ Powers = "ResponsibleForOperationAndSignerForInvoice"

	КонецФункции

	&НаКлиенте
	Функция ОбластьПолномочийУПД_ЛицоСовершившееСделку(Powers) Экспорт
		
		Возврат
		
			Powers = "PersonMadeOperation"
		ИЛИ Powers = "MadeAndSignOperation"
		ИЛИ Powers = "MadeOperationAndSignedInvoice"
		ИЛИ Powers = "MadeAndResponsibleForOperationAndSignedInvoice"

	КонецФункции

	&НаКлиенте
	Функция ОбластьПолномочийУПД_ОтветственныйЗаОформление(Powers) Экспорт
		
		Возврат
		
			Powers = "MadeAndSignOperation"
		ИЛИ Powers = "PersonDocumentedOperation" 
		ИЛИ Powers = "MadeAndResponsibleForOperationAndSignedInvoice"
		ИЛИ Powers = "ResponsibleForOperationAndSignerForInvoice"

	КонецФункции

	&НаКлиенте
	Процедура ЗаполнитьСтруктуруПоКонтенту(Content, СтруктураДанных, ОписаниеСтруктурыДанных = "") Экспорт
		
		Если Content = Неопределено 
			Или ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли; 
		
		Для Каждого Элемент Из СтруктураДанных Цикл
			
			Если Найти(Элемент.Ключ, "Ссылка") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонЭлементаКоллекции = Неопределено;
			
			Если Элемент.Ключ = "Items" Тогда 
				
				Если ОписаниеСтруктурыДанных = "UniversalTransferDocument.InvoiceTable" Тогда
					ШаблонЭлементаКоллекции = Новый_ExtendedInvoiceItem();
				ИначеЕсли ОписаниеСтруктурыДанных = "UniversalCorrectionDocument.InvoiceCorrectionTable" Тогда
					ШаблонЭлементаКоллекции = Новый_ExtendedInvoiceCorrectionItem();
				ИначеЕсли ОписаниеСтруктурыДанных = "TovTorg.Table" Тогда
					ШаблонЭлементаКоллекции = Новый_TovTorgItem();
				ИначеЕсли ОписаниеСтруктурыДанных = "XmlAcceptanceCertificate552.Works" Тогда
					ШаблонЭлементаКоллекции = Новый_Act552WorkItem();
				Иначе
					
					ТипКонтента = Content.Type;

					Если ТипКонтента = "InvoiceContent" Тогда
						ШаблонЭлементаКоллекции = Новый_InvoiceItem();
					ИначеЕсли ТипКонтента = "InvoiceCorrectionContent" Тогда
						ШаблонЭлементаКоллекции = Новый_InvoiceCorrectionItem();
					ИначеЕсли ТипКонтента = "XmlAcceptanceCertificateContent" Тогда
						ШаблонЭлементаКоллекции = Новый_AcceptanceCertificateItem();
					ИначеЕсли ТипКонтента = "XmlTorg12Content" Тогда
						ШаблонЭлементаКоллекции = Новый_Torg12Item();
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Элемент.Ключ = "PaymentDocuments" Тогда
				
				ШаблонЭлементаКоллекции = Новый_PaymentDocument();
				
			ИначеЕсли Элемент.Ключ = "OriginalInvoices" Тогда
				
				ШаблонЭлементаКоллекции = Новый_OriginalInvoice();
				
			ИначеЕсли Элемент.Ключ = "Signers" Тогда
				
				ШаблонЭлементаКоллекции = Новый_ExtendedSigner();
				
			ИначеЕсли Элемент.Ключ = "StructedAdditionalInfos" Тогда
				
				ШаблонЭлементаКоллекции = Новый_StructedAdditionalInfo();
				
			ИначеЕсли Элемент.Ключ = "CustomDeclarations" Тогда
				
				ШаблонЭлементаКоллекции = Новый_CustomDeclaration();
				
			ИначеЕсли Элемент.Ключ = "Waybills" Тогда
				
				ШаблонЭлементаКоллекции = Новый_Waybill();
				
			ИначеЕсли Элемент.Ключ = "TransferBases" Тогда
				
				ШаблонЭлементаКоллекции = Новый_TransferBase();
				
			ИначеЕсли Элемент.Ключ = "Invoices" Тогда
				
				ШаблонЭлементаКоллекции = Новый_InvoiceForCorrectionInfo();
				
			ИначеЕсли Элемент.Ключ = "InvoiceRevisions" Тогда
				
				ШаблонЭлементаКоллекции = Новый_InvoiceRevisionInfo();
				
			ИначеЕсли Элемент.Ключ = "CorrectionBases" Тогда
				
				ШаблонЭлементаКоллекции = Новый_CorrectionBase();
				
			ИначеЕсли Элемент.Ключ = "Works" Тогда
				
				ШаблонЭлементаКоллекции = Новый_Act552WorkDescription();
				
			ИначеЕсли Элемент.Ключ = "Grounds" И ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				
				ШаблонЭлементаКоллекции = Новый_GroundInfo();
				
			КонецЕсли;
			
			
			Если ШаблонЭлементаКоллекции <> Неопределено Тогда
				
				ВГраница = Content[Элемент.Ключ].Count - 1;
				
				Для Сч = 0 По ВГраница Цикл
					
					Попытка 
						Item = Content[Элемент.Ключ].GetItem(Сч);
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
					КонецПопытки;
					
					Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
						
						НовыйЭлемент = СкопироватьСтруктуру(ШаблонЭлементаКоллекции);
						
						ЗаполнитьСтруктуруПоКонтенту(Item, НовыйЭлемент, ОписаниеСтруктурыДанных + "." + Элемент.Ключ);
						
						СтруктураДанных[Элемент.Ключ].Добавить(НовыйЭлемент);
						
					КонецЕсли; 
					
				КонецЦикла;
				
			Иначе
				
				Попытка
					ЗначениеContent = Content[Элемент.Ключ];
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
				КонецПопытки;
				
				Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					
					Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
						ЗаполнитьСтруктуруПоКонтенту(ЗначениеContent, Элемент.Значение, ОписаниеСтруктурыДанных + "." + Элемент.Ключ);
					Иначе
						СтруктураДанных[Элемент.Ключ] = ЗначениеContent;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ВызватьИсключение "Ошибка чтения контента " + ОписаниеСтруктурыДанных + "." + Элемент.Ключ + Символы.ПС + ОписаниеОшибки;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция СкопироватьСтруктуру(СтруктураИсходник)
		
		СтруктураПриемник =	Новый Структура;
		Для каждого ЭлементИсходник Из СтруктураИсходник Цикл
			Если ТипЗнч(ЭлементИсходник.Значение) = Тип("Массив") Тогда
				СтруктураПриемник.Вставить(ЭлементИсходник.Ключ, Новый Массив);
			ИначеЕсли ТипЗнч(ЭлементИсходник.Значение) = Тип("Структура") Тогда
				СтруктураПриемник.Вставить(ЭлементИсходник.Ключ, СкопироватьСтруктуру(ЭлементИсходник.Значение));
			Иначе
				СтруктураПриемник.Вставить(ЭлементИсходник.Ключ, Неопределено);	
			КонецЕсли;
		КонецЦикла;
		
		Возврат СтруктураПриемник;
		
	КонецФункции	
	
	&НаКлиенте
	// функция убирает из ИНН 2 лидирующих нуля, если ИНН начинается с 00
	Функция УдалитьЛишниеНулиИНН(ИНН) Экспорт
		
		Если Лев(ИНН, 2) = "00" Тогда
			Возврат Сред(ИНН, 3);
		Иначе
			Возврат ИНН;
		КонецЕсли;
	
	КонецФункции
	
	&НаКлиенте
	Функция ПреобразоватьСтрокуВМассивПодстрок(Знач Строка, Разделитель = ",", ПропускатьПустыеСтроки = Ложь, ПрименятьСокрЛП = Ложь)
		
		МассивПодстрок = Новый Массив;
		
		ДлинаРазделителя = СтрДлина(Разделитель);
		
		ПозицияРазделителя = Найти(Строка, Разделитель);
		
		Пока ПозицияРазделителя > 0 Цикл
			
			Подстрока = Лев(Строка, ПозицияРазделителя - 1);
			
			Если НЕ ПропускатьПустыеСтроки ИЛИ ЗначениеЗаполнено(Подстрока) Тогда
				МассивПодстрок.Добавить(?(ПрименятьСокрЛП, СокрЛП(Подстрока), Подстрока));
			КонецЕсли;
			
			Строка = Сред(Строка, ПозицияРазделителя + ДлинаРазделителя);
			
			ПозицияРазделителя = Найти(Строка, Разделитель);
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Строка) Тогда
			МассивПодстрок.Добавить(?(ПрименятьСокрЛП, СокрЛП(Строка), Строка));
		КонецЕсли;
		
		Возврат МассивПодстрок;
		
	КонецФункции 
	
	&НаКлиенте
	Функция СтруктураФИО(ФИО) Экспорт
		
		Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
		
		МассивПодстрок = ПреобразоватьСтрокуВМассивПодстрок(ФИО, " ", Ложь, Истина);
		
		РазмерМассива = МассивПодстрок.Количество();
		
		Если РазмерМассива > 0 Тогда
			Результат.Фамилия = МассивПодстрок[0];
		КонецЕсли;
		
		Если РазмерМассива > 1 Тогда
			Результат.Имя = МассивПодстрок[1];
		КонецЕсли;
		
		Если РазмерМассива > 2 Тогда
			Результат.Отчество = МассивПодстрок[2];
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьИдентификаторыЭДО() Экспорт
		
		ОбъектыБезИдентификаторовЭДО = ОбъектыБезИдентификаторовЭДО();
		
		Если ОбъектыБезИдентификаторовЭДО.Количество() > 0 Тогда
			
			КэшИдентификаторовЭДО = Новый Соответствие;
			
			Если ОбъектыБезИдентификаторовЭДО.Свойство("Организации") Тогда
				
				ТекстСостояния			 = НСтр("ru = 'Заполнение идентификаторов участников ЭДО для справочника Организации'");
				НачальныйРазмерМассива	 = ОбъектыБезИдентификаторовЭДО.Организации.Количество();
				ТекущийРазмерМассива	 = НачальныйРазмерМассива;
				
				Пока ТекущийРазмерМассива > 0 Цикл
					
					ПоказатьСостояниеОбработкиСписка(
					ТекстСостояния,
					НачальныйРазмерМассива - ТекущийРазмерМассива,
					НачальныйРазмерМассива);
					
					ОбработатьПорциюИдентификаторовЭДО(ОбъектыБезИдентификаторовЭДО.Организации, КэшИдентификаторовЭДО, "ДиадокИдентификаторЭДОДляОрганизации");
					
					ТекущийРазмерМассива = ОбъектыБезИдентификаторовЭДО.Организации.Количество();
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОбъектыБезИдентификаторовЭДО.Свойство("Контрагенты") Тогда
				
				ТекстСостояния			 = НСтр("ru = 'Заполнение идентификаторов участников ЭДО для справочника Контрагенты'");
				НачальныйРазмерМассива	 = ОбъектыБезИдентификаторовЭДО.Контрагенты.Количество();
				ТекущийРазмерМассива	 = НачальныйРазмерМассива;
				
				Пока ТекущийРазмерМассива > 0 Цикл
					
					ПоказатьСостояниеОбработкиСписка(
					ТекстСостояния,
					НачальныйРазмерМассива - ТекущийРазмерМассива,
					НачальныйРазмерМассива);
					
					ОбработатьПорциюИдентификаторовЭДО(ОбъектыБезИдентификаторовЭДО.Контрагенты, КэшИдентификаторовЭДО, "ДиадокИдентификаторЭДО");
					
					ТекущийРазмерМассива = ОбъектыБезИдентификаторовЭДО.Контрагенты.Количество();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьПорциюИдентификаторовЭДО(МассивОбъектов, КэшИдентификаторовЭДО, НаименованиеСвойства)
		
		РазмерПорции = 50;
		
		ПорцияОбъектов = Новый Массив;
		
		НачальныйИндекс = МассивОбъектов.ВГраница();
		
		Если НачальныйИндекс > РазмерПорции Тогда
			КонечныйИндекс = НачальныйИндекс - РазмерПорции;
		Иначе
			КонечныйИндекс = -1;
		КонецЕсли;
		
		Пока НачальныйИндекс > КонечныйИндекс Цикл
			
			ПорцияОбъектов.Добавить(МассивОбъектов[НачальныйИндекс]);
			МассивОбъектов.Удалить(НачальныйИндекс);
						
			НачальныйИндекс = НачальныйИндекс - 1;
			
		КонецЦикла;
		
		Для Каждого ТекущийОбъект Из ПорцияОбъектов Цикл
			
			ИдентификаторЭДО = КэшИдентификаторовЭДО[ТекущийОбъект.BoxID];
			Если ИдентификаторЭДО = Неопределено Тогда
				ИдентификаторЭДО = МетодКлиента("Модуль_РаботаССерверомДиадок", "ИдентификаторЭДО", ТекущийОбъект.BoxID);
				КэшИдентификаторовЭДО.Вставить(ТекущийОбъект.BoxID, ИдентификаторЭДО);
			КонецЕсли;
			
			ТекущийОбъект.Удалить("BoxID");
			ТекущийОбъект.Вставить("ИдентификаторЭДО", ИдентификаторЭДО);
			
		КонецЦикла;

		ЗаписатьВБазуИдентификаторыЭДО(ПорцияОбъектов, НаименованиеСвойства);
		
	КонецПроцедуры
	
	&НаСервере
	Функция ОбъектыБезИдентификаторовЭДО()
		
		Результат = Новый Структура;
		
		// Идентификаторы ЭДО для справочника организаций
		СвойствоИдентификаторЯщика = МетодСервера("", "ИдентификаторСвойстваЯщикОрганизации");
		СвойствоИдентификаторЭДО   = МетодСервера("", "ИдентификаторСвойстваИдентификаторЭДОДляОрганизации");
		
		РезультатЗапроса = ОбъектыБезИдентификаторовЭДО_РезультатЗапроса(СвойствоИдентификаторЯщика, СвойствоИдентификаторЭДО);
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Результат.Вставить("Организации", Новый Массив);
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Результат.Организации.Добавить(Новый Структура("Объект, BoxID", Выборка.Объект, Выборка.BoxID));
			КонецЦикла;
			
		КонецЕсли;
		
		// Идентификаторы ЭДО для справочника контрагентов
		СвойствоИдентификаторЯщика = МетодСервера("", "ИдентификаторСвойстваЯщикКонтрагентаПрефикс");
		СвойствоИдентификаторЭДО   = МетодСервера("", "ИдентификаторСвойстваИдентификаторЭДОДляКонтрагента");
		
		РезультатЗапроса = ОбъектыБезИдентификаторовЭДО_РезультатЗапроса(СвойствоИдентификаторЯщика, СвойствоИдентификаторЭДО);
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Результат.Вставить("Контрагенты", Новый Массив);
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Результат.Контрагенты.Добавить(Новый Структура("Объект, BoxID", Выборка.Объект, Выборка.BoxID));
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ОбъектыБезИдентификаторовЭДО_РезультатЗапроса(НаименованиеСвойстваИдентификаторЯщика, НаименованиеСвойстваИдентификаторЭДО)
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИдентификаторыЯщиков.Объект,
		|	ИдентификаторыЯщиков.Значение КАК BoxID
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ИдентификаторыЯщиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ИдентификаторыЭДО
		|		ПО ИдентификаторыЯщиков.Объект = ИдентификаторыЭДО.Объект
		|			И (ИдентификаторыЭДО.Свойство = &СвойствоИдентификаторЭДО)
		|ГДЕ
		|	ИдентификаторыЯщиков.Свойство = &СвойствоИдентификаторЯщика
		|	И ИдентификаторыЯщиков.Значение <> """"
		|	И ИдентификаторыЭДО.Свойство ЕСТЬ NULL");
		
		Запрос.УстановитьПараметр("СвойствоИдентификаторЯщика", МетодСервера("", "НайтиСвойство", НаименованиеСвойстваИдентификаторЯщика));
		Запрос.УстановитьПараметр("СвойствоИдентификаторЭДО"  , МетодСервера("", "НайтиСвойство", НаименованиеСвойстваИдентификаторЭДО));
		
		Возврат Запрос.Выполнить();
		
	КонецФункции
		
	&НаСервере
	Процедура ЗаписатьВБазуИдентификаторыЭДО(МассивОбъектов, НаименованиеСвойства)
		
		Свойство = МетодСервера("", "НайтиСвойство", НаименованиеСвойства);
		
		Для Каждого ТекущийОбъект Из МассивОбъектов Цикл
			
			Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			Запись.Объект	= ТекущийОбъект.Объект;
			Запись.Свойство = Свойство;
			Запись.Значение = ТекущийОбъект.ИдентификаторЭДО;
			Запись.Записать();
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьProto(Document, КонтентОтветногоТитула = Ложь) Экспорт
		
		Результат = Новый Структура;
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		
		ИмяТипа = ФорматЭД.ИмяТипа;
		ТипКонтента = ФорматЭД.ТипКонтента;
		
		Если КонтентОтветногоТитула Тогда
			ТипКонтента	 = СтрЗаменить(ТипКонтента, "SellerContent", "BuyerContent");
			ТипКонтента	 = СтрЗаменить(ТипКонтента, "SenderTitle", "RecipientTitle");
			ПротоКонтент = ПротоКонтентОтветногоТитулаДокумента(Document);
		Иначе
			ПротоКонтент = ПротоКонтентДокумента(Document);
		КонецЕсли;
		
		Результат.Вставить("ТипКонтента", ТипКонтента);
		
		Если ЗначениеЗаполнено(ПротоКонтент) Тогда
			Результат.Вставить("Контент", ПротоКонтент);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПротоКонтентДокумента(Document) Экспорт
		
		КэшКонтента = КэшПротоКонтентаДокумента(Document.OrganizationId, Document.DocumentId);
		
		Если КэшКонтента.ПротоКонтент = Неопределено Тогда
			
			ФайлXML = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФайлТитулаПродавца", Document);
			
			КэшКонтента.ПротоКонтент = МетодСервера("ГенерацияXML", "XML_В_ProtoСтруктура", ФайлXML);
			
		КонецЕсли;
		
		Возврат КэшКонтента.ПротоКонтент;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПротоКонтентОтветногоТитулаДокумента(Document) Экспорт
		
		КэшКонтента = КэшПротоКонтентаДокумента(Document.OrganizationId, Document.DocumentId);
		
		Если КэшКонтента.ПротоКонтентОтветногоТитула = Неопределено Тогда
			
			ФайлXML = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФайлТитулаПокупателя", Document);
			
			Если ЗначениеЗаполнено(ФайлXML) Тогда
				КэшКонтента.ПротоКонтентОтветногоТитула = МетодСервера("ГенерацияXML", "XML_В_ProtoСтруктура", ФайлXML);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат КэшКонтента.ПротоКонтентОтветногоТитула;
		
	КонецФункции
	
	&НаКлиенте
	Функция СформироватьОтветныйТитулДокумента(Document, ПротоКонтент)
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		
		ФайлТитулаПродавца	 = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФайлТитулаПродавца"	, Document);
		ФайлПодписиПродавца	 = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФайлПодписиПродавца"	, Document);
		
		Результат = СформироватьОтветныйТитулДокументаНаСервере(ФорматЭД, ПротоКонтент, ФайлТитулаПродавца, ФайлПодписиПродавца);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция СформироватьОтветныйТитулДокументаНаСервере(ФорматЭД, ПротоКонтент, ФайлТитулаПродавца, ФайлПодписиПродавца)
			
		ВсеБазовыеФорматы = МетодСервера("", "БазовыеФорматы");
			
		БазовыйФормат = ФорматЭД.БазовыйФормат;
			
		ТипКонтента = ФорматЭД.ТипКонтента;
		ТипКонтента = СтрЗаменить(ТипКонтента, "SellerContent", "BuyerContent");
		ТипКонтента = СтрЗаменить(ТипКонтента, "SenderTitle", "RecipientTitle");
		
		ПротоКонтентXDTO			 = МетодСервера("ГенерацияXML", "ПротоКонтент_В_ПротоКонтентXDTO", ПротоКонтент, ТипКонтента);
		ПараметрыФормированияФайла	 = МетодСервера("ГенерацияXML", "XML_ПараметрыФормированияФайла");
		
		Если БазовыйФормат = ВсеБазовыеФорматы.utd820 Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_УПД_820"
				, ПротоКонтентXDTO, ФайлТитулаПродавца, ФайлПодписиПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.utd Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_УПД_155"
				, ПротоКонтентXDTO, ФайлТитулаПродавца, ФайлПодписиПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.ucd736 Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_УКД_736"
			, ПротоКонтентXDTO, ФайлТитулаПродавца, ФайлПодписиПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.ucd Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_УКД"
			, ПротоКонтентXDTO, ФайлТитулаПродавца, ФайлПодписиПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.tovtorg Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_Торг_551"
			, ПротоКонтентXDTO, ФайлТитулаПродавца, ФайлПодписиПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.rezru Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_Акт_552"
			, ПротоКонтентXDTO, ФайлТитулаПродавца, ФайлПодписиПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.torg12 Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_Торг_172"
			, ПротоКонтентXDTO, ФайлТитулаПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.act Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_Акт_172"
			, ПротоКонтентXDTO, ФайлТитулаПродавца, ПараметрыФормированияФайла);
			
		ИначеЕсли БазовыйФормат = ВсеБазовыеФорматы.torg2 Тогда
			
			ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ОтветныйТитул_Торг2"
			, ПротоКонтентXDTO, ФайлТитулаПродавца, ФайлПодписиПродавца, ПараметрыФормированияФайла);
			
		Иначе
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка заполнения титула покупателя, неизвестный тип контента %1'"), ТипКонтента);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Результат = МетодСервера("ГенерацияXML", "ОбъектXDTO_В_ДвоичныеДанные", ОбъектXDTO);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция КэшПротоКонтентаДокумента(BoxID, DocumentId)
		
		МаксимальныйРазмерКэша = 100;
		
		Если КэшПротоКонтента = Неопределено Тогда
			
			КэшПротоКонтента = Новый Структура;
			КэшПротоКонтента.Вставить("МассивКлючей", Новый Массив);
			КэшПротоКонтента.Вставить("Соответствие", Новый Соответствие);
			
		КонецЕсли;
		
		Ключ = BoxID + DocumentId;
		Результат = КэшПротоКонтента.Соответствие[Ключ];
		
		Если Результат = Неопределено Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("ПротоКонтент");
			Результат.Вставить("ПротоКонтентОтветногоТитула");
			
			Если КэшПротоКонтента.МассивКлючей.Количество() = МаксимальныйРазмерКэша Тогда
				КэшПротоКонтента.Соответствие.Удалить(КэшПротоКонтента.МассивКлючей[0]);
				КэшПротоКонтента.МассивКлючей.Удалить(0);
			КонецЕсли;
			
			КэшПротоКонтента.Соответствие.Вставить(Ключ, Результат);
			КэшПротоКонтента.МассивКлючей.Добавить(Ключ);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Определяет является ли организация тестовой
	//
	// Параметры:
	//	ДанныеОрганизации - СОМ-объект, Структура - может передаваться:
	//													- объект компоненты Organization;
	//													- объект компоненты Counteragent
	//													- структура (см. Новый_Organization())
	//
	// Возвращаемое значение:
	//	Булево - признак того, что организация тестовая
	&НаКлиенте
	Функция ЭтоТестоваяОрганизация(ДанныеОрганизации) Экспорт
		
		Результат = ДанныеОрганизации.IsTest ИЛИ ДанныеОрганизации.IsPilot;
		
		Возврат Результат;
		
	КонецФункции
	
//} ИНТЕГРАЦИЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ИНИЦАЛИЗАЦИЯ content

// описанные функции вызываются на клиенте из форм,
// должны совпадать с описанием функций инициализации контентов на сервере ("Модуль_ИнтеграцияУниверсальный")

//{ документ

	&НаКлиенте
	Функция Новый_Torg12SellerContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Torg12SellerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		
		Результат.Вставить("SupplyDate");
		
		Результат.Вставить("WaybillDate");
		Результат.Вставить("WaybillNumber");
		
		Результат.Вставить("OperationCode");
		
		Результат.Вставить("GroundName");
		Результат.Вставить("GroundDate");
		Результат.Вставить("GroundNumber");
		
		Результат.Вставить("AttachmentSheetsQuantity");
		
		Результат.Вставить("ShipperDepartment");
		Результат.Вставить("ShipperOkdp");
		
		Результат.Вставить("AdditionalInfo");
		
		Результат.Вставить("Seller", Новый_OrganizationInfo());
		Результат.Вставить("Buyer" , Новый_OrganizationInfo());
		
		Результат.Вставить("Shipper"  , Новый_OrganizationInfo());
		Результат.Вставить("Consignee", Новый_OrganizationInfo());
		
		Результат.Вставить("Totals" , Новый_Torg12Totals());
		Результат.Вставить("Commons", Новый_Torg12Commons());
		
		Результат.Вставить("SupplyAllowedBy"  , Новый_Official());
		Результат.Вставить("ChiefAccountant"  , Новый_Official());
		Результат.Вставить("SupplyPerformedBy", Новый_Official());
		
		Результат.Вставить("Signer", Новый_Signer());
		
		Результат.Вставить("Items", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции	

	&НаКлиенте
	Функция Новый_Torg12BuyerContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Torg12BuyerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("ShipmentReceiptDate");
		Результат.Вставить("AdditionalInfo");
		
		Результат.Вставить("Receiver", Новый_Official());
		Результат.Вставить("Accepter", Новый_Official());
		Результат.Вставить("Attorney", Новый_Attorney());
		
		Результат.Вставить("Signer", Новый_Signer());
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_AcceptanceCertificateSellerContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/AcceptanceCertificateSellerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		
		Результат.Вставить("Title");
		Результат.Вставить("SignatureDate");
		
		Результат.Вставить("AdditionalInfo");
		
		Результат.Вставить("Seller", Новый_OrganizationInfo());
		
		Результат.Вставить("Official", Новый_Official());
		Результат.Вставить("Attorney", Новый_Attorney());
		
		Результат.Вставить("Signer", Новый_Signer());
		
		Результат.Вставить("Items", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции	

	&НаКлиенте
	Функция Новый_AcceptanceCertificateBuyerContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/AcceptanceCertificateBuyerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("SignatureDate");
		Результат.Вставить("Complaints");
		
		Результат.Вставить("AdditionalInfo");
		
		Результат.Вставить("Official", Новый_Official());
		Результат.Вставить("Attorney", Новый_Attorney());
		
		Результат.Вставить("Signer", Новый_Signer());
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceContent() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		
		Результат.Вставить("InvoiceRevisionDate");
		Результат.Вставить("InvoiceRevisionNumber");
		
		Результат.Вставить("Currency");
		
		Результат.Вставить("Seller", Новый_OrganizationInfo());
		Результат.Вставить("Buyer" , Новый_OrganizationInfo());
		
		Результат.Вставить("Shipper"  , Новый_ShipperOrConsigneeInfo());
		Результат.Вставить("Consignee", Новый_ShipperOrConsigneeInfo());
		
		Результат.Вставить("Signer", Новый_Signer());
		
		Результат.Вставить("Totals", Новый_InvoiceTotals());
		
		Результат.Вставить("Items", Новый Массив);
		Результат.Вставить("PaymentDocuments", Новый Массив);
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Результат.Вставить("ВалютаСсылка");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceCorrectionContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceCorrectionContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("InvoiceCorrectionDate");
		Результат.Вставить("InvoiceCorrectionNumber");
		
		Результат.Вставить("InvoiceCorrectionRevisionDate");
		Результат.Вставить("InvoiceCorrectionRevisionNumber");
		
		Результат.Вставить("Currency");
		
		Результат.Вставить("Seller", Новый_OrganizationInfo());
		Результат.Вставить("Buyer" , Новый_OrganizationInfo());
		
		Результат.Вставить("TotalsInc", Новый_InvoiceTotals());
		Результат.Вставить("TotalsDec", Новый_InvoiceTotals());
		
		Результат.Вставить("Signer", Новый_Signer());
		
		Результат.Вставить("Items", Новый Массив);
		Результат.Вставить("OriginalInvoices", Новый Массив);
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Результат.Вставить("ВалютаСсылка");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_UtdSellerContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/UtdSellerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		Результат.Вставить("Function");
		
		Результат.Вставить("RevisionDate");
		Результат.Вставить("RevisionNumber");
		
		Результат.Вставить("Name");
		Результат.Вставить("Creator");
		Результат.Вставить("CreatorBase");
		
		Результат.Вставить("Currency");
		Результат.Вставить("CurrencyRate");
		
		Результат.Вставить("GovernmentContractInfo");
		
		Результат.Вставить("Seller", Новый_ExtendedOrganizationInfo());
		Результат.Вставить("Buyer" , Новый_ExtendedOrganizationInfo());
		
		Результат.Вставить("Shipper"  , Новый_Shipper());
		Результат.Вставить("Consignee", Новый_ExtendedOrganizationInfo());
		
		Результат.Вставить("InvoiceTable", Новый_InvoiceTable());
		Результат.Вставить("TransferInfo", Новый_TransferInfo());
		
		Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
		
		Результат.Вставить("Signers", Новый Массив);
		Результат.Вставить("PaymentDocuments", Новый Массив);
		
		Результат.Вставить("СчетФактураСсылка");
		Результат.Вставить("ВалютаСсылка");
		
		Возврат Результат;
		
	КонецФункции	

	&НаКлиенте
	Функция Новый_UtdBuyerContent() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("AcceptanceDate");
		
		Результат.Вставить("Creator");
		Результат.Вставить("CreatorBase");
		
		Результат.Вставить("OperationCode");
		Результат.Вставить("OperationContent");
		
		Результат.Вставить("Employee"	, Новый_Employee());
		Результат.Вставить("OtherIssuer", Новый_OtherIssuer());
		
		Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
		
		Результат.Вставить("Signers", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Utd820BuyerContent() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("AcceptanceDate");
		
		Результат.Вставить("DocumentCreator");
		Результат.Вставить("DocumentCreatorBase");
		
		Результат.Вставить("OperationCode");
		Результат.Вставить("OperationContent");
		
		Результат.Вставить("Employee"	, Новый_Employee());
		Результат.Вставить("OtherIssuer", Новый_OtherIssuer());
		
		Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
		
		Результат.Вставить("BuyerInfoCircumPublicProc", Новый_BuyerInfoCircumPublicProc());
		
		Результат.Вставить("ContentOperCode", Новый_ContentOperCode());
		
		Результат.Вставить("Signers", Новый Массив); // Новый_ExtendedSigner()
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_UcdSellerContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/UcdSellerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		Результат.Вставить("Function");
		
		Результат.Вставить("RevisionDate");
		Результат.Вставить("RevisionNumber");
		
		Результат.Вставить("Name");
		Результат.Вставить("Creator");
		Результат.Вставить("CreatorBase");
		
		Результат.Вставить("Currency");
		Результат.Вставить("CurrencyRate");
		
		Результат.Вставить("GovernmentContractInfo");
		
		Результат.Вставить("Seller", Новый_ExtendedOrganizationInfo());
		Результат.Вставить("Buyer" , Новый_ExtendedOrganizationInfo());
		
		Результат.Вставить("InvoiceCorrectionTable", Новый_InvoiceCorrectionTable());
		Результат.Вставить("EventContent", Новый_EventContent());
		
		Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
		
		Результат.Вставить("Invoices", Новый Массив);
		Результат.Вставить("Signers" , Новый Массив);
		
		Результат.Вставить("СчетФактураСсылка");
		Результат.Вставить("ВалютаСсылка");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_UcdBuyerContent() Экспорт 
		
		Возврат Новый_UtdBuyerContent();
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_TovTorgSellerContent() Экспорт 
		
		// http://1c-docs.diadoc.ru/ru/latest/TovTorgSellerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentName");
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("RevisionDate");
		Результат.Вставить("RevisionNumber");
		
		Результат.Вставить("Currency");
		Результат.Вставить("CurrencyRate");
		
		Результат.Вставить("DocumentCreator");
		Результат.Вставить("DocumentCreatorBase");
		
		Результат.Вставить("OperationType");
		
		Результат.Вставить("GovernmentContractInfo");
		
		Результат.Вставить("Table", Новый_TovTorgTable());
		
		Результат.Вставить("Seller", Новый_ExtendedOrganizationInfo());
		Результат.Вставить("Buyer" , Новый_ExtendedOrganizationInfo());
		
		Результат.Вставить("Shipper"  , Новый_ExtendedOrganizationInfo());
		Результат.Вставить("Carrier"  , Новый_ExtendedOrganizationInfo());
		Результат.Вставить("Consignee", Новый_ExtendedOrganizationInfo());
		
		Результат.Вставить("TransferInfo"	 , Новый_TovTorgTransferInfo());
		Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
		
		Результат.Вставить("Signers", Новый Массив);
		Результат.Вставить("Grounds", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_TovTorgBuyerContent() Экспорт 
		
		// http://1c-docs.diadoc.ru/ru/latest/TovTorgBuyerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentCreator");
		Результат.Вставить("DocumentCreatorBase");
		
		Результат.Вставить("OperationCode");
		Результат.Вставить("OperationContent");
		
		Результат.Вставить("AcceptanceDate");
		
		Результат.Вставить("Employee"	, Новый_Employee());
		Результат.Вставить("OtherIssuer", Новый_OtherIssuer());
		
		Результат.Вставить("AdditionalInfo", Новый_AdditionalInfoId());
		
		Результат.Вставить("Signers", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Act552SellerContent() Экспорт 
		
		// http://1c-docs.diadoc.ru/ru/latest/Act552SellerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentName");
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("RevisionDate");
		Результат.Вставить("RevisionNumber");
		
		Результат.Вставить("Currency");
		Результат.Вставить("CurrencyRate");
		
		Результат.Вставить("DocumentCreator");
		Результат.Вставить("DocumentCreatorBase");
		
		Результат.Вставить("OperationType");
		Результат.Вставить("OperationTitle");
		
		Результат.Вставить("GovernmentContractInfo");
		
		Результат.Вставить("Seller", Новый_ExtendedOrganizationInfo());
		Результат.Вставить("Buyer" , Новый_ExtendedOrganizationInfo());
		
		Результат.Вставить("TransferInfo"  , Новый_Act552TransferInfo());
		Результат.Вставить("AdditionalInfo", Новый_AdditionalInfoId());
		
		Результат.Вставить("Works"	, Новый Массив);
		Результат.Вставить("Signers", Новый Массив);
		Результат.Вставить("Grounds", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Act552BuyerContent() Экспорт 
		
		// http://1c-docs.diadoc.ru/ru/latest/Act552BuyerContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentCreator");
		Результат.Вставить("DocumentCreatorBase");
		
		Результат.Вставить("OperationType");
		Результат.Вставить("OperationContent");
		
		Результат.Вставить("AcceptanceDate");
		
		Результат.Вставить("CreatedThingInfo");
		Результат.Вставить("CreatedThingAcceptDate");
		
		Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
		
		Результат.Вставить("Signers", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции

// Конструктор IdValue
//
// Параметры:
//  Id		 - Строка - Идентификатор
//  Value	 - Строка - Значение
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//   * Id	 - Строка - Идентификатор
//   * Value - Строка - Значение
//
&НаКлиенте
Функция Новый_IdValue(Id = Неопределено, Value = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Id", Id);
	Результат.Вставить("Value", Value);
	
	Возврат Результат;
	
КонецФункции

// Конструктор AdditionalInfoId_Torg2
// 
// Возвращаемое значение:
//  Структура - содержит поля:
//   * InfoFileId - Строка(36) - Идентификатор файла информационного поля (ИдФайлИнфПол)
//   * AdditionalInfo - Массив из Структура - содержит:
//     ** IdValue - Структура - элемент текстовой информации (см. Новый_IdValue)
//
&НаКлиенте
Функция Новый_AdditionalInfoId_Torg2()
	
	Результат = Новый Структура;
	Результат.Вставить("InfoFileId");
	Результат.Вставить("AdditionalInfo", Новый Массив); // Новый_IdValue
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_Torg2RecipientTitle() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("DocumentCreator");
	Результат.Вставить("DocumentCreatorBase");
	Результат.Вставить("CompilationInfoDate");
	Результат.Вставить("TotalAcceptanceContent");
	Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId_Torg2());
	
	Результат.Вставить("Signers", Новый Массив); // Новый_SignerTorg2()
	
	Возврат Результат;
	
КонецФункции

//} документ

//{ шапка
	
	&НаКлиенте
	Функция Новый_OrganizationInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/OrganizationInfo.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Name");
		Результат.Вставить("Inn");
		Результат.Вставить("Kpp");
		Результат.Вставить("IsSoleProprietor");
		
		Результат.Вставить("FnsParticipantId");
		
		Результат.Вставить("Okopf");
		Результат.Вставить("Okpo");
		
		Результат.Вставить("Phone");
		Результат.Вставить("Fax");
		
		Результат.Вставить("BankAccountNumber");
		Результат.Вставить("BankName");
		Результат.Вставить("BankId");
		
		Результат.Вставить("Address", Новый_AddressInfo());
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedOrganizationInfo() Экспорт 
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/ExtendedOrganizationInfo.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Name");
		Результат.Вставить("Type");
		Результат.Вставить("Inn");
		Результат.Вставить("Kpp");
		
		Результат.Вставить("Okopf");
		Результат.Вставить("Okpo");
		Результат.Вставить("Okdp");
		
		Результат.Вставить("FnsParticipantId");
		Результат.Вставить("BoxId");
		
		Результат.Вставить("IndividualEntityRegistrationCertificate");
		Результат.Вставить("OrganizationOrPersonInfo");
		
		Результат.Вставить("Phone");
		Результат.Вставить("Email");
		
		Результат.Вставить("BankAccountNumber");
		Результат.Вставить("CorrespondentAccount");
		Результат.Вставить("BankName");
		Результат.Вставить("BankId");
		
		Результат.Вставить("Department");
		
		Результат.Вставить("AdditionalInfo");
		
		Результат.Вставить("Address", Новый_AddressInfo());
		
		Результат.Вставить("Ссылка");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Shipper() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Shipper.html
		
		Результат = Новый Структура;
		Результат.Вставить("SameAsSeller");
		Результат.Вставить("OrganizationInfo", Новый_ExtendedOrganizationInfo());
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ShipperOrConsigneeInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/ShipperOrConsigneeInfo.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Name");
		Результат.Вставить("IsSoleProprietor");
		Результат.Вставить("SameAsSellerOrBuyer");
		
		Результат.Вставить("Address", Новый_AddressInfo());
		
		Результат.Вставить("Ссылка");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_AddressInfo() Экспорт 
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/AddressInfo.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("IsForeign");
		
		Результат.Вставить("ZipCode");
		Результат.Вставить("RegionCode");
		
		Результат.Вставить("Territory");
		Результат.Вставить("City");
		Результат.Вставить("Locality");
		Результат.Вставить("Street");
		Результат.Вставить("Building");
		Результат.Вставить("Block");
		Результат.Вставить("Apartment");
		Результат.Вставить("CountryCode");
		
		Результат.Вставить("AddressText");
		Результат.Вставить("AddressCode");
		
		Возврат Результат;
		
	КонецФункции	

	&НаКлиенте
	Функция Новый_AdditionalInfoId() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/AdditionalInfoId.html
		
		Результат = Новый Структура;
		Результат.Вставить("InfoFileId");
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_StructedAdditionalInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/StructedAdditionalInfo.html
		
		Результат = Новый Структура;
		Результат.Вставить("Key");
		Результат.Вставить("Value");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceForCorrectionInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceForCorrectionInfo.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("InvoiceDate");
		Результат.Вставить("InvoiceNumber");
		
		Результат.Вставить("InvoiceRevisions", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceRevisionInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceRevisionInfo.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("RevisionDate");
		Результат.Вставить("RevisionNumber");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_OriginalInvoice() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/OriginalInvoice.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		
		Результат.Вставить("InvoiceRevisionDate");
		Результат.Вставить("InvoiceRevisionNumber");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_PaymentDocument() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/PaymentDocument.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		
		Возврат Результат;
		
	КонецФункции

//} шапка

//{ ТЧ
	
	&НаКлиенте
	Функция Новый_Torg12Item() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Torg12Item.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Product");
		Результат.Вставить("Feature");
		Результат.Вставить("Sort");
		Результат.Вставить("Article");
		Результат.Вставить("ProductCode");
		Результат.Вставить("ExternalCode");
		
		Результат.Вставить("UnitCode");
		Результат.Вставить("UnitName");
		
		Результат.Вставить("ParcelsQuantity");
		Результат.Вставить("ParcelType");
		Результат.Вставить("ParcelCapacity");
		
		Результат.Вставить("GrossQuantity");
		Результат.Вставить("Quantity");
		
		Результат.Вставить("Price");
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("TaxRate");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Результат.Вставить("AdditionalInfo");
		
		Результат.Вставить("СсылкаНаЕИ");
		
		Возврат Результат; 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_AcceptanceCertificateItem() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/AcceptanceCertificateItem.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Name");
		Результат.Вставить("Description");
		
		Результат.Вставить("UnitCode");
		Результат.Вставить("UnitName");
		
		Результат.Вставить("Quantity");
		
		Результат.Вставить("Price");
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Результат.Вставить("AdditionalInfo");
		
		Результат.Вставить("СсылкаНаЕИ");
		
		Возврат Результат; 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceItem() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceItem.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Product");
		Результат.Вставить("UnitCode");
		Результат.Вставить("Quantity");
		
		Результат.Вставить("Price");
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("TaxRate");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		Результат.Вставить("Excise");
		
		Результат.Вставить("CountriesOfOrigin");
		Результат.Вставить("CustomsDeclarationNumbers");
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Результат.Вставить("ЕдиницаИзмеренияСсылка");
		Результат.Вставить("СтранаПроисхожденияСсылка");
		Результат.Вставить("СсылкаНаЕИ");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceCorrectionItem() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceCorrectionItem.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Product");
		
		Результат.Вставить("OriginalValues" , Новый_InvoiceItemFields());
		Результат.Вставить("CorrectedValues", Новый_InvoiceItemFields());
		
		Результат.Вставить("AmountsInc", Новый_AmountsDiff());
		Результат.Вставить("AmountsDec", Новый_AmountsDiff());
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceTable() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceTable.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Items", Новый Массив);
		
		Результат.Вставить("TotalNet");
		
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedInvoiceItem() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/ExtendedInvoiceItem.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Product");
		Результат.Вставить("VendorCode");
		
		Результат.Вставить("ItemMark");
		Результат.Вставить("AdditionalProperty");
		
		Результат.Вставить("UnitCode");
		Результат.Вставить("UnitName");
		
		Результат.Вставить("ToRelease");
		Результат.Вставить("Quantity");
		
		Результат.Вставить("Price");
		Результат.Вставить("SubtotalWithVatExcluded");
		Результат.Вставить("TaxRate");
		Результат.Вставить("Vat");
		Результат.Вставить("Subtotal");
		Результат.Вставить("Excise");
		
		Результат.Вставить("AccountDebit");
		Результат.Вставить("AccountCredit");
		
		Результат.Вставить("CustomDeclarations"		, Новый Массив);
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Результат.Вставить("ЕдиницаИзмеренияСсылка");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceCorrectionTable() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceCorrectionTable.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Items", Новый Массив);
		
		Результат.Вставить("TotalsInc", Новый_InvoiceTotals());
		Результат.Вставить("TotalsDec", Новый_InvoiceTotals());
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedInvoiceCorrectionItem() Экспорт
		
		// http://1c-docs.diadoc.ru/ru/latest/ExtendedInvoiceCorrectionItem.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Product");
		
		Результат.Вставить("ItemAccountDebit");
		Результат.Вставить("ItemAccountCredit");
		
		Результат.Вставить("OriginalValues" , Новый_InvoiceItemFields());
		Результат.Вставить("CorrectedValues", Новый_InvoiceItemFields());
		
		Результат.Вставить("AmountsInc", Новый_AmountsDiff());
		Результат.Вставить("AmountsDec", Новый_AmountsDiff());
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_TovTorgTable() Экспорт
		
		// http://1c-docs.diadoc.ru/ru/latest/TovTorgTable.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Items", Новый Массив);
		
		Результат.Вставить("TotalQuantity");
		Результат.Вставить("TotalGross");
		Результат.Вставить("TotalNet");
		
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("TotalVat");
		Результат.Вставить("Total");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_TovTorgItem() Экспорт
		
		// http://1c-docs.diadoc.ru/ru/latest/TovTorgItem.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Product");
		Результат.Вставить("Feature");
		Результат.Вставить("Sort");
		Результат.Вставить("VendorCode");
		Результат.Вставить("ProductCode");
		
		Результат.Вставить("UnitName");
		Результат.Вставить("Unit");
		
		Результат.Вставить("PackageType");
		Результат.Вставить("QuantityInPack");
		
		Результат.Вставить("ItemToRelease");
		Результат.Вставить("Quantity");
		Результат.Вставить("Gross");
		Результат.Вставить("Net");
		
		Результат.Вставить("Price");
		Результат.Вставить("SubtotalWithVatExcluded");
		Результат.Вставить("TaxRate");
		Результат.Вставить("Vat");
		Результат.Вставить("Subtotal");
		
		Результат.Вставить("ItemAccountDebit");
		Результат.Вставить("ItemAccountCredit");
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Результат.Вставить("СсылкаНаЕИ");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Act552WorkDescription() Экспорт
		
		// http://1c-docs.diadoc.ru/ru/latest/Act552WorkDescription.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Items", Новый Массив);
		
		Результат.Вставить("StartingDate");
		Результат.Вставить("CompletionDate");
		
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("TotalVat");
		Результат.Вставить("Total");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Act552WorkItem() Экспорт
		
		// http://1c-docs.diadoc.ru/ru/latest/Act552WorkItem.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Name");
		Результат.Вставить("Description");
		
		Результат.Вставить("UnitCode");
		Результат.Вставить("UnitName");
		
		Результат.Вставить("Quantity");
		
		Результат.Вставить("Price");
		Результат.Вставить("SubtotalWithVatExcluded");
		Результат.Вставить("TaxRate");
		Результат.Вставить("Vat");
		Результат.Вставить("Subtotal");
		
		Результат.Вставить("ItemAccountDebit");
		Результат.Вставить("ItemAccountCredit");
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Результат.Вставить("СсылкаНаЕИ");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_CustomDeclaration() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/CustomDeclaration.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("CountryCode");
		Результат.Вставить("DeclarationNumber");
		
		Результат.Вставить("СтранаПроисхожденияСсылка");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_InvoiceItemFields() Экспорт 
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/InvoiceItemFields.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("UnitCode");
		Результат.Вставить("Quantity");
		
		Результат.Вставить("Price");
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("TaxRate");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		Результат.Вставить("Excise");
		
		Результат.Вставить("ЕдиницаИзмеренияСсылка");
		
		Возврат Результат;
		
	КонецФункции	
	
//} ТЧ

//{ подвал

	&НаКлиенте
	Функция Новый_TransferInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/TransferInfo.html
		
	 	Результат = Новый Структура;
		
		Результат.Вставить("OperationInfo");
		Результат.Вставить("OperationType");
		
		Результат.Вставить("TransferTextInfo");
		Результат.Вставить("TransferDate");
		
		Результат.Вставить("CreatedThingInfo");
		Результат.Вставить("CreatedThingTransferDate");
		
		Результат.Вставить("Waybills"	  , Новый Массив);
		Результат.Вставить("TransferBases", Новый Массив);
		
		Результат.Вставить("Carrier", Новый_ExtendedOrganizationInfo());
		
		Результат.Вставить("Employee"	, Новый_Employee());
		Результат.Вставить("OtherIssuer", Новый_OtherIssuer());
		
		Результат.Вставить("AdditionalInfoId", Новый_AdditionalInfoId());
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_TovTorgTransferInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/TovTorgTransferInfo.html
		
	 	Результат = Новый Структура;
		
		Результат.Вставить("OperationInfo");
		Результат.Вставить("TransferDate");
		Результат.Вставить("Attachment");
		
		Результат.Вставить("Employee"	, Новый_Employee());
		Результат.Вставить("OtherIssuer", Новый_OtherIssuer());
		
		Результат.Вставить("Waybills", Новый Массив);
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Act552TransferInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Act552TransferInfo.html
		
	 	Результат = Новый Структура;
		
		Результат.Вставить("OperationInfo");
		Результат.Вставить("TransferDate");
		
		Результат.Вставить("CreatedThingInfo");
		Результат.Вставить("CreatedThingTransferDate");
		
		Результат.Вставить("StructedAdditionalInfos", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_TransferBase() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/TransferBase.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentName");
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("DocumentInfo");
		
		Возврат Результат; 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Waybill() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Waybill.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Возврат Результат; 
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_EventContent() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/EventContent.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("OperationContent");
		Результат.Вставить("NotificationDate");
		Результат.Вставить("TransferDocDetails");
		Результат.Вставить("CostChangeInfo");
		
		Результат.Вставить("CorrectionBases", Новый Массив);
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_CorrectionBase() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/CorrectionBase.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("BaseDocumentName");
		Результат.Вставить("BaseDocumentNumber");
		Результат.Вставить("BaseDocumentDate");
		
		Результат.Вставить("AdditionalInfo");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_GroundInfo() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/GroundInfo.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Name");
		Результат.Вставить("Number");
		Результат.Вставить("Date");
		Результат.Вставить("Info");
		
		Возврат Результат;
		
	КонецФункции
	
//} подвал

//{ ответственные, подписи

// Конструктор структуры Signer для Торг-2.
// Всегда используется SignerDetails, а не SignerReference.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
&НаКлиенте
Функция Новый_SignerTorg2() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("SignerDetails", Новый_SignerDetailsTorg2());
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_SignerDetailsTorg2()
	
	Результат = Новый_ExtendedSignerDetailsBase();
	
	Результат.Вставить("SignerPowers");
	Результат.Вставить("SignerStatus");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Новый_ExtendedSignerDetailsBase()
	
	Результат = Новый Структура;
	Результат.Вставить("LastName");
	Результат.Вставить("FirstName");
	Результат.Вставить("MiddleName");
	Результат.Вставить("Position");
	Результат.Вставить("Inn");
	Результат.Вставить("RegistrationCertificate");
	Результат.Вставить("SignerType");
	Результат.Вставить("SignerOrganizationName");
	Результат.Вставить("SignerInfo");
	Результат.Вставить("SignerPowersBase");
	Результат.Вставить("SignerOrgPowersBase");
	
	Возврат Результат;
	
КонецФункции

	&НаКлиенте
	Функция Новый_Organization() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Organization.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Id");
		Результат.Вставить("Name");
		Результат.Вставить("Inn");
		Результат.Вставить("Kpp");
		Результат.Вставить("AuthenticateType");
		Результат.Вставить("Login");
		Результат.Вставить("FnsParticipantId");
		Результат.Вставить("FnsRegistrationDate");
		Результат.Вставить("IsTest");
		Результат.Вставить("IsPilot");
		Результат.Вставить("EncryptedDocumentsAllowed");
		
		Результат.Вставить("Certificate", Новый_PersonalCertificate());
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Signer() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Signer.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Surname");
		Результат.Вставить("FirstName");
		Результат.Вставить("Patronymic");
		
		Результат.Вставить("JobTitle");
		
		Результат.Вставить("Inn");
		
		Результат.Вставить("IsSoleProprietor");
		Результат.Вставить("SoleProprietorRegistrationCertificate");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_ExtendedSigner() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/ExtendedSigner.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("BoxId");
		Результат.Вставить("CertificateThumbprint");
		
		Результат.Вставить("SignerDetails", Новый_ExtendedSignerDetails());
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_ExtendedSignerDetails() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/ExtendedSignerDetails.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Status");
		Результат.Вставить("SignerType");
		Результат.Вставить("SignerInfo");
		
		Результат.Вставить("Surname");
		Результат.Вставить("FirstName");
		Результат.Вставить("Patronymic");
		
		Результат.Вставить("JobTitle");
		
		Результат.Вставить("Inn");
		Результат.Вставить("OrganizationName");
		Результат.Вставить("RegistrationCertificate");
		
		Результат.Вставить("Powers");
		Результат.Вставить("PowersBase");
		Результат.Вставить("OrganizationPowersBase");
		
		Возврат Результат; 
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Signature() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Signature.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("SignDate");
		Результат.Вставить("SignatureAuthenticityDate");
		
		Результат.Вставить("Certificate", Новый_PersonalCertificate());
		
		Возврат Результат;
		
	КонецФункции
		
	&НаКлиенте
	Функция Новый_PersonalCertificate() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/PersonalCertificate.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Thumbprint");
		
		Результат.Вставить("BeginDate");
		Результат.Вставить("EndDate");
		
		Результат.Вставить("Name");
		Результат.Вставить("IssuerName");
		Результат.Вставить("OrganizationName");
		
		Результат.Вставить("Inn");
		Результат.Вставить("Kpp");
		
		Результат.Вставить("JobTitle");
		
		Результат.Вставить("IsQualifiedElectronicSignature");
		
		Возврат Результат;
		
	КонецФункции
		
	&НаКлиенте
	Функция Новый_ExtendedSignerDetailsToPost() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/ExtendedSignerDetailsToPost.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Status");
		Результат.Вставить("SignerType");
		Результат.Вставить("SignerInfo");
		
		Результат.Вставить("JobTitle");
		
		Результат.Вставить("Powers");
		Результат.Вставить("PowersBase");
		Результат.Вставить("OrganizationPowersBase");
		
		Результат.Вставить("RegistrationCertificate");
		
		Возврат Результат; 
		
	КонецФункции
		
	&НаКлиенте
	Функция Новый_Official() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Official.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Surname");
		Результат.Вставить("FirstName");
		Результат.Вставить("Patronymic");
		
		Результат.Вставить("JobTitle");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Employee() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Employee.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Surname");
		Результат.Вставить("FirstName");
		Результат.Вставить("Patronymic");
		
		Результат.Вставить("EmployeePosition");
		Результат.Вставить("EmployeeBase");
		Результат.Вставить("EmployeeInfo");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_OtherIssuer() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/OtherIssuer.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Surname");
		Результат.Вставить("FirstName");
		Результат.Вставить("Patronymic");
		
		Результат.Вставить("EmployeePosition");
		Результат.Вставить("EmployeeBase");
		Результат.Вставить("EmployeeInfo");
		
		Результат.Вставить("OrganizationName");
		Результат.Вставить("OrganizationBase");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Attorney() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Attorney.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("Date");
		Результат.Вставить("Number");
		
		Результат.Вставить("IssuerOrganizationName");
		Результат.Вставить("IssuerAdditionalInfo");
		
		Результат.Вставить("RecipientAdditionalInfo");
		
		Результат.Вставить("Issuer"	  , Новый_Official());
		Результат.Вставить("Recipient", Новый_Official());
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_BuyerInfoCircumPublicProc()
		
		Результат = Новый Структура;
		
		Результат.Вставить("PersonalAccountBuyer");
		
		Результат.Вставить("ProcCode");
		Результат.Вставить("NameFinAuthority");
		Результат.Вставить("BuyerRegistryEntryNumber");
		Результат.Вставить("BuyerLiabNumber");
		Результат.Вставить("BuyerTreasuryCode");
		Результат.Вставить("SellerTreasuryName");
		
		Результат.Вставить("OKTMOBuy");
		Результат.Вставить("OKTMOPlaceDelivery");
		
		Результат.Вставить("PayDeadLine");
		Результат.Вставить("PriorityPayment");
		Результат.Вставить("TypePayment");
		Результат.Вставить("NumberFundsLiab");
		
		Результат.Вставить("InfoFundsLiab", Новый Массив); // Новый_InfoFundsLiab()
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_InfoFundsLiab() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("NumberString");
		Результат.Вставить("ObjectCodeFAIP");
		Результат.Вставить("TypeFundsSource");
		Результат.Вставить("BuyerBudjetClassCode");
		Результат.Вставить("BuyerTargetCode");
		Результат.Вставить("AmountAdvance");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_ContentOperCode()
		
		Результат = Новый Структура;
		
		Результат.Вставить("TotalCode");
		Результат.Вставить("NameDiscrepDocument");
		Результат.Вставить("TypeDiscrepDocument");
		Результат.Вставить("NumberDiscrepDocument");
		Результат.Вставить("DateDiscrepDocument");
		Результат.Вставить("IdDiscrepDocument");
		
		Возврат Результат;
		
	КонецФункции
	
//} ответственные, подписи

//{ итоги
	
	&НаКлиенте
	Функция Новый_Torg12Commons() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Torg12Commons.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("TotalParcelsQuantity");
		Результат.Вставить("TotalGrossQuantity");
		Результат.Вставить("TotalQuantity");
		
		Результат.Вставить("TotalParcelsQuantityInWords");
		Результат.Вставить("TotalGrossQuantityInWords");
		Результат.Вставить("TotalQuantityInWords");
		
		Результат.Вставить("TotalSum");
		Результат.Вставить("TotalSumInWords");
		
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_Torg12Totals() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Torg12Totals.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("ParcelsQuantity");
		Результат.Вставить("GrossQuantity");
		Результат.Вставить("Quantity");
		
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция Новый_InvoiceTotals() Экспорт
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/Totals-InvoiceTotals.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Возврат Результат;
						
	КонецФункции

	&НаКлиенте
	Функция Новый_AmountsDiff() Экспорт 
		
		// http://diadocsdk-1c.readthedocs.io/ru/latest/AmountsDiff.html
		
		Результат = Новый Структура;
		
		Результат.Вставить("TotalWithVatExcluded");
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		Результат.Вставить("Excise");
		
		Возврат Результат;
		
	КонецФункции	

//} итоги

//{ НЕФОРМАЛИЗОВАННЫЕ

	&НаКлиенте
	Функция Новый_NonformalizedDocumentToSend() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("Comment");
		
		Результат.Вставить("NeedRecipientSignature", Ложь);
		
		Возврат Результат;
	
	КонецФункции

	&НаКлиенте
	Функция Новый_ServiceDetails() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("Comment");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_NonformalizedProforma() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Результат.Вставить("Grounds");
		Результат.Вставить("Comment");
		
		Результат.Вставить("БезНДС", Ложь);
	
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_PriceList() Экспорт
		
		Возврат Новый Структура;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Torg12() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Результат.Вставить("Grounds");
		Результат.Вставить("Comment");
		
		Результат.Вставить("БезНДС", Ложь);
		Результат.Вставить("NeedRecipientSignature", Истина);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_AcceptanceCertificate() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("Vat");
		Результат.Вставить("Total");
		
		Результат.Вставить("Grounds");
		Результат.Вставить("Comment");
		
		Результат.Вставить("БезНДС", Ложь);
		Результат.Вставить("NeedRecipientSignature", Истина);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Новый_Contract() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("DocumentDate");
		Результат.Вставить("DocumentNumber");
		
		Результат.Вставить("ContractType");
		Результат.Вставить("ContractPrice");
		Результат.Вставить("Comment");
		
		Результат.Вставить("ЦенаНеУказана", Ложь);
		
		Возврат Результат;
		
	КонецФункции
	
//} НЕФОРМАЛИЗОВАННЫЕ

//} ИНИЦАЛИЗАЦИЯ content
////////////////////////////////////////////////////////////////////////////////

//{ ИНТЕРАКТИВНЫЕ ДЕЙСТВИЯ

	&НаКлиенте
	Функция ОтправитьНаОбработку(ЭДОбъект, ПараметрыОтправкиНаСогласование) Экспорт
		
		Если НЕ ПараметрыОтправкиНаСогласование = Неопределено Тогда
			
			Если ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetUserId) И ПустаяСтрока(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
				
				ПараметрыФормы=	Новый Структура();
				ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с контрагентом");
				ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не указан получатель документа.");
				ПараметрыФормы.Вставить("Подробности", 		"Не указан получатель документа.");
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы,);

				Возврат Ложь;
			ИначеЕсли ПараметрыОтправкиНаСогласование.ЭтоТекущийПользователь = истина Тогда
				//если пользователь передает на согласование самому себе - то просто оставляем документ в исходящих неотправленных 
			Иначе
				
				Попытка
					
					ЗаданиеНаСогласование=							ЭДОбъект.CreateResolutionRequestTask();
					ЗаданиеНаСогласование.ResolutionRequestType=	ПараметрыОтправкиНаСогласование.ResolutionRequestType;
					Если ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetUserId) Тогда
						ЗаданиеНаСогласование.TargetUserId=			ПараметрыОтправкиНаСогласование.TargetUserId;
					ИначеЕсли ЗначениеЗаполнено(ПараметрыОтправкиНаСогласование.TargetDepartmentId) Тогда
						ЗаданиеНаСогласование.TargetDepartmentId=	ПараметрыОтправкиНаСогласование.TargetDepartmentId;
					КонецЕсли;
					ЗаданиеНаСогласование.Comment=					ПараметрыОтправкиНаСогласование.Комментарий;
					ЗаданиеНаСогласование.Send();
					
					Возврат Истина;
					
				Исключение
					
					ОписаниеОшибки=	ОписаниеОшибки();
					Если Найти(ОписаниеОшибки, "Resolution request author user id and target user id must differ")>0 Тогда
						ОписаниеОшибки=	"Нельзя отправить документ на согласование или подписание самому себе";
					ИначеЕсли Найти(ОписаниеОшибки, "User can not add signature request to document")>0
						ИЛИ Найти(ОписаниеОшибки, "User can not add approvement request to document")>0
						ИЛИ Найти(ОписаниеОшибки, "document that cannot be rejected")>0 Тогда
						ОписаниеОшибки=	"Документ уже отправлен на подписание или согласование";
					Иначе
						ОписаниеОшибки=	"Неизвестная ошибка обработки";
					КонецЕсли;
					
					ПараметрыФормы=	Новый Структура();
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка обработки");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	ОписаниеОшибки);
					ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки());
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы,);
					
					Возврат Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	// Создает задание на подпись документа.
	//
	// Параметры:
	//  Document	 - COMОбъект - Объект, производный от Document;
	//  ПротоКонтент - Структура - (Необязательный) Данные для заполнения ответного титула.
	//  Асинхронно	 - Булево	 - Истина, если задание нужно запустить асинхронно.
	// 
	// Возвращаемое значение:
	//  AsyncResult - результат асинхронной операции, если флаг Асинхронно = Истина;
	//  Неопределено - если флаг Асинхронно = Ложь.
	//
	&НаКлиенте
	Функция ПодписатьВДиадоке(Document, ПротоКонтент = Неопределено, Асинхронно = Ложь) Экспорт
		
		Результат = Неопределено;
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		ЭтоФормализованныйДокумент = ЭтоФормализованныйФормат(ФорматЭД);
		ПроверитьСертификат(Document.OrganizationId, ЭтоФормализованныйДокумент);
	    			
		ОтветныеДействия = Перечисление_ТипыОтветногоДействия();
		
		ReplySendTask = МетодКлиента(	"Модуль_РаботаССерверомДиадок", 
										"ReplySendTask", 
										Document, 
										ОтветныеДействия.ПодписаниеДокумента	);
		
		Если ПротоКонтент <> Неопределено Тогда
			
			ОтветныйТитул = СформироватьОтветныйТитулДокумента(Document, ПротоКонтент);
			
			ContentItem = ReplySendTask.ContentItems.GetItem(0);
			ContentItem.LoadContentFromBase64(Base64СтрокаИзДвоичныхДанных(ОтветныйТитул));
			
		КонецЕсли;
		
		Если Асинхронно Тогда
			Результат = ReplySendTask.SendAsync();
		Иначе
			ReplySendTask.Send();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	// Создает и отправляет отказ в подписи документа.
	//
	// Параметры:
	//  Document	 - COMОбъект - Объект, производный от Document;
	//  ТекстОтказа	 - Строка - произвольный комментарий к отказу.
	//
	&НаКлиенте
	Процедура ОтказатьВПодписи(Document, ТекстОтказа = "") Экспорт
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		ЭтоФормализованныйДокумент = ЭтоФормализованныйФормат(ФорматЭД);
		ПроверитьСертификат(Document.OrganizationId, ЭтоФормализованныйДокумент);
					
		ОтветныеДействия = Перечисление_ТипыОтветногоДействия();
		
		ReplySendTask = МетодКлиента(	"Модуль_РаботаССерверомДиадок", 
										"ReplySendTask", 
										Document, 
										ОтветныеДействия.ОтказВПодписиДокумента	);
		
		ContentItem = ReplySendTask.ContentItems.GetItem(0);
		
		Если ContentItem.Content.Type = "XmlSignatureRejection" Тогда
			ЗаполнитьПодписанта(ContentItem.Content, Document.Organization);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОтказа) Тогда
			ContentItem.Content.Comment = ТекстОтказа;
		КонецЕсли;
					
		ReplySendTask.Send();
		
	КонецПроцедуры
	
	// Создает и отправляет запрос на уточнение документа.
	//
	// Параметры:
	//  Document	 - COMОбъект - Объект, производный от Document;
	//  Комментарий	 - Строка - произвольный комментарий к запросу.
	//
	&НаКлиенте
	Процедура ЗапроситьУточнение(Document, Комментарий = "") Экспорт
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		ЭтоФормализованныйДокумент = ЭтоФормализованныйФормат(ФорматЭД);
		ПроверитьСертификат(Document.OrganizationId, ЭтоФормализованныйДокумент);
						
		ОтветныеДействия = Перечисление_ТипыОтветногоДействия();
		
		ReplySendTask = МетодКлиента(	"Модуль_РаботаССерверомДиадок", 
										"ReplySendTask", 
										Document, 
										ОтветныеДействия.ЗапроcНаУточнениеДокумента	);
										
		ContentItem = ReplySendTask.ContentItems.GetItem(0);								
										
		Если ContentItem.Content.Type = "XmlSignatureRejection" Тогда
			ЗаполнитьПодписанта(ContentItem.Content, Document.Organization);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ContentItem.Content.Comment = Комментарий;
		КонецЕсли;
					
		ReplySendTask.Send();
		
	КонецПроцедуры
	
	// Создает и отправляе отказ от аннулирования документа
	//
	// Параметры:
	//  Document	 - COMОбъект 	- Объект, производный от Document;
	//  Комментарий	 - Строка 		- произвольный комментарий к запросу.
	//
	&НаКлиенте
	Процедура ОтказатьВАннулированииДокумента(Document, Комментарий = "") Экспорт
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		ЭтоФормализованныйДокумент = ЭтоФормализованныйФормат(ФорматЭД);
			
		ПроверитьСертификат(Document.OrganizationID, ЭтоФормализованныйДокумент);
		
		ОтветныеДействия = Перечисление_ТипыОтветногоДействия();
		
		ReplySendTask = МетодКлиента(	"Модуль_РаботаССерверомДиадок", 
										"ReplySendTask", 
										Document, 
										ОтветныеДействия.ОтказОтАннулированияДокумента	);
		
		ContentItem = ReplySendTask.ContentItems.GetItem(0);
		
		Если ContentItem.Content.Type = "XmlSignatureRejection" Тогда
			ЗаполнитьПодписанта(ContentItem.Content, Document.Organization);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ContentItem.Content.Comment = Комментарий;
		КонецЕсли;
		
		ReplySendTask.Send();
								
	КонецПроцедуры
	
	// Производит аннулирование документа
	//
	// Параметры:
	//  Document - COMОбъект - Объект, производный от Document
	//
	&НаКлиенте
	Процедура АннулироватьДокумент(Document) Экспорт
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		ЭтоФормализованныйДокумент = ЭтоФормализованныйФормат(ФорматЭД);
		
		ПроверитьСертификат(Document.OrganizationID, ЭтоФормализованныйДокумент);
		
		ОтветныеДействия = Перечисление_ТипыОтветногоДействия();
		
		ReplySendTask = МетодКлиента(	"Модуль_РаботаССерверомДиадок", 
										"ReplySendTask", 
										Document, 
										ОтветныеДействия.ПринятиеАннулированияДокумента	);
										
		ReplySendTask.Send();
		
	КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьКраткоеИмяФайла(ПолноеИмяФайла)
		
		Результат =  ПолноеИмяФайла;
		Пока Найти(Результат, "\")>0 цикл 
			Результат = Прав(Результат, СтрДлина(Результат) -  Найти(Результат, "\"));
		КонецЦикла;
		
		Возврат Результат;
		
		
	КонецФункции	
	
	&НаКлиенте
	Функция ОтправитьПринятьПриглашениеКонтрагенту(Organization, CounteragentId, ИНН, Знач Комментарий, ИмяФайла = "", КонтрагентСсылка = Неопределено, FnsParticipantId = "") Экспорт
		
		Организация = BoxID_2_Организация_Форма(Organization.ID);
		
		Counteragent = Organization.GetCounteragentById(CounteragentId);
		СтарыйСтатус = Counteragent.GetStatus();
		
		Отказ = Ложь;
		
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			
			TrustConnectionRequest = Organization.CreateAcquireCounteragentTask(ИмяФайла);
			
			TrustConnectionRequest.CounteragentBoxId= CounteragentId;
			TrustConnectionRequest.Inn  			= ИНН;
			TrustConnectionRequest.Message 			= Комментарий;
			TrustConnectionRequest.FileName 		= ПолучитьКраткоеИмяФайла(ИмяФайла);
			
			НовыйСтатус = "IsInvitedByMe";
			
			Попытка
				TrustConnectionRequest.SendAsync();
			Исключение
				Отказ = Истина;
				Ошибка = ИнформацияОбОшибке();
			КонецПопытки;
			
			Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, НовыйСтатус);
			
		Иначе
			
			Попытка
				Counteragent.AcquireCounteragent(Комментарий);
			Исключение
				Отказ = Истина;
				Ошибка = ИнформацияОбОшибке();
			КонецПопытки;
			
			НовыйСтатус = Counteragent.GetStatus();
			
		КонецЕсли;
		
		ПриглашениеОтправлено = Не Отказ;
		
		Если ПриглашениеОтправлено Тогда
			
			Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, СтарыйСтатус);
			Если НовыйСтатус <> СтарыйСтатус Тогда
				Платформа.ПовторноеИспользованиеСброситьЗначение("Модуль_Клиент", "GetCounteragentListByStatus", Организация, НовыйСтатус);
			КонецЕсли;
			
			Если НЕ КонтрагентСсылка = Неопределено Тогда
				Установить_CounteragentBoxID_для_Контрагент(КонтрагентСсылка, CounteragentId);
				МетодСервера(, "УстановитьИдентификаторЭДОДляКонтрагента", КонтрагентСсылка, FnsParticipantId);
			КонецЕсли;
			
		Иначе
			
			ЗаголовокСобытия = СтрШаблон("Не удалось отправить приглашение контрагенту (id = %1, ИНН = %2)"
				, CounteragentId, ИНН);
			
			ШаблонСообщения = "%1:
			|%2";
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(ШаблонСообщения
				, ЗаголовокСобытия
				, КраткоеПредставлениеОшибки(Ошибка));
			Сообщение.Сообщить();
			
			ИмяСобытия = "Диадок";
			ДатаСобытия = ТекущаяДата();
			УровеньСобытия = "Ошибка";
			ТекстОшибки = СтрШаблон(ШаблонСообщения
				, ЗаголовокСобытия
				, ПодробноеПредставлениеОшибки(Ошибка));
			
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия
				, УровеньСобытия
				, ТекстОшибки
				, ДатаСобытия);
			
		КонецЕсли;
		
		Возврат ПриглашениеОтправлено;
		
	КонецФункции
		
	&НаКлиенте
	Процедура СообщитьПользователю(ТекстСообщения) Экспорт
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыбратьПараметрыПолучателяПриОтправкеНаСогласование(ФормаВладелец, Организация, ResolutionRequestType, ПараметрыОбработчика = Неопределено) Экспорт
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ResolutionRequestType", ResolutionRequestType);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораПолучателя", ПараметрыФормы, ФормаВладелец,
		"ОбработчикОткрытиеФормыВыбораПолучателя", ПараметрыОбработчика, ФормаВладелец);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодтверждениеВыполненияОперации(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика= Неопределено) Экспорт
		
		ПоказатьВопрос(Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика), "Подтвердите выполнение операции", РежимДиалогаВопрос.ОКОтмена, 120, КодВозвратаДиалога.Отмена);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПоказатьСостояниеОбработкиСписка(ТекстСостояния, ТекущийНомер, РазмерСписка, ОтображатьДеталиПрогресса = Истина, ПояснениеСостояния = Неопределено) Экспорт
		
		ПрогрессСостояния	 = ТекущийНомер / ?(ЗначениеЗаполнено(РазмерСписка), РазмерСписка, 1) * 100;
		ДеталиПрогресса		 = "";
		
		Если ОтображатьДеталиПрогресса Тогда
			ДеталиПрогресса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' (%1 из %2)'"), ТекущийНомер, РазмерСписка);
		КонецЕсли;
		
		ПоказатьСостояниеОбработки(ТекстСостояния + ДеталиПрогресса, ПрогрессСостояния, ПояснениеСостояния);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПоказатьСостояниеОбработки(ТекстСостояния, ПрогрессСостояния = Неопределено, ПояснениеСостояния = Неопределено) Экспорт
		
		КартинкаСостояния = МетодКлиента("Модуль_Клиент", "ЭДО_БиблиотекаКартинок").КартинкаЗаголовка32;
		
		Состояние(ТекстСостояния, ПрогрессСостояния, ПояснениеСостояния, КартинкаСостояния);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОповеститьПользователя(ТекстОповещения, КлючУникальностиОповещения = Неопределено) Экспорт
		
		ЗаголовокОповещения	 = Платформа.ПараметрыКлиент.СловарьWL.Заголовок;
		КартинкаОповещения	 = МетодКлиента("Модуль_Клиент", "ЭДО_БиблиотекаКартинок").КартинкаЗаголовка32;
		СистемнаяИнформация	 = Новый СистемнаяИнформация;
		
		Если СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.3.10") < 0 Тогда
			Выполнить("ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения, КартинкаОповещения)");
		Иначе
			Выполнить("ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения, КартинкаОповещения, , КлючУникальностиОповещения)");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПоказатьПростоеПредупреждение(ТекстПредупреждения, Таймаут = 120) Экспорт
		
		ЗаголовокПредупреждения = Платформа.ПараметрыКлиент.СловарьWL.Заголовок;
		ПоказатьПредупреждение( , ТекстПредупреждения, Таймаут, ЗаголовокПредупреждения);
		
	КонецПроцедуры
		
	// Открывает в браузере по умолчанию руководство пользователя на странице "Не появляется документ на отправку"
	&НаКлиенте
	Процедура ПоказатьИнструкцию_НетДокументовНаОтправку() Экспорт
		
		АдресаИнтернетРесурсов = АдресаИнтернетРесурсов();
				
		ПерейтиПоНавигационнойСсылке(АдресаИнтернетРесурсов.Инструкция_НетДокументовНаОтправку);
		
	КонецПроцедуры //ПоказатьИнструкцию_НетДокументовНаОтправку()
	
	// Открывает в браузере по умолчанию руководство пользователя на странице "Переотправка документов"
	&НаКлиенте
	Процедура ПоказатьИнструкцию_ПереотправкаДокументов() Экспорт
		
		АдресаИнтернетРесурсов = АдресаИнтернетРесурсов();
				
		ПерейтиПоНавигационнойСсылке(АдресаИнтернетРесурсов.Инструкция_ПереотправкаДокументов);
		
	КонецПроцедуры //ПоказатьИнструкцию_ПереотправкаДокументов()
	
//} ИНТЕРАКТИВНЫЕ ДЕЙСТВИЯ

//{ ПОЛУЧИТЬ...

	&НаСервере
	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(МассивСсылок, OrganizationId)
		
		Результат=	Новый Массив;
		
		Для Каждого InitialDocumentId Из МассивСсылок Цикл
			СсылкаРНК = ПолучитьDocumentID_2_Документ(InitialDocumentId, OrganizationId);
			Если СсылкаРНК <> Неопределено И ТипЗнч(СсылкаРНК) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				Результат.Добавить(СсылкаРНК);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок(ОбъектДиадок) Экспорт
		
		InitialDocumentIds=	Новый Массив;
		Для Индекс = 0 По ОбъектДиадок.InitialDocumentIds.Count - 1 Цикл
			InitialDocumentIds.Добавить(ОбъектДиадок.InitialDocumentIds.GetItem(Индекс));
		КонецЦикла;
		
		OrganizationId=		ОбъектДиадок.Organization.Id;
		МассивСсылок=		ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(InitialDocumentIds, OrganizationId);
		
		Возврат МассивСсылок;
		
	КонецФункции	
		
	&НаСервере
	Функция НайтиПодходящийСчетФактуруИзРНК(Знач МассивСсылокРНК, Знач ИдентификаторДокументаВДиадок, ЭтоВходящийДокумент)

		Запрос= Новый Запрос;

		ПредставлениеСФ = МетодСервера(, "ПредставлениеДокументов").СчетФактураВыданный;

		Если (ЭтоВходящийДокумент И НЕ Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено) 
		  ИЛИ (НЕ ЭтоВходящийДокумент И НЕ Метаданные.Документы[ПредставлениеСФ].ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено) Тогда

		  Запрос.Текст=	
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка,
				|	ВЫБОР
				|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
				|				ИЛИ УжеСопоставленные.Значение = """"
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДополнительныеСведения.Объект КАК Объект,
				|			ДополнительныеСведения.Свойство КАК Свойство,
				|			ДополнительныеСведения.Значение КАК Значение
				|		ИЗ
				|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|		ГДЕ
				|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
				|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
				|ГДЕ
				|	СчетФактура.ДокументОснование В (&МассивСсылокРНК)";
			
		Иначе
			
			Запрос.Текст=	
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка,
				|	ВЫБОР
				|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
				|				ИЛИ УжеСопоставленные.Значение = """"
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК УжеСопоставлен
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактура
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДополнительныеСведения.Объект КАК Объект,
				|			ДополнительныеСведения.Свойство КАК Свойство,
				|			ДополнительныеСведения.Значение КАК Значение
				|		ИЗ
				|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|		ГДЕ
				|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
				|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
				|ГДЕ
				|	СчетФактура.ДокументОснование В (&МассивСсылокРНК)";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
		Запрос.УстановитьПараметр("Свойство", ИдентификаторДокументаВДиадок);
		
		Если НЕ ЭтоВходящийДокумент Тогда
			Запрос.Текст= СтрЗаменить(Запрос.Текст, "СчетФактураПолученный", ПредставлениеСФ);
		КонецЕсли;

		РезультатЗапроса=	Запрос.Выполнить();
		Выборка=			РезультатЗапроса.Выбрать();
		
		Возврат Выборка;
		
	КонецФункции

	&НаСервере
	Функция ПолучитьПодходящуюСФ(МассивСсылокРНК, ЭтоВходящийДокумент = Истина) Экспорт

		ИдентификаторДокументаВДиадок=	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"));
		ВыборкаПодходящихСФ=	НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК, ИдентификаторДокументаВДиадок, ЭтоВходящийДокумент);

		Если ВыборкаПодходящихСФ.Количество() > 0 Тогда
			ВыборкаПодходящихСФ.Следующий();
			Возврат ВыборкаПодходящихСФ.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьСвязанныйInvoice(Document) Экспорт
		
		Результат = Неопределено;
		
		Organization		   = Document.Organization;
		InitialDocumentIds	   = Document.InitialDocumentIds;
		SubordinateDocumentIds = Document.SubordinateDocumentIds;
		
		ТипыСФ = Новый Структура;
		ТипыСФ.Вставить("Invoice");
		ТипыСФ.Вставить("InvoiceRevision");
		
		TimeStamp = '00010101';
		
		ВГраница = InitialDocumentIds.Count - 1;
		Для Ц = 0 По ВГраница Цикл
			
			Попытка
				InitialDocument = Organization.GetDocumentById(InitialDocumentIds.GetItem(Ц));
				ТипДокумента = InitialDocument.TypeNamedId;
				// берем последнюю по времени СФ
				Если ТипыСФ.Свойство(ТипДокумента)
					И TimeStamp < InitialDocument.TimeStamp Тогда
					TimeStamp = InitialDocument.TimeStamp; 
					Результат = InitialDocument; 
				КонецЕсли;
			Исключение				
				//Не получить документ по ID можем по разным причинам: нет доступа в подразделение документа, либо документ еще на подписи/согласовании у отправителя.
				//Определить тип недоступного документа в таких ситуациях мы не можем. 
				//Поэтому вызывать исключение в таких ситуациях не всегда правильно.
				//Будем исходить допущения: если нет доступа к документу, то эти данные для нас не значимы в контексте получения ГТД из СФ. 				
			КонецПопытки;			
			
		КонецЦикла;
		
		ВГраница = SubordinateDocumentIds.Count - 1;
		Для Ц = 0 По ВГраница Цикл
			
			Попытка
				SubordinateDocument = Organization.GetDocumentById(SubordinateDocumentIds.GetItem(Ц));
				ТипДокумента = SubordinateDocument.TypeNamedId;
				// берем последнюю по времени СФ
				Если ТипыСФ.Свойство(ТипДокумента)
					И TimeStamp < SubordinateDocument.TimeStamp Тогда
					TimeStamp = SubordinateDocument.TimeStamp; 
					Результат = SubordinateDocument; 
				КонецЕсли;
			Исключение
				//Не получить документ по ID можем по разным причинам: нет доступа в подразделение документа, либо документ еще на подписи/согласовании у отправителя.
				//Определить тип недоступного документа в таких ситуациях мы не можем. 
				//Поэтому вызывать исключение в таких ситуациях не всегда правильно.
				//Будем исходить допущения: если нет доступа к документу, то эти данные для нас не значимы в контексте получения ГТД из СФ.
			КонецПопытки;
			
		КонецЦикла;
		
		Если Результат = Неопределено Тогда
			
			// Пробуем получить счет-фактуру из сообщения, при условии что он там единственный.
			
			Попытка
				PackageDocuments = Document.GetDocumentPackage().Documents;
			Исключение КонецПопытки;
			
			Если PackageDocuments <> Неопределено Тогда
				
				ВГраница = PackageDocuments.Count - 1;
				Для Ц = 0 По ВГраница Цикл
				
					DocPackage = PackageDocuments.GetItem(Ц);
					ИмяТипа = DocPackage.TypeNamedId;
					
					Если ИмяТипа = "Invoice" Тогда
						
						Если Результат = Неопределено Тогда
							Результат = DocPackage;
						Иначе
							// Счетов-фактур в сообщении больше одного.
							Результат = Неопределено;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		Возврат Результат;		
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьМассивТиповДокументов(ФильтрПоТипамДокументов, ВидТипаДокумента)
		
		//ВидТипаДокумента = 0  все виды 	
		//ВидТипаДокумента = 1  документооборот СФ
		//ВидТипаДокумента = 2  строго двусторонний документ
		//ВидТипаДокумента = 3  строго односторонний документ
		//ВидТипаДокумента = 4  односторонний или двусторонний документ
		
		МассивТиповДокументов = Новый Массив;
		
		Если ФильтрПоТипамДокументов = "" И ВидТипаДокумента = 0 Тогда
			МассивТиповДокументов.Добавить("Any");
			Возврат МассивТиповДокументов;			
		КонецЕсли;
		
		Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "1" Тогда // Накладные
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 2 Тогда
				МассивТиповДокументов.Добавить("NonformalizedTorg12");
				МассивТиповДокументов.Добавить("NonformalizedAcceptanceCertificate");
				МассивТиповДокументов.Добавить("XmlTorg12");
				МассивТиповДокументов.Добавить("XmlAcceptanceCertificate");
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
				МассивТиповДокументов.Добавить("UniversalCorrectionDocument");
				МассивТиповДокументов.Добавить("UniversalTransferDocumentRevision");
			КонецЕсли;	
		ИначеЕсли ФильтрПотипамДокументов = "11" Тогда // только Торг-12
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 2 Тогда
				МассивТиповДокументов.Добавить("NonformalizedTorg12");
				МассивТиповДокументов.Добавить("XmlTorg12");
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
				МассивТиповДокументов.Добавить("UniversalTransferDocumentRevision");
			КонецЕсли;	
		ИначеЕсли ФильтрПотипамДокументов = "12" Тогда // только Акт
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 2 Тогда
				МассивТиповДокументов.Добавить("NonformalizedAcceptanceCertificate");
				МассивТиповДокументов.Добавить("XmlAcceptanceCertificate");
			КонецЕсли;
		ИначеЕсли  ФильтрПотипамДокументов = "13" Тогда // УПД (ПД)
			Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
			КонецЕсли;
		ИначеЕсли  ФильтрПотипамДокументов = "14" Тогда // УКД (ДИС)
			Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
				МассивТиповДокументов.Добавить("UniversalCorrectionDocument");
			КонецЕсли;
		ИначеЕсли  ФильтрПотипамДокументов = "15" Тогда // иУПД (ДОП)
			Если ВидТипаДокумента = 0 или ВидТипаДокумента = 2 Тогда
				МассивТиповДокументов.Добавить("UniversalTransferDocumentRevision");
			КонецЕсли;
		КонецЕсли;		
		
		Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "2" Тогда // Счет-фактуры
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
				МассивТиповДокументов.Добавить("AnyInvoiceDocumentType");
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
				МассивТиповДокументов.Добавить("UniversalCorrectionDocument");
				МассивТиповДокументов.Добавить("UniversalTransferDocumentRevision");
	   		КонецЕсли;	   
	   	ИначеЕсли ФильтрПотипамДокументов = "21" Тогда // только Счет-фактура
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
	    		МассивТиповДокументов.Добавить("Invoice");
			КонецЕсли;	   
	   	ИначеЕсли ФильтрПотипамДокументов = "22" Тогда // только ИСФ
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
				МассивТиповДокументов.Добавить("InvoiceRevision");
	       	КонецЕсли; 	   
	   	ИначеЕсли ФильтрПотипамДокументов = "23" Тогда // только КСФ и ИКСФ
	   		Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
	    		МассивТиповДокументов.Добавить("InvoiceCorrection");
	    	   	МассивТиповДокументов.Добавить("InvoiceCorrectionRevision");
			КонецЕсли; 
	    ИначеЕсли ФильтрПотипамДокументов = "24" Тогда // УПД (СФ)
	   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
			   МассивТиповДокументов.Добавить("UniversalTransferDocument");
		   КонецЕсли;
	    ИначеЕсли ФильтрПотипамДокументов = "25" Тогда // УКД (КСЧФ)
	   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
			   МассивТиповДокументов.Добавить("UniversalCorrectionDocument");
		   КонецЕсли;
		ИначеЕсли ФильтрПотипамДокументов = "26" Тогда // иУПД (КСЧФ)
	   	   Если ВидТипаДокумента = 0 или ВидТипаДокумента = 1 Тогда
			   МассивТиповДокументов.Добавить("UniversalTransferDocumentRevision");
		   КонецЕсли;   
	   	КонецЕсли;
		
		Если ФильтрПоТипамДокументов = "Torg2" Тогда
			МассивТиповДокументов.Добавить("Torg2");
		КонецЕсли;
		
	   	Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "3" Тогда // Счет на оплату
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 3 Тогда
	    		МассивТиповДокументов.Добавить("ProformaInvoice");
	    	КонецЕсли;	
	   	КонецЕсли;
	   
	   	Если ФильтрПотипамДокументов = "" ИЛИ ФильтрПотипамДокументов = "4" Тогда 	// Неформализованные документы
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 2 Тогда 			//строго двусторонний док
	    		МассивТиповДокументов.Добавить("ReconciliationAct"); 		//акт сверки
	    		МассивТиповДокументов.Добавить("Contract"); 				//договор
	    		МассивТиповДокументов.Добавить("TrustConnectionRequest");	//приглашение к ЭДО
	    		МассивТиповДокументов.Добавить("PriceList"); 				//ценовой лист
	    	КонецЕсли;	
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 3 Тогда	//строго односторонний док
	    		МассивТиповДокументов.Добавить("ServiceDetails"); 		//детализация
	    	КонецЕсли;	
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 4 Тогда	//как односторонний так и двусторонний док
	    		МассивТиповДокументов.Добавить("PriceListAgreement"); 	//протокол согласования цены
	    		МассивТиповДокументов.Добавить("CertificateRegistry"); 	//реестр сертификатов
	    		МассивТиповДокументов.Добавить("Nonformalized");  		//прочее
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "41" Тогда 
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 2 Тогда
	    		МассивТиповДокументов.Добавить("ReconciliationAct");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "42" Тогда 
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 3 Тогда
	    		МассивТиповДокументов.Добавить("ServiceDetails");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "43" Тогда 
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 2 Тогда
	    		МассивТиповДокументов.Добавить("Contract"); 
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "44" Тогда 
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 4 Тогда
	    		МассивТиповДокументов.Добавить("PriceListAgreement");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "45" Тогда 
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 2 Тогда
	    		МассивТиповДокументов.Добавить("TrustConnectionRequest");
	    	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "46" Тогда 
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 4 Тогда
	    		МассивТиповДокументов.Добавить("CertificateRegistry");
	    	КонецЕсли;	
	   //ИначеЕсли ФильтрПотипамДокументов = "47" Тогда
	   // 	Если ВидТипаДокумента=0 ИЛИ ВидТипаДокумента=2 Тогда
	   // 		МассивТиповДокументов.Добавить("PriceList"); 
	   // 	КонецЕсли;	
	    ИначеЕсли ФильтрПотипамДокументов = "47" Тогда 
	    	Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 4 Тогда
	    		МассивТиповДокументов.Добавить("Nonformalized");
			КонецЕсли;
		ИначеЕсли ФильтрПотипамДокументов = "48" Тогда
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 4 Тогда
				МассивТиповДокументов.Добавить("SupplementaryAgreement");
			КонецЕсли;	
		ИначеЕсли ФильтрПотипамДокументов = "5" Тогда
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
				МассивТиповДокументов.Добавить("UniversalTransferDocument");
			КонецЕсли;
		ИначеЕсли ФильтрПотипамДокументов = "6" Тогда
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
				МассивТиповДокументов.Добавить("UniversalCorrectionDocument");
			КонецЕсли;
		ИначеЕсли ФильтрПотипамДокументов = "7" Тогда
			Если ВидТипаДокумента = 0 ИЛИ ВидТипаДокумента = 1 Тогда
				МассивТиповДокументов.Добавить("UniversalTransferDocumentRevision");
			КонецЕсли;	
		КонецЕсли;

		Возврат МассивТиповДокументов;
		
	КонецФункции
	
	&НаКлиенте
	Функция ДокументНеСогласованРанее(Document) Экспорт
		
		Если Document.Resolutions = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
				
		Для Ц=0 по Document.Resolutions.Count-1 Цикл
			
			ItemResolution= Document.Resolutions.GetItem(Ц);
			
			Если ItemResolution.ResolutionType = "ResolutionApprove" Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПроверитьРазмерВыбранныхФайлов(МассивАдресовФайлов, МассивБольшиеФайлы) Экспорт
		
		Индекс= 0;
		
		Пока Индекс <= МассивАдресовФайлов.ВГраница() Цикл
			
			ЭлементМассива= МассивАдресовФайлов[Индекс];
						
			ФайлДанных = Новый Файл(ЭлементМассива);
			Если ФайлДанных.Размер() > (5*1024*1024) Тогда
				МассивБольшиеФайлы.Добавить(ФайлДанных);
				МассивАдресовФайлов.Удалить(Индекс);
			Иначе
				Индекс= Индекс + 1;
			КонецЕсли;
				
		КонецЦикла;
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьМассивБольшихФайлов(МассивБольшиеФайлы, ФормаИнициатор) Экспорт
		
		СтрПредупреждения= "Невозможно добавить следующие файлы:";
		Для каждого БольшойФайл Из МассивБольшиеФайлы Цикл
			СтрПредупреждения = СтрПредупреждения + "
			|- " + БольшойФайл.Имя;
		КонецЦикла;
				
		ПараметрыФормы= Новый Структура();
		ПараметрыФормы.Вставить("Заголовок", 		"Не добавленные файлы");
		ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Размер отправляемого файла не должен превышать 5Мб. См. ""Подробно"".");
		ПараметрыФормы.Вставить("Подробности", 		СтрПредупреждения);
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ФормаИнициатор);
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Таймаут(ДлительностьВМилиСекундах) Экспорт
		
		Попытка
			WshShell = Новый COMОбъект("WScript.Shell");
			WshShell.Run("ping -n 1 -w "+Формат(ДлительностьВМилиСекундах, "ЧГ=0")+" 127.255.255.255", 0, -1);
		Исключение КонецПопытки;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ДействиеПриОбновленииМодуляФайловыйВариант(СтруктураРасположенияМодуля) Экспорт
		
		ИмяФайлаМодуля		= СтруктураРасположенияМодуля.Путь;
		РасположениеМодуля	= СтруктураРасположенияМодуля.Место;
		
		Действие = "ОставитьЗаявку";
		
		Если ЗначениеЗаполнено(ИмяФайлаМодуля) Тогда
			
			Попытка
				ФайлРезультата = ЗапросНаПолучениеФайла("https://diadoc-api.kontur.ru/1c-addin/versionDD.xml");
				Если ФайлРезультата = Неопределено Тогда 
					Возврат Действие;
				КонецЕсли;	
			Исключение
				МетодСервера(,"ОбработатьОшибкуНаСервере", "ОшибкаПолученияФайла", ОписаниеОшибки());
				Возврат Действие;
			КонецПопытки;
			
			ФайлСтарыхВерсий = Новый ЧтениеXML;
			ФайлСтарыхВерсий.ОткрытьФайл(ФайлРезультата);
			
			ТекущаяВерсияМодуля = МетодСервера(,"ВерсияОбработкиБезНомераСборки");
			ТекущаяВерсияМодуля = СтрЗаменить(ТекущаяВерсияМодуля, ".", "_");
			
			ЭтоСтарыйРелиз	= Ложь;
			
			Пока ФайлСтарыхВерсий.Прочитать() Цикл
				
				Если ФайлСтарыхВерсий.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					
					//обработка блока старых версий
					Если ФайлСтарыхВерсий.Имя = "Old" Тогда
						ЭтоСтарыйРелиз = Истина;
					ИначеЕсли ФайлСтарыхВерсий.Имя = "UF" И ЭтоСтарыйРелиз Тогда
						
						Если ФайлСтарыхВерсий.ПолучитьАтрибут("version") = ТекущаяВерсияМодуля Тогда
							
							ХэшИсходный	= ВРег(ФайлСтарыхВерсий.ПолучитьАтрибут("md5"));
							ХэшМодуля	= MD5Файл(ИмяФайлаМодуля);
							
							Если ХэшИсходный = ХэшМодуля Тогда
								Действие = "Скачать";
							КонецЕсли;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;	
			
			ФайлСтарыхВерсий.Закрыть();
			УдалитьФайлы(ФайлРезультата);
			
			Если РасположениеМодуля = "ВСправочнике" Тогда
				УдалитьФайлы(ИмяФайлаМодуля);
			КонецЕсли;	
			
		КонецЕсли;
		
		Возврат Действие;
		
	КонецФункции
	
	&НаКлиенте
	//расчет хэша файла
	Функция MD5Файл(ИмяФайла)
		
		Попытка
			Компонента = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI;
			Хэш = Компонента.HashFile("MD5", ИмяФайла);
		Исключение
			Хэш = 0;
		КонецПопытки;
		
		Возврат ВРег(Хэш);
		
	КонецФункции
	
	&НаКлиенте
	Процедура СохранитьФайл(ИмяФайлаПоУмолчанию, ИмяВременногоФайла, ЗаголовокДиалога = "", ФильтрДиалога = "") Экспорт
		
		Каталог = "";
		Режим 	= РежимДиалогаВыбораФайла.Сохранение;
		
		Если НЕ ЗначениеЗаполнено(ЗаголовокДиалога) Тогда
			ЗаголовокДиалога = НСтр("ru = 'Сохранение файла'");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФильтрДиалога) Тогда
			ФильтрДиалога = НСтр("ru = 'Все файлы(*.*)|*.*'");
		КонецЕсли;
		
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		
		ДиалогОткрытияФайла.ПолноеИмяФайла 		= ИмяФайлаПоУмолчанию;
		ДиалогОткрытияФайла.Фильтр 				= ФильтрДиалога;
		ДиалогОткрытияФайла.МножественныйВыбор 	= Ложь;
		ДиалогОткрытияФайла.Заголовок 			= ЗаголовокДиалога;
		
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			
			ИмяКаталога 	= ДиалогОткрытияФайла.Каталог;
			ПолноеИмяФайла 	= ДиалогОткрытияФайла.ПолноеИмяФайла;
			
			СоздатьКаталог(ИмяКаталога);
			
			//На случай, если пользователь при сохранении изменил имя файла, которое задаем по умолчанию 
			НовоеИмяФайла = Сред(ПолноеИмяФайла, СтрДлина(ИмяКаталога) + 1, СтрДлина(ПолноеИмяФайла) - СтрДлина(ИмяКаталога));
									
			ДвоичныеДанныеОбновления = Новый ДвоичныеДанные(ИмяВременногоФайла);
			УдалитьФайлы(ИмяВременногоФайла);
		
			ДвоичныеДанныеОбновления.Записать(ПолноеИмяФайла);
			
			ОповеститьПользователя("Файл """ + НовоеИмяФайла + """ сохранен");
			
		КонецЕсли;
		
	КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
//{ ТЕХНИЧЕСКАЯ ПОДДЕРЖКА

	// Открывает браузер IE со страницей Контур.Диагностика
	&НаКлиенте
	Процедура ПровестиКонтурДиагностику() Экспорт
		
		АдресРесурса = АдресаИнтернетРесурсов().СтраницаДиагностики;
		
		ЗапуститьПриложение(АдресРесурса);
		
	КонецПроцедуры //ПровестиКонтурДиагностику()
	
	// Формирует email в адрес технической поддержки Диадок. Письмо обязательно содержит технические данные
	// см. метод "ВывестиТехническуюИнформациюВТекстовыйДокумент" и опционально данные об организации
	// см. метод "ВывестиИнформациюОбОрганизацииВТекстовыйДокумент".
	//
	// Параметры:
	//	Организация	- СправочникСсылка, Неопределено	- в случае Неопределено данные по организации необходимо заполнить самостоятельно
	&НаКлиенте
	Процедура НаписатьПисьмоВТехПоддержку(Организация = Неопределено) Экспорт
		
		ИнформацияДляТехПоддержки = Новый ТекстовыйДокумент;
		
		ВывестиШаблонОписаниеПроблемыВТекстовыйДокумент(ИнформацияДляТехПоддержки);
		
		Если Организация = Неопределено Тогда
			
			ВывестиШаблонНеобходимоЗаполнитьВТекстовыйДокумент(ИнформацияДляТехПоддержки);
			
		КонецЕсли;
		
		ДобавитьВТекстовыйДокументИнформациюДляТехПоддержки(ИнформацияДляТехПоддержки, Организация, Истина);
		
		ПереводСтроки 	= "%0A";
		КоличествоСтрок = ИнформацияДляТехПоддержки.КоличествоСтрок();
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл 
			
			ТекСтрока 	= ИнформацияДляТехПоддержки.ПолучитьСтроку(НомерСтроки);
			ТекСтрока 	= СтрЗаменить(ТекСтрока, "\"	, "%2F");
			ТекСтрока 	= СтрЗаменить(ТекСтрока, """"	, "%22");
			
			ТелоПисьма 	= ?(НомерСтроки = 1, ТекСтрока, ТелоПисьма + ПереводСтроки + ТекСтрока);
			
		КонецЦикла;
		
		Гиперссылка = "mailto:[кому]?subject=[тема]&body=[тело]";
		Гиперссылка = СтрЗаменить(Гиперссылка, "[кому]", "diadoc@skbkontur.ru");
		Гиперссылка = СтрЗаменить(Гиперссылка, "[тема]", "Диадок. Модуль 1С");
		Гиперссылка = СтрЗаменить(Гиперссылка, "[тело]", ТелоПисьма);
		
		ЗапуститьПриложение(Гиперссылка);
		
	КонецПроцедуры //НаписатьПисьмоВТехПоддержку()
	
	// Добавляет в текстовый документ первичную информацию, необходимую для технической поддержки
	//
	// Параметры:
	//	ТекстовыйДокумент	- ТекстовыйДокумент					- текстовый документ, в который необходимо добавить информацию
	//	Организация			- СправочникСсылка, Неопределено	- организация, данные которой необходимо добавить в текстовый документ
	//	ДобавитьРазделитель	- Булево							- позволяет добавить разделитель перед началом нового блока с информацией
	&НаКлиенте
	Процедура ДобавитьВТекстовыйДокументИнформациюДляТехПоддержки(ТекстовыйДокумент, Организация = Неопределено, ДобавитьРазделитель = Ложь)
		
		СтрокаРазделитель = "----------------------------";
					
		Если ЗначениеЗаполнено(Организация) Тогда
			
			Если ДобавитьРазделитель Тогда 
				ТекстовыйДокумент.ДобавитьСтроку(СтрокаРазделитель);
			КонецЕсли;
			
			ВывестиИнформациюОбОрганизацииВТекстовыйДокумент(ТекстовыйДокумент, Организация);
					
		КонецЕсли;
		
		Если ДобавитьРазделитель Тогда 
			ТекстовыйДокумент.ДобавитьСтроку(СтрокаРазделитель);
		КонецЕсли;
		ВывестиТехническуюИнформациюВТекстовыйДокумент(ТекстовыйДокумент);
		
	КонецПроцедуры
		
	// Добавляет в текстовый документ сообщение о том, какие данные необходимо заполнить самостоятельно
	//
	// Параметры:
	//  ТекстовыйДокумент 	- ТекстовыйДокумент - заполняемый текстовый документ
	&НаКлиенте
	Процедура ВывестиШаблонНеобходимоЗаполнитьВТекстовыйДокумент(ТекстовыйДокумент)
		
		ТекстовыйДокумент.ДобавитьСтроку("Необходимо заполнить:");
		ТекстовыйДокумент.ДобавитьСтроку("");
		ТекстовыйДокумент.ДобавитьСтроку("1. Наименование организации:");
		ТекстовыйДокумент.ДобавитьСтроку("2. ИНН:");
		ТекстовыйДокумент.ДобавитьСтроку("3. КПП:");
		
	КонецПроцедуры //ВывестиШаблонНеобходимоЗаполнитьВТекстовыйДокумент()
	
	// Добавляет в текстовый документ заголовок "Описание проблемы:" для самостоятельного заполнения
	//
	// Параметры:
	//  ТекстовыйДокумент 	- ТекстовыйДокумент - заполняемый текстовый документ
	&НаКлиенте
	Процедура ВывестиШаблонОписаниеПроблемыВТекстовыйДокумент(ТекстовыйДокумент)
		
		ТекстовыйДокумент.ДобавитьСтроку("Описание проблемы:");
		ТекстовыйДокумент.ДобавитьСтроку("");
		ТекстовыйДокумент.ДобавитьСтроку("");
		
	КонецПроцедуры //ВывестиШаблонОписаниеПроблемыВТекстовыйДокумент()
	
	// Добавляет в текстовый документ сведения об организации:
	// Наименование, ИНН, КПП
	//
	// Параметры:
	//  ТекстовыйДокумент 	- ТекстовыйДокумент - заполняемый текстовый документ
	//	Организация			- СправочникСсылка	- организация, информацию по которой добавляем в файл 
	//
	&НаКлиенте
	Процедура ВывестиИнформациюОбОрганизацииВТекстовыйДокумент(ТекстовыйДокумент, Организация)
				
		СведенияОбОрганизации = ОписаниеОрганизации(Организация);
		
		ТекстовыйДокумент.ДобавитьСтроку("Организация: " 	+ СведенияОбОрганизации.Наименование);
		ТекстовыйДокумент.ДобавитьСтроку("ИНН: " 			+ СведенияОбОрганизации.ИНН);
		ТекстовыйДокумент.ДобавитьСтроку("КПП: " 			+ СведенияОбОрганизации.КПП);
		
	КонецПроцедуры //ВывестиИнформациюОбОрганизацииВТекстовыйДокумент()
	
	// Добавляет в текстовый документ техническую информацию:
	// Версия модуля, компоненты, ОС и др.
	//
	// Параметры:
	//  ТекстовыйДокумент - ТекстовыйДокумент - заполняемый текстовый документ
	//
	&НаКлиенте
	Процедура ВывестиТехническуюИнформациюВТекстовыйДокумент(ТекстовыйДокумент)
		
		ПредставлениеТехИнфо = ПредставлениеТехническойИнформации();
		ТекстовыйДокумент.ДобавитьСтроку(ПредставлениеТехИнфо);
		
	КонецПроцедуры //ВывестиТехническуюИнформациюВТекстовыйДокумент()
	
	&НаКлиенте
	Функция ИдентификаторТекущегоПользователя()
		
		ТекущийПользователь = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьТекущегоПользователяДиадок");
		
		Если ТекущийПользователь = Неопределено Тогда
			Результат = "NotAuthorized";
		Иначе
			Результат = ТекущийПользователь.Id;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Возвращает техническую информацию об использовании модуля
	// 
	// Возвращаемое значение:
	//  Структура - содержит поля:
	//   * ВерсияОС 			- Строка 		- Версия операционной системы.
	//   * ТипПлатформы 		- ТипПлатформы 	- сведения о типе платформы.
	//   * ВерсияПлатформы 		- Строка 		- Версия приложения 1С:Предприятие в формате <основная версия>.<младшая версия>.<релиз>.<дополнительный номер релиза>. Например, 8.2.9.200.
	//   * ТипКлиента 			- Строка 		- Вид и режим работы приложения. Например, "Толстый клиент обычное приложение".
	//   * ОписаниеКонфигурации - Строка 		- представление конфигурации.
	//   * СтрокаСоединенияИБ 	- Строка 		- Строка соединения информационной базы.
	//   * ВерсияМодуля 		- Строка 		- версия модуля Диадок.
	//   * ВерсияКомпоненты 	- Строка 		- версия компоненты Диадок.
	//   * СпособАутентификации - Строка 		- "ПоСертификату" или "ПоПаролю"
	//   * ОтпечатокСертификата - Строка (Необязательный) - Отпечаток сертификата, заполняется, если пользователь аутентифицировался по сертификату
	//   * Логин 				- Строка (Необязательный) - Отпечаток сертификата, заполняется, если пользователь аутентифицировался по логину и паролю
	//
	&НаКлиенте
	Функция ТехническаяИнформация() Экспорт
		
		СистемнаяИнформация 	= Новый СистемнаяИнформация;
		СтрокаСоединения		= СтрокаСоединенияИнформационнойБазы();
		ОписаниеКонфигурации	= ОписаниеКонфигурации();
		ИнформацияПМ			= ИнформацияОбИспользованииПодключаемогоМодуля();
		ВидКлиента				= ВидКлиента();
		МодульТиповой			= МодульТиповой();
		
		ВерсияОбработки			= МетодСервера(,"ВерсияОбработки");
		ВерсияКомпоненты		= ?(Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок <> Неопределено, Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocInvoiceAPI.GetVersion(), "");
		
		РежимСовместимостиФорматов155и820 = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РежимСовместимостиФорматов155и820;
		РежимОтладкиСервера = Объект.ПараметрыКлиентСервер.РежимОтладкиСервера;
		
		ТехИнфо = Новый Структура;
		
		// системная информация
		ТехИнфо.Вставить("ВерсияОС"			, СистемнаяИнформация.ВерсияОС);
		ТехИнфо.Вставить("ТипПлатформы"		, Строка(СистемнаяИнформация.ТипПлатформы));
		ТехИнфо.Вставить("ВерсияПлатформы"	, СистемнаяИнформация.ВерсияПриложения);
		ТехИнфо.Вставить("ВидКлиента"		, ВидКлиента);
		
		// информационная база
		ТехИнфо.Вставить("ОписаниеКонфигурации"	, ОписаниеКонфигурации);
		ТехИнфо.Вставить("СтрокаСоединенияИБ"	, СтрокаСоединения);
		
		// модуль
		ТехИнфо.Вставить("ВерсияМодуля", ВерсияОбработки);
		ТехИнфо.Вставить("ВерсияКомпоненты", ВерсияКомпоненты);
		ТехИнфо.Вставить("ИнформацияПМ", ИнформацияПМ);
		ТехИнфо.Вставить("МодульТиповой", МодульТиповой);
		ТехИнфо.Вставить("МодульИнтеграции", Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции);
		ТехИнфо.Вставить("UserId", ИдентификаторТекущегоПользователя());
		ТехИнфо.Вставить("ОтладкаВложенныхОбработок", РежимОтладкиСервера);
		ТехИнфо.Вставить("РежимСовместимостиФорматов155и820", РежимСовместимостиФорматов155и820);
		ТехИнфо.Вставить("ИспользоватьФормуВводаНакладной", Объект.ПараметрыКлиентСервер.ИспользоватьФормуВводаНакладной);
		ТехИнфо.Вставить("ИспользоватьМетрики", Объект.ПараметрыКлиентСервер.Метрики.ИспользоватьМетрики);
		ТехИнфо.Вставить("ИспользоватьСервисКонтурМаркировка", Объект.ПараметрыКлиентСервер.ИспользоватьСервисКонтурМаркировка);
		
		// параметры аутентификации
		ТехИнфо.Вставить("СпособАутентификации");
		ТехИнфо.Вставить("ОтпечатокСертификата");
		ТехИнфо.Вставить("Логин");
		ДополнитьТехИнформациюПараметрамиАутентификации(ТехИнфо);
		
		Возврат ТехИнфо;
		
	КонецФункции //ТехническаяИнформация()
	
	&НаКлиенте
	Процедура ПоказатьИнформациюДляТехническойПоддержки(ВызывающаяФорма) Экспорт
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТехническаяИнформация", ПредставлениеТехническойИнформации());
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально"
			, "ИнформацияДляТехническойПоддержки"
			, ПараметрыФормы
			, ВызывающаяФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПредставлениеТехническойИнформации() Экспорт
		
		ТехИнфо = ТехническаяИнформация();
		
		ТекстСпособАутентификации = "Сертификат: " + ТехИнфо.ОтпечатокСертификата;
		Если Не ТехИнфо.СпособАутентификации = "ПоСертификату" Тогда
			ТекстСпособАутентификации = "Логин: " + ТехИнфо.Логин;
		КонецЕсли;
		
		Результат = "Версия модуля: " + ТехИнфо.ВерсияМодуля + "
		|Модуль типовой: " + ТехИнфо.МодульТиповой + "
		|Версия компоненты: " + ТехИнфо.ВерсияКомпоненты + "
		|Модуль интеграции: " + ТехИнфо.МодульИнтеграции + "
		|UserId: " + ТехИнфо.UserId + "
		|" + ТекстСпособАутентификации + "
		|Режим совместимости форматов: " + ТехИнфо.РежимСовместимостиФорматов155и820 + "
		|Подключаемый модуль: " + ТехИнфо.ИнформацияПМ.Размещение + "
		|Путь к подключаемому модулю: " + ТехИнфо.ИнформацияПМ.Путь + "
		|Отладка вложенных обработок: " + ТехИнфо.ОтладкаВложенныхОбработок + "
		|Использовать форму ввода накладной: " + ТехИнфо.ИспользоватьФормуВводаНакладной + "
		|Использовать метрики: " + ТехИнфо.ИспользоватьМетрики + "
		|Использовать сервис ""Контур.Маркировка"": " + ТехИнфо.ИспользоватьСервисКонтурМаркировка + "
		|
		|Версия ОС: " + ТехИнфо.ВерсияОС + "
		|Тип платформы: " + ТехИнфо.ТипПлатформы + "
		|Версия платформы: " + ТехИнфо.ВерсияПлатформы + "
		|Вид клиента: " + ТехИнфо.ВидКлиента + "
		|Строка соединения: " + ТехИнфо.СтрокаСоединенияИБ + "
		|Конфигурация: " + ТехИнфо.ОписаниеКонфигурации;
		
		Возврат Результат;
		
	КонецФункции

	// Дополняет техническую информацию сведениями о параметрах аутентификации в сервисе Диадок.
	//
	// Параметры:
	//  ТехИнфо - Структура - см. ТехническаяИнформация()
	//
	&НаКлиенте
	Процедура ДополнитьТехИнформациюПараметрамиАутентификации(ТехИнфо)
		
		Если Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок = Неопределено Тогда
			
			// Если автоматом не можем определить имя интеграционного модуля
			Возврат;
			
		ИначеЕсли Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.Свойство("DiadocConnection") Тогда
			
			СоединениеДиадок = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection;
			Если СоединениеДиадок = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
						
		ТипАутентификации 	= СоединениеДиадок.AuthenticateType;
		
		Если ВРег(ТипАутентификации) = ВРег("Certificate") Тогда 
			
			ЛичныйСертификат = СоединениеДиадок.Certificate;
			
			ТехИнфо.Вставить("СпособАутентификации"	, "ПоСертификату");
			ТехИнфо.Вставить("ОтпечатокСертификата"	, ЛичныйСертификат.Thumbprint);
			
		ИначеЕсли ВРег(ТипАутентификации) = ВРег("Login") Тогда 
			
			ТехИнфо.Вставить("СпособАутентификации"	, "ПоПаролю");
			ТехИнфо.Вставить("Логин"				, СоединениеДиадок.Login);
			
		КонецЕсли;
		
	КонецПроцедуры //ДополнитьТехИнформациюПараметрамиАутентификации()

	// Запускает онлайн чат с технической поддержкой, автоматически передавая необходимую первичную информацию
	//
	// Параметры:
	//	Организация	- СправочникСсылка, Неопределено	- в случае неопределено данные по организации переданы не будут
	&НаКлиенте
	Процедура ОткрытьОнлайнЧат(Организация = Неопределено) Экспорт
		
		ТехническаяИнформация = ТехническаяИнформация();
		
		ДопПараметрыURI = Новый Соответствие; // additionalParameters
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			РеквизитыОрганизации = ОписаниеОрганизации(Организация);
			
			// сведения об организации
			ДопПараметрыURI.Вставить(СтрокаБазовогоПараметраОнлайнКонсультанта("orgname"	), РеквизитыОрганизации.Наименование);
			ДопПараметрыURI.Вставить(СтрокаБазовогоПараметраОнлайнКонсультанта("inn"		), РеквизитыОрганизации.ИНН);
			ДопПараметрыURI.Вставить(СтрокаБазовогоПараметраОнлайнКонсультанта("kpp"		), РеквизитыОрганизации.КПП);
			
		КонецЕсли;
		
		// параметры аутентификации
		Если ТехническаяИнформация.Свойство("СпособАутентификации") Тогда
			Если ТехническаяИнформация.СпособАутентификации = "ПоСертификату" Тогда 
				ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("User_thumbprint")	, ТехническаяИнформация.ОтпечатокСертификата);
			Иначе 
				ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("User_login")		, ТехническаяИнформация.Логин);
			КонецЕсли;
		КонецЕсли;
		
		// системная информация
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("OSVersion"			), ТехническаяИнформация.ВерсияОС);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("platformType"		), ТехническаяИнформация.ТипПлатформы);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("platformVersion"	), ТехническаяИнформация.ВерсияПлатформы);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("clientType"			), ТехническаяИнформация.ВидКлиента);
		
		// информационная база
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("informationConfiguration"	), ТехническаяИнформация.ОписаниеКонфигурации);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("connectionString"			), ТехническаяИнформация.СтрокаСоединенияИБ);
		
		// модуль
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("moduleVersion"	), ТехническаяИнформация.ВерсияМодуля);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("componentVersion"	), ТехническаяИнформация.ВерсияКомпоненты);
		
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("IntegrationModule"), ТехническаяИнформация.МодульИнтеграции);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("UserID"), ТехническаяИнформация.UserId);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("informationPM"), ТехническаяИнформация.ИнформацияПМ.Размещение);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("format"), ТехническаяИнформация.РежимСовместимостиФорматов155и820);
		ДопПараметрыURI.Вставить(СтрокаПродуктовогоПараметраОнлайнКонсультанта("debugging"), ТехническаяИнформация.ОтладкаВложенныхОбработок);
		
		ПараметрыURI = Новый Структура;
		ПараметрыURI.Вставить("type"				, "window");
		ПараметрыURI.Вставить("topic"				, "Диадок");
		ПараметрыURI.Вставить("hideMinimizedVersion", "true");
		ПараметрыURI.Вставить("additionalParameters", СтруктуруВКоллекциюПараметровURI(ДопПараметрыURI));
		
		// Формат гиперссылки:
		// host_name?type=window&topic=Диадок&hideMinimizedVersion=true&additionalParameters={"base/inn":"ИНН организации","base/kpp":"КПП организации","base/orgname":"Наименование организации","scope/1CDiadoc/User_login":"Логин клиента"(или в случае авторизации по сертификату "scope/1CDiadoc/User_thumbprint":"Отпечаток сертификата клиента"),"scope/1CDiadoc/moduleVersion":"Версия модуля","scope/1CDiadoc/IntegrationModule":"Модуль Интеграции","scope/1CDiadoc/componentVersion":"Версия компоненты","scope/1CDiadoc/UserID":"UserID","scope/1CDiadoc/informationPM":"Информация о ПМ","scope/1CDiadoc/format":"Режим совместимости форматов","scope/1CDiadoc/debugging":"Отладка вложенных обработок","scope/1CDiadoc/platformVersion":"Версия платформы","scope/1CDiadoc/OSVersion":"Версия операционной системы","scope/1CDiadoc/platformType":"Windows x86","scope/1CDiadoc/clientType":"Тип клиента","scope/1CDiadoc/connectionString":"Строка соединения","scope/1CDiadoc/informationConfiguration":"Информация о конфигурации"}
		АдресРесурса = АдресаИнтернетРесурсов().ОнлайнКонсультант;
		АдресРесурса = АдресРесурса + СтруктуруВСтрокуПараметровURI(ПараметрыURI);
		АдресРесурса = СтрЗаменить(АдресРесурса, " ", "%20");
		
		ЗапуститьПриложение(АдресРесурса);
		
	КонецПроцедуры //ОткрытьОнлайнЧат()
	
	// Открывает в браузере IE страницу с настойками удаленного подключения по VNC
	&НаКлиенте
	Процедура ЗапуститьУдаленноеПодключениеVNC() Экспорт
		
		АдресРесурса = АдресаИнтернетРесурсов().УдаленноеПодключение;
		ЗапуститьПриложение(АдресРесурса);
		
	КонецПроцедуры //ЗапуститьУдаленноеПодключениеVNC()
	
	// Открывает в браузере IE страницу с руководством пользователя
	&НаКлиенте
	Процедура ОткрытьРуководствоПользователя() Экспорт 
		
		АдресРесурса = АдресаИнтернетРесурсов().Инструкция_РуководствоПользователя;
		ЗапуститьПриложение(АдресРесурса);
		
	КонецПроцедуры
	
	// Открывает в браузере IE страницу заказа обратного звонка
	&НаКлиенте
	Процедура ЗаказатьОбратныйЗвонок() Экспорт 
		
		АдресРесурса = АдресаИнтернетРесурсов().ЗаказатьОбратныйЗвонок;
		ЗапуститьПриложение(АдресРесурса);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ИнформацияОбИспользованииПодключаемогоМодуля()
		
		Результат = Новый Структура;
		Результат.Вставить("Размещение", "Не используется");
		Результат.Вставить("Путь", "");
		
		Если Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль Тогда
			
			РасположениеПМ = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля;
			ПутьКМодулю = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
			
			Если РасположениеПМ = "НаДиске" Тогда
				Результат.Размещение = "На диске";
				Результат.Путь = ПутьКМодулю;
			ИначеЕсли РасположениеПМ = "ВБазеДанных" Тогда
				ЗаполнитьИнформациюОбИспользованииПодключаемогоМодуляВБазеДанных(Результат, ПутьКМодулю);
			ИначеЕсли РасположениеПМ = "ВСоставеКонфигурации" Тогда
				Результат.Размещение = "В конфигурации";
				Результат.Путь = ПодставитьПараметрыВСтроку("Обработка: %1", ПутьКМодулю);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Процедура ЗаполнитьИнформациюОбИспользованииПодключаемогоМодуляВБазеДанных(ТехИнформация, ПодключаемыйМодульСсылка)
		
		СинонимСправочника = ПодключаемыйМодульСсылка.Метаданные().Синоним;
		НаименованиеЭлемента = ПодключаемыйМодульСсылка.Наименование;
		
		ТехИнформация.Размещение = "В справочнике";
		ТехИнформация.Путь = "Справочник: " + СинонимСправочника + Символы.ПС + 
							 "Элемент: " + НаименованиеЭлемента;
		
	КонецПроцедуры
	
	// Сохраняет подключаемый модуль в файл с указанным именем
	//
	// Параметры:
	//  ИмяФайла	 - Строка - имя файла, в который будет сохранен подключаемый модуль
	//
	&НаКлиенте
	Процедура СохранитьПодключаемыйМодуль(ИмяФайла) Экспорт 
		
		ДвоичныеДанные = ДвоичныеДанныеПодключаемогоМодуля();
		ДвоичныеДанные.Записать(ИмяФайла);
		
	КонецПроцедуры
	
	&НаСервере
	Функция ДвоичныеДанныеПодключаемогоМодуля()
		
		Результат = Неопределено;
		
		РасположениеПМ = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля;
		ПутьКМодулю = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
		
		Если РасположениеПМ = "НаДиске" Тогда
			Результат = Новый ДвоичныеДанные(ПутьКМодулю);
		ИначеЕсли РасположениеПМ = "ВБазеДанных" Тогда
			
			ИмяСтандартногоРеквизита = "ХранилищеОбработки";
			Реквизиты = ПутьКМодулю.Метаданные().Реквизиты;
			
			Если Не Реквизиты.Найти(ИмяСтандартногоРеквизита) = Неопределено
				И ТипЗнч(ПутьКМодулю[ИмяСтандартногоРеквизита]) = Тип("ХранилищеЗначения") Тогда
				ИмяРеквизита = ИмяСтандартногоРеквизита;
			Иначе
				
				Для Каждого Реквизит Из Реквизиты Цикл
					Если ТипЗнч(ПутьКМодулю[Реквизит]) = Тип("ХранилищеЗначения") Тогда
						ИмяРеквизита = Реквизит.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
				Результат = ПутьКМодулю[ИмяРеквизита].Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
//} ТЕХНИЧЕСКАЯ ПОДДЕРЖКА

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКА ФОРМАТА ОТПРАВКИ ДОКУМЕНТОВ

#Область НАСТРОЙКА_ФОРМАТА_ОТПРАВКИ_ДОКУМЕНТОВ

	// Псевдоперечисление ключей настроек форматов отправки документов,
	// которые записываются в свойства "ФормироватьУПД" или "ФормироватьУПДКонтрагент";
	//
	// Возвращаемое значение:
	//  Структура
	//
	&НаКлиентеНаСервереБезКонтекста
	Функция НастройкиФорматаОтправкиДокументов()
		
		Результат = Новый Структура;
		
		Результат.Вставить("СЧФДОП_820_736"	, "СЧФДОП_820_736");	// УПД Счф Доп 820@, УКД Ксчф Дис 736@
		Результат.Вставить("СЧФДОП_820"		, "СЧФДОП_820"); // УПД Счф Доп 820@, УКД Ксчф Дис 189@
		Результат.Вставить("СЧФДОП"			, "СЧФДОП");	 // УПД Счф Доп 155@, УКД Ксчф Дис 189@
		
		Результат.Вставить("СЧФ_ДОП_820_736", "СЧФ_ДОП_820_736");	// УПД Счф 820@, УПД Доп 820@, УКД КСчф 736,
		Результат.Вставить("СЧФ_ДОП_820"	, "СЧФ_ДОП_820"); // УПД Счф 820@, УКД КСчф 189@, УПД Доп 820@
		Результат.Вставить("СЧФ_ДОП"		, "СЧФ_ДОП");	  // УПД Счф 155@, УКД КСчф 189@, УПД Доп 155@
		
		Результат.Вставить("СФТОРГ12АКТ_820_736", "СФТОРГ12АКТ_820_736"); 	// СФ 820@, КСФ 736@, Торг/Акт 820@
		Результат.Вставить("СФТОРГ12АКТ_820"	, "СФТОРГ12АКТ_820"); 		// СФ 820@, КСФ 189@, Торг/Акт 820@
		Результат.Вставить("СФТОРГ12АКТ"		, "СФТОРГ12АКТ");	  		// СФ 155@, КСФ 189@, Торг/Акт 155@
		
		Результат.Вставить("СЧФ", "СЧФ"); // УПД Счф 155@, УКД КСчф 189@, Торг/Акт 172@
		Результат.Вставить("ДОП", "ДОП"); // СФ 93@, КСФ 93@, УПД Доп 155@
		
		Результат.Вставить("СФ"			, "СФ");		// СФ 155@, КСФ 189@, Торг/Акт 172@
		Результат.Вставить("ТОРГ12АКТ"	, "ТОРГ12АКТ");	// СФ 93@, КСФ 93@, Торг/Акт 155@
		Результат.Вставить("НЕТ"		, "НЕТ");		// СФ 93@, КСФ 93@, Торг/Акт 172@
		
		Возврат Результат;
		
	КонецФункции
	
	// Псевдоперечисление вариантов отправки счетов-фактур
	//
	// Возвращаемое значение:
	//  Структура
	//
	&НаКлиентеНаСервереБезКонтекста
	Функция ВариантыОтправкиСчетовФактур()
		
		Результат = Новый Структура;
		
		Результат.Вставить("УПД_УКД_ПОЛНЫЙ_820_736"	, "УПД_УКД_ПОЛНЫЙ_820_736"); 	// УПД Счф Доп 820@, УКД Ксчф Дис 736@
		Результат.Вставить("УПД_УКД_ПОЛНЫЙ_820"		, "УПД_УКД_ПОЛНЫЙ_820"); 		// УПД Счф Доп 820@, УКД Ксчф Дис 189@
		Результат.Вставить("УПД_УКД_ПОЛНЫЙ"			, "УПД_УКД_ПОЛНЫЙ");	 		// УПД Счф Доп 155@, УКД Ксчф Дис 189@
		
		Результат.Вставить("УПД_УКД_СФ_820_736"	, "УПД_УКД_СФ_820_736"); // УПД Счф 820@, УКД КСчф 736@
		Результат.Вставить("УПД_УКД_СФ_820"		, "УПД_УКД_СФ_820"); // УПД Счф 820@, УКД КСчф 189@
		Результат.Вставить("УПД_УКД_СФ"			, "УПД_УКД_СФ");	 // УПД Счф 155@, УКД КСчф 189@
		
		Результат.Вставить("СФ_820_736"	, "СФ_820_736"); // СФ 820@, КСФ 736@ 
		Результат.Вставить("СФ_820"		, "СФ_820"); // СФ 820@, КСФ 189@
		Результат.Вставить("СФ_155"		, "СФ_155"); // СФ 155@, КСФ 189@
		
		Результат.Вставить("СФ_93", "СФ_93"); // СФ 93@, КСФ 93@
		
		Возврат Результат;
		
	КонецФункции
	
	// Псевдоперечисление вариантов отправки накладных и актов
	//
	// Возвращаемое значение:
	//  Структура
	//
	&НаКлиентеНаСервереБезКонтекста
	Функция ВариантыОтправкиНакладных()
		
		Результат = Новый Структура;
		
		Результат.Вставить("УПД_УКД_ПОЛНЫЙ_820_736"	, "УПД_УКД_ПОЛНЫЙ_820_736"); 	// УПД Счф Доп 820@, УКД Ксчф Дис 736@
		Результат.Вставить("УПД_УКД_ПОЛНЫЙ_820"		, "УПД_УКД_ПОЛНЫЙ_820"); 		// УПД Счф Доп 820@, УКД Ксчф Дис 189@
		Результат.Вставить("УПД_УКД_ПОЛНЫЙ"			, "УПД_УКД_ПОЛНЫЙ");	 		// УПД Счф Доп 155@, УКД Ксчф Дис 189@
		
		Результат.Вставить("УПД_УКД_ТОРГ12АКТ_820_736", "УПД_УКД_ТОРГ12АКТ_820_736"); // УПД Доп 820@, УКД Дис 736@
		Результат.Вставить("УПД_УКД_ТОРГ12АКТ_820"	, "УПД_УКД_ТОРГ12АКТ_820");	 // УПД Доп 820@
		Результат.Вставить("УПД_УКД_ТОРГ12АКТ"		, "УПД_УКД_ТОРГ12АКТ");		 // УПД Доп 155@
		
		Результат.Вставить("ТОРГ12АКТ_820", "ТОРГ12АКТ_820"); // Торг/Акт 820@
		Результат.Вставить("ТОРГ12АКТ_155", "ТОРГ12АКТ_155"); // Торг/Акт 155@
		Результат.Вставить("ТОРГ12АКТ_172", "ТОРГ12АКТ_172"); // Торг/Акт 172@
		
		Возврат Результат;
		
	КонецФункции
	
	// Возвращает массив всех возможных настроек форматов отправки документов
	//
	// Возвращаемое значение:
	//  Массив - элементом массива является структура. См. метод Новый_НастройкаФорматаОтправки
	&НаКлиентеНаСервереБезКонтекста
	Функция МассивНастроекФорматовОтправки()
						
		Результат = Новый Массив;
						
		Настройки = НастройкиФорматаОтправкиДокументов();
		ВариантыОтправкиСФ	 = ВариантыОтправкиСчетовФактур();
		ВариантыОтправкиНакл = ВариантыОтправкиНакладных();
		
		// Правила заполнения массива:
		//	1.	Элементом массива является структура (см. метод Новый_НастройкаФорматаОтправки).
		// 	2.	Параметр ОсновнаяНастройка со значением Истина должен обязательно быть и только у одного элемента массива.
		// 	3.	Для каждого уникального значения параметра ВариантОтправкиСФ должен быть обязательно определен
		//		только 1 параметр ОсновнойВариантОтправкиНакладных со значением Истина.
				
		// СФ 820@, УКД 736@
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СЧФДОП_820_736
		, ВариантыОтправкиСФ.УПД_УКД_ПОЛНЫЙ_820_736
		, ВариантыОтправкиНакл.УПД_УКД_ПОЛНЫЙ_820_736
		, Истина, Ложь);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СЧФ_ДОП_820_736
		, ВариантыОтправкиСФ.УПД_УКД_СФ_820_736
		, ВариантыОтправкиНакл.УПД_УКД_ТОРГ12АКТ_820_736
		, Истина, Ложь);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СФТОРГ12АКТ_820_736
		, ВариантыОтправкиСФ.СФ_820_736
		, ВариантыОтправкиНакл.ТОРГ12АКТ_820
		, Истина, Ложь);
		
		// СФ 820@, УКД 189@
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СЧФДОП_820
		, ВариантыОтправкиСФ.УПД_УКД_ПОЛНЫЙ_820
		, ВариантыОтправкиНакл.УПД_УКД_ПОЛНЫЙ_820
		, Истина, Истина);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СЧФ_ДОП_820
		, ВариантыОтправкиСФ.УПД_УКД_СФ_820
		, ВариантыОтправкиНакл.УПД_УКД_ТОРГ12АКТ_820
		, Истина, Ложь);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СФТОРГ12АКТ_820
		, ВариантыОтправкиСФ.СФ_820
		, ВариантыОтправкиНакл.ТОРГ12АКТ_820
		, Истина, Ложь);
		
		// СФ 155@
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СЧФДОП
		, ВариантыОтправкиСФ.УПД_УКД_ПОЛНЫЙ
		, ВариантыОтправкиНакл.УПД_УКД_ПОЛНЫЙ
		, Истина, Ложь, Истина);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СЧФ_ДОП
		, ВариантыОтправкиСФ.УПД_УКД_СФ
		, ВариантыОтправкиНакл.УПД_УКД_ТОРГ12АКТ
		, Истина, Ложь, Истина);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СЧФ
		, ВариантыОтправкиСФ.УПД_УКД_СФ
		, ВариантыОтправкиНакл.ТОРГ12АКТ_172
		, Ложь, Ложь, Истина);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СФТОРГ12АКТ
		, ВариантыОтправкиСФ.СФ_155
		, ВариантыОтправкиНакл.ТОРГ12АКТ_155
		, Истина, Ложь, Истина);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.СФ
		, ВариантыОтправкиСФ.СФ_155
		, ВариантыОтправкиНакл.ТОРГ12АКТ_172
		, Ложь, Ложь, Истина);
		
		// СФ 93@
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.НЕТ
		, ВариантыОтправкиСФ.СФ_93
		, ВариантыОтправкиНакл.ТОРГ12АКТ_172
		, Истина, Ложь, Истина);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.ДОП
		, ВариантыОтправкиСФ.СФ_93
		, ВариантыОтправкиНакл.УПД_УКД_ТОРГ12АКТ
		, Ложь, Ложь, Истина);
		
		ДобавитьНастройкуФорматаОтправки(Результат
		, Настройки.ТОРГ12АКТ
		, ВариантыОтправкиСФ.СФ_93
		, ВариантыОтправкиНакл.ТОРГ12АКТ_155
		, Ложь, Ложь, Истина);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Процедура ДобавитьНастройкуФорматаОтправки(МассивНастроек
		, КлючНастройки, ВариантОтправкиСФ, ВариантОтправкиНакладных
		, ОсновнойВариантОтправкиНакладных, ОсновнаяНастройка, УстаревшаяНастройка = Ложь)
		
		НоваяНастройка = Новый_НастройкаФорматаОтправки();
		
		НоваяНастройка.КлючНастройки					= КлючНастройки;
		НоваяНастройка.ВариантОтправкиСФ				= ВариантОтправкиСФ;
		НоваяНастройка.ВариантОтправкиНакладных		 	= ВариантОтправкиНакладных;
		НоваяНастройка.ОсновнойВариантОтправкиНакладных = ОсновнойВариантОтправкиНакладных;
		НоваяНастройка.ОсновнаяНастройка				= ОсновнаяНастройка;
		НоваяНастройка.УстаревшаяНастройка				= УстаревшаяНастройка;
		
		МассивНастроек.Добавить(НоваяНастройка);
		
	КонецПроцедуры
	
	// Заготовка для описания настройки формата отправки
	//
	// Возвращаемое значение:
	//	Структура со следующими ключами:
	//    * КлючНастройки                    - Строка - значение для записи в карточке организации или контрагента
	//                                                  в свойство "ФормироватьУПД" или "ФормироватьУПДКонтрагент";
	//    * ВариантОтправкиСФ                - Строка - см. функцию ВариантыОтправкиСчетовФактур;
	//    * ВариантОтправкиНакладных         - Строка - см. функцию НастройкиФорматаОтправкиНакладной;
	//    * ОсновнойВариантОтправкиНакладных - Булево - Истина, вариант отправки счета-фактуры,
	//                                                  автоматически заполняется формат отправки накладной;
	//    * ОсновнаяНастройка                - Булево - Истина, если настройка автоматически заполняется
	//                                                  в карточке новой сопоставленной организации;
	//    * УстаревшаяНастройка              - Булево - Истина, если настройка больше не отображается
	//                                                  в списке для выбора формата отправки
	//
	&НаКлиентеНаСервереБезКонтекста
	Функция Новый_НастройкаФорматаОтправки()
		
		Результат = Новый Структура;
		
		Результат.Вставить("КлючНастройки"						, "");
		Результат.Вставить("ВариантОтправкиСФ"					, "");
		Результат.Вставить("ВариантОтправкиНакладных"			, "");
		Результат.Вставить("ОсновнойВариантОтправкиНакладных"	, Ложь);
		Результат.Вставить("ОсновнаяНастройка"					, Ложь);
		Результат.Вставить("УстаревшаяНастройка"				, Ложь);
		
		Возврат Результат;
		
	КонецФункции
	
#Область ПРЕДСТАВЛЕНИЕ_НАСТРОЙКИ

	// Представление варианта отправки счетов-фактур, для списков выбора
	//
	// Параметры:
	//  КлючНастройки - Строка - см. функцию ВариантыОтправкиСчетовФактур;
	// 
	// Возвращаемое значение:
	//  Строка - представление настройки
	//
	&НаКлиенте
	Функция ПредставлениеВариантаОтправкиСчетовФактур(КлючНастройки) Экспорт
		
		Результат = Неопределено;
		
		Если Не ЗначениеЗаполнено(КлючНастройки) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Представления = ВсеПредставленияВариантовОтправкиСчетовФактур();
						
		Результат = Представления[КлючНастройки];
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			
			ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить представление формата отправки счетов-фактур %1!'"), КлючНастройки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция ВсеПредставленияВариантовОтправкиСчетовФактур()
		
		ВариантыОтправки = ВариантыОтправкиСчетовФактур();
		
		Представления = Новый Соответствие;
		
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ПОЛНЫЙ_820_736,
								НСтр("ru = 'УПД, УКД в формате 736 приказа для комплекта передаточных документов и счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_СФ_820_736,
								НСтр("ru = 'УПД, УКД в формате 736 приказа для счетов-фактур'"));						
								
		Представления.Вставить(	ВариантыОтправки.СФ_820_736,
								НСтр("ru = 'В формате 820 приказа (КСФ - в формате 736 приказа)'"));
										
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ПОЛНЫЙ_820,
								НСтр("ru = 'УПД, УКД в формате 189 приказа для комплекта передаточных документов и счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_СФ_820,
								НСтр("ru = 'УПД, УКД в формате 189 приказа для счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.СФ_820,
								НСтр("ru = 'В формате 820 приказа (КСФ - в формате 189 приказа)'"));
		
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ПОЛНЫЙ,
								НСтр("ru = 'УПД в формате 155 приказа, УКД для комплекта передаточных документов и счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_СФ,
								НСтр("ru = 'УПД в формате 155 приказа, УКД для счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.СФ_155,
								НСтр("ru = 'В формате 155 приказа (КСФ - в формате 189 приказа)'"));
								
		Представления.Вставить(	ВариантыОтправки.СФ_93,
								НСтр("ru = 'В формате 93 приказа'"));
								
		Возврат Представления;
		
	КонецФункции
	
	// Представление варианта отправки накладных и актов, для списков выбора
	//
	// Параметры:
	//  КлючНастройки - Строка - см. функцию ВариантыОтправкиНакладных;
	// 
	// Возвращаемое значение:
	//  Строка - представление настройки
	//
	&НаКлиенте
	Функция ПредставлениеВариантаОтправкиНакладных(КлючНастройки) Экспорт
		
		Результат = Неопределено;
		
		Если Не ЗначениеЗаполнено(КлючНастройки) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Представления = ВсеПредставленияВариантовОтправкиНакладных();
						
		Результат = Представления[КлючНастройки];
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			
			ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить представление формата отправки накладных %1!'"), КлючНастройки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция ВсеПредставленияВариантовОтправкиНакладных()
		
		ВариантыОтправки = ВариантыОтправкиНакладных();
		
		Представления = Новый Соответствие;
		
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ПОЛНЫЙ_820_736, 
								НСтр("ru = 'УПД, УКД в формате 736 приказа для комплекта передаточных документов и счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ТОРГ12АКТ_820_736,
								НСтр("ru = 'УПД, УКД в формате 736 приказа для передаточных документов'"));
		
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ПОЛНЫЙ_820, 
								НСтр("ru = 'УПД, УКД в формате 189 приказа для комплекта передаточных документов и счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ТОРГ12АКТ_820,
								НСтр("ru = 'УПД, УКД в формате 189 приказа для передаточных документов'"));
								
		Представления.Вставить(	ВариантыОтправки.ТОРГ12АКТ_820,
								НСтр("ru = 'В формате 820 приказа'"));
								
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ПОЛНЫЙ,
								НСтр("ru = 'УПД в формате 155 приказа, УКД для комплекта передаточных документов и счетов-фактур'"));
								
		Представления.Вставить(	ВариантыОтправки.УПД_УКД_ТОРГ12АКТ,
								НСтр("ru = 'УПД в формате 155 приказа, УКД для передаточных документов'"));
								
		Представления.Вставить(	ВариантыОтправки.ТОРГ12АКТ_155,
								НСтр("ru = 'В формате 155 приказа'"));
								
		Представления.Вставить(	ВариантыОтправки.ТОРГ12АКТ_172,
								НСтр("ru = 'В формате 172 приказа'"));
								
		Возврат Представления;
		
	КонецФункции

#КонецОбласти
	
#Область ПОИСК_НАСТРОЙКИ
	
	// Настройка формата отправки документов, для новой организации
	//
	// Возвращаемое значение:
	//  Строка - см. фукнцию НастройкиФорматаОтправкиДокументов
	//
	&НаКлиенте
	Функция НастройкаФорматаОтправкиДокументовПоУмолчанию() Экспорт
		
		МассивНастроек = МассивНастроекФорматовОтправки();
		
		ПараметрыПоиска = Новый Структура("ОсновнаяНастройка", Истина);
		МассивНастроек = НайтиСтрокиВМассивеСтруктур(МассивНастроек, ПараметрыПоиска);
		
		// При правильном заполнении массива настроек форматов отправки 
		// в массиве будет только один элемент
		Результат = МассивНастроек[0].КлючНастройки;
		
		Возврат Результат;
		
	КонецФункции
	
	// Вариант отправки счетов-фактур, в зависимости от настройки формата отправки документов
	//
	// Параметры:
	//  КлючНастройки - Строка - см. функцию НастройкиФорматаОтправкиДокументов;
	// 
	// Возвращаемое значение:
	//  Строка - см. фукнцию ВариантыОтправкиСчетовФактур
	//
	&НаКлиенте
	Функция ВариантОтправкиСчетовФактурПоКлючуНастройки(КлючНастройки) Экспорт
		
		Результат = Неопределено;
		
		Если Не ЗначениеЗаполнено(КлючНастройки) Тогда
			Возврат Результат;
		КонецЕсли;
						
		МассивНастроек	= МассивНастроекФорматовОтправки();
		ПараметрыПоиска = Новый Структура("КлючНастройки", КлючНастройки);
		
		МассивНайденных	= НайтиСтрокиВМассивеСтруктур(МассивНастроек, ПараметрыПоиска);
		
		Если НЕ ЗначениеЗаполнено(МассивНайденных) Тогда
			
			ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить настройку формата отправки счета-фактуры!
			|Формат отправки документов: %1'"), КлючНастройки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		// При правильном заполнении массива настроек форматов отправки 
		// в массиве будет только один элемент
		Результат = МассивНайденных[0].ВариантОтправкиСФ;
		
		Возврат Результат;
		
	КонецФункции
	
	// Вариант отправки накладных, в зависимости от настройки формата отправки документов
	//
	// Параметры:
	//  КлючНастройки - Строка - см. функцию НастройкиФорматаОтправкиДокументов;
	// 
	// Возвращаемое значение:
	//  Строка - см. фукнцию ВариантыОтправкиНакладных
	//
	&НаКлиенте
	Функция ВариантОтправкиНакладныхПоКлючуНастройки(КлючНастройки) Экспорт
		
		Результат = Неопределено;
		
		Если Не ЗначениеЗаполнено(КлючНастройки) Тогда
			Возврат Результат;
		КонецЕсли;
		
		МассивНастроек	= МассивНастроекФорматовОтправки();
		ПараметрыПоиска = Новый Структура("КлючНастройки", КлючНастройки);
		
		МассивНайденных	= НайтиСтрокиВМассивеСтруктур(МассивНастроек, ПараметрыПоиска);
		
		Если НЕ ЗначениеЗаполнено(МассивНайденных) Тогда
			
			ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить настройку формата отправки счета-фактуры!
			|Формат отправки документов: %1'"), КлючНастройки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		// При правильном заполнении массива настроек форматов отправки 
		// в массиве будет только один элемент
		Результат = МассивНайденных[0].ВариантОтправкиНакладных;
						
		Возврат Результат;
		
	КонецФункции
	
	// Вариант отправки накладных по умолчанию, в зависимости от варианта отправки счетов-фактур
	//
	// Параметры:
	//  ВариантОтправкиСФ - Строка - см. функцию ВариантыОтправкиСчетовФактур;
	//
	// Возвращаемое значение:
	//  Строка - см. фукнцию ВариантыОтправкиНакладных
	//
	&НаКлиенте
	Функция ВариантОтправкиНакладныхПоУмолчанию(ВариантОтправкиСФ) Экспорт
		
		Результат = Неопределено;
		
		Если Не ЗначениеЗаполнено(ВариантОтправкиСФ) Тогда
			Возврат Результат;
		КонецЕсли;
		
		МассивНастроек = МассивНастроекФорматовОтправки();
				
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВариантОтправкиСФ", ВариантОтправкиСФ);
		ПараметрыПоиска.Вставить("ОсновнойВариантОтправкиНакладных", Истина);
		
		МассивНайденных	= НайтиСтрокиВМассивеСтруктур(МассивНастроек, ПараметрыПоиска);
						
		Если Не ЗначениеЗаполнено(МассивНайденных) Тогда
			
			ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить настройку по умолчанию для формата отправки накладных %1!'"), ВариантОтправкиСФ);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		// При правильном заполнении массива настроек форматов отправки 
		// в массиве будет только один элемент
		Результат = МассивНайденных[0].ВариантОтправкиНакладных;
		
		Возврат Результат;
		
	КонецФункции
	
	// Настройка формата отправки документов, в зависимости от варианта отправки счетов-фактур и накладных
	//
	// Параметры:
	//  ВариантОтправкиСФ        - Строка - см. функцию ВариантыОтправкиСчетовФактур;
	//  ВариантОтправкиНакладных - Строка - см. функцию ВариантыОтправкиНакладных;
	// 
	// Возвращаемое значение:
	//  Строка - см. фукнцию НастройкиФорматаОтправкиДокументов
	//
	&НаКлиенте
	Функция НастройкаФорматаОтправкиДокументов(ВариантОтправкиСФ, ВариантОтправкиНакладных) Экспорт
		
		Результат = Неопределено;
		
		Если Не ЗначениеЗаполнено(ВариантОтправкиСФ)
			Или Не ЗначениеЗаполнено(ВариантОтправкиНакладных) Тогда
			Возврат Результат;
		КонецЕсли;
		
		МассивНастроек = МассивНастроекФорматовОтправки();
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВариантОтправкиСФ"		, ВариантОтправкиСФ);
		ПараметрыПоиска.Вставить("ВариантОтправкиНакладных"	, ВариантОтправкиНакладных);
		
		МассивНайденных	= НайтиСтрокиВМассивеСтруктур(МассивНастроек, ПараметрыПоиска);
					
		Если Не ЗначениеЗаполнено(МассивНайденных) Тогда
			
			ТекстОшибки = ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не удалось получить общую настройку формата отправки документов!
			|Формат отправки счетов-фактур: %1
			|Формат отправки накладных: %2'"), ВариантОтправкиСФ, ВариантОтправкиНакладных);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		// При правильном заполнении массива настроек форматов отправки 
		// в массиве будет только один элемент
		Результат = МассивНайденных[0].КлючНастройки;
						
		Возврат Результат;
		
	КонецФункции
	
#КонецОбласти

#Область ПОСТРОЕНИЕ_СПИСКОВ

	// Список для выбора вариантов отправки счетов-фактур,
	// в карточках организации и контрагента
	//
	// Возвращаемое значение:
	//  СписокЗначений - элемент списка содержит:
	//    * Значение      - Строка - см. функцию ВариантыОтправкиСчетовФактур;
	//    * Представление - Строка - см. функцию ПредставлениеВариантаОтправкиСчетовФактур;
	//
	&НаКлиенте
	Функция СписокВыбораВариантовОтправкиСчетовФактур() Экспорт
		
		Результат = Новый СписокЗначений;
		
		МассивНастроек = МассивНастроекФорматовОтправки();
				
		Для Каждого Настройка Из МассивНастроек Цикл
			
			ВариантОтправкиСФ	 = Настройка.ВариантОтправкиСФ;
			УстаревшаяНастройка	 = Настройка.УстаревшаяНастройка;
			
			Если Не УстаревшаяНастройка И Результат.НайтиПоЗначению(ВариантОтправкиСФ) = Неопределено Тогда
				
				ПредставлениеВарианта = ПредставлениеВариантаОтправкиСчетовФактур(ВариантОтправкиСФ);
				
				Результат.Добавить(ВариантОтправкиСФ, ПредставлениеВарианта);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Список для выбора вариантов отправки накладных,
	// в зависимости от варианта отправки счетов-фактур
	//
	// Параметры:
	//  ВариантОтправкиСФ - Строка - см. функцию ВариантыОтправкиСчетовФактур;
	//
	// Возвращаемое значение:
	//  СписокЗначений - элемент списка содержит:
	//    * Значение      - Строка - см. функцию ВариантыОтправкиНакладных;
	//    * Представление - Строка - см. функцию ПредставлениеВариантаОтправкиНакладных;
	//
	&НаКлиенте
	Функция СписокВыбораВариантовОтправкиНакладных(ВариантОтправкиСФ) Экспорт
		
		Результат = Новый СписокЗначений;
						
		МассивНастроек = МассивНастроекФорматовОтправки();
		
		Для Каждого Настройка Из МассивНастроек Цикл
			
			ВариантОтправкиНакладных = Настройка.ВариантОтправкиНакладных;
			
			Если Не Настройка.УстаревшаяНастройка
				И Настройка.ВариантОтправкиСФ = ВариантОтправкиСФ
				И Результат.НайтиПоЗначению(ВариантОтправкиНакладных) = Неопределено Тогда
				
				ПредставлениеВарианта = ПредставлениеВариантаОтправкиНакладных(ВариантОтправкиНакладных);
				
				Результат.Добавить(ВариантОтправкиНакладных, ПредставлениеВарианта);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ КОНТУР.МЕТРИКИ

#Область МЕТРИКИ

#Область Служебные_методы

	&НаКлиенте
	Функция ИспользоватьМетрики() Экспорт
					
		Результат = Объект.ПараметрыКлиентСервер.Метрики.ИспользоватьМетрики;
			
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОтключитьМетрики()
		
		Объект.ПараметрыКлиентСервер.Метрики.ИспользоватьМетрики = Ложь;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция Метрика_КлиентскиеСобытия()
		
		Результат = Новый Структура;
		
		Результат.Вставить("ОткрытаФорма"				, "Открыта форма");
		Результат.Вставить("ЗакрытаФорма"				, "Закрыта форма");
		Результат.Вставить("НажатаКнопка"				, "Нажать кнопку");
		Результат.Вставить("НажатаНадпись"				, "Нажать надпись");
		Результат.Вставить("УстановленФлаг"				, "Установить флаг");
		Результат.Вставить("СнятФлаг"					, "Снять флаг");
		Результат.Вставить("СменаСтраницы"				, "Сменить страницу");
		Результат.Вставить("ПолеВводаПриИзменении"		, "Измененить поле ввода");
		Результат.Вставить("ПолеВводаОчистка"			, "Очистить поле ввода");
		Результат.Вставить("ПолеВводаОткрытие"			, "Открытть из поля ввода");
		Результат.Вставить("ПолеВводаНачалоВыбора"		, "Начат выбор в поле ввода");
		Результат.Вставить("ПолеВводаОбработкаВыбора"	, "Обработать выбора в поле ввода");
		
		Возврат Результат;
		
	КонецФункции
	
	// Псевдо перечисление. Хранит наименование категорий событий метрики.
	//
	// Возвращаемое значение:
	//	Структура
	&НаКлиенте
	Функция Метрика_Категории() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("ИнициализацияМодуля"		, "Инициализация модуля");
		Результат.Вставить("НастройкиМодуля"			, "Настройки модуля");
		Результат.Вставить("НастройкиОтправки"			, "Настройки отправки");
		Результат.Вставить("СозданиеПНК"				, "Создание приходной накладной");
		Результат.Вставить("ОтражениеВУчете"			, "Отражение документа в учете");
		Результат.Вставить("УведомлениеОСменеФормата"	, "Уведомление о смене формата");
		Результат.Вставить("Техподдержка"				, "Техподдержка");
		Результат.Вставить("ЖурналДокументов"			, "Журнал документов");
		Результат.Вставить("ГрупповоеСоздание"			, "Создание групповой обработкой");
		Результат.Вставить("ОтправкаДокументов"			, "Отправка документов");
		
		Возврат Результат;
		
	КонецФункции // Метрика_Категории()
	
	&НаКлиенте
	Функция МаксимальныйРазмерСтека() Экспорт
		
		Результат = 100;
				
		Возврат Результат;
		
	КонецФункции
			
	// Топики, которые поддерживает Контур.Метрика.
	//
	// Возвращаемое значение:
	//   Структура
	//
	&НаКлиенте
	Функция ТопикиМетрики() Экспорт
		
		Результат = Новый Структура;
		
		Результат.Вставить("Behavior"	, "Behavior");	// Поведение
		Результат.Вставить("Log"		, "Log");		// Журнал
		Результат.Вставить("Health"		, "Health");	// Здоровье
		Результат.Вставить("Feedback"	, "Feedback");	// ОбратнаяСвязь
		Результат.Вставить("Statistics"	, "Statistics");// Статистика
		
		Возврат Результат;
		
	КонецФункции // ТопикиМетрики()
	
	// Форматирует строку версии по правилам семантического версионирования
	// https://semver.org/lang/ru/
	//
	// Параметры:
	//  Версия - Строка - версия, которую необходимо форматировать
	//
	// Возвращаемое значение:
	//  Строка - форматированная версия
	//
	&НаКлиенте
	Функция СемантическийФорматВерсии(Версия)
		
		СоставВерсии = РазделитьСтроку(СокрЛП(Версия), "./");
		
		Дополнение	 = "";
		ПустаяВерсия = "0";
		
		МажорнаяВерсия	 = СокрЛП(ЗначениеИзМассива(СоставВерсии, 0, ПустаяВерсия));
		МинорнаяВерсия	 = СокрЛП(ЗначениеИзМассива(СоставВерсии, 1, ПустаяВерсия));
		Исправление		 = СокрЛП(ЗначениеИзМассива(СоставВерсии, 2, ПустаяВерсия));
		
		МажорнаяВерсия	 = ТолькоЦифрыВСтрокеВерсии(МажорнаяВерсия, ПустаяВерсия);
		МинорнаяВерсия	 = ТолькоЦифрыВСтрокеВерсии(МинорнаяВерсия, ПустаяВерсия);
		Исправление		 = ТолькоЦифрыВСтрокеВерсии(Исправление, ПустаяВерсия);
		
		Для Сч = 3 По СоставВерсии.ВГраница() Цикл
			Дополнение = Дополнение + СтрЗаменить(СоставВерсии[Сч], " ", "");
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Дополнение) Тогда
			Результат = СтрШаблон("%1.%2.%3-%4", МажорнаяВерсия, МинорнаяВерсия, Исправление, Дополнение);
		Иначе
			Результат = СтрШаблон("%1.%2.%3", МажорнаяВерсия, МинорнаяВерсия, Исправление);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // СемантическийФорматВерсии()
	
	// Проверяет что версия содержит только цифры
	//
	// Параметры:
	//  Версия              - Строка - версия, которую нужно проверить
	//  ЗначениеПоУмолчанию - Строка - значение, которое нужно вернуть,
	//                                 если версия содержит не только цифры
	// 
	// Возвращаемое значение:
	//  Строка - значение входящего параметра Версия. ЗначениеПоУмолчанию если версия содержит не только цифры
	//
	&НаКлиенте
	Функция ТолькоЦифрыВСтрокеВерсии(Версия, ЗначениеПоУмолчанию)
		
		Результат = ЗначениеПоУмолчанию;
		
		Если ТолькоЦифрыВСтроке(Версия) Тогда
			Результат = Версия;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ТолькоЦифрыВСтрокеВерсии()
							
	// Преобразует дату по часовому поясу компьютера в универсальную
	// и затем приводит её к строке в формате ISO8601
	//
	// Параметры
	//  ДатаПоМестномуВремени - Дата - дата по часовому поясу компьютера
	//
	// Возвращаемое значение:
	//   Строка - дата строкой
	//
	&НаКлиенте
	Функция УниверсальнаяДатаВФормате_ISO8601(ДатаПоМестномуВремени)
		
		УниверсальнаяДата = УниверсальноеВремя(ДатаПоМестномуВремени);
		
		Результат = Формат(УниверсальнаяДата, "ДФ=yyyy-MM-ddTHH:mm:ss+00:00");
		
		Возврат Результат;
		
	КонецФункции
	
	// Мапит значение настроек в представление удобочитаемое в метриках
	//
	// Параметры:
	//	МассивОрганизаций	- Массив	- элементом массива является структура см. ОрганизацииДляЧтенияНастроек()
	//
	// Возвращаемое значение:
	//	Массив структур	- см. тело метода
	&НаСервере
	Функция НастройкиОрганизацийДляСтатистики(МассивОрганизаций)
		
		Результат = Новый Массив;
		
		Для каждого ЭлементМассива Из МассивОрганизаций Цикл
			
			ЗначенияНастроек = МетодСервера( , "НастройкиОрганизации", ЭлементМассива.Организация1С);
			
			Настройки = Новый Структура;
									
			Настройки.Вставить("ОтправлятьНеПроведенные"		, ЗначенияНастроек.ОтправлятьНеПроведенные = Истина);
			Настройки.Вставить("ПодставлятьКППГрузоотправителя"	, ЗначенияНастроек.ПодставлятьКППГрузоотправителя = Истина);
			
			Если ЗначениеЗаполнено(ЗначенияНастроек.ТекстКомментарияДиадок) Тогда
				Настройки.Вставить("ТекстКомментарияДиадок"		, ЗначенияНастроек.ТекстКомментарияДиадок);
			КонецЕсли;
			
			СчетНаОсновании_Значение 		= ЗначенияНастроек.ФормироватьСчетНаОсновании;
			СчетНаОсновании_Представление 	= ПредставлениеНастройки_ФормироватьСчетНаОсновании(СчетНаОсновании_Значение);
			Настройки.Вставить("ФормироватьСчетНаОсновании", СчетНаОсновании_Представление);
			
			ФормаСчетаНаОплату_Значение 		= ЗначенияНастроек.СтандартнаяФормаСчетаНаОплату;
			ФормаСчетаНаОплату_Представление 	= ПредставлениеНастройки_ФормаСчетаНаОплату(ФормаСчетаНаОплату_Значение);
			Настройки.Вставить("ФормаСчетаНаОплату", ФормаСчетаНаОплату_Представление);
									
			Настройки.Вставить("ФормироватьУПД", ЗначенияНастроек.ФормироватьУПД);
			
			Настройки.Вставить("УказыватьОтсутствиеОснованияУПД", ЗначенияНастроек.УказыватьОтсутствиеОснованияУПД);
			
			ЭлементРезультата = Новый Структура("BoxId, Настройки", ЭлементМассива.BoxId, Настройки);
			Результат.Добавить(ЭлементРезультата); 
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции // НастройкиОрганизацийДляСтатистики()
	
	// Возвращает представление настройки "ФормироватьСчетНаОсновании" по значению этой настройки
	//
	// Параметры: 
	//	ЗначениеНастройки	- Число, Неопределено	- значение настройки из БД
	//
	// Возвращаемое значение:
	//	Строка	
	&НаСервере
	Функция ПредставлениеНастройки_ФормироватьСчетНаОсновании(ЗначениеНастройки)
		
		КоллекцияПредставление = Новый Соответствие;
		
		КоллекцияПредставление.Вставить(0, "Счета на оплату");
		КоллекцияПредставление.Вставить(1, "Документов продажи");
		КоллекцияПредставление.Вставить(2, "Не формировать");
		КоллекцияПредставление.Вставить(4, "Заказа покупателя");
		
		Если НЕ ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			
			Результат = КоллекцияПредставление.Получить(0);
			
		Иначе
		
			Результат = КоллекцияПредставление.Получить(ЗначениеНастройки);
			
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			
			Результат = "Неизвесный идентификатор";
			
		КонецЕсли;
				
		Возврат Результат;
		
	КонецФункции // ПредставлениеНастройки_ФормироватьСчетНаОсновании()
	
	// Возвращает представление настройки "ФормаСчетаНаОплату" по значению этой настройки
	//
	// Параметры: 
	//	ЗначениеНастройки	- Строка, Неопределено	- значение настройки из БД
	//
	// Возвращаемое значение:
	//	Строка	
	&НаСервере
	Функция ПредставлениеНастройки_ФормаСчетаНаОплату(ЗначениеНастройки)
		
		Если ЗначениеНастройки = Неопределено
			ИЛИ ЗначениеНастройки = Истина Тогда
			
			Результат = "Стандартная";
			
		ИначеЕсли НЕ ЗначениеНастройки Тогда
			
			Результат = "Внешняя";
			
		Иначе
			
			Результат = "Неизвесный идентификатор";	
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПредставлениеНастройки_СтандартнаяФормаСчетаНаОплату()
	
	// Адрес, на который надо отправлять данные
	// для фиксации событий в сервисе Контур.Метрика.
	//
	//
	// Возвращаемое значение:
	//   Строка - адрес метода
	//
	&НаКлиенте
	Функция АдресМетодаМетрики(Топик)
		
		Результат = ПодставитьПараметрыВСтроку("/metrika-pipe/v1/sources/1CModule/topics/DD_%1/events", Топик);
		
		Возврат Результат;
		
	КонецФункции
		
	&НаКлиенте
	Функция АдресKonturAPI(ТестовыйСервер = Ложь)
	
		Возврат ?(ТестовыйСервер, "api.dev.kontur", "api.kontur.ru");
	
	КонецФункции
	
	// Возвращает из общего контекста
	// глобальный идентификатор группировки событий метрики
	//
	&НаКлиенте
	Функция TraceId()
		
		Результат = СвойствоСтруктуры(Объект.ПараметрыКлиентСервер.Метрики, "TraceId");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура TraceId_Обновить(Префикс)
		
		Если ИспользоватьМетрики() Тогда
			
			Результат = Префикс + "_" + Новый УникальныйИдентификатор;
									
			Объект.ПараметрыКлиентСервер.Метрики.TraceId = Результат;
						
		КонецЕсли;
					
	КонецПроцедуры
	
	&НаКлиенте
	Процедура TraceId_Сбросить()
		
		Объект.ПараметрыКлиентСервер.Метрики.TraceId = Неопределено;
					
	КонецПроцедуры
	
	&НаКлиенте
	Функция ОписаниеПеременыхДляМетрики(Переменные)
		
		Результат = Новый Соответствие;
		
		Для Каждого Элемент Из Переменные Цикл
			
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				
				ОписаниеЗначения = ОписаниеЗначенияДляМетрики(Элемент.Значение);
				
				Результат.Вставить(Элемент.Ключ, ОписаниеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ОписаниеЗначенияДляМетрики(Значение)
		
		ТипЗначения = ТипЗнч(Значение);
		
		Результат = Новый Структура("value, type");
		
		Если ТипЗначения = Тип("Число") Тогда
			
			Результат.type	 = "number";
			Результат.value	 = Формат(Значение, "ЧН=; ЧГ=");
			
		ИначеЕсли ТипЗначения = Тип("Строка") Тогда
			
			Результат.type	 = "string";
			Результат.value	 = Значение;
			
		ИначеЕсли ТипЗначения = Тип("УникальныйИдентификатор") Тогда
			
			Результат.type	 = "uuid";
			Результат.value	 = Строка(Значение);
			
		ИначеЕсли ТипЗначения = Тип("ДвоичныеДанные") Тогда
			
			Результат.type	 = "base64";
			Результат.value	 = Base64Строка(Значение);
			
		ИначеЕсли ТипЗначения = Тип("Булево") Тогда
			
			Результат.type	 = "string";
			Результат.value	 = Формат(Значение, "БЛ=False; БИ=True");
			
		ИначеЕсли ТипЗначения = Тип("Дата") Тогда
			
			Результат.type	 = "string";
			Результат.value	 = Формат(Значение, "ДФ='dd.MM.yyyy H:mm:ss'; ДП=");
			
		Иначе
			
			Попытка
				Результат.value	 = ЗначениеВСтрокуJSON(Значение);
				Результат.type	 = "string";
			Исключение
				Результат.value	 = "convert_error";
				Результат.type	 = "string";
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
#КонецОбласти

#Область Регистрация_поведения

	&НаКлиенте
	Процедура Метрика_ДобавитьПоведение_НажатиеКнопки(НазваниеФормы, НазваниеКатегории, НазваниеДействия) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = НазваниеКатегории;						
		Действие	 = НазваниеДействия;						
		Место		 = НазваниеФормы;							
		Событие		 = Метрика_КлиентскиеСобытия().НажатаКнопка;
		
		TraceId_Обновить(Место);
		
		Метрика_ЗаписатьПоведение(Категория, Действие, Место, Событие);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьПоведение_ПолеВводаПриИзменении(НазваниеФормы, НазваниеКатегории, НазваниеДействия) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	= НазваниеКатегории;
		Действие	= НазваниеДействия;
		Место		= НазваниеФормы;
		Событие		= Метрика_КлиентскиеСобытия().ПолеВводаПриИзменении;
		
		TraceId_Обновить(Место);
		
		Метрика_ЗаписатьПоведение(Категория, Действие, Место, Событие);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьПоведение_ПриИзмененииФлага(	НазваниеФормы,
															НазваниеКатегории, 
															НазваниеДействия, 
															ФлагУстановлен	) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	= НазваниеКатегории;
		Действие	= НазваниеДействия;
		Место		= НазваниеФормы;
		
		Если ФлагУстановлен Тогда
			Событие = Метрика_КлиентскиеСобытия().УстановленФлаг;
		Иначе
			Событие = Метрика_КлиентскиеСобытия().СнятФлаг;
		КонецЕсли;
				
		TraceId_Обновить(Место);
		
		Метрика_ЗаписатьПоведение(Категория, Действие, Место, Событие);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьПоведение_ПриСменеСтраницы(	НазваниеФормы,
															НазваниеКатегории, 
															НазваниеДействия	) Экспорт
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	= НазваниеКатегории;
		Действие	= НазваниеДействия;
		Место		= НазваниеФормы;
		Событие		= Метрика_КлиентскиеСобытия().СменаСтраницы;
		
		TraceId_Обновить(Место);
		
		Метрика_ЗаписатьПоведение(Категория, Действие, Место, Событие);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьПоведение_ДействиеСФормой(НазваниеФормы, НазваниеКатегории, НазваниеДействия) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = НазваниеКатегории;
		Действие	 = НазваниеДействия;
		Место		 = НазваниеФормы;
		
		TraceId_Обновить(Место);
		
		Метрика_ЗаписатьПоведение(Категория, Действие, Место);
		
	КонецПроцедуры

#КонецОбласти

#Область Регистрация_статистики

	&НаКлиенте
	Процедура Метрика_ДобавитьСтатистику_Авторизации(ДопПеременные = Неопределено) Экспорт
	
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = Метрика_Категории().ИнициализацияМодуля;
		Действие	 = "Авторизация";
		
		КлючРаработчика = НастройкиИнтернетПодключения().КлючРазработчика;
		
		МассивBoxId = Новый Массив;
			
		Для каждого ЭлементКонтекста Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			
			МассивBoxId.Добавить(ЭлементКонтекста.Box.Guid);
			
		КонецЦикла;
		
		Переменные = Новый Соответствие;
						
		Переменные.Вставить("BoxId"				, МассивBoxId);
		Переменные.Вставить("КоличествоBoxId"	, МассивBoxId.Количество());
		Переменные.Вставить("КлючРазработчика"	, КлючРаработчика);
		
		Если ЗначениеЗаполнено(ДопПеременные) Тогда
			
			Для каждого КлючЗначение Из ДопПеременные Цикл
				
				Переменные.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
			
		Метрика_ЗаписатьСтатистику(Категория, Действие, , Переменные, Истина);
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьСтатистику_НастройкиОрганизации(НазваниеДействия) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		МассивОрганизаций = Новый Массив;
		
		Для каждого ЭлементКонтекста Из Платформа.ПараметрыКлиент.КонтекстДиадока Цикл
			
			ЭлементМассива = Новый Структура;
			ЭлементМассива.Вставить("BoxId"			, ЭлементКонтекста.Box.Guid);
			ЭлементМассива.Вставить("Организация1С"	, ЭлементКонтекста.Организация);
			
			МассивОрганизаций.Добавить(ЭлементМассива);
			
		КонецЦикла;
		
		НастройкиОрганизации = НастройкиОрганизацийДляСтатистики(МассивОрганизаций);
		
		Категория	 = Метрика_Категории().НастройкиОтправки;
		Действие	 = НазваниеДействия;
					
		Для Каждого ЭлементКоллекции Из НастройкиОрганизации Цикл
			
			Переменные = Новый Соответствие;
			Переменные.Вставить("BoxId"		, ЭлементКоллекции.BoxId);
			Переменные.Вставить("Настройки"	, ЭлементКоллекции.Настройки);
						
			Метрика_ЗаписатьСтатистику(Категория, Действие, , Переменные, Истина);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьСтатистику_СоздатьПриходнуюНакладную(ДопПеременные) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = Метрика_Категории().СозданиеПНК;
		Действие	 = "Создать документ";
		
		Метрика_ЗаписатьСтатистику(Категория, Действие, , ДопПеременные, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьСтатистику_СоздатьДокумент(ДопПеременные) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = Метрика_Категории().ОтражениеВУчете;
		Действие	 = "Отразить документ";
		
		Метрика_ЗаписатьСтатистику(Категория, Действие, , ДопПеременные, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьСтатистику_ВыбратьДокумент(ДопПеременные) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = Метрика_Категории().ОтражениеВУчете;
		Действие	 = "Выбрать документ";
		
		Метрика_ЗаписатьСтатистику(Категория, Действие, , ДопПеременные, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьСтатистику_ГрупповоеСозданиеДокументов(НазваниеДействия, ДопПеременные) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = Метрика_Категории().ГрупповоеСоздание;
		Действие	 = НазваниеДействия;
		
		Метрика_ЗаписатьСтатистику(Категория, Действие, , ДопПеременные, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Метрика_ДобавитьСтатистику_ОтменитьСопоставление(ДопПеременные) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Категория	 = Метрика_Категории().ОтражениеВУчете;
		Действие	 = "Отменить сопоставление с документом 1С";
		
		Метрика_ЗаписатьСтатистику(Категория, Действие, , ДопПеременные, Истина);
		
	КонецПроцедуры
	
#КонецОбласти
			
#Область Базовые_методы_регистрации

	// Записывает событие метрики в топик "Behavior"
	//
	// Параметры:
	//  Категория  - Строка - категория события;
	//  Действие   - Строка - выполняемое действие;
	//  Место      - Строка - место возникновения события;
	//  Событие    - Строка - описание события;
	//  Переменные - Структура, Соответствие - произвольная информация;
	//  TraceID    - Строка         - локальный идентификатор группы событий;
	//             - Неопределено   - использовать общий идентификатор группы событий,
	//                                см. функцию TraceId();
	//  ДобавитьСистемнуюИнформацию - Булево - Истина, если вместе с событием
	//                                         нужно отправить описание окружения;
	//
	&НаКлиенте
	Процедура Метрика_ЗаписатьПоведение(Категория, Действие
		, Место		 = Неопределено
		, Событие	 = Неопределено
		, Переменные = Неопределено
		, ДобавитьСистемнуюИнформацию = Истина
		, TraceID	 = Неопределено) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Если TraceID = Неопределено Тогда
			TraceID = TraceId();
		КонецЕсли;
		
		Behavior 		= ТопикиМетрики().Behavior;
		СобытиеМетрики 	= НовоеСобытиеМетрики(Категория, Действие, Событие, Место);
		
		ЗарегистрироватьСобытиеМетрики(Behavior, СобытиеМетрики, TraceID, Переменные, ДобавитьСистемнуюИнформацию);
				
	КонецПроцедуры
	
	// Записывает событие метрики в топик "Statistics"
	//
	// Параметры:
	//  Категория  - Строка - категория события;
	//  Действие   - Строка - выполняемое действие;
	//  Событие    - Строка - описание события;
	//  Переменные - Структура, Соответствие - произвольная информация;
	//  TraceID    - Строка         - локальный идентификатор группы событий;
	//             - Неопределено   - использовать общий идентификатор группы событий,
	//                                см. функцию TraceId();
	//  ДобавитьСистемнуюИнформацию - Булево - Истина, если вместе с событием
	//                                         нужно отправить описание окружения;
	//
	&НаКлиенте
	Процедура Метрика_ЗаписатьСтатистику(Категория, Действие
		, Событие	 = Неопределено
		, Переменные = Неопределено
		, ДобавитьСистемнуюИнформацию = Истина
		, TraceID	 = Неопределено) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Если TraceID = Неопределено Тогда
			TraceID = TraceId();
		КонецЕсли;
		
		Statistics 		= ТопикиМетрики().Statistics;
		СобытиеМетрики 	= НовоеСобытиеМетрики(Категория, Действие, Событие);
						
		ЗарегистрироватьСобытиеМетрики(Statistics, СобытиеМетрики, TraceID, Переменные, ДобавитьСистемнуюИнформацию);
		
	КонецПроцедуры
	
	// Записывает событие метрики в топик "Log"
	//
	// Параметры:
	//  Категория  - Строка - категория события;
	//  Действие   - Строка - выполняемое действие;
	//  Событие    - Строка - описание события;
	//  Переменные - Структура, Соответствие - произвольная информация;
	//  ДобавитьСистемнуюИнформацию - Булево - Истина, если вместе с событием
	//                                         нужно отправить описание окружения;
	//  TraceID    - Строка         - локальный идентификатор группы событий;
	//             - Неопределено   - использовать общий идентификатор группы событий,
	//                                см. функцию TraceId();
	//
	&НаКлиенте
	Процедура Метрика_ЗаписатьЛог(Категория, Действие
		, Событие	 = Неопределено
		, Переменные = Неопределено
		, TraceID	 = Неопределено
		, ДобавитьСистемнуюИнформацию = Истина) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Если TraceID = Неопределено Тогда
			TraceID = TraceId();
		КонецЕсли;
		
		Log 			= ТопикиМетрики().Log;
		СобытиеМетрики 	= НовоеСобытиеМетрики(Категория, Действие, Событие);
		
		ЗарегистрироватьСобытиеМетрики(Log, СобытиеМетрики, TraceID, Переменные, ДобавитьСистемнуюИнформацию);
		
	КонецПроцедуры
	
	// Записывает событие метрики в топик "Health"
	//
	// Параметры:
	//  Категория  - Строка - категория события;
	//  Действие   - Строка - выполняемое действие;
	//  Событие    - Строка - описание события;
	//  Переменные - Структура, Соответствие - произвольная информация;
	//  ДобавитьСистемнуюИнформацию - Булево - Истина, если вместе с событием
	//                                         нужно отправить описание окружения;
	//  TraceID    - Строка         - локальный идентификатор группы событий;
	//             - Неопределено   - использовать общий идентификатор группы событий,
	//                                см. функцию TraceId();
	//
	&НаКлиенте
	Процедура Метрика_ЗаписатьЗамер(Категория, Действие
		, Место		 = Неопределено
		, Событие	 = Неопределено
		, Переменные = Неопределено
		, ДобавитьСистемнуюИнформацию = Истина
		, TraceID	 = Неопределено) Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		Если TraceID = Неопределено Тогда
			TraceID = TraceId();
		КонецЕсли;
		
		Health 			= ТопикиМетрики().Health;
		СобытиеМетрики 	= НовоеСобытиеМетрики(Категория, Действие, Событие, Место);
		
		ЗарегистрироватьСобытиеМетрики(Health, СобытиеМетрики, TraceID, Переменные, ДобавитьСистемнуюИнформацию);
		
	КонецПроцедуры
	
	// Добавляет событие в стек событий.
	//
	// Параметры:
	//  Топик          - Строка    - топик, к которому относится событие.
	//  СобытиеМетрики - Структура - см. функцию Метрика_НовыйСобытие()
	//  TraceID        - Строка    - идентификатор трассировки
	//  Переменные     - Структура - произвольная информация
	//  ДобавитьСистемнуюИнформацию - Булево - Истина, если в метрику нужно
	//                                         добавить описание окружения.
	//
	&НаКлиенте
	Процедура ЗарегистрироватьСобытиеМетрики(Топик, СобытиеМетрики
		, TraceID	 = Неопределено
		, Переменные = Неопределено
		, ДобавитьСистемнуюИнформацию = Ложь)
		
		ОписаниеПеременных = Неопределено;
		ОписаниеПриложения = Неопределено;
		
		Если ДобавитьСистемнуюИнформацию Тогда
			ОписаниеПриложения = МетодКлиента("Модуль_Клиент", "ОписаниеПриложения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Переменные) Тогда
			ОписаниеПеременных = ОписаниеПеременыхДляМетрики(Переменные);
		КонецЕсли;
		
		Метрика = НоваяМетрика(СобытиеМетрики, TraceID, ОписаниеПеременных, ОписаниеПриложения);
		
		РазмерСтека = ПоместитьСобытиеМетрикиВСтекСобытий(Топик, Метрика);
		
		Если РазмерСтека >= МаксимальныйРазмерСтека() Тогда
			Метрики_Отправить();
		КонецЕсли;
		
	КонецПроцедуры
	
#КонецОбласти

#Область Конструкторы_объектов_метрики

	&НаКлиенте
	Функция НовоеСобытиеМетрики(Категория, Действие
		, Метка			 = Неопределено
		, Представление	 = Неопределено)
		
		Результат = Новый Структура;
		
		Результат.Вставить("Category"	, Категория);
		Результат.Вставить("Action"		, Действие);
		
		Если ЗначениеЗаполнено(Метка) Тогда
			Результат.Вставить("Label", Метка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Представление) Тогда
			Результат.Вставить("View", Представление);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НоваяМетрика(СобытиеМетрики
		, TraceID			 = Неопределено
		, ОписаниеПеременных = Неопределено
		, ОписаниеПриложения = Неопределено)
		
		МоментВремени = НовыйМоментВремениМетрики();
		
		Результат = Новый Структура;
		
		Результат.Вставить("Path", СобытиеМетрики);
		Результат.Вставить("Time", МоментВремени);
		
		Если ЗначениеЗаполнено(ОписаниеПриложения) Тогда
			Результат.Вставить("AppContext", ОписаниеПриложения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеПеременных) Тогда
			Результат.Вставить("Variables", ОписаниеПеременных);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(TraceID) Тогда
			Результат.Вставить("TraceID", Строка(TraceID));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НовыйСтекСобытийМетрики()
		
		Топики = Новый Структура;
						
		Для Каждого Элемент Из ТопикиМетрики() Цикл
			Топики.Вставить(Элемент.Ключ, Новый Массив);
		КонецЦикла;
		
		Результат = Новый Структура;
		Результат.Вставить("Топики", Топики);
		Результат.Вставить("РазмерСтека", 0);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НовыйМоментВремениМетрики()
		
		ТекущаяДатаКомпьютера	 = ТекущаяДата();
		УниверсальнаяДатаСтрокой = УниверсальнаяДатаВФормате_ISO8601(ТекущаяДатаКомпьютера);
		
		Результат = Новый Структура;
		Результат.Вставить("ClientTime"			, УниверсальнаяДатаСтрокой);
		Результат.Вставить("SendFromClientTime"	, УниверсальнаяДатаСтрокой);
		
		Возврат Результат;
		
	КонецФункции
	
	// Конструктор описания системной информации
	//
	// Возвращаемое значение:
	//	Структура
	&НаКлиенте
	Функция НовоеОписаниеПриложения(ВерсияМодуля
		, ОписаниеОС						 = Неопределено
		, ОписаниеБраузера					 = Неопределено
		, ОписаниеПрограммы					 = Неопределено
		, ОписаниеАппаратноогоОбеспечения	 = Неопределено)
		
		Результат = Новый Структура;
		
		Результат.Вставить("AppVersion", ВерсияМодуля);
		
		Если ЗначениеЗаполнено(ОписаниеОС) Тогда
			Результат.Вставить("OS", ОписаниеОС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеБраузера) Тогда
			Результат.Вставить("Browser", ОписаниеБраузера);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеПрограммы) Тогда
			Результат.Вставить("Platform", ОписаниеПрограммы);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеАппаратноогоОбеспечения) Тогда
			Результат.Вставить("Hardware", ОписаниеАппаратноогоОбеспечения);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // НовоеОписаниеПриложения()
	
	&НаКлиенте
	Функция НоваяСессияМетрики(CustomSessionId)
	
		Результат = Новый Структура;
		
		Результат.Вставить("CustomSessionId", CustomSessionId);
		
		Возврат Результат;
		
	КонецФункции
	
#КонецОбласти

#Область Описание_окружения

	// Формирует описание технических характеристик компьютера
	// Возвращаемое значение:
	//	Структура
	&НаКлиенте
	Функция ОписаниеСистемнойИнформации()
		
		Результат = Новый Структура;
		
		Результат.Вставить("ВерсияОС");
		Результат.Вставить("ВерсияПриложения");
		Результат.Вставить("ИдентификаторКлиента");
		Результат.Вставить("ИнформацияПрограммыПросмотра ");
		Результат.Вставить("ОперативнаяПамять");
		Результат.Вставить("Процессор");
		Результат.Вставить("ТипПлатформы");
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		ЗаполнитьЗначенияСвойств(Результат, СистемнаяИнформация);
		
		Возврат Результат;
		
	КонецФункции // ОписаниеСистемнойИнформации()

	&НаКлиенте
	Функция ОписаниеПриложения() Экспорт
		
		ВерсияМодуля		 = Метрики_ВерсияИнтеграционногоМодуля();
		ОписаниеОС			 = ОписаниеОС();
		ОписаниеБраузера	 = ОписаниеБраузера();
		ОписаниеПрограммы	 = ОписаниеПрограммы();
		ОписаниеАппаратноогоОбеспечения = ОписаниеАппаратноогоОбеспечения();
			
		Результат = НовоеОписаниеПриложения(ВерсияМодуля
					, ОписаниеОС
					, ОписаниеБраузера
					, ОписаниеПрограммы
					, ОписаниеАппаратноогоОбеспечения);
						
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Метрики_ВерсияИнтеграционногоМодуля()
		
		Результат = МетодКлиента("Модуль_Клиент", "ТехническаяИнформация").ВерсияМодуля;
		
		Результат = СемантическийФорматВерсии(Результат);
		
		Возврат Результат;
		
	КонецФункции
	
	// Формирует описание операционной системы
	//
	// Возвращаемое значение:
	//	Структура
	&НаКлиенте
	Функция ОписаниеОС()
		
		СтрокаТипПлатформы = НРег(ОписаниеСистемнойИнформации().ТипПлатформы);
		
		Если Найти(СтрокаТипПлатформы, "64") > 0 Тогда
			BitSet = "x64";
		Иначе
			BitSet = "x86";
		КонецЕсли;
		
		Если Найти(СтрокаТипПлатформы, НРег("Linux")) <> 0 Тогда
			Name = "Linux";
		ИначеЕсли Найти(СтрокаТипПлатформы, НРег("MacOS")) <> 0 Тогда
			Name = "MacOS";
		ИначеЕсли Найти(СтрокаТипПлатформы, НРег("Windows")) <> 0 Тогда
			Name = "Windows";
		Иначе
			Name = "NoName";
		КонецЕсли;
		
		Version = "0.0.0"; // С версией какие-то авантюры нужны
		
		Результат = Новый Структура;
		Результат.Вставить("BitSet"	, BitSet);
		Результат.Вставить("Name"	, Name);
		Результат.Вставить("Version", Version);
		
		Возврат Результат;
		
	КонецФункции // ОписаниеОС()
	
	// Формирует описание конфигурации и платформы 1С
	//
	// Возвращаемое значение:
	//	Структура
	&НаКлиенте
	Функция ОписаниеПрограммы()
		
		ОписаниеКофигурации = ОписаниеКофигурации();
		
		Name	 = "1С:Предприятие 8";
		RunMode	 = Строка(ТекущийРежимЗапуска());
		Version	 = СемантическийФорматВерсии(ОписаниеСистемнойИнформации().ВерсияПриложения);
		
		Configuration		 = ОписаниеКофигурации.Имя;
		ConfigurationVersion = СемантическийФорматВерсии(ОписаниеКофигурации.Версия);
		
		Результат = Новый Структура;
		Результат.Вставить("Name"	, Name);
		Результат.Вставить("RunMode", RunMode);
		Результат.Вставить("Version", Version);
		
		Результат.Вставить("Configuration"			, Configuration);
		Результат.Вставить("ConfigurationVersion"	, ConfigurationVersion);
		
		Возврат Результат;
		
	КонецФункции // ОписаниеПрограммы()
			
	&НаСервереБезКонтекста
	Функция ОписаниеКофигурации()
		
		Результат = Новый Структура;
		Результат.Вставить("Имя"	, Метаданные.Имя);
		Результат.Вставить("Версия"	, Метаданные.Версия);
		
		Возврат Результат;
		
	КонецФункции
	
	// Формирует описание веб-браузера
	//
	// Возвращаемое значение:
	//	Структура
	&НаКлиенте
	Функция ОписаниеБраузера()
		
		Результат = Новый Структура;
		
		UserAgent = ОписаниеСистемнойИнформации().ИнформацияПрограммыПросмотра;
		
		Если ЗначениеЗаполнено(UserAgent) Тогда
			Результат.Вставить("UserAgent", UserAgent);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ОписаниеБраузера()
	
	// Формирует описание характеристик оборудования
	//
	// Возвращаемое значение:
	//	Структура	
	&НаКлиенте
	Функция ОписаниеАппаратноогоОбеспечения()
		
		Делитель = 1000;
		
		TotalMemoryGb = Окр(ОписаниеСистемнойИнформации().ОперативнаяПамять / Делитель);
		
		Результат = Новый Структура;
		Результат.Вставить("TotalMemoryGb", TotalMemoryGb);
		
		Возврат Результат; 
		
	КонецФункции // ОписаниеАппаратноогоОбеспечения()
	
#КонецОбласти
	
#Область Отправка_накопленных_событий_метрики

	// Отправляет все накопленные события сервера в сервис Контур.Метрика
	// и очищает стек событий.
	//
	&НаКлиенте
	Процедура Метрики_Отправить() Экспорт
		
		Если Не ИспользоватьМетрики() Тогда
			Возврат;
		КонецЕсли;
		
		СтекСобытий = СтекСобытийМетрики();
						
		Если СтекСобытий.РазмерСтека = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УдалосьОтправить = Метрика_ОтправитьСтекСобытий(СтекСобытий);
		Если Не УдалосьОтправить Тогда
			ОтключитьМетрики();
		КонецЕсли;
		
		ОчиститьСтекСобытийМетрики();
		
	КонецПроцедуры
	
	// Отправляет стек событий в сервис Контур.Метрика
	//
	// Параметры:
	//  СтекСобытий	- Структура - см. функцию НовыйСтекСобытийМетрики();
	//
	// Возвращаемое значение:
	//   Булево - Истина, если удалось отправить все события стека.
	//
	&НаКлиенте
	Функция Метрика_ОтправитьСтекСобытий(СтекСобытий) Экспорт
		
		Результат = Ложь;
		
		Если ИспользоватьМетрики() Тогда
			
			ДобавитьИдентификаторыВСобытияМетрики(СтекСобытий);
								
			Результат = ОтправитьСтекСобытийМетрики(СтекСобытий);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Добавляет в события стека необходимые идентификаторы сессии и клиента.
	//
	// Параметры:
	//  СтекСобытий - Структура - см. функцию НовыйСтекСобытийМетрики()
	//
	&НаКлиенте
	Процедура ДобавитьИдентификаторыВСобытияМетрики(СтекСобытий)
		
		ПараметрыСессии = ПараметрыСессии();
		
		Для каждого Элемент Из СтекСобытий.Топики Цикл
			
			МассивСобытий = Элемент.Значение;
			
			Для каждого СобытиеМетрики Из МассивСобытий Цикл
				
				Id = Строка(Новый УникальныйИдентификатор);
				
				СобытиеМетрики.Вставить("Id"				, Id);
				СобытиеМетрики.Вставить("Session"			, ПараметрыСессии.Session);
				СобытиеМетрики.Вставить("ClientInstanceId"	, ПараметрыСессии.ClientInstanceId);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецПроцедуры
		
	// Отправляет стек событий в сервис Контур.Метрика
	//
	// Параметры:
	//  СтекСобытий - Структура - см. функцию НовыйСтекСобытийМетрики()
	//
	// Возвращаемое значение:
	//   Булево - Истина, если удалось отправить все события стека.
	//
	&НаКлиенте
	Функция ОтправитьСтекСобытийМетрики(СтекСобытий)
		
		Отказ = Ложь;
		
		Для каждого Элемент Из СтекСобытий.Топики Цикл
			
			Топик			 = Элемент.Ключ;
			МассивСобытий	 = Элемент.Значение;
			
			Если ЗначениеЗаполнено(МассивСобытий) Тогда
				
				Попытка
					
					ОтправитьМассивСобытийТопикаМетрики(МассивСобытий, Топик);
					
				Исключение
					
					ВидОперации	 = НСтр("ru = 'Отправка данных в сервис Контур.Метрика'");
					ТектОшибки	 = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					ЗаписатьВЛог(ВидОперации, ТектОшибки);
					
					Отказ = Истина;
					
					Прервать;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Не Отказ;
		
		Возврат Результат;
		
	КонецФункции
	
	// Отправляет массив событий в сервис Контур.Метрика
	//
	// Параметры:
	//  МассивСобытий - Массив - содержит структуры, см. функцию НоваяМетрика();
	//  Топик         - Строка - топик, в который надо отправить событие;
	//
	&НаКлиенте
	Процедура ОтправитьМассивСобытийТопикаМетрики(МассивСобытий, Топик)
		
		Попытка
			
			ОтправитьСобытияМетрики(МассивСобытий, Топик);
						
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если МассивСобытий.Количество() > 1 Тогда
				
				// Одним пакетом события отправить не удалось,
				// поэтому попробуем их отправить по одному.
				
				Для Каждого СобытиеМетрики Из МассивСобытий Цикл
					
					ОтправитьСобытияМетрики(СобытиеМетрики, Топик);
					
				КонецЦикла;
				
			Иначе
				
				ВызватьИсключение;
				
			КонецЕсли;
			
		КонецПопытки;
		
	КонецПроцедуры
	
	// Отправляет одно или несколько событий в сервис Контур.Метрика.
	//
	// Параметры:
	//  События - Массив, Структура - см. функцию НоваяМетрика();
	//  Топик   - Строка - топик, в который надо отправить событие;
	//
	&НаКлиенте
	Процедура ОтправитьСобытияМетрики(События, Топик)
		
		ОтправляемыеСобытия = ЗначениеВМассив(События);
		
		АдресМетода		 = АдресМетодаМетрики(Топик);
		АдресВебСервиса	 = ПараметрыСервиса_Контур().АдресВебСервиса;
		АдресМетода		 = "https://" + АдресВебСервиса + АдресМетода;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept"			, "application/json");
		Заголовки.Вставить("Content-Type"	, "application/json;charset=utf-8");
		
		Запись			 = Новый ЗаписьJSON;
		ПараметрыЗаписи	 = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
		Запись.УстановитьСтроку(ПараметрыЗаписи);
		
		ЗаписатьJSON(Запись, ОтправляемыеСобытия);
		
		ТелоЗапроса = Запись.Закрыть();
		
		Ответ = Компонента_HttpTransport(АдресМетода, Заголовки, , ТелоЗапроса, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПараметрыСессии()
	
		Результат = КэшМетрики_Прочитать("ПараметрыСессииДляМетрики");
		
		Если Результат = Неопределено Тогда
			
			ИдентификаторКлиента = ПолучитьИдентификаторКлиентаНаСервере();
			ИдентификаторСессии	 = Строка(ЭтаФорма.УникальныйИдентификатор);
			
			Результат = Новый Структура;
			Результат.Вставить("Session"			, НоваяСессияМетрики(ИдентификаторСессии));
			Результат.Вставить("ClientInstanceId"	, ИдентификаторКлиента);
			
			КэшМетрики_Поместить("ПараметрыСессииДляМетрики", Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
		
	&НаСервереБезКонтекста
	Функция ПолучитьИдентификаторКлиентаНаСервере()
		
		Возврат Строка(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
		
	КонецФункции
	
	&НаКлиенте
	Функция ПараметрыСервиса_Контур(BoxId = Неопределено, ИспользоватьСлужебнуюУчетнуюЗапись = Ложь)
	
		Результат = Новый Структура;
		
		АдресВебСервиса = АдресKonturAPI();
		
		Результат.Вставить("АдресВебСервиса", АдресВебСервиса);
		
		Возврат Результат;
		
	КонецФункции
	
#КонецОбласти			
		
#Область Стек_Метрики
				
	// Возвращает значение из специального кэша
	//
	// Параметры:
	//  Ключ - Строка - см. процедуру КэшМетрики_Поместить.
	//
	// Возвращаемое значение: 
	//   Произвольный - см. процедуру КэшМетрики_Поместить.
	//
	&НаКлиенте
	Функция КэшМетрики_Прочитать(Ключ) Экспорт
		
		Результат = Неопределено;
		
		Если ЗначениеЗаполнено(КэшМетрики_Клиент) Тогда
			Результат = КэшМетрики_Клиент.Получить(Ключ);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	// Помещает значение в специальный кэш
	//
	// Параметры:
	//  Ключ     - Строка       - уникальный ключ помещаемого значения.
	//  Значение - Произвольный - помещаемое значение.
	//
	&НаКлиенте
	Процедура КэшМетрики_Поместить(Ключ, Значение) Экспорт
		
		Если КэшМетрики_Клиент = Неопределено Тогда
			КэшМетрики_Клиент = Новый Соответствие;
		КонецЕсли;
		
		КэшМетрики_Клиент.Вставить(Ключ, Значение);
		
	КонецПроцедуры
	
	// Помещает событие в стек для дальнейшей отправки
	//
	// Параметры:
	//  Топик   - Строка       - топик, к которому относится метрика.
	//  Метрика - Соответствие - метрика с событием.
	//
	// Возвращаемое значение:
	//   Число - количество событий, помещенных в стек.
	//
	&НаКлиенте
	Функция ПоместитьСобытиеМетрикиВСтекСобытий(Топик, Метрика)
		
		СтекСобытий		= СтекСобытийМетрики();
		МассивСобытий	= СтекСобытий.Топики[Топик];
		
		МассивСобытий.Добавить(Метрика);
		
		СтекСобытий.РазмерСтека = СтекСобытий.РазмерСтека + 1;
		
		Результат = СтекСобытий.РазмерСтека;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция СтекСобытийМетрики()
		
		Результат = КэшМетрики_Прочитать("СтекСобытийМетрикиНаКлиенте");
		
		Если Результат = Неопределено Тогда
			
			Результат = НовыйСтекСобытийМетрики();
			
			КэшМетрики_Поместить("СтекСобытийМетрикиНаКлиенте", Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОчиститьСтекСобытийМетрики()
		
		СтекСобытий = СтекСобытийМетрики();
		
		Для Каждого Элемент Из СтекСобытий.Топики Цикл
			
			Топик			 = Элемент.Ключ;
			МассивСобытий	 = СтекСобытий.Топики[Топик];
			
			МассивСобытий.Очистить();
			
		КонецЦикла;
		
		СтекСобытий.РазмерСтека = 0;
					
	КонецПроцедуры
	
#КонецОбласти
	

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//} КОНТУР.МЕТРИКИ


// Хранит ссылки вызываемые ресурсы
//
// Возвращаемое значение:
//	Структура	
&НаКлиенте
Функция АдресаИнтернетРесурсов() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтраницаСменыПароля",					 "https://auth.kontur.ru/recover");
	Результат.Вставить("СправкаУстановкаСертификата",			 "https://www.kontur-extern.ru/support/faq/34/62");
	Результат.Вставить("ПортальнаяАвторизация",					 "https://auth.kontur.ru/");
	Результат.Вставить("СтраницаДиагностики",					 "https://help.kontur.ru/diadoc");
	Результат.Вставить("ОнлайнКонсультант",						 "https://api.kontur.ru/chat-widget");
	Результат.Вставить("УдаленноеПодключение",					 "https://help.kontur.ru/vnc");
	Результат.Вставить("СтраницаКонтурВзаиморасчеты",			 "https://kontur.ru/akt-sverki");
	Результат.Вставить("АдресСервисаДиадок",					 "diadoc-api.kontur.ru");
	Результат.Вставить("СтраницаФайловВнешнейКомпоненты",		 "https://diadoc-api.kontur.ru/1c-addin");
	Результат.Вставить("ЗаказатьОбратныйЗвонок",				 "https://www.diadoc.ru/support#callback");
	Результат.Вставить("ПриказОбУтвержденииФормата820",			 "https://normativ.kontur.ru/document?moduleId=1&documentId=328588");
	Результат.Вставить("Инструкция_РуководствоПользователя",	 "https://wiki.diadoc.ru/pages/viewpage.action?pageId=7668802");
	Результат.Вставить("Инструкция_ПараметрыОтправки",			 "https://wiki.diadoc.ru/pages/viewpage.action?pageId=7668836");
	Результат.Вставить("Инструкция_ПереотправкаДокументов",		 "https://wiki.diadoc.ru/pages/viewpage.action?pageId=7668876");
	Результат.Вставить("Инструкция_НетДокументовНаОтправку",	 "https://wiki.diadoc.ru/pages/viewpage.action?pageId=12879083");
	Результат.Вставить("Инструкция_ЗаполнитьОснованиеПередачи",	 "https://wiki.diadoc.ru/pages/viewpage.action?pageId=19105636");
	Результат.Вставить("Инструкция_ЗаполнитьГТД",				 "https://wiki.diadoc.ru/pages/viewpage.action?pageId=25330170");
	Результат.Вставить("Инструкция_ФормаВводаНакладной",		 "https://wiki.diadoc.ru/pages/viewpage.action?pageId=25330746");
	Результат.Вставить("Инструкция_ИспользоватьСервисКонтурМаркировка", "https://wiki.diadoc.ru/pages/viewpage.action?pageId=25331126");
	Результат.Вставить("Инструкция_ЗаполнитьДолжностьСотрудника","https://wiki.diadoc.ru/pages/viewpage.action?pageId=1146885");
	
	Возврат Результат;
	
КонецФункции

#Область Устаревшие

	// Устарела. Следует использовать ЭтоФормализованныйФормат.
	//
	&НаКлиенте
	Функция ЭтоФормализованныйДокумент(DocumentType) Экспорт
		
		Возврат
		
			DocumentType = "XmlTorg12"
		ИЛИ DocumentType = "XmlAcceptanceCertificate"
		ИЛИ DocumentType = "UniversalTransferDocument"
		ИЛИ DocumentType = "UtdInvoice"
		ИЛИ DocumentType = "UtdTorg12"
		ИЛИ DocumentType = "UtdAcceptanceCertificate"
		ИЛИ DocumentType = "UniversalCorrectionDocument"
		ИЛИ DocumentType = "UniversalTransferDocumentRevision"
		ИЛИ DocumentType = "UniversalCorrectionDocumentRevision"
		ИЛИ DocumentType = "TovTorg"
		ИЛИ DocumentType = "Act552"
		ИЛИ ЛЕВ(DocumentType, 7) = "Invoice";
		
	КонецФункции

#КонецОбласти

	МаксимальноеКоличествоЗаданий = 10;

#КонецЕсли