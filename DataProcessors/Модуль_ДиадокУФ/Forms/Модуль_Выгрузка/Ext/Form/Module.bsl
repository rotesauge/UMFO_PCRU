#Если ВебКлиент Тогда

ВызватьИсключение НСтр("ru = 'Недопустимый режим работы (Веб-клиент).'");

#Иначе

&НаКлиенте
Перем СтруктураИндентификаторовСвойств;

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт, Манифест Экспорт;

&НаКлиенте
Перем НомерИтерацииВызоваМодуля;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL)
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект()
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура Инициализировать(ИмяМодуля) Экспорт
	
	Если НомерИтерацииВызоваМодуля = Неопределено Тогда
		НомерИтерацииВызоваМодуля= 0;
	КонецЕсли;
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля + 1;
	
	Если Манифест = Неопределено Тогда
		Платформа.ЗаполнитьМанифест(ЭтаФорма, ИмяМодуля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеременные() Экспорт
	
	// Разрывается циклическая ссылка, для того чтобы исключить утечку памяти.
	// Модуль может быть вызван повторно во вложенных методах,
	// поэтому очищаем переменные, ТОЛЬКО если это начальная итерация вызова модуля.
	
	НомерИтерацииВызоваМодуля= НомерИтерацииВызоваМодуля - 1;
	
	Если НомерИтерацииВызоваМодуля = 0 Тогда
		Платформа= 					  Неопределено;
		Объект.ПараметрыКлиентСервер= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МАНИФЕСТ

&НаКлиенте
Функция ФункцииМодуля() Экспорт
	
	Результат = Новый Структура;
	
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьИдентификаторОтправленнойВПФ");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьПорядковыйНомерВнешнейПечатнойФормы");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВернутьТаблицуОтношенийОрганизацииКонтрагентов");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЗаполнитьКонтентДляInvoiceCorrection");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЗаполнитьКонтентДляInvoice");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ЗаполнитьКонтентДляXmlTorg12");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ПолучитьЗаполненныйPackageSendTask");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ВыполнитьАсинхроннуюОтправкуПакета");
	Платформа.ДобавитьФункциюВМанифест(Результат, "PackageSendTask_В_Соответствие");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ОписаниеФорматаДляОтправкиФайла");
	Платформа.ДобавитьФункциюВМанифест(Результат, "ДанныеПодписанта");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТЕЛО_МОДУЛЯ

&НаКлиенте
Функция Base64СтрокаИзДвоичныхДанных(ДвоичныеДанные)
	
	Результат = Base64Строка(ДвоичныеДанные);
	Результат = СтрЗаменить(Результат, Символы.ВК, "");
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = ",")
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка, Сред(РазделителиСлов, Сч, 1), Символы.ПС);
	КонецЦикла;
	
	Для Сч = 1 По СтрЧислоСтрок(Строка) Цикл
		
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка, Сч));
		Если ТекСлово <> "" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

&НаСервере
Функция СтруктураФИО(ФИО)
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия"	, "");
	Результат.Вставить("Имя"		, "");
	Результат.Вставить("Отчество"	, "");
	
	МассивФИО = РазложитьСтрокуВМассивСлов(ФИО, " ");
	Разделитель = "";
	
	Для Сч = 0 По МассивФИО.ВГраница() Цикл
		
		ЧастьФИО = МассивФИО[Сч];
		
		Если Сч = 0 Тогда
			
			Результат.Фамилия = ЧастьФИО;
			
		ИначеЕсли Сч = 1 Тогда
			
			Результат.Имя = ЧастьФИО;
			
		Иначе
			
			Результат.Имя = Результат.Отчество + Разделитель + ЧастьФИО;
			Разделитель = " ";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
Конецфункции

&НаСервере
Функция Новый_ExtendedSigner() Экспорт
	
	// http://diadocsdk-1c.readthedocs.io/ru/latest/ExtendedSigner.html
	
	Результат = Новый Структура;
	
	Результат.Вставить("BoxId");
	Результат.Вставить("CertificateThumbprint");
	
	Результат.Вставить("SignerDetails", Новый_ExtendedSignerDetails());
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Новый_ExtendedSignerDetails() Экспорт
	
	// http://diadocsdk-1c.readthedocs.io/ru/latest/ExtendedSignerDetails.html
	
	Результат = Новый Структура;
	
	Результат.Вставить("Status");
	Результат.Вставить("SignerType");
	Результат.Вставить("SignerInfo");
	
	Результат.Вставить("Surname");
	Результат.Вставить("FirstName");
	Результат.Вставить("Patronymic");
	
	Результат.Вставить("JobTitle");
	
	Результат.Вставить("Inn");
	Результат.Вставить("OrganizationName");
	Результат.Вставить("RegistrationCertificate");
	
	Результат.Вставить("Powers");
	Результат.Вставить("PowersBase");
	Результат.Вставить("OrganizationPowersBase");
	
	Возврат Результат; 
	
КонецФункции

// Проверяет, обязательно ли документы в указанном формате отправлять с
// помощью устаревшей версии PackageSendTask.
//
// Параметры:
//  ФорматОтправки - Структура - содержит ключи:
//    * ТипКонтента
//    * ИмяТипа
//    * ВерсияФормата
//    * ФункцияДокумента
// 
// Возвращаемое значение:
//  Булево - Истина, если формат отправляется только через PackageSendTask.
//
&НаКлиенте
Функция МожноИспользоватьТолькоУстаревшуюВерсиюPackageSendTask(ФорматОтправки)
	
	Результат = Ложь;
	
	ТипыКонтента = ТипыКонтентаНаКлиенте();
	ТипКонтента = ФорматОтправки.ТипКонтента;
	
	Если ТипКонтента = ТипыКонтента.AcceptanceCertificateSellerContent
		Или ТипКонтента = ТипыКонтента.Torg12SellerContent
		Или ТипКонтента = ТипыКонтента.InvoiceContent
		Или ТипКонтента = ТипыКонтента.InvoiceCorrectionContent Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, обязательно ли документы в указанном формате отправлять с
// помощью актуальной версии PackageSendTask.
//
// Параметры:
//  ФорматОтправки - Структура - содержит ключи:
//    * ТипКонтента
//    * ИмяТипа
//    * ВерсияФормата
//    * ФункцияДокумента
// 
// Возвращаемое значение:
//  Булево - Истина, если формат отправляется только через PackageSendTask2.
//
&НаКлиенте
Функция МожноИспользоватьТолькоАктуальнуюВерсиюPackageSendTask(ФорматОтправки)
	
	Результат = Ложь;
	
	ТипыКонтента = ТипыКонтентаНаКлиенте();
	ТипКонтента = ФорматОтправки.ТипКонтента;
	
	Если ТипКонтента = ТипыКонтента.Utd820SellerContent Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет, нужно ли для отправки пакета использовть устаревший механизм.
// Используется для "мягкого" перехода на новую механику отправки документов.
// Проверка выполняется по форматам документов пакета.
// Если пакет включает форматы документов, требующих разные 
// версии PackageSendTask, генерируется исключение.
//
// Параметры:
//  КоллекцияДокументовДляОтправки - Массив - содержит структуры с описаниями документов пакета.
// 
// Возвращаемое значение:
//  Булево - Истина, если нужно использовать устаревшую версию PackageSendTask (https://diadocsdk-1c.readthedocs.io/ru/latest/PackageSendTask.html)
//  		 Ложь, если можно использовать актуальную версию PackageSendTask (https://diadocsdk-1c.readthedocs.io/ru/latest/PackageSendTask2.html)
//
&НаКлиенте
Функция ИспользоватьУстаревшийМеханизмОтправки(КоллекцияДокументовДляОтправки)
	
	СтарыйМеханизмОтправки	 = Ложь;
	НовыйМеханизмОтправки	 = Ложь;
	
	Для Каждого ДокументПакета Из КоллекцияДокументовДляОтправки Цикл
		
		ФорматОтправки = ДокументПакета.ФорматОтправки;
		
		Если МожноИспользоватьТолькоУстаревшуюВерсиюPackageSendTask(ФорматОтправки) Тогда
			СтарыйМеханизмОтправки = Истина;
		КонецЕсли;
		
		Если МожноИспользоватьТолькоАктуальнуюВерсиюPackageSendTask(ФорматОтправки) Тогда
			НовыйМеханизмОтправки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтарыйМеханизмОтправки И НовыйМеханизмОтправки Тогда
		
		// Форматы документов пакета несовместимы
		ВызватьИсключение НСтр("ru = 'Документы, включенные в пакет, требуют разные версии PackageSendTask'");
		
	ИначеЕсли СтарыйМеханизмОтправки И Не НовыйМеханизмОтправки Тогда
		
		// Есть документы, которые можно отправить только устаревшим способом
		Результат = Истина;
		
	ИначеЕсли Не СтарыйМеханизмОтправки И НовыйМеханизмОтправки Тогда
		
		// Есть документы, которые можно отправить только актуальным способом
		Результат = Ложь;
		
	Иначе
		
		// Документы пакета можно отправлять любым способом
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМетуЭлектронногоДокумента(CustomDocumentToSend, Мета)
	
	Если Не ЗначениеЗаполнено(Мета) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Мета Цикл
		
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Item = CustomDocumentToSend.AddMetadata();
		Item.Key	 = Элемент.Ключ;
		Item.Value	 = XMLСтрока(Элемент.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеФорматаДляОтправкиФайла(ТипДокумента) Экспорт
	
	ИмяТипа = ТипДокумента;
	Если ИмяТипа = "NonformalizedProforma" Тогда
		ИмяТипа = "ProformaInvoice";
	КонецЕсли;
	
	Результат = МетодКлиента("Модуль_Клиент", "ОписаниеФорматаЭлектронногоДокумента"
					, ИмяТипа
					, "default"
					, "v1");
	
	Возврат Результат;
	
КонецФункции

// Добавляет новый элемент в коллекцию DocumentsToSend и возвращает его
//
// Параметры:
//  PackageSendTask		 - COMОбъект - https://diadocsdk-1c.readthedocs.io/ru/latest/ComObjects/PackageSendTask2.html
//  ДокументПакета		 - Структура - описание документа
//  ОбщиеПараметрыОтправки - Структура - 
// 
// Возвращаемое значение:
//  COMОбъект - соответствует объекту CustomDocumentToSend (https://diadocsdk-1c.readthedocs.io/ru/latest/ComObjects/CustomDocumentToSend.html)
//
&НаКлиенте
Функция НовыйДокументПакета(PackageSendTask, ДокументПакета, ОбщиеПараметрыОтправки)
	
	ИмяФайлаВложения = Неопределено;
	
	ПараметрыДокумента = ПараметрыДокумента(ДокументПакета, ОбщиеПараметрыОтправки);
	
	ФорматОтправки = ПараметрыДокумента.ФорматОтправки;
	
	Если Не ЗначениеЗаполнено(ФорматОтправки)
		И ПараметрыДокумента.ЭтоФайл Тогда
		
		ФорматОтправки = ОписаниеФорматаДляОтправкиФайла(ПараметрыДокумента.DocumentType);
		
	КонецЕсли;
	
	Мета = Новый Структура;
	
	Если ПараметрыДокумента.ЭтоФайл Тогда
		
		СвойстваФайла	 = ПараметрыДокумента.СвойстваФайла;
		ДанныеФайла		 = ПараметрыДокумента.ДанныеФайла;
		
		Файл = Новый Файл(СвойстваФайла.ПолноеИмя);
		
		ИмяФайлаВложения = Файл.Имя;
		
		Если СвойстваФайла.Свойство("Имя") Тогда
			ИмяФайлаВложения = СвойстваФайла.Имя;
		ИначеЕсли ДанныеФайла.Свойство("FileName") Тогда
			ИмяФайлаВложения = ДанныеФайла.FileName;
		КонецЕсли;
		
		// Имя файла
		Мета.Вставить("FileName", ИмяФайлаВложения);
		
		// Дата документа
		Мета.Вставить("DocumentDate", СвойствоСтруктуры(ДанныеФайла, "DocumentDate"));
		
		// Номер документа
		Мета.Вставить("DocumentNumber", СвойствоСтруктуры(ДанныеФайла, "DocumentNumber"));
		
		// Основания
		Мета.Вставить("Grounds", СвойствоСтруктуры(ДанныеФайла, "Grounds"));
		
		// Сумма документа
		Мета.Вставить("TotalSum", СвойствоСтруктуры(ДанныеФайла, "Total"));
		
		// Сумма налога
		Если Не СвойствоСтруктуры(ДанныеФайла, "БезНДС", Ложь) Тогда
			Мета.Вставить("TotalVat", СвойствоСтруктуры(ДанныеФайла, "Vat"));
		КонецЕсли;
		
		// Цена контракта
		Если Не СвойствоСтруктуры(ДанныеФайла, "ЦенаНеУказана", Ложь) Тогда
			Мета.Вставить("ContractPrice", СвойствоСтруктуры(ДанныеФайла, "ContractPrice"));
		КонецЕсли;
		
		// Срок действия прайс-листа
		Мета.Вставить("PriceListEffectiveDate", СвойствоСтруктуры(ДанныеФайла, "PriceListEffectiveDate"));
		
		// Номер договора
		Мета.Вставить("ContractDocumentNumber", СвойствоСтруктуры(ДанныеФайла, "ContractDocumentNumber"));
		
		// Дата договора
		Мета.Вставить("ContractDocumentDate", СвойствоСтруктуры(ДанныеФайла, "ContractDocumentDate"));
		
		// Тип договора
		Мета.Вставить("ContractType", СвойствоСтруктуры(ДанныеФайла, "ContractType"));
		
		Результат = ДобавитьФайлВЗаданиеДляОтправки(PackageSendTask, Файл, ФорматОтправки);
		
		Если ДанныеФайла.Свойство("NeedRecipientSignature") Тогда
			Результат.NeedRecipientSignature = ДанныеФайла.NeedRecipientSignature;
		КонецЕсли;
		
		Если ДанныеФайла.Свойство("Comment") Тогда
			Результат.Comment = ДанныеФайла.Comment;
		КонецЕсли;
		
	Иначе
		
		СтруктураТитула = СформироватьТитулДокумента(ФорматОтправки, ПараметрыДокумента, ОбщиеПараметрыОтправки);
		
		ВызватьИсключениеПриОшибкеВалидации(ДокументПакета, СтруктураТитула.СписокОшибок);
		
		Файл = СтруктураТитула.ФайлТитула;
		
		Результат = ДобавитьФайлВЗаданиеДляОтправки(PackageSendTask, Файл, ФорматОтправки);
		
	КонецЕсли;
	
	ЗаполнитьМетуЭлектронногоДокумента(Результат, Мета);
	
	Возврат Результат;
	
КонецФункции

// Добавляет новый элемент в коллекцию DocumentsToSend и возвращает его
//
// Параметры:
//  PackageSendTask		 - COMОбъект - https://diadocsdk-1c.readthedocs.io/ru/latest/ComObjects/PackageSendTask2.html
//  ДокументПакета		 - Структура - описание документа
//  ОбщиеПараметрыОтправки - Структура - 
//  Organization		 - COMОбъект - https://diadocsdk-1c.readthedocs.io/ru/latest/ComObjects/Organization.html
// 
// Возвращаемое значение:
//  COMОбъект - соответствует объекту, производному от DocumentToSend (https://diadocsdk-1c.readthedocs.io/ru/latest/ComObjects/DocumentToSend.html)
//
&НаКлиенте
Функция НовыйДокументПакетаУстаревшейВерсии(PackageSendTask, ДокументПакета, ОбщиеПараметрыОтправки, Organization)
	
	ПараметрыДокумента = ПараметрыДокумента(ДокументПакета, ОбщиеПараметрыОтправки);
	
	ФорматОтправки = ПараметрыДокумента.ФорматОтправки;
	
	Если Не ЗначениеЗаполнено(ФорматОтправки)
		И ПараметрыДокумента.ЭтоФайл Тогда
		
		ФорматОтправки = ОписаниеФорматаДляОтправкиФайла(ПараметрыДокумента.DocumentType);
		
	КонецЕсли;
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	ИмяТипа = ФорматОтправки.ИмяТипа;
	БазовыйФормат = ФорматОтправки.БазовыйФормат;
	
	ФИОПодписанта	 = ОбщиеПараметрыОтправки.ФИОПодписанта;
	
	Если ПараметрыДокумента.ЭтоФайл Тогда
		
		DocumentToSend = DocumentToSend_ИзФайла(PackageSendTask, ПараметрыДокумента);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd820
		Или БазовыйФормат = БазовыеФорматы.utd
		Или БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		СтруктураТитула = СформироватьТитулДокумента(ФорматОтправки, ПараметрыДокумента, ОбщиеПараметрыОтправки);
		
		ВызватьИсключениеПриОшибкеВалидации(ДокументПакета, СтруктураТитула.СписокОшибок);
		
		DocumentToSend = ДобавитьФайлВСообщение(PackageSendTask, СтруктураТитула.ФайлТитула, ИмяТипа);
		
	Иначе
		
		Если ИмяТипа = "InvoiceRevision" Тогда
			ПрефиксИмениСтруктуры = "Invoice";
		ИначеЕсли ИмяТипа = "InvoiceCorrectionRevision" Тогда
			ПрефиксИмениСтруктуры = "InvoiceCorrection";
		Иначе
			ПрефиксИмениСтруктуры = ИмяТипа;
		КонецЕсли;
		
		ИмяСтруктурыДанных = ПрефиксИмениСтруктуры + "Content";
		
		СтруктураДанныеСервера = ДанныеДляDocumentToSendНаСервере(ФорматОтправки
			, ПараметрыДокумента
			, ОбщиеПараметрыОтправки
			, ФИОПодписанта);
		
		ВызватьИсключениеПриОшибкеВалидации(ДокументПакета, СтруктураДанныеСервера.СписокОшибок);
		
		DocumentToSend = DocumentToSend_Formalized_Универсальный(PackageSendTask
			, ИмяТипа
			, СтруктураДанныеСервера[ИмяСтруктурыДанных]
			, ИмяСтруктурыДанных);
		
		МетодКлиента("Модуль_Клиент", "ЗаполнитьПодписанта", DocumentToSend.Content, Organization);
		
		Если ФорматОтправки.ЭтоКорректировка
			Или ФорматОтправки.ЭтоИсправление Тогда
			ПараметрыДокумента.ЭтоКорректировкаИсправление = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат DocumentToSend;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗаполненныйPackageSendTask(Знач ПараметрыPackageSendTask, СоответствиеCustomIdСсылке1С) Экспорт
	
	//Параметры общие для всего пакета
	Organization			 = ПараметрыPackageSendTask.Organization;
	CounteragentId			 = ПараметрыPackageSendTask.CounteragentId;
	ReceiverDepartmentId	 = ПараметрыPackageSendTask.ReceiverDepartmentId;
	МассивДокументовПакета	 = ПараметрыPackageSendTask.МассивДокументовПакета;
	ПараметрыСогласования	 = ПараметрыPackageSendTask.ПараметрыОтправкиНаСогласование;
	ЭтоПереотправка			 = ПараметрыPackageSendTask.ЭтоПереотправка;
	
	ДанныеСотрудника = МетодКлиента("Модуль_РаботаССерверомДиадок"
		, "ДанныеКонтекстаДиадок"
		, Organization.Id
		, "ДанныеСотрудника");
	
	ОбщиеПараметрыОтправки = Новый Структура;
	ОбщиеПараметрыОтправки.Вставить("Отправитель_FnsParticipantId"		, Organization.FnsParticipantId);
	ОбщиеПараметрыОтправки.Вставить("Получатель_FnsParticipantId"		, ПараметрыPackageSendTask.FnsParticipantIdПолучателя);
	ОбщиеПараметрыОтправки.Вставить("ПараметрыОтправкиНаСогласование"	, ПараметрыСогласования); 
	ОбщиеПараметрыОтправки.Вставить("BoxId"								, Organization.Id);
	ОбщиеПараметрыОтправки.Вставить("ФИОПодписанта"						, ПараметрыPackageSendTask.ФИОПодписанта);
	ОбщиеПараметрыОтправки.Вставить("ЭтоПереотправка"					, ПараметрыPackageSendTask.ЭтоПереотправка);
	ОбщиеПараметрыОтправки.Вставить("УказыватьОтсутствиеОснованияУПД"	, МетодСервера(, "ПолучитьЗначениеСвойства", ПараметрыPackageSendTask.Организация, "ДиадокУказыватьОтсутствиеОснованияУПД",, Ложь));
	ОбщиеПараметрыОтправки.Вставить("РежимСовместимостиФорматов155и820"	, Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РежимСовместимостиФорматов155и820);
	ОбщиеПараметрыОтправки.Вставить("ИспользоватьСервисКонтурМаркировка", Объект.ПараметрыКлиентСервер.ИспользоватьСервисКонтурМаркировка);
	ОбщиеПараметрыОтправки.Вставить("ДанныеСотрудника", ДанныеСотрудника);
	
	СоответствиеCustomIdСсылке1СТекущегоПакета = Новый Соответствие;
	
	ИспользоватьУстаревшийМеханизмОтправки = ИспользоватьУстаревшийМеханизмОтправки(МассивДокументовПакета);
	
	Если ИспользоватьУстаревшийМеханизмОтправки Тогда
		PackageSendTask = Organization.CreatePackageSendTask();
	Иначе
		PackageSendTask = Organization.CreatePackageSendTask2();
	КонецЕсли;
	
	PackageSendTask.CounteragentId = CounteragentId;
	PackageSendTask.ToDepartmentId = ReceiverDepartmentId;
	PackageSendTask.DelaySend	   = (ПараметрыСогласования <> Неопределено);
	
	//Формируем коллекцию DocumentsToSend 
	Для каждого ДокументПакета из МассивДокументовПакета Цикл
		
		ПараметрыДокумента = ПараметрыДокумента(ДокументПакета, ОбщиеПараметрыОтправки);
		
		Если ИспользоватьУстаревшийМеханизмОтправки Тогда
			DocumentToSend = НовыйДокументПакетаУстаревшейВерсии(PackageSendTask, ДокументПакета, ОбщиеПараметрыОтправки, Organization);
		Иначе
			DocumentToSend = НовыйДокументПакета(PackageSendTask, ДокументПакета, ОбщиеПараметрыОтправки);
		КонецЕсли;
		
		CustomDocumentId = СформироватьCustomDocumentId(ДокументПакета.Документ,
														ПараметрыДокумента.ВнешняяПечатнаяФорма,
														ПараметрыДокумента.DocumentType,
														СоответствиеCustomIdСсылке1С,
														СоответствиеCustomIdСсылке1СТекущегоПакета,
														ЭтоПереотправка);
		
		DocumentToSend.CustomDocumentId = CustomDocumentId;
		ДокументПакета.CustomDocumentId = CustomDocumentId;
		
		ДобавитьЗаписьВСоответствиеCustomIdСсылке1С(СоответствиеCustomIdСсылке1СТекущегоПакета, CustomDocumentId, ПараметрыДокумента);
		
		Комментарий = МетодСервера(,"ОбработкаСобытияПодключаемогоМодуля", "КомментарийDocumentToSend", ПараметрыДокумента);
		Если ЗначениеЗаполнено(Комментарий) Тогда // Если в ПМ комментарий переопределили, то используем его
			DocumentToSend.Comment = Комментарий;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСвязиДляДокументовПакета(PackageSendTask, СоответствиеCustomIdСсылке1СТекущегоПакета);
	
	ЗаполнитьИдентификаторОперацииПакета(PackageSendTask);
	
	ДобавитьСертификатыДляШифрованияПакета(PackageSendTask, ПараметрыPackageSendTask);
	
	// Создаем описание отправляемого пакета
	ПараметрыПакета = ОписаниеПакета(ПараметрыPackageSendTask);
	
	// Вызываем событие ПМ
	ПередОтправкойPackageSendTask(PackageSendTask, ПараметрыПакета, ИспользоватьУстаревшийМеханизмОтправки);
	
	МетодКлиента("Модуль_Клиент", "ДополнитьСтруктуруСоответствие", СоответствиеCustomIdСсылке1С, СоответствиеCustomIdСсылке1СТекущегоПакета);
	
	Результат = Новый Структура;
	Результат.Вставить("PackageSendTask", PackageSendTask);
	Результат.Вставить("Organization", Organization);
	
	Возврат Результат;
	
КонецФункции

// Вызывает исключение при ошибках валидации. В текст исключения передается
// список ошибок в формате HTML, который генерируется механизмом валидации.
// Вызывается непосредственно перед отправкой документов на сервер Диадок,
// чтобы прервать отправку пакета.
//
// Параметры:
//  ДокументПакета	 - Структура, ДанныеФормыЭлементКоллекции - структура или строка списка на отправку;
//  СписокОшибок	 - Строка - описание ошибок валидации в формате HTML;
//
&НаКлиенте
Процедура ВызватьИсключениеПриОшибкеВалидации(ДокументПакета, СписокОшибок)
	
	Если Не ЗначениеЗаполнено(СписокОшибок) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументПакета) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		// Массовая отправка из "Форма_Выгрузка"
		ДокументПакета.ОшибкаВалидации = СписокОшибок;
		
	ИначеЕсли ТипЗнч(ДокументПакета) = Тип("Структура") Тогда
		
		// Единичная отправка из "ФормаДокумента"
		ДокументПакета.Вставить("ОшибкаВалидации", СписокОшибок);
		
	Иначе
		
		ВызватьИсключение "Внутренняя ошибка модуля";
		
	КонецЕсли;
	
	ВызватьИсключение СписокОшибок;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляDocumentToSendНаСервере(ФорматОтправки, СтруктураДокументПакета, ОбщиеПараметрыОтправки, ФИОПодписанта)
	
	БазовыеФорматы = БазовыеФорматыНаСервере();
	
	БазовыйФормат = ФорматОтправки.БазовыйФормат;
	ДокументСсылка = СтруктураДокументПакета.ДокументСсылка;
	
	ДополнительныеПараметры = МетодСервера(, "ДополнительныеПараметрыПолученияКонтента");
	ДополнительныеПараметры.ДополнительныеСведенияСтрокой = СтруктураДокументПакета.ДопСведения;
	ДополнительныеПараметры.ПараметрыФормированияФайла = МетодСервера("ГенерацияXML", "XML_ПараметрыФормированияФайла");
	
	Если ЗначениеЗаполнено(ОбщиеПараметрыОтправки) Тогда
		
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ОбщиеПараметрыОтправки);
		ДополнительныеПараметры.ПараметрыСогласования = ОбщиеПараметрыОтправки.ПараметрыОтправкиНаСогласование;
		
	КонецЕсли;
	
	Протоконтент = МетодСервера(,
		"КонтентФормализованногоДокумента",
		ДокументСсылка,
		ФорматОтправки,
		ДополнительныеПараметры
	);
	
	ДанныеДляDocumentToSend = Новый Структура;
	
	Если БазовыйФормат = БазовыеФорматы.torg12 Тогда
		
		СписокОшибок = МетодСервера(,"ВалидацияXmlTorg12Content", Протоконтент);
		
		ДанныеДляDocumentToSend.Вставить("XmlTorg12Content", 	Протоконтент);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок", 		СписокОшибок);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.act Тогда
		
		СписокОшибок = МетодСервера(,"ВалидацияXmlAcceptanceCertificateContent", Протоконтент);
		
		ДанныеДляDocumentToSend.Вставить("XmlAcceptanceCertificateContent", 	Протоконтент);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок", 						СписокОшибок);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd Тогда
		
		СписокОшибок = МетодСервера(, "ВалидацияUTD", Протоконтент);
		
		ДанныеДляDocumentToSend.Вставить("СтруктураUTD", Протоконтент);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок", СписокОшибок);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		СписокОшибок = МетодСервера(, "ВалидацияUCD", Протоконтент);
		
		ДанныеДляDocumentToSend.Вставить("СтруктураUCD", Протоконтент);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок", СписокОшибок);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.invoicecor Тогда
				
		СписокОшибок = МетодСервера(, "ВалидацияInvoiceCorrectionContent", Протоконтент, ДокументСсылка);
		
		ДанныеДляDocumentToSend.Вставить("InvoiceCorrectionContent",	Протоконтент);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок",				СписокОшибок);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.invoice Тогда
		
		СписокОшибок = МетодСервера(,"ВалидацияInvoiceContent", Протоконтент, ДокументСсылка);
		
		ДанныеДляDocumentToSend.Вставить("InvoiceContent",	Протоконтент);
		ДанныеДляDocumentToSend.Вставить("СписокОшибок",	СписокОшибок);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Неизвестный формат (%1)!", БазовыйФормат);
		
	КонецЕсли;
	
	Возврат ДанныеДляDocumentToSend; 
	
КонецФункции

&НаКлиенте
Функция СформироватьТитулДокумента(ФорматОтправки, ПараметрыДокумента, ОбщиеПараметрыОтправки)
	
	БазовыйФормат = ФорматОтправки.БазовыйФормат;
	
	ПолномочияПодписанта = Неопределено; // TODO: Запрос полномочий подписанта, данных сотрудника и данных организации нужно перенести выше по стеку
	
	ЭтоПередачаНаПодписьИлиСогласование = ЗначениеЗаполнено(ОбщиеПараметрыОтправки.ПараметрыОтправкиНаСогласование);
	
	Если ТребуетсяЗаполнениеРасширенныхСведенийОПодписанте(БазовыйФормат)
		И Не ЭтоПередачаНаПодписьИлиСогласование Тогда
		
		ПолномочияПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта", ОбщиеПараметрыОтправки.BoxId, БазовыйФормат, Истина);
		Если Не ЗначениеЗаполнено(ПолномочияПодписанта) Тогда
			ТекстОшибки = НСтр("ru = 'Для сертификата, которым подписано сообщение, не настроены параметры подписи.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", ОбщиеПараметрыОтправки.BoxId, "ДанныеОрганизации");
	
	Результат = СформироватьТитулДокументаНаСервере(ФорматОтправки
		, ПараметрыДокумента
		, ОбщиеПараметрыОтправки
		, ДанныеОрганизации
		, ПолномочияПодписанта);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТребуетсяЗаполнениеРасширенныхСведенийОПодписанте(БазовыйФормат)
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	Результат = Ложь;
	
	Если 	БазовыйФормат = БазовыеФорматы.utd820
		Или БазовыйФормат = БазовыеФорматы.utd
		Или БазовыйФормат = БазовыеФорматы.ucd
		Или БазовыйФормат = БазовыеФорматы.ucd736
		Или БазовыйФормат = БазовыеФорматы.tovtorg
		Или БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьТитулДокументаНаСервере(ФорматОтправки
	, ПараметрыДокумента, ОбщиеПараметрыОтправки
	, ДанныеОрганизации
	, ПолномочияПодписанта)
	
	ДополнительныеПараметры = МетодСервера(, "ДополнительныеПараметрыПолученияКонтента");
	ДополнительныеПараметры.ДополнительныеСведенияСтрокой = ПараметрыДокумента.ДопСведения;
	ДополнительныеПараметры.ПараметрыФормированияФайла = МетодСервера("ГенерацияXML", "XML_ПараметрыФормированияФайла");
	
	Если ЗначениеЗаполнено(ОбщиеПараметрыОтправки) Тогда
		
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ОбщиеПараметрыОтправки);
		ДополнительныеПараметры.ПараметрыСогласования = ОбщиеПараметрыОтправки.ПараметрыОтправкиНаСогласование;
		
	КонецЕсли;
	
	ПротоКонтент = СформироватьПротоКонтент(ФорматОтправки
	, ПараметрыДокумента, ДополнительныеПараметры
	, ДанныеОрганизации
	, ПолномочияПодписанта);
	
	ФайлТитула = СформироватьФайлТитула(
		ПротоКонтент,
		ФорматОтправки,
		ДополнительныеПараметры.ПараметрыФормированияФайла
	);
	
	СписокОшибок = ВыполнитьВалидациюПротоКонтента(ПротоКонтент, ФорматОтправки);
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлТитула"		, ФайлТитула);
	Результат.Вставить("СписокОшибок"	, СписокОшибок);
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция СформироватьПротоКонтент(ФорматОтправки
	, ПараметрыДокумента, ДополнительныеПараметры
	, ДанныеОрганизации
	, ПолномочияПодписанта)
	
	Результат = Неопределено;
	
	ДокументСсылка = ПараметрыДокумента.ДокументСсылка;
	
	Результат = МетодСервера(,
		"КонтентФормализованногоДокумента",
		ДокументСсылка,
		ФорматОтправки,
		ДополнительныеПараметры
	);
	
	ДанныеСотрудника = ДополнительныеПараметры.ДанныеСотрудника;
	ПараметрыСогласования = ДополнительныеПараметры.ПараметрыСогласования;
	ДанныеПодписанта = ДанныеПодписанта(ДанныеСотрудника, ПараметрыСогласования);
	
	ЗаполнитьПодписантаВПротоКонтенте(Результат, ФорматОтправки, ДанныеОрганизации, ДанныеПодписанта, ПолномочияПодписанта);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьВалидациюПротоКонтента(ПротоКонтент, ФорматОтправки)
	
	БазовыеФорматы	= БазовыеФорматыНаСервере();
	БазовыйФормат	= ФорматОтправки.БазовыйФормат;
			
	Если БазовыйФормат = БазовыеФорматы.utd820 Тогда
		
		Результат = МетодСервера(, "ВалидацияUTD820", ПротоКонтент);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd Тогда
		
		Результат = МетодСервера(, "ВалидацияUTD", ПротоКонтент);
			
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736 Тогда
		
		Результат = МетодСервера(, "ВалидацияUCD736", ПротоКонтент);
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		Результат = МетодСервера(, "ВалидацияUCD", ПротоКонтент);
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьФайлТитула(ПротоКонтент, ФорматОтправки, ПараметрыФормированияФайла)
	
	Результат = Неопределено;
	
	БазовыеФорматы	= БазовыеФорматыНаСервере();
	
	БазовыйФормат	= ФорматОтправки.БазовыйФормат;
	ТипКонтента 	= ФорматОтправки.ТипКонтента;
	ТочностьЦены 	= МетодСервера(, "ТочностьЦеныСФ");
	
	ПротоКонтентXDTO = МетодСервера("ГенерацияXML", "ПротоКонтент_В_ПротоКонтентXDTO", ПротоКонтент, ТипКонтента);
				
	Если БазовыйФормат = БазовыеФорматы.utd820 Тогда
		
		ПараметрыФормированияФайла.ТочностьЦены = ТочностьЦены;
		
		ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ПолучитьXML_УПД_820"
			, ПротоКонтентXDTO, ПараметрыФормированияФайла);
			
	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd Тогда
		
		ПараметрыФормированияФайла.ТочностьЦены = ТочностьЦены;
		
		ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ПолучитьXML_УПД_155"
			, ПротоКонтентXDTO, ПараметрыФормированияФайла);
			
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd736 Тогда
			
		ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ПолучитьXML_УКД_736"
			, ПротоКонтентXDTO, ПараметрыФормированияФайла);
			
	ИначеЕсли БазовыйФормат = БазовыеФорматы.ucd Тогда
		
		ОбъектXDTO = МетодСервера("ГенерацияXML", "XML_ПолучитьXML_УКД"
			, ПротоКонтентXDTO, ПараметрыФормированияФайла);
				
	КонецЕсли;
	
	Результат = МетодСервера("ГенерацияXML", "ОбъектXDTO_В_ДвоичныеДанные", ОбъектXDTO);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеПодписанта(ДанныеСотрудника, ПараметрыСогласования) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("Должность");
	
	Если ПараметрыСогласования = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, ДанныеСотрудника);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ПараметрыСогласования.ДолжностьПолучателя) 
			И Не ЗначениеЗаполнено(ПараметрыСогласования.ДолжностьПодписанта) Тогда
			
			ЗаполнитьЗначенияСвойств(Результат, ДанныеСотрудника);
			
		ИначеЕсли ПараметрыСогласования.ResolutionRequestType = "SignatureRequest" Тогда
			
			Результат.Должность = ПараметрыСогласования.ДолжностьПолучателя;
			
			ФИОПолучателя = СтруктураФИО(ПараметрыСогласования.ФИОПолучателя);
			ЗаполнитьЗначенияСвойств(Результат, ФИОПолучателя);
			
		Иначе
			
			Результат.Должность = ПараметрыСогласования.ДолжностьПодписанта;
			
			ФИОПодписанта = СтруктураФИО(ПараметрыСогласования.ФИОПодписанта);
			ЗаполнитьЗначенияСвойств(Результат, ФИОПодписанта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИспользуетсяРасширенныйПодписант(ФорматОтправки)
	
	Результат = Ложь;
	
	ТипКонтента = ФорматОтправки.ТипКонтента;
	ТипыКонтента = ТипыКонтентаНаСервере();
	
	Если ТипКонтента = ТипыКонтента.Utd820SellerContent
		Или ТипКонтента = ТипыКонтента.UtdSellerContent
		Или ТипКонтента = ТипыКонтента.UcdSellerContent Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПодписантаВПротоКонтенте(ПротоКонтент, ФорматОтправки, ДанныеОрганизации, ДанныеПодписанта, ПолномочияПодписанта) Экспорт
	
	Если ИспользуетсяРасширенныйПодписант(ФорматОтправки) Тогда
		
		ExtendedSigner = Новый_ExtendedSigner();
		
		ПротоКонтент.Signers.Очистить();
		ПротоКонтент.Signers.Добавить(ExtendedSigner);
		
		Signer = ExtendedSigner.SignerDetails;
		
		Signer.Surname		 = ДанныеПодписанта.Фамилия;
		Signer.FirstName	 = ДанныеПодписанта.Имя;
		Signer.Patronymic	 = ДанныеПодписанта.Отчество;
		Signer.JobTitle		 = ДанныеПодписанта.Должность;
		
		Если Не ЗначениеЗаполнено(ПолномочияПодписанта) Тогда
			Возврат;
		КонецЕсли;
		
		Signer.Status		 = ПолномочияПодписанта.Status;
		Signer.SignerType	 = ПолномочияПодписанта.SignerType;
		Signer.Powers		 = ПолномочияПодписанта.Powers;
		
		Если ПолномочияПодписанта.Свойство("PowersBase") Тогда
			Signer.PowersBase = ПолномочияПодписанта.PowersBase;
		КонецЕсли;
		
		Если ПолномочияПодписанта.Свойство("OrganizationName") Тогда
			Signer.OrganizationName = ПолномочияПодписанта.OrganizationName;
		КонецЕсли;
		
		Если ПолномочияПодписанта.Свойство("OrganizationPowersBase") 
			И ЗначениеЗаполнено(ПолномочияПодписанта.OrganizationPowersBase) Тогда
			Signer.OrganizationPowersBase = ПолномочияПодписанта.OrganizationPowersBase;
		КонецЕсли;
		
		Если ПолномочияПодписанта.Свойство("Inn") Тогда
			Signer.Inn = ПолномочияПодписанта.Inn;
		КонецЕсли;
		
		Если ПолномочияПодписанта.Свойство("RegistrationCertificate")
			И ЗначениеЗаполнено(ПолномочияПодписанта.RegistrationCertificate) Тогда
			
			Signer.RegistrationCertificate = ПолномочияПодписанта.RegistrationCertificate;
			
		КонецЕсли;
		
	Иначе
		
		Signer = ПротоКонтент.Signer;
		Signer.Surname		 = ДанныеПодписанта.Фамилия;
		Signer.FirstName	 = ДанныеПодписанта.Имя;
		Signer.Patronymic	 = ДанныеПодписанта.Отчество;
		Signer.JobTitle		 = ДанныеПодписанта.Должность;
		Signer.Inn			 = ДанныеОрганизации.Inn;
		
		Signer.IsSoleProprietor = Ложь;
		
		Если СтрДлина(ДанныеОрганизации.Inn) = 12 Тогда
			Signer.IsSoleProprietor = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыДокумента(ДокументПакета, ОбщиеПараметрыОтправки)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЭтоФайл",				ДокументПакета.ЭтоФайл);
	Результат.Вставить("DocumentType",			ДокументПакета.DocumentType);
	Результат.Вставить("ВнешняяПечатнаяФорма",	ДокументПакета.ВнешняяПечатнаяФорма);
	Результат.Вставить("Организация",			ДокументПакета.Организация);
	
	Результат.Вставить("ЭтоКорректировкаИсправление",  Ложь);
	Результат.Вставить("СвязующийИдентификаторСтроки", ДокументПакета.СвязующийИдентификаторСтроки);
	
	Результат.Вставить("ДокументСсылка",	ДокументПакета.Документ);
	Результат.Вставить("ДопСведения", 		ДокументПакета.ДопПоле); 
	Результат.Вставить("ТипДокумента",		ДокументПакета.ТипДокумента); 
	Результат.Вставить("ФункцияУПД",		ДокументПакета.ФункцияУПД); 
	Результат.Вставить("ФорматОтправки", ДокументПакета.ФорматОтправки);
	
	СтруктураВПФ = Неопределено;
	
	Если ДокументПакета.ЭтоФайл Тогда
		
		Результат.Вставить("ДанныеФайла",	ДокументПакета.ДанныеФайла);
		Результат.Вставить("СвойстваФайла",	ДокументПакета.СвойстваФайла);
		
	ИначеЕсли ЗначениеЗаполнено(ДокументПакета.ВнешняяПечатнаяФорма) Тогда
		
		СтруктураВПФ = МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "СформироватьВнешнююПечатнуюФормуПоСсылкеВПФ",
						ДокументПакета.Документ,
						ДокументПакета.ВнешняяПечатнаяФорма,
						ДокументПакета.Организация);
		
	Иначе
		
		СтруктураВПФ = СформироватьВнешнююПечатнуюФормуДокумента(
						ДокументПакета.ФорматОтправки.ИмяТипа,
						ДокументПакета.Документ,
						ОбщиеПараметрыОтправки.ФИОПодписанта,
						ОбщиеПараметрыОтправки.ПараметрыОтправкиНаСогласование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураВПФ) Тогда
		
		ЗаполнитьПараметрыДокументаПоСтруктуреВПФ(Результат, ДокументПакета, СтруктураВПФ)
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыДокументаПоСтруктуреВПФ(ПараметрыДокумента, ДокументПакета, СтруктураВПФ)
	
	Если СтруктураВПФ.Свойство("DocumentType") Тогда
		ПараметрыДокумента.Вставить("DocumentType", СтруктураВПФ.DocumentType);
	КонецЕсли;
	
	ФорматОтправки = ПараметрыДокумента.ФорматОтправки;
	Если Не ЗначениеЗаполнено(ФорматОтправки) Тогда
		ФорматОтправки = ОписаниеФорматаДляОтправкиФайла(ПараметрыДокумента.DocumentType);
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("ФорматОтправки", ФорматОтправки);
	
	Если СтруктураВПФ.Свойство("ДанныеФайла") Тогда
		ДанныеФайла = СтруктураВПФ.ДанныеФайла;
	Иначе
		ДанныеФайла = Новый Структура;
	КонецЕсли;
	
	// Обязательные поля меты
	Если НЕ ДанныеФайла.Свойство("DocumentDate") Тогда
		ДанныеФайла.Вставить("DocumentDate", СтруктураВПФ.Дата);
	КонецЕсли;
	
	Если НЕ ДанныеФайла.Свойство("DocumentNumber") Тогда
		ДанныеФайла.Вставить("DocumentNumber", СтруктураВПФ.Номер);
	КонецЕсли;
	
	Если НЕ ДанныеФайла.Свойство("FileName") Тогда
		ДанныеФайла.Вставить("FileName", СтруктураВПФ.ИмяФайла);
	КонецЕсли;
	
	Если НЕ ДанныеФайла.Свойство("NeedRecipientSignature") Тогда
		ДанныеФайла.Вставить("NeedRecipientSignature", Истина);
	КонецЕсли;
	
	ДанныеФайла.FileName = МетодКлиента("Модуль_Клиент", "ЗаменитьНедопустимыеСимволыИмениФайла", ДанныеФайла.FileName);
	
	Если ПараметрыДокумента.ФорматОтправки.ИмяТипа <> "Nonformalized" Тогда
		// НЕ обязательные поля меты
		Если НЕ ДанныеФайла.Свойство("Total") И СтруктураВПФ.Свойство("Сумма") Тогда
			ДанныеФайла.Вставить("Total", СтруктураВПФ.Сумма);
		КонецЕсли;
		
		Если НЕ ДанныеФайла.Свойство("Vat") И СтруктураВПФ.Свойство("СуммаНДС") Тогда
			ДанныеФайла.Вставить("Vat", СтруктураВПФ.СуммаНДС);
		КонецЕсли;
		
		Если НЕ ДанныеФайла.Свойство("БезНДС") И СтруктураВПФ.Свойство("ДокументБезНДС") Тогда
			ДанныеФайла.Вставить("БезНДС", СтруктураВПФ.ДокументБезНДС);
		КонецЕсли;
	КонецЕсли;
	
	// Запись файла на диск
	СвойстваФайла = Новый Структура("ПолноеИмя", ПолучитьИмяВременногоФайла(СтруктураВПФ.ФорматФайла));
	Если СтруктураВПФ.Свойство("ДвоичныеДанныеФайла") Тогда
		СтруктураВПФ.ДвоичныеДанныеФайла.Записать(СвойстваФайла.ПолноеИмя);
	Иначе
		СтруктураВПФ.Таблица.Записать(СвойстваФайла.ПолноеИмя, ТипФайлаТабличногоДокумента[СтруктураВПФ.ФорматФайла]);
	КонецЕсли;
	
	ПараметрыДокумента.Вставить("ЭтоФайл",		 Истина);
	ПараметрыДокумента.Вставить("ДанныеФайла",	 ДанныеФайла);
	ПараметрыДокумента.Вставить("СвойстваФайла", СвойстваФайла);
	
КонецПроцедуры

&НаСервере
Функция СформироватьВнешнююПечатнуюФормуДокумента(DocumentType, ДокументСсылка, ФИОПодписанта, ПараметрыСогласования)
	
	Результат = Неопределено;
	
	ВнешняяПечатнаяФорма = МетодСервера(, "ПолучитьВнешнююПечатнуюФормуДокумента", DocumentType, ДокументСсылка);
	
	Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
		
		МетаданныеВПФ = МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьМетуВнешнейПечатнойФормы", DocumentType, ДокументСсылка);
		
		Результат = МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "СформироватьВнешнююПечатнуюФормуПоСсылкеВПФ", ДокументСсылка, ВнешняяПечатнаяФорма,, МетаданныеВПФ);
		
	Иначе
		
		Если DocumentType = "ProformaInvoice" Тогда
			
			Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьПечатнуюФормуСчетаНаОплату", ДокументСсылка, ПараметрыСогласования, ФИОПодписанта);
			
		ИначеЕсли DocumentType = "ReconciliationAct" Тогда
			
			Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьПечатнуюФормуАктаСверки", ДокументСсылка, ПараметрыСогласования, ФИОПодписанта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Если DocumentType = "XmlAcceptanceCertificate" Тогда
			Результат.Вставить("DocumentType", "AcceptanceCertificate"); // Полуформализованный Акт
		КонецЕсли;
		
		Если НЕ Результат.Свойство("ФорматФайла") Тогда 
			Результат.Вставить("ФорматФайла", МетодСервера(, "РасширениеФайлаИзИмениФайла", Результат.ИмяФайла));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция DocumentToSend_ИзФайла(PackageSendTask, ПараметрыДокумента)
	
	DocumentType  = ПараметрыДокумента.DocumentType;
	СвойстваФайла = ПараметрыДокумента.СвойстваФайла;
	ДанныеФайла	  = ПараметрыДокумента.ДанныеФайла;
	
	Результат = PackageSendTask.AddDocumentFromFile(DocumentType, СвойстваФайла.ПолноеИмя);
	
	Если СвойстваФайла.Свойство("Имя") И ЗначениеЗаполнено(СвойстваФайла.Имя) Тогда
		Результат.FileName = СвойстваФайла.Имя;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеФайла,, ИсключаемыеСвойстваДанныхФайла(ДанныеФайла));
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция ИсключаемыеСвойстваДанныхФайла(ДанныеФайла)
	
	Результат	= "";
	Разделитель = "";
	
	Если  ДанныеФайла.Свойство("БезНДС")
		И ДанныеФайла.БезНДС = Истина
		И ДанныеФайла.Свойство("Vat") Тогда
		
		Результат = Результат + Разделитель + "Vat"; 
		Разделитель = ", ";
		
	КонецЕсли;
	
	Если  ДанныеФайла.Свойство("ЦенаНеУказана")
		И ДанныеФайла.ЦенаНеУказана = Истина
		И ДанныеФайла.Свойство("ContractPrice") Тогда
		
		Результат = Результат + Разделитель + "ContractPrice"; 
		Разделитель = ", ";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция DocumentToSend_Formalized_Универсальный(PackageSendTask, DocumentType, СтруктураДанныхContent, ОписаниеСтруктурыДанных)
	
	DocumentToSend = PackageSendTask.AddDocument(DocumentType);
	
	ТипКонтента = DocumentToSend.Content.Type;
	
	Если ТипКонтента = "UniversalCorrectionDocument" Тогда
		
		DocumentToSend.Content.InvoiceCorrectionTable.ManualInitialization = Истина;
		
	ИначеЕсли ТипКонтента = "InvoiceCorrection" Тогда
	
		DocumentToSend.Content.ManualInitialization = Истина;
	
	КонецЕсли; 
	
	ЗаполнитьContentПоСтруктуре(DocumentToSend.Content, СтруктураДанныхContent, ОписаниеСтруктурыДанных);
	
	Возврат DocumentToSend; 
	
КонецФункции

// Функция добавляет файл в сообщение.
// См. https://diadocsdk-1c.readthedocs.io/ru/latest/AddDocumentFromFile.html
//
// Параметры:
//  PackageSendTask	 - СOMОбъект - https://diadocsdk-1c.readthedocs.io/ru/latest/PackageSendTask.html;
//  Файл			 - ДвоичныеДанные - двоичные данные файла (см. СформироватьФайлТитула);
//  TitleName		 - Строка - название типа документа;
//  DocumentFunction - Строка - функция документа (для перехода на PackageSendTask2)
//  Version			 - Строка - версия формата (для перехода на PackageSendTask2)
// 
// Возвращаемое значение:
//  COMОбъект - Объект документа на отправку, производный от объекта DocumentToSend и соответствующий указанному типу
//
&НаКлиенте
Функция ДобавитьФайлВСообщение(PackageSendTask, Файл, TitleName)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
	Файл.Записать(ВременныйФайл);
	
	Результат = PackageSendTask.AddDocumentFromFileRaw(TitleName, ВременныйФайл); // AddDocumentFromFileRaw для PackageSendTask v1
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДобавитьФайлВЗаданиеДляОтправки(PackageSendTask, Файл, ФорматОтправки)
	
	Если ТипЗнч(Файл) = Тип("ДвоичныеДанные") Тогда
		
		БинарныеДанные = Файл;
		
	ИначеЕсли ТипЗнч(Файл) = Тип("Строка") Тогда
		
		БинарныеДанные = Новый ДвоичныеДанные(Файл);
		
	ИначеЕсли ТипЗнч(Файл) = Тип("Файл") Тогда
		
		БинарныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		
	Иначе 
		
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Неверный тип параметра для отправки файла (%1)'")
			, ТипЗнч(Файл));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	СтрокаBase64	 = Base64СтрокаИзДвоичныхДанных(БинарныеДанные);
	ВерсияФормата	 = ФорматОтправки.ВерсияФормата;
	ФункцияДокумента = ФорматОтправки.ФункцияДокумента;
	ИмяТипа			 = ФорматОтправки.ИмяТипа;
	
	Результат = PackageSendTask.AddDocumentFromBase64(ИмяТипа
					, ФункцияДокумента
					, ВерсияФормата
					, СтрокаBase64);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторОтправленнойВПФ(DocumentID, ВнешняяПечатнаяФорма)
	Возврат   DocumentID+":"+Формат(ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма), "ЧГ=0");
КонецФункции

&НаСервере
Функция ПолучитьПорядковыйНомерВнешнейПечатнойФормы(ВнешняяПечатнаяФорма)
	
	//получим список всех внешних печатных форм, которые исп в модуле 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство.Наименование = &Наименование
	|	И НЕ ДополнительныеСведения.Значение = """"";
	
	Запрос.УстановитьПараметр("Наименование", МетодСервера(,"ИдентификаторСвойстваНомерВПФ"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МаксЗначение = 0 ;
	Пока Выборка.Следующий() Цикл 
		ТекЗначение = Число(Выборка.Значение);
		Если Выборка.Объект = ВнешняяПечатнаяФорма Тогда 
			Возврат ТекЗначение;
		Иначе 
			МаксЗначение = Макс(ТекЗначение,МаксЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Результат = МаксЗначение+1;
	
	МетодСервера(,"УстановитьЗначениеСвойства", ВнешняяПечатнаяФорма, МетодСервера(,"ИдентификаторСвойстваНомерВПФ"), формат(результат, "ЧГ=0"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПослеОтправкиДокумента(ДокументПакета)
	
	ФорматОтправки = ДокументПакета.ФорматОтправки;
	ТипДокументаПакета = ФорматОтправки.ИмяТипа;
	ЭтоСчет = (ТипДокументаПакета = "ProformaInvoice");
	
	Если ФорматОтправки.ФункцияДокумента = "СЧФДОП" Или ФорматОтправки.ФункцияДокумента = "КСЧФДИС" Тогда
		МассивСсылокРНК = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьМассивСсылокРНКПоСчетуФактуреВыданному", ДокументПакета.ДокументСсылкаВ1С);
		Для Каждого ДокументОснование ИЗ МассивСсылокРНК Цикл
			МетодСервера(,"Установить_DocumentID_Для_Документ", ДокументОснование, ДокументПакета.DocumentId, ДокументПакета.OrganizationId);
		КонецЦикла;
	КонецЕсли;
	
	МетодСервера(,"Установить_DocumentID_Для_Документ", ДокументПакета.ДокументСсылкаВ1С, ДокументПакета.DocumentId, ДокументПакета.OrganizationId, ЭтоСчет);
	
	ПредставлениеДокументов = МетодСервера(, "ПредставлениеДокументов");
	ПредставлениеСФВыданный= "ДокументСсылка." + ПредставлениеДокументов.СчетФактураВыданный;
	ПредставлениеРеализации= "ДокументСсылка." + ПредставлениеДокументов.РеализацияТоваровУслуг;
	
	Если ФорматОтправки.ФункцияДокумента = "СЧФДОП" Или ФорматОтправки.ФункцияДокумента = "КСЧФДИС" Тогда
		ОтразитьСобытиеВыгрузкиВСчетФактуре(ДокументПакета.ДокументСсылкаВ1С, ДокументПакета.Организация);
		Для Каждого ДокументОснование из МассивСсылокРНК Цикл
			ОтразитьСобытиеВыгрузкиВПрочемДокументе(ДокументОснование, ДокументПакета.Организация);
		КонецЦикла;
	Иначе
		Если ТипЗнч(ДокументПакета.ДокументСсылкаВ1С) = Тип(ПредставлениеСФВыданный) Тогда
			ОтразитьСобытиеВыгрузкиВСчетФактуре(ДокументПакета.ДокументСсылкаВ1С, ДокументПакета.Организация);
		ИначеЕсли НЕ (ЭтоСчет И ТипЗнч(ДокументПакета.ДокументСсылкаВ1С) = Тип(ПредставлениеРеализации)) Тогда
			ОтразитьСобытиеВыгрузкиВПрочемДокументе(ДокументПакета.ДокументСсылкаВ1С, ДокументПакета.Организация);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция НужноОбновитьРеквизитыОбъекта(Объект, ЗначенияРеквизитов)
	
	СтруктураРеквизитов	 = Новый Структура;
	КлючУникальности	 = Новый УникальныйИдентификатор;
	
	Для Каждого КлючИЗначение ИЗ ЗначенияРеквизитов Цикл
		СтруктураРеквизитов.Вставить(КлючИЗначение.Ключ, КлючУникальности);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
		Если КлючИЗначение.Значение = КлючУникальности Тогда
			ЗначенияРеквизитов.Удалить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов.Количество() > 0;
	
КонецФункции

&НаСервере
Процедура ОтразитьСобытиеВыгрузкиВСчетФактуре(ДокументСсылка, Организация)
	
	ЗначенияРеквизитов= Новый Структура;
	ЗначенияРеквизитов.Вставить("Выставлен"					, Истина	   );
	ЗначенияРеквизитов.Вставить("КодСпособаВыставления"		, 2			   );
	ЗначенияРеквизитов.Вставить("ДатаВыставления"			, ТекущаяДата());
	ЗначенияРеквизитов.Вставить("ВыставленВЭлектронномВиде"	, Истина	   );
	
	ТекстКомментарияДиадок= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
	Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
		ЗначенияРеквизитов.Вставить("Комментарий", ТекстКомментарияДиадок);
	КонецЕсли;
	
	Если НужноОбновитьРеквизитыОбъекта(ДокументСсылка, ЗначенияРеквизитов) Тогда
		
		ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
		
		Если ЗначенияРеквизитов.Свойство("Комментарий") И НЕ ПустаяСтрока(ДокументОбъект.Комментарий) Тогда
			ЗначенияРеквизитов.Комментарий= ДокументОбъект.Комментарий + " " + ЗначенияРеквизитов.Комментарий;
		КонецЕсли;
		
		Для каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
			Если ДокументОбъект[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ДокументОбъект[КлючИЗначение.Ключ]= КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументОбъект.Модифицированность() Тогда
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Не удалось обновить комментарий в документе " + ДокументСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьСобытиеВыгрузкиВПрочемДокументе(ДокументСсылка, Организация)
	
	Если МетодСервера(,"ЕстьРеквизитИлиСвойствоОбъекта", ДокументСсылка, "Комментарий") Тогда
		
		ТекстКомментарияДиадок= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, МетодСервера(,"ИдентификатрСвойстваТекстКомментарияДиадок"));
		
		Если ЗначениеЗаполнено(ТекстКомментарияДиадок) Тогда
			
			ДокументОбъект= ДокументСсылка.ПолучитьОбъект();
			
			ДокументОбъект.Комментарий= ?(НЕ ПустаяСтрока(ДокументОбъект.Комментарий), ДокументОбъект.Комментарий + " ", "") + ТекстКомментарияДиадок;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				ДокументОбъект.Записать();
			Исключение
				Сообщить("Не удалось обновить комментарий в документе " + ДокументСсылка);
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВернутьТаблицуОтношенийОрганизацииКонтрагентов(Организация = Неопределено) Экспорт
	
	//формируем мегазапрос
	//сначала получаем список организаций, подключенных к диадоку, для них берем ид-шники и настройки печатных форм
	//потом ищем свойства, которыми устанавливается "дружба" контрагентов с этими организациями 
	//затем получаем параметры этой дружбы 
	
	запрос = новый Запрос;
	запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство_ИдКонтрагента
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Наименование = &НаименованиеСвойстваЯщикКонтрагента";
	
	запрос.УстановитьПараметр("НаименованиеСвойстваЯщикКонтрагента", МетодСервера(,"ИдентификаторСвойстваЯщикКонтрагентаПрефикс"));
	
	таблицаСвойств = запрос.Выполнить().Выгрузить();
	таблицаСвойств.Колонки.Добавить("BoxID", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	
	для каждого стр из таблицаСвойств цикл 
		стр.BoxID = Сред(стр.Свойство_ИдКонтрагента, стрДлина("ДДКонтр_") + 1);
	КонецЦикла;	
	
	запрос = новый запрос(
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Организация,
	|	ДополнительныеСведения.Значение КАК ИдентификаторОрганизации,
	|	НастройкиПФДляТоваров.Значение КАК ПечатнаяФормаДляТоваров,
	|	НастройкиПФДляУслуг.Значение КАК ПечатнаяФормаДляУслуг
	|ПОМЕСТИТЬ ТаблицаДанныхОрганизаций
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК НастройкиПФДляТоваров
	|		ПО ДополнительныеСведения.Объект = НастройкиПФДляТоваров.Объект
	|			И (ТИПЗНАЧЕНИЯ(НастройкиПФДляТоваров.Объект) = ТИП(Справочник.Организации))
	|			И (НастройкиПФДляТоваров.Свойство = &СвойствоПечатнаяФормаДляТоваров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК НастройкиПФДляУслуг
	|		ПО ДополнительныеСведения.Объект = НастройкиПФДляУслуг.Объект
	|			И (ТИПЗНАЧЕНИЯ(НастройкиПФДляУслуг.Объект) = ТИП(Справочник.Организации))
	|			И (НастройкиПФДляУслуг.Свойство = &СвойствоПечатнаяФормаДляУслуг)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Организации)
	|	И ДополнительныеСведения.Свойство = &СвойствоИдентификаторОрганизации
	|	И ДополнительныеСведения.Значение <> """"
	|	И (&Организация = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДополнительныеСведения.Объект = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Свойство_ИдКонтрагента,
	|	ТЗ.BoxID
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаСвойств КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Свойство_ИдКонтрагента,
	|	ВТ.BoxID,
	|	СвойстваОбъектов.Ссылка КАК Свойство_ИдПодразделенияКонтрагента,
	|	СвойстваОбъектов2.Ссылка КАК Свойство_НаименованиеПодразделенияКонтрагента
	|ПОМЕСТИТЬ ТаблицаСвойствКонтрагентов
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов
	|		ПО (""ДДИДП_"" + ВТ.BoxID = СвойстваОбъектов.Наименование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов2
	|		ПО (""ДДНП_"" + ВТ.BoxID = СвойстваОбъектов2.Наименование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхОрганизаций.Организация,
	|	ТаблицаДанныхОрганизаций.ИдентификаторОрганизации,
	|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляТоваров,
	|	ТаблицаДанныхОрганизаций.ПечатнаяФормаДляУслуг,
	|	ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента,
	|	ТаблицаСвойствКонтрагентов.Свойство_ИдПодразделенияКонтрагента,
	|	ТаблицаСвойствКонтрагентов.Свойство_НаименованиеПодразделенияКонтрагента,
	|	ТаблицаСвойствИДКонтрагента.Объект КАК Контрагент,
	|	ТаблицаСвойствИДКонтрагента.Значение КАК ИдКонтрагента
	|ПОМЕСТИТЬ ТаблицаСКонтрагентами
	|ИЗ
	|	ТаблицаДанныхОрганизаций КАК ТаблицаДанныхОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвойствКонтрагентов КАК ТаблицаСвойствКонтрагентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ТаблицаСвойствИДКонтрагента
	|			ПО ТаблицаСвойствКонтрагентов.Свойство_ИдКонтрагента = ТаблицаСвойствИДКонтрагента.Свойство
	|				И (ТИПЗНАЧЕНИЯ(ТаблицаСвойствИДКонтрагента.Объект) = ТИП(Справочник.Контрагенты))
	|				И (ТаблицаСвойствИДКонтрагента.Значение <> """")
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСКонтрагентами.Организация,
	|	ТаблицаСКонтрагентами.ИдентификаторОрганизации,
	|	ЕСТЬNULL(ТаблицаСКонтрагентами.ПечатнаяФормаДляТоваров, """") КАК ПечатнаяФормаДляТоваров,
	|	ЕСТЬNULL(ТаблицаСКонтрагентами.ПечатнаяФормаДляУслуг, """") КАК ПечатнаяФормаДляУслуг,
	|	ТаблицаСКонтрагентами.Свойство_ИдКонтрагента,
	|	ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента,
	|	ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента,
	|	ТаблицаСКонтрагентами.Контрагент,
	|	ТаблицаСКонтрагентами.ИдКонтрагента,
	|	ДополнительныеСведения.Значение КАК ИдПодразделенияКонтрагента,
	|	ДополнительныеСведения1.Значение КАК НаименованиеПодразделенияКонтрагента
	|ИЗ
	|	ТаблицаСКонтрагентами КАК ТаблицаСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ТаблицаСКонтрагентами.Контрагент = ДополнительныеСведения.Объект
	|			И ТаблицаСКонтрагентами.Свойство_ИдПодразделенияКонтрагента = ДополнительныеСведения.Свойство
	|			И (ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Контрагенты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
	|		ПО ТаблицаСКонтрагентами.Контрагент = ДополнительныеСведения1.Объект
	|			И (ТИПЗНАЧЕНИЯ(ДополнительныеСведения1.Объект) = ТИП(Справочник.Контрагенты))
	|			И ТаблицаСКонтрагентами.Свойство_НаименованиеПодразделенияКонтрагента = ДополнительныеСведения1.Свойство");
	
	ИдентификаторСвойстваЯщикОрганизации			= МетодСервера(,"ИдентификаторСвойстваЯщикОрганизации");
	ИдентификаторСвойстваПечатнаяФормаДляТоваров	= МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляТоваров");
	ИдентификаторСвойстваПечатнаяФормаДляУслуг		= МетодСервера(,"ИдентификаторСвойстваПечатнаяФормаДляУслуг");
	
	запрос.УстановитьПараметр("Организация",	?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	запрос.УстановитьПараметр("ТаблицаСвойств",	ТаблицаСвойств);
	
	Запрос.УстановитьПараметр("СвойствоИдентификаторОрганизации",	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
																					ИдентификаторСвойстваЯщикОрганизации, Истина));
																					
	Запрос.УстановитьПараметр("СвойствоПечатнаяФормаДляТоваров",	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
																					ИдентификаторСвойстваПечатнаяФормаДляТоваров, Истина));
																					
	Запрос.УстановитьПараметр("СвойствоПечатнаяФормаДляУслуг",		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
																					ИдентификаторСвойстваПечатнаяФормаДляУслуг, Истина));
	
	Результат =  Запрос.ВыполнитьПакет()[4].Выгрузить();
	
	Результат.колонки.добавить("Статус");
	Результат.колонки.добавить("ЭтоТестоваяОрганизация");
	Результат.колонки.добавить("ЭтоТестовыйКонтрагент");
	
	Возврат МетодСервера(,"ТаблицаЗначений_2_МассивСтруктур", Результат);
	
КонецФункции 

//Устанавливает связи с другими документами пакета или ранее отправленными документами
//
//Параметры:
//	Document - COMОбъект - элемент коллекции DocumentsToSend сущности PackageSendTask
//	СоответствиеCustomIdСсылке1С - соответствие - хранит соответствие CustomDocumentId ссылке на документ в 1С
//
&НаКлиенте
Процедура УстановитьСвязиДляDocument(Document, СоответствиеCustomIdСсылке1СПакета)
			
	//1. связанный документ может быть в пакете, который еще не отправлен
	//2. связанный документ может быть уже отправлен ранее
	
	CustomDocumentId = Document.CustomDocumentId;
	
	СтруктураСоответствия = СоответствиеCustomIdСсылке1СПакета.Получить(CustomDocumentId); 
	
	DocumentType		= СтруктураСоответствия.Type;
	DocumentСсылкаВ1С	= СтруктураСоответствия.ДокументСсылкаВ1С;
	ЭтоВПФ				= СтруктураСоответствия.ЭтоВПФ;
		
	Если ЭтоВПФ Тогда
		
		//Сценарий для неформализованного документа, добавленного через механиз доплнительных внешних печатных форм
		УстановитьСвязиДляВнешнейПечатнойФормы(Document, DocumentСсылкаВ1С, СоответствиеCustomIdСсылке1СПакета);
						
	ИначеЕсли СтруктураСоответствия.ЭтоФайл И ПоддерживаетсяОтправкаТипаНеформализованного(DocumentType) Тогда 
		
		// Сценарий для неформализованного документа, добавленного с диска
		УстановитьСвязиДляНеформализованногоДокумента(Document, СоответствиеCustomIdСсылке1СПакета);
				
	Иначе
		
		// Сценарий для формализованного документа
		
		ФункцияУПД 					= СтруктураСоответствия.ФункцияУПД;
		ЭтоКорректировкаИсправление = СтруктураСоответствия.ЭтоКорректировкаИсправление;
		
		СтруктураДанныеОСвязях = ЗаполнитьИнформациюОСвязяхДокументаНаСервере(DocumentСсылкаВ1С, DocumentType, ФункцияУПД, ЭтоКорректировкаИсправление);
		
		МассивПодчиненныхДокументов		= СтруктураДанныеОСвязях.МассивПодчиненныхДокументов;
		МассивSubordinateDocumentId		= СтруктураДанныеОСвязях.МассивSubordinateDocumentId;
		МассивРодительскихДокументов	= СтруктураДанныеОСвязях.МассивРодительскихДокументов;
		МассивInitialDocumentId			= СтруктураДанныеОСвязях.МассивInitialDocumentId;
		
		//*** Подчиненные доки
					
		//1. сперва проверяем наличие подчиненного документа среди документов пакета
		Для каждого ПодчиненныйДокумент из МассивПодчиненныхДокументов Цикл //строка структуры("ссылка, ЭтоСчетНаОплату")
									
			Для каждого КлючЗначение из СоответствиеCustomIdСсылке1СПакета Цикл
				
				СтруктураСоответствия = КлючЗначение.Значение;
				
				Если НЕ CustomDocumentId = КлючЗначение.Ключ
					И СтруктураСоответствия.ДокументСсылкаВ1С = ПодчиненныйДокумент.Ссылка
					И СтруктураСоответствия.ЭтоВПФ = Ложь Тогда
					
					Document.AddSubordinateDocumentFromPackage(КлючЗначение.Ключ);
					
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЦикла;
		
		//2. вторым шагом ищем среди уже отправленных документов
		Для каждого SubordinateDocumentId из МассивSubordinateDocumentId Цикл 
			Document.AddSubordinateDocument(SubordinateDocumentId);
		КонецЦикла;
		
		//*** Родительские доки
				
		//1. сперва проверяем наличие подчиненного документа среди документов пакета
		Для каждого РодительскийДокумент из МассивРодительскихДокументов Цикл
			
			РодительскийДокСсылка = РодительскийДокумент.Ссылка;
			
			Для каждого КлючЗначение из СоответствиеCustomIdСсылке1СПакета Цикл
												
				СтруктураСоответствия = КлючЗначение.Значение;
				
				Если НЕ CustomDocumentId = КлючЗначение.Ключ
					И СтруктураСоответствия.ДокументСсылкаВ1С = РодительскийДокумент.Ссылка
					И СтруктураСоответствия.ЭтоВПФ = Ложь Тогда
					
					Document.AddInitialDocumentFromPackage(КлючЗначение.Ключ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		//2. вторым шагом ищем среди уже отправленных документов
		Для каждого InitialDocumentId из МассивInitialDocumentId Цикл 
			Document.AddInitialDocument(InitialDocumentId);
		КонецЦикла;
										
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязиДляВнешнейПечатнойФормы(Document, DocumentСсылкаВ1С, СоответствиеCustomIdСсылке1СПакета)
	
	CustomDocumentIdОснования = "";
		
	Для каждого КлючЗначение Из СоответствиеCustomIdСсылке1СПакета Цикл
		
		Если ЗначениеЗаполнено(CustomDocumentIdОснования) Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураСоответствия = КлючЗначение.Значение;
		
		Если  СтруктураСоответствия.ДокументСсылкаВ1С = DocumentСсылкаВ1С
			И СтруктураСоответствия.ЭтоВПФ = Ложь Тогда
			
			CustomDocumentIdОснования = КлючЗначение.Ключ; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(CustomDocumentIdОснования) Тогда
		Document.AddInitialDocumentFromPackage(CustomDocumentIdОснования);
	Иначе
		IdДокументаОснования = МетодСервера(, "Документ_2_DocumentID", DocumentСсылкаВ1С);	
		Если ЗначениеЗаполнено(IdДокументаОснования) Тогда
			Document.AddInitialDocument(IdДокументаОснования);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязиДляНеформализованногоДокумента(Document, СоответствиеCustomIdСсылке1СПакета)
	
	Если Не ЗначениеЗаполнено(СоответствиеCustomIdСсылке1СПакета) Тогда
		Возврат;
	КонецЕсли;
			
	// Возможны два варианта:
	// 1. В пакете только неформализованные документы. В этом случае родительским будет один из неформализованных
	// 2. В пакете кроме неформализованных есть и формализованный документ.
	
	CustomIdРодителя = CustomIdФормализованногоДокументаПакета(СоответствиеCustomIdСсылке1СПакета);
	
	Если CustomIdРодителя = Неопределено Тогда
		
		// В пакете только не формализованные. В качестве родителя возьмем первый документ из соответствия.
		Для каждого КлючЗначение из СоответствиеCustomIdСсылке1СПакета Цикл
			
			Если Document.CustomDocumentId <> КлючЗначение.Ключ Тогда
				CustomIdРодителя = КлючЗначение.Ключ;
			КонецЕсли;
			
			Прервать;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Если CustomIdРодителя <> Неопределено Тогда
		Document.AddInitialDocumentFromPackage(CustomIdРодителя);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Функция ПоддерживаетсяОтправкаТипаНеформализованного(DocumentType)
	
	ОбрабатываемыеТипы = Новый Массив;
		
	ОбрабатываемыеТипы.Добавить("Nonformalized");
	ОбрабатываемыеТипы.Добавить("AcceptanceCertificate");
	ОбрабатываемыеТипы.Добавить("ReconciliationAct");
	ОбрабатываемыеТипы.Добавить("ServiceDetails");
	ОбрабатываемыеТипы.Добавить("Contract");
	ОбрабатываемыеТипы.Добавить("PriceListAgreement");
	ОбрабатываемыеТипы.Добавить("CertificateRegistry");
	ОбрабатываемыеТипы.Добавить("ProformaInvoice");
	
	Результат = Ложь;
	Если ОбрабатываемыеТипы.Найти(DocumentType) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция CustomIdФормализованногоДокументаПакета(СоответствиеCustomIdСсылке1СПакета)
	
	Результат = Неопределено;
	
	Для каждого КлючЗначение Из СоответствиеCustomIdСсылке1СПакета Цикл 
		
		Значение = КлючЗначение.Значение;
		
		Если МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйФормат", Значение.ФорматОтправки) Тогда
			Результат = КлючЗначение.Ключ;
			Прервать;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьИнформациюОСвязяхДокументаНаСервере(Знач ДокументСсылка, Знач DocumentType, Знач ФункцияУПД, Знач ЭтоКорректировкаИсправление = Ложь)
	
	СтруктураДанныеОСвязях= Новый Структура();
	
	МассивПодчиненныхДокументов= ПолучитьМассивПодчиненныхДокументов(ДокументСсылка, DocumentType);
	МассивSubordinateDocumentId= МассивДокументов_2_МассивDocumentId(МассивПодчиненныхДокументов);
	
	МассивРодительскихДокументов= 	ПолучитьМассивРодительскихДокументов(ДокументСсылка, DocumentType, ФункцияУПД, ЭтоКорректировкаИсправление);
	МассивInitialDocumentId= 		МассивДокументов_2_МассивDocumentId(МассивРодительскихДокументов);

	
	СтруктураДанныеОСвязях.Вставить("МассивПодчиненныхДокументов", 	МассивПодчиненныхДокументов);
	СтруктураДанныеОСвязях.Вставить("МассивSubordinateDocumentId", 	МассивSubordinateDocumentId);
	СтруктураДанныеОСвязях.Вставить("МассивРодительскихДокументов", МассивРодительскихДокументов);
	СтруктураДанныеОСвязях.Вставить("МассивInitialDocumentId", 		МассивInitialDocumentId);
	
	Возврат СтруктураДанныеОСвязях;	
	
КонецФункции

&НаСервере
Функция ПолучитьМассивПодчиненныхДокументов(ДокументСсылка, DocumentType)
	
	МассивПодчиненныхДокументов= Новый Массив;
	
	Если НЕ DocumentType = "ProformaInvoice" Тогда
		
		СсылкаСФ= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьСсылкуСчетаФактурыВыданногоПоДокументуОснованию", ДокументСсылка);
		Если ЗначениеЗаполнено(СсылкаСФ) Тогда
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СсылкаСФ, Ложь));
		КонецЕсли;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", ДокументСсылка) Тогда
		
		//счет на оплату на основании РТУ
		МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументСсылка, Ложь));
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоСчетНаОплату", ДокументСсылка) Тогда
		
		//счет на оплату на основании счета на оплату
		МассивРТУ= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьМассивСсылокРТУПоСчетуНаОплату", ДокументСсылка);
		Для каждого ДокументРТУ из МассивРТУ Цикл
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументРТУ, Ложь));
		КонецЦикла;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоЗаказПокупателя", ДокументСсылка) Тогда
		
		//счет на оплату на основании заказа покупателя
		МассивРТУ= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьМассивСсылокРТУПоСчетуНаОплату", ДокументСсылка);
		Для каждого ДокументРТУ из МассивРТУ Цикл
			МассивПодчиненныхДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокументРТУ, Ложь));
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат МассивПодчиненныхДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивРодительскихДокументов(ДокументСсылка, DocumentType, ФункцияУПД, ЭтоКорректировкаИсправление = Ложь)	
	
	МассивРодительскихДокументов= Новый Массив;
	
	Если Найти(DocumentType, "Invoice") > 0 ИЛИ Лев(ФункцияУПД, 3) = "СЧФ" Тогда
		
		Если ЭтоКорректировкаИсправление Тогда
			// ищем СФ - основание
			СФОснование= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьСФОснованиеПоИСФ_КСФ", ДокументСсылка);
			Если ЗначениеЗаполнено(СФОснование) Тогда
				МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СФОснование, Ложь));
			КонецЕсли;
		Иначе
			ТаблицаНакладных = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьТаблицуНакладныхПоСчетуФактуреВыданному", ДокументСсылка);
			Для каждого СтрокаТЗ из ТаблицаНакладных Цикл 
				МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СтрокаТЗ.Ссылка, Ложь));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоКорректировкаРеализации", ДокументСсылка) Тогда
		
		ДокРТУСсылка= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьДокОснованиеКорректировкиРеализации", ДокументСсылка);
		Если ЗначениеЗаполнено(ДокРТУСсылка) Тогда
			МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ДокРТУСсылка, Ложь));
		КонецЕсли;
	
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", ДокументСсылка) Тогда
					
		Если НЕ DocumentType = "ProformaInvoice" Тогда 
			СчетНаОплату= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьСчетНаОплатуНаОснованииРТУ", ДокументСсылка);
			Если ЗначениеЗаполнено(СчетНаОплату) Тогда 
				МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", СчетНаОплату, Истина));
			Иначе
				ЗаказПокупателя= МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьЗаказПокупателяНаОснованииРТУ", ДокументСсылка);
				Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
					МассивРодительскихДокументов.Добавить(Новый Структура("Ссылка, ЭтоСчетНаОплату", ЗаказПокупателя, Истина));
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивРодительскихДокументов;
	
КонецФункции

&НаКлиенте
Функция СформироватьCustomDocumentId(ТекущийДокументСсылка, ВнешняяПечатнаяФорма, DocumentType, СоответствиеCustomIdСсылке1С, СоответствиеCustomIdСсылке1СТекущегоПакета, ЭтоПереотправка)
	
	Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			
		DocId= МетодСервера(,"Документ_2_DocumentID", ТекущийДокументСсылка);
		
		Если НЕ ЗначениеЗаполнено(DocId) Тогда
			
			// ищем CustomID документа основания среди документов пакета
			IDДокОснования= ПолучитьIDДокументаОснования(ТекущийДокументСсылка, СоответствиеCustomIdСсылке1СТекущегоПакета);
			
			// ищем CustomID документа основания среди отправляемых в текущей итерации
			Если НЕ ЗначениеЗаполнено(IDДокОснования) Тогда
				IDДокОснования= ПолучитьIDДокументаОснования(ТекущийДокументСсылка, СоответствиеCustomIdСсылке1С);
			КонецЕсли;
			
		Иначе
			// берем ID уже отправленного
			IDДокОснования= DocId;
		КонецЕсли;
		
		//зададим идентификатор для поиска документа
		CustomDocumentId= ПолучитьИдентификаторОтправленнойВПФ(IDДокОснования, ВнешняяПечатнаяФорма);
	
	Иначе 
		
		Если 	DocumentType = "ProformaInvoice"
			Или DocumentType = "NonformalizedProforma" Тогда
			
			НаименованиеИдентификатораСвойства = ПолучитьИдентификаторСвойства("ИдентификаторСвойстваДиадокCustomDocumentIdСчет");
		Иначе
			НаименованиеИдентификатораСвойства = ПолучитьИдентификаторСвойства("ИдентификаторСвойстваДиадокCustomDocumentId");
		КонецЕсли;
		
		Если НЕ ЭтоПереотправка Тогда
			//при переотправке необходимо принудительно менять OperationId, иначе сервер вернет тот же самый документ
			OperationId= МетодСервера(, "ПолучитьЗначениеСвойства", ТекущийДокументСсылка, НаименованиеИдентификатораСвойства);	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(OperationId) Тогда
			CustomDocumentId= OperationId;
		Иначе
			CustomDocumentId= Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат CustomDocumentId;
	
КонецФункции

&НаКлиенте
Функция ПолучитьIDДокументаОснования(ДокументОснованиеСсылка, ПараметрСоответствиеCustomIdСсылке1С)
	
	IDДокОснования= "";
	
	Для каждого ЭлементСоответствия из ПараметрСоответствиеCustomIdСсылке1С Цикл
				
		СтруктураСоответствия= ЭлементСоответствия.Значение;
		
		Если ДокументОснованиеСсылка = СтруктураСоответствия.ДокументСсылкаВ1С Тогда
			IDДокОснования= ЭлементСоответствия.Ключ; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат IDДокОснования;
	
КонецФункции

&НаСервере
Функция МассивДокументов_2_МассивDocumentId(МассивДокументов)
	
	МассивDocumentId= Новый Массив;
	
	Для каждого Док из МассивДокументов Цикл 
		Если Док.ЭтоСчетНаОплату Тогда 
			DocId= МетодСервера(, "Документ_2_DocumentID", Док.Ссылка, Истина);
		Иначе 	
			DocId= МетодСервера(, "Документ_2_DocumentID", Док.Ссылка); 
		КонецЕсли;	
		Если ЗначениеЗаполнено(DocId) Тогда
			МассивDocumentId.Добавить(DocId);
		КонецЕсли;
	КонецЦикла;	  
	
	Возврат МассивDocumentId;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторСвойства(ИмяФункцииПолученияИдентификатора)
	
	Если СтруктураИндентификаторовСвойств = Неопределено Тогда
		СтруктураИндентификаторовСвойств= Новый Структура;
	КонецЕсли;
	
	НайденноеЗначение= Неопределено;
	СтруктураИндентификаторовСвойств.Свойство(ИмяФункцииПолученияИдентификатора, НайденноеЗначение);
	
	Если НайденноеЗначение = Неопределено Тогда
		
		Ключ= 		ИмяФункцииПолученияИдентификатора;
		Значение=	МетодСервера(, ИмяФункцииПолученияИдентификатора);
		
		СтруктураИндентификаторовСвойств.Вставить(Ключ, Значение);
		
		Возврат Значение;
		
	Иначе
		
		Возврат НайденноеЗначение;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСвязиДляДокументовПакета(PackageSendTask, СоответствиеCustomIdСсылке1СТекущегоПакета)
	
	ВГраница = PackageSendTask.DocumentsToSend.Count-1;
	
	Для Сч = 0 По ВГраница Цикл
		
		DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Сч);
		
		УстановитьСвязиДляDocument(DocumentToSend, СоответствиеCustomIdСсылке1СТекущегоПакета);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИдентификаторОперацииПакета(PackageSendTask)
	
	СоответствиеCustomDocumentId = Новый Соответствие; // Используем соответствие для того, чтобы уникальный идентификатор операции 
	                                                   // не зависел от порядка расположения документов в пакете.
	
	ВГраница = PackageSendTask.DocumentsToSend.Count - 1;
	Для Сч = 0 По ВГраница Цикл
		DocumentToSend = PackageSendTask.DocumentsToSend.GetItem(Сч);
		СоответствиеCustomDocumentId.Вставить(DocumentToSend.CustomDocumentId);
	КонецЦикла;
	
	ИдентификаторОперации = "";
	Для каждого КлючИЗначение Из СоответствиеCustomDocumentId Цикл
		ИдентификаторОперации = ИдентификаторОперации + КлючИЗначение.Ключ;
	КонецЦикла;
	
	PackageSendTask.OperationId = ИдентификаторОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатыДляШифрованияПакета(PackageSendTask, ПараметрыPackageSendTask)
	
	Если ПараметрыPackageSendTask.Свойство("СертификатыДляШифрования") Тогда
		
		Для Каждого PersonalCertificate ИЗ ПараметрыPackageSendTask.СертификатыДляШифрования.СертификатыОтправителя Цикл
			PackageSendTask.AddEncryptCertificate(PersonalCertificate);
		КонецЦикла;
		
		Для Каждого PersonalCertificate ИЗ ПараметрыPackageSendTask.СертификатыДляШифрования.СертификатыПолучателя Цикл
			PackageSendTask.AddEncryptCertificate(PersonalCertificate);
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Вызывает одноименное событие подключаемого модуля.
//
// Параметры:
//  PackageSendTask - COMОбъект - объект PackageSendTask (см. https://diadocsdk-1c.readthedocs.io/ru/latest/PackageSendTask.html);
//  ПараметрыПакета - ФиксированнаяСтруктура - описание отправляемого пакета (см. ОписаниеПакета());
//
&НаКлиенте
Процедура ПередОтправкойPackageSendTask(PackageSendTask, ПараметрыПакета, ИспользоватьУстаревшийМеханизмОтправки = Ложь)
	
	// Считываем свойства объекта PackageSendTask
	СвойстваPackageSendTask = Новый Структура;
	СвойстваPackageSendTask.Вставить("CounteragentId"	, PackageSendTask.CounteragentId);
	СвойстваPackageSendTask.Вставить("FromDepartmentId"	, PackageSendTask.FromDepartmentId);
	СвойстваPackageSendTask.Вставить("ToDepartmentId"	, PackageSendTask.ToDepartmentId);
	СвойстваPackageSendTask.Вставить("LockPackage"		, Ложь);
	СвойстваPackageSendTask.Вставить("ProxyBoxId"		, PackageSendTask.ProxyBoxId);
	СвойстваPackageSendTask.Вставить("ProxyDepartmentId", PackageSendTask.ProxyDepartmentId);
	
	// Обрабатываем событие в ПМ
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("PackageSendTask", СвойстваPackageSendTask);
	ПараметрыСобытия.Вставить("ПараметрыПакета", ПараметрыПакета);
	
	МетодСервера(,"ОбработкаСобытияПодключаемогоМодуля", "ПередОтправкойPackageSendTask", ПараметрыСобытия);
	
	// Обновляем свойства объекта PackageSendTask
	СвойстваPackageSendTask = ПараметрыСобытия.PackageSendTask;
	PackageSendTask.CounteragentId		 = СвойстваPackageSendTask.CounteragentId;
	PackageSendTask.FromDepartmentId	 = СвойстваPackageSendTask.FromDepartmentId;
	PackageSendTask.ToDepartmentId		 = СвойстваPackageSendTask.ToDepartmentId;
	PackageSendTask.ProxyBoxId			 = СвойстваPackageSendTask.ProxyBoxId;
	PackageSendTask.ProxyDepartmentId	 = СвойстваPackageSendTask.ProxyDepartmentId;
	
	Если ИспользоватьУстаревшийМеханизмОтправки Тогда
		PackageSendTask.LockPackage = СвойстваPackageSendTask.LockPackage;
	Иначе
		PackageSendTask.LockMode = ?(СвойстваPackageSendTask.LockPackage, "Full", "None");
	КонецЕсли;
	
КонецПроцедуры

// На основании структуры ПараметрыPackageSendTask создает прикладное описание пакета.
//
// Параметры:
//  ПараметрыPackageSendTask - Структура - содержит ключи:
//     * Организация
//     * Получатель
//     * МассивДокументовПакета
//     * ПараметрыОтправкиНаСогласование
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - содержит ключи:
//     * Организация	 - СправочникСсылка.Организации - организация-отправитель;
//     * Получатель		 - СправочникСсылка.Контрагенты - контрагент-получатель;
//     * ДокументыПакета - ФиксированныйМассив - содержит описания документов пакета (см. НовоеОписаниеДокументаПакета);
//     * ПараметрыОтправкиНаСогласование
//
&НаКлиенте
Функция ОписаниеПакета(ПараметрыPackageSendTask)
	
	ДокументыПакета = Новый Массив;
	
	Для Каждого Элемент Из ПараметрыPackageSendTask.МассивДокументовПакета Цикл 
		
		ОписаниеДокумента = НовоеОписаниеДокументаПакета();
		ЗаполнитьЗначенияСвойств(ОписаниеДокумента, Элемент);
		ОписаниеДокумента.DocumentFunction = ФункцияДокументаДляХранения(Элемент.ФункцияУПД);
		
		ДокументыПакета.Добавить(Новый ФиксированнаяСтруктура(ОписаниеДокумента));
		
	КонецЦикла;
	
	ПараметрыПакета = Новый Структура;
	ПараметрыПакета.Вставить("Организация"		, ПараметрыPackageSendTask.Организация);
	ПараметрыПакета.Вставить("Получатель"		, ПараметрыPackageSendTask.Получатель);
	ПараметрыПакета.Вставить("ДокументыПакета"	, Новый ФиксированныйМассив(ДокументыПакета));
	ПараметрыПакета.Вставить("ПараметрыОтправкиНаСогласование", ПараметрыPackageSendTask.ПараметрыОтправкиНаСогласование);
	
	Результат = Новый ФиксированнаяСтруктура(ПараметрыПакета);
	
	Возврат Результат;
	
КонецФункции

// Конструктор описания отправляемого документа.
//
// Возвращаемое значение:
//  Структура.
//
&НаКлиенте
Функция НовоеОписаниеДокументаПакета()
	
	Результат = Новый Структура;
	Результат.Вставить("Документ");
	Результат.Вставить("DocumentType");
	Результат.Вставить("DocumentFunction");
	Результат.Вставить("ЭтоФайл");
	Результат.Вставить("ДанныеФайла");
	Результат.Вставить("СвойстваФайла");
	
	Возврат Результат;
	
КонецФункции

// Приводит написание функции документа к англоязычному варианту.
//
// Параметры:
//  ФункцияДокумента - Строка - функция документа.
// 
// Возвращаемое значение:
//  Строка, Неопределено - функция документа в терминах сервиса.
//
&НаКлиентеНаСервереБезКонтекста
Функция ФункцияДокументаДляХранения(ФункцияДокумента)
	
	ИменаФункций = Новый Соответствие;
	
	ИменаФункций.Вставить("INVOICEANDBASIC"	, "InvoiceAndBasic");
	ИменаФункций.Вставить("СЧФДОП"			, "InvoiceAndBasic");
	ИменаФункций.Вставить("КСЧФДИС"			, "InvoiceAndBasic");
	
	ИменаФункций.Вставить("INVOICE"	, "Invoice");
	ИменаФункций.Вставить("СЧФ"		, "Invoice");
	ИменаФункций.Вставить("КСЧФ"	, "Invoice");
	
	ИменаФункций.Вставить("BASIC"	, "Basic");
	ИменаФункций.Вставить("ДОП"		, "Basic");
	ИменаФункций.Вставить("ДИС"		, "Basic");
	
	Результат = ИменаФункций[ВРег(ФункцияДокумента)];
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

# Область ОБЩИЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаКлиенте
Процедура ЗаполнитьContentПоСтруктуре(content, СтруктураДанных, описаниеСтруктурыДанных = "") Экспорт 
	
	Для каждого Элемент из СтруктураДанных Цикл
		
		Если ЭтоСлужебноеСвойствоСтруктурыКонтента(Элемент.Ключ)
			Или Элемент.Значение = Неопределено Тогда 
			
			// Исключаем неинициализированные и служебные свойства
			Продолжить;
			
		КонецЕсли;
		
		Если 	Элемент.Ключ = "Totals" ИЛИ Элемент.Ключ = "TotalGrossQuantity" ИЛИ Элемент.Ключ = "TotalParcelsQuantity" ИЛИ Элемент.Ключ = "TotalSum" Тогда
			//ИЛИ Элемент.Ключ = "TotalsInc" ИЛИ Элемент.Ключ = "TotalsDec" Тогда
			
			//итоги не инициализируем в объекте
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			//Если Элемент.Ключ = "AmountsDec" ИЛИ Элемент.Ключ = "AmountsInc" Тогда
			//	//итоги пропускаем	
			//Иначе
				попытка
					ЭлементКонтента = Content[Элемент.ключ];
				Исключение
					ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(ЭлементКонтента, Элемент.Значение, ОписаниеСтруктурыДанных + "." + Элемент.Ключ);
			//КонецЕсли;
			
		ИначеЕсли Элемент.Ключ = "Items" Тогда 
			
			Для каждого стр из СтруктураДанных.items Цикл 
				Попытка 
					item = content.addItem();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных+" по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(item, стр, ОписаниеСтруктурыДанных + ".Items");
			КонецЦикла;
			
		ИначеЕсли Элемент.Ключ = "PaymentDocuments" Тогда
			
			Для каждого стр из СтруктураДанных.PaymentDocuments Цикл 
				Попытка 
					PaymentDocument = content.addPaymentDocument();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(PaymentDocument, стр, ОписаниеСтруктурыДанных + ".PaymentDocuments");
			КонецЦикла;
			
		ИначеЕсли Элемент.Ключ = "StructedAdditionalInfos" Тогда 
			
			Для каждого стр из СтруктураДанных.StructedAdditionalInfos Цикл 
				Попытка 
					AdditionalInfo = content.addStructedAdditionalInfo();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(AdditionalInfo, стр, ОписаниеСтруктурыДанных + ".StructedAdditionalInfos");
			КонецЦикла;
			
		ИначеЕсли Элемент.Ключ = "OriginalInvoices" Тогда
			
			Для каждого стр из СтруктураДанных.OriginalInvoices Цикл 
				попытка 
					OriginalInvoice = content.addOriginalInvoice();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(OriginalInvoice, стр, ОписаниеСтруктурыДанных + ".OriginalInvoices");
			КонецЦикла;

		ИначеЕсли Элемент.Ключ = "AdditionalInfoId" И ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			Для каждого стр из СтруктураДанных.AdditionalInfoId.StructedAdditionalInfos Цикл
				Попытка 
					AdditionalInfo = content.AdditionalInfoId.addStructedAdditionalInfo();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(AdditionalInfo, стр, ОписаниеСтруктурыДанных + ".StructedAdditionalInfos");
			КонецЦикла;	
			
		ИначеЕсли Элемент.ключ = "TransferBases" Тогда
			
			Для каждого стр из СтруктураДанных.TransferBases Цикл
				Попытка 
					TransferBase = content.addTransferBase();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию "+Элемент.ключ+" для объекта "+описаниеСтруктурыДанных+" по причине: "+ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(TransferBase, стр, описаниеСтруктурыДанных+".TransferBases");
			КонецЦикла;	
			
		ИначеЕсли Элемент.ключ = "Waybills" Тогда
			
			Для каждого стр из СтруктураДанных.Waybills Цикл
				Попытка 
					Waybill = content.addWaybill();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(Waybill, стр, ОписаниеСтруктурыДанных + ".Waybills");
			КонецЦикла;	
			
		ИначеЕсли Элемент.Ключ = "Invoices" Тогда
			
			Для каждого стр из СтруктураДанных.Invoices Цикл
				Попытка 
					Invoice = content.addInvoice();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(Invoice, стр, ОписаниеСтруктурыДанных + ".Invoices");
			КонецЦикла;
			
		ИначеЕсли Элемент.Ключ = "CorrectionBases" Тогда
			
			Для каждого стр из СтруктураДанных.CorrectionBases Цикл
				Попытка 
					CorrectionBase = content.addCorrectionBase();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(CorrectionBase, стр, ОписаниеСтруктурыДанных + ".CorrectionBases");
			КонецЦикла;	
					
		ИначеЕсли Элемент.Ключ = "Signers" Тогда
			
			Для каждого стр из СтруктураДанных.Signers Цикл
				Попытка 
					Signer = content.addSigner();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(Signer, стр, ОписаниеСтруктурыДанных + ".Signer");
			КонецЦикла;	
			
		ИначеЕсли Элемент.Ключ = "CustomDeclarations" Тогда
			
			Попытка
				ЭлементКонтента = content;
			Исключение
				ВызватьИсключение("Не удается инициализировать коллекцию Item для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());	
			КонецПопытки;
			
			Для каждого стр из СтруктураДанных.CustomDeclarations Цикл
				Попытка 
					CustomDeclaration = ЭлементКонтента.addCustomDeclaration();
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(CustomDeclaration, стр, ОписаниеСтруктурыДанных + ".CustomDeclarations");
			КонецЦикла;
			
		ИначеЕсли Элемент.ключ = "InvoiceRevisions" Тогда
			
			Для каждого стр из СтруктураДанных.InvoiceRevisions Цикл
				Попытка 
					InvoiceRevision = content.addInvoiceRevision();  
				Исключение 	
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				ЗаполнитьContentПоСтруктуре(InvoiceRevision, стр, ОписаниеСтруктурыДанных + ".InvoiceRevisions");
			КонецЦикла;
		
		//ИначеЕсли Элемент.Ключ = "AmountsDec" ИЛИ Элемент.Ключ = "AmountsInc" Тогда
			
			//итоги пропускаем
			
		ИначеЕсли Элемент.Ключ = "OriginalValues" ИЛИ Элемент.Ключ = "CorrectedValues" ИЛИ Элемент.Ключ = "AmountsDec" ИЛИ Элемент.Ключ = "AmountsInc" Тогда
			
			Попытка
				ЭлементКонтента = content[Элемент.Ключ];
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
			КонецПопытки;
			ЗаполнитьContentПоСтруктуре(ЭлементКонтента, СтруктураДанных[Элемент.Ключ], ОписаниеСтруктурыДанных + "." + Элемент.Ключ);
			
		Иначе
			
			Попытка
				content[Элемент.Ключ] = ?(ТипЗнч(Элемент.Значение) = Тип("Строка"), СокрЛП(СтрЗаменить(Элемент.Значение, Символы.НПП, "")), Элемент.Значение);
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
			КонецПопытки
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивSubordinateDocumentId(МассивSubordinateDocumentId, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		ЗаполнитьМассивSubordinateDocumentId_УНФ(МассивSubordinateDocumentId, СсылкаНаОбъект, DocumentType);	
	Иначе
		ЗаполнитьМассивSubordinateDocumentId_Типовой(МассивSubordinateDocumentId, СсылкаНаОбъект, DocumentType);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивSubordinateDocumentId_УНФ(МассивSubordinateDocumentId, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "XmlTorg12" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактура.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданныйДокументыОснования.Ссылка
				|ИЗ
				|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
				|ГДЕ
				|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Иначе 
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка
				|ИЗ
				|	Документ.СчетФактура КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
		
		Выборка= Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			docID=  МетодСервера(,"Документ_2_DocumentID", Выборка.Ссылка);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли DocumentType = "ProformaInvoice" Тогда
		
		ВидДокумента= МетодСервера(,"ИмяТипаОбъекта", СсылкаНаОбъект);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект);
			
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;		
			
		ИначеЕсли ВидДокумента = "СчетНаОплату" И ТипЗнч(СсылкаНаОбъект.ДокументОснование) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект.ДокументОснование);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;	 		

		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивSubordinateDocumentId_Типовой(МассивSubordinateDocumentId, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "XmlTorg12" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданныйДокументыОснования.Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
				|ГДЕ
				|	СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Иначе 
			Запрос.Текст= "ВЫБРАТЬ
				|	СчетФактураВыданный.Ссылка
				|ИЗ
				|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
				|ГДЕ
				|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
				|	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ"

		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
		
		Выборка= Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			docID=  МетодСервера(,"Документ_2_DocumentID", Выборка.Ссылка);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли DocumentType = "ProformaInvoice" Тогда
		
		ВидДокумента= МетодСервера(,"ИмяТипаОбъекта", СсылкаНаОбъект);
		
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект);
			
			Если ЗначениеЗаполнено(docID) Тогда
				МассивSubordinateDocumentId.Добавить(docID);
			КонецЕсли;		
			
		ИначеЕсли ВидДокумента = "СчетНаОплатуПокупателю" И МетодСервера(,"СуществуетОбъектМетаданных", "Документ.РеализацияТоваровУслуг.Реквизит.СчетНаОплатуПокупателю") Тогда 
		
			Запрос= Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.РеализацияТоваровУслуг КАК Т ГДЕ СчетНаОплатуПокупателю = &СчетНаОплатуПокупателю И НЕ ПометкаУдаления");
			Запрос.УстановитьПараметр("СчетНаОплатуПокупателю", СсылкаНаОбъект);
			
			Выборка= Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл 
				docID= МетодСервера(,"Документ_2_DocumentID", Выборка.Ссылка);
				Если ЗначениеЗаполнено(docID) Тогда
					МассивSubordinateDocumentId.Добавить(docID);
				КонецЕсли;	 		
			КонецЦикла;

		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивInitialDocumentID(МассивInitialDocumentID, Знач СсылкаНаОбъект, Знач DocumentType)

	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		ЗаполнитьМассивInitialDocumentID_УНФ(МассивInitialDocumentID, СсылкаНаОбъект, DocumentType);	
	Иначе
		ЗаполнитьМассивInitialDocumentID_Типовой(МассивInitialDocumentID, СсылкаНаОбъект, DocumentType);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивInitialDocumentID_УНФ(МассивInitialDocumentID, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "Invoice" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактура.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданныйДокументыОснования.ДокументОснование
			|ИЗ
			|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
		Иначе 
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактура КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Ссылка = &Ссылка";
		КонецЕсли;							 
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Выборка= Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			docID= МетодСервера(,"Документ_2_DocumentID", Выборка.ДокументОснование);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЦикла;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", СсылкаНаОбъект) Тогда 
		
		//ищем ид счета в РНК
		docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект, Истина);
		Если ЗначениеЗаполнено(docID) Тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
				
		//ищем ид счета в документе-основании
		Если НЕ Метаданные.Документы.Найти("СчетНаОплату") = Неопределено Тогда
			
			Запрос= Новый Запрос;
			Запрос.Текст= "ВЫБРАТЬ
              |	СчетНаОплату.Ссылка КАК СчетНаОплату
              |ИЗ
              |	Документ.СчетНаОплату КАК СчетНаОплату
              |ГДЕ
              |	СчетНаОплату.ДокументОснование = &ДокументОснование";
						  
			Запрос.Параметры.Вставить("ДокументОснование", СсылкаНаОбъект);
			
			Выборка= Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				docID= МетодСервера(,"Документ_2_DocumentID", Выборка.СчетНаОплату, Истина);
				Если ЗначениеЗаполнено(docID) Тогда
					МассивInitialDocumentID.Добавить(docID);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивInitialDocumentID_Типовой(МассивInitialDocumentID, Знач СсылкаНаОбъект, Знач DocumentType)
	
	Если DocumentType = "Invoice" Тогда
		
		Запрос= Новый Запрос;
		Если НЕ Метаданные.Документы.СчетФактураВыданный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданныйДокументыОснования.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
			|ГДЕ
			|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
		Иначе 
			Запрос.Текст= 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.Ссылка = &Ссылка";
		КонецЕсли;							 
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		Выборка= Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			docID= МетодСервера(,"Документ_2_DocumentID", Выборка.ДокументОснование);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЦикла;
		
	ИначеЕсли МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЭтоНакладная", СсылкаНаОбъект) Тогда 
		
		//ищем ид счета в РНК
		docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект, Истина);
		Если ЗначениеЗаполнено(docID) Тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
				

		//ищем ид счета в документе-основании
		Если НЕ СсылкаНаОбъект.Метаданные().Реквизиты.Найти("СчетНаОплатуПокупателю") = Неопределено
			И ЗначениеЗаполнено(СсылкаНаОбъект.СчетНаОплатуПокупателю) Тогда 
			
			docID= МетодСервера(,"Документ_2_DocumentID", СсылкаНаОбъект.СчетНаОплатуПокупателю, Истина);
			Если ЗначениеЗаполнено(docID) Тогда
				МассивInitialDocumentID.Добавить(docID);
			КонецЕсли;	  
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеОбОснованииИСФВМассивInitialDocumentID(МассивInitialDocumentID, ДанныеОбОснованииИСФ)
	
	Если ДанныеОбОснованииИСФ.Свойство("СФОснование")
		И ЗначениеЗаполнено(ДанныеОбОснованииИСФ.СФОснование) Тогда
		docID =  МетодСервера(,"Документ_2_DocumentID", ДанныеОбОснованииИСФ.СФОснование);
		Если ЗначениеЗаполнено(docID) тогда
			МассивInitialDocumentID.Добавить(docID);
		КонецЕсли;	  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОТПРАВКА_ДОКУМЕНТОВ_НА_СЕРВЕР_ДИАДОК

&НаКлиенте
Функция ВыполнитьАсинхроннуюОтправкуПакета(ЗаполненныйPackageSendTask, СоответствиеCustomIdСсылке1С) Экспорт
	
	PackageSendTask= ЗаполненныйPackageSendTask.PackageSendTask;
			
	//транзакция по отправке пакета
	//если пакет отправлен, то отправлены все документы пакета,
	//если пакет отправить не удалось, то не отправлен ни один документ пакета
	Попытка
		
		СоответствиеВПФСсылке= PackageSendTask_В_Соответствие(PackageSendTask, СоответствиеCustomIdСсылке1С); 
		
		ПередОтправкойСервер(СоответствиеВПФСсылке, PackageSendTask.DocumentsToSend.Count, PackageSendTask.OperationId);
					
		AsyncTask= PackageSendTask.SendAsync();
		
	Исключение
		
		ТекстОшибки= ОписаниеОшибки();
		
		ПриОшибкеОтправкиСервер(ТекстОшибки, СоответствиеВПФСсылке, PackageSendTask.DocumentsToSend.Count);
						
		ВызватьИсключение ТекстОшибки;
				
	КонецПопытки;
	
	Возврат AsyncTask;
	
КонецФункции

&НаКлиенте
Функция PackageSendTask_В_Соответствие(PackageSendTask, СоответствиеCustomIdСсылке1С) Экспорт
	
	//преобразуем COM в конструкцию, удобную для работы с сервером
	//СоответствиеВПФСсылке 	- Соответствие 	- Ключ: ДокументСсылка, Значение: СоответствиеСущности
	//СоответствиеСущности 		- Соответствие 	- Ключ: DocumentType, Значение: СтруктураХарактеристики 
	//СтруктураХарактеристики 	- Структура 	- Элементы: CustomDocumentID, МассивВПФ
	//МассивВПФ 				- Массив 		- Содержит коллекцию ВПФ, отправляемых для конкретного ДокументСсылка
	
	СоответствиеВПФСсылке = Новый Соответствие;
	
	Для Ц=0 по PackageSendTask.DocumentsToSend.Count - 1 Цикл
		
		DocumentToSend		= PackageSendTask.DocumentsToSend.GetItem(Ц);
		CustomDocumentId	= DocumentToSend.CustomDocumentId;
		
		СтруктураСоответствия	= СоответствиеCustomIdСсылке1С.Получить(CustomDocumentId);
		ДокументСсылка			= СтруктураСоответствия.ДокументСсылкаВ1С;
		ВнешняяПечатнаяФорма	= СтруктураСоответствия.ВнешняяПечатнаяФорма;
		DocumentType			= СтруктураСоответствия.Type;
		
		Если СоответствиеВПФСсылке.Получить(ДокументСсылка) = Неопределено Тогда
			
			//еще не было записи по такому ДокументСсылка вообще
			СоответствиеСущности	= Новый Соответствие;
			СтруктураХарактеристики	= Новый Структура;
			МассивВПФ				= Новый Массив;
			
		Иначе
			
			//уже была запись по такому ДокументСсылка 
			СоответствиеСущности = СоответствиеВПФСсылке.Получить(ДокументСсылка);
			
			Если СоответствиеСущности.Получить(DocumentType) = Неопределено Тогда
				
				//но еще не было записи по такому DocumentType вообще
				СтруктураХарактеристики	= Новый Структура;
				МассивВПФ				= Новый Массив;
									
			Иначе
				
				//и уже была запись по такому DocumentType
				СтруктураХарактеристики		= СоответствиеСущности.Получить(DocumentType);
				ИнициализированМассивВПФ	= СтруктураХарактеристики.Свойство("МассивВПФ");
				
				Если ИнициализированМассивВПФ Тогда
					МассивВПФ = СтруктураХарактеристики.МассивВПФ;	
				Иначе
					МассивВПФ = Новый Массив;	
				КонецЕсли;
								
			КонецЕсли;
																				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			МассивВПФ.Добавить(ВнешняяПечатнаяФорма);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			//только для документа основания
			СтруктураХарактеристики.Вставить("CustomDocumentId", CustomDocumentId);
		КонецЕсли;
		СтруктураХарактеристики.Вставить("МассивВПФ", МассивВПФ);
		
		СоответствиеСущности.Вставить(DocumentType, СтруктураХарактеристики);
		
		СоответствиеВПФСсылке.Вставить(ДокументСсылка, СоответствиеСущности);
		
	КонецЦикла;
		
	Возврат СоответствиеВПФСсылке; 
	
КонецФункции

&НаСервере
Процедура ПередОтправкойСервер(Знач СоответствиеВПФСсылке, Знач КоличествоДокументовВПакете, Знач OperationIdПакета) Экспорт
	
	//Признак условно отправленный для формализованного документа
	Для каждого ЭлементСоответствия из СоответствиеВПФСсылке Цикл
				
		ДокументСсылка		 = ЭлементСоответствия.Ключ;
		СоответствиеСущности = ЭлементСоответствия.Значение;
		
		Для каждого ЭлементСущности из СоответствиеСущности Цикл
			
			DocumentType			= ЭлементСущности.Ключ;
			СтруктураХарактеристики	= ЭлементСущности.Значение; 
			
			Если СтруктураХарактеристики.Свойство("CustomDocumentId") Тогда 
			
				CustomDocumentId = СтруктураХарактеристики.CustomDocumentId;
			
				УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentType, CustomDocumentId);
				
			КонецЕсли;
			
		КонецЦикла;
								
	КонецЦикла;
	
	//Признак условно отправленный для внешней печатной формы
	МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ПередАсинхроннойОтправкой", СоответствиеВПФСсылке);
							
	Если КоличествоДокументовВПакете > 1 
		ИЛИ КоличествоДокументовВПакете = 1 И НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.НачалоАсинхроннойОтправки", УровеньЖурналаРегистрации.Информация, , , OperationIdПакета);
	Иначе
		ЗаписьЖурналаРегистрации("Диадок.Отправка.НачалоАсинхроннойОтправки", УровеньЖурналаРегистрации.Информация, ДокументСсылка.Метаданные(), ДокументСсылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакУсловноОтправленныйДляДокумента(ДокументСсылка, DocumentType, CustomDocumentId) Экспорт
	
	Если ЗначениеЗаполнено(DocumentType) 
		И (DocumentType = "ProformaInvoice" 
			ИЛИ DocumentType = "NonformalizedProforma") Тогда
			
		НаименованиеИдентификатораСвойства = МетодСервера(, "ИдентификаторСвойстваДиадокCustomDocumentIdСчет");
	Иначе
		НаименованиеИдентификатораСвойства = МетодСервера(, "ИдентификаторСвойстваДиадокCustomDocumentId");
	КонецЕсли;
	
	МетодСервера(, "УстановитьЗначениеСвойства", ДокументСсылка, НаименованиеИдентификатораСвойства, , CustomDocumentId);	
	
КонецПроцедуры

&НаСервере
Процедура ПриОшибкеОтправкиСервер(Знач ТекстОшибки, Знач СоответствиеВПФСсылке, Знач КоличествоДокументовВПакете) Экспорт
	
	Если Найти(ТекстОшибки, "##200") = 0 И Найти(ТекстОшибки, "##400") = 0 Тогда
		
		Для каждого ЭлементСоответствия из СоответствиеВПФСсылке Цикл
			ДокументСсылка= 			ЭлементСоответствия.Ключ;
			
			МассивДополнительныхВПФ= МетодСервера(, "МассивВПФИзСоответствиеВПФСсылке", ЭлементСоответствия);
					
			Если МассивДополнительныхВПФ.Количество()>0 Тогда
				МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ОбнулитьПризнакУсловноОтправленныйДляПакета", ДокументСсылка, МассивДополнительныхВПФ, "Н");		
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Диадок.ОтправкаПакета.ОшибкаЗапускаАнинхроннойОтправки", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтправленныйПакетДокументов(Package, СоответствиеCustomIdСсылке1С, ПараметрыСогласования = Неопределено) Экспорт
			
	МассивДокументовПакета= Новый Массив;
	
	Для Ц=0 по Package.Documents.Count - 1 Цикл
		
		Document= Package.Documents.GetItem(Ц);
		
		CustomDocumentId= Document.CustomDocumentId;
			
		СтруктураСоответствия= СоответствиеCustomIdСсылке1С.Получить(Document.CustomDocumentId);
		
		Если НЕ СтруктураСоответствия = Неопределено Тогда
			
			СтруктураПараметры= СтруктураСоответствия;
						
			СтруктураПараметры.Вставить("DocumentId", 		 Document.DocumentId);
			СтруктураПараметры.Вставить("OrganizationId", 	 Document.OrganizationId);
						
			МассивДокументовПакета.Добавить(СтруктураПараметры);
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТекстОшибкиВыполнения= ПослеАсинхроннойОтправкиСервер(МассивДокументовПакета);	
	
	Если ЗначениеЗаполнено(ТекстОшибкиВыполнения) Тогда
		ВызватьИсключение(ТекстОшибкиВыполнения);
	Иначе
		Если НЕ ПараметрыСогласования = Неопределено Тогда
			МетодКлиента("Модуль_Клиент", "ОтправитьНаОбработку", Package, ПараметрыСогласования);
		КонецЕсли;
	КонецЕсли;		
	                                                                           
КонецПроцедуры

&НаСервере
Функция ПослеАсинхроннойОтправкиСервер(Знач МассивДокументовПакета)
	
	ТекстОшибкиВыполнения= "";
	
	Для каждого ДокументПакета из МассивДокументовПакета Цикл
		
		ТекстОшибки= "";
		
		Попытка
			
			Если ЗначениеЗаполнено(ДокументПакета.ВнешняяПечатнаяФорма) Тогда
				МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ОбнулитьПризнакУсловноОтправленныйДляДокумента", ДокументПакета.ДокументСсылкаВ1С, ДокументПакета.ВнешняяПечатнаяФорма, "В");	
			Иначе 
				
				Если ЗначениеЗаполнено(ДокументПакета.ДокументСсылкаВ1С) Тогда
					ПослеОтправкиДокумента(ДокументПакета);
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки= ОписаниеОшибки();
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибкиВыполнения= ТекстОшибкиВыполнения + ?(ЗначениеЗаполнено(ТекстОшибкиВыполнения), Символы.ПС, "") + ТекстОшибки;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстОшибкиВыполнения; 
	
КонецФункции

#КонецОбласти

#Область ВСПОМОГАТЕЛЬНЫЕ_ФУНКЦИИ_И_ПРОЦЕДУРЫ

&НаКлиенте
Процедура ДобавитьЗаписьВСоответствиеCustomIdСсылке1С(СоответствиеCustomIdСсылке1С, CustomDocumentId, ПараметрыДокумента)
	
	Если СоответствиеCustomIdСсылке1С[CustomDocumentId] = Неопределено Тогда
		
		СтруктураСоответствия = Новый Структура;
		
		СтруктураСоответствия.Вставить("Type", 							ПараметрыДокумента.DocumentType);
		СтруктураСоответствия.Вставить("ФункцияУПД",					ПараметрыДокумента.ФункцияУПД);
		СтруктураСоответствия.Вставить("ДокументСсылкаВ1С", 			ПараметрыДокумента.ДокументСсылка);
		СтруктураСоответствия.Вставить("Организация", 					ПараметрыДокумента.Организация);
		СтруктураСоответствия.Вставить("ЭтоВПФ", 						ЗначениеЗаполнено(ПараметрыДокумента.ВнешняяПечатнаяФорма));
		СтруктураСоответствия.Вставить("ВнешняяПечатнаяФорма", 			ПараметрыДокумента.ВнешняяПечатнаяФорма);
		СтруктураСоответствия.Вставить("IdСтрокиТаблицыДокументов", 	ПараметрыДокумента.СвязующийИдентификаторСтроки);
		СтруктураСоответствия.Вставить("ЭтоКорректировкаИсправление", 	ПараметрыДокумента.ЭтоКорректировкаИсправление);
		СтруктураСоответствия.Вставить("ЭтоФайл", 						ПараметрыДокумента.ЭтоФайл);
		СтруктураСоответствия.Вставить("ФорматОтправки", ПараметрыДокумента.ФорматОтправки);
		
		СоответствиеCustomIdСсылке1С.Вставить(CustomDocumentId, СтруктураСоответствия);
		
	КонецЕсли;
			
КонецПроцедуры

// См. функцию Модуль_ИнтеграцияУниверсальный.ИмяСвойстваСлужебнаяИнформация()
// 
// Возвращаемое значение:
//  Строка.
//
&НаКлиентеНаСервереБезКонтекста
Функция ИмяСвойстваСлужебнаяИнформация()
	
	Возврат ВРег("СлужебнаяИнформация");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСлужебноеСвойствоСтруктурыКонтента(Знач ИмяСвойства)
	
	Результат = Ложь;
	
	ИмяСвойства = ВРег(ИмяСвойства);
	
	Если ИмяСвойства = ИмяСвойстваСлужебнаяИнформация() // это зарезервированное имя свойства для передачи произвольных данных в структуру контента
		Или ИмяСвойства = "ССЫЛКАНАЕИ" // это зарезервированное имя свойства для проверки единицы измерения
		Или Прав(ИмяСвойства, 6) = "ССЫЛКА"  // для обратной совместимости с версиями модуля до 5.28 включительно
		Или ИмяСвойства = "ОШИБКИВДАННЫХ"  // ошибки валидации, найденные на этапе сбора контента
		Или Ложь Тогда 
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция БазовыеФорматыНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция БазовыеФорматыНаСервере()
	
	Результат = МетодСервера(, "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыКонтентаНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипыКонтентаНаСервере()
	
	Результат = МетодСервера(, "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = МетодКлиента("Модуль_Клиент", "СвойствоСтруктуры"
		, Структура
		, Ключ
		, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли