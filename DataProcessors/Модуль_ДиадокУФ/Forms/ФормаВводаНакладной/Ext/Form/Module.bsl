
&НаКлиенте
Перем ФормаДокумента Экспорт;
&НаКлиенте
Перем ЭДОбъект Экспорт;
&НаКлиенте
Перем СтруктураЭДОбъект Экспорт;
&НаКлиенте
Перем ТекущийДоговорКонтрагента Экспорт;
&НаКлиенте
Перем ТекущееСоглашениеКонтрагента Экспорт;

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ФорматЭлектронногоДокумента(Document)
	
	Результат = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", Document);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция БазовыеФорматы()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУПД(ИмяТипа)
	
	ТипыУПД = Новый Структура;
	ТипыУПД.Вставить("UniversalTransferDocument");
	ТипыУПД.Вставить("UniversalTransferDocumentRevision");
	
	Результат = ТипыУПД.Свойство(ИмяТипа);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НоменклатураКонтрагентаПоСтрокеТЧ(ВладелецНоменклатуры, СтрокаТЧ)
	
	Item = СтрокаТЧ.XmlTorg12_Item.Получить(0).Значение;
	
	Результат = МенеджерИнтеграции_НоваяНоменклатураКонтрагента(Контрагент);
	Результат.Наименование = Item.Name;
	Результат.Артикул = Item.NomenclatureArticle;
	Результат.Код = Item.Code;
	Результат.ЕдиницаИзмерения = Item.UnitName;
	Результат.ЕдиницаИзмеренияКод = Item.UnitCode;
	Результат.СтавкаНДС = Item.TaxRate;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНоменклатуруИнформационнойБазы(ВладелецНоменклатуры, СтрокаТЧ)
	
	НоменклатураКонтрагента = НоменклатураКонтрагентаПоСтрокеТЧ(ВладелецНоменклатуры, СтрокаТЧ);
	НоменклатураИБ = МетодСервера(, "ПолучитьНоменклатуруИнформационнойБазы", НоменклатураКонтрагента);
	
	СтрокаТЧ.Номенклатура = НоменклатураИБ.Номенклатура;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВозвратТоваровОперацияПоУмолчаниюБП30()
	
	МетаданныеДокумента = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	РеквизитВидОперации = МетаданныеДокумента.Реквизиты.ВидОперации;
	
	Результат = РеквизитВидОперации.ЗначениеЗаполнения;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция МенеджерИнтеграции_ПрикладноеЗначениеСтавкиНДС(ПредставлениеСтавки)
	
	Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПрикладноеЗначениеСтавкиНДС"
		, ПредставлениеСтавки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция РеквизитыСоглашения(Соглашение)
	
	ТребуемыеРеквизиты = Новый Структура;
	ТребуемыеРеквизиты.Вставить("ИспользуютсяДоговорыКонтрагентов");
	ТребуемыеРеквизиты.Вставить("Склад");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, ТребуемыеРеквизиты);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

	&НаСервере
	Функция ЧислоИзXML(Значение)
		Если ПустаяСтрока(Значение) Тогда
			Возврат 0;
		Иначе
			Возврат Число(Значение);
		КонецЕсли;
	КонецФункции
	
	&НаСервере
	Процедура ЗаполнитьСтрокуДанными1С(СтрокаТЧ, ВладелецНоменклатуры)
		
		Item = СтрокаТЧ.XmlTorg12_Item.Получить(0).Значение;
		
		Если СокрЛП(ВидОперации) = "Объекты строительства" Тогда
			//типизируем пустой ссылкой на объекты строительства
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				СтрокаТЧ.Номенклатура		= Справочники.ОбъектыСтроительства.ПустаяСсылка();
				СтрокаТЧ.ЕдиницаИзмерения	= "";
			Иначе
				СтрокаТЧ.Номенклатура		= Справочники.Номенклатура.ПустаяСсылка();
				СтрокаТЧ.ЕдиницаИзмерения	= "";
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьНоменклатуруИнформационнойБазы(ВладелецНоменклатуры, СтрокаТЧ);
			
			ЗаполнитьРеквизитыНоменклатурыВСтрокеТабличнойЧасти(СтрокаТЧ);
			
			Если ИспользоватьЕдиницуИзмерения И ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				
				СтрокаGUID = МетодСервера(,"ПолучитьЗначениеСвойства", СтрокаТЧ.Номенклатура, МетодСервера(,"ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры"));
				Если ЗначениеЗаполнено(СтрокаGUID) Тогда
					
					Если МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.ЕдиницыИзмерения") Тогда
						ИмяСправочника = "ЕдиницыИзмерения";
					ИначеЕсли МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.УпаковкиЕдиницыИзмерения") Тогда
						ИмяСправочника = "УпаковкиЕдиницыИзмерения";
					ИначеЕсли МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.КлассификаторЕдиницИзмерения") Тогда
						ИмяСправочника = "КлассификаторЕдиницИзмерения";
					Иначе
						ИмяСправочника = "";
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(ИмяСправочника) Тогда
						
						ЕдиницаИзмерения = Вычислить("Справочники."+ИмяСправочника+".ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаGUID))");
						
						Если МетодСервера(,"СсылкаСуществует", ЕдиницаИзмерения) Тогда
							СтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
					СтрокаТЧ.ЕдиницаИзмерения= ItemStruct_2_ЕдиницаИзмерения(Item, СтрокаТЧ.Номенклатура);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПредставлениеСтавки = Item.TaxRate;
		СтрокаТЧ.СтавкаНДС = МенеджерИнтеграции_ПрикладноеЗначениеСтавкиНДС(ПредставлениеСтавки);
		
	КонецПроцедуры
	
	// Возвращает значения основных реквизитов номенклатуры.
	//
	// Параметры:
	//  Номенклатура - ЛюбаяСсылка - номенклатура, основное средство, объект строительства и т.д.
	// 
	// Возвращаемое значение:
	//  Структура - содержит ключи:
	//    * Код - Строка - код номенклатуры;
	//    * Артикул - Строка - артикул номенклатуры;
	//    * ИспользоватьХарактеристики - Булево - Истина, если используются характеристики номенклатуры;
	//    * ЕдиницаИзмерения - ЛюбаяСсылка, Неопределено - единица измерения номенклатуры;
	//
	&НаСервереБезКонтекста
	Функция РеквизитыНоменклатуры(Номенклатура)
		
		Результат = Новый Структура;
		Результат.Вставить("ИспользоватьХарактеристики", Ложь);
		Результат.Вставить("Код", "");
		Результат.Вставить("Артикул", "");
		Результат.Вставить("ЕдиницаИзмерения", Неопределено);
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ОбъектМетаданных = Номенклатура.Метаданные();
		
		ТребуемыеРеквизиты = Новый Структура;
		Если ЕстьРеквизитМетаданных(ОбъектМетаданных, "Код", Истина) Тогда
			ТребуемыеРеквизиты.Вставить("Код");
		КонецЕсли;
		
		Если ЕстьРеквизитМетаданных(ОбъектМетаданных, "Артикул") Тогда
			ТребуемыеРеквизиты.Вставить("Артикул");
		КонецЕсли;
		
		Если ЕстьРеквизитМетаданных(ОбъектМетаданных, "ЕдиницаИзмерения") Тогда
			ТребуемыеРеквизиты.Вставить("ЕдиницаИзмерения");
		КонецЕсли;
		
		Если ЕстьРеквизитМетаданных(ОбъектМетаданных, "ИспользоватьХарактеристики") Тогда // УНФ
			
			ТребуемыеРеквизиты.Вставить("ИспользоватьХарактеристики");
			
		ИначеЕсли ЕстьРеквизитМетаданных(ОбъектМетаданных, "ИспользованиеХарактеристик") Тогда // УТ/КА/ERP
			
			ТребуемыеРеквизиты.Вставить("ИспользоватьХарактеристики", 	"ВЫБОР 
																		|	КОГДА ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
																		|										ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
																		|										ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
																		|	ТОГДА ИСТИНА
																		|ИНАЧЕ ЛОЖЬ
																		|КОНЕЦ");
			
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, ТребуемыеРеквизиты);
		ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
		
		Возврат Результат;
		
	КонецФункции
	
	// Проверяет существование реквизита метаданных.
	//
	// Параметры:
	//  ОбъектМетаданных				 - ОбъектМетаданных	 - метаданные произвольного объекта.
	//  ИмяРеквизита					 - Строка			 - имя проверяемого реквизита.
	//  ПроверятьСтандартныеРеквизиты	 - Булево			 - Истина, если при проверке следует учитывать стандартные реквизиты (Код, Наименование и т.д.)
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если реквизит с заданным именем существует.
	//
	&НаСервереБезКонтекста
	Функция ЕстьРеквизитМетаданных(ОбъектМетаданных, ИмяРеквизита, ПроверятьСтандартныеРеквизиты = Ложь)
		
		Если ОбъектМетаданных = Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		ЕстьРеквизит = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
		
		Если Не ЕстьРеквизит И ПроверятьСтандартныеРеквизиты Тогда 
			
			КоллекцияРеквизитов = ОбъектМетаданных.СтандартныеРеквизиты;
			
			Для Каждого СтандартныйРеквизит Из КоллекцияРеквизитов Цикл 
				
				Если ВРег(СтандартныйРеквизит.Имя) = ВРег(ИмяРеквизита) Тогда 
					ЕстьРеквизит = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ЕстьРеквизит;
		
	КонецФункции
	
	&НаСервере
	Процедура СопоставитьНоменклатуру()
		
		ВладелецНоменклатуры = ПолучитьПартнера(Контрагент);
		Если Не ЗначениеЗаполнено(ВладелецНоменклатуры) Тогда
			ВладелецНоменклатуры = Контрагент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВладелецНоменклатуры) Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			НоменклатураКонтрагента = НоменклатураКонтрагентаПоСтрокеТЧ(ВладелецНоменклатуры, СтрокаТЧ);
			
			НоменклатураИБ = МенеджерИнтеграции_НоваяНоменклатураИнформационнойБазы(СтрокаТЧ.Номенклатура);
			
			МенеджерИнтеграции_ЗаписатьСопоставлениеНоменклатуры(НоменклатураКонтрагента, НоменклатураИБ);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура МенеджерИнтеграции_ЗаписатьСопоставлениеНоменклатуры(НоменклатураКонтрагента, НоменклатураИБ)
		
		МетодСервера("Модуль_ИнтеграцияУниверсальный", "ЗаписатьСопоставлениеНоменклатуры"
			, НоменклатураКонтрагента
			, НоменклатураИБ);
		
	КонецПроцедуры
	
	&НаСервере
	Функция МенеджерИнтеграции_НоваяНоменклатураКонтрагента(Владелец = Неопределено, Идентификатор = Неопределено)
		
		Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "НоваяНоменклатураКонтрагента"
			, Владелец
			, Идентификатор);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция МенеджерИнтеграции_НоваяНоменклатураИнформационнойБазы(Номенклатура = Неопределено, Характеристика = Неопределено, Упаковка = Неопределено)
		
		Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "НоваяНоменклатураИнформационнойБазы"
			, Номенклатура
			, Характеристика
			, Упаковка);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьСоответствиеСоглашения(УстанавливаемоеСоглашение, СоглашениеСвойство)
		
		МетодСервера(,"УстановитьЗначениеСвойства", УстанавливаемоеСоглашение, "DDPact", "Соглашение", СоглашениеСвойство);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьСоответствиеДоговора(УстанавливаемыйДоговор, ДоговорСвойство)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" И ЗначениеЗаполнено(Соглашение) Тогда
			УстановитьСоответствиеСоглашения(Соглашение, СокрЛП(Контрагент.УникальныйИдентификатор()));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УстанавливаемыйДоговор) Тогда
			МетодСервера(,"УстановитьЗначениеСвойства", УстанавливаемыйДоговор, "DDContract", "Договор", ДоговорСвойство);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьСчетаРасчетовСКонтрагентом(ФормаДокумента)
		
		ДокументОбъект = ФормаДокумента.Объект;
		
		СчетаРасчетов = МетодСервера(, "ПолучитьСчетаРасчетов", ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		
		Если ЗначениеЗаполнено(СчетаРасчетов.Поставки) Тогда 
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаРасчетов.Поставки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаРасчетов.Авансы) Тогда 
			ДокументОбъект.СчетУчетаРасчетовПоАвансам = СчетаРасчетов.Авансы;
		КонецЕсли;
		
		ФормаДокумента.ТребуетсяСчетФактура= Истина;
		
		ЭтоВозврат = (ВидОперации = ВозвратТоваровОперацияПоУмолчаниюБП30());
		Если Не ЭтоВозврат Тогда
			Если ФормаДокумента.Элементы.Найти("ГруппаСчетФактураСтраницы") <> Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаСчетФактураСтраницы.ТекущаяСтраница= ФормаДокумента.Элементы.ГруппаЗарегистрироватьСчетФактуру;
			ИначеЕсли ФормаДокумента.Элементы.Найти("ГруппаСчетФактура") <> Неопределено Тогда // "ПоступлениеДопРасходов"
				ФормаДокумента.Элементы.ГруппаСчетФактура.ТекущаяСтраница= ФормаДокумента.Элементы.ГруппаЗарегистрироватьСчетФактуру;
			Иначе
				ФормаДокумента.Элементы.СчетФактураКнопка.Видимость= Истина;
				ФормаДокумента.Элементы.СчетФактураСсылка.Видимость= Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаСервере
	Функция БухгалтерскийУчетПереопределяемыйСчетаУчетаОбъектовСтроительства(Организация, ОбъектСтроительства)
		Возврат Вычислить("БухгалтерскийУчетПереопределяемый.СчетаУчетаОбъектовСтроительства(Организация, ОбъектСтроительства)");
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьТабличнуюЧастьДокумента(ФормаДокумента, Знач ДопДанныеССервера)

		ДокументОбъект=	ФормаДокумента.Объект;
		ТолькоУслуги= 	ТабличнаяЧасть.НайтиСтроки(Новый Структура("Тип", "Товар")).Количество()=0;
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда 
				
				Если ВидОперации = "ПоступлениеУслугИПрочихАктивов" Тогда
					
					//документ "Поступление услуг и прочих активов"
					
					СтрОбъект =	ДокументОбъект.Расходы.Добавить();
					
					СтрОбъект.Содержание	= СтрокаТЧ.НоменклатураИзЭД;
					СтрОбъект.Количество	= СтрокаТЧ.Количество;
					СтрОбъект.Цена			= СтрокаТЧ.Цена;
					СтрОбъект.Сумма			= СтрокаТЧ.Сумма; 
					СтрОбъект.СтавкаНДС		= СтрокаТЧ.СтавкаНДС;
					СтрОбъект.СуммаНДС		= СтрокаТЧ.СуммаНДС;
					СтрОбъект.СуммаСНДС		= СтрокаТЧ.Всего;					
					СтрОбъект.СтатьяРасходов= ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
					
				Иначе
					
					ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры."+СтрокаТЧ.Тип);
					ТипНоменклатуры = ?(ЗначениеЗаполнено(ТипНоменклатуры), ТипНоменклатуры, ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
					
					ДанныеСтрокиТЧ = Новый Структура;
					ДанныеСтрокиТЧ.Вставить("Номенклатура"				, СтрокаТЧ.Номенклатура);
					ДанныеСтрокиТЧ.Вставить("НоменклатураПоставщика"	, СтрокаТЧ.НоменклатураПоставщика);
					ДанныеСтрокиТЧ.Вставить("Артикул"					, СтрокаТЧ.Артикул);
					ДанныеСтрокиТЧ.Вставить("ТипНоменклатуры"			, ТипНоменклатуры); // #TODO: заполнять из карточки номенклатуры
					ДанныеСтрокиТЧ.Вставить("ХарактеристикиИспользуются", СтрокаТЧ.ИспользоватьХарактеристикиНоменклатуры);
					ДанныеСтрокиТЧ.Вставить("Склад"						, ДокументОбъект.Склад);
					ДанныеСтрокиТЧ.Вставить("Количество"				, СтрокаТЧ.Количество);
					ДанныеСтрокиТЧ.Вставить("КоличествоУпаковок"		, СтрокаТЧ.Количество);
					ДанныеСтрокиТЧ.Вставить("Цена"						, СтрокаТЧ.Цена);
					ДанныеСтрокиТЧ.Вставить("СтавкаНДС"					, СтрокаТЧ.СтавкаНДС);
					
					ДанныеСтрокиТЧ.Вставить("Сумма"		, СтрокаТЧ.Сумма);
					ДанныеСтрокиТЧ.Вставить("СуммаНДС"	, СтрокаТЧ.СуммаНДС);
					ДанныеСтрокиТЧ.Вставить("СуммаСНДС"	, СтрокаТЧ.Всего);
					
					ДанныеСтрокиТЧ.Вставить("БезВозвратнойТары"			, Истина);
					ДанныеСтрокиТЧ.Вставить("СуммаБезВозвратнойТары"	, СтрокаТЧ.Сумма);
					ДанныеСтрокиТЧ.Вставить("СуммаНДСБезВозвратнойТары"	, СтрокаТЧ.СуммаНДС);
					ДанныеСтрокиТЧ.Вставить("СуммаСНДСБезВозвратнойТары", СтрокаТЧ.Всего);
					
					Если ДопДанныеССервера.Свойство("ВидЦеныПоставщика") Тогда 
						ДанныеСтрокиТЧ.Вставить("ВидЦеныПоставщика", ДопДанныеССервера.ВидЦеныПоставщика);
					КонецЕсли;
					
					Если ЗаполнениеГТД И СтрокаТЧ.Тип = "Товар" Тогда
						
						КодСтраны 	= МетодСервера(, "ЗначениеСвойстваЭлементаXmlTorg12", СтрокаТЧ.XmlTorg12_Item, "CountryCode");
						НомерГТД 	= СтрокаТЧ.ГТД;
						Страна 		= СтрокаТЧ.СтранаПроисхождения;
						
						ДанныеСтрокиТЧ.Вставить("ВедетсяУчетПоГТД"	, Истина);
						ДанныеСтрокиТЧ.Вставить("ТипНоменклатуры"	, ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
						ДанныеСтрокиТЧ.Вставить("НомерГТД"			, НайтиИлиСоздатьГТД(НомерГТД, Страна, КодСтраны));
						
						Если Найти(Объект.ПараметрыКлиентСервер.СинонимКонфигурации, "ERP")=0 Тогда
							ДанныеСтрокиТЧ.Вставить("СтранаПроисхождения", СтрокаТЧ.СтранаПроисхождения);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НалоговыйАгент Тогда 
						
						// Стандартное поведение в КА/ERP - установить ставку 18/118, а сумму НДС очистить
						ДанныеСтрокиТЧ.Вставить("СтавкаНДС"	, ?(ЭДОбъект.DocumentDate >= Дата(2019,1,1), ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120"),
																										 ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118")));
						ДанныеСтрокиТЧ.Вставить("СуммаНДС"	, 0);
						ДанныеСтрокиТЧ.Вставить("СуммаСНДС"	, ДанныеСтрокиТЧ.Сумма);
						ДанныеСтрокиТЧ.Вставить("СуммаНДСБезВозвратнойТары"	, ДанныеСтрокиТЧ.СуммаНДС);
						ДанныеСтрокиТЧ.Вставить("СуммаСНДСБезВозвратнойТары", ДанныеСтрокиТЧ.СуммаСНДС);
						
					КонецЕсли;
					
					Если ДанныеСтрокиТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
						ДанныеСтрокиТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
						ДанныеСтрокиТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
							//Или ЗначениеЗаполнено(ТекущаяСтрока.Назначение)  // не определяется нигде
							Тогда
							
						ДанныеСтрокиТЧ.Вставить("СписатьНаРасходы",		Ложь);
						ДанныеСтрокиТЧ.Вставить("СтатьяРасходов",		ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка"));
						ДанныеСтрокиТЧ.Вставить("АналитикаРасходов",	Неопределено);
						ДанныеСтрокиТЧ.Вставить("Подразделение",		ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
						
					ИначеЕсли ДанныеСтрокиТЧ.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
						
						ДанныеСтрокиТЧ.Вставить("СписатьНаРасходы",		Истина);
						
					КонецЕсли;
					
					ТекущаяСтрока = ДокументОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСтрокиТЧ);
					
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда 
				
				Если ВидОперации = "ПоступлениеМЗ" Тогда
					
					СтрОбъект=	ДокументОбъект.Материалы.Добавить();
					СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество=		СтрокаТЧ.Количество;
					
				ИначеЕсли ВидОперации = "ПоступлениеУслугРабот" Тогда
					
					СтрОбъект=	ДокументОбъект.УслугиИРаботы.Добавить();
					СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество=		СтрокаТЧ.Количество;
					
				ИначеЕсли ВидОперации = "ПоступлениеОС" Тогда
					
					СтрОбъект=	ДокументОбъект.КапВложения.Добавить();
					СтрОбъект.ВнеоборотныйАктив= СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество= 		 СтрокаТЧ.Количество;
					
				КонецЕсли;

			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
				Если ТолькоУслуги И НЕ ДокументОбъект.ВидОперации= ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя") Тогда
					СтрОбъект= ДокументОбъект.Расходы.Добавить();
				ИначеЕсли СтрокаТЧ.Тип = "Услуга"
					И ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика") Тогда
					СтрОбъект = ДокументОбъект.Расходы.Добавить();
				Иначе
					СтрОбъект= ДокументОбъект.Запасы.Добавить();
				КонецЕсли;
				
				СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
				СтрОбъект.ЕдиницаИзмерения=	СтрокаТЧ.ЕдиницаИзмерения;
				СтрОбъект.Количество=		СтрокаТЧ.Количество;
				СтрОбъект.Цена=				СтрокаТЧ.Цена;
								
				Если ЗаполнениеГТД И СтрокаТЧ.Тип = "Товар" Тогда
						
					КодСтраны 	= МетодСервера(, "ЗначениеСвойстваЭлементаXmlTorg12", СтрокаТЧ.XmlTorg12_Item, "CountryCode");
					НомерГТД 	= СтрокаТЧ.ГТД;
					Страна 		= СтрокаТЧ.СтранаПроисхождения;
						
					СтрОбъект.НомерГТД				= НайтиИлиСоздатьГТД(НомерГТД, Страна, КодСтраны);
					СтрОбъект.СтранаПроисхождения	= Страна; 
					
				КонецЕсли;
				
				СтрОбъект.Сумма=		СтрокаТЧ.Сумма;
				СтрОбъект.СуммаНДС=		СтрокаТЧ.СуммаНДС;
				СтрОбъект.СтавкаНДС=	СтрокаТЧ.СтавкаНДС;
				
				СтрОбъект.Всего= 		СтрОбъект.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрОбъект.СуммаНДС);
							
			Иначе
				Если СокрЛП(ВидОперации) = "В переработку" Тогда
					Если СтрокаТЧ.Тип = "Товар" Тогда
						СтрОбъект=					ДокументОбъект.Товары.Добавить();
						СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
						СтрОбъект.ЕдиницаИзмерения=	СтрокаТЧ.ЕдиницаИзмерения;
						СтрОбъект.Количество=		СтрокаТЧ.Количество;
						СтрОбъект.КоличествоМест=	СтрокаТЧ.Количество;
						СтрОбъект.Цена=				СтрокаТЧ.Цена;
					КонецЕсли;
				ИначеЕсли СокрЛП(ВидОперации) = "Объекты строительства" Тогда
					Если СтрокаТЧ.Тип = "Услуга" Тогда
						СтрОбъект=					ДокументОбъект.Услуги.Добавить();
						СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
						СтрОбъект.Количество=		СтрокаТЧ.Количество;
						СтрОбъект.Цена=				СтрокаТЧ.Цена;
					ИначеЕсли СтрокаТЧ.Тип = "Объект стр" Тогда
						СтрОбъект=						ДокументОбъект.ОбъектыСтроительства.Добавить();
						СтрОбъект.ОбъектСтроительства=	СтрокаТЧ.Номенклатура;
					КонецЕсли;
					
				ИначеЕсли СокрЛП(ВидОперации) = "ПоступлениеДопРасходов" Тогда
					// Для документа Поступление доп. расходов табличную часть не заполняем,
					// т.к. нет известных кейсов от бизнеса
					Продолжить;
								
				Иначе
					ОперацияВозврат = ВозвратТоваровОперацияПоУмолчаниюБП30();
					Если СтрокаТЧ.Тип = "Оборудование" Тогда
						СтрОбъект=					ДокументОбъект.Оборудование.Добавить();
						СтрОбъект.ЕдиницаИзмерения=	СтрокаТЧ.ЕдиницаИзмерения;
					ИначеЕсли НЕ СокрЛП(ВидОперации) = "Услуги" 
						И ((СтрокаТЧ.Тип = "Товар") Или (ВидОперации = ОперацияВозврат)) Тогда
						
						СтрОбъект=					ДокументОбъект.Товары.Добавить();
						Если СтрОбъект.свойство("ЕдиницаИзмерения") тогда 
							СтрОбъект.ЕдиницаИзмерения=	СтрокаТЧ.ЕдиницаИзмерения;
						КонецЕсли;
						
					Иначе
						СтрОбъект=				ДокументОбъект.Услуги.Добавить();
						СтрОбъект.Содержание=	СтрокаТЧ.НоменклатураИзЭД;
					КонецЕсли;
					СтрОбъект.Номенклатура=		СтрокаТЧ.Номенклатура;
					СтрОбъект.Количество=		СтрокаТЧ.Количество;
					СтрОбъект.Цена=				СтрокаТЧ.Цена;
				КонецЕсли;
				
				Если ЗаполнениеГТД И СтрокаТЧ.Тип = "Товар" Тогда
						
					КодСтраны 	= МетодСервера(, "ЗначениеСвойстваЭлементаXmlTorg12", СтрокаТЧ.XmlTorg12_Item, "CountryCode");
					НомерГТД 	= СтрокаТЧ.ГТД;
					Страна 		= СтрокаТЧ.СтранаПроисхождения;
						
					СтрОбъект.НомерГТД				= НайтиИлиСоздатьГТД(НомерГТД, Страна, КодСтраны);
					СтрОбъект.СтранаПроисхождения	= Страна; 
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрОбъект.Сумма=		СтрокаТЧ.Сумма;
			СтрОбъект.СуммаНДС=		СтрокаТЧ.СуммаНДС;
			СтрОбъект.СтавкаНДС=	СтрокаТЧ.СтавкаНДС;
			
			Если СтрокаТЧ.НДСИсчисляетсяНалоговымАгентом И Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда 
				// Согласно п. 8 ст. 161 НК РФ указывается расчетная ставка 18/118
				// По материалам сайта 1С:ИТС в ПТУ следует указывать ставку 18
				// © https://its.1c.ru/db/accnds#content:1599:bp30corp
				// с 01.01.2019 ставка 20
				Если ЭДОбъект.DocumentDate >= Дата(2019,1,1) Тогда
					СтрОбъект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
					СтрОбъект.СуммаНДС 	= СтрокаТЧ.Сумма * 20 / 100;
				Иначе
					СтрОбъект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18");
					СтрОбъект.СуммаНДС 	= СтрокаТЧ.Сумма * 18 / 100;					
				КонецЕсли; 
			КонецЕсли;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				СтрОбъект.Всего=	СтрокаТЧ.Всего;
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда 
				СтрОбъект.Всего =	СтрОбъект.Сумма + ?(ДокументОбъект.СуммаВключаетНДС, 0, СтрОбъект.СуммаНДС);
			КонецЕсли;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				
				ЗаполнитьСчетаУчетаНоменклатуры(ДокументОбъект, СтрОбъект, СтрокаТЧ);
				
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				
				Если ВидОперации = "ПоступлениеМЗ" Тогда
					
					СтруктураДанных = МетодСервераБезКонтекста("Модуль_ИнтеграцияБГУ20", "ПолучитьДанныеНоменклатуры", СтрОбъект.Номенклатура, ДокументОбъект.СчетУчета);
					
					СтрОбъект.СчетУчета			= СтруктураДанных.СчетУчета;
					СтрОбъект.СтавкаНДС			= СтруктураДанных.СтавкаНДС;
					СтрОбъект.ЕдиницаИзмерения	= СтруктураДанных.ЕдиницаИзмерения;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция НайтиИлиСоздатьГТД(НомерГТД, СтранаПроисхождения, КодСтраны)
		
		Результат = Неопределено;
		
		Если  ЗначениеЗаполнено(НомерГТД)
			И КодСтраны <> "643" Тогда // Не Россия
			
			Результат = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ВернутьСсылкуНаГТД", НомерГТД, СтранаПроисхождения);
			
		КонецЕсли;
		
		Возврат Результат;		
		
	КонецФункции	
		
	&НаСервере
	Функция ПолучитьДоговорКонтрагентаВидДоговора(ДоговорКонтрагента)
		
		Возврат Вычислить("ДоговорКонтрагента.ВидДоговора");
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьСчетаУчетаНоменклатуры(ДокОбъект, СтрокаТаблицы, СтрЭД)
		
		Если СтрЭД.Тип = "Объект стр" Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОбъектСтроительства) Тогда
				Возврат;
			КонецЕсли;
			СчетаУчета = БухгалтерскийУчетПереопределяемыйСчетаУчетаОбъектовСтроительства(ДокОбъект.Организация, СтрокаТаблицы.ОбъектСтроительства)
		Иначе
			СчетаУчета = СчетаУчетаНоменклатурыБП30НаСервере(ДокОбъект.Организация, СтрокаТаблицы.Номенклатура, ДокОбъект.Склад);
		КонецЕсли;
		
		ЭтоВозврат = (ВидОперации = ВозвратТоваровОперацияПоУмолчаниюБП30());
		
		Если СтрЭД.Тип = "Оборудование" Тогда
			СтрокаТаблицы.СчетУчета    		= СчетаУчета.СчетУчета;
			СтрокаТаблицы.СчетУчетаНДС		= СчетаУчета.СчетУчетаНДС;
			СтрокаТаблицы.СпособУчетаНДС 	= СчетаУчета.СпособУчетаНДС;
		ИначеЕсли СтрЭД.Тип = "ВозвратнаяТара" Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		ИначеЕсли СтрЭД.Тип = "Услуга" И Не ЭтоВозврат Тогда
			
			СтрокаТаблицы.СчетУчетаНДС		= СчетаУчета.СчетУчетаНДС;
			СтрокаТаблицы.СпособУчетаНДС 	= СчетаУчета.СпособУчетаНДС;
			
			СтрокаТаблицы.СчетЗатрат	= СчетаУчета.СчетУчета;
			СтрокаТаблицы.Субконто1		= СчетаУчета.Субконто1;
			СтрокаТаблицы.Субконто2		= СчетаУчета.Субконто2;
			СтрокаТаблицы.Субконто3		= СчетаУчета.Субконто3;
						
			СтрокаТаблицы.СчетЗатратНУ = СчетаУчета.СчетУчета;
			СтрокаТаблицы.СубконтоНУ1  = СчетаУчета.Субконто1;
			СтрокаТаблицы.СубконтоНУ2  = СчетаУчета.Субконто2;
			СтрокаТаблицы.СубконтоНУ3  = СчетаУчета.Субконто3;
			
			Если СчетаУчета.Свойство("КоличествоСубконтоСчетаУчета") Тогда
				УстановитьДоступностьСубконто(СтрокаТаблицы, СчетаУчета.КоличествоСубконтоСчетаУчета);
				УстановитьДоступностьСубконто(СтрокаТаблицы, СчетаУчета.КоличествоСубконтоСчетаУчета, "НУ")
			КонецЕсли;
						
		ИначеЕсли СтрЭД.Тип = "Объект стр" Тогда
			СтрокаТаблицы.СчетУчета    		= СчетаУчета.СчетУчета;
			СтрокаТаблицы.СчетУчетаНДС 		= СчетаУчета.СчетУчетаНДС;
			СтрокаТаблицы.СпособУчетаНДС 	= СчетаУчета.СпособУчетаНДС;
		Иначе
			Если ДокОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
				Если Вычислить("ПолучитьДоговорКонтрагентаВидДоговора(ДокОбъект.ДоговорКонтрагента)") = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")
					И СчетаУчета.СчетУчетаЯвляетсяЗабалансовым <> Истина Тогда
					
					СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
				Иначе
					СтрокаТаблицы.СчетУчета 		= СчетаУчета.СчетУчета;
					СтрокаТаблицы.СпособУчетаНДС 	= СчетаУчета.СпособУчетаНДС;
				КонецЕсли;
				СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			ИначеЕсли ДокОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчетаДавСырья;
			Иначе
				Если СчетаУчета.СчетУчетаЯвляетсяЗабалансовым <> Истина Тогда
					СтрокаТаблицы.СчетУчета 		= СчетаУчета.СчетУчета;
					СтрокаТаблицы.СпособУчетаНДС 	= СчетаУчета.СпособУчетаНДС;
				Иначе
					СтрокаТаблицы.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
				КонецЕсли;
				Если СтрокаТаблицы.Свойство("СчетУчетаНДС") Тогда 
					СтрокаТаблицы.СчетУчетаНДС 		= СчетаУчета.СчетУчетаНДС;
					СтрокаТаблицы.СпособУчетаНДС 	= СчетаУчета.СпособУчетаНДС;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Функция СчетаУчетаНоменклатурыБП30НаСервере(ПарамОрганизация, ПарамНоменклатура, ПарамСклад)
		
		СчетаУчета = МетодСервера(, "БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры", ПарамОрганизация, ПарамНоменклатура, ПарамСклад);
		
		Если СчетаУчета.Свойство("СчетУчета") Тогда
			СвойстваСчета = МетодСервера(, "БухгалтерскийУчетВызовСервераПовтИспПолучитьСвойстваСчета", СчетаУчета.СчетУчета);
			СчетаУчета.Вставить("КоличествоСубконтоСчетаУчета", СвойстваСчета.КоличествоСубконто);
		КонецЕсли;
		
		Возврат СчетаУчета; 
		
	КонецФункции
	
	&НаКлиенте
	Процедура УстановитьДоступностьСубконто(СтрокаТаблицы, КоличествоСубконтоУСчета, НУ = "")
		
		Для Индекс = 1 По 3 Цикл
				
			Если СтрокаТаблицы.Свойство("Субконто" + Индекс + "Доступность") Тогда
					
				СтрокаТаблицы["Субконто" + НУ + Индекс + "Доступность"] = КоличествоСубконтоУСчета >= Индекс;
					
			КонецЕсли;
															
		КонецЦикла;
				
	КонецПроцедуры
		
	&НаКлиенте
	Функция ПроверитьВсеНеобходимыеДанные()
		
		ВсеОК= Истина;
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Сообщить("Не указан контрагент");
			ВсеОК= Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Сообщить("Не заполнена организация");
			ВсеОК= Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
			Сообщить("Не указан вид операции");
			ВсеОК= Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			Если СтрокаТЧ.Тип <> "Услуга" И НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " не указана номенклатура");
				ВсеОК= Ложь;
			КонецЕсли;
			
			Если ИспользоватьЕдиницуИзмерения Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) И СтрокаТЧ.Тип <> "Услуга" И СтрокаТЧ.Тип <> "Основное средство" Тогда
					Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " не указана единица измерения");
					ВсеОК= Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаполнениеГТД = Истина Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.ГТД)
					И НЕ ЗначениеЗаполнено(СтрокаТЧ.СтранаПроисхождения) Тогда
					
					Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " не указана страна происходжения товара");
					ВсеОК= Ложь;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.ГТД)
					И ЗначениеЗаполнено(СтрокаТЧ.СтранаПроисхождения) Тогда
					
					Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " не указан номер ГТД");
					ВсеОК= Ложь;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Если СокрЛП(ВидОперации) =  "В переработку" И ТабличнаяЧасть.НайтиСтроки(Новый Структура("Тип", "Услуга")).Количество() > 0 Тогда
			Сообщить("Невозможно создание документа ""Возврат товаров от покупателя"", содержащего строки с услугами.");
			ВсеОК= Ложь;
		КонецЕсли;
		
		Возврат ВсеОК;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПерейтиКСозданиюДокумента1С()

		СопоставитьНоменклатуру();
		УстановитьСоответствиеДоговора(ДоговорКонтрагента, ДоговорСвойство);
		
		ФормаДокумента = ПолучитьФормуСоздаваемогоДокумента();
		ДокументОбъект = ФормаДокумента.Объект;
		
		ДопДанныеССервера = ПодготовитьДопДанныеДляСозданияНакладной();
		
		ЗаполнитьШапкуДокумента(ДокументОбъект, ДопДанныеССервера);
		УправлениеФормойДокумента(ДокументОбъект, ФормаДокумента, ДопДанныеССервера);
		ЗаполнитьТабличнуюЧастьДокумента(ФормаДокумента, ДопДанныеССервера);
		
		ЗаполнитьИтогиПоТабличнымЧастям(ДокументОбъект, ФормаДокумента);
		
		//заполним счета учета для БП 30
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			УстановитьСчетаРасчетовСКонтрагентом(ФормаДокумента);
		КонецЕсли;
		
		ДокументОбъект		= ФормаДокумента.Объект;
		КонтентДокумента	= МетодКлиента("Модуль_Клиент", "ПолучитьProto", ЭДОбъект).Контент;
		
		ПараметрыПМ = Новый Структура;
		ПараметрыПМ.Вставить("ДокументОбъект",		ДокументОбъект);
		ПараметрыПМ.Вставить("СтруктураКонтента",	КонтентДокумента);
		ПараметрыПМ.Вставить("BoxID",				BoxID);
		ПараметрыПМ.Вставить("DocumentId",			DocumentId);
		МетодСервера(, "ОбработкаСобытияПодключаемогоМодуля", "ПослеЗаполненияНовогоДокументаПоступления", ПараметрыПМ);
		
		КопироватьДанныеФормы(ПараметрыПМ.ДокументОбъект, ФормаДокумента.Объект);
		
		ФормаДокумента.Модифицированность	= Истина;
		ФормаДокумента.РежимОткрытияОкна	= РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ФормаДокумента.Открыть();
		
		ПодключитьОбработчикОжидания("ОбработчикЗакрытиеФормыНакладной", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПолучитьФормуСоздаваемогоДокумента()
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура);
			СтруктураПараметров.ЗначенияЗаполнения.Вставить("ВидОперации", 			ВидОперации);
			СтруктураПараметров.ЗначенияЗаполнения.Вставить("Организация", 			Организация);
			СтруктураПараметров.ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", 	ДоговорКонтрагента);
			
			ОперацияВозврат = ВозвратТоваровОперацияПоУмолчаниюБП30();
			
			Если ВидОперации = ОперацияВозврат Тогда
				ВидДокумента= "ВозвратТоваровОтПокупателя";
			ИначеЕсли СокрЛП(ВидОперации) = "ПоступлениеДопРасходов" Тогда
				ВидДокумента= "ПоступлениеДопРасходов"; 
			Иначе
				ВидДокумента= "ПоступлениеТоваровУслуг";
			КонецЕсли;
			
			ФормаДокумента = ПолучитьФорму("Документ." + ВидДокумента + ".ФормаОбъекта", СтруктураПараметров);	
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если СокрЛП(ВидОперации) = "Возврат товаров от клиента" Тогда 
				ФормаДокумента = ПолучитьФорму("Документ.ВозвратТоваровОтКлиента.ФормаОбъекта");
			ИначеЕсли СокрЛП(ВидОперации) = "ПоступлениеУслугИПрочихАктивов" Тогда
				ФормаДокумента = ПолучитьФорму("Документ." + МетодСервераБезКонтекста(, "ПредставлениеДокументов").ПоступлениеУслугПрочихАктивов + ".ФормаОбъекта");
			Иначе
				ФормаДокумента = ПолучитьФорму("Документ." + МетодСервераБезКонтекста(, "ПредставлениеДокументов").ПоступлениеТоваровУслуг + ".ФормаОбъекта");
			КонецЕсли;	
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			ФормаДокумента = ПолучитьФорму("Документ."+ВидОперации+".ФормаОбъекта");
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			ФормаДокумента = ПолучитьФорму("Документ.ПриходнаяНакладная.Форма.ФормаДокумента");
		КонецЕсли;
		
		Возврат ФормаДокумента; 
		
	КонецФункции
	
	&НаКлиенте
	// Для минимизации вызовов сервера, соберем разом доп. данные
	Функция ПодготовитьДопДанныеДляСозданияНакладной()
		
		ДопДанныеССервера	= Новый Структура();
		МаркерКонфигурации	= Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		СтруктураВходящиеДанные = Новый Структура();
		СтруктураВходящиеДанные.Вставить("ВидОперации"			, ВидОперации);
		СтруктураВходящиеДанные.Вставить("ДоговорКонтрагента"	, ДоговорКонтрагента);
		СтруктураВходящиеДанные.Вставить("Соглашение"			, Соглашение);
				
		Если МаркерКонфигурации = "УНФ16" ИЛИ МаркерКонфигурации = "УТ11" Тогда
			
			ИмяМодуляИнтеграции	= Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции; 
			ДопДанныеССервера	= МетодСервераБезКонтекста(ИмяМодуляИнтеграции, "ПодготовитьДопДанныеДляСозданияНакладной", СтруктураВходящиеДанные);
			
		КонецЕсли;
		
		Возврат ДопДанныеССервера;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, Знач ДопДанныеССервера)
		
		ДокументОбъект.Организация = Организация;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" И СокрЛП(ВидОперации) = "ПоступлениеДопРасходов" Тогда
			
			ЗаполнитьШапкуДокумента_БП30_ПоступлениеДопРасходов(ДокументОбъект);
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" И СокрЛП(ВидОперации) = "ПоступлениеУслугИПрочихАктивов" Тогда
			
			ЗаполнитьШапкуДокумента_УТ11_ПоступлениеУслугИПрочихАктивов(ДокументОбъект, ДопДанныеССервера);
			
		Иначе
			
			ЗаполнитьШапкуДокумента_Универсальный(ДокументОбъект, ДопДанныеССервера);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьШапкуДокумента_БП30_ПоступлениеДопРасходов(ДокументОбъект)
		
		ДокументОбъект.Дата= ТекущаяДата();
		
		ДокументОбъект.ДатаВходящегоДокумента= 	ЭДОбъект.DocumentDate;
		ДокументОбъект.НомерВходящегоДокумента= ЭДОбъект.DocumentNumber; 
		
		ДокументОбъект.Контрагент=				Контрагент;
		ДокументОбъект.СуммаВключаетНДС= 		СуммаВключаетНДС;
		ДокументОбъект.СтавкаНДС= 		 		Неопределено; //принудительно сбрасываем ставку, т.к. по умолчанию ставится 18%
		ДокументОбъект.СпособРаспределения= 	ПредопределенноеЗначение("Перечисление.СпособыРаспределенияДопРасходов.ПоСумме");
				
		ДокументОбъект.Сумма= 					ЭДОбъект.Total;
		ДокументОбъект.СуммаНДС= 				ЭДОбъект.Vat; 
							
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьШапкуДокумента_УТ11_ПоступлениеУслугИПрочихАктивов(ДокументОбъект, ДопДанныеССервера)
		
		ДокументОбъект.Дата = ТекущаяДата();
		
		ДокументОбъект.ДатаВходящегоДокумента	 = ЭДОбъект.DocumentDate;
		ДокументОбъект.НомерВходящегоДокумента	 = ЭДОбъект.DocumentNumber;
		ДокументОбъект.НалогообложениеНДС		 = ОсновнойТипНалогообложенияНДС(ДокументОбъект.Организация);
		ДокументОбъект.ЗакупкаПодДеятельность	 = ЗакупкаПодДеятельностьПоУмолчанию(ДокументОбъект.Организация);
		
		Партнер= ПолучитьПартнера(Контрагент);
				
		Если ЗначениеЗаполнено(Партнер) Тогда
			ДокументОбъект.Партнер		= Партнер;
			ДокументОбъект.Контрагент	= Контрагент;
		КонецЕсли;
		
		ДокументОбъект.ЦенаВключаетНДС = СуммаВключаетНДС;
		
		Если ДокументОбъект.Свойство("ПорядокРасчетов") Тогда
			ДопДанныеССервера.Свойство("ПорядокРасчетовПоУмолчанию", ДокументОбъект.ПорядокРасчетов);
		КонецЕсли;
		
		ДокументОбъект.Соглашение = Соглашение;
				
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			
			ДокументОбъект.Договор = ДоговорКонтрагента;
			
			ДанныеДоговора = МетодСервера(, "ПолучитьДанныеПоДоговору", ДоговорКонтрагента);
			
			Если ДокументОбъект.БанковскийСчетОрганизации <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчетОрганизации = ДанныеДоговора.БанковскийСчет;
			КонецЕсли;
			
			Если ДокументОбъект.БанковскийСчетКонтрагента <> Неопределено И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетКонтрагента) Тогда
				ДокументОбъект.БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
			КонецЕсли;
			
			Если ДокументОбъект.Свойство("ГруппаФинансовогоУчета") Тогда
				ДанныеДоговора.Свойство("ГруппаФинансовогоУчета", ДокументОбъект.ГруппаФинансовогоУчета);
			КонецЕсли;
			
		КонецЕсли;
				
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ОсновнойТипНалогообложенияНДС(Организация, МаркерКонфигурации = "УТ11")
		
		Результат = Неопределено;
		
		Если МаркерКонфигурации = "УТ11" Тогда 
			
			Результат = Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Неопределено);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ЗакупкаПодДеятельностьПоУмолчанию(Организация, МаркерКонфигурации = "УТ11")
		
		Результат = Неопределено;
		
		Если МаркерКонфигурации = "УТ11" Тогда 
			
			Результат = Справочники.Организации.ЗакупкаПодДеятельность(Организация, Неопределено, Неопределено);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьШапкуДокумента_Универсальный(ДокументОбъект, Знач ДопДанныеССервера)
		
		ДатаНомер = Новый Структура;
		ДатаНомер.Вставить("ДатаВходящегоДокумента", ЭДОбъект.DocumentDate);
		ДатаНомер.Вставить("НомерВходящегоДокумента", ЭДОбъект.DocumentNumber);
		ДатаНомер.Вставить("ДатаПервичногоДокумента", ЭДОбъект.DocumentDate); // Для БГУ
		ДатаНомер.Вставить("НомерПервичногоДокумента", ЭДОбъект.DocumentNumber); // Для БГУ
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДатаНомер);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			ОперацияВозврат = ВозвратТоваровОперацияПоУмолчаниюБП30();
			
			Если ВидОперации = ОперацияВозврат Тогда
				ДокументОбъект.ВидОперации = ОперацияВозврат;
				ДокументОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			ДокументОбъект.ЦенаВключаетНДС = СуммаВключаетНДС;
		Иначе
			ДокументОбъект.СуммаВключаетНДС = СуммаВключаетНДС;
		КонецЕсли;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если НалоговыйАгент Тогда 
				ДокументОбъект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя");
			Иначе 
				ДокументОбъект.НалогообложениеНДС = ОсновнойТипНалогообложенияНДС(ДокументОбъект.Организация);
				Если ДокументОбъект.Свойство("ЗакупкаПодДеятельность") Тогда
					ДокументОбъект.ЗакупкаПодДеятельность = ЗакупкаПодДеятельностьПоУмолчанию(ДокументОбъект.Организация);
				КонецЕсли;	
			КонецЕсли;
			
			Партнер = ПолучитьПартнера(Контрагент);
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				ДокументОбъект.Партнер		= Партнер;
				ДокументОбъект.Контрагент	= Контрагент;
			КонецЕсли;
			
			ДокументОбъект.ХозяйственнаяОперация = ВидОперации;
			
			ДокументОбъект.Соглашение = Соглашение;
			Если ЗначениеЗаполнено(Соглашение) Тогда
				
				РеквизитыСоглашения = РеквизитыСоглашения(Соглашение);
				
				Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов Тогда
					ДокументОбъект.Договор = ДоговорКонтрагента;
					ФормаДокумента.Элементы.Договор.Доступность = Истина;
				Иначе
					ФормаДокумента.Элементы.Договор.Доступность = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеквизитыСоглашения.Склад) Тогда
					ДокументОбъект.Склад = РеквизитыСоглашения.Склад;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				
				ДокументОбъект.Договор = ДоговорКонтрагента;
				
				ДанныеДоговора = МетодСервера(, "ПолучитьДанныеПоДоговору", ДоговорКонтрагента);
				
				Если ДокументОбъект.Свойство("БанковскийСчетОрганизации")
					И ДокументОбъект.БанковскийСчетОрганизации <> Неопределено
					И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчет) Тогда
					ДокументОбъект.БанковскийСчетОрганизации = ДанныеДоговора.БанковскийСчет;
				КонецЕсли;
				
				Если ДокументОбъект.Свойство("БанковскийСчетКонтрагента")
					И ДокументОбъект.БанковскийСчетКонтрагента <> Неопределено
					И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетКонтрагента) Тогда
					ДокументОбъект.БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
				КонецЕсли;
				
				Если ДокументОбъект.Свойство("ГруппаФинансовогоУчета") Тогда
					ДанныеДоговора.Свойство("ГруппаФинансовогоУчета", ДокументОбъект.ГруппаФинансовогоУчета);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДокументОбъект.ВидОперации = ВидОперации;
			КонецЕсли;
			
			ДокументОбъект.Контрагент =	Контрагент;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
					ДокументОбъект.Договор = ДоговорКонтрагента;
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
					ДокументОбъект.Договор = ДоговорКонтрагента;
				Иначе
					ДокументОбъект.ДоговорКонтрагента =	ДоговорКонтрагента;
				КонецЕсли;
			КонецЕсли;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				ДокументОбъект.КратностьВзаиморасчетов = 1;
			ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				ДокументОбъект.Кратность = 1;
 			КонецЕсли;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				ТипЦен = ДопДанныеССервера.ТипЦен;
			Иначе
				ТипЦен = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьТипЦенПоДоговору", ДоговорКонтрагента);
			КонецЕсли;
			Если НЕ ТипЦен = Неопределено Тогда
				ДокументОбъект.ТипЦен = ТипЦен;
			КонецЕсли;
								
		КонецЕсли;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			
			Если ВидОперации = "ПоступлениеМЗ" Тогда
				
				ДокументОбъект.СчетУчета = МетодСервераБезКонтекста("Модуль_ИнтеграцияБГУ20", "ПолучитьСчетПоКоду", "105.00");
				
				ДанныеСчетовУчетаМЗ = МетодСервераБезКонтекста("Модуль_ИнтеграцияБГУ20", "ПолучитьДанныеСчетовУчетаМЗ", ДокументОбъект.Организация);
				Для каждого ЭлементСписка Из ДанныеСчетовУчетаМЗ.СписокСчетовУчета Цикл
					ФормаДокумента.Элементы.СчетУчета.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
				
				ФормаДокумента.ДополнительныеСубконтоСчетов = Новый ФиксированноеСоответствие(ДанныеСчетовУчетаМЗ.ВидыСубконтоСчетов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьДоступностьДоговора(Объект, Доступность, Видимость)
		
		Если Метаданные.ОбщиеМодули.Найти("ЗакупкиСервер") <> Неопределено Тогда
        	Выполнить("ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Доступность, Видимость, Объект.Договор)");
		КонецЕсли;			
		
	КонецПроцедуры	
		
	&НаКлиенте 
	Процедура УправлениеФормойДокумента(ДокументОбъект, ФормаДокумента, Знач ДопДанныеССервера)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			УправлениеФормойДокумента_УНФ(ДокументОбъект, ФормаДокумента, ДопДанныеССервера);
			
		ИначеЕсли НЕ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если ВидОперации = "ПоступлениеДопРасходов" Тогда
				Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					УправлениеФормойДокумента_БП30_ПоступлениеДопРасходов(ДокументОбъект, ФормаДокумента);
				КонецЕсли;
			Иначе	
				УправлениеФормойДокумента_Универсальный(ДокументОбъект, ФормаДокумента, ДопДанныеССервера);
			КонецЕсли;
			
		Иначе
			
			УстановитьДоступностьДоговора(ДокументОбъект, ФормаДокумента.Элементы.Договор.Доступность, ФормаДокумента.Элементы.Договор.Видимость);
			Если ВидОперации = "ПоступлениеУслугИПрочихАктивов" Тогда
				УправлениеФормойДокумента_УТ11_ПоступлениеУслугПрочихАктивов(ФормаДокумента, ДопДанныеССервера);
			КонецЕсли;
			
		КонецЕсли;
					
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормойДокумента_УТ11_ПоступлениеУслугПрочихАктивов(ФормаДокумента, ДопДанныеССервера)
		
		ДопДанныеССервера.Свойство("ГрафикИсполненияВДоговоре", ФормаДокумента.ГрафикИсполненияВДоговоре);
		
		Если ДопДанныеССервера.Свойство("ДоступныеПорядкиРасчетов")
			И НЕ ФормаДокумента.Элементы.Найти("ПорядокРасчетов") = Неопределено Тогда
			
			ДоступныеПорядкиРасчетов = ДопДанныеССервера.ДоступныеПорядкиРасчетов;
			ФормаДокумента.Элементы.ПорядокРасчетов.СписокВыбора.ЗагрузитьЗначения(ДоступныеПорядкиРасчетов.ВыгрузитьЗначения());
			ФормаДокумента.Элементы.ПорядокРасчетов.ТолькоПросмотр = (ДоступныеПорядкиРасчетов.Количество() = 1);
		КонецЕсли;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура УправлениеФормойДокумента_БП30_ПоступлениеДопРасходов(ДокументОбъект, ФормаДокумента)
		
		МаркерКонфигурации= Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ЦеныИВалюта") = Неопределено Тогда
									
			СтруктураНадписи= Новый Структура("ВалютаДокумента, ТипЦен, Курс, Кратность, СуммаВключаетНДС");
									
			СтруктураНадписи.ВалютаДокумента= 	ДокументОбъект.ВалютаДокумента;
			СтруктураНадписи.Курс= 				ДокументОбъект.КурсВзаиморасчетов;
			СтруктураНадписи.Кратность= 		ДокументОбъект.КратностьВзаиморасчетов;
			СтруктураНадписи.СуммаВключаетНДС= 	ДокументОбъект.СуммаВключаетНДС;
											
			ФормаДокумента.ЦеныИВалюта= Вычислить("ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи)");
									
		КонецЕсли;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура УправлениеФормойДокумента_Универсальный(ДокументОбъект, ФормаДокумента, Знач ДопДанныеССервера)
		
		МаркерКонфигурации= Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		Если МаркерКонфигурации = "БГУ20" Тогда
			ДоговорУказан= ЗначениеЗаполнено(ДокументОбъект.Договор);
		Иначе
			ДоговорУказан= ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента);
		КонецЕсли;
		
		ЭтоКомиссия= Ложь;
		Если МаркерКонфигурации = "БП30" Тогда
			ЭтоКомиссия= ДоговорУказан И Вычислить("ПолучитьДоговорКонтрагентаВидДоговора(ДокументОбъект.ДоговорКонтрагента) = ПредопределенноеЗначение(""Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"")");
		КонецЕсли;
		
		//Управление формой для БП
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаТовары") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаТовары.Видимость=
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
		КонецЕсли;
		
		Если НЕ МаркерКонфигурации = "БГУ20" Тогда
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаВозвратнаяТара") = Неопределено Тогда
				ФормаДокумента.Элементы.ГруппаВозвратнаяТара.Видимость=
					ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку")
					И ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаУслуги") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаУслуги.Видимость=
				(ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия")
				Или ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги")
				ИЛИ ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование")
				ИЛИ ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"))
				И НЕ ФормаДокумента.ЭтоКомиссия;
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаАгентскиеУслуги") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаАгентскиеУслуги.Видимость= 
				НЕ ЭтоКомиссия И ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
		КонецЕсли;
			
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаОборудование") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаОборудование.Видимость=
				ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование");
		КонецЕсли;	
		
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаОбъектыСтроительства") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаОбъектыСтроительства.Видимость=
				ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаСчетФактура") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаСчетФактура.Видимость= 
				НЕ (ФормаДокумента.Элементы.Найти("УчетАгентскогоНДС") <> Неопределено И ФормаДокумента.УчетАгентскогоНДС) И НЕ ЭтоКомиссия
				И ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаСчетаРасчетов") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаСчетаРасчетов.Видимость=
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаИтогиВсегоНДС") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаИтогиВсегоНДС.Доступность=
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
		КонецЕсли;
		
		ЗачетПоДокументу= 	Ложь;
		ЗачетАвтоматически= Ложь;
		
		Если МаркерКонфигурации = "БП30" Тогда
			
			ЗачетАвансовВозможен= 
				НЕ ЭтоКомиссия И ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку");
			
			Если НЕ ФормаДокумента.Элементы.Найти("ГруппаЗачетАвансов") = Неопределено Тогда
				Если ЗачетАвансовВозможен Тогда
					Если ДокументОбъект.СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.ПоДокументу") Тогда
						ЗачетПоДокументу= Истина;
					ИначеЕсли ДокументОбъект.СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически") Тогда
						ЗачетАвтоматически= Истина;
					КонецЕсли;
				КонецЕсли;
				
				ФормаДокумента.Элементы.ГруппаЗачетАвансов.Видимость= ЗачетПоДокументу;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("СчетУчетаРасчетовПоАвансам") = Неопределено Тогда
			ФормаДокумента.Элементы.СчетУчетаРасчетовПоАвансам.Доступность= ЗачетПоДокументу ИЛИ ЗачетАвтоматически;
		КонецЕсли;
			
		Если НЕ ФормаДокумента.Элементы.Найти("НадписьСчетФактура") = Неопределено Тогда
			ФормаДокумента.Элементы.НадписьСчетФактура.Гиперссылка= ФормаДокумента.ТребуетсяСчетФактура;
		КонецЕсли;
			
		Если НЕ ФормаДокумента.Элементы.Найти("НомерВходящегоСчетаФактуры") = Неопределено Тогда
			ФормаДокумента.Элементы.НомерВходящегоСчетаФактуры.Доступность= ДокументОбъект.ПредъявленСчетФактура;
		КонецЕсли;
			
		Если НЕ ФормаДокумента.Элементы.Найти("ДатаВходящегоСчетаФактуры") = Неопределено Тогда
			ФормаДокумента.Элементы.ДатаВходящегоСчетаФактуры.Доступность= ДокументОбъект.ПредъявленСчетФактура;
		КонецЕсли;
			
		Если НЕ ФормаДокумента.Элементы.Найти("КодВидаОперации") = Неопределено Тогда
			ФормаДокумента.Элементы.КодВидаОперации.Доступность= ДокументОбъект.ПредъявленСчетФактура;
		КонецЕсли;
			
		Если НЕ ФормаДокумента.Элементы.Найти("НДСПредъявленКВычету") = Неопределено Тогда
			
			ВерсияУчетаНДС= Вычислить("УчетНДСКлиентСервер.Версия(ДокументОбъект.Дата)");
			
			ФормаДокумента.Элементы.НДСПредъявленКВычету.Доступность=
				ДокументОбъект.ПредъявленСчетФактура И НЕ ДокументОбъект.НДСВключенВСтоимость И (ФормаДокумента.УпрощенныйУчетНДС ИЛИ ВерсияУчетаНДС = 2);
		КонецЕсли;
			
		Если НЕ ФормаДокумента.Элементы.Найти("Склад") = Неопределено
			И (МаркерКонфигурации = "БГУ20" ИЛИ МаркерКонфигурации = "БП30") Тогда
			ФормаДокумента.Элементы.Склад.Доступность =
				ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства");
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ЦеныИВалюта") = Неопределено Тогда
									
			Если МаркерКонфигурации = "БП30" ИЛИ МаркерКонфигурации = "БГУ20" Тогда
				
				СтруктураНадписи= Новый Структура("ВалютаДокумента, ТипЦен, Курс, Кратность");
										
				СтруктураНадписи.ВалютаДокумента= 	ДокументОбъект.ВалютаДокумента;
				СтруктураНадписи.ТипЦен= 			ДокументОбъект.ТипЦен;
				СтруктураНадписи.Курс= 				ДокументОбъект.КурсВзаиморасчетов;
				СтруктураНадписи.Кратность= 		ДокументОбъект.КратностьВзаиморасчетов;
				
				Если ДокументОбъект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
					СтруктураНадписи.Вставить("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС);
				КонецЕсли;
							
				ФормаДокумента.ЦеныИВалюта= Вычислить("ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи)");
						
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ДоговорКонтрагента") = Неопределено Тогда
			ФормаДокумента.Элементы.ДоговорКонтрагента.Доступность= 
				ЗначениеЗаполнено(ДокументОбъект.Организация) И ЗначениеЗаполнено(ДокументОбъект.Контрагент);
		КонецЕсли;	
		
		Если НЕ ФормаДокумента.Элементы.Найти("ПодразделениеОрганизации") = Неопределено Тогда
			ФормаДокумента.Элементы.ПодразделениеОрганизации.Доступность= ЗначениеЗаполнено(ДокументОбъект.Организация);
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("СпособЗачетаАвансов") = Неопределено Тогда
			ФормаДокумента.Элементы.СпособЗачетаАвансов.Доступность= ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) И ЗачетАвансовВозможен;
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ТоварыКонтрагент") = Неопределено Тогда
			ФормаДокумента.Элементы.ТоварыКонтрагент.Доступность= НЕ ЭтоКомиссия;
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ТоварыДоговорКонтрагента") = Неопределено Тогда
			ФормаДокумента.Элементы.ТоварыДоговорКонтрагента.Доступность= НЕ ЭтоКомиссия;
		КонецЕсли;
		
		Если НЕ ФормаДокумента.Элементы.Найти("ТоварыСчетРасчетов") = Неопределено Тогда
			ФормаДокумента.Элементы.ТоварыСчетРасчетов.Доступность= НЕ ЭтоКомиссия;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормойДокумента_УНФ(ДокументОбъект, ФормаДокумента, ДопДанныеССервера);
		
		Если НЕ ФормаДокумента.Элементы.Найти("ГруппаРасходы") = Неопределено Тогда
			ФормаДокумента.Элементы.ГруппаРасходы.Видимость=
				ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика");
		КонецЕсли;
								
		СтруктураНадписи= Новый Структура("ВалютаДокумента, ВалютаРасчетов, Курс, КурсНациональнаяВалюта, СуммаВключаетНДС, УчетВалютныхОпераций, ВидЦенКонтрагента, НалогообложениеНДС");
				
		СтруктураНадписи.ВалютаДокумента= 			ДокументОбъект.ВалютаДокумента;
		СтруктураНадписи.ВалютаРасчетов= 			ДопДанныеССервера.ВалютаРасчетов;
		СтруктураНадписи.Курс= 						ДокументОбъект.Курс;
		СтруктураНадписи.КурсНациональнаяВалюта= 	ДокументОбъект.Курс;
		СтруктураНадписи.СуммаВключаетНДС= 			ДокументОбъект.СуммаВключаетНДС;
		СтруктураНадписи.УчетВалютныхОпераций= 		ДопДанныеССервера.УчетВалютныхОпераций;
		СтруктураНадписи.ВидЦенКонтрагента= 		ДокументОбъект.ВидЦенКонтрагента;
		СтруктураНадписи.НалогообложениеНДС= 		ДокументОбъект.НалогообложениеНДС;
		
		ФормаДокумента.ЦеныИВалюта= СформироватьНадписьЦеныИВалюта_УНФ(СтруктураНадписи);
				
	КонецПроцедуры
	
	&НаКлиенте
	Функция СформироватьНадписьЦеныИВалюта_УНФ(СтруктураНадписи)
	
		ТекстНадписи = "";
		
		// Валюта.
		Если СтруктураНадписи.УчетВалютныхОпераций Тогда
			Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
				ТекстНадписи= НСтр("ru = '%Валюта%'");
				ТекстНадписи= СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
			КонецЕсли;
		КонецЕсли;
			
		// Вид цен контрагента.
		Если ЗначениеЗаполнено(СтруктураНадписи.ВидЦенКонтрагента) Тогда
			Если ПустаяСтрока(ТекстНадписи) Тогда
				ТекстНадписи= ТекстНадписи + НСтр("ru = '%ВидЦенКонтрагента%'");
			Иначе	
				ТекстНадписи= ТекстНадписи + НСтр("ru = ' • %ВидЦенКонтрагента%'");
			КонецЕсли;	
			ТекстНадписи= СтрЗаменить(ТекстНадписи, "%ВидЦенКонтрагента%", СокрЛП(Строка(СтруктураНадписи.ВидЦенКонтрагента)));
		КонецЕсли;
		
		// Налогообложение НДС.
		Если ЗначениеЗаполнено(СтруктураНадписи.НалогообложениеНДС) Тогда
			Если ПустаяСтрока(ТекстНадписи) Тогда
				ТекстНадписи= ТекстНадписи + НСтр("ru = '%НалогообложениеНДС%'");
			Иначе
				ТекстНадписи= ТекстНадписи + НСтр("ru = ' • %НалогообложениеНДС%'");
			КонецЕсли;	
			ПодстрокаЗамены= "";
			Попытка
				ПодстрокаЗамены= Вычислить("РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(СтруктураНадписи.НалогообложениеНДС)");
			Исключение
				ПодстрокаЗамены= СокрЛП(Строка(СтруктураНадписи.НалогообложениеНДС));
			КонецПопытки;
			
			ТекстНадписи= СтрЗаменить(ТекстНадписи, "%НалогообложениеНДС%", ПодстрокаЗамены);
		КонецЕсли;
		
		// Флаг сумма включает НДС.
		Если ПустаяСтрока(ТекстНадписи) Тогда	
			Если СтруктураНадписи.СуммаВключаетНДС Тогда	
				ТекстНадписи= НСтр("ru = 'Сумма включает НДС'");
			Иначе		
				ТекстНадписи= НСтр("ru = 'Сумма не включает НДС'");
			КонецЕсли;	
		КонецЕсли;	
	 
		Возврат ТекстНадписи;
	
	КонецФункции

	&НаКлиенте
	Процедура ЗаполнитьИтогиПоТабличнымЧастям(ДокументОбъект, ФормаДокумента)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			ОперацияВозврат = ВозвратТоваровОперацияПоУмолчаниюБП30();
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
				
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары,Услуги,АгентскиеУслуги", ",");
			
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги") Тогда
				
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Услуги", ",");
			
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку") Тогда
				
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
				
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование") Тогда
				
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,Товары,Услуги", ",");
				
			ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства") Тогда
				
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ОбъектыСтроительства,Услуги", ",");
				
			ИначеЕсли ВидОперации = ОперацияВозврат Тогда
				
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
			ИначеЕсли СокрЛП(ВидОперации) = "ПоступлениеДопРасходов" Тогда  
				
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Товары", ",");
			Иначе
				МассивТабличныхЧастейДляРасчетаИтогов= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Оборудование,ОбъектыСтроительства,Товары,Услуги,АгентскиеУслуги", ",");
			КонецЕсли;
			
			СуммаИтогов=	0;
			СуммаНДСИтогов=	0;
			
			Для Каждого ТекущаяТабличнаяЧасть Из МассивТабличныхЧастейДляРасчетаИтогов Цикл
				СуммаНДСИтогов = СуммаНДСИтогов	+ ФормаДокумента.Объект[ТекущаяТабличнаяЧасть].Итог("СуммаНДС");
				Попытка
					СуммаИтогов = СуммаИтогов + ФормаДокумента.Объект[ТекущаяТабличнаяЧасть].Итог("Всего");
				Исключение // если нет колонки "Всего", сами суммируем сумму и НДС
					СуммаИтогов = СуммаИтогов + ФормаДокумента.Объект[ТекущаяТабличнаяЧасть].Итог("Сумма")
								+ ?(СуммаВключаетНДС, 0, СуммаНДСИтогов);
				КонецПопытки;
			КонецЦикла;
			
			ФормаДокумента.ИтогиВсего=		СуммаИтогов;
			
			Если ВидОперации <> ОперацияВозврат И СокрЛП(ВидОперации) <> "Услуги"
				И СокрЛП(ВидОперации) <> "ПоступлениеДопРасходов" Тогда
			
				ФормаДокумента.ИтогиВсегоНДС=				СуммаНДСИтогов;
				ЕстьМатериальныеЦенности=					ФормаДокумента.Объект.Товары.Количество() > 0 ИЛИ ФормаДокумента.Объект.ВозвратнаяТара.Количество() > 0 ИЛИ ФормаДокумента.Объект.Оборудование.Количество() > 0;
				ФормаДокумента.ОтметкаНезаполненногоСклад= 	ЕстьМатериальныеЦенности;
				ФормаДокумента.ЕстьСтрокиВТабличныхЧастях= 	ЕстьМатериальныеЦенности ИЛИ ФормаДокумента.Объект.Услуги.Количество() > 0 ИЛИ ФормаДокумента.Объект.АгентскиеУслуги.Количество() > 0;
			
			ИначеЕсли СокрЛП(ВидОперации)="Услуги" ИЛИ СокрЛП(ВидОперации)="ПоступлениеДопРасходов" Тогда
				ФормаДокумента.ИтогиВсегоНДС= СуммаНДСИтогов;
			КонецЕсли;
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			ФормаДокумента.ИтогВсего= 		ДокументОбъект.Запасы.Итог("Всего") 	+ ДокументОбъект.Расходы.Итог("Всего");
			ФормаДокумента.ИтогСуммаНДС= 	ДокументОбъект.Запасы.Итог("СуммаНДС") 	+ ДокументОбъект.Расходы.Итог("СуммаНДС");
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" 
			И ВидОперации <> "ПоступлениеУслугИПрочихАктивов" Тогда
			
			РассчитатьИтоговыеПоказателиВФормеДокументаУТ11(ФормаДокумента);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиентеНаСервереБезКонтекста
	Процедура РассчитатьИтоговыеПоказателиВФормеДокументаУТ11(ФормаДокумента)
		
		ХозяйственныеОперацииИмпорта = Новый Соответствие;
		ХозяйственныеОперацииИмпорта.Вставить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"), Истина);
		ХозяйственныеОперацииИмпорта.Вставить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"), Истина);
		
		ХозяйственныеОперацииВвозИзЕАЭС = Новый Соответствие;
		ХозяйственныеОперацииВвозИзЕАЭС.Вставить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"), Истина);
		ХозяйственныеОперацииВвозИзЕАЭС.Вставить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"), Истина);
		ХозяйственныеОперацииВвозИзЕАЭС.Вставить(
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"), Истина);
		
		ЗначенияРеквизитовДокумента = Новый Структура;
		ЗначенияРеквизитовДокумента.Вставить("ТребуетсяЗалогЗаТару"	);
		ЗначенияРеквизитовДокумента.Вставить("ХозяйственнаяОперация");
		ЗначенияРеквизитовДокумента.Вставить("НалогообложениеНДС"	);
		
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДокумента, ФормаДокумента.Объект);
		
		КоллекцияТовары	= ФормаДокумента.Объект.Товары;
		
		ФормаДокумента.СуммаВсего 	= КоллекцияТовары.Итог("СуммаСНДС");
		ФормаДокумента.СуммаНДС 	= КоллекцияТовары.Итог("СуммаНДС");
		
		ГруппаСтраницыНДС 	= ФормаДокумента.Элементы.Найти("ГруппаСтраницыНДС");
		ГруппаСтраницыВсего = ФормаДокумента.Элементы.Найти("ГруппаСтраницыВсего");
		
		Если ГруппаСтраницыНДС = Неопределено Или ГруппаСтраницыВсего = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Ложь
			Или ХозяйственныеОперацииИмпорта[ЗначенияРеквизитовДокумента.ХозяйственнаяОперация] = Истина
			Или ХозяйственныеОперацииВвозИзЕАЭС[ЗначенияРеквизитовДокумента.ХозяйственнаяОперация] = Истина
			Тогда 
			
			ГруппаСтраницыНДС.Видимость = Ложь;
			
		Иначе 
			
			ГруппаСтраницыНДС.Видимость = Истина;
			
			Если Ложь
				Или ЗначенияРеквизитовДокумента.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
				Или ЗначенияРеквизитовДокумента.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя")
				Или ЗначенияРеквизитовДокумента.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС")
				Тогда
				
				ГруппаСтраницыНДС.ТекущаяСтраница 	= ФормаДокумента.Элементы.СтраницаБезНДС;
				ГруппаСтраницыВсего.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаВсегоБезНДС;
				
			Иначе
				
				ГруппаСтраницыНДС.ТекущаяСтраница 	= ФормаДокумента.Элементы.СтраницаСНДС;
				ГруппаСтраницыВсего.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаВсегоСНДС;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьСписокВыбораВидОперации(Элемент)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента"));
			Элемент.СписокВыбора.Добавить("ПоступлениеУслугИПрочихАктивов", "Поступление услуг и прочих активов");
			
			ВидОперации= ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			ОперацияВозврат = ВозвратТоваровОперацияПоУмолчаниюБП30();
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
			Элемент.СписокВыбора.Добавить(ОперацияВозврат, "Возврат товаров от покупателя");
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства"));
			Элемент.СписокВыбора.Добавить("ПоступлениеДопРасходов", "Поступление доп. расходов");
			
			ВидОперации= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			
			Если ФорматДокумента.ИмяТипа = "XmlAcceptanceCertificate" Тогда
				Элемент.СписокВыбора.Добавить("ПоступлениеУслугРабот", "Поступление услуг, работ");
				ВидОперации= "ПоступлениеУслугРабот";
			Иначе
				Элемент.СписокВыбора.Добавить("ПоступлениеМЗ"		 , "Поступление МЗ (М-4)");
				Элемент.СписокВыбора.Добавить("ПоступлениеОС"		 , "Поступление ОС, НМА, НПА");
				Элемент.СписокВыбора.Добавить("ПоступлениеУслугРабот", "Поступление услуг, работ");
				ВидОперации= "ПоступлениеМЗ";
			КонецЕсли;
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"));
			
			ВидОперации= ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика");

		КонецЕсли;
		
	КонецПроцедуры
		
	&НаКлиенте
	Функция ВидОперацииУслуги(ПараметрВидОперации)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Возврат ПараметрВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги");
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьУсловноеОформление()
		
		ЦветЗначениеНеЗаполнено = WebЦвета.СветлоРозовый;
		ЦветЗначениеНедоступно 	= WebЦвета.СветлоСерый;
		ШрифтЖирный 			= Новый Шрифт(,, Истина);
		
		УсловноеОформление.Элементы.Очистить();
		
		// подсветка незаполненных полей шапки
		ИменаПолейШапки = Новый Массив;
		ИменаПолейШапки.Добавить(Элементы.Контрагент .Имя);
		ИменаПолейШапки.Добавить(Элементы.Организация.Имя);
		ИменаПолейШапки.Добавить(Элементы.ВидОперации.Имя);
		
		Для Каждого ИмяПоля Из ИменаПолейШапки Цикл 
			
			ЭлементОформления = НовыйЭлементУсловногоОформления(УсловноеОформление, ИмяПоля);
			УстановитьЭлементОтбора(ЭлементОформления.Отбор, ИмяПоля, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЗначениеНеЗаполнено);
			
		КонецЦикла;
		
		// Подсветка незаполненной номенклатуры 1С
		ЭлементОформления = НовыйЭлементУсловногоОформления(УсловноеОформление, Элементы.ТабличнаяЧастьНоменклатура.Имя);
		
		ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		УстановитьЭлементОтбора(ГруппаОтбора, "ТабличнаяЧасть.Номенклатура"	, Неопределено	, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		УстановитьЭлементОтбора(ГруппаОтбора, "ТабличнаяЧасть.Тип"			, "Услуга"		, ВидСравненияКомпоновкиДанных.НеРавно);
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЗначениеНеЗаполнено);
		
		// Подсветка незаполненного поля ЕдиницаИзмерения
		ЭлементОформления = НовыйЭлементУсловногоОформления(УсловноеОформление, Элементы.ТабличнаяЧастьЕдиницаИзмерения.Имя);
		
		ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		УстановитьЭлементОтбора(ГруппаОтбора, "ТабличнаяЧасть.ЕдиницаИзмерения"	, Неопределено	, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		УстановитьЭлементОтбора(ГруппаОтбора, "ТабличнаяЧасть.Тип"				, "Услуга"		, ВидСравненияКомпоновкиДанных.НеРавно);
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветЗначениеНеЗаполнено);
		
		ЭлементОформления = НовыйЭлементУсловногоОформления(УсловноеОформление, Элементы.ТабличнаяЧастьСтавкаНДС	.Имя);
		
		УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТабличнаяЧасть.НДСИсчисляетсяНалоговымАгентом", Истина, ВидСравненияКомпоновкиДанных.Равно);
		
		//ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветЗначениеНедоступно);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "НДС исчисляется налоговым агентом");
		
	КонецПроцедуры
	
	// Устанавливает элемент отбора с заданным именем поля.
	//
	// Параметры:
	//  ОбластьУстановки - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
	//  															  например, Список.Отбор или группа в отборе.
	//  ИмяПоля			 - Строка - имя поля компоновки данных (заполняется всегда).
	//  ПравоеЗначение	 - Произвольный - сравниваемое значение.
	//  ВидСравнения	 - ВидСравненияКомпоновкиДанных - вид сравнения.
	//
	&НаКлиентеНаСервереБезКонтекста
	Процедура УстановитьЭлементОтбора(ОбластьУстановки, Знач ИмяПоля
									, Знач ПравоеЗначение = Неопределено
									, Знач ВидСравнения = Неопределено)
									
		Если ВидСравнения = Неопределено Тогда 
			
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент = ОбластьУстановки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ИмяПоля);
		Элемент.ВидСравнения 	= ВидСравнения;
		Элемент.ПравоеЗначение 	= ПравоеЗначение;
		
	КонецПроцедуры
	
	
	// Создает новый элемент условного оформления
	//
	// Параметры:
	//  УО - УсловноеОформлениеКомпоновкиДанных - Контейнер с элементами условного оформления,
	//  										  например, свойство УсловноеОформление управляемой формы
	//  ИменаПолей - Строка, Массив - имена оформляемых полей
	// 
	// Возвращаемое значение:
	//  ЭлементУсловногоОформленияКомпоновкиДанных - Элемент условного оформления
	//
	&НаКлиентеНаСервереБезКонтекста
	Функция НовыйЭлементУсловногоОформления(УО, Знач ИменаПолей)
		
		ЭлементОформления = УО.Элементы.Добавить();
		
		Если ТипЗнч(ИменаПолей) = Тип("Массив") Тогда 
			
			ОформляемыеПоля = ИменаПолей;
			
		ИначеЕсли ТипЗнч(ИменаПолей) = Тип("Строка") Тогда 
			
			ОформляемыеПоля = Новый Массив;
			ИменаПолей = Новый Структура(ИменаПолей);
			
			Для Каждого КлючИЗначение Из ИменаПолей Цикл 
				ОформляемыеПоля.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ИмяПоля Из ОформляемыеПоля Цикл 
			
			ПолеЭлементаОформления = ЭлементОформления.Поля.Элементы.Добавить();
			ПолеЭлементаОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;
		
		Возврат ЭлементОформления;
		
	КонецФункции
	
	&НаСервере
	Процедура УстановитьДоступностьЭлементов()
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Элементы.ТабличнаяЧастьГруппаЕдИзм.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ТабличнаяЧастьГруппаЕдИзм.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецПроцедуры
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ И ОБРАБОТКА СОБЫТИЙ
	
	&НаКлиенте
	Процедура НастройкаВидимости()
		
		ИмяТипа = ЭДОбъект.TypeNamedId;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11"
			ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Заголовок = "Создание документа поступления товаров и услуг";
		Иначе
			
			Если ЗначениеЗаполнено(ВидОперации) Тогда
				Заголовок = "Создание документа " + Элементы.ВидОперации.СписокВыбора.НайтиПоЗначению(ВидОперации).Представление;
			Иначе
				Заголовок = "Создание документа";
			КонецЕсли;
			
		КонецЕсли;
		
		Если СокрЛП(ВидОперации) = "Объекты строительства" Тогда
			Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства");
			Элементы.ТабличнаяЧастьНоменклатура.Заголовок		= "Объект строительства 1С";
		ИначеЕсли ВидОперации = "ПоступлениеОС" Тогда
			Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства");
			Элементы.ТабличнаяЧастьНоменклатура.Заголовок		= "Основное средство 1С";
		Иначе
			Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
			Элементы.ТабличнаяЧастьНоменклатура.Заголовок		= "Номенклатура 1С";
		КонецЕсли;
		
		Если СокрЛП(ВидОперации) = "Объекты строительства" ИЛИ ИмяТипа = "XmlAcceptanceCertificate" ИЛИ ВидОперации = "ПоступлениеОС" Тогда
			Элементы.ТабличнаяЧастьЕдиницаИзЭД.Видимость		= Ложь;
			Элементы.ТабличнаяЧастьЕдиницаИзЭД.Доступность		= Ложь;
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.Видимость	= Ложь;
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.Доступность	= Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Элементы.ДоговорыКонтрагентов.Доступность = Истина;
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Элементы.Соглашение.Доступность = Истина;
			КонецЕсли;
		Иначе
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.Договоры.ПустаяСсылка");
			Иначе
				ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
			Элементы.ДоговорыКонтрагентов.Доступность =	Ложь;
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
				Элементы.Соглашение.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ПредставлениеДокумента.Заголовок = МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если МетодСервераБезКонтекста(,"ПолучитьФункциональнуюОпциюНаСервере", "ИспользоватьСоглашенияСПоставщиками") = Истина Тогда				
				Элементы.Соглашение.Видимость = Истина;
			Иначе
				Элементы.Соглашение.Видимость = Ложь;
				Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
			КонецЕсли;
			
			Если МетодСервераБезКонтекста(,"ПолучитьФункциональнуюОпциюНаСервере", "ИспользоватьДоговорыСПоставщиками") = Истина Тогда
				Элементы.ДоговорыКонтрагентов.Видимость = Истина;
			Иначе
				Элементы.ДоговорыКонтрагентов.Видимость = Ложь;
				ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Соглашение) Тогда
				РеквизитыСоглашения = РеквизитыСоглашения(Соглашение);
				Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов Тогда
					Элементы.ДоговорыКонтрагентов.Видимость = Истина;
				Иначе
					Элементы.ДоговорыКонтрагентов.Видимость = Ложь;
					ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаготовкаДокумента1С) Тогда
			ЗаполнениеГТД = ЗаготовкаДокумента1С.ЗаполнениеГТД;
		Иначе
			Если ЕстьВозможностьЗаполненияГТД(ЭДОбъект) Тогда
				ЗаполнениеГТД = Истина;
			Иначе
				ЗаполнениеГТД = Ложь;
			КонецЕсли;
		КонецЕсли;
		Элементы.ЗаполнениеГТД.Доступность 						= ЗаполнениеГТД;
		Элементы.ТабличнаяЧастьСтранаПроисхождения.Доступность 	= ЗаполнениеГТД;
		
		ОбновитьИспользованиеЕдиницыИзмерения();
		
		Элементы.НадписьНалоговыйАгент.Видимость 	= НалоговыйАгент;
		Элементы.СуммаВключаетНДС.Видимость 		= Не НалоговыйАгент;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ЕстьВозможностьЗаполненияГТД(Document)
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если ВедетсяУчетИмпортныхТоваров
				И  (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование")
				ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"))
				И ПоDocumentЕстьГТД(Document) Тогда
				
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если ВедетсяУчетИмпортныхТоваров 
				И ВидОперации = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика")
				И ПоDocumentЕстьГТД(Document) Тогда
				
				Возврат Истина;
			КонецЕсли;

		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			Если ВедетсяУчетИмпортныхТоваров
				И (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика")
				ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"))
				И ПоDocumentЕстьГТД(Document) Тогда
				
				Возврат Истина;
			КонецЕсли;

		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоDocumentЕстьГТД(Document)
		
		Результат = Ложь;
		
		ФорматЭД = ФорматЭлектронногоДокумента(Document);
		БазовыйФормат = ФорматЭД.БазовыйФормат;
		БазовыеФорматы = БазовыеФорматы();
		
		ДокументИсточник = Неопределено;
		
		Если БазовыйФормат = БазовыеФорматы.utd820
			Или БазовыйФормат = БазовыеФорматы.utd Тогда
			
			ДокументИсточник = Document;
			
		Иначе
			
			ДокументИсточник = МетодКлиента("Модуль_Клиент", "ПолучитьСвязанныйInvoice", Document);
			
		КонецЕсли;
		
		Если ДокументИсточник <> Неопределено Тогда
			
			СтруктураInvoice = МетодКлиента("Модуль_Клиент", "ПолучитьСтруктуруСодержанияДокумента", ДокументИсточник);
			
			Для Каждого Item Из СтруктураInvoice.Items Цикл
				Если ЗначениеЗаполнено(Item.TDNumber) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
		
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Попытка
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения");
			Исключение
				Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"); //УТ 11.2
			КонецПопытки;
		Иначе
			Элементы.ТабличнаяЧастьЕдиницаИзмерения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаготовкаДокумента1С) Тогда
			НалоговыйАгент 	= ЗаготовкаДокумента1С.Свойство("НалоговыйАгент") И ЗаготовкаДокумента1С.НалоговыйАгент = Истина;
			Organization 	= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
			ЭДОбъект		= Organization.GetDocumentById(DocumentID);
			ЗаполнитьДанныеПоЗаготовке();
		Иначе
			ЭДОбъект			= ЭтаФорма.ВладелецФормы.ЭДОбъект;
			СтруктураЭДОбъект	= ЗаполнитьДанныеЭД();
			ПриИзмененииШапки(Истина);
		КонецЕсли;
		
		НастройкаВидимости();
		
		Если Режим = "ГрупповоеСоздание" Тогда
			Элементы.Декорация1.Видимость = Ложь;
			Элементы.НадписьСопоставитьС1С.Видимость = Ложь;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриИзмененииШапки(ПервоначальноеЗаполнениеТЧ = Ложь)
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДоговорКонтрагента			= МетодСервера(, "ПолучитьДоговорКонтрагента", Организация, Контрагент, СписокВидовДоговоров, ДоговорСвойство);
			ТекущийДоговорКонтрагента	= ДоговорКонтрагента;
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Соглашение = МетодСервера(, "ПолучитьСоглашениеКонтрагента", Организация, Контрагент);
				ТекущееСоглашениеКонтрагента = Соглашение;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьПараметрыВыбораДоговора();
		
		ИмяТипа = ЭДОбъект.TypeNamedId;
		
		Если ПервоначальноеЗаполнениеТЧ Тогда
			ЗаполнитьДанныеТЧЗначениямиИз1С(ИмяТипа);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ОбработчикВопросЗаполнитьТЧ", ЭтаФорма);
			ПоказатьВопрос(Оповещение, "Заполнить табличную часть значениями по умолчанию?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикВопросЗаполнитьТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодвозвратаДиалога.Да Тогда
			ИмяТипа = ЭДОбъект.TypeNamedId;
			ЗаполнитьДанныеТЧЗначениямиИз1С(ИмяТипа);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТабличнаяЧастьПередУдалением(Элемент, Отказ)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТабличнаяЧастьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
		Отказ=	Истина;
	КонецПроцедуры
	
	&НаСервере
	Процедура ТабличнаяЧастьНоменклатураПриИзмененииНаСервере(ИдентификаторТекущейСтроки, ТипОбъектаЭДО)
		
		СтрокаТЧ=		ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		
		ИндексСтроки=	ТабличнаяЧасть.Индекс(СтрокаТЧ);
		СохраненныйИндекс = ИндексСтроки;
		
		ТабДанных		 = РеквизитФормыВЗначение("ТабличнаяЧасть", Тип("ТаблицаЗначений"));
		ИскомаяСтрока	 = ТабДанных.Получить(ИндексСтроки);
		ЗаполнитьТипНоменклатуры(ИскомаяСтрока, ТипОбъектаЭДО);
		
		ЗаполнитьРеквизитыНоменклатурыВСтрокеТабличнойЧасти(ИскомаяСтрока);
		
		ЗначениеВРеквизитФормы(ТабДанных, "ТабличнаяЧасть");
		Элементы.ТабличнаяЧасть.ТекущаяСтрока = ТабличнаяЧасть[СохраненныйИндекс].ПолучитьИдентификатор();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьРеквизитыНоменклатурыВСтрокеТабличнойЧасти(СтрокаТЧ)
		
		ЗначенияРеквизитов = РеквизитыНоменклатуры(СтрокаТЧ.Номенклатура);
		
		СтрокаТЧ.Код = ЗначенияРеквизитов.Код;
		СтрокаТЧ.Артикул = ЗначенияРеквизитов.Артикул;
		СтрокаТЧ.ЕдиницаИзмерения = ЗначенияРеквизитов.ЕдиницаИзмерения;
		СтрокаТЧ.ИспользоватьХарактеристикиНоменклатуры = ЗначенияРеквизитов.ИспользоватьХарактеристики;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
		
		ИмяТипа = ЭДОбъект.TypeNamedId;
		
		ТабличнаяЧастьНоменклатураПриИзмененииНаСервере(Элементы.ТабличнаяЧасть.ТекущиеДанные.ПолучитьИдентификатор(), ИмяТипа);
		
		Элементы.ТабличнаяЧасть.ТекущиеДанные.НоменклатураПоставщика = Неопределено;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДоговорыКонтрагентовПриИзменении(Элемент)
		
		УстановитьСоответствиеДоговора(ТекущийДоговорКонтрагента, "");
		
		ДобавитьСтатистику_ИзменениеДоговора();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НадписьСопоставитьС1СНажатие(Элемент)
		
		Закрыть(Новый Структура("Режим", "Сопоставление"));
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОрганизацияПриИзменении(Элемент)
		
		ПриИзмененииШапки();
		
		ДобавитьСтатистику_ИзменениеОрганизации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СуммаВключаетНДСПриИзменении(Элемент)
		
		СуммаВключаетНДСПриИзмененииНаСервере();
		
		ДобавитьСтатистику_ИзменениеСуммаВключаетНДС();
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СуммаВключаетНДСПриИзмененииНаСервере()
		
		ТабДанных=	РеквизитФормыВЗначение("ТабличнаяЧасть", Тип("ТаблицаЗначений"));
		ПересчитатьПоляСУчетомНДС(ТабДанных);
		ЗначениеВРеквизитФормы(ТабДанных, "ТабличнаяЧасть");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВидОперацииПриИзменении(Элемент)
		
		ИмяТипа = ЭДОбъект.TypeNamedId;
		
		ИнициализироватьСписокВидовДоговоров();
		УстановитьПараметрыВыбораДоговора();
		НастройкаВидимости();
		ЗаполнитьДанныеТЧЗначениямиИз1С(ИмяТипа);
		
		ДобавитьСтатистику_ИзменениеВидаОперации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоглашениеПриИзменении(Элемент)
		
		УстановитьСоответствиеСоглашения(ТекущееСоглашениеКонтрагента, "");
		УстановитьПараметрыВыбораДоговора();
		НастройкаВидимости();
		
		ДобавитьСтатистику_ИзменениеСоглашения();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура КонтрагентПриИзменении(Элемент)
		
		ПриИзмененииШапки();
		НастройкаВидимости();
		
		ДобавитьСтатистику_ИзменениеКонтрагента();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		Партнер= ПолучитьПартнера(Контрагент);
		ВыборСоглашенияСКонтрагентом(Партнер, Элемент);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		УстановитьУсловноеОформление();
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		Параметры.Свойство("ФорматДокумента", ФорматДокумента);
		Параметры.Свойство("Режим"		, Режим);
		Параметры.Свойство("Контрагент"	, Контрагент);
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("BoxID"		, BoxID);
		Параметры.Свойство("DocumentID"	, DocumentID);
		Параметры.Свойство("ЗаготовкаДокумента1С", ЗаготовкаДокумента1С);
		
		Если Параметры.Свойство("СуммаВключаетНДС") Тогда
			СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
		Иначе
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
		ЗаполнитьСписокВыбораВидОперации(Элементы.ВидОперации);
		
		ИнициализироватьСписокВидовДоговоров();
		
		Если СписокВидовОпераций.Количество() > 0 Тогда
			ВидОперации=	СписокВидовОпераций.Получить(0).Значение;
		КонецЕсли;
		
		МассивТипов=	Новый Массив();
		МассивТипов.Добавить("СправочникСсылка.ДоговорыКонтрагентов");
		ОписаниеТипов= 	Новый ОписаниеТипов(МассивТипов);
		Элементы.ДоговорыКонтрагентов.ОграничениеТипа=	ОписаниеТипов;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			ИспользоватьЕдиницуИзмерения=	Истина;
		Иначе
			Если НЕ СокрЛП(ВидОперации) = "Объекты строительства" Тогда
				ИспользоватьЕдиницуИзмерения=	Истина;
			Иначе
				ИспользоватьЕдиницуИзмерения=	Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ВалютаРегламентированногоУчета = МетодСервера("Модуль_Интеграция", "ВалютаРегламентированногоУчета"); 
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			ВедетсяУчетИмпортныхТоваров= Константы.ВедетсяУчетИмпортныхТоваров.Получить();
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Если Найти(Объект.ПараметрыКлиентСервер.СинонимКонфигурации, "ERP")>0 Тогда
				ВедетсяУчетИмпортныхТоваров= Константы.ИспользоватьИмпортныеЗакупки.Получить();
			Иначе
				Если НЕ Метаданные.Константы.Найти("ИспользоватьИмпортныеТовары") = Неопределено Тогда
					ВедетсяУчетИмпортныхТоваров= Константы.ИспользоватьИмпортныеТовары.Получить();
				ИначеЕсли НЕ Метаданные.Константы.Найти("ИспользоватьИмпортныеЗакупки") = Неопределено Тогда
					ВедетсяУчетИмпортныхТоваров= Константы.ИспользоватьИмпортныеЗакупки.Получить();
				Иначе
					ВедетсяУчетИмпортныхТоваров= Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			ВедетсяУчетИмпортныхТоваров = ПолучитьФункциональнуюОпцию("УчетГТД");
		Иначе
			ВедетсяУчетИмпортныхТоваров= Ложь;
		КонецЕсли;
		
		УстановитьДоступностьЭлементов();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнениеГТДПриИзменении(Элемент)
		
		ДобавитьСтатистику_ИзменениеЗаполнениеГТД();
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ И ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура Создать(Команда)
		
		Если НЕ ПроверитьВсеНеобходимыеДанные() Тогда
			
			Текст = НСтр("ru = 'Заполните все необходимые данные.'");
			ПоказатьПредупреждение(, Текст, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			
			Возврат;
		КонецЕсли;
		
		Если ВидОперацииУслуги(ВидОперации) Тогда
			
			МассивТовары= ТабличнаяЧасть.НайтиСтроки(Новый Структура("Тип", "Товар"));
			Если МассивТовары.Количество()>0 Тогда
				
				Текст = НСтр("ru = 'При виде операции ""Услуги"", в табличной части не должно быть номенклатуры с типом ""Товар"".'");
				ПоказатьПредупреждение(, Текст, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				
				Возврат;				
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьСтатистику_НажалиСоздатьДокумент();
		ДобавитьСтатистику_СоздатьПриходнуюНакладную();
		
		ПерейтиКСозданиюДокумента1С();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗакрытьФорму(Команда)
		
		ДобавитьСтатистику_НажалиЗакрытьФорму();
												
		Закрыть();
		
	КонецПроцедуры
	
//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработчикЗакрытиеФормыНакладной() Экспорт
	
	Если НЕ ФормаДокумента.Открыта() И ЗначениеЗаполнено(ФормаДокумента.Объект.Ссылка) Тогда
		
		ОтключитьОбработчикОжидания("ОбработчикЗакрытиеФормыНакладной");
		
		Закрыть(Новый Структура("Документ1С", ФормаДокумента.Объект.Ссылка));
		
	Иначе
		ПодключитьОбработчикОжидания("ОбработчикЗакрытиеФормыНакладной", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоглашенияСКонтрагентом(Партнер, Элемент)
	
	ПарметрыФормы= Новый Структура("ДатаДокумента, ТекущаяСтрока, Отбор", ТекущаяДата(), Соглашение, Новый Структура);
	ПарметрыФормы.Отбор.Вставить("Партнер", Партнер);
	
	Если ВРег(СокрЛП(ВидОперации)) = ВРег("Возврат товаров от клиента")  Тогда
		ПарметрыФормы.Вставить("ДоступноДляПродажиКлиентам", Истина);
		ИмяФормыВыбора= "Справочник.СоглашенияСКлиентами.ФормаВыбора";
	Иначе
		ПарметрыФормы.Вставить("ДоступноДляЗакупки", Истина);
		ИмяФормыВыбора= "Справочник.СоглашенияСПоставщиками.ФормаВыбора";
	КонецЕсли;
	
	МетодКлиента(,"ОткрытьФормуОбъектаИБ",,ИмяФормыВыбора, ПарметрыФормы, Элемент);
	
	ТекущееСоглашениеКонтрагента= Соглашение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоЗаготовке()
	
	ВидОперации			= ЗаготовкаДокумента1С.ВидОперации;
	Контрагент 			= ЗаготовкаДокумента1С.Контрагент;
	Организация 		= ЗаготовкаДокумента1С.Организация;
	ДоговорКонтрагента 	= ЗаготовкаДокумента1С.ДоговорКонтрагента;
	ЗаготовкаДокумента1С.Свойство("Соглашение", Соглашение);
	УстановитьПараметрыВыбораДоговора();
	
	Для Каждого СтрокаТЧ_Заготовка Из ЗаготовкаДокумента1С.ТабличнаяЧасть Цикл
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧ_Заготовка);
		СтрокаТЧ.Тип = ?(СтрокаТЧ_Заготовка.ЭтоУслуга, "Услуга", "Товар");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеЭД()

	ТабличнаяЧасть.Очистить();
	
	НомерСтроки= 0;
	
	СтруктураЭДОбъект= МетодКлиента("Модуль_Клиент", "ПолучитьСтруктуруСодержанияДокумента", ЭДОбъект);	
	
	НалоговыйАгент = (СтруктураЭДОбъект.isTaxAgent = Истина);
	
	Если НалоговыйАгент Тогда 
		// Если покупатель является налоговым агентом по НДС (п.8 ст. 161 НК РФ), то в документе указываем
		// суммы из первичного документа продавца (графы "Цена" и "Сумма") и отражаем начисленный НДС сверху
		// с применением налоговой ставки 18% (графы "% НДС" и "НДС")
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	СоответствиеСтрокСГТД= ПолучитьСоответствиеСтрокСГТД(СтруктураЭДОбъект); 
	Для Каждого СтрокаDocument Из СтруктураЭДОбъект.Items Цикл
		
		НомерСтроки= НомерСтроки + 1;
			
		Если СоответствиеСтрокСГТД = Неопределено ИЛИ СоответствиеСтрокСГТД[СтрокаDocument].МассивСтрокиItemInvoice.Количество() = 0 Тогда 
			
			НоваяСтрока1С=	ТабличнаяЧасть.Добавить();
			
			НоваяСтрока1С.НомерСтроки=	НомерСтроки;
			ЗаполнитьСтрокуСозданияВ1СДаннымиЭД(НоваяСтрока1С, СтрокаDocument);
			
		Иначе
			СоздатьСтрокиВТЧДля1СПоСтрокамГТД(ТабличнаяЧасть, СтрокаDocument, СоответствиеСтрокСГТД[СтрокаDocument], НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;	
		
	ДатаДоговора=			?(Строка(СтруктураЭДОбъект.ДатаДоговора) = "", "", Строка(СтруктураЭДОбъект.ДатаДоговора) + "_");
	НомерДоговора=			?(Строка(СтруктураЭДОбъект.НомерДоговора) = "", "", Строка(СтруктураЭДОбъект.НомерДоговора) + "_");
	НаименованиеДоговора=	?(Строка(СтруктураЭДОбъект.НаименованиеДоговора) = "", "", Строка(СтруктураЭДОбъект.НаименованиеДоговора));
		
	ДоговорСвойство=		Прав(СокрЛП(ДатаДоговора + НомерДоговора + НаименованиеДоговора),50);

	СтруктураЭДОбъект.Вставить("ДоговорСвойство", ДоговорСвойство);
	
	Возврат СтруктураЭДОбъект;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеСтрокСГТД(СтруктураDocument)
	
	Если ЭтоУПД(СтруктураDocument.Type) Тогда
		
		СоответствиеГТД= Новый Соответствие;
		
		Для каждого СтрокаDocument из СтруктураDocument.Items Цикл
			МассивСтрокиItemInvoice = Новый Массив;
			Если СтрокаDocument.Quantity > 0 Тогда
				МассивСтрокиItemInvoice.Добавить(СтрокаDocument);
			КонецЕсли;
			СоответствиеГТД.Вставить(СтрокаDocument, Новый Структура("МассивСтрокиItemInvoice, ИтоговоеКоличество", МассивСтрокиItemInvoice, СтрокаDocument.Quantity));
		КонецЦикла;
		
	Иначе
		
		СвязанныйInvoice= МетодКлиента("Модуль_Клиент", "ПолучитьСвязанныйInvoice", СтруктураDocument.Document);

		Если СвязанныйInvoice = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураInvoice= МетодКлиента("Модуль_Клиент", "ПолучитьСтруктуруСодержанияДокумента", СвязанныйInvoice);
				
		ContentItemsInvoice= СтруктураInvoice.Items;
		
		ПустаяСтруктураItemInvoice= Новый Структура;
		Для каждого Элемент из ContentItemsInvoice[0] Цикл
			ПустаяСтруктураItemInvoice.Вставить(Элемент.Ключ, Неопределено);	
		КонецЦикла;
		
		СоответствиеГТД= Новый Соответствие;
		
		Для каждого СтрокаDocument из СтруктураDocument.Items Цикл
			СоответствиеГТД.Вставить(СтрокаDocument, Новый Структура("МассивСтрокиItemInvoice, ИтоговоеКоличество, ПустаяСтруктураItemInvoice", Новый Массив, 0, ПустаяСтруктураItemInvoice));
		КонецЦикла;
		
		НеОбработанныеInvoiceItems= ContentItemsInvoice;
		Для каждого СтрокаDocument из СтруктураDocument.Items Цикл
			Если НеОбработанныеInvoiceItems.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтруктрураОтделенныеInvoiceItems= ОтделитьСтрокиВInvoiceДляNameИQuantity(НеОбработанныеInvoiceItems, СтрокаDocument.Name, СтрокаDocument.Quantity );
			ОтделенныеInvoiceItems= 	СтруктрураОтделенныеInvoiceItems.МассивОтделенныхСтрок;
			ОбщееКоличествоВОтделенных= СтруктрураОтделенныеInvoiceItems.ОбщееКоличествоВОтделенных;
			
			Если ОбщееКоличествоВОтделенных = СтрокаDocument.Quantity Тогда
				СоответствиеГТД[СтрокаDocument]= Новый Структура("МассивСтрокиItemInvoice, ИтоговоеКоличество, ПустаяСтруктураItemInvoice", ОтделенныеInvoiceItems, ОбщееКоличествоВОтделенных, ПустаяСтруктураItemInvoice);	
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

	Возврат СоответствиеГТД;
	
КонецФункции

&НаКлиенте
Функция ОтделитьСтрокиВInvoiceДляNameИQuantity(НеОбработанныеInvoiceItems, DocumentItem_Name, DocumentItem_Quantity)
	
	МассивОтделенныхСтрок= Новый Массив;
	ОбщееКоличество= 0;
	
	Пока НеОбработанныеInvoiceItems.Количество()>0 Цикл	
		
		СтрокаInvoice = НеОбработанныеInvoiceItems[0]; 
		
		Если ОбщееКоличество >= DocumentItem_Quantity Тогда
			Прервать;
		КонецЕсли;
		Если НЕ СтрокиПодобны(СтрокаInvoice.Name, DocumentItem_Name) Тогда
			Прервать;			
		КонецЕсли;
		
		СтрокаОтделенных = Новый Структура;
		Для каждого КлючЗначение из СтрокаInvoice Цикл
			СтрокаОтделенных.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		МассивОтделенныхСтрок.Добавить(СтрокаОтделенных);
		
		ОбщееКоличество = ОбщееКоличество + Число(СтрокаОтделенных["Quantity"]);
		
		НеОбработанныеInvoiceItems.Удалить(0);
	КонецЦикла;
	
	Возврат Новый Структура("МассивОтделенныхСтрок, ОбщееКоличествоВОтделенных", МассивОтделенныхСтрок, ОбщееКоличество);
	
КонецФункции

&НаКлиенте
Функция СтрокиПодобны(Строка1, Строка2)
	
	МинимальнаяДлина= Мин(СтрДлина(Строка1), СтрДлина(Строка2));
	Если МинимальнаяДлина = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НРег(Лев(Строка1, МинимальнаяДлина)) = НРег(Лев(Строка2, МинимальнаяДлина));
			
КонецФункции

&НаКлиенте
Процедура СоздатьСтрокиВТЧДля1СПоСтрокамГТД(ТабличнаяЧасть, СтрокаDocument, СтруктураОтобранныеInvoiceItem, НомерСтроки)
	
	СтрокаДля1С = Неопределено;
	
	InvoiceItemsПоГТД 				= СтруктураОтобранныеInvoiceItem.МассивСтрокиItemInvoice;
	ИтоговоеКоличествоВОтделенных 	= СтруктураОтобранныеInvoiceItem.ИтоговоеКоличество; 
	
	Счетчик = 0;
	
	СуммаСНДС 	= Число(СтрокаDocument.Subtotal);
	СуммаНДС 	= ?(СтрокаDocument.Vat = Неопределено, 0, Число(СтрокаDocument.Vat));
	
	//одной строке Накладной может соответсвовать несколько строк в СФ
	Для каждого СтрокаInvoice из InvoiceItemsПоГТД Цикл
		
		СтрокаДля1С = ТабличнаяЧасть.Добавить();
		
		Счетчик = Счетчик + 1;
		Если Счетчик > 1 Тогда
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		
		СтрокаДля1С.НомерСтроки = НомерСтроки;
		СтрокаДля1С.НДСИсчисляетсяНалоговымАгентом = СтрокаDocument.VatIsCalculatedByTaxAgent;
		
		СтрокаДля1С.НоменклатураИзЭД = СтрокаDocument.Name;
		СтрокаДля1С.КодЭД			 = СтрокаDocument.Code;
		СтрокаДля1С.АртикулЭД		 = СтрокаDocument.NomenclatureArticle;
		СтрокаДля1С.ЕдиницаИзЭД		 = СтрокаDocument.UnitName;
		СтрокаДля1С.Количество		 = СтрокаInvoice.Quantity;
		СтрокаДля1С.Всего			 = ?(ИтоговоеКоличествоВОтделенных <> 0, СуммаСНДС	 * СтрокаДля1С.Количество / ИтоговоеКоличествоВОтделенных, 0);
		СтрокаДля1С.СуммаНДС		 = ?(ИтоговоеКоличествоВОтделенных <> 0, СуммаНДС	 * СтрокаДля1С.Количество / ИтоговоеКоличествоВОтделенных, 0);
		СтрокаДля1С.ГТД				 = СтрокаInvoice.TDNumber;
		
		СтрокаДля1С.СтранаПроисхожденияЭД	 = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "НайтиСтрануПоКодуВКлассификаторе", СтрокаInvoice.CountryCode);  
		СтрокаДля1С.СтранаПроисхождения		 = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "НайтиСтрануПоКоду", СтрокаInvoice.CountryCode); 
	
		XmlTorg12_Item = Новый СписокЗначений;
		XmlTorg12_Item.Добавить(СтрокаDocument, "СтрокаЭДОбъект");
	
		СтрокаДля1С.XmlTorg12_Item = XmlTorg12_Item;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуСозданияВ1СДаннымиЭД(СтрокаДля1С, СтрокаЭДОбъект)
	
	СтрокаДля1С.НоменклатураИзЭД = СтрокаЭДОбъект.Name;
	СтрокаДля1С.КодЭД			 = СтрокаЭДОбъект.Code;
	СтрокаДля1С.АртикулЭД		 = СтрокаЭДОбъект.NomenclatureArticle;
	СтрокаДля1С.ЕдиницаИзЭД		 = СтрокаЭДОбъект.UnitName;
	СтрокаДля1С.Количество		 = СтрокаЭДОбъект.Quantity;
	СтрокаДля1С.СуммаНДС		 = СтрокаЭДОбъект.Vat;
	СтрокаДля1С.Всего			 = СтрокаЭДОбъект.Subtotal;
	
	XmlTorg12_Item = Новый СписокЗначений;
	XmlTorg12_Item.Добавить(СтрокаЭДОбъект, "СтрокаЭДОбъект");
	
	СтрокаДля1С.XmlTorg12_Item = XmlTorg12_Item;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораДоговора()
	
	НовыйМассивПараметров=	Новый Массив();
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		МассивВидовДоговоров=	Новый ФиксированныйМассив(СписокВидовДоговоров.ВыгрузитьЗначения());
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора", МассивВидовДоговоров));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Контрагент));
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Соглашение", Соглашение));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Партнер", ПолучитьПартнера(Контрагент)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Контрагент));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", ?(ВидОперации = "ПоступлениеУслугИПрочихАктивов", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"), ВидОперации)));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")));
		
		Если МетодСервераБезКонтекста(,"ПолучитьФункциональнуюОпциюНаСервере", "ИспользоватьСоглашенияСПоставщиками") = Истина И ЗначениеЗаполнено(Соглашение) Тогда
			НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", ПолучитьВалютуПоСоглашению(Соглашение)));
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Организация));
	
	НовыеПараметрыВыбора=	Новый ФиксированныйМассив(НовыйМассивПараметров);
	Элементы.ДоговорыКонтрагентов.ПараметрыВыбора=	НовыеПараметрыВыбора;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьПоляСУчетомНДС(ТабДанных)

	Для Каждого СтрокаТЧ Из ТабДанных Цикл
		
		Item=	СтрокаТЧ.XmlTorg12_Item.Получить(0).Значение;
		
		ИмяСвойстваСуммаСНДС = ?(Item.Свойство("Subtotal"), "Subtotal", "Total");
		ИмяСвойстваСуммаБезНДС = ?(Item.Свойство("SubtotalWithVatExcluded"), "SubtotalWithVatExcluded", "TotalWithVatExcluded");
		
		Если СуммаВключаетНДС Тогда
			СтрокаТЧ.Сумма=	Item[ИмяСвойстваСуммаСНДС];
		Иначе
			СтрокаТЧ.Сумма=	Item[ИмяСвойстваСуммаБезНДС];
		КонецЕсли;
		
		СтрокаТЧ.Цена=	?(СтрокаТЧ.Количество = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
		
	КонецЦикла;
	
	ИтогКоличество=	Табданных.Итог("Количество");
	ИтогСумма=		Табданных.Итог("Сумма");
	ИтогСуммаНДС=	Табданных.Итог("СуммаНДС");
	ИтогВсего=		Табданных.Итог("Всего");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТЧЗначениямиИз1С(ТипОбъектаЭДО)
	
	ТабДанных=	РеквизитФормыВЗначение("ТабличнаяЧасть", Тип("ТаблицаЗначений"));
	
	ВладелецНоменклатуры = ПолучитьПартнера(Контрагент);
	Если Не ЗначениеЗаполнено(ВладелецНоменклатуры) Тогда
		ВладелецНоменклатуры = Контрагент;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТабДанных Цикл
		ЗаполнитьСтрокуДанными1С(СтрокаТЧ, ВладелецНоменклатуры);
		ЗаполнитьТипНоменклатуры(СтрокаТЧ, ТипОбъектаЭДО);
	КонецЦикла;
	
	ПересчитатьПоляСУчетомНДС(ТабДанных);
	
	ЗначениеВРеквизитФормы(ТабДанных, "ТабличнаяЧасть");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипНоменклатуры(СтрокаТЧ, ТипОбъектаЭДО)
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда 
		
		Если ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаТЧ.Тип = ?(МетодСервера(, "НоменклатураЯвляетсяУслугой", СтрокаТЧ.Номенклатура), "Услуга", "Товар");
			
		ИначеЕсли ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТЧ.Тип = "Основное средство";
			
		ИначеЕсли ТипЗнч(СтрокаТЧ.Номенклатура) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			СтрокаТЧ.Тип = "Объект стр";
			
		КонецЕсли;
		
	Иначе
		
		Если ТипОбъектаЭДО = "XmlAcceptanceCertificate"
			Или ТипОбъектаЭДО = "UtdAcceptanceCertificate"
			Или ТипОбъектаЭДО = "XmlAcceptanceCertificate552"
			Или (ЭтоУПД(ТипОбъектаЭДО)
				 И (СокрЛП(ВидОперации) = "ПоступлениеУслугИПрочихАктивов"
				 	ИЛИ СокрЛП(ВидОперации) = "ПоступлениеДопРасходов"
					ИЛИ СокрЛП(ВидОперации) = "Услуги"
					ИЛИ СокрЛП(ВидОперации) = "ПоступлениеУслугРабот")) Тогда
					
			СтрокаТЧ.Тип = "Услуга";
			
		ИначеЕсли СокрЛП(ВидОперации) = "Оборудование" Тогда 
			СтрокаТЧ.Тип = "Оборудование";
			
		ИначеЕсли СокрЛП(ВидОперации) = "ПоступлениеОС" Тогда
			СтрокаТЧ.Тип = "Основное средство";
			
		ИначеЕсли СокрЛП(ВидОперации) = "Объекты строительства" Тогда
			СтрокаТЧ.Тип = "Объект стр";
			СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.ОбъектыСтроительства.ПустаяСсылка");
			
		Иначе
			СтрокаТЧ.Тип = "Товар";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ItemStruct_2_ЕдиницаИзмерения(XmlTorg12_Item, Номенклатура) Экспорт
	
	Если  XmlTorg12_Item = Неопределено Тогда
		Возврат МетодСервера(,"ПолучитьЕдиницуИзмерения", "", "", Номенклатура);
 	Иначе	
		Возврат МетодСервера(,"ПолучитьЕдиницуИзмерения", XmlTorg12_Item.UnitCode, XmlTorg12_Item.UnitName, Номенклатура);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИспользованиеЕдиницыИзмерения()
	
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		ИспользоватьЕдиницуИзмерения=	Истина;
	Иначе
		Если НЕ СокрЛП(ВидОперации) = "Объекты строительства" Тогда
			ИспользоватьЕдиницуИзмерения=	Истина;
		Иначе
			ИспользоватьЕдиницуИзмерения=	Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСписокВидовДоговоров()
	
	ЭтоВозврат = Ложь;
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
		ЭтоВозврат = (ВидОперации = ВозвратТоваровОперацияПоУмолчаниюБП30());
	КонецЕсли;
	
	СписокВидовДоговоров = МетодСервера(, "ПолучитьСписокВидовДоговоров", ЭтоВозврат);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПартнера(Контрагент)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Контрагент)
		И ЕстьРеквизитМетаданных(Контрагент.Метаданные(), "Партнер") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкуПользователя(Наименование, Значение)
	
	МетодСервера(,"УстановитьНастройкуПользователя", Наименование, Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВидОперации = "ПоступлениеОС" Тогда
		
		СтандартнаяОбработка= Ложь;
		
		ПараметрыФормы= Новый Структура("ТекущаяСтрока", Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Организация));
		ОткрытьФорму("Справочник.ОсновныеСредства.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКурсВалюты(ДоговорКонтрагента, ДатаКурса)
	
	Возврат	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", ДоговорКонтрагента.ВалютаВзаиморасчетов));
	
КонецФункции

&НаСервере
Функция ПолучитьВалютуПоДоговору(ДоговорКонтрагента)
	
	Возврат ДоговорКонтрагента.ВалютаВзаиморасчетов
	
КонецФункции

&НаСервере
Функция ПолучитьВалютуПоСоглашению(Соглашение)
	
	Возврат ?(ЗначениеЗаполнено(Соглашение), Соглашение.Валюта, Неопределено);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//{ ОБЕРТКИ

	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеВидаОперации()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Изменить вид операции";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПолеВводаПриИзменении",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры // ДобавитьСтатистику_ИзменениеВидаОперации()

	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеОрганизации()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Изменить организация";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПолеВводаПриИзменении",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры // ДобавитьСтатистику_ИзменениеОрганизации()

	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеКонтрагента()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Изменить контрагент";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПолеВводаПриИзменении",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры // ДобавитьСтатистику_ИзменениеКонтрагента()

	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеДоговора()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Изменить договор";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПолеВводаПриИзменении",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры // ДобавитьСтатистику_ИзменениеДоговора()

	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеСоглашения()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Изменить соглашение";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПолеВводаПриИзменении",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры // ДобавитьСтатистику_ИзменениеСоглашения()

	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеСуммаВключаетНДС()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Изменить сумма включает НДС";
		ФлагУстановлен 		= СуммаВключаетНДС;
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПриИзмененииФлага",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия,
						ФлагУстановлен	);
		
	КонецПроцедуры // ДобавитьСтатистику_ИзменениеСуммаВключаетНДС()

	&НаКлиенте
	Процедура ДобавитьСтатистику_ИзменениеЗаполнениеГТД()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Изменить заполнение ГТД";
		ФлагУстановлен 		= ЗаполнениеГТД;
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_ПриИзмененииФлага",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия,
						ЗаполнениеГТД	);
						
	КонецПроцедуры // ДобавитьСтатистику_ИзменениеЗаполнениеГТД()

	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиСоздатьДокумент()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Создать документ";
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьПоведение_НажатиеКнопки",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры // ДобавитьСтатистику_НажалиСоздатьДокумент()

	&НаКлиенте
	Процедура ДобавитьСтатистику_НажалиЗакрытьФорму()
		
		Категории = МетодКлиента("Модуль_Клиент", "Метрика_Категории");
		
		НазваниеФормы 		= "Форма ввода накладной";
		НазваниеКатегории 	= Категории.СозданиеПНК;
		НазваниеДействия 	= "Закрыть";
		
		МетодКлиента(	"Модуль_Клиент", 
						"Метрика_ДобавитьПоведение_НажатиеКнопки",
						НазваниеФормы,
						НазваниеКатегории,
						НазваниеДействия	);
		
	КонецПроцедуры // ДобавитьСтатистику_НажалиЗакрытьФорму()

	&НаКлиенте
	Процедура ДобавитьСтатистику_СоздатьПриходнуюНакладную()
		
		ФорматЭД = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", ЭДОбъект);
		
		Переменные = Новый Структура;
		
		BoxGuid = МетодКлиента("Модуль_Клиент", "ПолучитьBoxGuidПоId", BoxID);
		
		Переменные.Вставить("BoxID"				, BoxGuid);
		Переменные.Вставить("ЗаполнениеГТД"		, ЗаполнениеГТД);
		Переменные.Вставить("СуммаВключаетНДС"	, СуммаВключаетНДС);
		Переменные.Вставить("ВидОперации"		, Строка(ВидОперации));
		Переменные.Вставить("ИмяТипа"			, ФорматЭД.ИмяТипа);
		Переменные.Вставить("ФункцияДокумента"	, ФорматЭД.ФункцияДокумента);
		Переменные.Вставить("ВерсияФормата"		, ФорматЭД.ВерсияФормата);
		
		МетодКлиента(	"Модуль_Клиент",
						"Метрика_ДобавитьСтатистику_СоздатьПриходнуюНакладную",
						Переменные	);
		
	КонецПроцедуры // ДобавитьСтатистику_СоздатьПриходнуюНакладную()

//} ОБЕРТКИ
////////////////////////////////////////////////////////////////////////////////
