
#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем КонтрактыМЧД;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма = ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа = ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПРЕДОПРЕДЕЛЕННЫЕ_СОБЫТИЯ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
			
	АдресЯщика = Параметры.АдресЯщика;
	
	НастроитьЭлементыФормы();
	
	
	//ToDo - Временно скрыто, пока не будет готово в веб версии
	//https://git.skbkontur.ru/Diadoc1C/Diadoc_UF/-/issues/1201
	Элементы.КоманднаяПанельДобавитьДоверенность.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПлатформаПриОткрытии(Отказ);
	
	ЗаполнитьСписокВыбораОрганизацийНаФорме();

	ОбновитьСписокДоверенностей();
	
КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_КОМАНД

&НаКлиенте
Процедура ОбновитьДанные(Команда)

	ОбновитьСписокДоверенностей();	

КонецПроцедуры

&НаКлиенте
Процедура ВыпуститьНовую(Команда)
	
	Ссылка = СсылкаНаСтраницуВыпускаНовойМЧД();
	ЗапуститьПриложение(Ссылка);	

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВВебВерсииДиадока(Команда)
	
	Ссылка = СсылкаНаСтраницуЗагрузкиМЧД();
	ЗапуститьПриложение(Ссылка);

КонецПроцедуры

#КонецОбласти

#Область ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_ФОРМЫ

&НаКлиенте
Процедура АдресЯщикаПриИзменении(Элемент)

	ОбновитьСписокДоверенностей();

КонецПроцедуры

&НаКлиенте
Процедура СписокДоверенностейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = СписокДоверенностей.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле = Элементы.СписокДоверенностейПоУмолчанию Тогда
		ОбработкаВыбораДоверенностиПоУмолчанию(ТекущиеДанные, СтандартнаяОбработка);
	ИначеЕсли Поле = Элементы.СписокДоверенностейКартинкаИнформацияОДоверенности Тогда
		ОбработкаОткрытияДетальнойИнформацииПоДоверенности(ТекущиеДанные, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаГиперссылкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ГиперссылкаКакДобавитьДоверенностьНажатие(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаКакДобавитьДоверенностьНажатие(Элемент)

	Ссылка = СсылкаНаСтраницуИнструкцииПоДобавлениюМЧД();
    ЗапуститьПриложение(Ссылка);

КонецПроцедуры

#КонецОбласти

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьКонтекстМЧДТекущегоЯщика()
	
	КонтекстМЧДТекущегоЯщика = МетодКлиента("Модуль_Клиент", "МЧД_ДанныеПоИспользованиюДоверенностей", АдресЯщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОрганизацийНаФорме()
	
	СписокВыбора = Элементы.АдресЯщика.СписокВыбора;
	
	КонтекстДиадока = Платформа.ПараметрыКлиент.КонтекстДиадока;
	
	Для Каждого ОписаниеЯщика Из КонтекстДиадока Цикл
		НовыйЭлемент = СписокВыбора.Добавить();
		НовыйЭлемент.Значение		= ОписаниеЯщика.BoxId;
		НовыйЭлемент.Представление	= ОписаниеЯщика.Организация;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДоверенностей()
	
	СписокДоверенностей.Очистить();
	
	КонтрактыМЧД = МетодКлиента("Модуль_Клиент", "МЧД_СписокДоверенностей", АдресЯщика);

	ЗаполнитьСписокДоверенностей();	
	
	Если СписокДоверенностей.Количество() Тогда
		ПоказатьСтраницуСпискаДоверенностей()
	Иначе
		ПоказатьСтраницуИнформацииОбОтсутствииДоверенностей()
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДоверенностей()
	
	СписокДоверенностей.Очистить();
	
	Для Каждого ЭлементСпискаМЧД Из КонтрактыМЧД Цикл
		
		КонтрактМЧД = ЭлементСпискаМЧД.Значение;
		
		НоваяСтрока = СписокДоверенностей.Добавить();
		НоваяСтрока.Идентификатор	= КонтрактМЧД.Идентификатор;
		НоваяСтрока.ПоУмолчанию 	= КонтрактМЧД.ПоУмолчанию;
		НоваяСтрока.СрокДействия 	= КонтрактМЧД.СрокДействия;
	
		ОсталосьДоОкончанияСрокаДействияДней = (КонтрактМЧД.СрокДействия - ТекущаяДата()) / (24 * 60 * 60);
		Если ОсталосьДоОкончанияСрокаДействияДней <= 30 Тогда
			НоваяСтрока.ИстекаетСрок = Истина;
		КонецЕсли;
		
		НоваяСтрока.ПредставлениеПредставителяИДоверителя = ПредставлениеПредставителяИДоверителя(КонтрактМЧД); 
		
		НоваяСтрока.КартинкаИнформацияОДоверенности = АдресВХранилищеКартинкиИнформацияПоДоверенности;
		
		УстановитьКартинкуСтрокиМЧД(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуСтрокиМЧД(СтрокаТаблицыДоверенностей)

	Если СтрокаТаблицыДоверенностей.ПоУмолчанию Тогда
		СтрокаТаблицыДоверенностей.КартинкаДоверенностьПоУмолчанию = АдресВХранилищеКартинкиОсновнаяДоверенность;
	Иначе
		СтрокаТаблицыДоверенностей.КартинкаДоверенностьПоУмолчанию = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуСпискаДоверенностей()
	
	ГруппаДоверенности = Элементы.ГруппаДоверенности; 
	ГруппаДоверенности.ТекущаяСтраница = ГруппаДоверенности.ПодчиненныеЭлементы.ГруппаСписок;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуИнформацииОбОтсутствииДоверенностей()

	ГруппаДоверенности = Элементы.ГруппаДоверенности; 
	ГруппаДоверенности.ТекущаяСтраница = ГруппаДоверенности.ПодчиненныеЭлементы.ГруппаИнформация;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	КоллекцияКартинок = МетодСервера(, "ЭДО_БиблиотекаКартинок");
	
	КартинкаИнформацииПоМЧД = КоллекцияКартинок.КартинкаИнформация;
	АдресВХранилищеКартинкиИнформацияПоДоверенности = ПоместитьВоВременноеХранилище(КартинкаИнформацииПоМЧД, УникальныйИдентификатор);
	
	КартинкаМЧДпоУмолчанию = КоллекцияКартинок.КартинкаФлаг;
    АдресВХранилищеКартинкиОсновнаяДоверенность = ПоместитьВоВременноеХранилище(КартинкаМЧДпоУмолчанию, УникальныйИдентификатор);
	
	КартинкаПоиск = КоллекцияКартинок.КартинкаПоиск64;
	АдресВХранилищеКартинкиПоиск = ПоместитьВоВременноеХранилище(КартинкаПоиск, УникальныйИдентификатор);
	
	КартинкаИнструкция = КоллекцияКартинок.КартинкаИнструкцияСиняяКруглая;
	АдресВХранилищеКартинкиИнструкция = ПоместитьВоВременноеХранилище(КартинкаИнструкция, УникальныйИдентификатор);

	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДоверенностиПоУмолчанию(ВыбраннаяСтрока, СтандартнаяОбработка)

    СтандартнаяОбработка = Ложь;

	Если УстановитьВыбраннойМЧДПризнакПоУмолчаниюНаСервере(ВыбраннаяСтрока.Идентификатор) Тогда
		
		СброситьУДоверенностейПризнакПоУмолчанию();
		
		КонтрактМЧД = КонтрактыМЧД.Получить(ВыбраннаяСтрока.Идентификатор);
		
		ВыбраннаяСтрока.ПоУмолчанию = Истина;
		КонтрактМЧД.ПоУмолчанию 	= Истина;	
		
		УстановитьКартинкуСтрокиМЧД(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьУДоверенностейПризнакПоУмолчанию()

	Отбор = Новый Структура;
	Отбор.Вставить("ПоУмолчанию", Истина);

	СтрокиСпискаДоверенностей = СписокДоверенностей.НайтиСтроки(Отбор);
	Если СтрокиСпискаДоверенностей.Количество() Тогда
		
		СтрокаСпискаДоверенностей = СтрокиСпискаДоверенностей[0];
		КонтрактМЧД = КонтрактыМЧД.Получить(СтрокаСпискаДоверенностей.Идентификатор);
		
		СтрокаСпискаДоверенностей.ПоУмолчанию 	= Ложь;
		КонтрактМЧД.ПоУмолчанию 				= Ложь;
		
		УстановитьКартинкуСтрокиМЧД(СтрокаСпискаДоверенностей);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьВыбраннойМЧДПризнакПоУмолчаниюНаСервере(ИдентификаторМЧД)
	
	КонтрактМЧД = КонтрактыМЧД.Получить(ИдентификаторМЧД);
	
	Результат = МетодКлиента("Модуль_Клиент"
		, "МЧД_УстановитьЗначениеПризнакаПоУмолчанию"
		, АдресЯщика
		, КонтрактМЧД);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработкаОткрытияДетальнойИнформацииПоДоверенности(ВыбраннаяСтрока, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	РеквизитыДоверенности 		= ЗначенияРеквизитовДоверенностиСписком(ВыбраннаяСтрока.Идентификатор);
	ТекстовыеДанныеСертификата 	= HTMLПредставлениеСпискаРеквизитовДоверенности(РеквизитыДоверенности);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ЗаголовокФормы"				, "Данные МЧД");	
	ПараметрыОткрытияФормы.Вставить("ПоказатьКнопкуСкопировать"		, Истина);
	ПараметрыОткрытияФормы.Вставить("ЗаголовокКнопкиСкопировать"	, "Скопировать данные доверенности");
	ПараметрыОткрытияФормы.Вставить("HTMLДокумент"					, ТекстовыеДанныеСертификата.ТекстHTML);
	ПараметрыОткрытияФормы.Вставить("ТекстДляКопирования"			, ТекстовыеДанныеСертификата.ТекстДляКопирования);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально"
		, "ФормаВыводаHTMLДокумента"
		, ПараметрыОткрытияФормы
		, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Функция ЗначенияРеквизитовДоверенностиСписком(ИдентификаторДоверенности)
	
	КонтрактМЧД = КонтрактыМЧД.Получить(ИдентификаторДоверенности);

	СтатусПроверки = КонтрактМЧД.СтатусПроверки;
	
	Результат = Новый СписокЗначений;
	Результат.Добавить(КонтрактМЧД.Идентификатор		, "Регистрационный номер");
	
	Результат.Добавить(Неопределено, "");
	
	Доверитель = КонтрактМЧД.Доверитель;
	
	Результат.Добавить(Неопределено						, "Организация-доверитель");
	Результат.Добавить(Доверитель.Наименование			, "Название");
	Результат.Добавить(ПредставлениеИННКПП(Доверитель)	, "ИНН-КПП");
	
	Результат.Добавить(Неопределено, "");
	
	Представитель = КонтрактМЧД.Представитель;
	
	Результат.Добавить(Неопределено					, "Представитель");
	Результат.Добавить(Представитель.Наименование	, "ФИО");
	Результат.Добавить(Представитель.ИНН			, "ИНН");
	
	Результат.Добавить(Неопределено, "");
	
	Результат.Добавить(Формат(КонтрактМЧД.ДатаНачалаДействия, "ДЛФ=D")	, "Дата выдачи");
	Результат.Добавить(Формат(КонтрактМЧД.СрокДействия, "ДЛФ=D")		, "Срок действия");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция HTMLПредставлениеСпискаРеквизитовДоверенности(КонтрактМЧД)

	Результат = Новый Структура("ТекстHTML, ТекстДляКопирования", "", "");
	
	ТекстДляКопирования = "";
	ТекстHTML =
	"<HTML><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type>
	|<STYLE type=""text/css"">p{
	|font-family: Arial; font-size: 16px; color: #000000; }</STYLE></HEAD>
	|<BODY>";
	
	Для каждого ЭлементСписка Из КонтрактМЧД Цикл
		
		ИмяРеквизитаДоверенности = ЭлементСписка.Представление;
		
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			ЗначениеРеквизитаДоверенности = ЭлементСписка.Значение;
		Иначе
			ЗначениеРеквизитаДоверенности = "";
		КонецЕсли;

		Если КонтрактМЧД.Индекс(ЭлементСписка) = 0
			Или ЗначениеЗаполнено(ИмяРеквизитаДоверенности) Тогда
			ШаблонТэгаHTML = "%1<br>";
		Иначе
			ШаблонТэгаHTML = "<p>%1</p>";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяРеквизитаДоверенности) Тогда
			ТекстСтроки = "" + ИмяРеквизитаДоверенности + ": " + ЗначениеРеквизитаДоверенности;
		Иначе
			ТекстСтроки	= "";
		КонецЕсли;
		
		ТекстHTML 			= ТекстHTML + СтрЗаменить(ШаблонТэгаHTML, "%1", ТекстСтроки);
		ТекстДляКопирования = ТекстДляКопирования + ТекстСтроки + Символы.ПС;
		
	КонецЦикла;
	
	ТекстHTML = ТекстHTML + "</BODY></HTML>";
	
	Результат.ТекстHTML = ТекстHTML;
	Результат.ТекстДляКопирования = ТекстДляКопирования;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеПредставителяИДоверителя(КонтрактМЧД)

	Результат = "";
	
	Представитель 	= КонтрактМЧД.Представитель.Наименование;
	Доверитель 		= КонтрактМЧД.Доверитель.Наименование + ", " + КонтрактМЧД.Доверитель.ИНН;
	
	Результат = Представитель + Символы.ПС + Доверитель;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокДоверенностейСрокДействия");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение		 = Новый ПолеКомпоновкиДанных("СписокДоверенностей.ИстекаетСрок"); 
	ЭлементОтбора.ВидСравнения		 = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение	 = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(246, 156, 0));
	
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокДоверенностейПоУмолчанию");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ЭлементОтбора.ЛевоеЗначение		 = Новый ПолеКомпоновкиДанных("СписокДоверенностей.ПоУмолчанию"); 
	ЭлементОтбора.ВидСравнения		 = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение	 = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(85, 85, 85));
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеИННКПП(Данные)

	МассивСлов = Новый Массив;
	МассивСлов.Добавить(Данные.ИНН);
	МассивСлов.Добавить(Данные.КПП);
	
	Результат = СтрСоединить(МассивСлов, "-");
    Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СсылкаНаСтраницуЗагрузкиМЧД()
	Возврат "https://diadoc.kontur.ru/BoxId/Preferences";
КонецФункции

&НаКлиенте
Функция СсылкаНаСтраницуВыпускаНовойМЧД()
	Возврат "https://diadoc.kontur.ru";
КонецФункции

&НаКлиенте
Функция СсылкаНаСтраницуИнструкцииПоДобавлениюМЧД()
	Возврат "https://wiki.diadoc.ru/pages/viewpage.action?pageId=42173077";
КонецФункции

#КонецОбласти