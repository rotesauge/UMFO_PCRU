
Перем Кэш;
Перем Манифест Экспорт;

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

	Функция ИнициализироватьОбщийКонтекстКлиентСервер(УИД = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
		
		МетаданныеОбработки = Метаданные();
		
		ПараметрыКлиентСервер = Новый Структура;
		
		ПараметрыКлиентСервер.Вставить("УникальныйИдентификаторОсновнойФормы", УИД);
		
		ПараметрыКлиентСервер.Вставить("ИмяОбработки",			МетаданныеОбработки.Имя);
		ПараметрыКлиентСервер.Вставить("СинонимКонфигурации",	Метаданные.Синоним);
		ПараметрыКлиентСервер.Вставить("ВерсияКонфигурации",	Метаданные.Версия);
		ПараметрыКлиентСервер.Вставить("ФайловыйРежимРаботы",	Найти(СтрокаСоединенияИнформационнойБазы(), "File=") > 0);
		ПараметрыКлиентСервер.Вставить("ИспользуемоеИмяФайла",	ИспользуемоеИмяФайлаОбработки());
		
		ПараметрыКлиентСервер.Вставить("МаркерКонфигурации", 	ПолучитьМаркерКонфигурации());
		ПараметрыКлиентСервер.Вставить("ИмяФормыИнтеграции", 	ИмяФормыИнтеграции());
		
		ПараметрыКлиентСервер.Вставить("КаталогМодулейСервера",			"");
		ПараметрыКлиентСервер.Вставить("РежимОтладкиСервера",			Ложь);
		ПараметрыКлиентСервер.Вставить("ВызовИзРасширения",				Ложь);
		ПараметрыКлиентСервер.Вставить("ОтправкаФайловСтарыйИнтерфейс",	Ложь);
		
		АдресаВХранилище = КонтекстКлиентСервер_АдресаВХранилище(УИД);
		ПараметрыКлиентСервер.Вставить("ВременноеХранилище", АдресаВХранилище);
		
		ПараметрыКлиентСервер.Вставить("ПутьКМодулюВСправочнике1С", ПолучитьЗначениеКонстанты("ПутьКМодулюВСправочнике1С"));
		
		ПодключаемыйМодуль = КонтекстКлиентСервер_ПодключаемыйМодуль();
		ПараметрыКлиентСервер.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
		
		Метрики = КонтекстКлиентСервер_Метрики();
		ПараметрыКлиентСервер.Вставить("Метрики", Метрики);
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			ДополнитьСтруктуруСоответствие(ПараметрыКлиентСервер, ДополнительныеПараметры);
		КонецЕсли;
		
		Возврат ПараметрыКлиентСервер;
		
	КонецФункции
	
	Функция МетодСервера(Знач ИмяМодуля= "", ИмяМетода,
			Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
			Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
		Если НЕ ЗначениеЗаполнено(ИмяМодуля) Тогда
			
			ИмяМодуля = ПараметрыКлиентСервер.ИмяОбработки;
			
		ИначеЕсли ИмяМодуля = "Модуль_Интеграция" Тогда
			
			ИмяМодуля = ПараметрыКлиентСервер.ИмяФормыИнтеграции;
			
		КонецЕсли;
		
		Результат = ВыполнитьМетод(ИмяМодуля, ИмяМетода
		, Параметр0, Параметр1, Параметр2, Параметр3, Параметр4 
		, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9
		);
		
		Возврат Результат;
		
	КонецФункции

	Функция ВыполнитьМетод(ИмяМодуля, ИмяМетода
		, Параметр0, Параметр1, Параметр2, Параметр3, Параметр4
		, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		Результат			 = Неопределено;
		ВариантКэширования	 = Неопределено;
		
		Модуль = ПолучитьМодуль(ИмяМодуля);
		МанифестМодуля = Модуль.Манифест;
		
		МассивПараметров = МассивПараметров(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		ПараметрыСтрокой = ПараметрыСтрокой(МассивПараметров);
		
		Если МанифестМодуля.Функции.Свойство(ИмяМетода, ВариантКэширования) Тогда
			
			РезультатПолучен	 = Ложь;
			КэшироватьРезультат	 = НРег(ВариантКэширования) = НРег("НаВремяСеанса");
			
			Если КэшироватьРезультат Тогда
				Результат = РезультатФункцииИзКэш(ИмяМодуля, ИмяМетода, МассивПараметров, РезультатПолучен);
			КонецЕсли;
			
			Если НЕ РезультатПолучен Тогда
				
				Результат = Вычислить("Модуль." + ИмяМетода + "("+ПараметрыСтрокой+")");
				
				Если КэшироватьРезультат Тогда
					ЗаписатьРезультатФункцииВКэш(ИмяМодуля, ИмяМетода, МассивПараметров, Результат);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Выполнить("Модуль."+ИмяМетода+"("+ПараметрыСтрокой+")");
		КонецЕсли;
		
		Если Модуль <> ЭтотОбъект Тогда
			Модуль.ОчиститьПеременные();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьМодуль(ИмяМодуля)
		
		Результат = Неопределено;
		
		Если НРег(ИмяМодуля) = НРег(ПараметрыКлиентСервер.ИмяОбработки) Тогда
			
			Если Манифест = Неопределено Тогда
				ЗаполнитьМанифест(ЭтотОбъект);
			КонецЕсли;
			
			Результат = ЭтотОбъект;
			
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			
			Результат = КэшМодулей()[ИмяМодуля];
			
			Если Результат = Неопределено Тогда
				
				Результат = СоздатьМодуль(ИмяМодуля);
				
				Если НЕ ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
					КэшМодулей().Вставить(ИмяМодуля, Результат);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Результат <> Неопределено Тогда
				
				ИнициализироватьМодуль(Результат, ИмяМодуля);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Процедура ИнициализироватьМодуль(Модуль, ИмяМодуля)
		
		Если ВРег(ИмяМодуля) = ВРег("ПодключаемыйМодуль") 
			И Не ЭтоПодключаемыйМодуль(Модуль) Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Выбранный файл не является подключаемым модулем.'");
			ОбработатьОшибкуИнициализацииПМ(ОписаниеОшибки);
			
		КонецЕсли;
		
		Попытка
			
			Модуль.ОбработкаОбъект		 = ЭтотОбъект;
			Модуль.ПараметрыКлиентСервер = ПараметрыКлиентСервер;
			Модуль.Инициализировать(ИмяМодуля);
			
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			
			ШаблонКомментария = НСтр("ru = 'Ошибка инициализации модуля <%1>:
                                     |%2'");
			
			ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария
				, ИмяМодуля
				, ПодробноеПредставлениеОшибки(Ошибка));
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария
				, ИмяМодуля
				, КраткоеПредставлениеОшибки(Ошибка));
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Диадок'")
				, УровеньЖурналаРегистрации.Ошибка
				,
				,
				, ТекстКомментария);
			
			ВызватьИсключение ТекстИсключения;
			
		КонецПопытки;
		
	КонецПроцедуры
	
	Функция СоздатьМодуль(ИмяМодуля)
		
		Если ИмяМодуля = "ПодключаемыйМодуль" Тогда
			Возврат СоздатьМодульПМ();
		КонецЕсли;
		
		Результат = Неопределено;
		
		Если ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
			
			ПодКаталогиОбработок = КаталогиВложенныхОбработокВРежимеОтладки();
			
			ИмяФайла		 = ИмяМодуля + ".epf";
			ПодКаталог		 = ПодКаталогиОбработок[ИмяМодуля];
			КаталогОбработок = ПараметрыКлиентСервер.КаталогМодулейСервера;
			ПолноеИмяФайла	 = ОбъединитьПути(КаталогОбработок, ПодКаталог, ИмяФайла);
			
			Если Не ФайлСуществует(ПолноеИмяФайла) Тогда
				ЗаписатьМакетОбработкиВФайл(ИмяМодуля, ПолноеИмяФайла);
			КонецЕсли;
			
			Результат = ВнешниеОбработки_СоздатьИзФайла(ПолноеИмяФайла, Ложь);
			
		Иначе
			
			ПроверитьЧтоБезопасныйРежимОтключен();
			
			ДвоичныеДанные = ПолучитьМакет(ИмяМодуля);
			АдресОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ИмяОбработки = ВнешниеОбработки_Подключить(АдресОбработки);
			Результат	 = ВнешниеОбработки_СоздатьПоИмени(ИмяОбработки);
			
		КонецЕсли;
		
		Если ПараметрыКлиентСервер.РежимОтладкиСервера Тогда
			Результат.ПриглашениеОтладки();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СоздатьМодульПМ()
		
		Результат = Неопределено;
		
		ПроверитьПараметрыПодключенияПМ();
		
		РасположениеМодуля	 = ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля;
		ПутьКМодулю			 = ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю;
		РежимОтладкиСервера	 = ПараметрыКлиентСервер.РежимОтладкиСервера;
		ИмяОбработки		 = "ДиадокПодключаемыйМодульСтандарт";
		
		ПроверитьЧтоБезопасныйРежимОтключен();
		
		Если РасположениеМодуля = "ВСоставеКонфигурации" Тогда
			
			Результат = Обработки[ПутьКМодулю].Создать();
			
		ИначеЕсли РасположениеМодуля = "НаДиске" Тогда
			
			Если РежимОтладкиСервера Тогда
			
				Результат = ВнешниеОбработки_СоздатьИзФайла(ПутьКМодулю, Ложь);
				
				Результат.ПриглашениеОтладки();
				
			Иначе
			
				ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКМодулю);
				АдресОбработки = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				
				ВнешниеОбработки_Подключить(АдресОбработки, ИмяОбработки);
				Результат = ВнешниеОбработки_СоздатьПоИмени(ИмяОбработки);
			
			КонецЕсли
			
		ИначеЕсли РасположениеМодуля = "ВБазеДанных" Тогда
			
			ВнешняяОбработкаСсылка		 = ПутьКМодулю;
			ВнешняяОбработкаМетаданные	 = ВнешняяОбработкаСсылка.Метаданные();
			
			Для Каждого Реквизит ИЗ ВнешняяОбработкаМетаданные.Реквизиты Цикл
				
				Если НЕ Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
					Продолжить;
				КонецЕсли;
				
				АдресОбработки = ПолучитьНавигационнуюСсылку(ВнешняяОбработкаСсылка, Реквизит.Имя);
				
				Попытка
					ВнешниеОбработки_Подключить(АдресОбработки, ИмяОбработки);
				Исключение
					
					// Если не удалось подключить внешнюю обработку,
					// значит в этом реквизите нет файла, продолжаем поиск.
					Продолжить;
					
				КонецПопытки;
				
				Результат = ВнешниеОбработки_СоздатьПоИмени(ИмяОбработки);
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Возвращает из кэш предыдущий результат функции, по сигнатуре (с учетом параметров).
	//
	// Параметры:
	//  ИмяМодуля		 - Строка	 - имя модуля, в котором расположена функция;
	//  ИмяФункции		 - Строка	 - имя функции, для которой нужно получить предыдущий результат;
	//  МассивПараметров - Массив	 - массив параметров, с которыми выполняется функция;
	//  РезультатПолучен - Булево	 - Истина, если результат удалось получить;
	// 
	// Возвращаемое значение:
	//   - Произвольный - результат функции из кэш
	//
	Функция РезультатФункцииИзКэш(ИмяМодуля, ИмяФункции, МассивПараметров, РезультатПолучен = Ложь)
		
		Результат = Неопределено;
		
		КэшФункций			 = КэшФункцийДляПовторногоИспользования();
		СигнатураФункции	 = СигнатураФункцииДляПовторногоИспользования(ИмяМодуля, ИмяФункции, МассивПараметров, КэшФункций);
		СтруктураРезультата	 = КэшФункций.ХранилищеРезультатов[СигнатураФункции];
		
		Если СтруктураРезультата <> Неопределено Тогда
			Результат = СтруктураРезультата.Результат;
			РезультатПолучен = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Записывает результат функции в кэш, ключем будет сигнатура функции (с учетом параметров).
	//
	// Параметры:
	//  ИмяМодуля		 - Строка		 - имя модуля, в котором расположена функция;
	//  ИмяФункции		 - Строка		 - имя функции, результат которой нужно записать в кэш;
	//  МассивПараметров - Массив		 - массив параметров, с которыми выполняется функция;
	//  Результат		 - Произвольный	 - результат функции, который нужно записать в кэш;
	// 
	Процедура ЗаписатьРезультатФункцииВКэш(ИмяМодуля, ИмяФункции, МассивПараметров, Результат)
	
		КэшФункций		 = КэшФункцийДляПовторногоИспользования();
		СигнатураФункции = СигнатураФункцииДляПовторногоИспользования(ИмяМодуля, ИмяФункции, МассивПараметров, КэшФункций);
		
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("Результат", Результат);
		
		КэшФункций.ХранилищеРезультатов.Вставить(СигнатураФункции, СтруктураРезультата);
	
	КонецПроцедуры
	
	// Удаляет результат функции из кэш, по сигнатуре (с учетом параметров).
	//
	// Параметры:
	//  ИмяМодуля		 - Строка		 - имя модуля, в котором расположена функция;
	//  ИмяФункции		 - Строка		 - имя функции, для которой нужно удалить результат из кэш;
	//  МассивПараметров - Массив		 - массив параметров, с которыми выполняется функция;
	// 
	Процедура УдалитьРезультатФункцииИзКэш(ИмяМодуля, ИмяФункции, МассивПараметров)
	
		КэшФункций		 = КэшФункцийДляПовторногоИспользования();
		СигнатураФункции = СигнатураФункцииДляПовторногоИспользования(ИмяМодуля, ИмяФункции, МассивПараметров, КэшФункций);
		
		КэшФункций.ХранилищеРезультатов.Удалить(СигнатураФункции);
	
	КонецПроцедуры
	
	Процедура ПовторноеИспользованиеСброситьЗначение(Знач ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
		
		Если НЕ ЗначениеЗаполнено(ИмяМодуля) Тогда
			
			ИмяМодуля = ПараметрыКлиентСервер.ИмяОбработки;
			
		ИначеЕсли ИмяМодуля = "Модуль_Интеграция" Тогда
			
			ИмяМодуля = ПараметрыКлиентСервер.ИмяФормыИнтеграции;
			
		КонецЕсли;
		
		МассивПараметров= МассивПараметров(
		Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
		
		УдалитьРезультатФункцииИзКэш(ИмяМодуля, ИмяМетода, МассивПараметров);
		
	КонецПроцедуры
	
	Функция КэшФункцийДляПовторногоИспользования()
		
		Результат = ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресКэшаСервераНаВремяСеанса);
		
		Если Результат = Неопределено Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("ИтераторКлючей"				, 0);
			Результат.Вставить("ХранилищеРезультатов"		, Новый Соответствие);
			Результат.Вставить("КлючиДляЗначенийПараметров"	, Новый Соответствие);
			
			ПоместитьВоВременноеХранилище(Результат, ПараметрыКлиентСервер.ВременноеХранилище.АдресКэшаСервераНаВремяСеанса);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СигнатураФункцииДляПовторногоИспользования(ИмяМодуля, ИмяФункции, МассивПараметров, КэшФункций)
		
		Результат		 = "";
		КлючиПараметров	 = "";
		Разделитель		 = "";
		
		Для Индекс = 0 По МассивПараметров.ВГраница() Цикл
			
			// Сначала задаем уникальный числовой ключ
			// для каждого варианта значения параметров.
			// Затем собираем из этих ключей уникальную строку,
			// которая будет составлять сигнатуру метода.
			
			ЗначениеПараметра = МассивПараметров[Индекс];
			
			Если ЗначениеПараметра = Неопределено Тогда
				
				КлючЗначения = "0";
				
			Иначе
				
				КлючЗначения = КэшФункций.КлючиДляЗначенийПараметров[ЗначениеПараметра];
				
				Если КлючЗначения = Неопределено Тогда
					
					// Присваиваем ключ для нового значения,
					// с помощью инкрементации итератора ключей.
					НовыйКлюч	 = КэшФункций.ИтераторКлючей + 1;
					КлючЗначения = Формат(НовыйКлюч, "ЧГ=0");
					
					КэшФункций.ИтераторКлючей = НовыйКлюч;
					КэшФункций.КлючиДляЗначенийПараметров.Вставить(ЗначениеПараметра, КлючЗначения);
					
				КонецЕсли;
				
			КонецЕсли;
			
			КлючиПараметров	 = КлючиПараметров + Разделитель + КлючЗначения;
			Разделитель		 = ", ";
			
		КонецЦикла;
		
		Результат = ИмяМодуля + "." + ИмяФункции + "(" + КлючиПараметров + ")";
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПараметрыСтрокой(МассивПараметров)
		
		Результат	 = "";
		Разделитель	 = "";
		
		Для Индекс = 0 По МассивПараметров.ВГраница() Цикл
			
			Если МассивПараметров[Индекс] = NULL Тогда
				Результат= Результат + Разделитель;
			Иначе
				Результат= Результат + Разделитель + "Параметр" + Индекс;
			КонецЕсли;
			
			Разделитель= ", ";
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция МассивПараметров(Параметр0, Параметр1, Параметр2, Параметр3, Параметр4, 
		Параметр5, Параметр6, Параметр7, Параметр8, Параметр9)
		
		Результат = Новый Массив(10);
		Результат[0]= Параметр0; Результат[1]= Параметр1; Результат[2]= Параметр2; Результат[3]= Параметр3; Результат[4]= Параметр4;
		Результат[5]= Параметр5; Результат[6]= Параметр6; Результат[7]= Параметр7; Результат[8]= Параметр8; Результат[9]= Параметр9;
		
		Для Сч = -Результат.ВГраница() По 0 Цикл
			
			Если Результат[-Сч] <> NULL Тогда
				Прервать;
			КонецЕсли;
			
			Результат.Удалить(-Сч);
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	
	Процедура ЗаполнитьМанифест(Модуль, ИмяМодуля = Неопределено) Экспорт
		
		Если Модуль = ЭтотОбъект Тогда
			
			ФункцииМодуля = ФункцииМодуля();
			НовыйМанифест = Новый Структура;
			НовыйМанифест.Вставить("Функции", ФункцииМодуля);
			
			Манифест = НовыйМанифест;
			
		Иначе
			
			ФункцииМодуля = Модуль.ФункцииМодуля();
			НовыйМанифест = Новый Структура;
			НовыйМанифест.Вставить("Функции", ФункцииМодуля);
			
			Модуль.Манифест = НовыйМанифест;
			
		КонецЕсли;
		
	КонецПроцедуры

	Функция ДобавитьФункциюВМанифест(СтруктураМетодов, ИмяМетода, УДАЛИТЬ_ПараметрыСтрокой = "", ВариантКэширования = Неопределено, УДАЛИТЬ_Переопределение= Ложь) Экспорт
		
		СтруктураМетодов.Вставить(ИмяМетода, ВариантКэширования);
		
	КонецФункции

	Процедура ПроверитьПодключениеПМ() Экспорт
		
		СброситьКэшМодулей();
		
		ПроверитьПараметрыПодключенияПМ();
		
		МетодСервера("ПодключаемыйМодуль", "ОбработкаСобытияПодключаемогоМодуля", "ПроверкаПодключенияПМ");
		
	КонецПроцедуры

	Функция ПроверитьЧтоБезопасныйРежимОтключен()
		
		Если БезопасныйРежим() <> Ложь Тогда
			
			ВызватьИсключение
			"						Недопустимый режим работы модуля Диадок!
			|
			|Для работы модуля Диадок необходимо:
			|
			|Вариант №1: Поместить модуль в справочник ""Дополнительные отчеты и обработки"".
			|
			|Вариант №2: Поместить модуль в состав конфигурации программы.
			|
			|Вариант №3: Запускать модуль под пользователем с правами ""Администратор системы"" или ""Полные права""";
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
	
	Процедура ПроверитьПараметрыПодключенияПМ()
		
		ПараметрыПМ = ПараметрыКлиентСервер.ПодключаемыйМодуль;
		
		Если Не ПараметрыПМ.ИспользоватьМодуль Тогда
			Возврат;
		КонецЕсли;
		
		СпособПодключения	 = ВРег(ПараметрыПМ.РасположениеМодуля);
		ПутьКМодулю			 = ПараметрыПМ.ПутьКМодулю;
		
		ОписаниеОшибки = Неопределено;
		
		Если СпособПодключения = ВРег("НаДиске") Тогда
			
			Файл = Новый Файл(ПутьКМодулю);
			
			Если Не ЗначениеЗаполнено(ПутьКМодулю) Тогда
				
				ОписаниеОшибки = НСтр("ru = 'Не указан путь к файлу.'");
				
			ИначеЕсли Не Файл.Существует() Тогда
				
				ОписаниеОшибки = НСтр("ru = 'Файл не обнаружен или к нему отсутствует доступ (%1).'");
				
				Если Не ПараметрыКлиентСервер.ФайловыйРежимРаботы Тогда
					ОписаниеОшибки = ОписаниеОшибки 
						+ Символы.ПС
						+ НСтр("ru = 'Проверьте, что файл доступен для загрузки на сервере 1С.'");
				КонецЕсли;
				
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ПутьКМодулю);
				
			ИначеЕсли Не Файл.ЭтоФайл() Или НРег(Файл.Расширение) <> ".epf" Тогда
				
				ОписаниеОшибки = НСтр("ru = 'Выбранный файл не является внешней обработкой (%1).'");
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ПутьКМодулю);
				
			КонецЕсли;
			
		ИначеЕсли СпособПодключения = ВРег("ВСоставеКонфигурации") Тогда
			
			Если Не ЗначениеЗаполнено(ПутьКМодулю) Тогда
				
				ОписаниеОшибки = НСтр("ru = 'Не указано имя подключаемого модуля.'");
				
			ИначеЕсли Метаданные.Обработки.Найти(ПутьКМодулю) = Неопределено Тогда
				
				ОписаниеОшибки = НСтр("ru = 'Неверно указано имя подключаемого модуля (<%1>).'");
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ПутьКМодулю);
				
			КонецЕсли;
			
		ИначеЕсли СпособПодключения = ВРег("ВБазеДанных") Тогда
			
			Если Не ЗначениеЗаполнено(ПутьКМодулю) Тогда
				ОписаниеОшибки = НСтр("ru = 'Неверно указана ссылка на подключаемый модуль.'");
			КонецЕсли;
			
		Иначе 
			
			ОписаниеОшибки = НСтр("ru = 'Неверно указано расположение подключаемого модуля (<%1>).'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, СпособПодключения);
			
		КонецЕсли;
		
		ОбработатьОшибкуИнициализацииПМ(ОписаниеОшибки);
		
	КонецПроцедуры
	
	Функция ЭтоПодключаемыйМодуль(Модуль)
		
		Результат = Истина;
		
		КонтролируемыеСвойства = Новый Массив;
		КонтролируемыеСвойства.Добавить("ОбработкаОбъект");
		КонтролируемыеСвойства.Добавить("ПараметрыКлиентСервер");
		КонтролируемыеСвойства.Добавить("ПереопределениеВыполнено");
		
		Если Не ЕстьРеквизитыИлиСвойстваОбъекта(Модуль, КонтролируемыеСвойства) Тогда
			Результат = Ложь;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Процедура ОбработатьОшибкуИнициализацииПМ(ОписаниеОшибки)
		
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		ТекстИсключения = НСтр("ru = 'Ошибка инициализации подключаемого модуля:
                                |%1
                                |
                                |Проверьте корректность параметров подключения внешнего модуля в разделе «Настройки».'");
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Диадок'")
			, УровеньЖурналаРегистрации.Ошибка
			,
			,
			, ТекстИсключения);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПроцедуры
	
	Функция КэшМодулей() Экспорт
		
		// Метод сделан экспортным для вызова из DDPro
		
		Результат = ЭДО_Кэш_Прочитать("КэшМодулей");
		
		Если Результат = Неопределено Тогда
			
			Результат = Новый Соответствие;
			
			ЭДО_Кэш_Поместить("КэшМодулей", Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Процедура ЗавершениеРаботыМодуля() Экспорт
		
		СброситьКэшМодулей();
		ОчиститьВременноеХранилище();
		СброситьКэш();
		
	КонецПроцедуры
	
	Процедура СброситьКэшМодулей() Экспорт
		
		КэшМодулей = КэшМодулей();
		
		Для Каждого КлючИЗначение ИЗ КэшМодулей Цикл
			
			Попытка
				
				// На всякий случай, чтобы исключить утечку памяти.
				КлючИЗначение.Значение.ОбработкаОбъект = Неопределено;
				
			Исключение КонецПопытки;
			
		КонецЦикла;
		
		КэшМодулей.Очистить();
		
	КонецПроцедуры
	
	Процедура СброситьКэш()
		
		Если Кэш <> Неопределено Тогда
			
			Для Каждого КлючИЗначение ИЗ Кэш Цикл
				Попытка
					КлючИЗначение.Значение.Очистить();
				Исключение КонецПопытки;
			КонецЦикла;
			
			Кэш.Очистить();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОчиститьВременноеХранилище()
		
		Для каждого КлючИЗначение Из ПараметрыКлиентСервер.ВременноеХранилище Цикл
			УдалитьИзВременногоХранилища(КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецПроцедуры
	
#КонецОбласти

#Область МАНИФЕСТ

	Функция ФункцииМодуля()
		
		Результат = Новый Структура;
		
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЗначениеКонстанты");
		ДобавитьФункциюВМанифест(Результат, "ОбъектКонстант", ,"НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЗначениеСвойства");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЗначенияСвойстваОбъектов");
		ДобавитьФункциюВМанифест(Результат, "НайтиСвойство");
		ДобавитьФункциюВМанифест(Результат, "НайтиСвойствоПовтИсп", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "НайтиСвойстваПоСтруктуре");
		ДобавитьФункциюВМанифест(Результат, "НайтиПодобныеСвойстваПоСтруктуре");
		ДобавитьФункциюВМанифест(Результат, "ВерсияОбработки");
		ДобавитьФункциюВМанифест(Результат, "ВерсияОбработкиБезНомераСборки");
		ДобавитьФункциюВМанифест(Результат, "ТребуемаяВерсияРасширенияДиадок");
		ДобавитьФункциюВМанифест(Результат, "ВерсияВнешнейКомпоненты");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСписокСтатусовВзаимоотношений");
		ДобавитьФункциюВМанифест(Результат, "РасшифровкаТекущегоСостоянияВзаимоотношений");
		ДобавитьФункциюВМанифест(Результат, "КлассификаторВалютПолучитьНаименованиеПоКоду");
		ДобавитьФункциюВМанифест(Результат, "ВыделитьСлово");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьПутьКWEBСерверу");
		ДобавитьФункциюВМанифест(Результат, "ПреобразоватьМассивСтруктурВТаблицуЗначений");
		ДобавитьФункциюВМанифест(Результат, "ПреобразоватьТаблицуЗначенийВМассивСтруктур");
		ДобавитьФункциюВМанифест(Результат, "ПреобразоватьСтруктуруВТаблицу");
		ДобавитьФункциюВМанифест(Результат, "ЕстьПериферийныеБазы");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСтрокуПоМассиву");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьМаркерКонфигурации");
		ДобавитьФункциюВМанифест(Результат, "СформироватьПрофильКонфигурации");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьДоступКОбъектам");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьПраваНаПВХ");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьВозможностьИнициализацииВУзле");
		ДобавитьФункциюВМанифест(Результат, "ИнициализироватьНеобходимыеСвойстваПВХ");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьИнициализациюСвойствПВХ");
		ДобавитьФункциюВМанифест(Результат, "ПодготовкаКонфигурацииКРаботе");
		ДобавитьФункциюВМанифест(Результат, "ЭтоПериферийнаяБД");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьТекущегоПользователя");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНеобходимыеДляРаботыОбъекты");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНеобходимыеДляРаботыПВХ");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНеобходимыеДляРаботыРегистры");
		ДобавитьФункциюВМанифест(Результат, "ЕстьРеквизитИлиСвойствоОбъекта");
		ДобавитьФункциюВМанифест(Результат, "ЕстьРеквизитыИлиСвойстваОбъекта");
		ДобавитьФункциюВМанифест(Результат, "ЕстьРеквизитТипаОбъекта", ,"НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "ТаблицаЗначений_2_МассивСтруктур");
		ДобавитьФункциюВМанифест(Результат, "НайтиСтрокуВМассивеСтруктур");
		ДобавитьФункциюВМанифест(Результат, "ПоместитьИнтеграционныйМодульВДополнительныеОбработки");
		ДобавитьФункциюВМанифест(Результат, "ЗаполнитьДанныеОПомещаемомМодуле");
		ДобавитьФункциюВМанифест(Результат, "ИмяФормыИнтеграции");
		ДобавитьФункциюВМанифест(Результат, "ПредставлениеВизирующегоСтруктурой");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНоменклатуруПоставщика");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНоменклатуруПоАртикулу", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "НоменклатураЯвляетсяУслугой");
		ДобавитьФункциюВМанифест(Результат, "ВыбратьОсновноеСоглашениеКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ВыбратьОсновнойДоговорКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСоглашениеКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьДоговорКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ОбновитьДанныеДокумента");
		ДобавитьФункциюВМанифест(Результат, "ОпределитьСтавкуНДС_1С_ПоСтавкеНДС_ДД", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "ОпределитьСтавкуНДСПоУслуге");
		ДобавитьФункциюВМанифест(Результат, "ЧислоИзЗначенияОтКомпоненты");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСтавкуНДСДиадок", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЕдиницуИзмерения");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСписокВидовДоговоров");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСписокАссоциированныхКонтрагентовДиадок");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьДанныеПоДоговору");
		ДобавитьФункциюВМанифест(Результат, "БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры");
		ДобавитьФункциюВМанифест(Результат, "БухгалтерскийУчетВызовСервераПовтИспПолучитьСвойстваСчета");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСчетаРасчетов");
		ДобавитьФункциюВМанифест(Результат, "ПредставлениеДокументов", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "МассивДополнительныхВПФ");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНастройкиПользователя");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНастройкуПользователя");
		ДобавитьФункциюВМанифест(Результат, "УстановитьНастройкиПользователей");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьНаличиеНастроекПользователя");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьМЗНастройкиПОльзователя");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНастройкиПрокси");
		ДобавитьФункциюВМанифест(Результат, "НастройкиИнтернетПодключения");
		ДобавитьФункциюВМанифест(Результат, "ФорматыДокументовНаОтправку");
		ДобавитьФункциюВМанифест(Результат, "ФорматДокументовНаОтправкуУстаревшийФормат");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНазначениеСвойстваСтрокой");
		ДобавитьФункциюВМанифест(Результат, "СвойстваОбъектов_НайтиОбъектыПоТЗ");
		ДобавитьФункциюВМанифест(Результат, "СвойстваОбъектов_НайтиОбъект");
		ДобавитьФункциюВМанифест(Результат, "СвойстваОбъектов_НайтиМассивОбъектов");
		ДобавитьФункциюВМанифест(Результат, "НайтиОбъект");
		ДобавитьФункциюВМанифест(Результат, "НайтиМассивОбъектов");
		ДобавитьФункциюВМанифест(Результат, "НайтиПодобныеСвойства");
		ДобавитьФункциюВМанифест(Результат, "НайтиНастройкиПользователейИзБП20");
		ДобавитьФункциюВМанифест(Результат, "СоздатьНеобходимыеСвойстваВПВХ");
		ДобавитьФункциюВМанифест(Результат, "СоздатьСвойство");
		ДобавитьФункциюВМанифест(Результат, "СоздатьСвойстваОбъектов");
		ДобавитьФункциюВМанифест(Результат, "НеобходимоИнициализироватьВозможныеНастройки");
		ДобавитьФункциюВМанифест(Результат, "НеобходимоИнициализироватьВозможныеСвойства");
		ДобавитьФункциюВМанифест(Результат, "НеобходимоИнициализироватьСтарыеСвойстваИз20");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьНеобходимостьИнициализацииСвойств");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьВозможныеНастройкиПользователя");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьВозможныеСвойстваОбъектов");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСтарыеСвойстваОбъектовИз20");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьНаличиеСвойствОбъектов");
		ДобавитьФункциюВМанифест(Результат, "ПереместитьЗначенияСтарыхСвойств");
		ДобавитьФункциюВМанифест(Результат, "ПереместитьНастройкиПользователей");
		ДобавитьФункциюВМанифест(Результат, "ПереписатьНовыеЗначенияНеправильныхСвойств");
		ДобавитьФункциюВМанифест(Результат, "ОбработатьНеправильныеСвойства");
		ДобавитьФункциюВМанифест(Результат, "ПереименоватьСтарыеНастройкиИз20");
		ДобавитьФункциюВМанифест(Результат, "ОбработатьСвойстваОбъектовИз20");
		ДобавитьФункциюВМанифест(Результат, "СведенияОВнешнейОбработке");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьТаблицуКоманд");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваЯщикОрганизации");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторЭДОДляОрганизации");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваПодразделениеОрганизации");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваЯщикКонтрагентаПрефикс");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторЭДОДляКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИДПодразделенияКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторДокументаВДиадок");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваДиадокCustomDocumentId");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваДиадокCustomDocumentIdСчет");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваПредставлениеСертификатаПользователя");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваАдреспроксиСервера");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваПользовательПроксиСервера");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваПарольПроксиСервера");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваСпособПодписанияТ12");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваОбластьПолномочийПодписанияУПД");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваДолжностьПодписанта");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваПечатнаяФормаДляТоваров");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваПечатнаяФормаДляУслуг");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваОтправлятьНеПроведенные");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваФормироватьУПД");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваФормироватьУПДКонтрагент");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваВнешняяПечатнаяФормаСчета");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваСтандартнаяФормаСчетаНаОплату");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваФормироватьСчетНаОсновании");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваВнешняяПечатнаяФормаАкта");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваСпособФормированияАкта");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваСпособФормированияАктаСверки");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваПодставлятьКППГрузоотправителя");
		ДобавитьФункциюВМанифест(Результат, "ИдентификатрСвойстваТекстКомментарияДиадок");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваIdПодписантаСогласование");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваДолжностьПодписантаСогласование");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваСтатусОтправляемыхВПФ");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваНомерВПФ");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваСписокДопВПФ");
		ДобавитьФункциюВМанифест(Результат, "ИдентификаторСвойстваУказыватьОтсутствиеОснованияУПД");
		ДобавитьФункциюВМанифест(Результат, "DocumentID_2_ДокументМассовое", "ТЗИд");
		ДобавитьФункциюВМанифест(Результат, "DocumentID_2_Документ");
		ДобавитьФункциюВМанифест(Результат, "DocumentID_2_МассивДокументов");
		ДобавитьФункциюВМанифест(Результат, "Документ_2_DocumentID");
		ДобавитьФункциюВМанифест(Результат, "Организация_2_BoxID");
		ДобавитьФункциюВМанифест(Результат, "Установить_BoxID_для_Организация");
		ДобавитьФункциюВМанифест(Результат, "BoxID_2_Организация");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСопоставленныеОрганизациив1С");
		ДобавитьФункциюВМанифест(Результат, "CounteragentBoxID_2_МассивКонтрагентов");
		ДобавитьФункциюВМанифест(Результат, "CounteragentBoxID_2_Контрагент");
		ДобавитьФункциюВМанифест(Результат, "Контрагент_2_CounteragentBoxID");
		ДобавитьФункциюВМанифест(Результат, "УстановитьПараметрыМаршрутизацииДляКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "УстановитьПараметрыМаршрутизацииДляДоговора");
		ДобавитьФункциюВМанифест(Результат, "ДобавитьНулиВПредставлениеЧисла");
		ДобавитьФункциюВМанифест(Результат, "ТаблицаПерекодировки", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЧисло64ИзЧисла16");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЧисло16ИзГуида");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьГуидИзЧисла16");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЧисло2изЧисла64");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьЧисло16изЧисла2");
		ДобавитьФункциюВМанифест(Результат, "КонвертироватьГуидВЧисло64");
		ДобавитьФункциюВМанифест(Результат, "КонвертироватьЧисло64вГуид");
		ДобавитьФункциюВМанифест(Результат, "КодРегиона");
		ДобавитьФункциюВМанифест(Результат, "Эквивалентны");
		ДобавитьФункциюВМанифест(Результат, "СтрокаЧтоМенять");
		ДобавитьФункциюВМанифест(Результат, "ЧисловойКодЕИ");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьСтрану");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьВнешнююПечатнуюФормуДокумента");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьВнешнююПечатнуюФормуСчета");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьВнешнююПечатнуюФормуАкта");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьВнешнююПечатнуюФормуАктаСверки");
		ДобавитьФункциюВМанифест(Результат, "СформироватьПредставлениеИННКПП");
		ДобавитьФункциюВМанифест(Результат, "ВизуализироватьПолеСВладельцем");
		ДобавитьФункциюВМанифест(Результат, "ОбластьПодписи");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияXmlTorg12Content");
		ДобавитьФункциюВМанифест(Результат, "ПредставлениеИННКПП");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияInvoiceContent");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьСвязиКСФ");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьКлассификаторыКСФ");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияInvoiceCorrectionContent");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияXmlAcceptanceCertificateContent");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьКоличествоДнейОтсрочки");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьПараметрыПодписанияТ12вДиадок");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьДанныеСотрудника");
		ДобавитьФункциюВМанифест(Результат, "СформироватьПараметрыПодписанта");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСписокРазличающихсяРеквизитов");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНастройкиПодписантаСогласование");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСтруктуруОшибкиВнешнейКомпоненты");
		ДобавитьФункциюВМанифест(Результат, "ВСтрокеНРегЕстьСлова");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСправа");
		ДобавитьФункциюВМанифест(Результат, "КраткоеСообщениеОбОшибке");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьТаблицуОрганизацийКоторыеНеПодключеныКДиадоку");
		ДобавитьФункциюВМанифест(Результат, "СклеитьПредставлениеОрганизацииДиадок");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьТаблицуЯщиковДиадокОрганизации");
		ДобавитьФункциюВМанифест(Результат, "ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов");
		ДобавитьФункциюВМанифест(Результат, "ВернутьТаблицуМаршрутизацииПоДоговорам");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьМаршрутизациюПоДоговору");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьМаршрутизациюПоКонтрагенту");
		ДобавитьФункциюВМанифест(Результат, "ТочностьЦеныСФ");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСловарь");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСловарьЛайф");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСловарьСеоДок");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСловарьНФК");
		ДобавитьФункциюВМанифест(Результат, "ИспользоватьКастомныеДопПоля");
		ДобавитьФункциюВМанифест(Результат, "ИспользоватьКастомныйАдресГрузополучателя");
		ДобавитьФункциюВМанифест(Результат, "ЗаполнитьКастомныеДопПоля");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьШаблонКлючейДопСведений");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьСловарьШаблоновКлючейДопСведений");
		ДобавитьФункциюВМанифест(Результат, "НужноФормироватьДопИнфоПоШаблону");
		ДобавитьФункциюВМанифест(Результат, "СформироватьСтрокуДопИнфоПоШаблону");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьКастомныйАдресГрузополучателя");
		ДобавитьФункциюВМанифест(Результат, "ДопустимыеМаркерыКонфигураций");
		ДобавитьФункциюВМанифест(Результат, "СтранаЧленТС");
		ДобавитьФункциюВМанифест(Результат, "ИмяТипаОбъекта");
		ДобавитьФункциюВМанифест(Результат, "СуществуетОбъектМетаданных", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "СсылкаСуществует");
		ДобавитьФункциюВМанифест(Результат, "СравнитьВерсии");
		ДобавитьФункциюВМанифест(Результат, "РазделительПакетаЗапросов");
		ДобавитьФункциюВМанифест(Результат, "РазделительОбъединенияЗапросов");
		ДобавитьФункциюВМанифест(Результат, "ОбработкаСобытияПодключаемогоМодуля");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьДанныеПодписиСогласующим");
		ДобавитьФункциюВМанифест(Результат, "МассивВПФИзСоответствиеВПФСсылке");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьПустуюТЗдляГТД");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияUTD820");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияUTD");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияUCD");
		ДобавитьФункциюВМанифест(Результат, "ТипДокументаУПД");
		ДобавитьФункциюВМанифест(Результат, "ТипДокументаУКД");
		ДобавитьФункциюВМанифест(Результат, "ФункцияУПД");
		ДобавитьФункциюВМанифест(Результат, "Item_UnitCode");
		ДобавитьФункциюВМанифест(Результат, "XML_КодЕдиницыИзмерения");
		ДобавитьФункциюВМанифест(Результат, "ОформитьОшибкиВHTML");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьФункциональнуюОпциюНаСервере");
		ДобавитьФункциюВМанифест(Результат, "ЭДО_БиблиотекаКартинок");
		ДобавитьФункциюВМанифест(Результат, "МакетМодуля");
		ДобавитьФункциюВМанифест(Результат, "СтруктураФИО");
		ДобавитьФункциюВМанифест(Результат, "УстановитьРасширениеКонфигурации");
		ДобавитьФункциюВМанифест(Результат, "УдалитьРасширениеКонфигурации");
		ДобавитьФункциюВМанифест(Результат, "ПроверитьНеобходимостьУстановкиРасширения");
		ДобавитьФункциюВМанифест(Результат, "Значение1C_В_СтрокаCOM");
		ДобавитьФункциюВМанифест(Результат, "ПолучитьИдентификаторЭДОДляКонтрагента");
		ДобавитьФункциюВМанифест(Результат, "ЕстьМетаданныеКонфигурации_ДД");
		ДобавитьФункциюВМанифест(Результат, "ЕстьРеквизитОбъекта_ДД");
		ДобавитьФункциюВМанифест(Результат, "ПривестиКЧислу");
		ДобавитьФункциюВМанифест(Результат, "СтрокаТаблицыЗначенийВСтруктуру");
		ДобавитьФункциюВМанифест(Результат, "ЗначениеСвойстваЭлементаXmlTorg12", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "НДСИсчисляетсяНалоговымАгентом", , "НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "СтавкаНДС_ИсчНалАг");
		ДобавитьФункциюВМанифест(Результат, "СтавкаНДС_БезНДС");
		ДобавитьФункциюВМанифест(Результат, "РасширениеФайлаИзИмениФайла");
		ДобавитьФункциюВМанифест(Результат, "ВалидацияСтруктурыДокумента");
		ДобавитьФункциюВМанифест(Результат, "ЗначенияРеквизитовОбъекта");
		ДобавитьФункциюВМанифест(Результат, "ЗначениеРеквизитаОбъекта");
		ДобавитьФункциюВМанифест(Результат, "ЗначенияРеквизитовОбъектов");
		ДобавитьФункциюВМанифест(Результат, "ЗначениеРеквизитаОбъектов");
		ДобавитьФункциюВМанифест(Результат, "РазложитьМассивПоТипам");
		ДобавитьФункциюВМанифест(Результат, "СвернутьМассив");
		ДобавитьФункциюВМанифест(Результат, "МестоРасположенияМодуля");
		ДобавитьФункциюВМанифест(Результат, "СведенияОКонфигурации", , "НаВремяСеанса");
		
		ДобавитьФункциюВМанифест(Результат, "ДобавитьОшибкуВалидации");
		ДобавитьФункциюВМанифест(Результат, "ДобавитьГруппуОшибокВалидации");
		
		ДобавитьФункциюВМанифест(Результат, "СвойствоСистемногоПеречисления", ,"НаВремяСеанса");
		
		ДобавитьФункциюВМанифест(Результат, "ВнешниеОбработки_Подключить");
		ДобавитьФункциюВМанифест(Результат, "ВнешниеОбработки_СоздатьПоИмени");
		
		ДобавитьФункциюВМанифест(Результат, "НастройкиОрганизации");
		ДобавитьФункциюВМанифест(Результат, "ПараметрыПроксиСервера");
		
		// Перечисления
		ДобавитьФункциюВМанифест(Результат, "БазовыеФорматы", ,"НаВремяСеанса");
		ДобавитьФункциюВМанифест(Результат, "ТипыКонтента", ,"НаВремяСеанса");
		
		ДобавитьФункциюВМанифест(Результат, "СтрокиПодобны");
		
		// Устаревшие
		ДобавитьФункциюВМанифест(Результат, "ПолучитьНастройкиОрганизации");
		
		Возврат Результат;
		
	КонецФункции

#КонецОбласти

//{ ВЕРСИЯ

	// Версия обработки в стандартном формате
	//
	// Возвращаемое значение:
	//  Строка - версия в формате РР.ВВ.ФФ.СС, где:
	//   * РР - номер редакции    - в рамках одной редакции гарантируется обратная совместимость;
	//   * ВВ - номер версии      - новая функциональность (или несколько);
	//   * ФФ - номер исправления - исправление ошибки;
	//   * СС - номер сборки      - сквозная нумерация обновляется автоматически;
	Функция ВерсияОбработки() Экспорт
		
		Версия = "5.38.07";
		
		Результат = Версия + "." + НомерСборки();
		
		Возврат Результат;
		
	КонецФункции
	
	Функция НомерСборки()
		
		Возврат "444";
		
	КонецФункции
	
	Функция ВерсияОбработкиБезНомераСборки() Экспорт
		
		ВерсияОбработки = ВерсияОбработки();
		
		ДлинаСтрокиНомерСборки		 = СтрДлина(НомерСборки());
		ДлинаСтрокиБезНомераСборки	 = СтрДлина(ВерсияОбработки) - ДлинаСтрокиНомерСборки - 1;
		
		Результат = Лев(ВерсияОбработки, ДлинаСтрокиБезНомераСборки);
		
		Возврат Результат;
		
	КонецФункции
	
	// Версия расширения, взаимодействие с которой
	// поддерживает текущая обработка 
	Функция ТребуемаяВерсияРасширенияДиадок() Экспорт
		
		Версия = "1.0.2.20"; 
		
		Возврат Версия;
		
	КонецФункции
	
	// Версия внешней компоненты, взаимодействие с которой
	// поддерживает текущая обработка
	Функция ВерсияВнешнейКомпоненты() Экспорт
		
		Версия = "5.29.3.538";
		
		Возврат Версия;
		
	КонецФункции
	
//} ВЕРСИЯ

//{ 

Функция КлючРазработчика() Экспорт 
	
	Возврат "1S83-5-38-ca0cb5fc-89d7-456d-9c8a-d26422230e85";
	
КонецФункции

Функция АдресСервиса() Экспорт 
	
	Возврат "https://diadoc.kontur.ru/";
	
КонецФункции

Функция АдресАпи() Экспорт 
	
	Возврат "https://diadoc-api.kontur.ru:443";
	
КонецФункции

Функция ЗаголовокОсновнойФормы() Экспорт 
	
	Возврат "Контур.Диадок";
	
КонецФункции

//} 

//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	Функция ЭДО_Кэш_Прочитать(ИмяЗначения) Экспорт
		
		Результат = Неопределено;
		
		Если Кэш <> Неопределено Тогда
			Результат = Кэш[ИмяЗначения];
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Процедура ЭДО_Кэш_Поместить(ИмяЗначения, Значение) Экспорт
		
		Если Кэш = Неопределено Тогда
			Кэш = Новый Соответствие;
		КонецЕсли;
		
		Кэш.Вставить(ИмяЗначения, Значение);
		
	КонецПроцедуры
	
	Процедура ВыгрузитьВложенныеОбработки(КаталогВыгрузки) Экспорт
		
		ПодКаталогиОбработок = КаталогиВложенныхОбработокВРежимеОтладки();
		
		Для Каждого Элемент Из ПодКаталогиОбработок Цикл
			
			ПодКаталог	 = Элемент.Значение;
			ИмяОбработки = Элемент.Ключ;
			
			ИмяФайла		 = ИмяОбработки + ".epf";
			ПолноеИмяФайла	 = ОбъединитьПути(КаталогВыгрузки, ПодКаталог, ИмяФайла);
			
			ЗаписатьМакетОбработкиВФайл(ИмяОбработки, ПолноеИмяФайла);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ЗаписатьМакетОбработкиВФайл(ИмяМакета, ПолноеИмяФайла)
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		СоздатьКаталог(Файл.Путь);
		
		ДвоичныеДанные = МакетМодуля(ИмяМакета);
		
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
		
	КонецПроцедуры
	
	Функция ФайлСуществует(ИмяФайла)
		
		Файл = Новый Файл(ИмяФайла);
		
		Результат = Файл.Существует();
		
		Возврат Результат;
		
	КонецФункции
	
	Функция КаталогиВложенныхОбработокВРежимеОтладки()
		
		КаталогБиблиотек = "libs";
		КаталогИнтеграции = "include";
		
		Результат = Новый Соответствие;
		
		Результат.Вставить("Модуль_РаботаСВнешнимиПечатнымиФормами"	, КаталогИнтеграции);
		Результат.Вставить("Модуль_ИнтеграцияУниверсальный"			, КаталогИнтеграции);
		Результат.Вставить("Модуль_ИнтеграцияБП30"					, КаталогИнтеграции);
		Результат.Вставить("Модуль_ИнтеграцияУТ11"					, КаталогИнтеграции);
		Результат.Вставить("Модуль_ИнтеграцияБГУ20"					, КаталогИнтеграции);
		Результат.Вставить("Модуль_ИнтеграцияУНФ16"					, КаталогИнтеграции);
		
		Результат.Вставить("ГенерацияXML"	, КаталогБиблиотек);
		Результат.Вставить("ПечатныеФормы"	, КаталогБиблиотек);
		
		Возврат Результат;
		
	КонецФункции
	
	Процедура СохранитьНастройкиПодключаемогоМодуля() Экспорт
		
		УстановитьЗначениеКонстанты("ИспользоватьПодключаемыйМодуль"	, ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль);
		УстановитьЗначениеКонстанты("РасположениеПодключаемогоМодуля"	, ПараметрыКлиентСервер.ПодключаемыйМодуль.РасположениеМодуля);
		УстановитьЗначениеКонстанты("ПутьКПодключаемомуМодулю"			, ПараметрыКлиентСервер.ПодключаемыйМодуль.ПутьКМодулю);
		УстановитьЗначениеКонстанты("РежимСовместимостиФорматов155и820"	, ПараметрыКлиентСервер.ПодключаемыйМодуль.РежимСовместимостиФорматов155и820);
		
	КонецПроцедуры
	
	Процедура СохранитьНастройкуСбораМетрик() Экспорт
		
		УстановитьЗначениеКонстанты("ДиадокОтключитьСборСтатистики"	, НЕ ПараметрыКлиентСервер.Метрики.ИспользоватьМетрики);
				
	КонецПроцедуры
	
	Функция ПолучитьСписокСтатусовВзаимоотношений() Экспорт
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		СписокСтатусов=	Новый СписокЗначений;
		
		СписокСтатусов.Добавить("IsMyCounteragent", 		"Партнерские отношения");
		СписокСтатусов.Добавить("InvitesMe", 				"Получен запрос");
		СписокСтатусов.Добавить("IsInvitedByMe", 			"Ожидается ответ");
		СписокСтатусов.Добавить("RejectsMe", 				"Заблокировал меня");
		СписокСтатусов.Добавить("IsRejectedByMe", 			"Заблокирован мной");
		СписокСтатусов.Добавить("NotInCounteragentList", 	"Есть в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		СписокСтатусов.Добавить("IsOrganization", 			"Совпадает с организацией");
		СписокСтатусов.Добавить("Unknown", 					"Нет в " + СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж);
		СписокСтатусов.Добавить("InnNotValid", 				"ИНН неверный");
		
		Возврат СписокСтатусов;
		
	КонецФункции
	
	Функция РасшифровкаТекущегоСостоянияВзаимоотношений(CurrentStatus) Экспорт
		
		СписокСтатусов=	ПолучитьСписокСтатусовВзаимоотношений();
		
		НайденныйСтатус=	СписокСтатусов.НайтиПоЗначению(CurrentStatus);
		Если НЕ НайденныйСтатус = Неопределено Тогда
			Возврат НайденныйСтатус.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецФункции
	
	Функция КлассификаторВалютПолучитьНаименованиеПоКоду(Код) Экспорт
		
		Если СокрЛП(Строка(Код)) = "643" Тогда
			Возврат "RUB";
		ИначеЕсли СокрЛП(Строка(Код)) = "978" Тогда
			Возврат "EUR";
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецФункции
	
	Функция ВыделитьСлово(ИсходнаяСтрока) Экспорт
		
		Буфер = СокрЛ(ИсходнаяСтрока);
		ПозицияПослПробела = Найти(Буфер, " ");
		
		Если ПозицияПослПробела = 0 Тогда
			ИсходнаяСтрока = "";
			Возврат Буфер;
		КонецЕсли;
		
		ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
		
		Возврат ВыделенноеСлово;
		
	КонецФункции
	
	// Устарела, следует использовать АдресСервиса()
	//
	Функция ПолучитьПутьКWEBСерверу() Экспорт
		
		Возврат АдресСервиса();
		
	КонецФункции
	
	Функция ПреобразоватьМассивСтруктурВТаблицуЗначений(МассивСтруктур) Экспорт
		
		Результат=	Новый ТаблицаЗначений;
		
		Для Каждого ЯчейкаМассива Из МассивСтруктур Цикл
			НоваяСтрока=	Результат.Добавить();
			Для Каждого ЯчейкаСтруктуры Из ЯчейкаМассива Цикл
				Если Результат.Колонки.Найти(ЯчейкаСтруктуры.Ключ) = Неопределено Тогда
					КлючКолонки=	Результат.Колонки.Добавить(ЯчейкаСтруктуры.Ключ).Имя;
				Иначе
					КлючКолонки=	ЯчейкаСтруктуры.Ключ;
				КонецЕсли;
				НоваяСтрока[КлючКолонки]=	ЯчейкаСтруктуры.Значение;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблЗнач) Экспорт
		
		Результат = Новый Массив;
		
		СтрокаКлючей = "";
		
		Для Каждого Колонка из ТаблЗнач.Колонки Цикл
			СтрокаКлючей = СтрокаКлючей + ?(ПустаяСтрока(СтрокаКлючей),"",",") + Колонка.Имя;
		КонецЦикла;
		
		Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Стр Из ТаблЗнач Цикл
				ЭлементСписка = Новый  Структура(СтрокаКлючей);
				ЗаполнитьЗначенияСвойств(ЭлементСписка,Стр);
				Результат.Добавить(ЭлементСписка);             
			КонецЦикла;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПреобразоватьСтруктуруВТаблицу(Структура)
		
		ОписаниеСтроки = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(300)); 
				
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Ключ", ОписаниеСтроки);
		Таблица.Колонки.Добавить("Значение", ОписаниеСтроки);
		
		Для каждого Стр Из Структура Цикл
			Строка = Таблица.Добавить();
			Строка.Ключ 	= Стр.Ключ;
			Строка.Значение = Стр.Значение;
		КонецЦикла;
		
		Возврат Таблица;
	
	КонецФункции 	
	
	Функция ЕстьПериферийныеБазы(НаименованиеПланаОбмена)
		
		Если Метаданные.ПланыОбмена.Найти(НаименованиеПланаОбмена) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПланОбмена.Ссылка
		|ИЗ
		|	ПланОбмена."+НаименованиеПланаОбмена+" КАК ПланОбмена
		|ГДЕ
		|	ПланОбмена.ПометкаУдаления = ЛОЖЬ";
		Возврат (запрос.Выполнить().Выгрузить().Количество()>1)			   
		
	КонецФункции
	
	Процедура ПрисоединитьМассив(МассивПриемник, МассивИсточник)
		
		Для Каждого ЭлементМассива Из МассивИсточник Цикл
			МассивПриемник.Добавить(ЭлементМассива);
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьСтрокуПоМассиву(Массив)
		
		Результат=	"";
		Для Каждого СтрокаДляВключения Из Массив Цикл
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ", ";
			КонецЕсли;
			Результат = Результат + СтрокаДляВключения.Ключ;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьМаркерКонфигурации() Экспорт
		
		Маркер = МаркерКонфигурацииПоМетаданным();
		
		Если НЕ ЗначениеЗаполнено(Маркер) Тогда
		
			УстановитьПривилегированныйРежим(Истина);
			
			СтруктураОтбора = Новый Структура;
			
			СтруктураОтбора.Вставить("КлючОбъекта"		, "МодульДиадок");
			СтруктураОтбора.Вставить("КлючНастроек"		, "МаркерКонфигурации");
			СтруктураОтбора.Вставить("ИмяПользователя"	, "");
			
			Выборка = ХранилищеОбщихНастроек.Выбрать(СтруктураОтбора);
			Если Выборка.Следующий() Тогда
				
				ЭлементДопустимогоМаркера = ДопустимыеМаркерыКонфигураций().НайтиПоЗначению(Выборка.Настройки);
				
				Если ЭлементДопустимогоМаркера <> Неопределено Тогда
					Маркер = ЭлементДопустимогоМаркера.Значение;
				Иначе
					ХранилищеОбщихНастроек.Удалить("МодульДиадок", "МаркерКонфигурации", ИмяПользователя());
				КонецЕсли;
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		Возврат Маркер;
		
	КонецФункции
	
	// По структуре метаданных конфигурации определяет какой интеграционный 
	// модуль может быть использован в работе
	//
	// Возвращаемое значение:
	// 	Строка
	Функция МаркерКонфигурацииПоМетаданным()
		
		Если ПодойдетИнтеграционныйМодульУТ11() Тогда
			
			Результат = "УТ11";
			
		ИначеЕсли ПодойдетИнтеграционныйМодульБП30() Тогда
			
			Результат = "БП30";
							
		ИначеЕсли Найти(Метаданные.Синоним, "Бухгалтерия государственного учреждения, редакция 2.") <> 0 Тогда
			
			Результат = "БГУ20";
											
		ИначеЕсли ЭтоКонфигурацияУправлениеНебольшойФирмой() Тогда
			
			Результат = "УНФ16";
			
		Иначе
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПодойдетИнтеграционныйМодульУТ11()
		
		Имя 	= Метаданные.Имя;
		Синоним = Метаданные.Синоним;
		
		Результат = (ЭтоКонфигурацияУправлениеТорговлей11() 
					ИЛИ Найти(Синоним, "Управление торговлей и взаимоотношениями с клиентами (CRM), редакция 2.") <> 0 
					ИЛИ Найти(Синоним, "ERP") <> 0
					ИЛИ Имя = "КомплекснаяАвтоматизация");
					
		Возврат Результат;
		
	КонецФункции
	
	Функция ПодойдетИнтеграционныйМодульБП30()
		
		Синоним = Метаданные.Синоним;
		
		Результат = (	ЭтоКонфигурацияБП30()
					ИЛИ Найти(Синоним, "Управление холдингом") <> 0
					ИЛИ ЭтоКонфигурацияБухгалтерияСтроительнойОрганизации3()
					ИЛИ ЭтоРарусУчетЦенныхБумаг()
					ИЛИ Найти(Синоним, "БИТ: Строительство, редакция 3.") <> 0	);
					
		Возврат Результат;
		
	КонецФункции
	
	Функция ЭтоКонфигурацияБП30()
		
		Синоним = Метаданные.Синоним;
		
		Результат = (	Найти(Синоним, "Бухгалтерия") <> 0 
					И 	Найти(Синоним, "предприятия") <> 0 
					И	Найти(Синоним, "редакция 3.") <> 0	);
					
		Возврат Результат;
		
	КонецФункции
	
	Функция ЭтоРарусУчетЦенныхБумаг()
		
		Синоним = Метаданные.Синоним;
		
		Результат = (Найти(Синоним, "1С-Рарус:Учет ценных бумаг") <> 0 
						И Найти(Синоним, "редакция 3 для 1С:Бухгалтерии 8") <> 0);
						
		Возврат Результат;
		
	КонецФункции
	
	Функция ЭтоКонфигурацияБухгалтерияСтроительнойОрганизации3()
		
		Синоним = Метаданные.Синоним;
		
		Результат =  (Найти(Синоним, "Бухгалтерия строительной организации") <> 0 
					И Найти(Синоним, "редакция 3.") <> 0);
					
		Возврат Результат;
		
	КонецФункции
	
	Функция ЭтоКонфигурацияУправлениеТорговлей11()
		
		Версия = Метаданные.Версия;
		
		Результат = Метаданные.Имя = "УправлениеТорговлей" 
					И (		ЛЕВ(Версия, 4) = "11.1" 
						ИЛИ ЛЕВ(Версия, 4) = "11.2" 
						ИЛИ ЛЕВ(Версия, 4) = "11.3" 
						ИЛИ ЛЕВ(Версия, 4) = "11.4");
						
		Возврат Результат;
		
	КонецФункции
	
	Функция ЭтоКонфигурацияУправлениеНебольшойФирмой()
		
		Версия = Метаданные.Версия;
		
		Результат = Метаданные.Имя = "УправлениеНебольшойФирмой" 
					И (		ЛЕВ(Версия, 3) = "1.4" 
						ИЛИ ЛЕВ(Версия, 3) = "1.5" 
						ИЛИ ЛЕВ(Версия, 3) = "1.6"	);
						
		Возврат Результат;				
						
	КонецФункции
		
	// Получает подробные сведения о текущей конфигурации.
	// 
	// Возвращаемое значение:
	//  ФиксированнаяСтруктура с ключами:
	//   * Имя - Строка - Имя конфигурации
	//   * Синоним - Строка - Представление конфигурации
	//   * ВерсияКонфигурации - Строка - Версия конфигурации
	//   * ВерсииБиблиотек - ФиксированнаяСтруктура - см. функцию ВерсииБиблиотек()
	//   * Маркер - Строка - Маркер семейства конфигураций. См. описание ПолучитьМаркерКонфигурации()
	//   * БазоваяПодсистема - Строка - Имя конфигурации, на основе которой разработано отраслевое решение
	//   * ВерсияБазовойПодсистемы - Строка - Версия конфигурации, на основе которой разработано отраслевое решение
	//
	Функция СведенияОКонфигурации() Экспорт
		
		ПодсистемыКонфигурации = ВерсииПодсистем();
		
		МаркерКонфигурации	 = ПолучитьМаркерКонфигурации();
		ОсновнаяПодсистема	 = БазоваяПодсистемаКонфигурации(ПодсистемыКонфигурации);
		ВерсииБиблиотек		 = ВерсииБиблиотек(ПодсистемыКонфигурации);
		
		Сведения = Новый Структура;
		Сведения.Вставить("Имя"						, Метаданные.Имя);
		Сведения.Вставить("Синоним"					, Метаданные.Синоним);
		Сведения.Вставить("ВерсияКонфигурации"		, Метаданные.Версия);
		Сведения.Вставить("ВерсииБиблиотек"			, ВерсииБиблиотек);
		Сведения.Вставить("Маркер"					, МаркерКонфигурации);
		Сведения.Вставить("БазоваяПодсистема"		, ОсновнаяПодсистема.Имя);
		Сведения.Вставить("ВерсияБазовойПодсистемы"	, ОсновнаяПодсистема.Версия);
		
		Возврат Новый ФиксированнаяСтруктура(Сведения);
		
	КонецФункции
	
	// Получает сведения о конфигурации, на основе которой реализована текущая конфигурация
	// 
	// Возвращаемое значение:
	//  Структура с ключами:
	//   * Имя - Строка - Имя основной конфигурации
	//   * Версия - Строка - Версия основной конфигурации
	//
	Функция БазоваяПодсистемаКонфигурации(ПодсистемыКонфигурации = Неопределено)
		
		Результат = Новый Структура;
		Результат.Вставить("Имя");
		Результат.Вставить("Версия");
		
		Если ПодсистемыКонфигурации = Неопределено Тогда 
			ПодсистемыКонфигурации = ВерсииПодсистем();
		КонецЕсли;
		
		ПоддерживаемыеКонфигурации	 = ИменаПоддерживаемыхКонфигураций();
		
		ИмяБазовойПодсистемы	 = Неопределено;
		ВерсияБазовойПодсистемы	 = "";
		
		Для Каждого ИмяКонфигурации Из ПоддерживаемыеКонфигурации Цикл 
			
			Стр = ПодсистемыКонфигурации.Найти(ИмяКонфигурации, "ИмяПодсистемы");
			
			Если Стр <> Неопределено Тогда 
				
				ИмяБазовойПодсистемы	 = Стр.ИмяПодсистемы;
				ВерсияБазовойПодсистемы	 = Стр.Версия;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИмяБазовойПодсистемы) Тогда 
			
			Стр = ПодсистемыКонфигурации.Найти(Истина, "ЭтоКонфигурация");
			
			Если Стр <> Неопределено Тогда 
				ИмяБазовойПодсистемы	 = Стр.ИмяПодсистемы;
				ВерсияБазовойПодсистемы	 = Стр.Версия;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Имя	 = ИмяБазовойПодсистемы;
		Результат.Версия = ВерсияБазовойПодсистемы;
		
		Возврат Результат;
		
	КонецФункции
	
	// Получает сведения о встроенных стандартных библиотеках в виде стурктуры,
	// в которой ключ - это имя библиотеки, а значение - ее версия.
	// Версия - всегда строка (пустая, если библиотека отсутствует).
	//
	// Параметры:
	//  ПодсистемыКонфигурации - ТаблицаЗначений - см. ВерсииПодсистем()
	// 
	// Возвращаемое значение:
	//  ФиксированнаяСтруктура - содержит ключи:
	//     * БиблиотекаТехнологииСервиса
	//     * БиблиотекаЭлектронныхДокументов
	//     * ИнтернетПоддержкаПользователей
	//     * СтандартныеПодсистемы
	//
	Функция ВерсииБиблиотек(ПодсистемыКонфигурации = Неопределено)
		
		Если ПодсистемыКонфигурации = Неопределено Тогда 
			ПодсистемыКонфигурации = ВерсииПодсистем();
		КонецЕсли;
		
		Результат = Новый Структура;
		
		Результат.Вставить("БиблиотекаТехнологииСервиса");
		Результат.Вставить("БиблиотекаЭлектронныхДокументов");
		Результат.Вставить("ИнтернетПоддержкаПользователей");
		Результат.Вставить("СтандартныеПодсистемы");
		
		Для Каждого Библиотека Из Результат Цикл 
			
			Стр = ПодсистемыКонфигурации.Найти(Библиотека.Ключ, "ИмяПодсистемы");
			
			Результат[Библиотека.Ключ] = ?(Стр = Неопределено, "", Стр.Версия);
			
		КонецЦикла;
		
		Возврат Новый ФиксированнаяСтруктура(Результат);
		
	КонецФункции
	
	// Возвращает таблицу версий этой конфигурации и родительских конфигураций на поддержке.
	// Для конфигураций на базе БСП данные выбираются из регистра "ВерсииПодсистем".
	// Если такого регистра сведений в конфигурации нет, в таблицу будет добавлена одна строка
	// с именем и версией заполненными по метаданным самой конфигурации
	// 
	// Возвращаемое значение:
	//  ТаблицаЗначений - содержит:
	//    * ИмяПодсистемы	 - Строка - имя подсистемы
	//    * Версия			 - Строка - версия подсистемы в формате РР.{П|ПП}.ЗЗ.СС
	//    * ЭтоКонфигурация	 - Булево - Истина, если имя основной конфигурации
	//
	Функция ВерсииПодсистем()
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ИмяПодсистемы");
		Результат.Колонки.Добавить("Версия");
		Результат.Колонки.Добавить("ЭтоКонфигурация");
		
		МетаданныеТаблицыВерсииПодсистем = Метаданные.РегистрыСведений.Найти("ВерсииПодсистем");
		
		Если МетаданныеТаблицыВерсииПодсистем = Неопределено Тогда 
			
			Стр = Результат.Добавить();
			Стр.ИмяПодсистемы	 = Метаданные.Имя;
			Стр.Версия			 = Метаданные.Версия;
			Стр.ЭтоКонфигурация	 = Истина;
			
			Возврат Результат;
			
		КонецЕсли;
		
		ВсеПодсистемы = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем().ПоИменам;
		
		Для Каждого Элемент Из ВсеПодсистемы Цикл 
			
			ОписаниеПодсистемы = Элемент.Значение;
			
			Стр = Результат.Добавить();
			Стр.ИмяПодсистемы	 = ОписаниеПодсистемы.Имя;
			Стр.Версия			 = ОписаниеПодсистемы.Версия;
			Стр.ЭтоКонфигурация	 = ОписаниеПодсистемы.ЭтоКонфигурация;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ИменаПоддерживаемыхКонфигураций()
		
		Результат = Новый Массив;
		
		// Для семейства УТ/КА/ERP порядок имен важен, т.к. в ERP входят подсистемы УТ и КА
		Результат.Добавить("УправлениеПредприятием");
		Результат.Добавить("КомплекснаяАвтоматизация");
		Результат.Добавить("УправлениеТорговлей");
		
		Результат.Добавить("БухгалтерияПредприятияКОРП");
		Результат.Добавить("БухгалтерияПредприятия");
		
		// Хоть УНФ и переименовали в УправлениеНашейФирмой, имя подсистемы в РС "ВерсииПодсистем" осталось прежним
		Результат.Добавить("УправлениеНебольшойФирмой");
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СформироватьПрофильКонфигурации() Экспорт
		
		стПрофильКонфигурации=	Новый Структура;
		
		стПрофильКонфигурации.Вставить("ХранениеНоменклатурыПоставщиков", Новый Структура("Вариант", "Справочник_НоменклатураПоставщиков"));
		
		стПрофильКонфигурации.Вставить("ЕстьАртикул", НЕ Метаданные.Справочники.Номенклатура.Реквизиты.Найти("Артикул") = Неопределено);
		
		стПрофильКонфигурации.Вставить("ХранениеНастроекПользователей", Новый Структура("Вариант", "1С_УФ"));
		
		стОперацииПоступления = Новый Структура;
		стОперацииПоступления.Вставить("ПоступлениеОборудования",Истина );
		стОперацииПоступления.Вставить("ПоступлениеНМА", Истина);
		
		стПрофильКонфигурации.Вставить("НастройкиПоступления",  стОперацииПоступления);
		
		Возврат стПрофильКонфигурации;
		
	КонецФункции
	
	Функция ПроверитьДоступКОбъектам()
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ТребуемыеОбъекты=	"";
		МассивНеобходимыхОбъектов=	ПолучитьНеобходимыеДляРаботыОбъекты();
		Для каждого ОбъектБД Из МассивНеобходимыхОбъектов Цикл
			Если НЕ ПравоДоступа(ОбъектБД.Право, ОбъектБД.Объект) Тогда
				ТребуемыеОбъекты= 	ТребуемыеОбъекты + " 
				|" + ОбъектБД.Раздел + " " + ОбъектБД.Объект + " - на " + НРег(ОбъектБД.Право);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТребуемыеОбъекты = "" Тогда
			Результат.ОписаниеОшибки=	"Отсутствуют необходимые права";
			Результат.Подробности= 		"Под правами текущего пользователя невозможно получить свойства объектов и их значения.
											|
											|Обратитесь к администраторам и получите доступ к следующим объектам:" + ТребуемыеОбъекты;
			Результат.Отказ=			Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПроверитьПраваНаПВХ()
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ТребуемыеОбъекты=	"";
		Для каждого НеобходимыйПВХ Из ПолучитьНеобходимыеДляРаботыПВХ() Цикл
			Если НЕ ПравоДоступа("Добавление", НеобходимыйПВХ) Тогда
				ТребуемыеОбъекты= 	ТребуемыеОбъекты + " 
									|План видов характеристик: " + НеобходимыйПВХ.Синоним + " - на добавление";
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТребуемыеОбъекты = "" Тогда
			Результат.ОписаниеОшибки=	"Отсутствуют необходимые права";
			Результат.Подробности= 		"В модуле добавлены новые свойства, но у вас отсутствуют права на запись их в базу данных.
										|
										|Обратитесь к администраторам или выполните запуск от имени пользователя имеющему следующие права:" + ТребуемыеОбъекты;
			Результат.Отказ=			Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПроверитьВозможностьИнициализацииВУзле(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НедостающиеСвойстваОбъектов=		ПроверитьНаличиеСвойствОбъектов(ВозможныеСвойстваОбъектов);
		НедостающиеНастройкиПользователя= 	ПроверитьНаличиеНастроекПользователя(ВозможныеНастройкиПользователя);
		ПрисоединитьМассив(НедостающиеСвойстваОбъектов, НедостающиеНастройкиПользователя);
		
		Если НедостающиеСвойстваОбъектов.Количество() <> 0 Тогда
			ВозможныеПланыОбмена = ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов();
			Если НЕ ВозможныеПланыОбмена.Количество() = 0 Тогда
				Результат.ОписаниеОшибки=	"Ошибка инициализации свойств объектов";
				Результат.Подробности=		"В периферийной базе данных не проинициализированы свойства объектов. 
											|
											|Необходимо запустить обработку в центральной базе данных, после чего выполнить обмен данными.
											|Выполните обмен по одному из следующих планов обмена:";
											Для каждого ПланОбмена Из ВозможныеПланыОбмена Цикл
												Результат.Подробности = Результат.Подробности + "
												|	" + Строка(ПланОбмена);
											КонецЦикла;
											Результат.Подробности = Результат.Подробности + "
											|
											|Отладочная информация: " + ПолучитьСтрокуПоМассиву(НедостающиеСвойстваОбъектов);
				
				Результат.Отказ=	Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ИнициализироватьНеобходимыеСвойстваПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НаличиеПравНаПВХ=	ПроверитьПраваНаПВХ();
		Если НаличиеПравНаПВХ.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, НаличиеПравНаПВХ);
			Возврат Результат;
		КонецЕсли;
		
		ЗафиксированаРеструктуризация=	Ложь;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			РезультатОбработкиСвойств=	ОбработатьСвойстваОбъектовИз20(ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация);
			Если РезультатОбработкиСвойств.Отказ = Истина Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультатОбработкиСвойств);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		РезультатРеструктуризации=	ОбработатьНеправильныеСвойства(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация);
		Если РезультатРеструктуризации.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатРеструктуризации);
			Возврат Результат;
		КонецЕсли;
		
		РезультатСозданияСвойств=	СоздатьНеобходимыеСвойстваВПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация);
		Если РезультатСозданияСвойств.Отказ = Истина Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатСозданияСвойств);
			Возврат Результат;
		КонецЕсли;
		
		Если ЗафиксированаРеструктуризация = Истина 
			И НЕ ЭтоПериферийнаяБД()
			И (ЕстьПериферийныеБазы("Полный") ИЛИ ЕстьПериферийныеБазы("ПоОрганизации")) Тогда
			
			Результат.ОписаниеОшибки=	"Ошибка реструктуризации свойств объектов";
			Результат.Подробности=		"В конфигурации проинициализированы свойства объектов, необходимые для работы с системой "+ МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы +".
										|Для корректной работы в периферийной базе данных выполните обмен данными.";
			Результат.Отказ=			Истина;
			
		КонецЕсли;

		Возврат Результат;
		
	КонецФункции
	
	Функция ПроверитьИнициализациюСвойствПВХ()
		
		Результат=		Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ВозможныеНастройкиПользователя=	ПолучитьВозможныеНастройкиПользователя();
		ВозможныеСвойстваОбъектов=		ПолучитьВозможныеСвойстваОбъектов();
		СтарыеСвойстваОбъектовИз20=		ПолучитьСтарыеСвойстваОбъектовИз20();
		Если ПроверитьНеобходимостьИнициализацииСвойств(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20) = Истина Тогда
			
			Если ЭтоПериферийнаяБД() Тогда
				РезультатПроверкиИнициализацииВУзле=	ПроверитьВозможностьИнициализацииВУзле(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя);
				Если РезультатПроверкиИнициализацииВУзле.Отказ = Истина Тогда
					ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиИнициализацииВУзле);
					Возврат Результат;
				КонецЕсли;
			КонецЕсли;
			
			РезультатИнициализации=	ИнициализироватьНеобходимыеСвойстваПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20);
			ЗаполнитьЗначенияСвойств(Результат, РезультатИнициализации);
				
		КонецЕсли;

		Возврат Результат;
		
	КонецФункции
	
	Функция ПодготовкаКонфигурацииКРаботе() Экспорт
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		РезультатПроверкиДоступаКОбъектам=	ПроверитьДоступКОбъектам();
		Если РезультатПроверкиДоступаКОбъектам.Отказ Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиДоступаКОбъектам);
			Возврат Результат;
		КонецЕсли;
		
		РезультатПроверкиИнициализацииСвойствПВХ=	ПроверитьИнициализациюСвойствПВХ();
		Если РезультатПроверкиИнициализацииСвойствПВХ.Отказ Тогда
			ЗаполнитьЗначенияСвойств(Результат, РезультатПроверкиИнициализацииСвойствПВХ);
			Возврат Результат;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ЭтоПериферийнаяБД()
		
		Возврат ПланыОбмена.ГлавныйУзел() <> Неопределено;
		
	КонецФункции
	
	Функция ПолучитьТекущегоПользователя() Экспорт
		
		ТекущийПользователь = Неопределено;
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Выполнить("ТекущийПользователь =  ПользователиКлиентСервер.ТекущийПользователь()");;
		Иначе 
			Выполнить("ТекущийПользователь =  Пользователи.ТекущийПользователь()");
		КонецЕсли;	
		
		Возврат ТекущийПользователь;
		
	КонецФункции
	
	Функция ПолучитьНеобходимыеДляРаботыОбъекты()
		
		МассивНеобходимыхОбъектов=	Новый Массив();
		
		Для каждого РегистрСведений Из ПолучитьНеобходимыеДляРаботыРегистры() Цикл
			МассивНеобходимыхОбъектов.Добавить(Новый Структура("Раздел, Объект, Право", "Регистр сведений:", РегистрСведений, "Изменение"));
		КонецЦикла;
		
		Для каждого ПВХ Из ПолучитьНеобходимыеДляРаботыПВХ() Цикл
			МассивНеобходимыхОбъектов.Добавить(Новый Структура("Раздел, Объект, Право", "Планы видов характеристик:", ПВХ, "Чтение"));
		КонецЦикла;
		
		Возврат МассивНеобходимыхОбъектов;
		
	КонецФункции
	
	Функция ПолучитьНеобходимыеДляРаботыПВХ() Экспорт
		НеобходимыеДляРаботыПВХ = Новый Массив;
		НеобходимыеДляРаботыПВХ.Добавить(Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения);
		Возврат НеобходимыеДляРаботыПВХ;
	КонецФункции
	
	Функция ПолучитьНеобходимыеДляРаботыРегистры() Экспорт
		НеобходимыеДляРаботыРегистры = Новый Массив;
		НеобходимыеДляРаботыРегистры.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения);
		Возврат НеобходимыеДляРаботыРегистры;
	КонецФункции
	
	Функция ЕстьРеквизитТипаОбъекта(ТипОбъекта, ИмяРеквизита) Экспорт
		
		Возврат Метаданные.НайтиПоТипу(ТипОбъекта).Реквизиты.Найти(ИмяРеквизита) <> Неопределено;
		
	КонецФункции
	
	// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
	//
	// Параметры:
	//  Объект				 - Произвольный	 - объект, у которого нужно проверить наличие реквизита или свойства;
	//  ИмяРеквизита		 - Строка		 - имя реквизита или свойства.
	//  ЗначениеРеквизита	 - Произвольный	 - В данный параметр возвращается найденное Значение.
	//  									   Если у объекта нет такого реквизита или свойства,
	//  									   то возвращается Неопределено.
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если есть.
	//
	Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита, ЗначениеРеквизита = Неопределено) Экспорт
		
		КлючУникальности   = Новый УникальныйИдентификатор;
		СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
		
		ЕстьРеквизит = СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
		
		Если ЕстьРеквизит Тогда
			ЗначениеРеквизита = СтруктураРеквизита[ИмяРеквизита];
		КонецЕсли;
		
		Возврат ЕстьРеквизит;
		
	КонецФункции
	
	// Проверяет наличие реквизитов или свойств у произвольного объекта без обращения к метаданным.
	//
	// Параметры:
	//  Объект		 - Произвольный - объект, у которого нужно проверить наличие реквизитов или свойств;
	//  ИменаСвойств - Массив - содержит имена проверяемых реквизитов или свойств;
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если есть все перечисленные реквизиты.
	//
	Функция ЕстьРеквизитыИлиСвойстваОбъекта(Объект, ИменаСвойств)
		
		КлючУникальности	 = Новый УникальныйИдентификатор;
		СтруктураРеквизитов	 = Новый Структура;
		
		Результат = Истина;
		
		Для Каждого ИмяРеквизита ИЗ ИменаСвойств Цикл
			СтруктураРеквизитов.Вставить(ИмяРеквизита, КлючУникальности);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
		
		Для Каждого ИмяРеквизита ИЗ ИменаСвойств Цикл
			Если СтруктураРеквизитов[ИмяРеквизита] = КлючУникальности Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Преобразует строку таблицы значений в структуру.
	// Свойства структуры и их значения совпадают с колонками переданной строки.
	//
	// Параметры:
	//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений - строка таблицы значений.
	//
	// Возвращаемое значение:
	//  Структура - преобразованная строка таблицы значений.
	//
	Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ) Экспорт
		
		Структура = Новый Структура;
		Для каждого Колонка Из СтрокаТЗ.Владелец().Колонки Цикл
			Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
		КонецЦикла;
		
		Возврат Структура;
		
	КонецФункции

	Функция НайтиСтрокуВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) Экспорт //вместо Найти таблицы значений

		Для Каждого Стр из МассивСтруктур Цикл
			СтрокаПодходит = Истина;
			Для Каждого КлючИЗначение из ПараметрыОтбора Цикл
				Если Стр[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
					СтрокаПодходит = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаПодходит Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
		
	КонецФункции
	
	Функция ПоместитьИнтеграционныйМодульВДополнительныеОбработки(АдресДвоичныеДанныеОбработки) Экспорт
		
		Результат= Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		СтруктураДанные = ЗаполнитьДанныеОПомещаемомМодуле();
		ПоместитьИнтеграционныйМодульВДополнительныеОбработки= Истина;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка,
		|	ВЫБОР
		|		КОГДА Т.Версия = &ВерсияОбработки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТекущаяВерсия
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК Т
		|ГДЕ
		|	Т.ИмяОбъекта = &ИмяОбъекта
		|	И Т.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И НЕ Т.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("ИмяОбъекта"	   , СтруктураДанные.ИмяОбъекта);
		Запрос.УстановитьПараметр("ВерсияОбработки", СтруктураДанные.ВерсияОбработки);
		
		Выборка= Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЭтоТекущаяВерсия Тогда
				ПоместитьИнтеграционныйМодульВДополнительныеОбработки= Ложь;
			Иначе
				
				ДополнительнаяОбработкаОбъект= Выборка.Ссылка.ПолучитьОбъект();
				ДополнительнаяОбработкаОбъект.Публикация= ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена");
				
				Попытка
					ДополнительнаяОбработкаОбъект.Записать();
				Исключение
					Результат.Отказ= Истина;
					Результат.ОписаниеОшибки= "Ошибка записи отключения старого интеграционного модуля в справочнике дополнительных обработок!";
					Результат.Подробности= ОписаниеОшибки();
					Возврат Результат;
				КонецПопытки;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ПоместитьИнтеграционныйМодульВДополнительныеОбработки Тогда
			СтруктураДанные.Вставить("ДвоичныеДанныеОбработки", ПолучитьИзВременногоХранилища(АдресДвоичныеДанныеОбработки));
			СоздатьНовыйЭлементДополнительныеОбработки(СтруктураДанные, Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ЗаполнитьДанныеОПомещаемомМодуле() Экспорт
		
		СтруктураДанные = Новый Структура("АдресОбработки, НаименованиеОбработки, ВерсияОбработки, ИмяОбъекта, ИмяФайла, НаименованиеСистемы");
		
		НаименованиеСистемы 				= МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
		СтруктураДанные.НаименованиеСистемы	= НаименованиеСистемы;
		
		НаименованиеИнтеграционногоМодуля 		= "Модуль работы с электронными первичными документами через " + НаименованиеСистемы;
		СтруктураДанные.НаименованиеОбработки 	= НаименованиеИнтеграционногоМодуля;
		
		СтруктураДанные.ВерсияОбработки = ВерсияОбработки();
		
		ОбработкаОбъектСтрокой 		= Строка(ЭтотОбъект);
		ИмяОбъекта 					= Сред(ОбработкаОбъектСтрокой, Найти(ОбработкаОбъектСтрокой, "ВнешняяОбработкаОбъект.")+23, СтрДлина(ОбработкаОбъектСтрокой));
		СтруктураДанные.ИмяОбъекта 	= ИмяОбъекта;
		
		АдресОбработки 					= Вычислить("ИспользуемоеИмяФайла");
		СтруктураДанные.АдресОбработки 	= АдресОбработки;
		
		МассивСтрок 				= ПреобразоватьСтрокуВМассивПодстрок(АдресОбработки, "\");
		ПоследнийЭлементМассива 	= МассивСтрок.ВГраница();
		ИмяФайлаОбработки 			= МассивСтрок[ПоследнийЭлементМассива];
		СтруктураДанные.ИмяФайла 	= ИмяФайлаОбработки;
		
		
		Возврат СтруктураДанные; 
		
	КонецФункции
	
	Процедура СоздатьНовыйЭлементДополнительныеОбработки(ДанныеДляЗаполнения, Результат) Экспорт
		
		НоваяВнешняяОбработка = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		
		НоваяВнешняяОбработка.Наименование		= ДанныеДляЗаполнения.НаименованиеОбработки;
	
		НоваяВнешняяОбработка.БезопасныйРежим 	= Ложь;
		НоваяВнешняяОбработка.Версия 			= ДанныеДляЗаполнения.ВерсияОбработки;
		НоваяВнешняяОбработка.Вид				= Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		НоваяВнешняяОбработка.ИмяОбъекта		= ДанныеДляЗаполнения.ИмяОбъекта;
		НоваяВнешняяОбработка.ИмяФайла			= ДанныеДляЗаполнения.ИмяФайла;
		НоваяВнешняяОбработка.Информация		= "Дополнительная внешняя обработка для работы с ЭДО через " + ДанныеДляЗаполнения.НаименованиеСистемы;
		НоваяВнешняяОбработка.Публикация		= Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	
		ТЧКоманды = НоваяВнешняяОбработка.Команды;
	
		НоваяКоманда = ТЧКоманды.Добавить();
	
		НоваяКоманда.Идентификатор 			= "Форма_Основная";
		НоваяКоманда.ВариантЗапуска 		= Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		НоваяКоманда.Представление 			= "Открыть модуль работы с электронными первичными документами через " + ДанныеДляЗаполнения.НаименованиеСистемы;
		НоваяКоманда.ПоказыватьОповещение 	= Ложь;
		НоваяКоманда.Модификатор			= "";
	
		НоваяВнешняяОбработка.ХранилищеОбработки = Новый ХранилищеЗначения(ДанныеДляЗаполнения.ДвоичныеДанныеОбработки);
	
		Попытка
			НоваяВнешняяОбработка.Записать();
			Результат.ОписаниеОшибки= "Интеграционный модуль помещен в справочник дополнительных обработок.";
		Исключение
			Результат.Отказ= Истина;
			Результат.ОписаниеОшибки= "Ошибка записи интеграционного модуля в справочник дополнительных обработок!";
			Результат.Подробности= ОписаниеОшибки();
		КонецПопытки;
		
	КонецПроцедуры
	
	Функция ИмяТипаОбъекта(ОбъектСсылка) Экспорт
		
		XMLТип= XMLТипЗнч(ОбъектСсылка);
		
		Если XMLТип = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		
		НачальнаяПозиция= Найти(XMLТип.ИмяТипа, ".");
		Если НачальнаяПозиция > 0 Тогда
			НачальнаяПозиция= НачальнаяПозиция + 1;
		КонецЕсли;
		
		Возврат Сред(XMLТип.ИмяТипа, НачальнаяПозиция);
		
	КонецФункции
	
	Функция СуществуетОбъектМетаданных(ПолноеИмяОбъекта) Экспорт
		
		Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта) <> Неопределено;
		
	КонецФункции
	
	Функция СсылкаСуществует(Ссылка) Экспорт
		
		Запрос= Новый Запрос("ВЫБРАТЬ ИСТИНА ИЗ "+Ссылка.Метаданные().ПолноеИмя()+" ГДЕ Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Возврат НЕ Запрос.Выполнить().Пустой();
		
	КонецФункции
	
	// Сравнить две строки версий.
	//
	// Параметры
	//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
	//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии
	//
	// Возвращаемое значение:
	//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
	//
	Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
		
		Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
		Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
		
		// Для составных номеров версий берем только первую часть.
		Строка1 = ПреобразоватьСтрокуВМассивПодстрок(Строка1, "/")[0];
		Строка2 = ПреобразоватьСтрокуВМассивПодстрок(Строка2, "/")[0];
		
		Версия1 = ПреобразоватьСтрокуВМассивПодстрок(Строка1, ".");
		Версия2 = ПреобразоватьСтрокуВМассивПодстрок(Строка2, ".");
		
		МаксИндекс = Макс(Версия1.ВГраница(), Версия2.ВГраница());
		
		Для Индекс = Версия1.ВГраница() По МаксИндекс Цикл
			Версия1.Добавить("0");
		КонецЦикла;
		
		Для Индекс = Версия2.ВГраница() По МаксИндекс Цикл
			Версия2.Добавить("0");
		КонецЦикла;
		
		Результат = 0;
		
		Для Разряд = 0 По МаксИндекс Цикл
			
			Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
			
			Если Результат <> 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция РазделительПакетаЗапросов() Экспорт
		
		Возврат "		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
		
	КонецФункции
	
	// Возвращает шаблон текста для объединения запросов.
	//
	// Параметры:
	//  ТолькоНовые - Булево - Истина, если из результата присоединяемого запроса нужно получить
	//                         только те строки, которых еще нет в общем результате.
	// 
	// Возвращаемое значение:
	//   Строка
	//
	Функция РазделительОбъединенияЗапросов(ТолькоНовые = Ложь) Экспорт
		
		Если ТолькоНовые Тогда
			
			Результат = "
			|
			|ОБЪЕДИНИТЬ
			|
			|";
			
		Иначе
			
			Результат = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция МассивВПФИзСоответствиеВПФСсылке(ЭлементСоответствия) Экспорт
		
		СоответствиеСущности= 		ЭлементСоответствия.Значение;
		МассивДополнительныхВПФ= 	Новый Массив;
		
		Для каждого ЭлементСущности из СоответствиеСущности Цикл
			
			СтруктураХарактеристики= 	ЭлементСущности.Значение;
			ВременныйМассив= 			СтруктураХарактеристики.МассивВПФ;
			
			Если ВременныйМассив.Количество() > 0 Тогда
				
				Если МассивДополнительныхВПФ.Количество() = 0 Тогда
					МассивДополнительныхВПФ= ВременныйМассив;
				Иначе
					Для каждого ЭлементВременногоМассива из ВременныйМассив Цикл
						МассивДополнительныхВПФ.Добавить(ЭлементВременногоМассива);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МассивДополнительныхВПФ;
		
	КонецФункции

	Функция ТипДокументаУПД(ФункцияУПД) Экспорт
		
		Если ФункцияУПД = "СЧФДОП" ИЛИ ФункцияУПД = "InvoiceAndBasic" Тогда
			Возврат "УПД Счф Доп";
		ИначеЕсли ФункцияУПД = "ДОП" ИЛИ ФункцияУПД = "Basic" Тогда
			Возврат "УПД Доп";
		ИначеЕсли ФункцияУПД = "СЧФ" ИЛИ ФункцияУПД = "Invoice" Тогда
			Возврат "УПД Счф";
		КонецЕсли;
		
	КонецФункции
	
	Функция ТипДокументаУКД(ФункцияУКД) Экспорт
		
		Если ФункцияУКД = "КСЧФДИС" ИЛИ ФункцияУКД = "InvoiceAndBasic" Тогда
			Возврат "УКД Ксчф Дис";
		ИначеЕсли ФункцияУКД = "ДИС" ИЛИ ФункцияУКД = "Basic" Тогда
			Возврат "УКД Дис";
		ИначеЕсли ФункцияУКД = "КСЧФ" ИЛИ ФункцияУКД = "Invoice" Тогда
			Возврат "УКД Ксчф";
		КонецЕсли;
		
	КонецФункции
	
	Функция ФункцияУПД(ТипДокументаУПД) Экспорт
		
		Если Лев(ТипДокументаУПД, СтрДлина(ТипДокументаУПД("СЧФДОП"))) = ТипДокументаУПД("СЧФДОП") Тогда
			Возврат "СЧФДОП";
		ИначеЕсли Лев(ТипДокументаУПД, СтрДлина(ТипДокументаУПД("ДОП"))) = ТипДокументаУПД("ДОП") Тогда
			Возврат "ДОП";
		ИначеЕсли Лев(ТипДокументаУПД, СтрДлина(ТипДокументаУПД("СЧФ"))) = ТипДокументаУПД("СЧФ") Тогда
			Возврат "СЧФ";
		КонецЕсли;
		
	КонецФункции
	
	Функция СформироватьПараметрыПодписанта(Наименование) Экспорт
		
		Инд = 1;
		
		Фамилия = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Фамилия = Фамилия + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
			Инд = Инд + 1;
		КонецЦикла;
		
		Имя = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Имя = Имя + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) = " " Цикл
			Инд = Инд + 1;
		КонецЦикла;
		
		Отчество = "";
		Пока Инд <= СтрДлина(Наименование) И Сред(Наименование, Инд, 1) <> " " Цикл
			Отчество = Отчество + Сред(Наименование, Инд, 1);
			Инд = Инд + 1;
		КонецЦикла;
		
		Рез = Новый Структура;
		Рез.Вставить("ПодписантФамилия", Фамилия);
		Рез.Вставить("ПодписантИмя", Имя);
		Рез.Вставить("ПодписантОтчество", Отчество);
		
		Возврат Рез;
		
	КонецФункции
	
	Функция ПолучитьСписокРазличающихсяРеквизитов(ДокументСсылка, DocumentNumber, DocumentDate) Экспорт
		
		ВидДокумента= МетодСервера(,"ИмяТипаОбъекта", ДокументСсылка);
		
		ЭтоИсправлениеСФ = Ложь;
				
		Если 	ВидДокумента = "ПоступлениеТоваровУслуг"
			ИЛИ ВидДокумента = "ПоступлениеДопРасходов"
			ИЛИ ВидДокумента = "ПоступлениеУслугПрочихАктивов"
			ИЛИ ВидДокумента = "ПриобретениеУслугПрочихАктивов"
		Тогда
		
			ИмяПоляДатаВходящегоДокумента=  "ДатаВходящегоДокумента";
			ИмяПоляНомерВходящегоДокумента= "НомерВходящегоДокумента";
			
		ИначеЕсли 	ВидДокумента = "ПоступлениеМЗ" 
				ИЛИ ВидДокумента = "ПоступлениеУслугРабот"
				ИЛИ ВидДокумента = "ПоступлениеОС"
		Тогда
		
			ИмяПоляДатаВходящегоДокумента=  "ДатаПервичногоДокумента";
			ИмяПоляНомерВходящегоДокумента= "НомерПервичногоДокумента";
			
		ИначеЕсли ВидДокумента = "СчетФактураПолученный" Тогда
			
			ЭтоИсправлениеСФ = МетодСервера(ПараметрыКлиентСервер.ИмяФормыИнтеграции, "ЭтоИсправление", ДокументСсылка);
			
			Если ЭтоИсправлениеСФ Тогда
				ИмяПоляДатаВходящегоДокумента=  "ДатаИсправления";
				ИмяПоляНомерВходящегоДокумента= "НомерИсправления";
			Иначе
				
				Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
					ИмяПоляДатаВходящегоДокумента=  "Дата";
					ИмяПоляНомерВходящегоДокумента= "Номер";
				ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					ИмяПоляДатаВходящегоДокумента=  "ДатаВходящегоДокумента";
					ИмяПоляНомерВходящегоДокумента= "НомерВходящегоДокумента";
				ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
					ИмяПоляДатаВходящегоДокумента=  "ДатаПервичногоДокумента";
					ИмяПоляНомерВходящегоДокумента= "НомерПервичногоДокумента";
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
		Результат=   "";
		Разделитель= "";
		
		Если ИмяПоляДатаВходящегоДокумента <> Неопределено Тогда
			Если НачалоДня(ДокументСсылка[ИмяПоляДатаВходящегоДокумента]) <> НачалоДня(DocumentDate) Тогда
				Результат= 		Результат + Разделитель + ?(ЭтоИсправлениеСФ, """Дата исправления""", """Дата входящего документа""");
				Разделитель= 	", ";
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПоляНомерВходящегоДокумента <> Неопределено Тогда
			Если СокрЛП(ДокументСсылка[ИмяПоляНомерВходящегоДокумента]) <> СокрЛП(DocumentNumber) Тогда
				Результат= 		Результат + Разделитель + ?(ЭтоИсправлениеСФ, """Номер исправления""", """Номер входящего документа""");				
				Разделитель= 	", ";
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции	
	
	Функция Значение1C_В_СтрокаCOM(Значение1С, ФорматнаяСтрока= "") Экспорт
		
		Если НЕ ЗначениеЗаполнено(Значение1С) Тогда
			Возврат "";
		ИначеЕсли НЕ ПустаяСтрока(ФорматнаяСтрока) Тогда
			Возврат Формат(Значение1С, ФорматнаяСтрока);
		Иначе
			Возврат СокрЛП(Значение1С);
		КонецЕсли;
		
	КонецФункции
	
	Функция Item_UnitCode(ЕдиницаИзмерения, КодЕдиницыИзмерения, ПредставлениеПустого = "") Экспорт
			
		// См. аналитику https://jira.diadoc.ru/browse/DCP-84
		
		КодЕдиницыКорректный = МетодСервера("ГенерацияXML",
											"КодЕдиницыИзмеренияСоответствуетКлассификатору",
											ЕдиницаИзмерения,
											СокрЛП(КодЕдиницыИзмерения));
		
		Если КодЕдиницыКорректный Тогда
			Возврат КодЕдиницыИзмерения;
		Иначе
			Возврат ПредставлениеПустого;
		КонецЕсли;
		
	КонецФункции
	
	Функция XML_КодЕдиницыИзмерения(КодЕдиницыИзмерения) Экспорт
		
		Результат = МетодСервера("ГенерацияXML", "XML_КодЕдиницыИзмерения", КодЕдиницыИзмерения);
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьФункциональнуюОпциюНаСервере(Имя) Экспорт
		
		Если Метаданные.ФункциональныеОпции.Найти(Имя) <> Неопределено Тогда
			Возврат ПолучитьФункциональнуюОпцию(Имя);
		КонецЕсли;
		
	КонецФункции
	
	Функция ЭДО_БиблиотекаКартинок() Экспорт
		
		ЭДО_БиблиотекаКартинок = Новый Структура;
		
		Для Каждого Рисунок Из ПолучитьМакет("БиблиотекаКартинок").Рисунки Цикл
			ЭДО_БиблиотекаКартинок.Вставить(Рисунок.Имя, Рисунок.Картинка);
		КонецЦикла;
		
		Возврат ЭДО_БиблиотекаКартинок;
		
	КонецФункции
	
	Функция МакетМодуля(ИмяМакета) Экспорт
		
		Если Метаданные().Макеты.Найти(ИмяМакета) = Неопределено Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти макет обработки ""%1""'"), ИмяМакета);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Результат = ПолучитьМакет(ИмяМакета);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ИспользуемоеИмяФайлаОбработки()
		
		Результат = Неопределено;
		
		МетаданныеОбработки = ЭтотОбъект.Метаданные();
		
		Если Не Метаданные.Обработки.Содержит(МетаданныеОбработки) Тогда
			
			ИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;
			
			// Конструкция Не ЭтоАдресВременногоХранилища() сработает не корректно,
			// потому что файла во временном хранилище в этот момент уже нет
			ЭтоПутьКФайлу = Прав(ИмяФайла, 4) = ".epf";
			
			Если ЭтоПутьКФайлу Тогда
				Результат = ИмяФайла;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПреобразоватьСтрокуВМассивПодстрок(Знач Строка, Разделитель = ",", ПропускатьПустыеСтроки = Ложь, ПрименятьСокрЛП = Ложь)
		
		МассивПодстрок = Новый Массив;
		
		ДлинаРазделителя = СтрДлина(Разделитель);
		
		ПозицияРазделителя = Найти(Строка, Разделитель);
		
		Пока ПозицияРазделителя > 0 Цикл
			
			Подстрока = Лев(Строка, ПозицияРазделителя - 1);
			
			Если НЕ ПропускатьПустыеСтроки ИЛИ ЗначениеЗаполнено(Подстрока) Тогда
				МассивПодстрок.Добавить(?(ПрименятьСокрЛП, СокрЛП(Подстрока), Подстрока));
			КонецЕсли;
			
			Строка = Сред(Строка, ПозицияРазделителя + ДлинаРазделителя);
			
			ПозицияРазделителя = Найти(Строка, Разделитель);
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Строка) Тогда
			МассивПодстрок.Добавить(?(ПрименятьСокрЛП, СокрЛП(Строка), Строка));
		КонецЕсли;
		
		Возврат МассивПодстрок;
		
	КонецФункции 
	
	Функция СтруктураФИО(ФИО) Экспорт
		
		Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
		
		МассивПодстрок = ПреобразоватьСтрокуВМассивПодстрок(ФИО, " ", Ложь, Истина);
		
		РазмерМассива = МассивПодстрок.Количество();
		
		Если РазмерМассива > 0 Тогда
			Результат.Фамилия = МассивПодстрок[0];
		КонецЕсли;
		
		Если РазмерМассива > 1 Тогда
			Результат.Имя = МассивПодстрок[1];
		КонецЕсли;
		
		Если РазмерМассива > 2 Тогда
			Результат.Отчество = МассивПодстрок[2];
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция МетаданныеСчетовФактурПолученных()
		
		Результат = Новый Массив;
		
		ВидыЭД = МетодСервера("Модуль_ИнтеграцияУниверсальный", "Перечисление_ВидыЭД");
		
		ВидыСФ = Новый Массив;
		ВидыСФ.Добавить(ВидыЭД.СчетФактура);
		ВидыСФ.Добавить(ВидыЭД.СчетФактураНаАванс);
		ВидыСФ.Добавить(ВидыЭД.КорректировочныйСчетФактура);
		
		Для Каждого ВидЭД Из ВидыСФ Цикл
			
			ПравилаЗагрузки = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПравилаЗагрузкиПоВидуЭД", ВидЭД);
			
			Для Каждого Элемент Из ПравилаЗагрузки Цикл
				
				ВидМетаданных = Элемент.Ключ;
				Если Результат.Найти(ВидМетаданных) = Неопределено Тогда
					Результат.Добавить(ВидМетаданных);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ЕстьМетаданныеКонфигурации_ДД(СтрокаМетаданных) Экспорт
		
		ТекПолеМетаданных = Метаданные;
		
		МассивИмен = ПреобразоватьСтрокуВМассивПодстрок(СтрокаМетаданных, ".");
		
		КоличествоИмен = МассивИмен.Количество();
		
		// КоличествоИмен = 2 для проверки наличия объекта, например                     Справочники.Валюты
		// КоличествоИмен = 4 для проверки наличия реквизита\ресурса и т.д., например    Справочники.Валюты.Реквизиты.ПараметрыПрописи
		// КоличествоИмен = 6 для проверки наличия реквизита таб. части, например        Документы.РеализацияТоваровУслуг.ТабличныеЧасти.Товары.Реквизиты.СчетНДС
		
		Если НЕ (КоличествоИмен = 2 ИЛИ КоличествоИмен = 4 ИЛИ КоличествоИмен = 6) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		КоличествоПоисков = КоличествоИмен / 2;
		Для н = 1 По КоличествоПоисков Цикл
			ТекПолеМетаданных = ТекПолеМетаданных[МассивИмен[н * 2 - 2]].Найти(МассивИмен[н * 2 - 1]);
			Если ТекПолеМетаданных = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;    
		
	КонецФункции
	
	Функция ЕстьРеквизитОбъекта_ДД(Объект, ИмяРеквизита, ИмяТабличнойЧасти = Неопределено)
		
		Результат = Ложь;
		
		текМетаданные = Объект.Метаданные();
		Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
			Результат = НЕ текМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяРеквизита) = Неопределено
		Иначе    
			Результат = НЕ текМетаданные.Реквизиты.Найти(ИмяРеквизита) = Неопределено
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Обертка для подключения внешней обработки с отключеным предупреждением об опасных действиях.
	//
	Функция ВнешниеОбработки_Подключить(АдресОбработки, ИмяОбработки = Неопределено, БезопасныйРежим = Ложь) Экспорт 
		
		ОписаниеЗащитыБезПредупреждений = ОписаниеЗащитыБезПредупреждений();
		
		Если ОписаниеЗащитыБезПредупреждений <> Неопределено Тогда
			
			Результат = ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки, БезопасныйРежим, ОписаниеЗащитыБезПредупреждений);
			
		Иначе
			
			Результат = ВнешниеОбработки.Подключить(АдресОбработки, ИмяОбработки, БезопасныйРежим);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ВнешниеОбработки_СоздатьПоИмени(ИмяОбработки, БезопасныйРежим = Ложь) Экспорт 
		
		Результат = Неопределено;
		
		Результат = ВнешниеОбработки.Создать(ИмяОбработки, БезопасныйРежим);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ВнешниеОбработки_СоздатьИзФайла(ИмяФайла, БезопасныйРежим = Ложь)
		
		ПроверитьЧтоФайлСуществует(ИмяФайла);
		
		Результат = ВнешниеОбработки.Создать(ИмяФайла, БезопасныйРежим);
		
		Возврат Результат;
		
	КонецФункции
	
	Процедура ПроверитьЧтоФайлСуществует(ИмяФайла)
		
		Файл = Новый Файл(ИмяФайла);
		
		Если НЕ Файл.Существует() Тогда
			
			Если ПараметрыКлиентСервер.ФайловыйРежимРаботы Тогда
				СтрокаПроверьтеФайлНаСервере = "";
			Иначе
				СтрокаПроверьтеФайлНаСервере = НСтр("ru = '
				|Проверьте, что файл доступен для загрузки на сервере 1С.'");
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл не обнаружен ''%1'' %2'"), ИмяФайла, СтрокаПроверьтеФайлНаСервере);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Возвращает описание защиты от опасных действий с отключенным предупреждением.
	// Если защита от опасных действий не поддерживается платформой, возвращает Неопределено.
	//
	// Возвращаемое значение:
	//  ОписаниеЗащитыОтОпасныхДействий - со свойством ПредупреждатьОбОпасныхДействиях = Ложь.
	//
	Функция ОписаниеЗащитыБезПредупреждений()
		
		Результат = Неопределено;
		
		Попытка
			Результат = Новый("ОписаниеЗащитыОтОпасныхДействий");
			Результат.ПредупреждатьОбОпасныхДействиях = Ложь;
		Исключение КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПривестиКЧислу(ПриводимоеЗначение) Экспорт
		
		Возврат ?(ПриводимоеЗначение = Неопределено, 0, ПриводимоеЗначение);
		
	КонецФункции
	
	Функция СтавкаНДС_ИсчНалАг() Экспорт
	
		Возврат "ИсчНалАг";
	
	КонецФункции
	
	Функция СтавкаНДС_БезНДС() Экспорт
	
		Возврат "без НДС";
	
	КонецФункции
	
	Процедура ЗаполнитьВТаблице_СтавкаНДС_ИсчНалАг(Таблица) Экспорт
		
		ПоляСтавкиНДС = Новый Структура;
		ПоляСтавкиНДС.Вставить("СтавкаНДС",			   СтавкаНДС_ИсчНалАг());
		ПоляСтавкиНДС.Вставить("СтавкаНДСДоИзменения", СтавкаНДС_ИсчНалАг());
		
		Для каждого СтрокаТаблицы Из Таблица Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПоляСтавкиНДС);
		КонецЦикла; 
	
	КонецПроцедуры

	Функция РасширениеФайлаИзИмениФайла(ИмяФайла) Экспорт
		
		Результат = "";
		
		МассивПодстрок = ПреобразоватьСтрокуВМассивПодстрок(ИмяФайла, ".", Истина, Истина);
		
		Если ЗначениеЗаполнено(МассивПодстрок) Тогда
			
			Результат = МассивПодстрок[МассивПодстрок.ВГраница()];
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Процедура ДополнитьСтруктуруСоответствие(Приемник, Источник) Экспорт
		
		Для Каждого КлючИЗначение Из Источник Цикл
			Приемник.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	КонецПроцедуры
	
	// Удаляет повторяющиеся элементы массива.
	//
	// Параметры:
	//  Массив - Массив - массив произвольных значений.
	//
	// Возвращаемое значение:
	//  Массив - коллекция уникальных элементов.
	//
	Функция СвернутьМассив(Массив) Экспорт
		Результат = Новый Массив;
		ДополнитьМассив(Результат, Массив, Истина);
		Возврат Результат;
	КонецФункции
	
	// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
	//
	// Параметры:
	//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
	//  МассивИсточник - Массив - массив значений для заполнения.
	//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
	//
	Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
		
		Если ТолькоУникальныеЗначения Тогда
			
			УникальныеЗначения = Новый Соответствие;
			
			Для Каждого Значение Из МассивПриемник Цикл
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЦикла;
			
			Для Каждого Значение Из МассивИсточник Цикл
				Если УникальныеЗначения[Значение] = Неопределено Тогда
					МассивПриемник.Добавить(Значение);
					УникальныеЗначения.Вставить(Значение, Истина);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для Каждого Значение Из МассивИсточник Цикл
				МассивПриемник.Добавить(Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОбработатьОшибкуНаСервере(ТипОшибки, ТекстОшибки) Экспорт
		
		Если ТипОшибки = "ОшибкаСоединения" Тогда 
			ЗаписьЖурналаРегистрации("Диадок.ПроверкаОбновления.ОшибкаСоединения", УровеньЖурналаРегистрации.Ошибка, , , "Не удалось установить соединение: " + ТекстОшибки);
			
		ИначеЕсли ТипОшибки = "ОшибкаПолученияФайла" Тогда 
			
			ТекстСообщения = "Возникли проблемы с соединением при получении файла для проверки обновления";
			
			Если ТекстОшибки <> "" Тогда 
				ТекстСообщения = "Не удалось получить файл для проверки обновления: " + ТекстОшибки;
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("Диадок.ПроверкаОбновления.ОшибкаПолученияФайла", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		ИначеЕсли ТипОшибки = "ОшибкаПолученияФайлаОбновления" Тогда 
			ЗаписьЖурналаРегистрации("Диадок.ПроверкаОбновления.ОшибкаПолученияФайлаОбновления", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);

		КонецЕсли;	
		
	КонецПроцедуры
	
	// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
	// по ссылке на объект.
	// 
	//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
	//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
	//  то следует использовать предварительный переход в привилегированный режим.
	// 
	// Параметры:
	//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
	//
	//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
	//              требований к свойствам структуры.
	//              Например, "Код, Наименование, Родитель".
	//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
	//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
	//              значения (опционально) фактическое имя поля в таблице.
	//              Если значение не определено, то имя поля берется из ключа.
	//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
	//              к свойствам структуры.
	//
	// Возвращаемое значение:
	//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
	//              Если строка затребованных реквизитов пуста, то возвращается пустая структура
	//
	Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
		
		Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
			Если ПустаяСтрока(Реквизиты) Тогда
				Возврат Новый Структура;
			КонецЕсли;
			
			СтруктураРеквизитов = Новый Структура(Реквизиты);
			
		ИначеЕсли ТипЗнч(Реквизиты) = Тип("Структура")
		      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
			
			СтруктураРеквизитов = Реквизиты;
			
		ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
		      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
			
			Если Реквизиты.Количество() = 0 Тогда
				Возврат Новый Структура;
			КонецЕсли;
			
			СтруктураРеквизитов = Новый Структура;
			Для каждого Реквизит Из Реквизиты Цикл
				СтруктураРеквизитов.Вставить(Реквизит);
			КонецЦикла;
		Иначе
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
				Строка(ТипЗнч(Реквизиты)));
			
		КонецЕсли;
		
		ТекстПолей = "";
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			
			ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
			              СокрЛП(КлючИЗначение.Значение),
			              СокрЛП(КлючИЗначение.Ключ));
			
			Псевдоним = СокрЛП(КлючИЗначение.Ключ);
			
			ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
		|";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Результат = Новый Структура;
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			Результат.Вставить(КлючИЗначение.Ключ);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Возврат Результат;
		
	КонецФункции
	
	// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
	// 
	//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
	//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
	//  то следует использовать предварительный переход в привилегированный режим.
	// 
	// Параметры:
	//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
	//  ИмяРеквизита - Строка, например, "Код".
	// 
	// Возвращаемое значение:
	//  Произвольный    - зависит от типа значения прочитанного реквизита.
	// 
	Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
		
		Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
		Возврат Результат[ИмяРеквизита];
		
	КонецФункции 
	
	// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы
	// для нескольких объектов.
	// 
	//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
	//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
	//  то следует использовать предварительный переход в привилегированный режим.
	// 
	// Параметры:
	//  МассивСсылок - массив ссылок на объекты одного типа
	//				ВАЖНО! значения массива должны быть ссылками на 
	//				объекты одного типа!
	//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
	//				в формате требований к свойствам структуры.
	//				Например, "Код, Наименование, Родитель".
	// 
	// Возвращаемое значение:
	//  Соответствие, где ключ - ссылка на объект, а Значение - структура, которая 
	//				содержит список свойств, как список имен в строке
	//				ИменаРеквизитов, со значениям реквизитов, прочитанными
	//				из информационной базы.
	// 
	Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
		
		ЗначенияРеквизитов = Новый Соответствие;
		Если ТипЗнч(МассивСсылок) = Тип("Массив") ИЛИ ТипЗнч(МассивСсылок) = Тип("ФиксированныйМассив") Тогда
			Если МассивСсылок.Количество() = 0 Тогда
				Возврат ЗначенияРеквизитов;
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра ""МассивСсылок""");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Ссылка КАК Ссылка, " + ИменаРеквизитов + "
			|ИЗ
			|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка В (&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат = Новый Структура(ИменаРеквизитов);
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
		КонецЦикла;
		
		Возврат ЗначенияРеквизитов;
		
	КонецФункции
	
	// Возвращает значения реквизита, прочитанного из информационной базы для нескольких объектов.
	// 
	//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
	//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
	//  то следует использовать предварительный переход в привилегированный режим.
	// 
	// Параметры:
	//  МассивСсылок - массив ссылок на объекты одного типа
	//				ВАЖНО! значения массива должны быть ссылками на 
	//				объекты одного типа!
	//  ИмяРеквизита - Строка, например, "Код".
	// 
	// Возвращаемое значение:
	//  Соответствие, где ключ - ссылка на объект, Значение - значение прочитанного реквизита
	// 
	Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита) Экспорт
		
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, ИмяРеквизита);
		Для Каждого Элемент Из ЗначенияРеквизитов Цикл
			ЗначенияРеквизитов[Элемент.Ключ] = Элемент.Значение[ИмяРеквизита];
		КонецЦикла;
			
		Возврат ЗначенияРеквизитов;
		
	КонецФункции
	
	// Возвращает соответствие, у которого значением каждого элемента является
	// массив объектов одного типа. Ключом значения является тип его элементов.
	//
	// Параметры:
	//  ПроизвольныйМассив - Массив - массив элементов любого типа.
	// 
	// Возвращаемое значение:
	//  Соответствие - ключ - тип, значение - массив элементов одного типа.
	//
	Функция РазложитьМассивПоТипам(ПроизвольныйМассив) Экспорт 
		
		Если ТипЗнч(ПроизвольныйМассив) <> Тип("Массив") Тогда 
			
			ВызватьИсключение НСтр("ru = 'Неверный первый параметр ПроизвольныйМассив: 
			                       |- Тип параметра должен быть ""Массив""'");
			
		КонецЕсли;
		
		Результат = Новый Соответствие;
		
		Для Каждого ТекущийЭлемент Из ПроизвольныйМассив Цикл 
			
			ТипЭлемента = ТипЗнч(ТекущийЭлемент);
			
			Если Результат[ТипЭлемента] = Неопределено Тогда 
				Результат.Вставить(ТипЭлемента, Новый Массив);
			КонецЕсли;
			
			Результат[ТипЭлемента].Добавить(ТекущийЭлемент);
			
		КонецЦикла;
		
	КонецФункции
							
	// Объединяет части пути через разделитель
	//
	Функция ОбъединитьПути(П1, П2, П3 = Неопределено, П4 = Неопределено) Экспорт
		
		Результат = П1;
		РазделительПути = ПолучитьРазделительПути();
		
		ЧастиПути = Новый Массив;
		ЧастиПути.Добавить(П2);
		ЧастиПути.Добавить(П3);
		ЧастиПути.Добавить(П4);
		
		Для Каждого Элемент Из ЧастиПути Цикл
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				Прервать;
			КонецЕсли;
			
			Если Прав(Результат, 1) <> РазделительПути Тогда
				Результат = Результат + РазделительПути;
			КонецЕсли;
			
			Результат = Результат + Элемент;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция КонтекстКлиентСервер_АдресаВХранилище(УИД)
		
		Результат = Новый Структура;
		
		Результат.Вставить("АдресКэшаСервераНаВремяСеанса"	, ПоместитьВоВременноеХранилище(Неопределено, УИД));
		Результат.Вставить("АдресКэшДополнительныхПФ"		, ПоместитьВоВременноеХранилище(Неопределено, УИД));
		Результат.Вставить("АдресОбработкаОбъект"			, ПоместитьВоВременноеХранилище(Неопределено, УИД));
		Результат.Вставить("АдресДанныеСотрудников"			, ПоместитьВоВременноеХранилище(Неопределено, УИД));
				
		Возврат Результат;
		
	КонецФункции
	
	Функция КонтекстКлиентСервер_ПодключаемыйМодуль()
		                   	
		ИспользоватьМодуль 	= ПолучитьЗначениеКонстанты("ИспользоватьПодключаемыйМодуль") = Истина;
		РасположениеМодуля 	= ПолучитьЗначениеКонстанты("РасположениеПодключаемогоМодуля");
		ПутьКМодулю			= ПолучитьЗначениеКонстанты("ПутьКПодключаемомуМодулю");
		
		РежимСовместимостиФорматов155и820 = ПолучитьЗначениеКонстанты("РежимСовместимостиФорматов155и820") = Истина;
		
		Результат = Новый Структура;
		
		Результат.Вставить("ИспользоватьМодуль"	, ИспользоватьМодуль);
		Результат.Вставить("РасположениеМодуля"	, РасположениеМодуля);
		Результат.Вставить("ПутьКМодулю"		, ПутьКМодулю);
		Результат.Вставить("РежимСовместимостиФорматов155и820", РежимСовместимостиФорматов155и820);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция КонтекстКлиентСервер_Метрики()
		
		ИспользоватьМетрики = НЕ НастройкаДиадокОтключитьСборСтатистики();
		
		Результат = Новый Структура;
		
		Результат.Вставить("ИспользоватьМетрики"	, ИспользоватьМетрики);
		Результат.Вставить("TraceId"				, Неопределено);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция НастройкаДиадокОтключитьСборСтатистики()
		
		ЗапретитьРаботуСМетриками = ПолучитьЗначениеКонстанты("ДиадокОтключитьСборСтатистики");
		
		Если ЗапретитьРаботуСМетриками = Неопределено 
			ИЛИ ЗапретитьРаботуСМетриками = Ложь Тогда
			
			Результат = Ложь;
			
		Иначе
			
			Результат = Истина;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СтрокиПодобны(Строка1, Строка2) Экспорт
		
	МинимальнаяДлина = Мин(СтрДлина(Строка1), СтрДлина(Строка2));
	
	Если МинимальнаяДлина = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = НРег(Лев(Строка1, МинимальнаяДлина)) = НРег(Лев(Строка2, МинимальнаяДлина));
	
	Возврат Результат;
		
	КонецФункции
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//{ ИНТЕГРАЦИЯ
	
	Функция ИмяФормыИнтеграции() Экспорт
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			Возврат "Модуль_ИнтеграцияБП30";
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Возврат "Модуль_ИнтеграцияУТ11";
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Возврат "Модуль_ИнтеграцияБГУ20";
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			Возврат "Модуль_ИнтеграцияУНФ16";
		КонецЕсли;
		
	Конецфункции 

	Функция ПредставлениеВизирующегоСтруктурой(ПараметрыПодписания, ИНН = Неопределено) Экспорт
		
		Результат = Новый Структура;
		
		СтруктураФИО = СтруктураФИО(ПараметрыПодписания.ФИОПодписанта);
		
		Результат.Вставить("Surname"   , СтруктураФИО.Фамилия);
		Результат.Вставить("FirstName" , СтруктураФИО.Имя);
		Результат.Вставить("Patronymic", СтруктураФИО.Отчество);
		Результат.Вставить("JobTitle"  , ПараметрыПодписания.ДолжностьПодписанта);
		
		Если ИНН <> Неопределено Тогда
			Результат.Вставить("Inn", ИНН);
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции 

	Функция ПолучитьНоменклатуруПоставщика(стПрофильКонфигурации, Контрагент, КодНоменклатуры, АртикулНоменклатуры, Знач НоменклатураИзЭД = Неопределено) Экспорт
		
		СвойстваНоменклатуры = Новый Структура;
		СвойстваНоменклатуры.Вставить("Наименование", НоменклатураИзЭД);
		СвойстваНоменклатуры.Вставить("Код"			, КодНоменклатуры);
		СвойстваНоменклатуры.Вставить("Артикул"		, АртикулНоменклатуры);
		
		Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "НоменклатураПоДаннымНоменклатурыПоставщика"
						, Контрагент
						, СвойстваНоменклатуры);
		
		ПараметрыПМ = Новый Структура;
		ПараметрыПМ.Вставить("НайденнаяНоменклатура", 		Результат);
		ПараметрыПМ.Вставить("Контрагент", 					Контрагент);
		ПараметрыПМ.Вставить("КодНоменклатуры",				КодНоменклатуры);
		ПараметрыПМ.Вставить("АртикулНоменклатуры",			АртикулНоменклатуры);
		ПараметрыПМ.Вставить("НаименованиеНоменклатуры",	НоменклатураИзЭД);
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПолучитьНоменклатуру1С", ПараметрыПМ);
		Если РезультатПМ <> Неопределено Тогда
			Результат = РезультатПМ;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьНоменклатуруПоАртикулу(стПрофильКонфигурации, АртикулНоменклатуры) Экспорт
		
		Если ЗначениеЗаполнено(АртикулНоменклатуры)=Ложь Тогда
			возврат неопределено 
		ИначеЕсли стПрофильКонфигурации.ЕстьАртикул Тогда
			
			Запрос=			Новый Запрос;
			Запрос.Текст=
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	Номенклатура.Ссылка
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Артикул = &АртикулНоменклатуры";
			
			Запрос.УстановитьПараметр("АртикулНоменклатуры", АртикулНоменклатуры);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции
	
	Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт
		
		Результат = 
		
		(МетодСервера(, "СуществуетОбъектМетаданных", "Справочник.Номенклатура.Реквизит.ТипНоменклатуры")
			И Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"))
			
		ИЛИ (МетодСервера(, "СуществуетОбъектМетаданных", "Справочник.Номенклатура.Реквизит.Услуга")
			 И Номенклатура.Услуга = Истина);
			 
		Возврат Результат;	 
			 
	КонецФункции // НоменклатураЯвляетсяУслугой()
	
	Функция ВыбратьОсновноеСоглашениеКонтрагента(Контрагент, Организация) Экспорт
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияСПоставщиками.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Партнер = &Партнер
		|	И СоглашенияСПоставщиками.Контрагент = &Контрагент
		|	И СоглашенияСПоставщиками.Организация = &Организация";
		Запрос.УстановитьПараметр("Партнер", Контрагент.Партнер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Возврат Запрос.Выполнить().Выбрать();
		
	КонецФункции
	
	Функция ВыбратьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров) Экспорт
		
		Запрос= Новый Запрос; 
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Если МетодСервера(, "СуществуетОбъектМетаданных", "Справочник.ДоговорыКонтрагентов.Реквизит.Статус") Тогда
				УсловиеСтатусНеЗакрыт = "И ДоговорыКонтрагентов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)";
			Иначе
				УсловиеСтатусНеЗакрыт = "";
			КонецЕсли;			
			
			Запрос.Текст= 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка КАК Договор,
				|	ВЫБОР
				|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК ПриоритетДоговора
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				|		ПО ДоговорыКонтрагентов.Контрагент = Контрагенты.Ссылка
				|ГДЕ
				|	ДоговорыКонтрагентов.Контрагент = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И ДоговорыКонтрагентов.ТипДоговора В(&СписокДоговоров)
				|	" + УсловиеСтатусНеЗакрыт + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПриоритетДоговора";
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ОсновнойДоговорКонтрагента") = Неопределено Тогда	//начиная с 3.0.43.29 рекизит удален, вместо него ввели регистр сведений
				Запрос.Текст= 
					"ВЫБРАТЬ                                                                                         
					|	ДоговорыКонтрагентов.Ссылка КАК Договор,
					|	ВЫБОР
					|		КОГДА ОсновныеДоговорыКонтрагентов.Договор ЕСТЬ НЕ NULL 
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ КАК ПриоритетДоговора
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагентов
					|		ПО ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагентов.Контрагент
					|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагентов.Договор
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
					|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
					|  	
					|УПОРЯДОЧИТЬ ПО
					|	ПриоритетДоговора";
			Иначе
				
				Запрос.Текст= 
					"ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка КАК Договор,
					|	ВЫБОР
					|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
					|			ТОГДА 1
					|		ИНАЧЕ 2
					|	КОНЕЦ КАК ПриоритетДоговора
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
					|		ПО ДоговорыКонтрагентов.Владелец = Контрагенты.Ссылка
					|			И ДоговорыКонтрагентов.Ссылка = Контрагенты.ОсновнойДоговорКонтрагента
					|ГДЕ
					|	ДоговорыКонтрагентов.Владелец = &Владелец
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
					|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
					|
					|УПОРЯДОЧИТЬ ПО
					|	ПриоритетДоговора";
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		
			Запрос.Текст= 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка КАК Договор,
				|	ВЫБОР
				|		КОГДА Контрагенты.Ссылка ЕСТЬ НЕ NULL 
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК ПриоритетДоговора
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				|		ПО ДоговорыКонтрагентов.Владелец = Контрагенты.Ссылка
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокДоговоров)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПриоритетДоговора";
			
		Иначе	
			
			Запрос.Текст= 
				"ВЫБРАТЬ
				|	ДоговорыКонтрагентов.Ссылка КАК Договор,
				|	ВЫБОР
				|		КОГДА СпрКонтрагенты.Ссылка ЕСТЬ НЕ NULL 
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ КАК ПриоритетДоговора
				|ИЗ
				|	Справочник.Договоры КАК ДоговорыКонтрагентов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
				|		ПО ДоговорыКонтрагентов.Контрагент = СпрКонтрагенты.Ссылка
				|ГДЕ
				|	ДоговорыКонтрагентов.Контрагент = &Владелец
				|	И ДоговорыКонтрагентов.Организация = &Организация
				|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
				|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ПриоритетДоговора";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Владелец", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СписокДоговоров", СписокВидовДоговоров);
		
		Возврат Запрос.Выполнить().Выбрать();
		
	КонецФункции
	
	Функция ПолучитьСоглашениеКонтрагента(Организация, Контрагент) Экспорт
		
		Запрос=	Новый Запрос;
		Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗначенияСвойствОбъектов.Объект КАК Соглашение,
			|	СоглашенияСПоставщиками.Статус КАК Статус
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
			|		ПО ЗначенияСвойствОбъектов.Объект = СоглашенияСПоставщиками.Ссылка
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &Свойство
			|	И ЗначенияСвойствОбъектов.Значение = &Значение";
			
		Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("DDPact"));
		Запрос.УстановитьПараметр("Значение", СокрЛП(Контрагент.УникальныйИдентификатор()));
			
		Выборка=	Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Соглашение;
		Иначе
			
			ВыборкаСоглашений=	ВыбратьОсновноеСоглашениеКонтрагента(Контрагент, Организация);
			Если ВыборкаСоглашений.Следующий() Тогда
				Возврат ВыборкаСоглашений.Соглашение;
			КонецЕсли;
			
			Возврат Вычислить("Справочники.СоглашенияСПоставщиками.ПустаяСсылка()");
			
		КонецЕсли;

	КонецФункции

	Функция ПолучитьДоговорКонтрагента(Организация, Контрагент, СписокВидовДоговоров, ПредставлениеДоговора = "") Экспорт
		
		НайденныйДоговор= Неопределено;
		
		Если ЗначениеЗаполнено(ПредставлениеДоговора) = Истина Тогда
			
			Запрос=	Новый Запрос;
			Запрос.Текст=
				"ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Объект КАК Договор
				|ИЗ
				|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Свойство = &Свойство
				|	И ЗначенияСвойствОбъектов.Значение = &Значение";
				
			Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("DDContract"));
			Запрос.УстановитьПараметр("Значение", ПредставлениеДоговора);
				
			Выборка=	Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				НайденныйДоговор= Выборка.Договор;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НайденныйДоговор = Неопределено Тогда
			НайденныйДоговор= ПолучитьПриоритетныйДоговорКонтрагента(Организация, Контрагент, СписокВидовДоговоров); 
		КонецЕсли;
		
		Возврат НайденныйДоговор;
		
	КонецФункции

	Функция ПолучитьПриоритетныйДоговорКонтрагента(Организация, Контрагент, СписокВидовДоговоров)
		
		ВыборкаДоговоров= ВыбратьОсновнойДоговорКонтрагента(Контрагент, Организация, СписокВидовДоговоров);
		Если ВыборкаДоговоров.Следующий() Тогда
			Если ВыборкаДоговоров.ПриоритетДоговора = 1 Или ВыборкаДоговоров.Количество() = 1 Тогда
				Возврат ВыборкаДоговоров.Договор;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Возврат Справочники.Договоры.ПустаяСсылка();
		Иначе
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецФункции

	Функция ОбновитьДанныеДокумента(ДокументСсылка, DocumentDate, DocumentNumber) Экспорт
		
		Результат = Новый Структура("ДанныеОбновлены, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		НовыеРеквизиты = Неопределено;
		ПерепровестиДокумент = Ложь;
		
		ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		
		Если 	ИмяДокумента = "ПоступлениеТоваровУслуг"
			ИЛИ ИмяДокумента = "ПоступлениеДопРасходов"
			ИЛИ ИмяДокумента = "ПоступлениеУслугПрочихАктивов"
			ИЛИ ИмяДокумента = "ПриобретениеУслугПрочихАктивов" Тогда
			
			НовыеРеквизиты = Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента", DocumentDate, DocumentNumber);
			
		ИначеЕсли ИмяДокумента = "ПоступлениеМЗ" Тогда
			
			НовыеРеквизиты = Новый Структура("ДатаПервичногоДокумента, НомерПервичногоДокумента", DocumentDate, DocumentNumber);
			
		ИначеЕсли ИмяДокумента = "СчетФактураПолученный" Тогда
			
			ЭтоИсправлениеСФ = МетодСервера(ПараметрыКлиентСервер.ИмяФормыИнтеграции, "ЭтоИсправление", ДокументСсылка);
						
			Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
												
				Если ЭтоИсправлениеСФ Тогда
					НовыеРеквизиты = Новый Структура("ДатаИсправления, НомерИсправления, ПолученВЭлектронномВиде", DocumentDate, DocumentNumber, Истина);
				Иначе
					НовыеРеквизиты = Новый Структура("ДатаСоставления, Номер, ПолученВЭлектронномВиде", DocumentDate, DocumentNumber, Истина);
				КонецЕсли;
											
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				
				ПерепровестиДокумент = Истина; // Необходимо обновить журнал учета счетов-фактур.
				
				Если ЭтоИсправлениеСФ Тогда
					НовыеРеквизиты = Новый Структура("ДатаИсправления, НомерИсправления, КодСпособаПолучения", DocumentDate, DocumentNumber, 2);
				Иначе
					НовыеРеквизиты = Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента, КодСпособаПолучения", DocumentDate, DocumentNumber, 2);
				КонецЕсли;
											
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
				Если ЭтоИсправлениеСФ Тогда
					НовыеРеквизиты = Новый Структура("ДатаИсправления, НомерИсправления", DocumentDate, DocumentNumber);
				Иначе
					НовыеРеквизиты = Новый Структура("ДатаВходящегоДокумента, НомерВходящегоДокумента", DocumentDate, DocumentNumber);
				КонецЕсли;
											
			ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
				
				Если ЭтоИсправлениеСФ Тогда
					НовыеРеквизиты = Новый Структура("ДатаИсправления, НомерИсправления, КодСпособаВыставления", DocumentDate, DocumentNumber, 2);
				Иначе
					НовыеРеквизиты = Новый Структура("ДатаПервичногоДокумента, НомерПервичногоДокумента, КодСпособаВыставления", DocumentDate, DocumentNumber, 2);
				КонецЕсли;
											
			КонецЕсли;
			
		КонецЕсли;
		
		// Уберем одинакоые реквизиты
		Если ЗначениеЗаполнено(НовыеРеквизиты) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 " + ОбновитьДанныеДокумента_РеквизитыСтрокой(НовыеРеквизиты) + " ИЗ Документ." + ИмяДокумента + " ГДЕ Ссылка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ОдинаковыеРеквизиты = Новый Массив;
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Для каждого КлючИЗначение Из НовыеРеквизиты Цикл
					
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Строка") Тогда
						ЗначенияРавны = СокрЛП(Выборка[КлючИЗначение.Ключ]) = СокрЛП(КлючИЗначение.Значение);
					ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Дата") Тогда
						ЗначенияРавны = НачалоДня(Выборка[КлючИЗначение.Ключ]) = НачалоДня(КлючИЗначение.Значение);
					Иначе
						ЗначенияРавны = Выборка[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
					КонецЕсли;
					
					Если ЗначенияРавны Тогда
						ОдинаковыеРеквизиты.Добавить(КлючИЗначение.Ключ);
					КонецЕсли; 
					
				КонецЦикла;
				
				Для каждого ОдинаковыйРеквизит Из ОдинаковыеРеквизиты Цикл
					НовыеРеквизиты.Удалить(ОдинаковыйРеквизит);
				КонецЦикла; 
				
				ОдинаковыеРеквизиты = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыеРеквизиты) Тогда
			
			ОшибкаОбновления = ОбновитьДанныеДокумента_ОбновитьДокумент(ДокументСсылка, НовыеРеквизиты, ПерепровестиДокумент);
			
			Если ЗначениеЗаполнено(ОшибкаОбновления) Тогда
				
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ОшибкаОбновления;
				СообщениеПользователю.Сообщить();
				
				Результат.ОписаниеОшибки = "Реквизиты """ + ОбновитьДанныеДокумента_РеквизитыСтрокой(НовыеРеквизиты) + """ не совпадают с сопоставляемым документом из " + ПолучитьСловарь().КраткоеНаименованиеСистемыРодительныйПадеж + "!";
				
			Иначе
				Результат.ДанныеОбновлены = Истина;
			КонецЕсли;

		КонецЕсли; 
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ОбновитьДанныеДокумента_РеквизитыСтрокой(НовыеРеквизиты)
		
		Результат 	= "";
		Разделитель = "";
		
		Для каждого КлючИЗначение Из НовыеРеквизиты Цикл
			Результат = Результат + Разделитель + КлючИЗначение.Ключ;
			Разделитель = ", ";
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ОбновитьДанныеДокумента_ОбновитьДокумент(ДокументСсылка, НовыеРеквизиты, ПерепровестиДокумент = Ложь, Отказ = Ложь)
		
		Результат = "";
		
		Попытка
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
			Для каждого КлючИЗначение Из НовыеРеквизиты Цикл
				ДокументОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЦикла; 
			
			Если ПерепровестиДокумент И ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать();
			КонецЕсли;
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			Результат = "Не удалось обновить реквизиты """ + ОбновитьДанныеДокумента_РеквизитыСтрокой(НовыеРеквизиты) + """ " + ДокументСсылка + ", по причине: " +Символы.ПС + ОписаниеОшибки;
			
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	// Признак того, что применяется обратное обложение НДС (п. 8 ст. 161 НК РФ)
	//
	// Параметры:
	//  TaxRate - Строка - Значение свойства TaxRate объекта <Имя коллекции>Item
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если НДС исчисляется налоговым агентом
	//
	Функция НДСИсчисляетсяНалоговымАгентом(Знач TaxRate) Экспорт 
		
		Возврат ВРег(TaxRate) = ВРег("ИсчНалАг");
		
	КонецФункции
	
	// Проверяет, поддерживается ли в текущей конфигурации покупка товаров с 
	// с обратным обложением НДС (сырые шкуры, металлолом и др.), когда
	// организация должна выступать налоговым агентом (п. 8 ст. 161 НК РФ)
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если поддерживается ставка "НДС исчисляется налоговым агентом"
	//
	Функция КонфигурацияПоддерживаетОбратноеОбложениеНДСПриПокупке() Экспорт 
		
		ОписаниеКонфигурации = СведенияОКонфигурации();
		ТекущаяКонфигурация	 = ОписаниеКонфигурации.БазоваяПодсистема;
		ВерсияКонфигурации	 = ОписаниеКонфигурации.ВерсияБазовойПодсистемы;
		
		Если Лев(ВерсияКонфигурации, 3) = "2.2" Тогда 
			УточнениеРедакции = "22";
		КонецЕсли;
		
		ВерсияУП22 		= "2.2.4.221";
		ВерсияКА22 		= "2.2.4.221";
		ВерсияУП 		= "2.4.3.144";
		ВерсияКА 		= "2.4.3.144";
		ВерсияБПКОРП 	= "3.0.60.1";		
		
		ПоддерживаемыеРедакции = Новый Соответствие;
		ПоддерживаемыеРедакции.Вставить("УправлениеПредприятием22"	, ВерсияУП22);
		ПоддерживаемыеРедакции.Вставить("КомплекснаяАвтоматизация22", ВерсияКА22);
		ПоддерживаемыеРедакции.Вставить("УправлениеПредприятием"	, ВерсияУП);
		ПоддерживаемыеРедакции.Вставить("КомплекснаяАвтоматизация"	, ВерсияКА);
		ПоддерживаемыеРедакции.Вставить("БухгалтерияПредприятияКОРП", ВерсияБПКОРП);
		
		МинимальнаяВерсия = ПоддерживаемыеРедакции[ТекущаяКонфигурация+УточнениеРедакции];
		
		Результат = Ложь;
		
		Если ЗначениеЗаполнено(МинимальнаяВерсия) И СравнитьВерсии(ВерсияКонфигурации, МинимальнаяВерсия) >= 0 Тогда 
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ЗначениеСвойстваЭлементаXmlTorg12(XmlTorg12_Item, ИмяСвойства) Экспорт
		
		ТипПараметра = ТипЗнч(XmlTorg12_Item);
		
		Если ТипПараметра = Тип("СписокЗначений") И XmlTorg12_Item.Количество() > 0 Тогда 
			ДанныеЭлементаXmlTorg12 = XmlTorg12_Item[0].Значение;
		ИначеЕсли ТипПараметра = Тип("Структура") Тогда 
			ДанныеЭлементаXmlTorg12 = XmlTorg12_Item;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЭлементаXmlTorg12) <> Тип("Структура") Тогда 
			ОписаниеОш = НСтр("ru = 'Ошибка при вызове метода <ЗначениеСвойстваЭлементаXmlTorg12> модуля:
                               |Неправильный тип <%ТипПараметра%> параметра <XmlTorg12_Item>'");
			ОписаниеОш = СтрЗаменить(ОписаниеОш, "%ТипПараметра%", ТипПараметра);
			ВызватьИсключение ОписаниеОш;
		КонецЕсли;
		
		ЗначениеСвойства = Неопределено;
		
		Если ДанныеЭлементаXmlTorg12.Свойство(ИмяСвойства) Тогда 
			ЗначениеСвойства = ДанныеЭлементаXmlTorg12[ИмяСвойства];
		КонецЕсли;
		
		Возврат ЗначениеСвойства;
		
	КонецФункции
	
	Функция ОпределитьСтавкуНДС_1С_ПоСтавкеНДС_ДД(Знач TaxRate) Экспорт
		
		Результат = Неопределено;
		
		Если ЗначениеЗаполнено(TaxRate) Тогда
			
			Если ВРег(TaxRate) = ВРег("ИсчНалАг") Тогда // НДС исчисляется налоговым агентом
				TaxRate = "ИсчНалАг";
			ИначеЕсли НЕ ВРег(TaxRate) = "БЕЗ НДС" Тогда
				TaxRate = ?(Найти(TaxRate, "/") = 0, Лев(TaxRate, 2), Лев(TaxRate, 6));
				TaxRate = СтрЗаменить(TaxRate, "%", "");
			КонецЕсли;
			
			Если ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				Результат = СтавкаНДС_1С_ПоСправочнику(TaxRate);	
			Иначе
				Результат = СтавкаНДС_1С_ПоПеречислению(TaxRate);	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СтавкаНДС_1С_ПоПеречислению(Знач TaxRate)
		
		Результат = Неопределено;
		
		Если ВРег(TaxRate) = "БЕЗ НДС" Тогда
			
			Результат = Перечисления.СтавкиНДС.БезНДС;
			
		ИначеЕсли TaxRate = "0" Тогда
			
			Результат = Перечисления.СтавкиНДС.НДС0;
			
		ИначеЕсли TaxRate = "10" Тогда
			
			Результат = Перечисления.СтавкиНДС.НДС10;
			
		ИначеЕсли TaxRate = "10/110" Тогда
			
			Результат = Перечисления.СтавкиНДС.НДС10_110;
			
		ИначеЕсли TaxRate = "18" Тогда
			
			Результат = Перечисления.СтавкиНДС.НДС18;
			
		ИначеЕсли TaxRate = "18/118" Тогда
			
			Результат = Перечисления.СтавкиНДС.НДС18_118;
			
		ИначеЕсли TaxRate = "20" Тогда
			
			Результат = Перечисления.СтавкиНДС.НДС20;
			
		ИначеЕсли TaxRate = "20/120" Тогда
			
			Результат = Перечисления.СтавкиНДС.НДС20_120;
			
		КонецЕсли;
		
		Возврат Результат;
				
	КонецФункции
	
	Функция СтавкаНДС_1С_ПоСправочнику(Знач TaxRate)
		
		ТекстУсловия = "";
		
		Если ВРег(TaxRate) = "БЕЗ НДС" Тогда
			ТекстУсловия = "Наименование ПОДОБНО ""Без НДС"""; 
		ИначеЕсли TaxRate = "0" Тогда
			ТекстУсловия = "Наименование ПОДОБНО ""0\%"" СПЕЦСИМВОЛ ""\"" И Ставка = 0"; 
		ИначеЕсли TaxRate = "10" Тогда
			ТекстУсловия = "НЕ Наименование ПОДОБНО ""%/%"" И Ставка = 10"; 
		ИначеЕсли TaxRate = "10/110" Тогда
			ТекстУсловия = "Наименование ПОДОБНО ""%/%"" И Ставка = 10"; 
		ИначеЕсли TaxRate = "18" Тогда
			ТекстУсловия = "НЕ Наименование ПОДОБНО ""%/%"" И Ставка = 18"; 
		ИначеЕсли TaxRate = "18/118" Тогда
			ТекстУсловия = "Наименование ПОДОБНО ""%/%"" И Ставка = 18";
		ИначеЕсли TaxRate = "20" Тогда
			ТекстУсловия = "НЕ Наименование ПОДОБНО ""%/%"" И Ставка = 20";
		ИначеЕсли TaxRate = "20/120" Тогда
			ТекстУсловия = "Наименование ПОДОБНО ""%/%"" И Ставка = 20";
		КонецЕсли;
					
		Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	СтавкиНДС.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СтавкиНДС КАК СтавкиНДС
				|ГДЕ " + ТекстУсловия; 
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Возврат Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецФункции
	
	Функция ОпределитьСтавкуНДСПоУслуге(СуммаБезНДС, СуммаНДС) Экспорт
		
		Если СуммаБезНДС = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		РасчетнаяСтавка = 100 * СуммаНДС / СуммаБезНДС;
		Если РасчетнаяСтавка < 5 Тогда
			Возврат "0";
		ИначеЕсли РасчетнаяСтавка < 14 Тогда
			Возврат "10";
		ИначеЕсли РасчетнаяСтавка < 19 Тогда
			Возврат "18";	
		Иначе
			Возврат "20";
		КонецЕсли;
		
	КонецФункции
	
	Функция ЧислоИзЗначенияОтКомпоненты(Значение) Экспорт
		
		Результат = 0;
		
		Если ЗначениеЗаполнено(Значение) И НРег(Значение) <> "без ндс" Тогда
			Результат = Число(Значение);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьЕдиницуИзмерения(КодЕИ, НаименованиеЕИ, Номенклатура) Экспорт
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Запрос= Новый Запрос(
			"ВЫБРАТЬ
			|	Т.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК Т
			|ГДЕ
			|	Т.Наименование = &Наименование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Ссылка
			|ИЗ
			|	Справочник.ЕдиницыИзмерения КАК Т
			|ГДЕ
			|	Т.Код = &Код
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)");
			
			Запрос.УстановитьПараметр("Наименование", НаименованиеЕИ);
			Запрос.УстановитьПараметр("Код", КодЕИ);

			Если МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.УпаковкиЕдиницыИзмерения") Тогда
				Запрос.Текст= СтрЗаменить(Запрос.Текст, "Справочник.ЕдиницыИзмерения", "Справочник.УпаковкиЕдиницыИзмерения");
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
			
		Иначе
			
			Выборка = Справочники.КлассификаторЕдиницИзмерения.Выбрать(,, Новый Структура("Наименование", НаименованиеЕИ));
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
			Выборка = Справочники.КлассификаторЕдиницИзмерения.Выбрать(,, Новый Структура("Код", КодЕИ));
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
			Возврат Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецФункции
	
	Функция ПолучитьСписокВидовДоговоров(ДоговораПродажи= Ложь) Экспорт
		
		//Закладка делал вид операции
		СписокВидовДоговоров=	Новый СписокЗначений;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"), "С поставщиком");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом"), "С комитентом");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"), "С комиссионером");
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Если ДоговораПродажи Тогда 
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"), "С покупателем");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"), "С комиссионером (агентом) на продажу");
			Иначе 	
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"), "С поставщиком");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"), "С комитентом (принципалом) на продажу");
				СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"), "С комиссионером (агентом) на закупку");
			КонецЕсли;
			
		ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПоставщиком"), 		"С поставщиком");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомитентом"), 		"С комитентом");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СКомиссионером"), 	"С комиссионером");
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоров.СПокупателем"), 		"С покупателем");
			
		Иначе
			СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"), "С поставщиком");
		КонецЕсли;
		
		Возврат	СписокВидовДоговоров;
		
	КонецФункции
	
	Функция ПолучитьСписокАссоциированныхКонтрагентовДиадок() Экспорт
		
		Запрос = новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ  различные
		|	ДополнительныеСведения.Объект как Контрагент
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект  ССЫЛКА Справочник.Контрагенты
		|	И ДополнительныеСведения.Значение <> """"
		|	И ПОДСТРОКА(ДополнительныеСведения.Свойство.Наименование, 1, " 
		+ СтрДлина(ИдентификаторСвойстваЯщикКонтрагентаПрефикс()) 
		+ ") = &НаименованиеСвойстваПрефикс";
		Запрос.УстановитьПараметр("НаименованиеСвойстваПрефикс", ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
		сп = новый СписокЗначений;
		сп.ЗагрузитьЗначения(мас);
		
		Возврат сп;
		
	КонецФункции
	
	Функция ПолучитьДанныеПоДоговору(ДоговорКонтрагента) Экспорт
		
		ТребуемыеРеквизиты = Новый Структура;
		ТребуемыеРеквизиты.Вставить("БанковскийСчет");
		ТребуемыеРеквизиты.Вставить("БанковскийСчетКонтрагента");
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ГруппаФинансовогоУчета", ДоговорКонтрагента.Метаданные()) Тогда
			ТребуемыеРеквизиты.Вставить("ГруппаФинансовогоУчета");
		КонецЕсли;
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, ТребуемыеРеквизиты);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад) Экспорт
		
		Возврат Вычислить("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад)");
		
	КонецФункции
	
	Функция БухгалтерскийУчетВызовСервераПовтИспПолучитьСвойстваСчета(СчетУчета) Экспорт
		
		Возврат Вычислить("БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетУчета)");
		
	КонецФункции
		
	Функция ПолучитьСчетаРасчетов(Организация, Контрагент, ДоговорКонтрагента) Экспорт
		
		СчетаРасчетов = Вычислить("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента)");
		ВидДоговора = ДоговорКонтрагента.ВидДоговора;
		
		Результат = новый Структура("Поставки, Авансы");
		Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")  тогда
			Результат.Поставки = СчетаРасчетов.СчетРасчетовСКомитентом;
		ИначеЕсли 	ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ВПереработку")  тогда
			Результат.Поставки = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
		Иначе 
			Результат.Поставки =  СчетаРасчетов.СчетРасчетов
		КонецЕсли;
		
		Результат.Авансы = СчетаРасчетов.СчетАвансов;
		
		Возврат результат;
		
	КонецФункции	
	
	Функция ПредставлениеДокументов() Экспорт
		
		// Будем определять наименование документа, в зависимости от конфигурации
		
		Результат = Новый Структура;
		
		Если НЕ Метаданные.Документы.Найти("СчетФактураВыданный") = Неопределено Тогда
			Результат.Вставить("СчетФактураВыданный", "СчетФактураВыданный");
		Иначе
			Результат.Вставить("СчетФактураВыданный", "СчетФактура");
		КонецЕсли;
		
		Если НЕ Метаданные.Документы.Найти("СчетФактураВыданныйАванс") = Неопределено Тогда // УТ11_ЕРП20
			Результат.Вставить("СчетФактураВыданныйНаАванс", "СчетФактураВыданныйАванс");
		Иначе
			Результат.Вставить("СчетФактураВыданныйНаАванс", ""); 
		КонецЕсли;
		
		Если НЕ Метаданные.Документы.Найти("РеализацияТоваровУслуг") = Неопределено Тогда
			Результат.Вставить("РеализацияТоваровУслуг", "РеализацияТоваровУслуг");
		ИначеЕсли НЕ Метаданные.Документы.Найти("НакладнаяНаРеализациюТорг12") = Неопределено Тогда // БГУ
			Результат.Вставить("РеализацияТоваровУслуг", "НакладнаяНаРеализациюТорг12");
		Иначе
			Результат.Вставить("РеализацияТоваровУслуг", "РасходнаяНакладная");
		КонецЕсли;
		
		Если НЕ Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") = Неопределено Тогда // УТ, КА и ЕРП ред 2.4
			Результат.Вставить("ПоступлениеТоваровУслуг", "ПриобретениеТоваровУслуг");
		ИначеЕсли НЕ Метаданные.Документы.Найти("ПриходнаяНакладная") = Неопределено Тогда // УНФ 1.6
			Результат.Вставить("ПоступлениеТоваровУслуг", "ПриходнаяНакладная");
		Иначе
			Результат.Вставить("ПоступлениеТоваровУслуг", "ПоступлениеТоваровУслуг");
		КонецЕсли;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда // КА и ЕРП ред 2.4 
			Если НЕ Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов") = Неопределено Тогда 
				Результат.Вставить("ПоступлениеУслугПрочихАктивов", "ПриобретениеУслугПрочихАктивов");
			Иначе
				Результат.Вставить("ПоступлениеУслугПрочихАктивов", "ПоступлениеУслугПрочихАктивов");
			КонецЕсли;
			Если НЕ Метаданные.Документы.Найти("КорректировкаПриобретения") = Неопределено Тогда
				Результат.Вставить("КорректировкаПоступления", "КорректировкаПриобретения");
			Иначе
				Результат.Вставить("КорректировкаПоступления", "КорректировкаПоступления");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Метаданные.Документы.Найти("ВозвратТоваровОтПокупателя") = Неопределено Тогда // БП3.0
			Результат.Вставить("ВозвратТоваровОтПокупателя", "ВозвратТоваровОтПокупателя");
		ИначеЕсли НЕ Метаданные.Документы.Найти("ВозвратТоваровОтКлиента") = Неопределено Тогда // УТ11
			Результат.Вставить("ВозвратТоваровОтПокупателя", "ВозвратТоваровОтКлиента");
		КонецЕсли;
				
		Возврат Результат;
		
	КонецФункции // ПредставлениеДокументов()
	
//} ИНТЕГРАЦИЯ

//{ УПРАВЛЕНИЕ НАСТРОЙКАМИ

	Функция НастройкиИнтернетПодключения() Экспорт
		
		НастройкиПрокси	 = ПолучитьНастройкиПрокси();
		КлючРазработчика = КлючРазработчика();
		АдресАПИ		 = АдресАПИ();
		
		Результат = Новый Структура;
		Результат.Вставить("НастройкиПрокси"	, НастройкиПрокси);
		Результат.Вставить("КлючРазработчика"	, КлючРазработчика);
		Результат.Вставить("АдресАПИ"			, АдресАпи);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция Новый_ЭДОНастройкиОрганизации()
		
		Результат = Новый Структура;
		
		// Формирование Тогр12, Акт
		Результат.Вставить("ПечатнаяФормаДляТоваров");
		Результат.Вставить("ПечатнаяФормаДляУслуг");
		
		// Формат документов на отправку по умолчанию
		Результат.Вставить("ФормироватьУПД");
		
		// Счет на оплату
		Результат.Вставить("ФормироватьСчетНаОсновании");
		Результат.Вставить("СтандартнаяФормаСчетаНаОплату");
		Результат.Вставить("ВнешняяПечатнаяФормаСчета");
		
		// Прочие документы
		Результат.Вставить("СпособФормированияАкта");
		Результат.Вставить("ВнешняяПечатнаяФормаАкта");
		
		Результат.Вставить("СпособФормированияАктаСверки");
		Результат.Вставить("ВнешняяПечатнаяФормаАктаСверки");
		
		Результат.Вставить("МассивДополнительныхВПФ");
				
		// Дополнительные параметры
		Результат.Вставить("ШифроватьДокументы");
		Результат.Вставить("ОтправлятьНеПроведенные");
		Результат.Вставить("ПодставлятьКППГрузоотправителя");
		Результат.Вставить("УказыватьОтсутствиеОснованияУПД");
		Результат.Вставить("ТекстКомментарияДиадок");
		
		Возврат Результат;
		
	КонецФункции
	
	// Получает настройки организации, связанные с ЭДО
	// Возвращаемое значение:
	//	Структура	- см. метод "Новый_ЭДОНастройкиОрганизации"
	Функция НастройкиОрганизации(Организация) Экспорт
		
		Результат = Новый_ЭДОНастройкиОрганизации();
		
		ПечатнаяФормаДляТоваров = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляТоваров());
		Результат.ПечатнаяФормаДляТоваров = ?(ЗначениеЗаполнено(ПечатнаяФормаДляТоваров), ПечатнаяФормаДляТоваров, "Торг-12");
		
		ПечатнаяФормаДляУслуг = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляУслуг());
		Результат.ПечатнаяФормаДляУслуг = ?(ЗначениеЗаполнено(ПечатнаяФормаДляУслуг), ПечатнаяФормаДляУслуг, "Акт");
		
		Результат.ОтправлятьНеПроведенные	= ПолучитьЗначениеСвойства(Организация,
																		ИдентификаторСвойстваОтправлятьНеПроведенные());
		Результат.ФормироватьУПД			= ПолучитьЗначениеСвойства(Организация,
																		ИдентификаторСвойстваФормироватьУПД());
		Результат.ШифроватьДокументы		= ПолучитьЗначениеСвойства(Организация,
																		ИдентификаторСвойстваШифроватьДокументы());
		
		НастройкиСчета = НастройкиОрганизацииСчет(Организация);
		Результат.ФормироватьСчетНаОсновании	= НастройкиСчета.ФормироватьСчетНаОсновании;
		Результат.СтандартнаяФормаСчетаНаОплату	= НастройкиСчета.СтандартнаяФормаСчетаНаОплату;
		Результат.ВнешняяПечатнаяФормаСчета 	= НастройкиСчета.ВнешняяПечатнаяФормаСчета;
		
		НастройкиАкта = НастройкиОрганизацииАктВыполненныхРабот(Организация);
		Результат.ВнешняяПечатнаяФормаАкта 	= НастройкиАкта.ВнешняяПечатнаяФормаАкта;
		Результат.СпособФормированияАкта	= НастройкиАкта.СпособФормированияАкта;
		
		НастройкиАктаСверки = НастройкиОрганизацииАктСверки(Организация);
		Результат.ВнешняяПечатнаяФормаАктаСверки	= НастройкиАктаСверки.ВнешняяПечатнаяФормаАктаСверки;
		Результат.СпособФормированияАктаСверки		= НастройкиАктаСверки.СпособФормированияАктаСверки;
						
		Результат.МассивДополнительныхВПФ			= МассивДополнительныхВПФ(Организация);
		Результат.ПодставлятьКППГрузоотправителя	= ПолучитьЗначениеСвойства(Организация,
																				ИдентификаторСвойстваПодставлятьКППГрузоотправителя());
																				
		Результат.УказыватьОтсутствиеОснованияУПД	= ПолучитьЗначениеСвойства(Организация,
																				ИдентификаторСвойстваУказыватьОтсутствиеОснованияУПД());
																						
		Результат.ТекстКомментарияДиадок			= ПолучитьЗначениеСвойства(Организация,
																				ИдентификатрСвойстваТекстКомментарияДиадок());
		Возврат Результат;
		
	КонецФункции
	
	Функция НастройкиОрганизацииСчет(Организация)
		
		ФормироватьНаОсновании = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваФормироватьСчетНаОсновании());
		
		СтандартнаяФорма = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваСтандартнаяФормаСчетаНаОплату());
		
		ИДВнешнейПечатнойФормы = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		
		Если ЗначениеЗаполнено(ИДВнешнейПечатнойФормы) Тогда
			НовыйУникальныйИД		= Новый УникальныйИдентификатор(ИДВнешнейПечатнойФормы);
			ВнешняяПечатнаяФорма	= Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(НовыйУникальныйИД);
		Иначе
			ВнешняяПечатнаяФорма 	= Неопределено;
		КонецЕсли;
		
		Результат = Новый Структура;
		
		Результат.Вставить("ФормироватьСчетНаОсновании"		, ФормироватьНаОсновании);
		Результат.Вставить("СтандартнаяФормаСчетаНаОплату"	, СтандартнаяФорма);
		Результат.Вставить("ВнешняяПечатнаяФормаСчета"		, ВнешняяПечатнаяФорма);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция НастройкиОрганизацииАктВыполненныхРабот(Организация)
		
		ИДВнешнейПечатнойФормы = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		
		Если ЗначениеЗаполнено(ИДВнешнейПечатнойФормы) Тогда
			НовыйУникальныйИД			= Новый УникальныйИдентификатор(ИДВнешнейПечатнойФормы);
			ВнешняяПечатнаяФормаАкта 	= Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(НовыйУникальныйИД);
			СпособФормированияАкта 		= 1;  // принудительно заставим формировать внешнюю печатную форму
		Иначе
			ВнешняяПечатнаяФормаАкта 	= Неопределено;
			СпособФормированияАкта 		= ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваСпособФормированияАкта());
		КонецЕсли;
				
		Результат = Новый Структура;
		
		Результат.Вставить("ВнешняяПечатнаяФормаАкта"	, ВнешняяПечатнаяФормаАкта);
		Результат.Вставить("СпособФормированияАкта"		, СпособФормированияАкта);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция НастройкиОрганизацииАктСверки(Организация)
		
		ИДВнешнейПечатнойФормы = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки());
		
		Если ЗначениеЗаполнено(ИДВнешнейПечатнойФормы) Тогда
			НовыйУникальныйИД		= Новый УникальныйИдентификатор(ИДВнешнейПечатнойФормы);
			ВнешняяПечатнаяФорма 	= Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(НовыйУникальныйИД);
			СпособФормирования		= 1;  // принудительно заставим формировать внешнюю печатную форму
		Иначе
			ВнешняяПечатнаяФорма	= Неопределено;
			СпособФормирования		= ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваСпособФормированияАктаСверки());
		КонецЕсли;
				
		Результат = Новый Структура;
		
		Результат.Вставить("ВнешняяПечатнаяФормаАктаСверки"	, ВнешняяПечатнаяФорма);
		Результат.Вставить("СпособФормированияАктаСверки"	, СпособФормирования);
		
		Возврат Результат;
		
	КонецФункции

	Процедура УстановитьНастройкиОрганизации(Организация, НастройкиОрганизации) Экспорт
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляТоваров(), , НастройкиОрганизации.ПечатнаяФормаДляТоваров);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПечатнаяФормаДляУслуг(), , НастройкиОрганизации.ПечатнаяФормаДляУслуг);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваОтправлятьНеПроведенные(), , НастройкиОрганизации.ОтправлятьНеПроведенные);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваФормироватьУПД(), , НастройкиОрганизации.ФормироватьУПД);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваШифроватьДокументы(), , НастройкиОрганизации.ШифроватьДокументы);

		Если ЗначениеЗаполнено(НастройкиОрганизации.ВнешняяПечатнаяФормаСчета) Тогда
			УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета(), , НастройкиОрганизации.ВнешняяПечатнаяФормаСчета.УникальныйИдентификатор());
		Иначе
			УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета(), , "");
		КонецЕсли;
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваФормироватьСчетНаОсновании(), , НастройкиОрганизации.ФормироватьСчетНаОсновании);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваСтандартнаяФормаСчетаНаОплату(), , НастройкиОрганизации.СтандартнаяФормаСчетаНаОплату);
		
		Если ЗначениеЗаполнено(НастройкиОрганизации.ВнешняяПечатнаяФормаАкта) Тогда
			УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта(), , НастройкиОрганизации.ВнешняяПечатнаяФормаАкта.УникальныйИдентификатор());
		Иначе
			УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта(), , "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиОрганизации.ВнешняяПечатнаяФормаАктаСверки) Тогда
			УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки(), , НастройкиОрганизации.ВнешняяПечатнаяФормаАктаСверки.УникальныйИдентификатор());
		Иначе
			УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки(), , "");
		КонецЕсли;
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваСпособФормированияАкта(), , НастройкиОрганизации.СпособФормированияАкта);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваСпособФормированияАктаСверки(), , НастройкиОрганизации.СпособФормированияАктаСверки);
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПодставлятьКППГрузоотправителя(), , НастройкиОрганизации.ПодставлятьКППГрузоотправителя);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваУказыватьОтсутствиеОснованияУПД(), , НастройкиОрганизации.УказыватьОтсутствиеОснованияУПД);
		УстановитьЗначениеСвойства(Организация, ИдентификатрСвойстваТекстКомментарияДиадок(), , НастройкиОрганизации.ТекстКомментарияДиадок);
		
		// Дополнительные внешние печатные формы
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваСписокДопВПФ(),,НастройкаСписокДопВПФ(НастройкиОрганизации.МассивДополнительныхВПФ));
		
	КонецПроцедуры
	
	Функция МассивДополнительныхВПФ(Организация) Экспорт
		
		МассивВПФ = Новый Массив;
		НомераВПФ = Новый Массив;
		
		СписокДопВПФ = ПолучитьЗначениеСвойства(Организация, ИдентификаторСвойстваСписокДопВПФ());
		РазмерСписка = СтрДлина(СписокДопВПФ);
		
		Для Сч = 1 По РазмерСписка цикл 
			Если Сред(СписокДопВПФ, Сч, 1) = "1" Тогда
				НомераВПФ.Добавить(Формат(Сч, "ЧГ=0"));
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос("ВЫБРАТЬ Объект ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Свойство = &СвойствоНомерВПФ И Значение В (&НомераВПФ)");
		Запрос.УстановитьПараметр("СвойствоНомерВПФ", НайтиСвойство(ИдентификаторСвойстваНомерВПФ()));
		Запрос.УстановитьПараметр("НомераВПФ" 		, НомераВПФ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивВПФ.Добавить(Выборка.Объект);
		КонецЦикла;	
		
		Возврат МассивВПФ;
		
	КонецФункции
	
	Функция ПорядковыйНомерДопВПФ(ВПФ)
		
		// Поиск номера в базе
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Значение ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Объект = &ВПФ И Свойство = &СвойствоНомерВПФ И Значение <> """"");
		Запрос.УстановитьПараметр("СвойствоНомерВПФ", НайтиСвойство(ИдентификаторСвойстваНомерВПФ()));
		Запрос.УстановитьПараметр("ВПФ", ВПФ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать(); Выборка.Следующий();
			Возврат Число(Выборка.Значение);
		КонецЕсли;
		
		// Если не нашли номер в базе, присваиваем следующий по порядку номер и записываем его в базу
		Запрос.Текст = "ВЫБРАТЬ Значение ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Свойство = &СвойствоНомерВПФ И Значение <> """"";
		Запрос.УстановитьПараметр("СвойствоНомерВПФ", НайтиСвойство(ИдентификаторСвойстваНомерВПФ()));
		
		ПорядковыйНомерВПФ = 0;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ПорядковыйНомерВПФ = Макс(Число(Выборка.Значение), ПорядковыйНомерВПФ);
		КонецЦикла;
		
		ПорядковыйНомерВПФ = ПорядковыйНомерВПФ + 1;
		
		УстановитьЗначениеСвойства(ВПФ, ИдентификаторСвойстваНомерВПФ(),,Формат(ПорядковыйНомерВПФ, "ЧГ=0"));
		
		Возврат ПорядковыйНомерВПФ;
		
	КонецФункции
	
	Функция НастройкаСписокДопВПФ(МассивДополнительныхВПФ)
		
		Результат = "";
		
		НомераВПФ = Новый СписокЗначений;
		
		Для каждого ВПФ Из МассивДополнительныхВПФ Цикл
			НомераВПФ.Добавить(ПорядковыйНомерДопВПФ(ВПФ));
		КонецЦикла; 
		
		НомераВПФ.СортироватьПоЗначению();
		
		РазмерСписка = 0;
		
		Для каждого Элемент Из НомераВПФ Цикл
			
			НомерВПФ = Элемент.Значение;
			
			КоличествоНулей = НомерВПФ - РазмерСписка - 1;
			
			Результат = Результат + ?(КоличествоНулей > 0, Формат(0, "ЧЦ=" + (КоличествоНулей) + "; ЧН=; ЧВН=; ЧГ=0"), "") + "1";
			
			РазмерСписка = НомерВПФ;
		
		КонецЦикла; 
		
		Возврат Результат;
		
	КонецФункции

	
	Функция ПолучитьВозможныеПланыОбменаДляПередачиНастроекПользователяИСвойствОбъектов()
		
		НеобходимыеДляРаботыПВХ = ПолучитьНеобходимыеДляРаботыПВХ();
		
		ВозможныеПланыОбмена = Новый Массив;
		Для каждого ПланОбмена Из ПланыОбмена Цикл
			ПланОбменаСодержитВсеНеобходимыеТипы = Истина;
			Для каждого необходимыйТип Из НеобходимыеДляРаботыПВХ Цикл
				Если НЕ планОбмена.ПолучитьСсылку().Метаданные().Состав.Содержит(необходимыйТип) Тогда
					ПланОбменаСодержитВсеНеобходимыеТипы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПланОбменаСодержитВсеНеобходимыеТипы Тогда
				ВозможныеПланыОбмена.Добавить(ПланОбмена);
			КонецЕсли;
		КонецЦикла;
		
		Возврат ВозможныеПланыОбмена;
		
	КонецФункции
	
	Функция ПолучитьНастройкиПользователя(МассивНаименованийНастроек) Экспорт
		
		//На входе массив
		Результат = Новый Структура;
		Для Каждого Наименование из МассивНаименованийНастроек Цикл
			Настройка = ПолучитьНастройкуПользователя(Наименование);
			Результат.Вставить(Наименование, Настройка);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьНастройкуПользователя(Наименование) Экспорт
		
		Если ПустаяСтрока(Наименование) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НастройкаСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Наименование);
		Если НЕ ЗначениеЗаполнено(НастройкаСсылка) тогда 
			Возврат Неопределено;
		КонецЕсли; 
		
		МЗ = ПолучитьМЗНастройкиПОльзователя(ПолучитьТекущегоПользователя(), НастройкаСсылка);
		Если МЗ.Выбран() Тогда
			Возврат МЗ.Значение;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
	
	Функция УстановитьНастройкиПользователей(СтруктураНастроек) Экспорт
		
		Для Каждого Стр из СтруктураНастроек Цикл
			УстановитьНастройкуПользователя(Стр.Ключ, Стр.Значение);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецФункции
	
	Процедура УстановитьНастройкуПользователя(Наименование, Значение) Экспорт
		
		Если ПустаяСтрока(Наименование) Тогда
			Возврат;
		КонецЕсли;
		
		НастройкаСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(Наименование);
		Если НЕ ЗначениеЗаполнено(НастройкаСсылка) тогда 
			
			Если ПустаяСтрока(Значение) Тогда
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение "Запись настройки пользователя:""" + Наименование + """ невозможна. Настройка не создана";
			
		КонецЕсли; 
		
		МЗ = ПолучитьМЗНастройкиПОльзователя(ПолучитьТекущегоПользователя(), НастройкаСсылка);
		Если НЕ МЗ.Выбран() Тогда
			МЗ.Объект = ПолучитьТекущегоПользователя();
			МЗ.Свойство = НастройкаСсылка;
		КонецЕсли;
		МЗ.Значение = Значение;
		МЗ.Записать();
		
	КонецПроцедуры
	
	Функция ПроверитьНаличиеНастроекПользователя(ВозможныеНастройкиПользователя) Экспорт
		
		НенайденныеНастройки = Новый Массив;
		Для каждого ОписаниеНастройки Из ВозможныеНастройкиПользователя Цикл
			Если НайтиСвойство(ОписаниеНастройки.Ключ) = Неопределено Тогда
				НенайденныеНастройки.Добавить(ОписаниеНастройки);
			КонецЕсли;
		КонецЦикла;
		
		Возврат НенайденныеНастройки;
		
	КонецФункции
	
	Функция ПолучитьМЗНастройкиПОльзователя(Пользователь, НастройкаСсылка)
		
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Объект = Пользователь;
		МЗ.Свойство = НастройкаСсылка;
		МЗ.Прочитать();
		
		Возврат МЗ;
		
	КонецФункции
	
	Функция ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок()   Экспорт
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		ГруппаНастроекСсылка= планыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Параметры подсистемы " + ВРег(СловарьWL.НаименованиеСистемы));
		
		Если ЗначениеЗаполнено(ГруппаНастроекСсылка) Тогда 
			Возврат ГруппаНастроекСсылка;
		КонецЕсли;
		
		ГруппаНастроекОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьГруппу();
		ГруппаНастроекОбъект.Наименование =  "Параметры подсистемы " + ВРег(СловарьWL.НаименованиеСистемы);
		ГруппаНастроекОбъект.УстановитьНовыйКод();
		ГруппаНастроекОбъект.ОбменДанными.Загрузка = Истина;
		ГруппаНастроекОбъект.Записать();
		
		Возврат ГруппаНастроекОбъект.Ссылка;
		
	КонецФункции
	
	Функция ПолучитьНастройкиПрокси() Экспорт
		
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить("ДиадокНастройкиПрокси");
		МассивНастроек.Добавить("ДиадокАдресПроксиСервера");
		МассивНастроек.Добавить("ДиадокПользовательПроксиСервера");
		МассивНастроек.Добавить("ДиадокПарольПроксиСервера");
		
		НастройкиПрокси = ПолучитьНастройкиПользователя(МассивНастроек);
		
		Если ЗначениеЗаполнено(НастройкиПрокси.ДиадокНастройкиПрокси) Тогда
			ВариантИспользования = НастройкиПрокси.ДиадокНастройкиПрокси;
		Иначе
			ВариантИспользования = "ИспользоватьНастройкиIE";
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("ВариантИспользования", ВариантИспользования);
		Результат.Вставить("Адрес"	, НастройкиПрокси.ДиадокАдресПроксиСервера);
		Результат.Вставить("Логин"	, НастройкиПрокси.ДиадокПользовательПроксиСервера);
		Результат.Вставить("Пароль"	, НастройкиПрокси.ДиадокПарольПроксиСервера);
		
		Возврат Результат;
		
	КонецФункции
	
	// Обертка. Предназначена для форматирования настроек по работе с прокси сервером
	//
	// Возвращаемое значение:
	//	Структура - см. тело метода
	Функция ПараметрыПроксиСервера() Экспорт
		
		НастрокиПрокси = МетодСервера(, "ПолучитьНастройкиПрокси");
						
		ПозицияРазделителя = Найти(НастрокиПрокси.Адрес, ":");
		Если ПозицияРазделителя > 0 Тогда 
			ПортПроксиСервера	= Сред(НастрокиПрокси.Адрес, ПозицияРазделителя + 1);
			АдресПроксиСервера	= Лев(НастрокиПрокси.Адрес , ПозицияРазделителя - 1);
		Иначе
			ПортПроксиСервера	= "";
			АдресПроксиСервера	= НастрокиПрокси.Адрес;
		КонецЕсли;	
						
		Результат = Новый Структура;
		
		Результат.Вставить("ВариантИспользования"	, НастрокиПрокси.ВариантИспользования);
		Результат.Вставить("Адрес"					, АдресПроксиСервера);
		Результат.Вставить("Порт"					, ПортПроксиСервера);
		Результат.Вставить("Логин"					, НастрокиПрокси.Логин);
		Результат.Вставить("Пароль"					, НастрокиПрокси.Пароль);
		
		Возврат Результат;
		
	КонецФункции
	
	Процедура УстановитьНастройкиПрокси(НастройкиПрокси) Экспорт
		
		УстановитьНастройкуПользователя("ДиадокНастройкиПрокси", НастройкиПрокси.ВариантИспользования);
		
		Если НастройкиПрокси.ВариантИспользования = "ИспользоватьПроксиСервер" Тогда
			УстановитьНастройкуПользователя("ДиадокАдресПроксиСервера", 		НастройкиПрокси.Адрес);
			УстановитьНастройкуПользователя("ДиадокПользовательПроксиСервера", 	НастройкиПрокси.Логин);
			УстановитьНастройкуПользователя("ДиадокПарольПроксиСервера", 		НастройкиПрокси.Пароль);
		Иначе 
			УстановитьНастройкуПользователя("ДиадокАдресПроксиСервера"		 , "");
			УстановитьНастройкуПользователя("ДиадокПользовательПроксиСервера", "");
			УстановитьНастройкуПользователя("ДиадокПарольПроксиСервера"		 , "");
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ФорматыДокументовНаОтправку() Экспорт
		
		Результат = Новый Соответствие;
		
		Результат.Вставить("СФТОРГ12АКТ_820", НСтр("ru = 'СФ, ТОРГ12, АКТ в формате 820 приказа; КСФ в формате 189 приказа'"));
		Результат.Вставить("СЧФДОП_820"		, НСтр("ru = 'УПД в формате 820 приказа, УКД для комплектов передаточных документов и счетов-фактур'"));
		Результат.Вставить("СЧФ_ДОП_820"	, НСтр("ru = 'УПД в формате 820 приказа, УКД раздельно для каждого передаточного документа и счета-фактуры'"));
		
		Результат.Вставить("СФТОРГ12АКТ", НСтр("ru = 'СФ, ТОРГ12, АКТ в формате 155 приказа; КСФ в формате 189 приказа'"));
		Результат.Вставить("ТОРГ12АКТ"	, НСтр("ru = 'ТОРГ12/Акт в формате 155 приказа'"));
		Результат.Вставить("СФ"			, НСтр("ru = 'СФ в формате 155 приказа, КСФ в формате 189 приказа'"));
		Результат.Вставить("СЧФДОП"		, НСтр("ru = 'УПД в формате 155 приказа, УКД для комплектов передаточных документов и счетов-фактур'"));
		Результат.Вставить("ДОП"		, НСтр("ru = 'УПД в формате 155 приказа, УКД только для передаточных документов'"));
		Результат.Вставить("СЧФ"		, НСтр("ru = 'УПД в формате 155 приказа, УКД только для счетов-фактур'"));
		Результат.Вставить("СЧФ_ДОП"	, НСтр("ru = 'УПД в формате 155 приказа, УКД раздельно для каждого передаточного документа и счета-фактуры'"));
		Результат.Вставить("НЕТ"		, НСтр("ru = 'СФ, КСФ в устаревшем формате'"));
		
		Возврат Результат;
		
	КонецФункции
		
	Функция ФорматДокументовНаОтправкуУстаревшийФормат(ФорматДокументовНаОтправку) Экспорт
		
		Возврат
		
			ФорматДокументовНаОтправку = "НЕТ"
		ИЛИ ФорматДокументовНаОтправку = "ДОП"
		ИЛИ ФорматДокументовНаОтправку = "ТОРГ12АКТ";
		
	КонецФункции
					
//} УПРАВЛЕНИЕ НАСТРОЙКАМИ

//{ УПРАВЛЕНИЕ СВОЙСТВАМИ
	
	функция ПолучитьНазначениеСвойстваСтрокой(СвойствоСтрокой)
		Назначение =   ПолучитьВозможныеСвойстваОбъектов()[СвойствоСтрокой];
		
		если (назначение = неопределено) и (найти(СвойствоСтрокой, "ДДНомКонтр_") = 0 ) тогда
			вызватьИсключение("Неизвестное свойство объекта "+СвойствоСтрокой);
		КонецЕсли;
		
		возврат Назначение;
	КонецФункции	

	Функция СвойстваОбъектов_НайтиОбъектыПоТЗ(ТаблицаПараметров) Экспорт
		//на входе  массив структур
		Результат = Новый Массив;
		
		Сч = 0;
		Пока Сч < ТаблицаПараметров.Количество() Цикл
			Стр = ТаблицаПараметров[Сч];
			Если ПустаяСтрока(Стр.НаименованиеСвойства) ИЛИ ПустаяСтрока(Стр.НаименованиеСвойства2) Тогда
				ТаблицаПараметров.Удалить(Стр);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПараметров.НаименованиеСвойства КАК НаименованиеСвойства,
		|	ТаблицаПараметров.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ТаблицаПараметров.НаименованиеСвойства2 КАК НаименованиеСвойства2,
		|	ТаблицаПараметров.ЗначениеСвойства2 КАК ЗначениеСвойства2
		|ПОМЕСТИТЬ НаименованияИЗначенияСвойств
		|ИЗ
		|	&ТаблицаПараметров КАК ТаблицаПараметров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеСвойства2,
		|	НаименованиеСвойства2,
		|	ЗначениеСвойства,
		|	НаименованиеСвойства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка КАК СвойствоСсылка,
		|	ТаблицаПараметров.ЗначениеСвойства КАК ЗначениеСвойства,
		|	ДополнительныеРеквизитыИСведения2.Ссылка КАК СвойствоСсылка2,
		|	ТаблицаПараметров.ЗначениеСвойства2 КАК ЗначениеСвойства2
		|ПОМЕСТИТЬ СсылкиНаСвойстваИЗначенияСвойств
		|ИЗ
		|	НаименованияИЗначенияСвойств КАК ТаблицаПараметров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ПО ТаблицаПараметров.НаименованиеСвойства = ДополнительныеРеквизитыИСведения.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения2
		|		ПО ТаблицаПараметров.НаименованиеСвойства2 = ДополнительныеРеквизитыИСведения2.Наименование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СвойствоСсылка,
		|	ЗначениеСвойства2,
		|	СвойствоСсылка2,
		|	ЗначениеСвойства
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыПоСвойству1
		|ИЗ
		|	СсылкиНаСвойстваИЗначенияСвойств КАК СсылкиНаСвойстваИЗначенияСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО СсылкиНаСвойстваИЗначенияСвойств.СвойствоСсылка = ДополнительныеСведения.Свойство
		|			И СсылкиНаСвойстваИЗначенияСвойств.ЗначениеСвойства = ДополнительныеСведения.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыПоСвойству2
		|ИЗ
		|	СсылкиНаСвойстваИЗначенияСвойств КАК СсылкиНаСвойстваИЗначенияСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО СсылкиНаСвойстваИЗначенияСвойств.СвойствоСсылка2 = ДополнительныеСведения.Свойство
		|			И СсылкиНаСвойстваИЗначенияСвойств.ЗначениеСвойства2 = ДополнительныеСведения.Значение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыПоСвойству1.Объект
		|ИЗ
		|	ОбъектыПоСвойству1 КАК ОбъектыПоСвойству1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыПоСвойству2 КАК ОбъектыПоСвойству2
		|		ПО ОбъектыПоСвойству1.Объект = ОбъектыПоСвойству2.Объект";
		
		Запрос.УстановитьПараметр("ТаблицаПараметров",ТаблицаПараметров);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Объект);
		КонецЦикла;

		Возврат Результат;
	КонецФункции
	
	Функция СвойстваОбъектов_НайтиОбъект(	НаименованиеСвойства, 
											ЗначениеСвойства,
											НаименованиеСвойства2 = Неопределено,
											ЗначениеСвойства2 = Неопределено	) Экспорт
		
		Если ЗначениеЗаполнено(НаименованиеСвойства2) Тогда 
			
			Результат = НайтиОбъект(НаименованиеСвойства, 
									ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства),
									ЗначениеСвойства,
									НаименованиеСвойства2,
									ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),
									ЗначениеСвойства2);
		Иначе 
			
			Результат = НайтиОбъект(НаименованиеСвойства,
									ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства),
									ЗначениеСвойства);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	Функция СвойстваОбъектов_НайтиМассивОбъектов(НаименованиеСвойства, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
		
		Если ЗначениеЗаполнено(НаименованиеСвойства2) Тогда
			Возврат НайтиМассивОбъектов(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства, НаименованиеСвойства2, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства2),  ЗначениеСвойства2);
		Иначе 
			Возврат НайтиМассивОбъектов(НаименованиеСвойства, ПолучитьНазначениеСвойстваСтрокой(НаименованиеСвойства), ЗначениеСвойства);
		КонецЕсли;
		
	КонецФункции
	
	Функция НайтиОбъект(	НаименованиеСвойства, 
							НазначениеСвойстваСтрокой,
							ЗначениеСвойства, 
							НаименованиеСвойства2 = Неопределено, 
							НазначениеСвойстваСтрокой2 = Неопределено, 
							ЗначениеСвойства2 = Неопределено	) Экспорт
		
		Если ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НаименованиеСвойства2 <> Неопределено 
			И ПустаяСтрока(НаименованиеСвойства2) Тогда
			
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
			СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2);
			Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			СвойствоСсылка2 = Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			
			Запрос.УстановитьПараметр("Свойство"	, СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение"	, Строка(ЗначениеСвойства));
			Запрос.УстановитьПараметр("Свойство2"	, СвойствоСсылка2);
			Запрос.УстановитьПараметр("Значение2"	, Строка(ЗначениеСвойства2));
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	З.Объект,
			|	З.Значение2
			|ИЗ
			|(
			|	ВЫБРАТЬ
			|		ЗначенияСвойств.Объект,
			|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
			|	ИЗ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств2
			|		ПО
			|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
			|			И ЗначенияСвойств2.Свойство = &Свойство2
			|		ГДЕ
			|			ЗначенияСвойств.Свойство = &Свойство
			|			И ЗначенияСвойств.Значение = &Значение
			|) З
			|ГДЕ
			|	З.Значение2 = &Значение2";
			
		Иначе
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЗначенияСвойств.Объект
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|ГДЕ
			|	ЗначенияСвойств.Свойство = &Свойство
			|	И ЗначенияСвойств.Значение = &Значение";
			
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Объект;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция НайтиМассивОбъектов(НаименованиеСвойства, НазначениеСвойстваСтрокой, ЗначениеСвойства, НаименованиеСвойства2= Неопределено, НазначениеСвойстваСтрокой2= Неопределено, ЗначениеСвойства2= Неопределено) Экспорт
		
		Если ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НаименованиеСвойства2 <> Неопределено 
			И ПустаяСтрока(НаименованиеСвойства2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НаименованиеСвойства2) Тогда
			СвойствоСсылка2 = НайтиСвойство(НаименованиеСвойства2);
			Если Не ЗначениеЗаполнено(СвойствоСсылка2) Тогда
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			СвойствоСсылка2 = Неопределено;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Если ЗначениеЗаполнено(СвойствоСсылка2) Тогда
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", Строка(ЗначениеСвойства));
			Запрос.УстановитьПараметр("Свойство2", СвойствоСсылка2);
			Запрос.УстановитьПараметр("Значение2", Строка(ЗначениеСвойства2));
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	З.Объект,
			|	З.Значение2
			|ИЗ
			|(
			|	ВЫБРАТЬ
			|		ЗначенияСвойств.Объект,
			|		ЕСТЬNULL(ЗначенияСвойств2.Значение, """") Значение2
			|	ИЗ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств2
			|		ПО
			|			ЗначенияСвойств.Объект = ЗначенияСвойств2.Объект
			|			И ЗначенияСвойств2.Свойство = &Свойство2
			|		ГДЕ
			|			ЗначенияСвойств.Свойство = &Свойство
			|			И ЗначенияСвойств.Значение = &Значение
			|) З
			|ГДЕ
			|	З.Значение2 = &Значение2";
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ЗначенияСвойств.Объект
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойств
			|ГДЕ
			|	ЗначенияСвойств.Свойство = &Свойство
			|	И ЗначенияСвойств.Значение = &Значение";
			Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
			Запрос.УстановитьПараметр("Значение", ЗначениеСвойства);
		КонецЕсли;
		
		ТаблицаДанных= Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаДанных.ВыгрузитьКолонку("Объект");
		
	КонецФункции
	
	Процедура УстановитьПравильноеЗначениеФормироватьСчетНаОсновании(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваФормироватьСчетНаОсновании());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Число") Тогда
					Продолжить;
				Иначе
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
						Если ВРег(ЗаписьНабора.Значение) = "СЧЕТНАОПЛАТУ" Тогда
							МЗ.Значение=	0;
						ИначеЕсли ВРег(ЗаписьНабора.Значение) = "РЕАЛИЗАЦИЯТОВАРОВ" Тогда
							МЗ.Значение=	1;
						ИначеЕсли ВРег(ЗаписьНабора.Значение) = "НЕФОРМИРОВАТЬ" Тогда
							МЗ.Значение=	2;
						КонецЕсли;
					Иначе
						МЗ.Значение=	0;
					КонецЕсли;
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура УстановитьПравильноеЗначениеСвойстваТипаБулево(МассивПереписанныхСвойств, СвойствоСсылка)
		
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Булево") Тогда
					Продолжить;
				Иначе
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					Если ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
						Если ВРег(ЗаписьНабора.Значение) = "ДА" Тогда
							МЗ.Значение=	Истина;
						Иначе
							МЗ.Значение=	Ложь;
						КонецЕсли;
					Иначе
						МЗ.Значение=	Ложь;
					КонецЕсли;
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаАкта(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				
				НеобходимоЗаписать= Ложь;
				Если ЗначениеЗаполнено(ЗаписьНабора.Значение)
					И ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					Попытка
						УИНПечатнойФормыАкта= Новый УникальныйИдентификатор(ЗаписьНабора.Значение);
					Исключение
						УИНПечатнойФормыАкта= Неопределено;
					КонецПопытки;
					
					Если УИНПечатнойФормыАкта = Неопределено Тогда
						ЗначениеМенеджера= "";
						НеобходимоЗаписать= Истина;
					Иначе
						ВнешняяПечатнаяФорма= Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(УИНПечатнойФормыАкта);
						Если ВнешняяПечатнаяФорма.ПолучитьОбъект() = Неопределено Тогда
							ЗначениеМенеджера= "";
							НеобходимоЗаписать= Истина;	
						КонецЕсли;
					КонецЕсли;
															
				ИначеЕсли НЕ ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					ЗначениеМенеджера= "";
					НеобходимоЗаписать= Истина;
					
				КонецЕсли;
				
				Если НеобходимоЗаписать = Истина Тогда
					
					МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
					МЗ.Объект=		ЗаписьНабора.Объект;
					МЗ.Свойство=	ЗаписьНабора.Свойство;
					МЗ.Значение=	"";
					МЗ.Записать();
					
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
				КонецЕсли;
								
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаСчета(МассивПереписанныхСвойств)
		
		СвойствоСсылка=	НайтиСвойство(ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		Если ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			НаборНеправильныхНастроек=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборНеправильныхНастроек.Отбор.Свойство.Установить(СвойствоСсылка);
			НаборНеправильныхНастроек.Прочитать();
			
			Для каждого ЗаписьНабора Из НаборНеправильныхНастроек Цикл
				
				МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				МЗ.Объект=		ЗаписьНабора.Объект;
				МЗ.Свойство=	ЗаписьНабора.Свойство;
				Если ЗначениеЗаполнено(ЗаписьНабора.Значение)
					И ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					ВнешняяПечатнаяФорма=	Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗаписьНабора.Значение));
					Если ВнешняяПечатнаяФорма.ПолучитьОбъект() = Неопределено Тогда
						МЗ.Значение=	"";
						МЗ.Записать();
						МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					КонецЕсли;
					
				ИначеЕсли НЕ ТипЗнч(ЗаписьНабора.Значение) = Тип("Строка") Тогда
					
					МЗ.Значение=	"";
					МЗ.Записать();
					МассивПереписанныхСвойств.Добавить(ЗаписьНабора.Свойство);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ПолучитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой = "", ЗначениеПоУмолчанию = Неопределено) Экспорт
		
		Если НЕ ЗначениеЗаполнено(Объект) ИЛИ ПустаяСтрока(НаименованиеСвойства) Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект = &Объект
		|	И ДополнительныеСведения.Свойство = &Свойство"
		);
		
		Запрос.УстановитьПараметр("Объект", Объект); 
		Запрос.УстановитьПараметр("Свойство", СвойствоСсылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Значение;
		Иначе
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
	КонецФункции

	Функция ПолучитьЗначенияСвойстваОбъектов(Объекты, НаименованиеСвойства) Экспорт
		
		Результат = Новый Соответствие;
		
		Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объекты) Тогда
			Возврат Результат;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект,
		|	ДополнительныеСведения.Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект В (&Объекты)
		|	И ДополнительныеСведения.Свойство = &Свойство";

		Запрос.УстановитьПараметр("Объекты"	, Объекты);
		Запрос.УстановитьПараметр("Свойство", СвойствоСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			РезультатЗапроса = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				Результат.Вставить(Выборка.Объект, Выборка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
		
	Функция НайтиПодобныеСвойства(Наименование) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Свойства.Ссылка Свойство
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
			|ГДЕ
			|	Свойства.Наименование ПОДОБНО &ПодобноеНаименованиеСвойства
			|	И НЕ Свойства.Наименование = &НаименованиеСвойства";
		
		Запрос.УстановитьПараметр("ПодобноеНаименованиеСвойства", Наименование + " (%)");
		Запрос.УстановитьПараметр("НаименованиеСвойства", Наименование);
		ТаблицаСвойств= Запрос.Выполнить().Выгрузить();
		
		Возврат ТаблицаСвойств;
		
	КонецФункции
	
	Функция НайтиСвойство(Наименование) Экспорт
		
		Свойство= МетодСервера(,"НайтиСвойствоПовтИсп", Наименование);
		
		Если Свойство = Неопределено Тогда
			МетодСервера(,"ПовторноеИспользованиеСброситьЗначение",,"НайтиСвойствоПовтИсп", Наименование);
		КонецЕсли;
		
		Свойство= МетодСервера(,"НайтиСвойствоПовтИсп", Наименование);
		
		Возврат Свойство;
		
	КонецФункции
	
	Функция НайтиСвойствоПовтИсп(Наименование) Экспорт
		
		Результат = Неопределено;
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 2 Ссылка КАК Ссылка ИЗ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения ГДЕ Наименование = &Наименование");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Количество() = 2 Тогда
				ВызватьИсключение "В плане видов характеристик ""Дополнительные реквизиты и сведения"" обнаружено несколько свойств с одинаковым наименованием """ + Наименование + """!";
			КонецЕсли;
			
			Выборка.Следующий();
			Результат = Выборка.Ссылка;
			
		КонецЕсли;
		
		Возврат Результат;

	КонецФункции
		
	
	Функция НайтиСвойстваПоСтруктуре(СтруктураСвойствОбъектов)
		
		ТаблицаСвойствОбъектов 	= ПреобразоватьСтруктуруВТаблицу(СтруктураСвойствОбъектов);
		ТаблицаДопРеквизитов 	= Новый ТаблицаЗначений;
		
		ТаблицаДопРеквизитов.Колонки.Добавить("Наименование");
		ТаблицаДопРеквизитов.Колонки.Добавить("Ссылка");
		
		Если ТаблицаСвойствОбъектов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.Ключ КАК Ключ,
			|	ТаблицаСвойствОбъектов.Значение КАК Значение
			|ПОМЕСТИТЬ ТаблицаСвойствОбъектов
			|ИЗ
			|	&ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Значение,
			|	Ключ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДополнительныеРеквизитыИСведения.Ссылка,
			|	ДополнительныеРеквизитыИСведения.Наименование
			|ИЗ
			|	ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|		ПО ТаблицаСвойствОбъектов.Ключ = ДополнительныеРеквизитыИСведения.Наименование";
			
			Запрос.УстановитьПараметр("ТаблицаСвойствОбъектов",ТаблицаСвойствОбъектов);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Строка = ТаблицаДопРеквизитов.Добавить();
				
				Строка.Наименование = Выборка.Наименование;
				Строка.Ссылка = Выборка.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ТаблицаДопРеквизитов;
	
	КонецФункции // ()
	
	Функция НайтиПодобныеСвойстваПоСтруктуре(СтруктураСвойствОбъектов)
	
		ТаблицаСвойствОбъектов 	= ПреобразоватьСтруктуруВТаблицу(СтруктураСвойствОбъектов);
		ТаблицаДопРеквизитов 	= Новый ТаблицаЗначений;
		
		ТаблицаДопРеквизитов.Колонки.Добавить("Наименование");
		ТаблицаДопРеквизитов.Колонки.Добавить("НаименованиеПодобногоСвойства");
		ТаблицаДопРеквизитов.Колонки.Добавить("ПодобноеСвойствоСсылка");
		
		Если ТаблицаСвойствОбъектов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.Ключ КАК НаименованиеСвойства,
			|	ТаблицаСвойствОбъектов.Ключ + "" (%)"" КАК НаименованиеПодобногоСвойства
			|ПОМЕСТИТЬ ТаблицаСвойствОбъектов
			|ИЗ
			|	&ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НаименованиеПодобногоСвойства,
			|	НаименованиеСвойства
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаСвойствОбъектов.НаименованиеСвойства,
			|	ТаблицаСвойствОбъектов.НаименованиеПодобногоСвойства,
			|	ДополнительныеРеквизитыИСведения.Ссылка КАК ПодобноеСвойствоСсылка
			|ИЗ
			|	ТаблицаСвойствОбъектов КАК ТаблицаСвойствОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|		ПО (ДополнительныеРеквизитыИСведения.Наименование ПОДОБНО ТаблицаСвойствОбъектов.НаименованиеПодобногоСвойства)
			|			И (НЕ ДополнительныеРеквизитыИСведения.Наименование = ТаблицаСвойствОбъектов.НаименованиеСвойства)";
			
			Запрос.УстановитьПараметр("ТаблицаСвойствОбъектов",ТаблицаСвойствОбъектов);

			Попытка
				
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Строка = ТаблицаДопРеквизитов.Добавить();
					
					Строка.Наименование 					= Выборка.НаименованиеСвойства;
					Строка.НаименованиеПодобногоСвойства 	= Выборка.НаименованиеПодобногоСвойства;
					Строка.ПодобноеСвойствоСсылка 			= Выборка.ПодобноеСвойствоСсылка;
				КонецЦикла;
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				
				//Если в ошибке есть упоминание про LIKE, то это ошибка "на IBM DB2 шаблон в операторе LIKE может быть только литералом"
				//Для DB2 правый операнд должен быть параметром (актуально DB2 10.5.7)
				//Первый клиент на DB2 появился в ноябре 2016 - поэтому выполнение данной функции не имеет смысла 
				//- она актуальна для старых клиентов, у которых свойства имели старый формат наименований
				
				Если Найти(ТекстОшибки, "LIKE") = 0 Тогда //если проблема не в использовании DB
					ВызватьИсключение;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат ТаблицаДопРеквизитов;

	
	КонецФункции // НайтиПодобныеСвойстваПоСтруктуре()

	Функция НайтиНастройкиПользователейИзБП20(Наименование) Экспорт
		
		Результат = Неопределено;

		МетаданныеНастройкиПользователей = Метаданные.ПланыВидовХарактеристик.Найти("УдалитьНастройкиПользователей");
		
		Если МетаданныеНастройкиПользователей <> Неопределено И ПравоДоступа("Чтение", МетаданныеНастройкиПользователей) Тогда
			
			Результат = ПланыВидовХарактеристик.УдалитьНастройкиПользователей.НайтиПоНаименованию(Наименование, Истина);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СоздатьНеобходимыеСвойстваВПВХ(ВозможныеСвойстваОбъектов, ВозможныеНастройкиПользователя, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		Попытка
			СозданныеСвойстваОбъектов=			СоздатьСвойстваОбъектов(ВозможныеСвойстваОбъектов);
			СозданныеНастройкиПользователей=	СоздатьСвойстваОбъектов(ВозможныеНастройкиПользователя);
			ПрисоединитьМассив(СозданныеСвойстваОбъектов, СозданныеНастройкиПользователей);
		Исключение
			Результат.ОписаниеОшибки=	"Ошибка инициализации свойств объектов";
			Результат.Подробности= 		"Не удалось проинициализировать свойства объектов.
										| " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			
			Возврат Результат;
			
		КонецПопытки;
		
		Если СозданныеСвойстваОбъектов.Количество() > 0 Тогда
			ЗафиксированаРеструктуризация=	Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция СоздатьСвойство(ОписаниеСвойства)
		
		СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Если СвойствоОбъект.Метаданные().Иерархический Тогда
			СвойствоОбъект.Родитель = ПолучитьИЛИСоздатьГруппуНастроекПользователя_Диадок();
		КонецЕсли;
		
		Если НЕ Метаданные.Справочники.Найти("НаборыДополнительныхРеквизитовИСведений") = Неопределено И
			НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
			СвойствоОбъект.НаборСвойств=	Вычислить("Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка()");
		КонецЕсли;
		СвойствоОбъект.Наименование = ОписаниеСвойства.ключ;
		СвойствоОбъект.ТипЗначения =  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		СвойствоОбъект.УстановитьНовыйКод();
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("ЭтоДополнительноеСведение") = Неопределено Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Ложь;
		КонецЕсли;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Заголовок") = Неопределено Тогда
			СвойствоОбъект.Заголовок = ОписаниеСвойства.ключ;
		КонецЕсли;
		
		СвойствоОбъект.Записать();
		
		Возврат СвойствоОбъект;
		
	КонецФункции
	
	Процедура ПереименоватьСвойство(СвойствоСсылка, НовоеНаименование)
		
		СвойствоОбъект=	СвойствоСсылка.ПолучитьОбъект();
		СвойствоОбъект.Наименование = НовоеНаименование;
		СвойствоОбъект.ТипЗначения =  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100));
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("ЭтоДополнительноеСведение") = Неопределено Тогда
			СвойствоОбъект.ЭтоДополнительноеСведение = Ложь;
		КонецЕсли;
		Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Заголовок") = Неопределено Тогда
			СвойствоОбъект.Заголовок = НовоеНаименование;
		КонецЕсли;
		
		СвойствоОбъект.Записать();
		
	КонецПроцедуры
	
	Процедура ПометитьНаУдалениеСвойство(СвойствоСсылка)
		
		СвойствоОбъект=	СвойствоСсылка.ПолучитьОбъект();
		СвойствоОбъект.УстановитьПометкуУдаления(Истина);
		СвойствоОбъект.Записать();
		
	КонецПроцедуры
	
	Процедура ОчиститьНаборУСвойства(СвойствоСсылка, ЗафиксированаРеструктуризация)
		
		Перем НаборСвойств;
		
		Если ЗначениеЗаполнено(СвойствоСсылка) И ЕстьРеквизитИлиСвойствоОбъекта(СвойствоСсылка, "НаборСвойств", НаборСвойств) И ЗначениеЗаполнено(НаборСвойств) Тогда
			
			СвойствоОбъект= СвойствоСсылка.ПолучитьОбъект();
			СвойствоОбъект.НаборСвойств= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
			СвойствоОбъект.Записать();
			
			ЗафиксированаРеструктуризация= Истина;
			
		КонецЕсли;
	
	КонецПроцедуры
	
	Функция СоздатьСвойстваОбъектов(СтруктураСвойствОбъектов) Экспорт
		
		СозданныеСвойства 	= Новый Массив;
		СвойстваОбъектов 	= НайтиСвойстваПоСтруктуре(СтруктураСвойствОбъектов);
		
		Для каждого ОписаниеСвойства Из СтруктураСвойствОбъектов Цикл
			Если СвойстваОбъектов.Найти(ОписаниеСвойства.Ключ, "Наименование") = Неопределено Тогда
				НовоеСвойство=	СоздатьСвойство(ОписаниеСвойства);
				СозданныеСвойства.Добавить(НовоеСвойство);
			КонецЕсли;
		КонецЦикла;
		
		Возврат СозданныеСвойства;
		
	КонецФункции	
	
	Функция НеобходимоИнициализироватьВозможныеНастройки(ВозможныеНастройки)
		
		СвойстваОбъектов 			= НайтиСвойстваПоСтруктуре(ВозможныеНастройки);
		ПодобныеСвойстваОбъектов 	= НайтиПодобныеСвойстваПоСтруктуре(ВозможныеНастройки);
		
		Для каждого Настройка Из ВозможныеНастройки Цикл
			
			НайденнаяНастройка = Неопределено;
			СтрокаСвойств = СвойстваОбъектов.Найти(Настройка.Ключ, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				НайденнаяНастройка=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденнаяНастройка) = Истина Тогда
				Возврат Истина;
			ИначеЕсли ЗначениеЗаполнено(НайтиНастройкиПользователейИзБП20(Настройка.Ключ)) Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если НЕ Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(НайденнаяНастройка.НаборСвойств) = Истина Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныеПодобныеНастройки = ПодобныеСвойстваОбъектов.Найти(Настройка.Ключ, "Наименование");
				Если НайденныеПодобныеНастройки <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция НеобходимоИнициализироватьВозможныеСвойства(ВозможныеСвойстваОбъектов)
		
		СвойстваОбъектов 			= НайтиСвойстваПоСтруктуре(ВозможныеСвойстваОбъектов);
		ПодобныеСвойстваОбъектов 	= НайтиПодобныеСвойстваПоСтруктуре(ВозможныеСвойстваОбъектов);
		
		Для каждого Свойство Из ВозможныеСвойстваОбъектов Цикл
			
			НайденноеСвойство = "";
			СтрокаСвойств = СвойстваОбъектов.Найти(Свойство.Ключ, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				НайденноеСвойство=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НайденноеСвойство) = Истина Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если НЕ Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Реквизиты.Найти("НаборСвойств") = Неопределено Тогда
				
				Если ЗначениеЗаполнено(НайденноеСвойство.НаборСвойств) = Истина Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныеПодобныеСвойства=	ПодобныеСвойстваОбъектов.Найти(Свойство.Ключ, "Наименование");
				Если НайденныеПодобныеСвойства <> Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция НеобходимоИнициализироватьСтарыеСвойстваИз20(СтарыеСвойстваОбъектовИз20)
		
		Для каждого Свойство Из СтарыеСвойстваОбъектовИз20 Цикл
			Если ЗначениеЗаполнено(НайтиСвойство(Свойство.Ключ)) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПроверитьНеобходимостьИнициализацииСвойств(ВозможныеНастройки, ВозможныеСвойстваОбъектов, СтарыеСвойстваОбъектовИз20)
		
		Если НеобходимоИнициализироватьВозможныеНастройки(ВозможныеНастройки) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НеобходимоИнициализироватьВозможныеСвойства(ВозможныеСвойстваОбъектов) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" И НеобходимоИнициализироватьСтарыеСвойстваИз20(СтарыеСвойстваОбъектовИз20) = Истина Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	Функция ПолучитьВозможныеНастройкиПользователя()
		
		ВозможныеНастройкиПользователя = Новый Структура;
		
		ВозможныеНастройкиПользователя.Вставить("ДиадокПоследнийСертификатПользователя", 			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПоследнееПредставлениеПользователя",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСпособПодписанияТ12",						"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокОбластьПолномочийПодписанияУПД",				"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокИдентификаторСвойстваДолжностьПодписанта",	"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокАдресПроксиСервера",							"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПользовательПроксиСервера",					"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокПарольПроксиСервера",						"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокНастройкиПрокси",							"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСоздаватьСопоставлятьНакладные",				"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСоздаватьСопоставлятьСчетаФактуры",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокСтраницаВыбораПериодаПоУмолчанию",			"Пользователь");
		
		//Свойства отправки на согласование
		ВозможныеНастройкиПользователя.Вставить("ДиадокIDПодписантаОтправкаНаСогласование",			"Пользователь");
		ВозможныеНастройкиПользователя.Вставить("ДиадокДолжностьПодписантаОтправкаНаСогласование",	"Пользователь");
		
		//Расширение
		ВозможныеНастройкиПользователя.Вставить("ДиадокНеИспользоватьРасширениеВерсия",				"Пользователь");
				
		Возврат ВозможныеНастройкиПользователя;
		
	КонецФункции
	
	Функция ПолучитьВозможныеСвойстваОбъектов() Экспорт
		
		ВозможныеСвойстваОбъектов = Новый Структура;
		
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадок", 		"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадок", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДопДокументаВДиадок", 		"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДопДокументаВДиадок", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторДокументаВДиадокСчет", 	""); //ИдентификаторДокументаВДиадокСч
		ВозможныеСвойстваОбъектов.Вставить("ИдентификаторЯщикДокументаВДиадокСч", 	"");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокCustomDocumentId",				"");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокCustomDocumentIdСчет",			"");
		
		ВозможныеСвойстваОбъектов.Вставить("ЯщикДиадокДляОрганизации", 								"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторЭДОДляОрганизации", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг", 		"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ПодрДиадокДляОрганизации", 								"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокОтправкаНепроведенных", 							"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьУПД", 									"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокШифроватьДокументы", 								"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаСчета", 						"Организация"); //ДиадокВнешняяПечатнаяФорма
		ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьСчетНаОсновании", 						"Организация"); //ДиадокСпособОтправкиСчета
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСтандартнаяФормаСчетаНаОплату",					"Организация");  // Формировать счет на оплату средствами текущей конфигурации
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаАкта", 						"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокВнешняяПечатнаяФормаАктаСверки", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособФормированияАктаСверки", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСпособФормированияАкта",			 				"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокПодставлятьКППГрузоотправителя", 					"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокУказыватьОтсутствиеОснованияУПД",		 			"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокСписокДополнительныхВПФ", 						"Организация");
		ВозможныеСвойстваОбъектов.Вставить("ТекстКомментарияДиадок", 								"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("ДДКонтр_", 						 	 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокИдентификаторЭДО", 		 	 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДДНП_", 						 	 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДДИДП_", 						 	 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокФормироватьУПДКонтрагент", 	 "Контрагент");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокШифроватьДокументыКонтрагент", "Контрагент");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокЕдиницаИзмеренияНоменклатуры", 	"Номенклатура");
		
		ВозможныеСвойстваОбъектов.Вставить("DDPact", 				"Договор контрагента");
		ВозможныеСвойстваОбъектов.Вставить("DDContract", 			"Договор контрагента");
		
		ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentName", 	"Подразделение");
		ВозможныеСвойстваОбъектов.Вставить("Дог_DepartmentID", 		"Подразделение");
		
		ВозможныеСвойстваОбъектов.Вставить("ДиадокНомерВПФ", 					""); 
		ВозможныеСвойстваОбъектов.Вставить("СтатусОтправляемыхВПФ_Диадок", 		"");
		
		ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыНДС",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("МаксимальноеОтклонениеСуммыСНДС",	"Организация");
		ВозможныеСвойстваОбъектов.Вставить("РазрешенныйПериодКорректировки",	"Организация");
		
		ВозможныеСвойстваОбъектов.Вставить("ПутьКМодулюВСправочнике1С",				"Константа");
		ВозможныеСвойстваОбъектов.Вставить("ДиадокОтключитьСборСтатистики",			"Константа");
				
		Возврат ВозможныеСвойстваОбъектов;
		
	КонецФункции
	
	Функция ПолучитьСтарыеСвойстваОбъектовИз20() Экспорт
		
		СтарыеСвойстваОбъектовИз20=	Новый Структура();
		СтарыеСвойстваОбъектовИз20.Вставить("ИдентификаторДокументаВДиадокСч", 	"ИдентификаторДокументаВДиадокСчет");
		СтарыеСвойстваОбъектовИз20.Вставить("ДиадокСпособОтправкиСчета", 		"ДиадокФормироватьСчетНаОсновании");
		СтарыеСвойстваОбъектовИз20.Вставить("ДиадокВнешняяПечатнаяФорма", 		"ДиадокВнешняяПечатнаяФормаСчета");
		
		Возврат СтарыеСвойстваОбъектовИз20;
		
	КонецФункции
	
	Функция ПроверитьНаличиеСвойствОбъектов(ВозможныеСвойстваОбъектов) Экспорт
		
		НенайденныеСвойства = Новый Массив;
		Для каждого ОписаниеСвойства из ВозможныеСвойстваОбъектов цикл 
			Если НайтиСвойство(ОписаниеСвойства.Ключ) = Неопределено Тогда
				НенайденныеСвойства.Добавить(ОписаниеСвойства);
			КонецЕсли;
		КонецЦикла;
		
		возврат  НенайденныеСвойства
		
	КонецФункции	
	
	Функция ПереместитьЗначенияСтарыхСвойств(ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация)
		
		НаборСтарыхСвойств=	РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборСтарыхСвойств.Отбор.Свойство.Установить(СтароеСвойство);
		НаборСтарыхСвойств.Прочитать();
		
		Для каждого НаборСтарогоСвойства Из НаборСтарыхСвойств Цикл
			
			ЗаписьОсновногоСвойства=			РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			ЗаписьОсновногоСвойства.Объект=		НаборСтарогоСвойства.Объект;
			ЗаписьОсновногоСвойства.Свойство=	ОсновноеСвойство;
			ЗаписьОсновногоСвойства.Прочитать();
			
			Если НЕ ЗначениеЗаполнено(ЗаписьОсновногоСвойства.Значение) Тогда
				ЗаписьОсновногоСвойства.Объект=		НаборСтарогоСвойства.Объект;
				ЗаписьОсновногоСвойства.Свойство=	ОсновноеСвойство;
				ЗаписьОсновногоСвойства.Значение=	НаборСтарогоСвойства.Значение;
				ЗаписьОсновногоСвойства.Записать();
				
				ЗафиксированаРеструктуризация=		Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецФункции
	
	Функция ПереместитьНастройкиПользователей(ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек)
		
		Для каждого Настройка Из ВозможныеНастройкиПользователя Цикл
			СтараяНастройка=	НайтиНастройкиПользователейИзБП20(Настройка.Ключ);
			Если ЗначениеЗаполнено(СтараяНастройка) Тогда
				
				ПравильнаяНастройка=	НайтиСвойство(Настройка.Ключ);
				Если НЕ ЗначениеЗаполнено(ПравильнаяНастройка) Тогда
					Попытка
						ПравильнаяНастройка=	СоздатьСвойство(Настройка);
					Исключение
						ВызватьИсключение "Не удалось создать новое свойства " + Настройка.Ключ + " " + ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			
				Попытка
					НаборСтарыхНастроек=	РегистрыСведений.УдалитьНастройкиПользователей.СоздатьНаборЗаписей();
					НаборСтарыхНастроек.Отбор.Настройка.Установить(СтараяНастройка);
					НаборСтарыхНастроек.Прочитать();
					Для каждого ЗаписьНабора Из НаборСтарыхНастроек Цикл
						
						МЗ=				РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
						МЗ.Объект=		ЗаписьНабора.Пользователь;
						МЗ.Свойство=	ПравильнаяНастройка.Ссылка;
						МЗ.Значение=	ЗаписьНабора.Значение;
						МЗ.Записать();
						
						МассивПеремещенныхНастроек.Добавить(ПравильнаяНастройка);
						
					КонецЦикла;
				Исключение
					ВызватьИсключение  "Не удалось переместить старые значения свойств " + Настройка.Ключ + " в регистр ДополнительныеСведения " + ОписаниеОшибки();
				КонецПопытки;
				
				Попытка
					ПереименоватьСвойство(СтараяНастройка, "Удалить" + СтараяНастройка.Наименование);
				Исключение
					ВызватьИсключение "Не удалось переименовать свойство " + СтараяНастройка.Наименование + "
										|Обратитесь к вашему системному администратору.
										|Отладочная информация: " + ОписаниеОшибки();
				КонецПопытки;

			КонецЕсли;
		КонецЦикла;
		
		Возврат МассивПеремещенныхНастроек;
		
	КонецФункции
	
	Функция ПереписатьНовыеЗначенияНеправильныхСвойств(МассивПереписанныхСвойств)
		
		УстановитьПравильноеЗначениеСвойстваТипаБулево(МассивПереписанныхСвойств, НайтиСвойство(ИдентификаторСвойстваОтправлятьНеПроведенные())); // ОтправлятьНеПроведенные
		УстановитьПравильноеЗначениеФормироватьСчетНаОсновании(МассивПереписанныхСвойств);
		ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаСчета(МассивПереписанныхСвойств);
		ОбновитьЗначениеСвойстваДиадокВнешняяПечатнаяФормаАкта(МассивПереписанныхСвойств);
			
		Возврат МассивПереписанныхСвойств;
		
	КонецФункции
	
	Процедура РеструктуризироватьПодобныеСвойства(ОсновноеСвойство, НаименованиеСвойства, ЗафиксированаРеструктуризация, ТаблицаНайденныхСвойств)
		
		Для каждого СтрокаТаблицы Из ТаблицаНайденныхСвойств Цикл
			
			СтароеСвойство=		СтрокаТаблицы.Свойство;
			Если ОсновноеСвойство = Неопределено Тогда
				ПереименоватьСвойство(СтароеСвойство, НаименованиеСвойства);
				ОсновноеСвойство=	СтароеСвойство;
			Иначе
				ПереместитьЗначенияСтарыхСвойств(ОсновноеСвойство, СтароеСвойство, ЗафиксированаРеструктуризация);
				ОчиститьНаборУСвойства(СтароеСвойство, ЗафиксированаРеструктуризация);
				ПереименоватьСвойство(СтароеСвойство, "Удалить" + НаименованиеСвойства);
				ПометитьНаУдалениеСвойство(СтароеСвойство);
			КонецЕсли;
			
			ЗафиксированаРеструктуризация=	Истина;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ОбработатьНеправильныеСвойства(ВозможныеНастройкиПользователя, ВозможныеСвойстваОбъектов, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		ОбрабатываемыеСвойстваОбъектов=	Новый Массив();
		ПрисоединитьМассив(ОбрабатываемыеСвойстваОбъектов, ВозможныеНастройкиПользователя);
		ПрисоединитьМассив(ОбрабатываемыеСвойстваОбъектов, ВозможныеСвойстваОбъектов);
		
		ТаблицаСвойств = НайтиСвойстваПоСтруктуре(ОбрабатываемыеСвойстваОбъектов);
		ТаблицаПодобныхСвойств = НайтиПодобныеСвойстваПоСтруктуре(ОбрабатываемыеСвойстваОбъектов);
		
		НачатьТранзакцию();
		Для каждого Свойство Из ОбрабатываемыеСвойстваОбъектов Цикл
			
			НаименованиеСвойства=	Свойство.Ключ;
			СтрокаСвойств 		= ТаблицаСвойств.Найти(НаименованиеСвойства, "Наименование");
			Если СтрокаСвойств <> Неопределено Тогда
				ОсновноеСвойство=	СтрокаСвойств.Ссылка;
			КонецЕсли;
			
			ТаблицаНайденныхСвойств = Новый ТаблицаЗначений;         
			ТаблицаНайденныхСвойств.Колонки.Добавить("Свойство");
			
			ПараметрыОтбора = Новый Структура("Наименование", НаименованиеСвойства);
			СтрокиПодобныхСвойств = ТаблицаПодобныхСвойств.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиПодобныхСвойств <> Неопределено Тогда
				Для каждого Стр Из СтрокиПодобныхСвойств Цикл
					НовСтр = ТаблицаНайденныхСвойств.Добавить();
					НовСтр.Свойство = Стр.ПодобноеСвойствоСсылка;
				КонецЦикла;			
			КонецЕсли;
			
			Попытка
				ОчиститьНаборУСвойства(ОсновноеСвойство, ЗафиксированаРеструктуризация);
				РеструктуризироватьПодобныеСвойства(ОсновноеСвойство, НаименованиеСвойства, ЗафиксированаРеструктуризация, ТаблицаНайденныхСвойств);
			Исключение
				Результат.ОписаниеОшибки=	"Ошибка реструктуризации неправильных свойств объектов";
				Результат.Подробности=		"Не удалось реструктуризировать неправильное свойство " + НаименованиеСвойства + "
											|Обратитесь к вашему системному администратору.
											|Отладочная информация: " + ОписаниеОшибки();
				Результат.Отказ=			Истина;
				
				ОтменитьТранзакцию();
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПереименоватьСтарыеНастройкиИз20(СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек)
		
		Для каждого РеинициализируемоеСвойство Из СтарыеСвойстваОбъектовИз20 Цикл
			
			СтароеНаименованиеСвойства=		РеинициализируемоеСвойство.Ключ;
			НаименованиеСвойства30=			РеинициализируемоеСвойство.Значение;
			
			СтароеСвойствоСсылка=	НайтиСвойство(СтароеНаименованиеСвойства);
			Если ЗначениеЗаполнено(СтароеСвойствоСсылка) Тогда
				Свойство30Ссылка=	НайтиСвойство(НаименованиеСвойства30);
				Если НЕ ЗначениеЗаполнено(Свойство30Ссылка) Тогда
					ПереименоватьСвойство(СтароеСвойствоСсылка, НаименованиеСвойства30);
					МассивПереименованныхНастроек.Добавить(СтароеСвойствоСсылка);
				Иначе
					ВызватьИсключение 	"Старое свойство """ + СтароеНаименованиеСвойства + """ нельзя реинициализировать, 
										|так как в базе уже определено свойство """ + НаименованиеСвойства30 + """
										|Обратитесь к системному администратору:  
										|Требуется перенести значения свойства """ + СтароеНаименованиеСвойства + """ в """ + НаименованиеСвойства30 + """";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МассивПереименованныхНастроек;
		
	КонецФункции
			
	Функция ОбработатьСвойстваОбъектовИз20(ВозможныеНастройкиПользователя, СтарыеСвойстваОбъектовИз20, ЗафиксированаРеструктуризация)
		
		Результат=	Новый Структура("Отказ, ОписаниеОшибки, Подробности", Ложь, "", "");
		
		МассивПереименованныхНастроек=	Новый Массив();
		МассивПеремещенныхНастроек=		Новый Массив();
		МассивПереписанныхСвойств=		Новый Массив();
		
		НачатьТранзакцию();
		
		Попытка
			МассивПереименованныхНастроек=	ПереименоватьСтарыеНастройкиИз20(СтарыеСвойстваОбъектовИз20, МассивПереименованныхНастроек);
		Исключение
			
			Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП20 на БП30";
			Результат.Подробности=		"Не удалось выполнить переименование старых свойств.
										|Обратитесь к вашему системному администратору.
										|Отладочная информация: " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			ОтменитьТранзакцию();
			
			Возврат Результат;
			
		КонецПопытки;
		
		МетаданныеНастройкиПользователей = Метаданные.ПланыВидовХарактеристик.Найти("УдалитьНастройкиПользователей");
		
		Если МетаданныеНастройкиПользователей <> Неопределено И ПравоДоступа("Чтение", МетаданныеНастройкиПользователей) Тогда
			
			Попытка
				МассивПеремещенныхНастроек=	ПереместитьНастройкиПользователей(ВозможныеНастройкиПользователя, МассивПеремещенныхНастроек);
			Исключение
				
				Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП20 на БП30";
				Результат.Подробности=		"Не удалось выполнить перемещение старых настроек пользователей.
											|Обратитесь к вашему системному администратору.
											|Отладочная информация: " + ОписаниеОшибки();
				Результат.Отказ=			Истина;
				ОтменитьТранзакцию();
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Попытка
			МассивПереписанныхСвойств=	ПереписатьНовыеЗначенияНеправильныхСвойств(МассивПереписанныхСвойств);
		Исключение
			Результат.ОписаниеОшибки=	"Ошибка реинициализации свойств объектов при обновлении с БП 20 на БП30";
			Результат.Подробности= 		"Не удалось обновить некорректные значения свойств на правильные
										|Отладочная информация: " + ОписаниеОшибки();
			Результат.Отказ=			Истина;
			ОтменитьТранзакцию();

			Возврат Результат;
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		Если МассивПереименованныхНастроек.Количество() > 0 
			ИЛИ МассивПеремещенныхНастроек.Количество() > 0 
			ИЛИ МассивПереписанныхСвойств.Количество() > 0 Тогда
			ЗафиксированаРеструктуризация=	Истина;
		КонецЕсли;

		Возврат Результат;

	КонецФункции
	
	Процедура УстановитьЗначениеСвойства(Объект, НаименованиеСвойства, НазначениеСвойстваСтрокой= "", ЗначениеСвойства) Экспорт
		
		Если ПустаяСтрока(НаименованиеСвойства) ИЛИ НЕ ЗначениеЗаполнено(Объект) Тогда
			Возврат;
		КонецЕсли;
		
		СвойствоСсылка = НайтиСвойство(НаименованиеСвойства);
		
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			
			Если ПустаяСтрока(ЗначениеСвойства) Тогда
				Возврат;
			КонецЕсли;
			
			ВызватьИсключение "Запись свойства объекта: """ + НаименованиеСвойства + """ невозможна. Свойство не создано";
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		
		НоваяЗапись.Объект	 = Объект;
		НоваяЗапись.Свойство = СвойствоСсылка;
		НоваяЗапись.Значение = ЗначениеСвойства;
		НоваяЗапись.Записать();
		
	КонецПроцедуры
	
	// Позволяет "мягко" получить значение системного перечисления по имени свойства. Если такого имени нет
	// возращает Неопределено.
	//
	// Параметры:
	//	СистемноеПеречисление	- СистемноеПеречисление	- системное перечисление, значение свойства которого необходимо получить
	//	ИмяСвойства				- Строка				- имя свойства, значение которого необходимо получить
	//
	// Возвращаемое значение:
	//	ЗначениеСистемногоПеречисления, Неопределено
	Функция СвойствоСистемногоПеречисления(СистемноеПеречисление, ИмяСвойства) Экспорт
		
		Результат = Неопределено;
		
		СтруктураСвойства = Новый Структура(ИмяСвойства);
		
		ЗаполнитьЗначенияСвойств(СтруктураСвойства, СистемноеПеречисление);
		
		Результат = СтруктураСвойства[ИмяСвойства];
		
		Возврат Результат;
		
	КонецФункции //СвойствоСистемногоПеречисления()
	
//} УПРАВЛЕНИЕ СВОЙСТВАМИ

//{ ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ

	Функция СведенияОВнешнейОбработке() Экспорт
		
		СловарьWL = ПолучитьСловарь();
		
		ПараметрыРегистрации = Новый Структура;
		ПараметрыРегистрации.Вставить("Вид"			   , "ДополнительнаяОбработка");
		ПараметрыРегистрации.Вставить("Наименование"   , "Диадок Стандарт");
		ПараметрыРегистрации.Вставить("Информация"	   , "Дополнительная внешняя обработка для работы с ЭДО через " + СловарьWL.НаименованиеСистемы);
		ПараметрыРегистрации.Вставить("Версия"		   , ВерсияОбработки());
		ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
		ПараметрыРегистрации.Вставить("Разрешения", ДополнительныеРазрешенияВнешнейОбработки());
		ПараметрыРегистрации.Вставить("ВерсияБСП", "2.4.2.1");
		
		// Добавляем команду открытия основной формы
		ПараметрыРегистрации.Вставить("Команды", Новый ТаблицаЗначений);
		ПараметрыРегистрации.Команды.Колонки.Добавить("Представление"		, Новый ОписаниеТипов("Строка")); 
		ПараметрыРегистрации.Команды.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка"));
		ПараметрыРегистрации.Команды.Колонки.Добавить("Использование"		, Новый ОписаниеТипов("Строка"));
		ПараметрыРегистрации.Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
		ПараметрыРегистрации.Команды.Колонки.Добавить("Модификатор"		 	, Новый ОписаниеТипов("Строка"));
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Использование = "ОткрытиеФормы";
		НоваяКоманда.Представление = ПараметрыРегистрации.Наименование;
		НоваяКоманда.Идентификатор = Метаданные().ОсновнаяФорма.Имя;
		
		Возврат ПараметрыРегистрации;
		
	КонецФункции
	
	Функция ДополнительныеРазрешенияВнешнейОбработки()
		
		Результат = Новый Массив;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
			
			МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
			
			ОписаниеРазрешения = "Чтение и запись файлов с данными электронных документов";
			Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаВременныхФайлов(Истина
							, Истина
							, ОписаниеРазрешения);
			Результат.Добавить(Разрешение);
			
			ОписаниеРазрешения = "Чтение данных для подготовки электронных документов";
			Разрешение = МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима(ОписаниеРазрешения);
			Результат.Добавить(Разрешение);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
//} ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ

//{ ИДЕНТИФИКАТОРЫ

	Функция ИдентификаторСвойстваЯщикОрганизации() Экспорт
	
		Возврат "ЯщикДиадокДляОрганизации";
	
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЭДОДляОрганизации() Экспорт
		
		Возврат "ДиадокИдентификаторЭДОДляОрганизации";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваПодразделениеОрганизации() Экспорт
		
		Возврат "ПодрДиадокДляОрганизации";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору() Экспорт
		
		Возврат "Дог_DepartmentName";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору() Экспорт
		
		Возврат "Дог_DepartmentID";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваЯщикКонтрагентаПрефикс() Экспорт
		
		Возврат "ДДКонтр_";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЭДОДляКонтрагента() Экспорт
		
		Возврат "ДиадокИдентификаторЭДО";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() Экспорт
		
		Возврат "ДДНП_";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваНаименованиеПодразделенияКонтрагента(BoxId) Экспорт
		
		Возврат ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс() + BoxId;
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() Экспорт
		
		Возврат "ДДИДП_";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИДПодразделенияКонтрагента(BoxId) Экспорт
		
		Возврат ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс() + BoxId;
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадок() Экспорт
		
		Возврат "ИдентификаторДокументаВДиадок";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваДиадокCustomDocumentId() Экспорт
		
		Возврат "ДиадокCustomDocumentId";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваДиадокCustomDocumentIdСчет() Экспорт
		
		Возврат "ДиадокCustomDocumentIdСчет";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваДопДокументаИдентификаторДокументаВДиадок() Экспорт
		
		Возврат "ИдентификаторДопДокументаВДиадок";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДопДокументаВДиадок() Экспорт
		
		Возврат "ИдентификаторЯщикДопДокументаВДиадок";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок() Экспорт
		
		Возврат "ИдентификаторЯщикДокументаВДиадок";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет() Экспорт
		
		Возврат "ИдентификаторДокументаВДиадокСчет";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()
		
		Возврат "ИдентификаторЯщикДокументаВДиадокСч";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваПредставлениеСертификатаПользователя() Экспорт
		
		Возврат "ДиадокПредставлениеСертификатаПользователя";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваАдреспроксиСервера() Экспорт
		
		Возврат "ДиадокАдресПроксиСервера";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваПользовательПроксиСервера() Экспорт
		
		Возврат "ДиадокПользовательПроксиСервера";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваПарольПроксиСервера() Экспорт
		
		Возврат "ДиадокПарольПроксиСервера";
		
	Конецфункции
	
	Функция ИдентификаторСвойстваСпособПодписанияТ12() Экспорт
		
		Возврат "ДиадокСпособПодписанияТ12";
		
	КонецФункции

	Функция ИдентификаторСвойстваОбластьПолномочийПодписанияУПД() Экспорт
		
		Возврат "ДиадокОбластьПолномочийПодписанияУПД";
		
	КонецФункции

	Функция ИдентификаторСвойстваДолжностьПодписанта() Экспорт
		
		Возврат "ДиадокИдентификаторСвойстваДолжностьПодписанта";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваПечатнаяФормаДляТоваров() Экспорт
		
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляТоваров";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваПечатнаяФормаДляУслуг() Экспорт
		
		Возврат "ДиадокИдентификаторСвойстваПечатнаяФормаДляУслуг";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваОтправлятьНеПроведенные() Экспорт
		
		Возврат "ДиадокОтправкаНепроведенных";
		
	КонецФункции

	Функция ИдентификаторСвойстваФормироватьУПД() Экспорт
		
		Возврат "ДиадокФормироватьУПД";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваФормироватьУПДКонтрагент() Экспорт
		
		Возврат "ДиадокФормироватьУПДКонтрагент";
		
	КонецФункции

	Функция ИдентификаторСвойстваШифроватьДокументы() Экспорт
		
		Возврат "ДиадокШифроватьДокументы";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваШифроватьДокументыКонтрагент() Экспорт
		
		Возврат "ДиадокШифроватьДокументыКонтрагент";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаСчета() Экспорт
		
		Возврат "ДиадокВнешняяПечатнаяФормаСчета";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваФормироватьСчетНаОсновании() Экспорт
		
		// Варианты значения свойства:
		// 0 - "Счета на оплату"
		// 1 - "Документов продажи"
		// 2 - "Не формировать"
		// 3 - ???
		// 4 - "Заказа клиенту"
		
		Возврат "ДиадокФормироватьСчетНаОсновании";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваСтандартнаяФормаСчетаНаОплату() Экспорт
		
		Возврат "ДиадокСтандартнаяФормаСчетаНаОплату";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаАкта() Экспорт
		
		Возврат "ДиадокВнешняяПечатнаяФормаАкта";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваСпособФормированияАкта() Экспорт
		
		Возврат "ДиадокСпособФормированияАкта";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки() Экспорт
		
		Возврат "ДиадокВнешняяПечатнаяФормаАктаСверки";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваСпособФормированияАктаСверки() Экспорт
		
		Возврат "ДиадокСпособФормированияАктаСверки";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваПодставлятьКППГрузоотправителя() Экспорт
		
		Возврат "ДиадокПодставлятьКППГрузоотправителя";
		
	КонецФункции
	
	Функция ИдентификатрСвойстваТекстКомментарияДиадок() Экспорт
		
		Возврат "ТекстКомментарияДиадок";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры()Экспорт
		
		Возврат "ДиадокЕдиницаИзмеренияНоменклатуры";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваIdПодписантаСогласование() Экспорт
		
		Возврат "ДиадокIDПодписантаОтправкаНаСогласование";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваДолжностьПодписантаСогласование() Экспорт
		
		Возврат "ДиадокДолжностьПодписантаОтправкаНаСогласование";
		
	КонецФункции

	Функция ИдентификаторСвойстваСтатусОтправляемыхВПФ() Экспорт
		
		Возврат "СтатусОтправляемыхВПФ_Диадок";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваНомерВПФ() Экспорт
		
		Возврат "ДиадокНомерВПФ";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваСписокДопВПФ() Экспорт
		
		Возврат "ДиадокСписокДополнительныхВПФ";
		
	КонецФункции
	
	Функция ИдентификаторСвойстваУказыватьОтсутствиеОснованияУПД() Экспорт
		
		Возврат "ДиадокУказыватьОтсутствиеОснованияУПД";
		
	КонецФункции
	
//} ИДЕНТИФИКАТОРЫ

//{ АДАПТЕР
	
	Функция DocumentID_2_ДокументМассовое(ТЗИд) Экспорт
		
		ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
		
		ТаблицаПерекодировки.Индексы.Добавить("Число16");
		
		ТЗИд.колонки.Добавить("DocumentId64",   Новый ОписаниеТипов("Строка"));
		ТЗИд.колонки.Добавить("BoxId", 			Новый ОписаниеТипов("Строка")); //на всяк, вдруг там тип неопределенный, чтоб запрос егг сжевал
		
		Для Каждого Стр из ТЗИд Цикл
			Стр.DocumentId64 =  КонвертироватьГуидВЧисло64(Стр.DocumentID);
			Стр.BoxId 	  	 =  Стр.OrganizationId;
		КонецЦикла;
		ИдентификаторСвойстваИдентификаторДокументаВДиадок 		= ИдентификаторСвойстваИдентификаторДокументаВДиадок();
		ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок 	= ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок();
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	выразить(ТЗ.DocumentId64 как строка(150))  как DocumentId64,
		|	выразить(ТЗ.DocumentId как строка(150)) как DocumentId,
		|	выразить(ТЗ.BoxId как строка(150)) как BoxId
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвойствоDocumentId.Объект,
		|	ТЗ.DocumentId,
		|	ТЗ.BoxId
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|		ПО СвойствоDocumentId.Объект = СвойствоBoxId.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
		|		ПО СвойствоDocumentId.Значение = ТЗ.DocumentId64
		|			И (СвойствоDocumentId.Свойство.Наименование = &НаименованиеDocumentId)
		|			И (СвойствоBoxId.Свойство.Наименование = &НаименованиеBoxId)
		|			И (СвойствоBoxId.Значение = ТЗ.BoxId)";
		Запрос.УстановитьПараметр("ТЗ", ТЗИд);
		//Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		//Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		
		результат = Новый Соответствие;
		Выборка = запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Новый Структура("DocumentId,BoxId", Выборка.DocumentId,Выборка.BoxId), Выборка.Объект);
		КонецЦикла;
		
		//мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		Возврат Результат;
		
	КонецФункции	
	
	Функция DocumentID_2_Документ(DocumentID, BoxID, ОграничитьРезультатСчетФактурой = Ложь, DocumentDirection = "") Экспорт
		
		DocumentId64 = КонвертироватьГуидВЧисло64(DocumentID);
		
		УсловиеТипОбъекта = "";
		Если ОграничитьРезультатСчетФактурой Тогда // УПД СчфДоп + ПТУ, созданные из invoice или УПД Счф
			Если DocumentDirection = "Inbound" Тогда
				
				МетаданныеСчетовФактур = МетаданныеСчетовФактурПолученных();
				
				ОграниченияПоТипу = "";
				Для Каждого МетаданныеСФ Из МетаданныеСчетовФактур Цикл
					
					ОграниченияПоТипу = ОграниченияПоТипу
						+ ?(ПустаяСтрока(ОграниченияПоТипу), "", " ИЛИ ")
						+ СтрЗаменить("СвойствоDocumentId.Объект ССЫЛКА %1", "%1", МетаданныеСФ.ПолноеИмя());
					
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ОграниченияПоТипу) Тогда
					УсловиеТипОбъекта = "И ("+ОграниченияПоТипу+")";
				КонецЕсли;
				
			Иначе
				ПредставлениеДокументов = МетодСервера(, "ПредставлениеДокументов");
				Если ЗначениеЗаполнено(ПредставлениеДокументов.СчетФактураВыданный) Тогда
					УсловиеТипОбъекта = "И СвойствоDocumentId.Объект ССЫЛКА Документ." + ПредставлениеДокументов.СчетФактураВыданный;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =	
		"ВЫБРАТЬ
		|	СвойствоDocumentId.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId,
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|ГДЕ
		|	СвойствоDocumentId.Свойство.Наименование В (&НаименованиеDocumentId, &НаименованиеDocumentIdСчет)
		|	И СвойствоDocumentId.Значение = &ЗначениеDocumentId
		|	И СвойствоBoxId.Свойство.Наименование В (&НаименованиеBoxId, &НаименованиеBoxIdСчет)
		|	И СвойствоBoxId.Значение = &ЗначениеBoxId
		|	И СвойствоDocumentId.Объект = СвойствоBoxId.Объект
		|	" + УсловиеТипОбъекта;

		Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеDocumentIdСчет", ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет());
		Запрос.УстановитьПараметр("НаименованиеBoxIdСчет", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет());
		
		мас = запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		Возврат ?(мас.Количество() = 0, Неопределено, мас[0]);
		
	КонецФункции

	Функция DocumentID_2_МассивДокументов(DocumentID, BoxID) Экспорт
		
		МассивДокументов= Новый Массив;
		
		DocumentId64 = КонвертироватьГуидВЧисло64(DocumentID);
		
		Запрос=	Новый Запрос;
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СвойствоDocumentId.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоDocumentId,
		|	РегистрСведений.ДополнительныеСведения КАК СвойствоBoxId
		|ГДЕ
		|	СвойствоDocumentId.Свойство.Наименование В (&НаименованиеDocumentId, &НаименованиеDocumentIdСчет)
		|	И СвойствоDocumentId.Значение = &ЗначениеDocumentId
		|	И СвойствоBoxId.Свойство.Наименование В (&НаименованиеBoxId, &НаименованиеBoxIdСчет)
		|	И СвойствоBoxId.Значение = &ЗначениеBoxId
		|	И СвойствоDocumentId.Объект = СвойствоBoxId.Объект";

		Запрос.УстановитьПараметр("ЗначениеDocumentId", DocumentId64);
		Запрос.УстановитьПараметр("ЗначениеBoxId", BoxId);
		Запрос.УстановитьПараметр("НаименованиеDocumentId", ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеBoxId", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок());
		Запрос.УстановитьПараметр("НаименованиеDocumentIdСчет", ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет());
		Запрос.УстановитьПараметр("НаименованиеBoxIdСчет", ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет());
		
		РезультатЗапроса= Запрос.Выполнить();
		Запрос= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка= РезультатЗапроса.Выбрать();
			РезультатЗапроса= Неопределено;
			
			Пока Выборка.Следующий() Цикл
				МассивДокументов.Добавить(Выборка.Объект);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат МассивДокументов;
		
	КонецФункции

	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета = Ложь, ОчиститьИД_Документов1СсОдинаковымDocumentID = Ложь) Экспорт
		
		base64DocId = КонвертироватьГуидВЧисло64(DocumentID);
		
		Если ИспользоватьИдентификаторСчета Тогда
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет(), , base64DocId); 
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет(), , BoxID); 
		Иначе
			СвойствоDocumentId = ИдентификаторСвойстваИдентификаторДокументаВДиадок();
			СвойствоBoxId	   = ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок();	
			Если ОчиститьИД_Документов1СсОдинаковымDocumentID Тогда // УПД СчфДоп + ПТУ, созданные из invoice или УПД Счф
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ВсеОбъекты_BoxId.Объект
				|ИЗ
				|	РегистрСведений.ДополнительныеСведения КАК DocumentId
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК BoxId
				|		ПО DocumentId.Объект = BoxId.Объект
				|			И (BoxId.Свойство = &СвойствоBoxId)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ВсеОбъекты_DocumentId
				|		ПО (ВсеОбъекты_DocumentId.Свойство = &СвойствоDocumentId)
				|			И DocumentId.Значение = ВсеОбъекты_DocumentId.Значение
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ВсеОбъекты_BoxId
				|		ПО (ВсеОбъекты_DocumentId.Объект = ВсеОбъекты_BoxId.Объект)
				|			И (ВсеОбъекты_BoxId.Свойство = &СвойствоBoxId)
				|			И (BoxId.Значение = ВсеОбъекты_BoxId.Значение)
				|ГДЕ
				|	DocumentId.Объект = &Документ
				|	И DocumentId.Свойство = &СвойствоDocumentId");
				Запрос.УстановитьПараметр("СвойствоDocumentId", НайтиСвойство(СвойствоDocumentId));
				Запрос.УстановитьПараметр("СвойствоBoxId"	  , НайтиСвойство(СвойствоBoxId));
				Запрос.УстановитьПараметр("Документ", Документ);
				Выборка= Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					УстановитьЗначениеСвойства(Выборка.Объект, СвойствоDocumentId, , ""); 
					УстановитьЗначениеСвойства(Выборка.Объект, СвойствоBoxId, , ""); 
				КонецЦикла;
			Иначе
				УстановитьЗначениеСвойства(Документ, СвойствоDocumentId, , base64DocId); 
				УстановитьЗначениеСвойства(Документ, СвойствоBoxId, , BoxID); 
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ОчиститьCustomDocumentId(Документ, ИспользоватьИдентификаторСчета= Ложь) Экспорт
		
		Если ИспользоватьИдентификаторСчета Тогда
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваДиадокCustomDocumentIdСчет(), , ""); 
		Иначе
			УстановитьЗначениеСвойства(Документ, ИдентификаторСвойстваДиадокCustomDocumentId(), , ""); 
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция Документ_2_DocumentID(СсылкаНаОбъект, ИспользоватьИдентификаторСчета= Ложь) Экспорт
		
		ИдентификаторСвойстваДокумент = ?(ИспользоватьИдентификаторСчета , ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет(),ИдентификаторСвойстваИдентификаторДокументаВДиадок());
		число64 =   ПолучитьЗначениеСвойства(СсылкаНаОбъект,  ИдентификаторСвойстваДокумент);
		если ЗначениеЗаполнено( число64) тогда
			возврат  КонвертироватьЧисло64вГуид(число64)
		Иначе 
			возврат ""
		КонецЕсли;	
	КонецФункции	
	
	Функция Организация_2_BoxID(Организация) Экспорт 
		возврат ПолучитьЗначениеСвойства(Организация,  ИдентификаторСвойстваЯщикОрганизации());
	КонецФункции
	
	Функция Установить_BoxID_для_Организация(Организация, BoxID, НаименованиеЯщика, DepartmentKpp= Неопределено) Экспорт 
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваЯщикОрганизации(), , BoxID);
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваПодразделениеОрганизации(), , DepartmentKpp);
		
		Возврат Истина;
		
	КонецФункции

	Процедура УстановитьИдентификаторЭДОДляОрганизации(Организация, FnsParticipantId) Экспорт
		
		УстановитьЗначениеСвойства(Организация, ИдентификаторСвойстваИдентификаторЭДОДляОрганизации(),, FnsParticipantId);
		
	КонецПроцедуры
	
	// Находит по идентификатору ящика организации сопоставленную организацию
	// в информационной базе
	//
	// Параметры:
	//	BoxID			- Строка	- идентификатор ящика организации в сервисе Диадок
	//	DepartmentKpp	- Строка	- КПП обособленного подразделения организации
	//
	// Возвращаемое значение:
	//	СправочникСсылка, Неопределено - Неопределено, если организация не найдена
	Функция BoxID_2_Организация(BoxID, DepartmentKpp = "") Экспорт 
		
		ИдСвойстваЯщикОрг 			= ИдентификаторСвойстваЯщикОрганизации();
		ИдСвойстваПодразделениеОрг 	= ИдентификаторСвойстваПодразделениеОрганизации();
		
		Результат = СвойстваОбъектов_НайтиОбъект(ИдСвойстваЯщикОрг, BoxID, ИдСвойстваПодразделениеОрг, DepartmentKpp);
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьСопоставленныеОрганизациив1С(МассивОрганизацийПодразделений) Экспорт
		
		СвойствоЯщикОрганизации			 = НайтиСвойство(ИдентификаторСвойстваЯщикОрганизации());
		СвойствоПодразделениеОрганизации = НайтиСвойство(ИдентификаторСвойстваПодразделениеОрганизации());
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЯщикОрганизации"			, СвойствоЯщикОрганизации);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации", СвойствоПодразделениеОрганизации);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Объект КАК Организация,
		|	Организации.Значение КАК Идентификатор,
		|	Подразделения.Значение КАК КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Подразделения
		|		ПО Организации.Объект = Подразделения.Объект
		|			И (Подразделения.Свойство = &ПодразделениеОрганизации)
		|ГДЕ
		|	Организации.Свойство = &ЯщикОрганизации";
		
		СопоставленныеОрганизации = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекОрганизация Из МассивОрганизацийПодразделений Цикл
			
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("Идентификатор", ТекОрганизация.OrganizationId);
			ОтборСтрок.Вставить("КПП", СокрЛП(ТекОрганизация.DepartmentKpp));
			
			НайденныеСтроки = СопоставленныеОрганизации.НайтиСтроки(ОтборСтрок);
			
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда 
				ТекОрганизация.Организация1С = НайденныеСтроки[0].Организация;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат МассивОрганизацийПодразделений;
		
	КонецФункции
	
	Функция CounteragentBoxID_2_МассивКонтрагентов(CounteragentID, BoxID = Неопределено) Экспорт 
		
		ИдСвойстваЯщикКонтрагентаПрефикс = ИдентификаторСвойстваЯщикКонтрагентаПрефикс();
		
		Результат = СвойстваОбъектов_НайтиМассивОбъектов(ИдСвойстваЯщикКонтрагентаПрефикс, CounteragentID);
		
		Возврат Результат; 

	КонецФункции
	
	// Находит по идентификатору контрагента сопоставленного контрагента
	// в информационной базе
	//
	// Параметры:
	//	CounteragentID	- Строка	- идентификатор контрагента в сервисе Диадок
	//	BoxID			- Строка	- идентификатор ящика организации в сервисе Диадок
	//
	// Возвращаемое значение:
	//	СправочникСсылка, Неопределено - Неопределено, если контрагент не найден
	Функция CounteragentBoxID_2_Контрагент(CounteragentID, BoxID = Неопределено) Экспорт 
		
		Результат = Неопределено;
		
		КонтрагентСсылка = СвойстваОбъектов_НайтиОбъект(ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), CounteragentID);
		
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			Результат = КонтрагентСсылка;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция Контрагент_2_CounteragentBoxID(Контрагент, BoxID= Неопределено) Экспорт 
		CounteragentID = ПолучитьЗначениеСвойства(Контрагент,  ИдентификаторСвойстваЯщикКонтрагентаПрефикс());
		Возврат CounteragentID;
		
	КонецФункции
	
	Процедура Установить_CounteragentBoxID_для_Контрагент(Контрагент, CounteragentID, BoxID= Неопределено) Экспорт
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваЯщикКонтрагентаПрефикс(), , CounteragentID);
	КонецПроцедуры	

	Функция УстановитьИдентификаторЭДОДляКонтрагента(Контрагент, FnsParticipantId) Экспорт
		
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИдентификаторЭДОДляКонтрагента(),, FnsParticipantId);
		
	КонецФункции

	Функция УстановитьПараметрыМаршрутизацииДляКонтрагента(Контрагент, BoxID= Неопределено, НаименованиеПодразделения, ИДПодразделения) Экспорт
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс(), , НаименованиеПодразделения);
		УстановитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс(), , ИДПодразделения);
	КонецФункции	
	
	Функция УстановитьПараметрыМаршрутизацииДляДоговора(Договор, НаименованиеПодразделения, ИДПодразделения) Экспорт 
		УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору(), , НаименованиеПодразделения);
		УстановитьЗначениеСвойства(Договор, ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору(), , ИДПодразделения);
	КонецФункции	
	
	Процедура УстановитьЗначениеКонстанты(НаименованиеКонстанты, Знач ЗначениеКонстанты) Экспорт
		
		Если НайтиСвойство(НаименованиеКонстанты) = Неопределено Тогда
			СоздатьСвойство(Новый Структура("Ключ", НаименованиеКонстанты));
		КонецЕсли;
		
		XMLТип= XMLТипЗнч(ЗначениеКонстанты);
		
		Если XMLТип <> Неопределено И Найти(НРег(XMLТип.ИмяТипа), НРег("Ref.")) > 0 Тогда
			
			ЗаписьXML= Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			
			ЗаписатьXML(ЗаписьXML, ЗначениеКонстанты);
			
			ЗначениеКонстанты= ЗаписьXML.Закрыть();
			
		КонецЕсли;
		
		УстановитьЗначениеСвойства(МетодСервера(, "ОбъектКонстант"), НаименованиеКонстанты, "Константа", ЗначениеКонстанты);
		
	КонецПроцедуры
	
	Функция ПолучитьЗначениеКонстанты(НаименованиеКонстанты) Экспорт
		
		КлючВКэш = "Константа_" + НаименованиеКонстанты;
		
		Результат = ЭДО_Кэш_Прочитать(КлючВКэш);
		
		Если Результат = Неопределено Тогда
			
			Результат = ПолучитьЗначениеСвойства(МетодСервера(, "ОбъектКонстант"), НаименованиеКонстанты, "Константа");
			
			Если ТипЗнч(Результат) = Тип("Строка") И Лев(Результат, 1) = "<" Тогда
				
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.УстановитьСтроку(Результат);
				
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
					Результат = ПрочитатьXML(ЧтениеXML);
				КонецЕсли;
				
			КонецЕсли;
			
			ЭДО_Кэш_Поместить(КлючВКэш, Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ОбъектКонстант() Экспорт
		
		Результат = Неопределено;
		
		Если Метаданные.Константы.Найти("ВалютаРегламентированногоУчета") <> Неопределено Тогда
			Результат = Константы.ВалютаРегламентированногоУчета.Получить();
		ИначеЕсли Метаданные.Константы.Найти("ВалютаУчета") <> Неопределено Тогда
			Результат = Константы.ВалютаУчета.Получить();
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
//} АДАПТЕР

//{ РАБОТАСBASE64
	
	Функция ДобавитьНулиВПредставлениеЧисла(чс, Длина)
		
		результат = Формат(чс,"ЧН=; ЧГ=");
		Пока стрДлина(результат) < Длина Цикл 
			результат = "0"+результат
		Конеццикла;
		
		Возврат результат;
		
	конецФункции
	
	Функция ТаблицаПерекодировки() Экспорт
		
		//Формируем таблицу соответствия 3-хсимвольных 16-ричных слов и 2-х символьных 64-ричных слов
		//Готовую сформированную таблицу берем из подготовленного макета
		
		МассивТ = Новый Массив;
		МассивТ.Добавить(Тип("Строка"));
		
		Макет=			ПолучитьМакет("ТаблицаПерекодировки");
		ОбластьТела=	Макет.ПолучитьОбласть("ТелоМакета");
		
		ТабДок=			Новый ТабличныйДокумент;
		ТабДок.Вывести(ОбластьТела);
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Число2", Новый ОписаниеТипов(МассивТ));
		ТЗ.Колонки.Добавить("Число16", Новый ОписаниеТипов(МассивТ));
		ТЗ.Колонки.Добавить("Число64", Новый ОписаниеТипов(МассивТ));
		ТЗ.Индексы.Добавить("Число16");
		
		Для НомерСтроки = 1 По 4096 Цикл
			СтрокаТЗ=			ТЗ.Добавить();
			СтрокаТЗ.Число2=	ТабДок.Область(НомерСтроки, 1).Текст;
			СтрокаТЗ.Число16=	ТабДок.Область(НомерСтроки, 2).Текст;
			СтрокаТЗ.Число64=	ТабДок.Область(НомерСтроки, 3).Текст;
		КонецЦикла;
		
		Возврат ТЗ;
		
	КонецФункции	
	
	Функция ПолучитьЧисло64ИзЧисла16(Число)
		
		ТаблицаПерекодировки= МетодСервера(,"ТаблицаПерекодировки");
		
		Число16 = Число;
		Число64 = "";
		
		пока стрДлина(Число16)>0 цикл 
			разряд = ДобавитьНулиВПредставлениеЧисла(прав(Число16, 3),3);
			Число16 = ?(  стрДлина(Число16)<4  , "" , лев(Число16, стрДлина(Число16)-3)    );
			выборкаСтрок = ТаблицаПерекодировки.НайтиСтроки(Новый Структура("Число16", разряд));
			Если выборкаСтрок.количество()>0 тогда 
				Число64 =  выборкаСтрок[0].Число64+Число64
			Иначе 
				вызватьИсключение("Не удается перекодировать число "+число+"из 16-х в 64-х")
			КонецЕсли; 	  
		КонецЦикла;	
		
		возврат Число64;
	КонецФункции 
	
	Функция ПолучитьЧисло16ИзГуида(Гуид)
		возврат стрЗаменить(гуид, "-", "");
	конецфункции	
	
	Функция ПолучитьГуидИзЧисла16(Число16)
		
		Возврат сред(Число16, 1, 8)+"-"+сред(Число16, 9, 4)+"-"+сред(Число16, 13, 4)+"-"+сред(число16, 17, 4)+"-"+сред(число16, 21, 20)+"-"+сред(число16, 41, 4)+"-"+
				сред(число16, 45, 4)+"-"+сред(число16, 49, 4)+"-"+сред(число16, 53, 12);
		
	КонецФункции
	
	Функция ПолучитьЧисло2изЧисла64(Число64)
		Число64_ =   Формат(число64,"ЧН=;  ЧГ=");
		Число2 = "";
		Для ц = 1 по стрДлина(Число64_) цикл 
			символ64 = сред(число64, ц,1);
			Если символ64="A" тогда 
				Символ2 = "000000"
			ИначеЕсли символ64="B" тогда 
				Символ2 = "000001"
			ИначеЕсли символ64="C" тогда 
				Символ2 = "000010"
			ИначеЕсли символ64="D" тогда 
				Символ2 = "000011"
			ИначеЕсли символ64="E" тогда 
				Символ2 = "000100"
			ИначеЕсли символ64="F" тогда 
				Символ2 = "000101"
			ИначеЕсли символ64="G" тогда 
				Символ2 = "000110"
			ИначеЕсли символ64="H" тогда 
				Символ2 = "000111"
			ИначеЕсли символ64="I" тогда 
				Символ2 = "001000"
			ИначеЕсли символ64="J" тогда 
				Символ2 = "001001"
			ИначеЕсли символ64="K" тогда 
				Символ2 = "001010"
			ИначеЕсли символ64="L" тогда 
				Символ2 = "001011"
			ИначеЕсли символ64="M" тогда 
				Символ2 = "001100"
			ИначеЕсли символ64="N" тогда 
				Символ2 = "001101"
			ИначеЕсли символ64="O" тогда 
				Символ2 = "001110"
			ИначеЕсли символ64="P" тогда 
				Символ2 = "001111"
			ИначеЕсли символ64="Q" тогда 
				Символ2 = "010000"
			ИначеЕсли символ64="R" тогда 
				Символ2 = "010001"
			ИначеЕсли символ64="S" тогда 
				Символ2 = "010010"
			ИначеЕсли символ64="T" тогда 
				Символ2 = "010011"
			ИначеЕсли символ64="U" тогда 
				Символ2 = "010100"
			ИначеЕсли символ64="V" тогда 
				Символ2 = "010101"
			ИначеЕсли символ64="W" тогда 
				Символ2 = "010110"
			ИначеЕсли символ64="X" тогда 
				Символ2 = "010111"
			ИначеЕсли символ64="Y" тогда 
				Символ2 = "011000"
			ИначеЕсли символ64="Z" тогда 
				Символ2 = "011001"
			ИначеЕсли символ64="a" тогда 
				Символ2 = "011010"
			ИначеЕсли символ64="b" тогда 
				Символ2 = "011011"
			ИначеЕсли символ64="c" тогда 
				Символ2 = "011100"
			ИначеЕсли символ64="d" тогда 
				Символ2 = "011101"
			ИначеЕсли символ64="e" тогда 
				Символ2 = "011110"
			ИначеЕсли символ64="f" тогда 
				Символ2 = "011111"
			ИначеЕсли символ64="g" тогда 
				Символ2 = "100000"
			ИначеЕсли символ64="h" тогда 
				Символ2 = "100001"
			ИначеЕсли символ64="i" тогда 
				Символ2 = "100010"
			ИначеЕсли символ64="j" тогда 
				Символ2 = "100011"
			ИначеЕсли символ64="k" тогда 
				Символ2 = "100100"
			ИначеЕсли символ64="l" тогда 
				Символ2 = "100101"
			ИначеЕсли символ64="m" тогда 
				Символ2 = "100110"
			ИначеЕсли символ64="n" тогда 
				Символ2 = "100111"
			ИначеЕсли символ64="o" тогда 
				Символ2 = "101000"
			ИначеЕсли символ64="p" тогда 
				Символ2 = "101001"
			ИначеЕсли символ64="q" тогда 
				Символ2 = "101010"
			ИначеЕсли символ64="r" тогда 
				Символ2 = "101011"
			ИначеЕсли символ64="s" тогда 
				Символ2 = "101100"
			ИначеЕсли символ64="t" тогда 
				Символ2 = "101101"
			ИначеЕсли символ64="u" тогда 
				Символ2 = "101110"
			ИначеЕсли символ64="v" тогда 
				Символ2 = "101111"
			ИначеЕсли символ64="w" тогда 
				Символ2 = "110000"
			ИначеЕсли символ64="x" тогда 
				Символ2 = "110001"
			ИначеЕсли символ64="y" тогда 
				Символ2 = "110010"
			ИначеЕсли символ64="z" тогда 
				Символ2 = "110011"
				
			ИначеЕсли символ64="0" тогда 
				Символ2 = "110100"
			ИначеЕсли символ64="1" тогда 
				Символ2 = "110101"
			ИначеЕсли символ64="2" тогда 
				Символ2 = "110110"
			ИначеЕсли символ64="3" тогда 
				Символ2 = "110111"
			ИначеЕсли символ64="4" тогда 
				Символ2 = "111000"
			ИначеЕсли символ64="5" тогда 
				Символ2 = "111001"
			ИначеЕсли символ64="6" тогда 
				Символ2 = "111010"
			ИначеЕсли символ64="7" тогда 
				Символ2 = "111011"
			ИначеЕсли символ64="8" тогда 
				Символ2 = "111100"
			ИначеЕсли символ64="9" тогда 
				Символ2 = "111101"
			ИначеЕсли символ64="+" тогда 
				Символ2 = "111110"
			ИначеЕсли символ64="/" тогда 
				Символ2 = "111111"
			Иначе 
				вызватьИсключение("ошибочный символ "+символ64+" в 64-ричном представлении числа")
			КонецЕсли; 
			Число2 = Число2+ Символ2;
		КонецЦикла;
		Возврат Число2;
	КонецФункции	
	
	Функция ПолучитьЧисло16изЧисла2(Число)
		Число2 = Формат(Число,"ЧН=; ЧВН=; ЧГ=");
		ОстатокСимволов = (4 - стрДлина(Число2) % 4) % 4;
		Пока остатокСимволов>0 цикл 
			число2 = "0"+Число2;
			ОстатокСимволов = ОстатокСимволов - 1; 
		КонецЦикла;
		
		Число16 = "";
		//отрезаем слева куски по 4 бит и делаем число-16
		Пока число2<>"" цикл 
			Символ2 = лев(Число2, 4);
			Если Символ2 = "0000" тогда 
				Символ16 = "0"
			ИначеЕсли Символ2 = "0001" тогда 
				Символ16  = "1"
			ИначеЕсли Символ2 = "0010" тогда 
				Символ16  = "2"
			ИначеЕсли Символ2 = "0011" тогда 
				Символ16  = "3"
			ИначеЕсли Символ2 = "0100" тогда 
				Символ16  = "4"
			ИначеЕсли Символ2 = "0101" тогда 
				Символ16  = "5"
			ИначеЕсли Символ2 = "0110" тогда 
				Символ16  = "6"
			ИначеЕсли Символ2 = "0111" тогда 
				Символ16  = "7"
			ИначеЕсли Символ2 = "1000" тогда 
				Символ16  = "8"
			ИначеЕсли Символ2 = "1001" тогда 
				Символ16  = "9"
			ИначеЕсли Символ2 = "1010" тогда 
				Символ16  = "a"
			ИначеЕсли Символ2 = "1011" тогда 
				Символ16  = "b"
			ИначеЕсли Символ2 = "1100" тогда 
				Символ16  = "c"
			ИначеЕсли Символ2 = "1101" тогда 
				Символ16  = "d"
			ИначеЕсли Символ2 = "1110" тогда 
				Символ16  = "e"
			ИначеЕсли Символ2 = "1111" тогда 
				Символ16  = "f"
			Иначе 
				вызватьИсключение("ошибочный символ "+Символ2+" в двоичном представлении числа") 
			КонецЕсли;
			
			Число16 = Число16 + Символ16;
			
			Число2 = прав(число2 , стрДлина(Число2)-4);	
		КонецЦикла;
		
		возврат число16;
		
		
	КонецФункции 	
	
	Функция КонвертироватьГуидВЧисло64(Гуид) Экспорт 
		
		Число16 =   ПолучитьЧисло16ИзГуида(гуид);
		Число64  =  ПолучитьЧисло64ИзЧисла16(Число16);
		
		Число64 = Прав(Число64, Окр(СтрДлина(Число16) / 1.5));
		
		Возврат   Число64;
		
	КонецФункции	
	
	Функция КонвертироватьЧисло64вГуид(Число64) Экспорт 
		число16 = ПолучитьЧисло16изЧисла2(ПолучитьЧисло2изЧисла64(Число64));
		если стрДлина(число16)>64 тогда 
			число16 = прав(Число16, 64);
		КонецЕсли;
		
		возврат  ПолучитьГуидИзЧисла16(Число16);
		
	КонецФункции
	
//} РАБОТАСBASE64

Процедура ЗаполнитьПодписантаДляXmlTorg12(Official, Визирующий) Экспорт
	
	Official.Surname 	=  Визирующий.Surname;
	Official.FirstName  =  Визирующий.FirstName;
	Official.Patronymic =  Визирующий.Patronymic;
	Official.JobTitle   =  Визирующий.JobTitle;
	
КонецПроцедуры	

Процедура ЗаполнитьФИОПодписанта(official, фио) Экспорт
	
	ф = фио;
	
	Official.Surname =		ВыделитьСлово(ф);
	Official.FirstName=		ВыделитьСлово(ф);
	Official.Patronymic=	ВыделитьСлово(ф);
	
КонецПроцедуры

Функция КодРегиона(Знач НаименованиеРегиона) Экспорт
	
	НаименованиеРегиона= НРег(НаименованиеРегиона);
	КодРегиона= "";
	
	Если 	  Найти(НаименованиеРегиона, "адыгея") > 0 Тогда 
		КодРегиона= "01"
	ИначеЕсли Найти(НаименованиеРегиона, "башкортостан") > 0 Тогда 
		КодРегиона= "02"
	ИначеЕсли Найти(НаименованиеРегиона, "алтайский") > 0 Тогда 
		КодРегиона= "22" 
	ИначеЕсли Найти(НаименованиеРегиона, "алтай") > 0 Тогда 
		КодРегиона= "04"
	ИначеЕсли Найти(НаименованиеРегиона, "ингушетия") > 0 Тогда 
		КодРегиона= "06"
	ИначеЕсли Найти(НаименованиеРегиона, "кабардино") > 0 Тогда 
		КодРегиона= "07"
	ИначеЕсли Найти(НаименованиеРегиона, "карачаево") > 0 Тогда 
		КодРегиона= "09"
	ИначеЕсли Найти(НаименованиеРегиона, "карелия") > 0 Тогда 
		КодРегиона= "10"
	ИначеЕсли Найти(НаименованиеРегиона, "коми") > 0 Тогда 
		КодРегиона= "11"
	ИначеЕсли Найти(НаименованиеРегиона, "марий") > 0 Тогда 
		КодРегиона= "12" 
	ИначеЕсли Найти(НаименованиеРегиона, "мордовия") > 0 Тогда 
		КодРегиона= "13" 
	ИначеЕсли Найти(НаименованиеРегиона, "татарстан") > 0 Тогда 
		КодРегиона= "16" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "удмуртская") > 0 Тогда 
		КодРегиона= "18" 
	ИначеЕсли Найти(НаименованиеРегиона, "тыва") > 0 Тогда 
		КодРегиона= "17" 
	ИначеЕсли Найти(НаименованиеРегиона, "хакасия") > 0 Тогда 
		КодРегиона= "19" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашская") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "чувашия") > 0 Тогда 
		КодРегиона= "21" 
	ИначеЕсли Найти(НаименованиеРегиона, "краснодарский") > 0 Тогда 
		КодРегиона= "23" 
	ИначеЕсли Найти(НаименованиеРегиона, "приморский") > 0 Тогда 
		КодРегиона= "25" 
	ИначеЕсли Найти(НаименованиеРегиона, "ставропольский") > 0 Тогда 
		КодРегиона= "26" 
	ИначеЕсли Найти(НаименованиеРегиона, "хабаровский") > 0 Тогда 
		КодРегиона= "27" 
	ИначеЕсли Найти(НаименованиеРегиона, "амурская") > 0 Тогда 
		КодРегиона= "28" 
	ИначеЕсли Найти(НаименованиеРегиона, "архангельская") > 0 Тогда 
		КодРегиона= "29" 
	ИначеЕсли Найти(НаименованиеРегиона, "астраханская") > 0 Тогда 
		КодРегиона= "30" 
	ИначеЕсли Найти(НаименованиеРегиона, "белгородская") > 0 Тогда 
		КодРегиона= "31" 
	ИначеЕсли Найти(НаименованиеРегиона, "брянская") > 0 Тогда 
		КодРегиона= "32"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "владимирская") > 0 Тогда 
		КодРегиона= "33"                                                    
	ИначеЕсли Найти(НаименованиеРегиона, "волгоградская") > 0 Тогда 
		КодРегиона= "34" 
	ИначеЕсли Найти(НаименованиеРегиона, "вологодская") > 0 Тогда 
		КодРегиона= "35" 
	ИначеЕсли Найти(НаименованиеРегиона, "воронежская") > 0 Тогда 
		КодРегиона= "36" 
	ИначеЕсли Найти(НаименованиеРегиона, "ивановская") > 0 Тогда 
		КодРегиона= "37" 
	ИначеЕсли Найти(НаименованиеРегиона, "иркутская") > 0 Тогда 
		КодРегиона= "38" 
	ИначеЕсли Найти(НаименованиеРегиона, "калининградская") > 0 Тогда 
		КодРегиона= "39" 
	ИначеЕсли Найти(НаименованиеРегиона, "калужская") > 0 Тогда 
		КодРегиона= "40" 
	ИначеЕсли Найти(НаименованиеРегиона, "камчатский") > 0 Тогда 
		КодРегиона= "41" 
	ИначеЕсли Найти(НаименованиеРегиона, "кемеровская") > 0 Тогда 
		КодРегиона= "42" 
	ИначеЕсли Найти(НаименованиеРегиона, "кировская") > 0 Тогда 
		КодРегиона= "43" 
	ИначеЕсли Найти(НаименованиеРегиона, "костромская") > 0 Тогда 
		КодРегиона= "44" 
	ИначеЕсли Найти(НаименованиеРегиона, "курганская") > 0 Тогда 
		КодРегиона= "45"   
	ИначеЕсли Найти(НаименованиеРегиона, "курская") > 0 Тогда 
		КодРегиона= "46" 		
	ИначеЕсли Найти(НаименованиеРегиона, "ленинградская") > 0 Тогда 
		КодРегиона= "47" 
	ИначеЕсли Найти(НаименованиеРегиона, "липецкая") > 0 Тогда 
		КодРегиона= "48" 
	ИначеЕсли Найти(НаименованиеРегиона, "магаданская") > 0 Тогда 
		КодРегиона= "49" 
	ИначеЕсли Найти(НаименованиеРегиона, "московская") > 0 Тогда 
		КодРегиона= "50"
	ИначеЕсли Найти(НаименованиеРегиона, "мурманская") > 0 Тогда 
		КодРегиона= "51"
	ИначеЕсли Найти(НаименованиеРегиона, "нижегородская") > 0 Тогда 
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "новосибирская") > 0 Тогда 
		КодРегиона= "54"
	ИначеЕсли Найти(НаименованиеРегиона, "томская") > 0 Тогда 
		КодРегиона= "70"
	ИначеЕсли Найти(НаименованиеРегиона, "омская") > 0 Тогда 
		КодРегиона= "55"
	ИначеЕсли Найти(НаименованиеРегиона, "оренбургская") > 0 Тогда 
		КодРегиона= "56"
	ИначеЕсли Найти(НаименованиеРегиона, "орловская") > 0 Тогда 
		КодРегиона= "57"
	ИначеЕсли Найти(НаименованиеРегиона, "пензенская") > 0 Тогда 
		КодРегиона= "58"
	ИначеЕсли Найти(НаименованиеРегиона, "пермский") > 0 Тогда 
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "псковская") > 0 Тогда 
		КодРегиона= "60"
	ИначеЕсли Найти(НаименованиеРегиона, "ростовская") > 0 Тогда 
		КодРегиона= "61"
	ИначеЕсли Найти(НаименованиеРегиона, "рязанская") > 0 Тогда 
		КодРегиона= "62"
	ИначеЕсли Найти(НаименованиеРегиона, "самарская") > 0 Тогда 
		КодРегиона= "63"
	ИначеЕсли Найти(НаименованиеРегиона, "саратовская") > 0 Тогда 
		КодРегиона= "64"
	ИначеЕсли Найти(НаименованиеРегиона, "сахалинская") > 0 Тогда 
		КодРегиона= "65"
	ИначеЕсли Найти(НаименованиеРегиона, "саха") > 0 Тогда 
		КодРегиона= "14" 
	ИначеЕсли Найти(НаименованиеРегиона, "якутия") > 0 Тогда 
		КодРегиона= "14"	
	ИначеЕсли Найти(НаименованиеРегиона, "смоленская") > 0 Тогда 
		КодРегиона= "67"
	ИначеЕсли Найти(НаименованиеРегиона, "тамбовская") > 0 Тогда 
		КодРегиона= "68"
	ИначеЕсли Найти(НаименованиеРегиона, "тверская") > 0 Тогда 
		КодРегиона= "69"
	ИначеЕсли Найти(НаименованиеРегиона, "тульская") > 0 Тогда 
		КодРегиона= "71"
	ИначеЕсли Найти(НаименованиеРегиона, "тюменская") > 0 Тогда 
		КодРегиона= "72"
	ИначеЕсли Найти(НаименованиеРегиона, "ульяновская") > 0 Тогда 
		КодРегиона= "73"
	ИначеЕсли Найти(НаименованиеРегиона, "челябинская") > 0 Тогда 
		КодРегиона= "74"
	ИначеЕсли Найти(НаименованиеРегиона, "забайкальский") > 0 Тогда 
		КодРегиона= "75"
	ИначеЕсли Найти(НаименованиеРегиона, "ярославская") > 0 Тогда 
		КодРегиона= "76"
	ИначеЕсли Найти(НаименованиеРегиона, "еврейская") > 0 Тогда 
		КодРегиона= "79"
	ИначеЕсли Найти(НаименованиеРегиона, "ненецкий") > 0 Тогда 
		КодРегиона= ?(Найти(НаименованиеРегиона, "ямало") > 0, "89", "83")
	ИначеЕсли Найти(НаименованиеРегиона, "мансийский") > 0 Тогда 
		КодРегиона= "86"
	ИначеЕсли Найти(НаименованиеРегиона, "чукотский") > 0 Тогда 
		КодРегиона= "87"
	ИначеЕсли Найти(НаименованиеРегиона, "чеченская") > 0 Тогда 
		КодРегиона= "20"
	ИначеЕсли Найти(НаименованиеРегиона, "свердловская") > 0 Тогда 
		КодРегиона= "66"
	ИначеЕсли Найти(НаименованиеРегиона, "новгородская") > 0 Тогда 
		КодРегиона= "53"
	ИначеЕсли Найти(НаименованиеРегиона, "горьковская") > 0 Тогда   //синоним нижегородской
		КодРегиона= "52"
	ИначеЕсли Найти(НаименованиеРегиона, "бурятия") > 0 Тогда 
		КодРегиона= "03"
	ИначеЕсли Найти(НаименованиеРегиона, "пермская") > 0 Тогда     //Пермская обл - синоним Пермского края
		КодРегиона= "59"
	ИначеЕсли Найти(НаименованиеРегиона, "красноярский") > 0 Тогда 
		КодРегиона= "24"
	ИначеЕсли Найти(НаименованиеРегиона, "северная осетия") > 0 Тогда 
		КодРегиона= "15"
	ИначеЕсли Найти(НаименованиеРегиона, "камчатская") > 0 Тогда //Камчатская обл - синоним Камчатского края
		КодРегиона= "41"                                                                                                  
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "читинская") > 0 Тогда   //Забайкальский край
		КодРегиона= "75"                                                                           
	ИначеЕсли Найти(НаименованиеРегиона, "москва") > 0 Тогда 
		КодРегиона= "77"
	ИначеЕсли Найти(НаименованиеРегиона, "калмыкия") > 0 Тогда 
		КодРегиона= "08"
	ИначеЕсли Найти(НаименованиеРегиона, "дагестан") > 0 Тогда 
		КодРегиона= "05"
	ИначеЕсли Найти(НаименованиеРегиона, "санкт-петербург") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "ленинград") > 0 Тогда 
		КодРегиона= "78"
	ИначеЕсли Найти(НаименованиеРегиона, "крым") > 0 Тогда 
		КодРегиона= "91"
	ИначеЕсли Найти(НаименованиеРегиона, "севастополь") > 0 Тогда 
		КодРегиона= "92"
	КонецЕсли;
	
	Возврат КодРегиона;
	
КонецФункции	

//{Загрузка классификаторов

	Функция СтруктураКонтентаЗаполнена(СтруктураКонтента)
		
		Результат = Ложь;
		
		Для Каждого КлючИЗначение Из СтруктураКонтента Цикл
			
			ТипЗначения = ТипЗнч(КлючИЗначение.Значение);
			
			Если ТипЗначения = Тип("Структура") Тогда
				Результат = СтруктураКонтентаЗаполнена(КлючИЗначение.Значение);
			ИначеЕсли ТипЗначения = Тип("Булево") Тогда
				Результат = КлючИЗначение.Значение = Истина;
			Иначе
				Результат = ЗначениеЗаполнено(КлючИЗначение.Значение);
			КонецЕсли;
			
			Если Результат = Истина Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция Эквивалентны(стр1, стр2) 
		Если ЗначениеЗаполнено(стр1) = Ложь ИЛИ ЗначениеЗаполнено(стр2) = Ложь Тогда 
			Возврат Ложь;
		Иначе 	
			Возврат (Врег(СтрЗаменить(СокрЛП(стр1), ".", "")) = Врег(СтрЗаменить(СокрЛП(стр2), ".", "")))
		КонецЕсли;	
	КонецФункции
	
	Функция СтрокаЧтоМенять(ОшибкаВалютыНеНайдена, ОшибкаВалютыНеТотКод)
		если ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод=ложь тогда
			возврат "наименования"
		ИначеЕсли 	ОшибкаВалютыНеНайдена=ложь и   ОшибкаВалютыНеТотКод тогда
			возврат "коды"
		ИначеЕсли 	ОшибкаВалютыНеНайдена и   ОшибкаВалютыНеТотКод тогда
			возврат "наименования и коды"
		Иначе 
			возврат ""
		конецЕсли;	
		
	КонецФункции
	
	Функция ЧисловойКодЕИ(Знач КодЕИ)
		
		КодЕИ=	СтрЗаменить(КодЕИ, "0", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "1", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "2", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "3", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "4", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "5", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "6", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "7", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "8", "");
		КодЕИ=	СтрЗаменить(КодЕИ, "9", "");
		
		Если СокрЛП(КодЕИ) = "" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	Функция ПроверитьСтрану(СтранаПроисхождения, КодПроисх, ОшибкаСтраныНенайдена, ОшибкаСтраныНеТотКод)
		
		Результат = "";
		
		Если Не ЗначениеЗаполнено(СтранаПроисхождения) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ПодходящиеСтраны = МетодСервера("ГенерацияXML", "ПодходящиеСтраны", СтранаПроисхождения);
		
		Для Каждого СтрокаОКСМ Из ПодходящиеСтраны Цикл
			Если СтрокаОКСМ.Код = КодПроисх Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
		Если ПодходящиеСтраны.Количество() = 0 Тогда
			
			ОшибкаСтраныНеНайдена = Истина;
			
			Результат = "
			|Страна происхождения «<a href=""СТРАНА:" + СтранаПроисхождения.УникальныйИдентификатор() + """>" + СтранаПроисхождения + "</a>»
			|не найдена в <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a></br>";
			
		ИначеЕсли ПодходящиеСтраны.Количество() = 1 Тогда
			
			ОшибкаСтраныНеТотКод = Истина;
			
			Результат = "
			|Код страны происхождения «<a href=""СТРАНА:" + СтранаПроисхождения.УникальныйИдентификатор() + """>" + СтранаПроисхождения + "</a>» - " + КодПроисх + "
			|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> - " + ПодходящиеСтраны[0].Код + "</br>";
			
		Иначе 
			
			ОшибкаСтраныНеТотКод = Истина;
			
			Результат = "
			|Код страны происхождения «<a href=""СТРАНА:" + СтранаПроисхождения.УникальныйИдентификатор() + """>" + СтранаПроисхождения + "</a>» - " + КодПроисх + "
			|не соответствует коду по <a href=""Открыть_ОКСМ"" title=""Общероссийский классификатор стран мира"">ОКСМ</a> </br>";
			
			Для каждого СтрокаОКСМ из ПодходящиеСтраны Цикл 
				Результат = Результат + Символы.ПС + "Стране «" + СтрокаОКСМ.НаименованиеКраткое + "» соответствует код ОКСМ " + СтрокаОКСМ.Код + "</br>";
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьВнешнююПечатнуюФормуДокумента(DocumentType, ДокументСсылка) Экспорт
		
		Результат = Неопределено;
		
		Если DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Результат = ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка);
			
		ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
			
			Результат = ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка);
			
		ИначеЕсли DocumentType = "ReconciliationAct" Тогда
			
			Результат = ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьВнешнююПечатнуюФормуСчета(ДокументСсылка) Экспорт
		
		Результат = Неопределено;
		
		ИдПечатнойФормы = ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаСчета());
		
		Если ЗначениеЗаполнено(ИдПечатнойФормы) Тогда
			Результат = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПечатнойФормы));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьВнешнююПечатнуюФормуАкта(ДокументСсылка) Экспорт
		
		Результат = Неопределено;
		
		ИдПечатнойФормы = ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАкта());
		
		Если ЗначениеЗаполнено(ИдПечатнойФормы) Тогда
			Результат = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПечатнойФормы));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ПолучитьВнешнююПечатнуюФормуАктаСверки(ДокументСсылка) Экспорт
		
		Результат = Неопределено;
		
		ИдПечатнойФормы = ПолучитьЗначениеСвойства(ДокументСсылка.Организация, ИдентификаторСвойстваВнешняяПечатнаяФормаАктаСверки());
		
		Если ЗначениеЗаполнено(ИдПечатнойФормы) Тогда
			Результат = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдПечатнойФормы));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
//}

//{ CONTENT

#Область Перечисления

// Описывает возможные значения базовых версий форматов контента.
// 
// Возвращаемое значение:
//  Структура - см. тело функции.
//
Функция БазовыеФорматы() Экспорт
	
	Результат = Новый Структура;
	
	// универсальный передаточный документ в формате 820@
	Результат.Вставить("utd820", "utd820");
	
	// универсальный передаточный документ в формате 155@
	Результат.Вставить("utd", "utd");
	
	// универсальный корректировочный документ
	Результат.Вставить("ucd", "ucd");
	
	// накладная в формате 551@
	Результат.Вставить("tovtorg", "tovtorg");
	
	// акт выполненных работ в формате 552@
	Результат.Вставить("rezru", "rezru");
	
	// счет-фактура
	Результат.Вставить("invoice", "invoice");
	
	// корректировочный счет-фактура
	Результат.Вставить("invoicecor", "invoicecor");
	
	// накладная в формате 172@
	Результат.Вставить("torg12", "torg12");
	
	// акт выполненных работ в формате 172@
	Результат.Вставить("act", "act");
	
	// счет на оплату
	Результат.Вставить("proformainvoice", "proformainvoice");
	
	// неизвестное: свои типы и т.д.
	Результат.Вставить("unknown", "unknown");
	
	// полуформализованный и неформализованный
	Результат.Вставить("v1", "v1");
	
	Возврат Результат;
	
КонецФункции

// Описывает возможные значения типов протоконтента.
// 
// Возвращаемое значение:
//  Структура - см. тело функции.
//
Функция ТипыКонтента() Экспорт
	
	Результат = Новый Структура;
	
	// УПД в формате 820@
	Результат.Вставить("Utd820SellerContent", "Utd820SellerContent");
	
	// УПД в формате 155@
	Результат.Вставить("UtdSellerContent", "UtdSellerContent");
	
	// УКД в формате 189@
	Результат.Вставить("UcdSellerContent", "UcdSellerContent");
	
	// Товарная накладная в формате 551@
	Результат.Вставить("TovTorgSellerContent", "TovTorgSellerContent");
	
	// Товарная накладная в формате 172@
	Результат.Вставить("Torg12SellerContent", "Torg12SellerContent");
	
	// Акт выполненных работ в формте 552@
	Результат.Вставить("Act552SellerContent", "Act552SellerContent");
	
	// Акт выполненных работ в формте 172@
	Результат.Вставить("AcceptanceCertificateSellerContent", "AcceptanceCertificateSellerContent");
	
	// Счет-фактура
	Результат.Вставить("InvoiceContent", "InvoiceContent");
	
	// Корректировочный счет-фактура
	Результат.Вставить("InvoiceCorrectionContent", "InvoiceCorrectionContent");
	
	// Счет на оплату
	Результат.Вставить("ProformaInvoiceContent", "ProformaInvoiceContent");
	
	// Полуформализованный или неформализованный
	Результат.Вставить("NonformalizedContent", "NonformalizedContent");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

	Функция СформироватьПредставлениеИННКПП(Inn, Kpp) Экспорт
		Если ЗначениеЗаполнено(Kpp) тогда 
			возврат "ИНН/КПП: "+Inn+"/"+Kpp
		ИначеЕсли ЗначениеЗаполнено(inn) тогда 
			возврат "ИНН: "+Inn
		Иначе 
			возврат ""
		КонецЕсли;	
	конецФункции
	
	Функция ПредставлениеИННКПП(CounteragentContent) Экспорт
		ИНН =   CounteragentContent.inn;
		КПП =   CounteragentContent.kpp;
		Если стрДлина(ИНН)=10  тогда 
			возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/"+?(ЗначениеЗаполнено(КПП), КПП, "-");
		Иначе 
			возврат ?(ЗначениеЗаполнено(ИНН), ИНН, "-")+"/-";    
		КонецЕсли;
	КонецФункции	
	
	//{ ОБЩИЕ ИНИЦАЛИЗАЦИИ
		
		Процедура ЗаполнитьStructedAdditionalInfos(StructedAdditionalInfos, ДопСведения) Экспорт
			
			МассивДопСведений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);	
			
			Для Каждого Стр Из МассивДопСведений Цикл
				//СтруктураAdditionalInfo = ПолучитьСтруктуруAdditionalInfos();
				СтруктураAdditionalInfo = МетодСервера("Модуль_ИнтеграцияУниверсальный", "Новый_StructedAdditionalInfo");
				 
				МассивКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр, "=");
				
				СтруктураAdditionalInfo.Key 	= МассивКлючЗначение[0];
				СтруктураAdditionalInfo.Value 	= МассивКлючЗначение[1];
				
				Если ЗначениеЗаполнено(СтруктураAdditionalInfo.Value) Тогда
					StructedAdditionalInfos.Добавить(СтруктураAdditionalInfo);
				КонецЕсли;
								
			КонецЦикла;
			
		КонецПроцедуры
		
	//} ОБЩИЕ ИНИЦАЛИЗАЦИИ
	
	//{ Валидация

		Функция ДобавитьОшибкуВалидации(СписокОшибок = Неопределено, ТекстОшибки, СсылкаДляИсправления = Неопределено) Экспорт
		
		    Результат = МетодСервера("ГенерацияXML", "ДобавитьОшибкуВалидации", СписокОшибок, ТекстОшибки, СсылкаДляИсправления);
		    Возврат Результат;			
			
		КонецФункции

		Функция ДобавитьГруппуОшибокВалидации(СписокОшибок, СписокДобавляемыхОшибок, ШаблонЗаголовка, СсылкаДляИсправления = Неопределено) Экспорт
			
			Результат = МетодСервера(	"ГенерацияXML", 
										"ДобавитьГруппуОшибокВалидации", 
										СписокОшибок,
										СписокДобавляемыхОшибок,
										ШаблонЗаголовка,
										СсылкаДляИсправления	);
			
			Возврат Результат;
			
		КонецФункции

		Процедура ДополнитьМассивОшибокВалидации(СписокОшибок1, СписокОшибок2)
			
			МетодСервера("ГенерацияXML", "ДополнитьМассивОшибокВалидации", СписокОшибок1, СписокОшибок2);
			
		КонецПроцедуры

		Функция ОформитьОшибкиВHTML(СписокОшибок, ЗаголовокОшибки = "") Экспорт
			
			Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, ЗаголовокОшибки);
			
			Если НЕ ЗначениеЗаполнено(ЗаголовокОшибки) Тогда
				// Если заголовок не указан, ставим рядом с сообщением пиктограмму ошибки.
				// Используется при массовой отправке документов: когда из списка открываем документ, отправка которого не удалась из-за параметров подписанта.
				КартинкаBase64 = Base64Строка(ЭДО_БиблиотекаКартинок().ВниманиеОшибка.ПолучитьДвоичныеДанные());
				Результат = СтрЗаменить(Результат, "<p>", "<p><IMG src=""data:image/png;base64," + КартинкаBase64 + """> ");
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции
		
	//} Валидация
	
	//{ Torg12
		
		//{ Валидация Torg12
		
			Функция ВалидацияXmlTorg12Content(Знач XmlTorg12Content) Экспорт
				
                СписокОшибок = МетодСервера("ГенерацияXML", "ВалидацияXmlTorg12Content", XmlTorg12Content);
				
				ПроверитьПараметрыПодписанияАктаНакладной(СписокОшибок, XmlTorg12Content.Seller.Ссылка, Ложь);
				
				Если  НЕ СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyAllowedBy)
					И НЕ СтруктураКонтентаЗаполнена(XmlTorg12Content.ChiefAccountant)
					И НЕ СтруктураКонтентаЗаполнена(XmlTorg12Content.SupplyPerformedBy) Тогда
					
					ДобавитьОшибкуВалидации(СписокОшибок, "Не указано ни одного лица, подписавшего документ. Заполните ответственных лиц организации: руководителя или главного бухгалтера.");
					
				КонецЕсли;
				
				Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, "При формировании файла накладной обнаружены следующие ошибки:");
                Возврат Результат;
				
			Конецфункции	
			
		//} Валидация Torg12
		
	//} Torg12
	
	//{ Invoice
		
		//{ Валидация INVOICE
		
			Функция ВалидацияInvoiceContent(InvoiceContent, ДокументСсылка) Экспорт
				
                СписокОшибок = МетодСервера("ГенерацияXML", "ВалидацияInvoiceContent", InvoiceContent);
				
				Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, "При формировании файла счета-фактуры обнаружены следующие ошибки:");
                Возврат Результат;
				
			конецФункции
			
		//} Валидация Invoice
		
	//} Invoice
	
	//{ InvoiceCorrection
		
		//{ Валидация InvoiceCorrection

			Функция ВалидацияInvoiceCorrectionContent(InvoiceCorrectionContent, ДокументССылка) Экспорт
				
				СписокОшибок = МетодСервера("ГенерацияXML", "ВалидацияInvoiceCorrectionContent", InvoiceCorrectionContent);
				
				Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, "При формировании файла корректировочного счета-фактуры обнаружены следующие ошибки:");
                Возврат Результат;

			КонецФункции	
			
		//} Валидация InvoiceCorrection
		
	//} InvoiceCorrection
	
	//{ XmlAcceptanceCertificate
		
		//{ Валидация XmlAcceptanceCertificate
		
			Функция ВалидацияXmlAcceptanceCertificateContent(xmlAcceptanceCertificateContent) Экспорт
				
				СписокОшибок = МетодСервера("ГенерацияXML", "ВалидацияxmlAcceptanceCertificateContent", xmlAcceptanceCertificateContent);
				
				ПроверитьПараметрыПодписанияАктаНакладной(СписокОшибок, xmlAcceptanceCertificateContent.Seller.Ссылка, Истина);
				
				Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, "При формировании файла акта выполненных работ обнаружены следующие ошибки:");
                Возврат Результат;

				
			КонецФункции	                                                         
			
		//} Валидация XmlAcceptanceCertificate
		
	//} XmlAcceptanceCertificate

	//{ UniversalTransferDocument
		
		//{ Валидация UniversalTransferDocument
		
			Функция ВалидацияUTD820(UTDContent) Экспорт
				
				СписокОшибок = МетодСервера("ГенерацияXML", "ВалидацияUTD820", UTDContent);
				
				Если UTDContent.Свойство("ОшибкиВДанных") Тогда
					// можно утвердить этот контракт и сделать общим для всех модулей. Тогда этот код уедет в content.epf.
					ДобавитьГруппуОшибокВалидации(СписокОшибок, UTDContent.ОшибкиВДанных, "Ошибки в данных");
				КонецЕсли;
				
				Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, "При формировании файла УПД обнаружены следующие ошибки:");
				
				Возврат Результат;
				
			КонецФункции
			
			Функция ВалидацияUTD(UTDContent) Экспорт
				
				СписокОшибок = МетодСервера("ГенерацияXML", "ВалидацияUTD", UTDContent);
				
				Если UTDContent.Свойство("ОшибкиВДанных") Тогда
					// можно утвердить этот контракт и сделать общим для всех модулей. Тогда этот код уедет в content.epf.
					ДобавитьГруппуОшибокВалидации(СписокОшибок, UTDContent.ОшибкиВДанных, "Ошибки в данных");
				КонецЕсли;
				
				Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, "При формировании файла УПД обнаружены следующие ошибки:");
				
				Возврат Результат;
				
			КонецФункции
			
		//} Валидация UniversalTransferDocument
		
	//} UniversalTransferDocument
	
	//{ UniversalCorrectionDocument
		
		//{ Валидация UniversalCorrectionDocument
		
		Функция ВалидацияUCD(UCDContent) Экспорт
			
            СписокОшибок = МетодСервера("ГенерацияXML", "ВалидацияUCD", UCDContent);
			
			Если  UCDContent.Свойство("ОшибкиВДанных") Тогда
				ДополнитьМассивОшибокВалидации(СписокОшибок, UCDContent.ОшибкиВДанных);
			КонецЕсли;	
			
			Результат = МетодСервера("ГенерацияXML", "ОформитьОшибкиВHTML", СписокОшибок, "При формировании файла УКД обнаружены следующие ошибки:");
            Возврат Результат;
			
		КонецФункции
		
		//} Валидация UniversalCorrectionDocument
		
	//} UniversalCorrectionDocument
	
	//{ Валидация СтруктураДокумента
	
	Функция ВалидацияСтруктурыДокумента(ПротоСтруктура) Экспорт 
		
		ТекстОшибок = "";
		Ошибки 		= Новый Массив;
		Контент 	= Неопределено;
		ТипКонтента = Неопределено;
		
		Если ТипЗнч(ПротоСтруктура) <> Тип("Структура") Тогда 
			ОписаниеОш = "ru = 'Ошибка валидации входящего документа: 
                          |неверно сформировано описание документа!'";
			ВызватьИсключение ОписаниеОш;
		КонецЕсли;
		
		Если Не ПротоСтруктура.Свойство("Контент", Контент) Тогда // нечего проверять
			Возврат ТекстОшибок;
		КонецЕсли;
		
		Если Не ПротоСтруктура.Свойство("ТипКонтента", ТипКонтента) Тогда // не знаем, что проверять
			Возврат ТекстОшибок;
		КонецЕсли;
		
		ТипКонтента = ВРег(ТипКонтента);
		
		Если ЕстьОшибкиПоНалогообложению(ПротоСтруктура) Тогда 
			
			ОписаниеОш = НСтр("ru = 'Документ содержит строки с пометкой ""НДС исчисляется налоговым агентом"" совместно с другими ставками НДС.
                               |В типовых решениях 1С не поддерживается отражение приобретения разнородных ценностей в одном документе поступления.'");
			
			Ошибки.Добавить(ОписаниеОш);
			
		КонецЕсли;
		
		Если ПрименяетсяОбратноеОбложениеНДС(ПротоСтруктура) И Не КонфигурацияПоддерживаетОбратноеОбложениеНДСПриПокупке() Тогда 
			
			ОписаниеОш = НСтр("ru = 'Версия конфигурации не поддерживает покупку товаров, облагаемых НДС у покупателя (п. 8 ст. 161 НК РФ).'");
			
			Ошибки.Добавить(ОписаниеОш);
			
		КонецЕсли;
		
		Для Каждого ОписаниеОш Из Ошибки Цикл 
			ТекстОшибок = ТекстОшибок + "<p>" + ОписаниеОш + "</p>"
		КонецЦикла;
		
		ТекстОшибок = ОформитьОшибкиВHTML(ТекстОшибок);
		
		Возврат ТекстОшибок;
		
	КонецФункции
	
	// Проверяет, есть ли хотя бы в одной строке любой табличной части документа
	// ставка НДС "НДС исчисляется налоговым агентом"
	//
	// Параметры:
	//  ПротоСтруктура - Структура - Proto документа (см. описание Модуль_Клиент.ПолучитьProto())
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если хотя бы в одной строке есть ставка ИсчНалАг
	//
	Функция ПрименяетсяОбратноеОбложениеНДС(ПротоСтруктура)
		
		Результат = Ложь;
		
		ПроверяемыеТабЧасти = ПутиКПолюTaxRateПоТипуКонтента(ПротоСтруктура.ТипКонтента);
		
		Для Каждого ТЧ Из ПроверяемыеТабЧасти Цикл 
			
			Коллекция = ЗначениеСвойстваСложнойСтруктуры(ПротоСтруктура.Контент, ТЧ.Значение);
			
			Если ЕстьСтрокиСОбратнымПорядкомОбложенияНДС(Коллекция, ТЧ.Представление) Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Проверяет протодокумент на ошибки, связанные с наличием в
	// табличных частях документа строк с разным порядком обложения НДС
	//
	// Параметры:
	//  ПротоСтруктура - Структура - Proto документа (см. описание Модуль_Клиент.ПолучитьProto())
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если есть ошибки
	//
	Функция ЕстьОшибкиПоНалогообложению(ПротоСтруктура)
		
		ПроверяемыеТабЧасти = ПутиКПолюTaxRateПоТипуКонтента(ПротоСтруктура.ТипКонтента);
		
		ЕстьОшибки = Ложь;
		
		Для Каждого ТЧ Из ПроверяемыеТабЧасти Цикл 
			
			Коллекция = ЗначениеСвойстваСложнойСтруктуры(ПротоСтруктура.Контент, ТЧ.Значение);
			
			Если ЕстьСтрокиСРазнымПорядкомОбложенияНДС(Коллекция, ТЧ.Представление) Тогда 
				ЕстьОшибки = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ЕстьОшибки;
		
	КонецФункции
	
	// Проверяет, есть ли в коллекции итемы с разным порядком обложения НДС.
	//
	// Параметры:
	//  КоллекцияСтрок	 - Массив - содержит структуры - элементы коллекции Collection. 
	// 								Например, для UcdSellerContent это массив структур, соответствующих элементу 
	// 								"ExtendedInvoiceCorrectionItem" коллекции "InvoiceCorrectionTable.Items".
	//  ПолеСтавкаНДС	 - Строка - полный путь к полю TaxRate элемента коллекции.
	// 								Например, для UcdSellerContent это "CorrectedValues.TaxRate"
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если есть строки с обычными ставками и ставкой ИсчНалАг
	//
	Функция ЕстьСтрокиСРазнымПорядкомОбложенияНДС(КоллекцияСтрок, ПолеСтавкаНДС = "TaxRate")
		
		Результат = Ложь;
		
		Если КоллекцияСтрок.Количество() < 2 Тогда 
			Возврат Результат;
		КонецЕсли;
		
		ЕстьСтрокиСОбратнымОбложениемНДС 	= Ложь;
		ЕстьСтрокиСПрямымОбложениемНДС 		= Ложь;
		
		Для Каждого Элемент Из КоллекцияСтрок Цикл 
			
			СтавкаНДС = ЗначениеСвойстваСложнойСтруктуры(Элемент, ПолеСтавкаНДС);
			
			Если НДСИсчисляетсяНалоговымАгентом(СтавкаНДС) Тогда 
				ЕстьСтрокиСОбратнымОбложениемНДС = Истина;
			Иначе 
				ЕстьСтрокиСПрямымОбложениемНДС = Истина;
			КонецЕсли;
			
			Если ЕстьСтрокиСПрямымОбложениемНДС И ЕстьСтрокиСОбратнымОбложениемНДС Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Проверяет, есть ли в коллекции итемы с разным порядком обложения НДС.
	//
	// Параметры:
	//  КоллекцияСтрок	 - Массив - содержит структуры - элементы коллекции Collection. 
	// 								Например, для UcdSellerContent это массив структур, соответствующих элементу 
	// 								"ExtendedInvoiceCorrectionItem" коллекции "InvoiceCorrectionTable.Items".
	//  ПолеСтавкаНДС	 - Строка - полный путь к полю TaxRate элемента коллекции.
	// 								Например, для UcdSellerContent это "CorrectedValues.TaxRate"
	// 
	// Возвращаемое значение:
	//  Булево - Истина, если есть хотя бы одна строка со ставкой ИсчНалАг
	//
	Функция ЕстьСтрокиСОбратнымПорядкомОбложенияНДС(КоллекцияСтрок, ПолеСтавкаНДС = "TaxRate")
		
		Результат = Ложь;
		
		Для Каждого Элемент Из КоллекцияСтрок Цикл 
			
			СтавкаНДС = ЗначениеСвойстваСложнойСтруктуры(Элемент, ПолеСтавкаНДС);
			
			Если НДСИсчисляетсяНалоговымАгентом(СтавкаНДС) Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	// Возвращает список имен коллекций и полных путей к полю TaxRate.
	//
	// Параметры:
	//  ТипКонтента - Строка - Тип контента (см. http://1c-docs.diadoc.ru/ru/latest/BaseContent.html )
	// 
	// Возвращаемое значение:
	//  СписокЗначений - элемент списка содержит путь к коллекции итемов, представление - путь к полю TaxRate
	//
	Функция ПутиКПолюTaxRateПоТипуКонтента(ТипКонтента)
		
		ТипыКонтента = ТипыКонтента();
		
		ТабличныеЧасти = Новый СписокЗначений; // Значение - путь к коллекции итемов, представление - путь к полю TaxRate
		
		Если ТипКонтента = ТипыКонтента.Utd820SellerContent Тогда 
			
			ТабличныеЧасти.Добавить("Table.Items", "TaxRate");
			
		ИначеЕсли ТипКонтента = ТипыКонтента.UtdSellerContent Тогда 
			
			ТабличныеЧасти.Добавить("InvoiceTable.Items", "TaxRate");
			
		ИначеЕсли ТипКонтента = ТипыКонтента.Torg12SellerContent Тогда 
			
			ТабличныеЧасти.Добавить("Items", "TaxRate");
			
		ИначеЕсли ТипКонтента = ТипыКонтента.UcdSellerContent Тогда 
			
			ТабличныеЧасти.Добавить("InvoiceCorrectionTable.Items", "OriginalValues.TaxRate");
			ТабличныеЧасти.Добавить("InvoiceCorrectionTable.Items", "CorrectedValues.TaxRate");
			
		КонецЕсли;
		
		Возврат ТабличныеЧасти;
		
	КонецФункции
	
	// Получает по полному имени свойства сложной структуры его значение.
	//
	// Параметры:
	//  СложнаяСтруктура	 - Структура - Любая структура, значениями которой могут быть и другие структуры.
	//  ПолноеИмяСвойства	 - Строка	 - Полное имя (ключ) свойства.
	// 
	// Возвращаемое значение:
	//  Произвольное - значение структуры.
	//
	// Пример:
	//  СложнаяСтруктура соответствует объекту ExtendedInvoiceCorrectionItem, а полное имя свойства,
	//  содержащего измененную цену - "CorrectedValues.Price"
	//
	Функция ЗначениеСвойстваСложнойСтруктуры(СложнаяСтруктура, ПолноеИмяСвойства)
		
		Результат = Неопределено;
		
		Попытка
			Результат = Вычислить("СложнаяСтруктура."+ПолноеИмяСвойства);
		Исключение
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	//} Валидация СтруктураДокумента
	
	Процедура ПроверитьПараметрыПодписанияАктаНакладной(СписокОшибок, КонтрагентСсылка, ЭтоАкт)

		ПараметрыПодписания = ПолучитьПараметрыПодписанияТ12вДиадок(КонтрагентСсылка);
		ОшибкиПодписания = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыПодписания.ФИОПодписанта) Тогда
			
			ДобавитьОшибкуВалидации(ОшибкиПодписания, "Отсутствует ФИО подписанта");
			ДобавитьОшибкуВалидации(ОшибкиПодписания, "Перейдите в <окно настройки> и заполните отсутствующие поля", "НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ");
			
		КонецЕсли;
		
		ПроверятьДолжностьПодписанта = (ЭтоАкт или ПараметрыПодписания.СпособПодписания <> "2");
		// Для ТОРГ12 не проверяем должность, если подписывает главный бухгалтер - вариант 2
		// Для Акта проверяем всегда.
		
		Если  НЕ ЗначениеЗаполнено(ПараметрыПодписания.ДолжностьПодписанта)
			И ПроверятьДолжностьПодписанта Тогда
			
			ДобавитьОшибкуВалидации(ОшибкиПодписания, "Отсутствует должность подписанта");
			ДобавитьОшибкуВалидации(ОшибкиПодписания, "Перейдите в <настройки сотрудника Диадока> и заполните должность. После этого перезапустите модуль.", "НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА");
			
		КонецЕсли;
		
		ДобавитьГруппуОшибокВалидации(СписокОшибок, ОшибкиПодписания, "Не настроены параметры подписания документа");
		
	КонецПроцедуры	
	
//} CONTENT

Функция ПолучитьКоличествоДнейОтсрочки(Организация) Экспорт
	
	Результат= МетодСервера(,"ПолучитьЗначениеСвойства", Организация, "РазрешенныйПериодКорректировки");
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Число(Результат);
	Иначе 
		Возврат 15;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьТаблицуДокументовДиадокДокументами1С(ТаблицаДокументовДиадок) Экспорт
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИндексСтроки"	  , Новый ОписаниеТипов("Число"));
	ТаблицаДокументов.Колонки.Добавить("DocumentID"  	  , Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТаблицаДокументов.Колонки.Добавить("BoxID"		  	  , Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТаблицаДокументов.Колонки.Добавить("ТолькоСчетФактура", Новый ОписаниеТипов("Булево"));
	
	ДобавитьУсловиеТолькоСчетФактура = Ложь;
	
	ПредставлениеДокументов = МетодСервера(, "ПредставлениеДокументов");
	
	ИндексСтроки = -1;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДокументовДиадок Цикл
		
		ИндексСтроки = ИндексСтроки + 1;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.ИндексСтроки = ИндексСтроки;
		НоваяСтрока.DocumentID 	 = КонвертироватьГуидВЧисло64(СтрокаТаблицы.DocumentID);
		НоваяСтрока.BoxID	   	 = СтрокаТаблицы.BoxID;
		
		// Для исходящих полных УПД и УКД ограничиваем тип документа счетом-фактурой выданным.
		Если СтрокаТаблицы.DocumentDirection = "Outbound"
			И ((СтрокаТаблицы.DocumentType = "UniversalTransferDocument" И СтрокаТаблицы.DocumentFunction = "СЧФДОП")
			ИЛИ (СтрокаТаблицы.DocumentType = "UniversalCorrectionDocument" И СтрокаТаблицы.DocumentFunction = "КСЧФДИС")) Тогда
			
			НоваяСтрока.ТолькоСчетФактура	 = Истина;
			ДобавитьУсловиеТолькоСчетФактура = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавитьУсловиеТолькоСчетФактура Тогда
		
		Если ЗначениеЗаполнено(ПредставлениеДокументов.СчетФактураВыданныйНаАванс) Тогда
			
			ТекстУсловияТолькоСчетФактура =
			"ГДЕ
			|	(НЕ ТаблицаДокументов.ТолькоСчетФактура
			|			ИЛИ Свойство_DocumentID.Объект ССЫЛКА Документ." + ПредставлениеДокументов.СчетФактураВыданный + "
			|			ИЛИ Свойство_DocumentID.Объект ССЫЛКА Документ." + ПредставлениеДокументов.СчетФактураВыданныйНаАванс + ")"; 
			
		Иначе
			ТекстУсловияТолькоСчетФактура =
			"ГДЕ
			|	(НЕ ТаблицаДокументов.ТолькоСчетФактура
			|			ИЛИ Свойство_DocumentID.Объект ССЫЛКА Документ." + ПредставлениеДокументов.СчетФактураВыданный + ")";
		КонецЕсли;
		
	Иначе
		ТекстУсловияТолькоСчетФактура = "";
	КонецЕсли;
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексСтроки,
	|	ТаблицаДокументов.DocumentID,
	|	ТаблицаДокументов.BoxID,
	|	ТаблицаДокументов.ТолькоСчетФактура
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексСтроки,
	|	Свойство_DocumentID.Объект,
	|	ТаблицаДокументов.BoxID
	|ПОМЕСТИТЬ ВТ_DocumentId
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Свойство_DocumentID
	|		ПО (Свойство_DocumentID.Свойство В (&СвойствоDocumentId, &СвойствоDocumentIdСчет))
	|			И ТаблицаДокументов.DocumentID = Свойство_DocumentID.Значение
	|" + ТекстУсловияТолькоСчетФактура + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_DocumentId.ИндексСтроки,
	|	ВТ_DocumentId.Объект
	|ИЗ
	|	ВТ_DocumentId КАК ВТ_DocumentId
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Свойство_BoxID
	|		ПО (Свойство_BoxID.Свойство В (&СвойствоBoxId, &СвойствоBoxIdСчет))
	|			И ВТ_DocumentId.Объект = Свойство_BoxID.Объект
	|			И ВТ_DocumentId.BoxID = Свойство_BoxID.Значение");
	
	Запрос.УстановитьПараметр("СвойствоDocumentId"	  , НайтиСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадок()));
	Запрос.УстановитьПараметр("СвойствоDocumentIdСчет", НайтиСвойство(ИдентификаторСвойстваИдентификаторДокументаВДиадокСчет()));
	
	Запрос.УстановитьПараметр("СвойствоBoxId"	 , НайтиСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок()));
	Запрос.УстановитьПараметр("СвойствоBoxIdСчет", НайтиСвойство(ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадокСчет()));
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос = Неопределено;
	ТаблицаДокументов = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		РезультатЗапроса = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			ТаблицаДокументовДиадок[Выборка.ИндексСтроки].ПервичныйДокумент = Выборка.Объект;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыПодписанияТ12вДиадок(Организация) Экспорт 
	
	СпособПодписания = ПолучитьНастройкуПользователя(ИдентификаторСвойстваСпособПодписанияТ12());
	СпособПодписания = ?(НЕ ЗначениеЗаполнено(СпособПодписания), "1", СпособПодписания);
	
	ДанныеСотрудника = ПолучитьДанныеСотрудника(Организация);
	
	Результат = Новый Структура;
	Результат.Вставить("СпособПодписания", 		СпособПодписания);
	Результат.Вставить("ФИОПодписанта", 		ДанныеСотрудника.ФИО);
	Результат.Вставить("ДолжностьПодписанта",  	ДанныеСотрудника.Должность);	
	
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о ФИО и должности ответственного лица организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой нужно получить сведения.
//
// Возвращаемое значение:
//   Структура - информация о сотруднике в виде структуры с полями:
//   	* Фамилия - Строка
//   	* Имя - Строка
//   	* Отчество - Строка
//   	* Должность - Строка - название должности
//   	* ФИО - Строка - полное ФИО сотрудника
//
Функция ПолучитьДанныеСотрудника(Организация) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия", 	"");
	Результат.Вставить("Имя", 		"");
	Результат.Вставить("Отчество", 	"");
	Результат.Вставить("Должность", "");
	Результат.Вставить("ФИО", 		"");
	
	ДанныеСотрудников = ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресДанныеСотрудников);
	
	Если ДанныеСотрудников <> Неопределено Тогда
		
		Результат = ДанныеСотрудников[Организация];
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПодписиСогласующим(Организация) Экспорт
	
	ПараметрыПодписания = ПолучитьПараметрыПодписанияТ12вДиадок(Организация);
	
	СтруктураSigner = Новый Структура("СпособПодписания, ДолжностьПодписанта, Фамилия, Имя, Отчество");
	
	ФИО = ПараметрыПодписания.ФИОПодписанта;
	
	СтруктураSigner.Фамилия 	= ВыделитьСлово(ФИО);
	СтруктураSigner.Имя 		= ВыделитьСлово(ФИО);
	СтруктураSigner.Отчество 	= ВыделитьСлово(ФИО);
	СтруктураSigner.ДолжностьПодписанта	= ПараметрыПодписания.ДолжностьПодписанта;
	СтруктураSigner.СпособПодписания	= ПараметрыПодписания.СпособПодписания;
	
	Возврат СтруктураSigner; 
	
КонецФункции

Функция ПолучитьИдентификаторЭДОДляКонтрагента(Контрагент) Экспорт
	
	Возврат ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИдентификаторЭДОДляКонтрагента());
			
КонецФункции

Процедура УстановитьПараметрыПодписанияТ12вДиадок(ПараметрыПодписания) Экспорт 
	
	Если ПараметрыПодписания.Свойство("СпособПодписания") Тогда 
		УстановитьНастройкуПользователя(ИдентификаторСвойстваСпособПодписанияТ12(), ПараметрыПодписания.СпособПодписания)  
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНастройкиПодписантаСогласование(ФИОПодписантаПолучателя, ДолжностьПодписанта) Экспорт
	УстановитьНастройкуПользователя(ИдентификаторСвойстваIdПодписантаСогласование(), 		ФИОПодписантаПолучателя);
	УстановитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписантаСогласование(), ДолжностьПодписанта);
КонецПроцедуры

Функция ПолучитьНастройкиПодписантаСогласование() Экспорт
	
	НастройкиПодписантаСогласование = Новый Структура();
	
	НастройкиПодписантаСогласование.Вставить("ИдентификаторКонечногоПодписанта",	ПолучитьНастройкуПользователя(ИдентификаторСвойстваIdПодписантаСогласование()));  
	НастройкиПодписантаСогласование.Вставить("ДолжностьКонечногоПодписанта",		ПолучитьНастройкуПользователя(ИдентификаторСвойстваДолжностьПодписантаСогласование()));  
	
	Возврат НастройкиПодписантаСогласование;
	
КонецФункции

Функция ПолучитьСтруктуруОшибкиВнешнейКомпоненты(Подробности) Экспорт
	стРасшифровкаОшибки = Новый Структура;
	
	Поз = Найти(Подробности, "##");
	
	ТекстОшибкиCOM = Сред(Подробности, Поз);
	КодОшибкиCOM = Сред(ТекстОшибкиCOM, 3, 3);
	ПояснениеКодаОшибкиCOM = Сред(ТекстОшибкиCOM, 7, Найти(ТекстОшибкиCOM, "]") - 7);
	ПояснениеОшибкиCOM = Сред(ТекстОшибкиCOM, Найти(ТекстОшибкиCOM, "]") + 1);
	
	стРасшифровкаОшибки.Вставить("Заголовок", ПояснениеКодаОшибкиCOM);
	стРасшифровкаОшибки.Вставить("ОписаниеОшибки", ПояснениеОшибкиCOM);
	стРасшифровкаОшибки.Вставить("Подробности", Подробности);
	стРасшифровкаОшибки.Вставить("Спецификатор");
	
	Если Поз = 0 Тогда
		
		ТекстОшибкиCOM = СокрЛП(СтрЗаменить(Сред(Подробности, Найти(Подробности, "}:")), "}:", ""));
		ТекстОшибкиCOM = Лев(ТекстОшибкиCOM, Найти(ТекстОшибкиCOM, ":"));
		
		стРасшифровкаОшибки.Вставить("Заголовок", 		"Ошибка работы модуля");
		стРасшифровкаОшибки.Вставить("ОписаниеОшибки", 	ТекстОшибкиCOM);
		стРасшифровкаОшибки.Вставить("Спецификатор", 	"UnknownError");
		
		Возврат стРасшифровкаОшибки;
		
	КонецЕсли;
	
	Если Лев(КодОшибкиCOM, 1) = "1" Тогда 
		
		СловарьWL = МетодСервера(,"ПолучитьСловарь");
		
		// Ошибка сервера диадок
		HttpCode = Сред(ПояснениеОшибкиCOM, 6, 3);
		ПояснениеОшибкиCOM = Сред(ПояснениеОшибкиCOM, 11);
		
		Если HttpCode = "401" Тогда
			// Ошибка авторизации на сервере
			Если ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "certificate", "not", "valid") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не возможно войти в "+СловарьWL.НаименованиеСистемы+" с данным сертификатом";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadCertificate";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "login", "not", "found") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не существует пользователя в "+СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж+" с данным логином";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadLogin";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "wrong", "password") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Неправильная пара логин/пароль";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
			ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "user", "not found") Тогда
				стРасшифровкаОшибки.ОписаниеОшибки = "Не существует пользователя в "+СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж+" с данным сертификатом";
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBadPassword";
			Иначе
				стРасшифровкаОшибки.ОписаниеОшибки = "Ошибка входа в " + СловарьWL.НаименованиеСистемы;
				стРасшифровкаОшибки.Спецификатор = "AuthorizationBad";
			КонецЕсли;
		ИначеЕсли HttpCode = "407" Тогда
			// Ошибка авторизации на прокси
			стРасшифровкаОшибки.Спецификатор = "InternetError";
			стРасшифровкаОшибки.Заголовок = "Ошибка прокси-сервера";
			стРасшифровкаОшибки.ОписаниеОшибки = "Неправильный логин или пароль для прокси-сервера";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "already", "signed") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Данный документ уже подписан";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "entity", "requested", "signature", "rejection")
			ИЛИ ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "RequestedSignatureRejection", "document", "already", "has") Тогда
			
			стРасшифровкаОшибки.ОписаниеОшибки = "По данному документу уже сформирован отказ в подписи";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "access", "box", "denied") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Отсутствует доступ к данному ящику " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "fns", "box", "not", "sent") Тогда
			стРасшифровкаОшибки.ОписаниеОшибки = "Сертификат не зарегистрирован в ФНС";
		ИначеЕсли ВСтрокеНРегЕстьСлова(ПояснениеОшибкиCOM, "failed", "unauthorized", "wrong", "password") Тогда
			стРасшифровкаОшибки.Заголовок=	"Ошибка входа";
			стРасшифровкаОшибки.ОписаниеОшибки = "Неверная пара логин/пароль";
		КонецЕсли;
	ИначеЕсли Лев(КодОшибкиCOM, 1) = "2" Тогда 
		стРасшифровкаОшибки.Спецификатор = "InternetError";
	КонецЕсли;
	
	Возврат стРасшифровкаОшибки;
КонецФункции

Функция ВСтрокеНРегЕстьСлова(стрПар, слово1, слово2= "", слово3= "", слово4= "")
	стр = НРег(стрПар);
	Если Найти(стр, слово1) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово2) И Найти(стр, слово2) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово3) И Найти(стр, слово3) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(слово4) И Найти(стр, слово4) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьСправа(Стр, Маркер)
	если найти(стр, маркер)=0 тогда 
		возврат стр 
	иначе 	
		возврат прав(стр, стрДлина(стр) - найти(стр, маркер)-стрДлина(маркер)+1);
	конецЕсли;	
конецфункции	

Функция КраткоеСообщениеОбОшибке(ТекстОшибки)
	Подстрока = ПолучитьСправа(ТекстОшибки, "##");
	Подстрока = ПолучитьСправа(Подстрока, "[");
	Подстрока = ПолучитьСправа(Подстрока, "]");
	
	Возврат подстрока;
	
	
	
КонецФункции	

Функция ПолучитьТаблицуОрганизацийКоторыеНеПодключеныКДиадоку() Экспорт 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЯщикиОрганизаций
	|		ПО Организации.Ссылка = ЯщикиОрганизаций.Объект
	|			И (ЯщикиОрганизаций.Свойство = &СвойствоЯщикОрганизации)
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И (ЯщикиОрганизаций.Значение ЕСТЬ NULL
	|			ИЛИ ЯщикиОрганизаций.Значение = """"
	|			ИЛИ ЯщикиОрганизаций.Значение = НЕОПРЕДЕЛЕНО)");
	
	Запрос.УстановитьПараметр("СвойствоЯщикОрганизации", НайтиСвойство(ИдентификаторСвойстваЯщикОрганизации()));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Результат Цикл
		Стр.ИНН = СокрЛП(Стр.ИНН);
		Стр.КПП = СокрЛП(Стр.КПП);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СклеитьПредставлениеОрганизацииДиадок(Строка)
	Результат = СокрЛП(Строка.Представление);
	Если НЕ ПустаяСтрока(Строка.Представление2) Тогда
		Результат = Результат + СокрЛП(Строка.Представление2);
		Если НЕ ПустаяСтрока(Строка.Представление3) Тогда
			Результат = Результат + СокрЛП(Строка.Представление3);
			Если НЕ ПустаяСтрока(Строка.Представление4) Тогда
				Результат = Результат + СокрЛП(Строка.Представление4);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	возврат Результат
КонецФункции

Функция ПолучитьТаблицуЯщиковДиадокОрганизации(Организации = Неопределено) Экспорт 
	
	Результат = Новый Массив;
	
	СвойствоЯщикОрганизации	 = НайтиСвойство(ИдентификаторСвойстваЯщикОрганизации());
	СвойствоПодразделение	 = НайтиСвойство(ИдентификаторСвойстваПодразделениеОрганизации());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ИдентификаторЯщика.Значение КАК BoxId,
	|	ЕСТЬNULL(КПППодразделения.Значение, """") КАК КПППодразделения
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ИдентификаторЯщика
	|		ПО Организации.Ссылка = ИдентификаторЯщика.Объект
	|			И (ИдентификаторЯщика.Свойство = &СвойствоЯщикОрганизации)
	|			И (ИдентификаторЯщика.Значение <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК КПППодразделения
	|		ПО Организации.Ссылка = КПППодразделения.Объект
	|			И (КПППодразделения.Свойство = &СвойствоПодразделение)";
	
	Если Организации <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ГДЕ Организации.Ссылка В (&Организации)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СвойствоЯщикОрганизации", СвойствоЯщикОрганизации);
	Запрос.УстановитьПараметр("СвойствоПодразделение",	 СвойствоПодразделение);
	Запрос.УстановитьПараметр("Организации",			 Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыйЭлемент = Новый Структура;
		НовыйЭлемент.Вставить("BoxId",				 Выборка.BoxId);
		НовыйЭлемент.Вставить("Организация",		 Выборка.Организация);
		НовыйЭлемент.Вставить("КПППодразделения",	 Выборка.КПППодразделения);
		
		Результат.Добавить(НовыйЭлемент);
		
	КонецЦикла;
	
	Возврат Результат;
	
конецфункции

Функция ВернутьТаблицуМаршрутизацииПоТаблицеКонтрагентов(ТаблицаКонтрагентов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКонтрагентов.ID КАК ID
	|ПОМЕСТИТЬ ТаблицаКонтрагентов
	|ИЗ
	|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Наименование КАК КонтрагентНаименование,
	|	ТаблицаКонтрагентов.ID КАК ID,
	|	ЕСТЬNULL(ДополнительныеСведения1.Значение, """") КАК ПодразделениеКонтрагента,
	|	ЕСТЬNULL(ДополнительныеСведения2.Значение, """") КАК ToDepartmentID,
	|	ЕСТЬNULL(ДополнительныеСведения3.Значение, """") КАК ФорматДокументовНаОтправку
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.Свойство = &СвойствоЯщикКонтрагента)
	|			И ТаблицаКонтрагентов.ID = ДополнительныеСведения.Значение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (ДополнительныеСведения.Объект = Контрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
	|		ПО (Контрагенты.Ссылка = ДополнительныеСведения1.Объект)
	|			И (ДополнительныеСведения1.Свойство = &СвойствоНаименованиеПодразделения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения2
	|		ПО (Контрагенты.Ссылка = ДополнительныеСведения2.Объект)
	|			И (ДополнительныеСведения2.Свойство = &СвойствоИДПодразделения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения3
	|		ПО (Контрагенты.Ссылка = ДополнительныеСведения3.Объект)
	|			И (ДополнительныеСведения3.Свойство = &СвойствоФормироватьУПДКонтрагент)");
	
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов"				 , ТаблицаКонтрагентов);
	Запрос.УстановитьПараметр("СвойствоЯщикКонтрагента"			 , НайтиСвойство(ИдентификаторСвойстваЯщикКонтрагентаПрефикс()));
	Запрос.УстановитьПараметр("СвойствоНаименованиеПодразделения", НайтиСвойство(ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс()));
	Запрос.УстановитьПараметр("СвойствоИДПодразделения"			 , НайтиСвойство(ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс()));
	Запрос.УстановитьПараметр("СвойствоФормироватьУПДКонтрагент" , НайтиСвойство(ИдентификаторСвойстваФормироватьУПДКонтрагент()));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Id");
	Возврат Результат;
	
КонецФункции

Функция ВернутьТаблицуМаршрутизацииПоДоговорам(Организация, Контрагент) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДополнительныеСведения.Значение КАК ToDepartmentID,
	|	ДополнительныеСведения1.Значение КАК ПодразделениеДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ДоговорыКонтрагентов.Ссылка = ДополнительныеСведения.Объект
	|			И (ДополнительныеСведения.Свойство = &ИдПодразделения)
	|			И (ДополнительныеСведения.Значение <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения1
	|		ПО ДоговорыКонтрагентов.Ссылка = ДополнительныеСведения1.Объект
	|			И (ДополнительныеСведения1.Свойство = &НаименованиеПодразделения)
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент";
	
	Если ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ДоговорыКонтрагентов", "Справочник.Договоры");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорыКонтрагентов.Владелец", "ДоговорыКонтрагентов.Контрагент");
		
	ИначеЕсли ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорыКонтрагентов.Владелец", "ДоговорыКонтрагентов.Контрагент");
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);
	Запрос.УстановитьПараметр("ИдПодразделения"			 , НайтиСвойство(ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору()));
	Запрос.УстановитьПараметр("НаименованиеПодразделения", НайтиСвойство(ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору()));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьМаршрутизациюПоДоговору(ДоговорКонтрагента) Экспорт
	
	СтруктураМашрутизацииДоговора=	Новый Структура("ToDepartmentID, НаименованиеПодразделения");
	СтруктураМашрутизацииДоговора.Вставить("ToDepartmentID", 			ПолучитьЗначениеСвойства(ДоговорКонтрагента, ИдентификаторСвойстваИдентификаторПодразделенияПоДоговору()));
	СтруктураМашрутизацииДоговора.Вставить("НаименованиеПодразделения",	ПолучитьЗначениеСвойства(ДоговорКонтрагента, ИдентификаторСвойстваНаименованиеПодразделенияПоДоговору()));
	
	Возврат СтруктураМашрутизацииДоговора;
	
КонецФункции

Функция ПолучитьМаршрутизациюПоКонтрагенту(Контрагент) Экспорт
	
	СтруктураМашрутизацииКонтрагента=	Новый Структура("ToDepartmentID, НаименованиеПодразделения");
	СтруктураМашрутизацииКонтрагента.Вставить("ToDepartmentID", 			ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваИДПодразделенияКонтрагентаПрефикс()));
	СтруктураМашрутизацииКонтрагента.Вставить("НаименованиеПодразделения",	ПолучитьЗначениеСвойства(Контрагент, ИдентификаторСвойстваНаименованиеПодразделенияКонтрагентаПрефикс()));
	
	Возврат СтруктураМашрутизацииКонтрагента;
	
КонецФункции

Функция ТочностьЦеныСФ() Экспорт 

	ТочностьЦеныСФ = ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ТочностьЦеныСФ_Диадок");
	Если ЗначениеЗаполнено(ТочностьЦеныСФ) Тогда
		ТочностьЦеныСФ = ТочностьЦеныСФ;
	Иначе
		ТочностьЦеныСФ = 2;
	КонецЕсли;
	Возврат ТочностьЦеныСФ;

КонецФункции 

//определяем где находится модуль: в составе конфигурации, в справочнике дополнительных обработок 1С или это внешний файл на диске
Функция МестоРасположенияМодуля() Экспорт
	
	СтруктураВозврат = Новый Структура("Место, Путь, ПутьКМодулюВСправочнике1С");
	
	СтруктураВозврат.Вставить("Путь",						"");
	СтруктураВозврат.Вставить("ПутьКМодулюВСправочнике1С",	"");
	
	АдресОбработкаОбъект = ПолучитьИзВременногоХранилища(ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
	
	Если НЕ Метаданные.Обработки.Содержит(АдресОбработкаОбъект.ОбработкаОбъект.Метаданные()) Тогда
		
		ИмяФайла = АдресОбработкаОбъект.ОбработкаОбъект.ИспользуемоеИмяФайла;
		
		Если Прав(ИмяФайла, 4) = ".epf" Тогда
			СтруктураВозврат.Вставить("Место",	"НаДиске");
			СтруктураВозврат.Вставить("Путь",	ИмяФайла);
		Иначе
			ЗаполнитьСтруктуруДляМодуляВСправочнике(СтруктураВозврат)
		КонецЕсли;
					
	Иначе
		СтруктураВозврат.Вставить("Место", "ВКонфигурации");
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ЗаполнитьСтруктуруДляМодуляВСправочнике(СтруктураВозврат)
	
	ПутьКМодулюВСправочнике1С = ПараметрыКлиентСервер.ПутьКМодулюВСправочнике1С;
	
	СтруктураВозврат.Вставить("Место",						"ВСправочнике");
	СтруктураВозврат.Вставить("ПутьКМодулюВСправочнике1С",	"ПутьКМодулюВСправочнике1С");
	
	Если НЕ ЗначениеЗаполнено(ПутьКМодулюВСправочнике1С)
		И Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВнешниеОбработки.Ссылка КАК АктуальнаяВерсияМодуля
		               |ИЗ
		               |	Справочник.ДополнительныеОтчетыИОбработки КАК ВнешниеОбработки
		               |ГДЕ
		               |	ВнешниеОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		               |	И ВнешниеОбработки.ИмяОбъекта ПОДОБНО ""Модуль_ДиадокУФ""
		               |	И ВнешниеОбработки.Версия = &Версия
		               |	И НЕ ВнешниеОбработки.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Версия", ВерсияОбработки());
		ВыборкаОбработка = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаОбработка.Следующий() Тогда
			ПутьКМодулюВСправочнике1С = ВыборкаОбработка.АктуальнаяВерсияМодуля;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКМодулюВСправочнике1С) Тогда
			
			ПараметрыКлиентСервер.ПутьКМодулюВСправочнике1С				= ПутьКМодулюВСправочнике1С;
			УстановитьЗначениеКонстанты("ПутьКМодулюВСправочнике1С",	ПутьКМодулюВСправочнике1С);
			СтруктураВозврат.Вставить("ПутьКМодулюВСправочнике1С",		ПутьКМодулюВСправочнике1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКМодулюВСправочнике1С) 
		И ПутьКМодулюВСправочнике1С.Метаданные().Реквизиты.Найти("ХранилищеОбработки") <> Неопределено Тогда 
		
		ИмяВременногоФайла	= ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные		= ПутьКМодулюВСправочнике1С.ХранилищеОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		СтруктураВозврат.Вставить("Путь",	ИмяВременногоФайла);
		
	КонецЕсли;
		
КонецПроцедуры

//{ РАСШИРЕНИЕ КОНФИГУРАЦИИ

Функция ПроверитьНеобходимостьУстановкиРасширения() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("НеобходимоУстановить"			, Ложь);
	Результат.Вставить("БылОтказОтУстановки"			, Ложь);
	Результат.Вставить("ОтсутствуютПраваАдминистратора"	, Ложь);
	Результат.Вставить("РасширениеУжеУстановлено"		, Ложь);
	Результат.Вставить("ТекущяяВерсияРасширенияДиадок"	, "");
	Результат.Вставить("КонтекстРасширения"				, "");
	
	Если ПараметрыКлиентСервер.ВызовИзРасширения Тогда
		Результат.КонтекстРасширения = "call from extention";
		Возврат Результат;
	КонецЕсли;
	
	// расщирение может быть использовано только на платформе не ниже 8.3.6
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если МетодСервера(, "СравнитьВерсии", СистемнаяИнформация.ВерсияПриложения, "8.3.6") < 0 Тогда
		Результат.КонтекстРасширения = "extention is not possible";
		Возврат Результат;
	КонецЕсли;
	
	РежимСовместимостиСтрокой = Строка(Метаданные.РежимСовместимости);
	Если РежимСовместимостиСтрокой <> "НеИспользовать" Тогда
		
		ВерсияРежимаСовместимости = СтрЗаменить(СтрЗаменить(РежимСовместимостиСтрокой, "Версия", ""), "_", ".");
		
		// Версия режима совместимости должна быть не меньше 8.3.6
		Если СравнитьВерсии(ВерсияРежимаСовместимости, "8.3.6") < 0 Тогда
			Результат.КонтекстРасширения = "extention is not possible";
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ОтсутствуютПраваАдминистратора = ПравоДоступа("АдминистрированиеРасширенийКонфигурации", Метаданные) = Ложь;
	Если Результат.ОтсутствуютПраваАдминистратора Тогда 
		Результат.КонтекстРасширения = "user is not admin";
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыКлиентСервер.МаркерКонфигурации <> "БП30" Тогда
		Результат.КонтекстРасширения = "extention is not possible";
		Возврат Результат;
	КонецЕсли;
				
	Если Прав(Метаданные.Имя, 7) = "Базовая" Тогда
		Результат.КонтекстРасширения = "extention is not possible";
		Возврат Результат;
	КонецЕсли;
	
	МассивРасширенийКонфигурации = Вычислить("РасширенияКонфигурации.Получить(Новый Структура(""Имя"",""Диадок""))");
	Если МассивРасширенийКонфигурации.Количество() = 1 Тогда
		Результат.РасширениеУжеУстановлено = МассивРасширенийКонфигурации[0].Версия = МетодСервера(, "ТребуемаяВерсияРасширенияДиадок");
		Результат.ТекущяяВерсияРасширенияДиадок = МассивРасширенийКонфигурации[0].Версия;
	КонецЕсли;
	
	Если Результат.РасширениеУжеУстановлено Тогда
		Результат.КонтекстРасширения = "extention loaded";
		Возврат Результат;
	КонецЕсли;
	
	НеИспользоватьВерсию = МетодСервера(, "ПолучитьНастройкуПользователя", "ДиадокНеИспользоватьРасширениеВерсия");
	
	Результат.БылОтказОтУстановки = НеИспользоватьВерсию = Результат.ТекущяяВерсияРасширенияДиадок;
	Если Результат.БылОтказОтУстановки Тогда
		Результат.КонтекстРасширения = "extention cancelled";
		Возврат Результат;
	КонецЕсли;
	
	Результат.КонтекстРасширения = "extention in not loaded yet";
	
	Результат.НеобходимоУстановить = Истина;
	
	Возврат Результат; 
			
КонецФункции

Функция УстановитьРасширениеКонфигурации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОписаниеОшибки"			, "");
	Результат.Вставить("Подробности"			, "");
	Результат.Вставить("Отказ"					, Ложь);
	Результат.Вставить("ПерезапуститьПрограмму"	, Ложь);
	
	Попытка
		РасширениеКонфигурации = Вычислить("РасширенияКонфигурации.Создать()");
		РасширениеКонфигурации.БезопасныйРежим = Ложь;
		РасширениеКонфигурации.Записать(ПолучитьМакет("Расширение_БП30_cfe"));
		
		Результат.ОписаниеОшибки			= "Установлено расширение конфигурации ""Диадок"" версии " + МетодСервера(,"ТребуемаяВерсияРасширенияДиадок") + ".";
		Результат.ПерезапуститьПрограмму	= Истина;
		
	Исключение
		
		Результат.Отказ				= Истина;
		Результат.ОписаниеОшибки	= "Ошибка установки расширения конфигурации ""Диадок"", версии " + МетодСервера(,"ТребуемаяВерсияРасширенияДиадок") + "!";
		Результат.Подробности		= ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
					
КонецФункции

Функция УдалитьРасширениеКонфигурации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОписаниеОшибки"			, "");
	Результат.Вставить("Подробности"			, "");
	Результат.Вставить("Отказ"					, Ложь);
	Результат.Вставить("ПерезапуститьПрограмму"	, Ложь);
	
	МассивРасширенийКонфигурации = Вычислить("РасширенияКонфигурации.Получить(Новый Структура(""Имя"",""Диадок""))");
	
	Если МассивРасширенийКонфигурации.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВерсияУстановленногоРасширения = МассивРасширенийКонфигурации[0].Версия;
	
	Попытка
		МассивРасширенийКонфигурации[0].Удалить();
		Результат.ОписаниеОшибки			= "Удалено расширение конфигурации ""Диадок"", версии " + ВерсияУстановленногоРасширения + ".";
		Результат.ПерезапуститьПрограмму	= Истина;
	Исключение;
		Результат.Отказ				= Истина;
		Результат.ОписаниеОшибки	= "Ошибка удаления расширения конфигурации ""Диадок"", версии " + ВерсияУстановленногоРасширения + "!";
		Результат.Подробности		= ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//} РАСШИРЕНИЯ КОНФИГУРАЦИИ

//{ WL 

	Функция ПолучитьСловарь() Экспорт
		
		Результат = Новый Структура;
		Результат.Вставить("Заголовок"									, ЗаголовокОсновнойФормы());
		Результат.Вставить("НаименованиеСистемы"						, "Диадок");
		Результат.Вставить("КраткоеНаименованиеСистемы"					, "Диадок");
		Результат.Вставить("КраткоеНаименованиеСистемыРодительныйПадеж"	, "Диадока");
		Результат.Вставить("КраткоеНаименованиеСистемыДательныйПадеж"	, "Диадоку");
		Результат.Вставить("КраткоеНаименованиеСистемыПредложныйПадеж"	, "Диадоке");
		Результат.Вставить("ТочкаВходаВеб"								, АдресСервиса());
		Результат.Вставить("ТелефонТехподдержки"						, "8 800 500-10-18");
		Результат.Вставить("ИспользоватьИконкуСистемы"					, Истина);
		
		Возврат Результат;	
		
	КонецФункции

	Функция ПолучитьСловарьЛайф()
		
		Результат = Новый Структура;
		Результат.Вставить("Заголовок"									, "Лайф Факторинг");
		Результат.Вставить("НаименованиеСистемы"						, "Лайф Факторинг");
		Результат.Вставить("КраткоеНаименованиеСистемы"					, "Лайф");
		Результат.Вставить("КраткоеНаименованиеСистемыРодительныйПадеж"	, "Лайфа");
		Результат.Вставить("КраткоеНаименованиеСистемыДательныйПадеж"	, "Лайфу");
		Результат.Вставить("КраткоеНаименованиеСистемыПредложныйПадеж"	, "Лайфе");
		Результат.Вставить("ТочкаВходаВеб"								, "life.kontur.ru");
		Результат.Вставить("ТелефонТехподдержки"						, "8 (495) 645-10-51");
		Результат.Вставить("ИспользоватьИконкуСистемы"					, Ложь);
		
		Возврат Результат;
		
	КонецФункции	

	Функция ПолучитьСловарьСеоДок()
		
		Результат = Новый Структура;
		Результат.Вставить("Заголовок"									, "Сеодок");
		Результат.Вставить("НаименованиеСистемы"						, "Сеодок");
		Результат.Вставить("КраткоеНаименованиеСистемы"					, "Сеодок");
		Результат.Вставить("КраткоеНаименованиеСистемыРодительныйПадеж"	, "Сеодока");
		Результат.Вставить("КраткоеНаименованиеСистемыДательныйПадеж"	, "Сеодоку");
		Результат.Вставить("КраткоеНаименованиеСистемыПредложныйПадеж"	, "Сеодоке");
		Результат.Вставить("ТочкаВходаВеб"								, "ceodoc.kontur.ru");
		Результат.Вставить("ТелефонТехподдержки"						, "8 351 309-38-43");
		Результат.Вставить("ИспользоватьИконкуСистемы"					, Истина);
		
		Возврат Результат;
		
	КонецФункции

	Функция ПолучитьСловарьНФК()
		
		Результат = Новый Структура;
		Результат.Вставить("Заголовок"									, "ЭДО-Факторинг");
		Результат.Вставить("НаименованиеСистемы"						, "ЭДО-Факторинг");
		Результат.Вставить("КраткоеНаименованиеСистемы"					, "ЭДО-Факторинг");
		Результат.Вставить("КраткоеНаименованиеСистемыРодительныйПадеж"	, "ЭДО-Факторинга");
		Результат.Вставить("КраткоеНаименованиеСистемыДательныйПадеж"	, "ЭДО-Факторингу");
		Результат.Вставить("КраткоеНаименованиеСистемыПредложныйПадеж"	, "ЭДО-Факторинге");
		Результат.Вставить("ТочкаВходаВеб"								, "edifactoring.ru");
		Результат.Вставить("ТелефонТехподдержки"						, "Если у Вас возникли какие-либо сложности при обмене электронными документами с НФК и последующим получением факторинговых услуг, обратитесь к вашему клиентскому менеджеру в НФК");
		Результат.Вставить("ИспользоватьИконкуСистемы"					, Ложь);
		
		Возврат Результат;
		
	КонецФункции	

//} WL

//{ КАСТОМИЗАЦИЯ

	//{ ПЕРЕКЛЮЧАТЕЛИ

		// Функция включает/выключает механизм кастомного формирования содержимого доп. полей
		//
		Функция ИспользоватьКастомныеДопПоля() Экспорт
			//Возврат Истина;
			Возврат Ложь;
		КонецФункции

		// Функция включает/выключает механизм кастомного формирования адреса грузополучателя
		//
		Функция ИспользоватьКастомныйАдресГрузополучателя() Экспорт
		//Возврат Истина;
		Возврат Ложь;
	КонецФункции
	
	//} ПЕРЕКЛЮЧАТЕЛИ

	//{ РАБОТА С ДОПОЛНИТЕЛЬНЫМИ СВОЙСТВАМИ 
	
		Функция ЗаполнитьКастомныеДопПоля() Экспорт
			
			// заполняем алгоритмом для формирования кастомного доп.поля
			
		КонецФункции
		
		Функция ПолучитьШаблонКлючейДопСведений(ИдКонтрагента, DocumentType) Экспорт
			
			СловарьШаблоновКлючейДопСведений = ПолучитьСловарьШаблоновКлючейДопСведений();
			
			ОтборСтрок=			Новый Структура("ИдКонтрагента, DocumentType", ИдКонтрагента, DocumentType);
			НайденныеСтроки=	СловарьШаблоновКлючейДопСведений.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ШаблонКлючей = НайденныеСтроки[0].ШаблонКлючей;
			Иначе
				ШаблонКлючей = "";
			КонецЕсли;
			
			Возврат ШаблонКлючей;
			
		КонецФункции // ШаблонДопСвойств()
		
		Функция ПолучитьСловарьШаблоновКлючейДопСведений() 
			
			СловарьШаблонов = Новый ТаблицаЗначений;
			
			СловарьШаблонов.Колонки.Добавить("ИдКонтрагента");
			СловарьШаблонов.Колонки.Добавить("DocumentType");
			СловарьШаблонов.Колонки.Добавить("ШаблонКлючей");
			
			//проктер
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "434d7fb5e20645e2ab85192f1a2db10d@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
			
			//авто
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlTorg12", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "XmlAcceptanceCertificate", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;PO=;заказчик=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru", "Invoice", "тип_комплекта=;контракт=;номер_контракта=;дата_контракта=;НаимБанк=;БИК=;НомерСчета=;");
			
			//апатит
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//апатит (балаковский ф-л)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "aa1b1962b50d42349d310acb27fa5760@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//фосагро
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "64d1058f69f74ab4bee0e15567860044@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//метахим
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//фосагро (череповец)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "200ad0208fe84e488ef4575dac492b65@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Папирус (для тестирования группы Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Тестовая организация №6786861 (для тестирование со стороны Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			//Тестовая организация №9219153 (для тестирование со стороны Фосагро)
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "XmlTorg12", "НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "XmlAcceptanceCertificate", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			ДобавитьСтрокуВСловарь(СловарьШаблонов, "183c060a51c1483fa31acc29a50451d7@diadoc.ru", "Invoice", "Договор=;ДатаДоговор=;НомерДопСогл=;ДатаДопСогл=;КомисИНН=;КомисКПП=;");
			
			Возврат СловарьШаблонов;
			
		КонецФункции // ()
		
		Процедура ДобавитьСтрокуВСловарь(СловарьШаблонов, ИдКонтрагента, DocumentType, ШаблонКлючей)
			
			НоваяСтрока = СловарьШаблонов.Добавить();
			
			НоваяСтрока.ИдКонтрагента = ИдКонтрагента; 
			НоваяСтрока.DocumentType = DocumentType;
			НоваяСтрока.ШаблонКлючей = ШаблонКлючей;
			
		КонецПроцедуры // ДобавитьСтрокуВСловарь()
		
		Функция НужноФормироватьДопИнфоПоШаблону(ИдКонтрагента) Экспорт
			
			Если ИдКонтрагента = "a2fbbbfba58040689c8f7c19d1b111ed@diadoc.ru" //апатит
				ИЛИ ИдКонтрагента = "aa1b1962b50d42349d310acb27fa5760@diadoc.ru" //апатит (балаковский ф-л)
				ИЛИ ИдКонтрагента = "64d1058f69f74ab4bee0e15567860044@diadoc.ru" //фосагро
				ИЛИ ИдКонтрагента = "b88f8a5db1e8447aa8f8fdcb9da3adb1@diadoc.ru" //метахим
				ИЛИ ИдКонтрагента = "200ad0208fe84e488ef4575dac492b65@diadoc.ru" //фосагро (череповец)
				ИЛИ ИдКонтрагента = "e4ed7db3cf8b4db698403fc3c40ca009@diadoc.ru" //Тестовая организация №6786861 (для тестирование со стороны Фосагро)
				ИЛИ ИдКонтрагента = "183c060a51c1483fa31acc29a50451d7@diadoc.ru" //Тестовая организация №9219153 (для тестирование со стороны Фосагро)
				ИЛИ ИдКонтрагента = "6b630accf48b4ad397fe276f3f4c219f@diadoc.ru" Тогда  //Папирус
				КонвертироватьДопСвойста = Истина;
			Иначе
				КонвертироватьДопСвойста = Ложь;
			КонецЕсли;
			
			Возврат КонвертироватьДопСвойста;
			
		КонецФункции // 
		
		Функция СформироватьСтрокуДопИнфоПоШаблону(ДопСведения) Экспорт
			
			ДопСведенияПошаблону = "";
			
			Если ЗначениеЗаполнено(ДопСведения) = Истина Тогда
				ДопСведенияПошаблону = "<Данные> "; 
				МассивДопСведений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопСведения, ";", Истина);
				Для Каждого Строка Из МассивДопСведений Цикл
					МассивОтСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, "=", Истина);
					Если МассивОтСтроки.Количество() > 0 Тогда
						ДопСведенияПошаблону = ДопСведенияПошаблону + "<Реквизит Имя="""+МассивОтСтроки[0]+"""";
					КонецЕсли;
					Если МассивОтСтроки.Количество() > 1 Тогда
						ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение="""+МассивОтСтроки[1]+"""/> ";
					Иначе
						ДопСведенияПошаблону = ДопСведенияПошаблону + " Значение=""""/>"
					КонецЕсли;
				КонецЦикла;
				ДопСведенияПошаблону = ДопСведенияПошаблону + " </Данные>"
			КонецЕсли;
			
			Возврат ДопСведенияПошаблону;
			
		КонецФункции // 
		
	//} РАБОТА С ДОПОЛНИТЕЛЬНЫМИ СВОЙСТВАМИ 
	
	Функция ПолучитьКастомныйАдресГрузополучателя() Экспорт
		
		// заполняем алгоритмом для получения адреса Грузополучателя из кастомного места
		
	КонецФункции
	
//} КАСТОМИЗАЦИЯ

Функция ДопустимыеМаркерыКонфигураций() Экспорт
	
	СписокМаркеров=	Новый СписокЗначений;
	СписокМаркеров.Добавить("УТ11" , "Управление торговлей 11");
	СписокМаркеров.Добавить("БП30" , "Бухгалтерия предприятия 3.0");
	СписокМаркеров.Добавить("БГУ20", "Бухгалтерия государственного учреждения 2.0");
	СписокМаркеров.Добавить("УНФ16", "Управление небольшой фирмой 1.6");
	
	Возврат СписокМаркеров;
	
КонецФункции

Функция СтранаЧленТС(Знач КодСтраны) Экспорт
	
	КодСтраны = СокрЛП(КодСтраны);
	
	КодыСтранТС = Новый Массив;
	КодыСтранТС.Добавить("643"); // Россия
	КодыСтранТС.Добавить("051"); // Армения
	КодыСтранТС.Добавить("112"); // Беларусь
	КодыСтранТС.Добавить("398"); // Казахстан
	КодыСтранТС.Добавить("417"); // Киргизия
	КодыСтранТС.Добавить("981"); // ЕАЭС
	
	Возврат КодыСтранТС.Найти(КодСтраны) <> Неопределено;
	
КонецФункции	

//	ИмяСобытия 		 - 	Тип: Строка.
//						Идентификатор события, которое необходимо обработать
//
//	ПараметрыСобытия -  Тип: Структура. Необязательный
//						Параметры, которые будут доступны подключаемому модулю.
//
Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия, ПараметрыСобытия= Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль Тогда
		
		Результат = МетодСервера("ПодключаемыйМодуль", "ОбработкаСобытияПодключаемогоМодуля", ИмяСобытия, ПараметрыСобытия);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//{ УСТАРЕВШИЕ

	// Устарела. Следует использовать функцию "ПреобразоватьТаблицуЗначенийВМассивСтруктур"
	//
	Функция ТаблицаЗначений_2_МассивСтруктур(ТаблицаЗначений) Экспорт
		
		Возврат ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТаблицаЗначений);
		
	КонецФункции //ТаблицаЗначений_2_МассивСтруктур()
	
	// Метод устарел в версии 5.38.01. Следует использовать метод "НастройкиОрганизации"
	Функция ПолучитьНастройкиОрганизации(Организация) Экспорт
			
		Результат = НастройкиОрганизации(Организация);
		
		Возврат Результат;
		
	КонецФункции
	
//} УСТАРЕВШИЕ
