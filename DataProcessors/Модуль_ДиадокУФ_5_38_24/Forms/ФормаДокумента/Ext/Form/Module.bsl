////////////////////////////////////////////////////////////////////////////////
//{ ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем UserPermissions;
&НаКлиенте
Перем Organization Экспорт; 
&НаКлиенте
Перем ЭДОбъект Экспорт; 

&НаКлиенте
Перем IDТекущейСтроки;

&НаКлиенте
Перем МассивСсылокРНК Экспорт;
&НаКлиенте
Перем ПодходящаяСФ;

&НаКлиенте
Перем НомерЗаказа Экспорт;

&НаКлиенте
Перем ПредставлениеСтатусаРоуминг, ПредставлениеСтатусаРоумингДетали;

&НаКлиенте
Перем КэшТабличныеДокументы;

//} ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СуществуетСвязьСДокументомУчета()
	
	Результат = ЗначениеЗаполнено(Документ1С);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИспользоватьНовуюМеханикуОтраженияВУчете()
	
	Если ЭДОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БазовыеФорматы = БазовыеФорматы();
	
	ВерсияФормата = ЭДОбъект.Version;
	БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ВерсияФормата);
	
	Результат = Ложь;
	
	Если БазовыйФормат = БазовыеФорматы.utd820
		Или БазовыйФормат = БазовыеФорматы.ucd
		Или БазовыйФормат = БазовыеФорматы.invoicecor Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СоздаватьДокументыУчетаСПредварительнымПросмотром()
	
	Результат = Не ИспользоватьНовуюМеханикуОтраженияВУчете();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоВходящийДокумент()
	
	Результат = Ложь;
	
	Если ЭДОбъект <> Неопределено
		И ЭДОбъект.Direction = "Inbound" Тогда 
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьПартнеровКакКонтрагентов()
	
	Результат = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоСемействоУТКАERP()
	
	Результат = Ложь;
	
	Если ОбработкаОбъект().ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция БазовыеФорматы()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыКонтента()
	
	Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТЧИКИ ФОРМЫ

	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		ПрочитатьПараметрыФормы();
				
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" 
			И (Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты") Тогда
			
			ЗаполнитьТаблицуДокументовПоДаннымВыбранныхФайлов(Параметры.МассивАдресовФайлов);
			
		Иначе
			
			BoxID 			= Параметры.BoxID;
			DepartmentKpp 	= Параметры.DepartmentKpp;
			
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация = МетодСервера(,"BoxID_2_Организация", BoxID, DepartmentKpp);
			КонецЕсли;
			
			Контрагент		= МетодСервера(,"CounteragentBoxID_2_Контрагент", Параметры.CounteragentBoxID);
			
			МассивДокументовПакета = Параметры.МассивДокументовПакета;
			
			ТекущиеДанные = Неопределено;
			ЗаполнитьТаблицуДокументов(ТочкаВызова, МассивДокументовПакета, ТекущиеДанные);
			
			Если ТекущиеДанные = Неопределено Тогда
				ТекущиеДанные = Параметры.МассивДокументовПакета[0]; 
			КонецЕсли;
			
			CounteragentBoxID	= ТекущиеДанные.CounteragentBoxID;
			DocumentType		= ТекущиеДанные.DocumentType;
			Документ1С			= ТекущиеДанные.Документ1С;
			ТипДокумента		= ТекущиеДанные.ТипДокумента;
			ДопСведения			= ТекущиеДанные.ДопСведения;
			ФункцияУПД			= ТекущиеДанные.ФункцияУПД;
			
			ТекущиеДанные.Свойство("DocumentID", 			DocumentID);
			ТекущиеДанные.Свойство("isTest", 				isTest);
			ТекущиеДанные.Свойство("DepartmentId", 			DepartmentId);
			ТекущиеДанные.Свойство("ВнешняяПечатнаяФорма", 	ВнешняяПечатнаяФорма);
			
			Параметры.Свойство("ОшибкаОтправкиПакета", ОшибкиОтправки);
			
			Если ТекущиеДанные.ЭтоФайл Тогда
				Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница = Элементы.СтраницаБезВизуализации;
			Иначе
				Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница = Элементы.СтраницаТабличноеПоле;
			КонецЕсли;
			
		КонецЕсли;
						
		НастроитьКнопкиКоманднойПанелиНаСервере();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ИнициализироватьКэшТабличныеДокументы();
		
		ЗаполнитьСписокВыбора_ТипДокумента();
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И (Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты") Тогда
											
			ЗаполнитьТаблицуДокументовДаннымиПоУмолчанию();
		
			Если Операция = "СоздатьНовыйПакет" Тогда
				ЗаполнитьСписокВыбора_Организация();
				Если ЗначениеЗаполнено(Организация) Тогда
					ОбработатьИзменениеОрганизации();
				КонецЕсли;
			КонецЕсли;
			
			УстановитьВидимостьПоТипуДокумента();
																				
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Организация = МетодКлиента("Модуль_Клиент", "НайтиОрганизациюВИерархииОрганизацийDiadoc", BoxID, DepartmentId);
			КонецЕсли;
			
			СтрокаПозиционирования = СтрокаПозиционированияВТаблицеДокументов();
			
			ЗаполнитьПеременныеФормыПриОткрытии(СтрокаПозиционирования.IdСтроки);
			
			Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И ТаблицаДокументов.Количество() > 0 Тогда
				// позиционируем на выбранную строку
				Элементы.ТаблицаДокументов.ТекущаяСтрока = СтрокаПозиционирования.ПолучитьИдентификатор(); 
								
				ПровестиВалидациюДокументовПакета();
			КонецЕсли;
									
			Если СтрокаПозиционирования.ЭтоФайл Тогда
				УстановитьВидимостьПоТипуДокумента();
				ДанныеФайлаНаФорму(СтрокаПозиционирования);
			Иначе
				ВизуализацияПечатнойФормыПоСтруктуре();
			КонецЕсли;
			
		КонецЕсли;
						
		УправлениеФормой();
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
		
		Если ИмяСобытия = "ДиадокЗакрытьФормуДокумента" Тогда
			
			Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
				Закрыть(ТаблицаДокументов);
			Иначе
				Если ЭДОбъект <> Неопределено И Параметр = ЭДОбъект.DocumentID Тогда
					Закрыть();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры
	
//} ОБРАБОТЧИКИ ФОРМЫ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ

	&НаКлиенте
	Процедура СформироватьПечатнуюФормуПоДокументу(ФИОПодписанта, ВизуализироватьДопПоля)
		
		Если ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			
			ТабличныйДокумент 	= МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами","СформироватьВнешнююПечатнуюФормуПоСсылкеВПФ", Документ1С, ВнешняяПечатнаяФорма, Организация).Таблица;
			Ошибки				= "";
			
		ИначеЕсли DocumentType = "XmlTorg12"
			ИЛИ   DocumentType = "Invoice"
			ИЛИ   DocumentType = "UniversalTransferDocument"
			ИЛИ   DocumentType = "InvoiceCorrection"
			ИЛИ   DocumentType = "UniversalCorrectionDocument"
			ИЛИ  (DocumentType = "XmlAcceptanceCertificate"
					И НЕ ЗначениеЗаполнено(МетодСервераБезКонтекста(, "ПолучитьВнешнююПечатнуюФормуАкта", Документ1С))) Тогда
			
			ЭтоКСФ = Ложь;
			Если DocumentType = "Invoice" И МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ЭтоКСФ", Документ1С) Тогда
				ЭтоКСФ = Истина;	
			КонецЕсли;
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("УказыватьОтсутствиеОснованияУПД", МетодСервераБезКонтекста(, "ПолучитьЗначениеСвойства", Организация, "ДиадокУказыватьОтсутствиеОснованияУПД",, Ложь));
			
			ТекСтрока = ТекущаяСтрокаТаблицыДокументов();
			ТипКонтента = ТекСтрока.ФорматОтправки.ТипКонтента;
			ПротоКонтент = СобратьКонтентФормализованного(ТипКонтента, ФункцияУПД, Документ1С, ДопПараметры, НомерЗаказа, ДопСведения, ФИОПодписанта);
			
			ДопПараметрыПФ = Новый Структура;
			ДопПараметрыПФ.Вставить("ПоказатьДопСведения", ВизуализироватьДопПоля);
			
			ТабличныйДокумент = МетодСервера("ПечатныеФормы", "ПечатнаяФормаПротоКонтента"
									, ПротоКонтент
									, ТипКонтента
									, DocumentType
									, ДопПараметрыПФ);
			
			Ошибки = ВалидироватьКонтентФормализованного(ПротоКонтент, ТипКонтента, ФункцияУПД, Документ1С, Истина);
			
		Иначе
			
			Попытка
				РезультатВизуализации = РезультатВизуализацииНеформализованного(DocumentType, Документ1С, Неопределено, ФИОПодписанта);
			Исключение
				Ошибки = МетодКлиента("Модуль_Клиент", "ОформитьОшибкиВHTML", ОписаниеОшибки(), "Ошибка формирования печатной формы");
			КонецПопытки;
			
			Если ЗначениеЗаполнено(РезультатВизуализации) Тогда
				ТабличныйДокумент	= РезультатВизуализации.Таблица;
				Ошибки 				= РезультатВизуализации.СписокОшибок;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			ЗакэшироватьРезультатВизуализации(ТабличныйДокумент, Ошибки, ОшибкиФормата);
			ТабПоле = ТабличныйДокумент;
		КонецЕсли;
		
		Ошибки = ТекстПолнойОшибки();
		ОшибкиФормата = "";
				
	КонецПроцедуры
	
	&НаКлиенте
	Функция РезультатВизуализацииНеформализованного(Парам_DocumentType, Парам_Документ1С, Парам_ПараметрыСогласования = Неопределено, Парам_ФИОПодписанта)
		
		Результат = Неопределено;
		
		Если Парам_DocumentType = "XmlAcceptanceCertificate" Тогда
			
			ВнешняяПечатнаяФорма = МетодСервераБезКонтекста(, "ПолучитьВнешнююПечатнуюФормуАкта", Парам_Документ1С);
			
		ИначеЕсли Парам_DocumentType = "NonformalizedProforma" Тогда
			
			ВнешняяПечатнаяФорма = МетодСервераБезКонтекста(, "ПолучитьВнешнююПечатнуюФормуСчета", Парам_Документ1С);
			
			Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
				Результат =	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "РезультатВизуализацииСчетаНаОплату", Парам_Документ1С, Парам_ПараметрыСогласования, Парам_ФИОПодписанта);
			КонецЕсли;
			
		ИначеЕсли Парам_DocumentType = "ReconciliationAct" Тогда
			
			ВнешняяПечатнаяФорма = МетодСервераБезКонтекста(, "ПолучитьВнешнююПечатнуюФормуАктаСверки", Парам_Документ1С);
			
			Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
				Результат =	МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "РезультатВизуализацииАктаСверки", Парам_Документ1С, Парам_ПараметрыСогласования, Парам_ФИОПодписанта);
			КонецЕсли;
									
		КонецЕсли;
		
		Если Результат = Неопределено И ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			Результат = МетодСервераБезКонтекста("Модуль_РаботаСВнешнимиПечатнымиФормами", "СформироватьВнешнююПечатнуюФормуПоСсылкеВПФ", Парам_Документ1С, ВнешняяПечатнаяФорма);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	// Параметры:
	//	Document				- СОМ Объект	- обрабатываемый электронный документ
	//	СтруктураSellerContent	- Структура 	- контент отправителя, соответствующий SellerContent, обрабатываемого электронного документа
	//	СтруктураBuyerContent 	- Структура 	- контент получателя, соответствующий BuyerContent, обрабатываемого электронного документа 
	Функция СформироватьДанныеОПодписях(Document, Content, BuyerContent)
		
		Результат = Новый Структура;
		
		Результат.Вставить("SellerSigner", МетодКлиента("Модуль_Клиент", "Новый_Signer"));
		Результат.Вставить("BuyerSigner" , МетодКлиента("Модуль_Клиент", "Новый_Signer"));
		
		Результат.Вставить("SenderSignature"   , МетодКлиента("Модуль_Клиент", "Новый_Signature"));
		Результат.Вставить("RecipientSignature", МетодКлиента("Модуль_Клиент", "Новый_Signature"));
		
		Результат.Вставить("DocumentMetaData", Новый Структура("Timestamp, DocumentID, SenderSignatureStatus, SenderName, RecipientName"));
		
		Результат.DocumentMetaData.DocumentID			 = Document.DocumentID;
		Результат.DocumentMetaData.TimeStamp			 = Document.TimeStamp;
		Результат.DocumentMetaData.SenderSignatureStatus = Document.SenderSignatureStatus;
		
		SenderSignature = Document.GetSenderSignature();
		Если SenderSignature <> Неопределено Тогда
			Результат.DocumentMetaData.SenderName = SenderSignature.Certificate.OrganizationName;
		КонецЕсли;
		
		RecipientSignature = Document.GetRecipientSignature();
		Если RecipientSignature <> Неопределено Тогда
			Результат.DocumentMetaData.RecipientName = RecipientSignature.Certificate.OrganizationName;
		КонецЕсли;
		
		Если Content.Свойство("Signer") Тогда
			
			Результат.SellerSigner = Content.Signer;
			
		ИначеЕсли Content.Свойство("Signers") И ЗначениеЗаполнено(Content.Signers) Тогда
			
			Результат.SellerSigner = Content.Signers[0].SignerDetails;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(BuyerContent) Тогда
			
			Если BuyerContent.Свойство("Signer") Тогда
				
				Результат.BuyerSigner = BuyerContent.Signer;
				
			ИначеЕсли BuyerContent.Свойство("Signers") И ЗначениеЗаполнено(BuyerContent.Signers) Тогда
				
				Результат.BuyerSigner = BuyerContent.Signers[0].SignerDetails;
				
			КонецЕсли;
			
		КонецЕсли;
		
		МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetSenderSignature()	  , Результат.SenderSignature);
		МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetRecipientSignature(), Результат.RecipientSignature);
		
		Возврат Результат;
		
	КонецФункции	
	
	&НаКлиенте
	Функция СформироватьПечатнуюФормуПоДокументуДиадока(Document)
		
		Результат = Неопределено;
		
		ПротоСтруктура		 = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Ложь);
		ПротоСтруктураОтвета = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Истина);
		
		Если ПротоСтруктура.Свойство("Контент") Тогда
			
			ПроверитьПоказатьОшибкиВСтруктуреДокумента(ПротоСтруктура);
			
			ПротоКонтентОтвета = Неопределено;
			ПротоСтруктураОтвета.Свойство("Контент", ПротоКонтентОтвета);
			
			ПротоКонтент		 = ПротоСтруктура.Контент;
			ТипКонтента			 = ПротоСтруктура.ТипКонтента;
			ТипДокумента		 = Document.Type;
			ДанныеШтампа		 = СформироватьДанныеОПодписях(Document, ПротоКонтент, ПротоКонтентОтвета);
			ПоказатьДопСведения	 = ВизуализироватьДопПоля(Document);
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПротоКонтентОтвета"	, ПротоКонтентОтвета);
			ДопПараметры.Вставить("ДанныеШтампа"		, ДанныеШтампа);
			ДопПараметры.Вставить("ПоказатьДопСведения"	, ПоказатьДопСведения);
			
			Результат = МетодСервераБезКонтекста("ПечатныеФормы", "ПечатнаяФормаПротоКонтента", ПротоКонтент, ТипКонтента, ТипДокумента, ДопПараметры);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
//} ФОРМИРОВАНИЕ ПЕЧАТНЫХ ФОРМ
////////////////////////////////////////////////////////////////////////////////
	
////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	&НаКлиенте
	Функция ТекущаяСтрокаТаблицыДокументов()
		
		Результат = Элементы.ТаблицаДокументов.ТекущиеДанные;
		
		Если Результат = Неопределено Тогда
			Результат = ТаблицаДокументов[0];
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПровестиВалидациюДокументовПакета()
		
		ФИОПодписанта= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization.Id);
		
		НомерДокумента= 0;
		ОбщееКоличествоДокументов= ТаблицаДокументов.Количество();
		_ВнешняяПечатнаяФорма = ВнешняяПечатнаяФорма;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("УказыватьОтсутствиеОснованияУПД", МетодСервераБезКонтекста(, "ПолучитьЗначениеСвойства", Организация, "ДиадокУказыватьОтсутствиеОснованияУПД",, Ложь));
		
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
			
			НомерДокумента= НомерДокумента + 1;
			
			Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.ТекстОшибкиВалидации) Тогда
				СтрокаТаблицыДокументов.Вкл = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицыДокументов.ЭтоФайл Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущиеОшибки = "";
			
			Парам_DocumentType	 = СтрокаТаблицыДокументов.DocumentType;
			Парам_Документ1С	 = СтрокаТаблицыДокументов.Документ1С;
			ВнешняяПечатнаяФорма = СтрокаТаблицыДокументов.ВнешняяПечатнаяФорма;
			
			Если 	 Парам_DocumentType = "XmlTorg12" 
				ИЛИ  Парам_DocumentType = "Invoice" 
				ИЛИ  Парам_DocumentType = "UniversalTransferDocument"
				ИЛИ  Парам_DocumentType = "UniversalCorrectionDocument"
				ИЛИ (Парам_DocumentType = "XmlAcceptanceCertificate"
						И НЕ ЗначениеЗаполнено(МетодСервераБезКонтекста(, "ПолучитьВнешнююПечатнуюФормуАкта", Парам_Документ1С))) Тогда
								
				Парам_ФункцияДокумента	= СтрокаТаблицыДокументов.ФункцияУПД;
				Парам_НомерЗаказа 		= СтрокаТаблицыДокументов.НомерЗаказа; 
				Парам_ДопСведения 		= СтрокаТаблицыДокументов.ДопСведения;
				
				ФорматОтправки = СтрокаТаблицыДокументов.ФорматОтправки;
				ТипКонтента = ФорматОтправки.ТипКонтента;
								
				DocumentContent = СобратьКонтентФормализованного(ТипКонтента, Парам_ФункцияДокумента, Парам_Документ1С, ДопПараметры, Парам_НомерЗаказа, Парам_ДопСведения, ФИОПодписанта);
				ТекущиеОшибки	= ВалидироватьКонтентФормализованного(DocumentContent, ТипКонтента, Парам_ФункцияДокумента, Парам_Документ1С);
				
			Иначе
				
				Попытка
					РезультатВизуализации = РезультатВизуализацииНеформализованного(Парам_DocumentType, Парам_Документ1С, Неопределено, ФИОПодписанта);
				Исключение
					ТекущиеОшибки = МетодКлиента("Модуль_Клиент", "ОформитьОшибкиВHTML", ОписаниеОшибки(), "Ошибка формирования печатной формы");
				КонецПопытки;
				
				Если ЗначениеЗаполнено(РезультатВизуализации) Тогда
					ТекущиеОшибки = РезультатВизуализации.СписокОшибок;
				КонецЕсли;

			КонецЕсли;
									
			СтрокаТаблицыДокументов.ТекстОшибкиВалидации= ТекущиеОшибки;
			
			//Сбрасываем галочки на невалидном документе
			СтрокаТаблицыДокументов.Вкл= (СтрокаТаблицыДокументов.Вкл = Истина) И (НЕ ЗначениеЗаполнено(ТекущиеОшибки));
						
		КонецЦикла;
		
		// Компенсируем недостатки архитектуры
		ВнешняяПечатнаяФорма = _ВнешняяПечатнаяФорма;
						
	КонецПроцедуры
	
	&НаКлиенте
	Функция СобратьКонтентФормализованного(Парам_ТипКонтента, Парам_ФункцияУПД, Парам_Документ1С, ДопПараметры, Парам_НомерЗаказа, Парам_ДопСведения, Парам_ФИОПодписанта)
		
		ДополнительныеПараметры = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ДополнительныеПараметрыПолученияКонтента");
		ДополнительныеПараметры.РежимСовместимостиФорматов155и820 = Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.РежимСовместимостиФорматов155и820;
		ДополнительныеПараметры.ДополнительныеСведенияСтрокой = Парам_ДопСведения;
		ДополнительныеПараметры.ФункцияДокумента = Парам_ФункцияУПД;
		ДополнительныеПараметры.ФИОПодписанта = Парам_ФИОПодписанта;
		
		Если ЗначениеЗаполнено(ДопПараметры) Тогда
			
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ДопПараметры);
			
		КонецЕсли;
		
		ТипыКонтента = ТипыКонтента();
		
		Если Парам_ТипКонтента = ТипыКонтента.Utd820SellerContent Тогда
			
			DocumentContent = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "КонтентУПД820"
								, Парам_Документ1С
								, ДополнительныеПараметры);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.UtdSellerContent Тогда
			
			DocumentContent = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "КонтентУПД155"
								, Парам_Документ1С
								, ДополнительныеПараметры);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.UcdSellerContent Тогда
			
			DocumentContent = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "КонтентУКД189"
								, Парам_Документ1С
								, ДополнительныеПараметры);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.Torg12SellerContent Тогда
			
			DocumentContent = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "КонтентНакладной172"
								, Парам_Документ1С
								, ДополнительныеПараметры);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.InvoiceContent Тогда 
			
			DocumentContent = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "КонтентСчетаФактуры93"
								, Парам_Документ1С
								, ДополнительныеПараметры);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.InvoiceCorrectionContent Тогда 
			
			DocumentContent = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "КонтентКорректировочногоСчетаФактуры93"
								, Парам_Документ1С
								, ДополнительныеПараметры);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.AcceptanceCertificateSellerContent Тогда
			
			DocumentContent = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "КонтентАкта172"
								, Парам_Документ1С
								, ДополнительныеПараметры);
			
		Иначе
			
			DocumentContent = Неопределено;
			
		КонецЕсли;
		
		Возврат DocumentContent;
		
	КонецФункции
	
	&НаКлиенте
	Функция ВалидироватьКонтентФормализованного(DocumentContent, Парам_ТипКонтента, Парам_ФункцияУПД, Парам_Документ1С, СообщитьОСтаромФормате = Ложь)
		
		ТипыКонтента = ТипыКонтента();
		
		Если Парам_ТипКонтента = ТипыКонтента.Utd820SellerContent Тогда
			
			ТекущиеОшибки = МетодСервераБезКонтекста(,"ВалидацияUTD820", DocumentContent);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.UtdSellerContent Тогда
			
			ТекущиеОшибки = МетодСервераБезКонтекста(,"ВалидацияUTD", DocumentContent);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.UcdSellerContent Тогда
			
			ТекущиеОшибки = МетодСервераБезКонтекста(,"ВалидацияUCD", DocumentContent);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.Torg12SellerContent Тогда
			
			ТекущиеОшибки = МетодСервераБезКонтекста(, "ВалидацияXmlTorg12Content", DocumentContent);
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.InvoiceContent Тогда
			
			ТекущиеОшибки = МетодСервераБезКонтекста(, "ВалидацияInvoiceContent", DocumentContent, Парам_Документ1С);
			
			Если СообщитьОСтаромФормате Тогда 
				HTMLТекст = "<h3> <a href=""УВЕДОМЛЕНИЕОСМЕНЕФОРМАТА""> Подробнее </a></h3>";
				ОшибкиФормата = МетодКлиента("Модуль_Клиент", "ОформитьОшибкиВHTML", HTMLТекст, "Счет-фактура в устаревшем формате");
			КонецЕсли;
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.InvoiceCorrectionContent Тогда
			
			ТекущиеОшибки =	МетодСервераБезКонтекста(, "ВалидацияInvoiceCorrectionContent", DocumentContent, Парам_Документ1С);
			
			Если СообщитьОСтаромФормате Тогда 
				HTMLТекст = "<h3> <a href=""УВЕДОМЛЕНИЕОСМЕНЕФОРМАТА""> Подробнее </a></h3>";
				ОшибкиФормата = МетодКлиента("Модуль_Клиент", "ОформитьОшибкиВHTML", HTMLТекст, "Счет-фактура в устаревшем формате");
			КонецЕсли;
			
		ИначеЕсли Парам_ТипКонтента = ТипыКонтента.AcceptanceCertificateSellerContent Тогда
			
			ТекущиеОшибки = МетодСервераБезКонтекста(, "ВалидацияXmlAcceptanceCertificateContent", DocumentContent);
			
		Иначе
			
			ТекущиеОшибки = "";
			
		КонецЕсли;
		
		Возврат ТекущиеОшибки;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПроверитьПоказатьОшибкиВСтруктуреДокумента(ПротоСтруктура)
		
		Ошибки = МетодСервераБезКонтекста(,"ВалидацияСтруктурыДокумента", ПротоСтруктура);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьДокумент1С()
		
		ОграничитьРезультатСчетФактурой = ЭДОбъект.Type = "Invoice"
		ИЛИ	МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП" , ЭДОбъект)
		ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФ"	  , ЭДОбъект)
		ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФДИС", ЭДОбъект)
		ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФ"	  , ЭДОбъект);
		
		Документ1С = ПолучитьDocumentID_2_Документ(ЭДОбъект.DocumentID, ЭДОбъект.OrganizationID, ОграничитьРезультатСчетФактурой, ЭДОбъект.Direction);

	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьDocumentID_2_Документ(DocumentID, BoxID, ОграничитьРезультатСчетФактурой, DocumentDirection)
		
		Возврат МетодСервера(,"DocumentID_2_Документ", DocumentID, BoxID, ОграничитьРезультатСчетФактурой, DocumentDirection);

	КонецФункции

	&НаСервере
	Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, DocumentType = Неопределено, ОчиститьИД_Документов1СсОдинаковымDocumentID)
		
		МетодСервера(,"Установить_DocumentID_Для_Документ", Документ, DocumentID, BoxID,, ОчиститьИД_Документов1СсОдинаковымDocumentID);
		
	КонецПроцедуры

	&НаСервере
	Процедура ОчиститьCustomDocumentId(Документ)
		
		МетодСервера(,"ОчиститьCustomDocumentId", Документ);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СообщениеОбОшибкеДиадок(текстОшибки) Экспорт 
		
		ПоказатьПредупреждение(, МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ТекстОшибки), 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновитьЭДОбъект()
		
		ЭДОбъект= ЭДОбъект.Organization.GetDocumentById(ЭДОбъект.DocumentId);
		
		ПросмотрФормы();
		
		ОбновитьДокумент1С();
		
		ПараметрыОповещения=	Новый Структура;
		ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
		
		МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗакэшироватьРезультатВизуализации(ТабличныйДокумент, Ошибки, ОшибкиФормата)
		
		Если ЗначениеЗаполнено(IDТекущейСтроки) Тогда
			МассивСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("IdСтроки", IDТекущейСтроки));
			Если МассивСтрок.Количество()>0 Тогда
				ТекущаяСтрока= МассивСтрок[0];
				ТекущаяСтрока.ТекстОшибкиВалидации= Ошибки;
				ТекущаяСтрока.ТекстОшибкиФормата= ОшибкиФормата;
			КонецЕсли;
						
			КэшТабличныеДокументы.Вставить(IDТекущейСтроки, ТабличныйДокумент);
					
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УдалитьТабличныйДокументИзКэша(IdСтроки)
		
		Если НЕ КэшТабличныеДокументы.Получить(IdСтроки) = Неопределено Тогда
			КэшТабличныеДокументы.Удалить(IdСтроки);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВывестиОшибкуОтправкиНаФорму()
		
		Ошибки = ТекстПолнойОшибки();
				
		НастроитьЭлементыФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ТекстПолнойОшибки()
		
		Результат	 = "";
		Разделитель	 = "";
		
		Если ЗначениеЗаполнено(Ошибки) Тогда
			Результат	 = Результат + Разделитель + Ошибки;
			Разделитель	 = Символы.ПС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОшибкиОтправки) Тогда
			Результат	 = Результат + Разделитель + ОшибкиОтправки;
			Разделитель	 = Символы.ПС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОшибкиФормата) Тогда
			Результат	 = Результат + Разделитель + ОшибкиФормата;
			Разделитель	 = Символы.ПС;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ВалидироватьДанныеФайла(DocumentType, ДанныеФайла);
		
		СписокОшибок = "";
		
		Если Не ЗначениеЗаполнено(ДанныеФайла) Тогда // Нечего валидировать
			Возврат СписокОшибок;
		КонецЕсли;
		
		ПроверяемыеСвойства = Новый Структура; // ключ - имя поля, значение - представление
		
		Если Ложь
			Или DocumentType = "AcceptanceCertificate"
			Или DocumentType = "Torg12"
			Или DocumentType = "Torg13"
			Или DocumentType = "ReconciliationAct"
			Или DocumentType = "NonformalizedProforma"
			Или DocumentType = "SupplementaryAgreement"
			Или DocumentType = "Contract" Тогда
			
			ПроверяемыеСвойства.Вставить("DocumentNumber"	, "Номер документа"	);
			ПроверяемыеСвойства.Вставить("DocumentDate"		, "Дата документа"	);
			
		КонецЕсли;
		
		Если DocumentType = "AcceptanceCertificate"
			Или DocumentType = "Torg12"
			Или DocumentType = "Torg13"
			Или DocumentType = "NonformalizedProforma" Тогда
			ПроверяемыеСвойства.Вставить("Total", "Сумма с НДС");
		КонецЕсли;
		
		Если DocumentType = "Contract" И НЕ ДанныеФайла.ЦенаНеУказана Тогда
			ПроверяемыеСвойства.Вставить("ContractPrice", "Цена");
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ПроверяемыеСвойства Цикл 
			
			ИмяСвойства = КлючИЗначение.Ключ;
			ПредставлениеСвойства = КлючИЗначение.Значение;
			
			Если Не ДанныеФайла.Свойство(ИмяСвойства) Или Не ЗначениеЗаполнено(ДанныеФайла[ИмяСвойства]) Тогда 
				СписокОшибок = СписокОшибок + "<p> - " + ПредставлениеСвойства + "</p>";
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СписокОшибок;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОбработатьИзменениеОрганизации()
		
		BoxID = МетодСервера(, "Организация_2_BoxID", Организация);
		
		Если ЗначениеЗаполнено(BoxID) Тогда
			Organization	= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
			UserPermissions	= Organization.GetUserPermissions();
		Иначе
			Organization	= Неопределено;
			UserPermissions	= Неопределено;
		КонецЕсли;
							
		Если ЗначениеЗаполнено(Контрагент)
			 И UserPermissions <> Неопределено
			 И (	ПоказатьКнопкуПередачиНаСогласование(UserPermissions) 
				ИЛИ ПоказатьКнопкуПередачиНаПодпись(UserPermissions)) Тогда
				
			Элементы.ГруппаПередачаНаСогласование.Видимость		= Истина;
			Элементы.ГруппаПередачаНаСогласование.Доступность	= Истина;
		Иначе
			// только для операции "СоздатьНовыйПакет"
			Элементы.ГруппаПередачаНаСогласование.Видимость		= Истина;
			Элементы.ГруппаПередачаНаСогласование.Доступность	= Ложь;
		КонецЕсли;
		
	КонецПроцедуры //ОбработатьИзменениеОрганизации()
	
	&НаКлиенте
	Функция СтрокаПозиционированияВТаблицеДокументов()
		
		МассивТекущаяСтрока = ТаблицаДокументов.НайтиСтроки(Новый Структура("ТекущиеДанные", Истина));
		
		Возврат МассивТекущаяСтрока[0];
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьПеременныеФормыПриОткрытии(IdСтроки)
	
		Organization = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
		
		Если НЕ ЭДОбъект = Неопределено
			И (ЛЕВ(ЭДОбъект.Type, 7) = "Invoice"
			   Или (ЭДОбъект.Type = "UniversalTransferDocument"
			   		И МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФ"))) Тогда
			
			КоличествоСФ = 0;
			КоличествоСФ = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentType, ФункцияУПД", "UniversalTransferDocument", "СЧФ")).Количество();
			КоличествоСФ = КоличествоСФ + ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentType", "Invoice")).Количество();
															
			Если КоличествоСФ = 1 Тогда
				МассивСсылокРНК	= МетодКлиента("Модуль_Клиент","ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок", ЭДОбъект);
				ПодходящаяСФ	= МетодКлиента("Модуль_Клиент","ПолучитьПодходящуюСФ", МассивСсылокРНК);
			Иначе
				МассивСсылокРНК = Новый Массив;
				ПодходящаяСФ 	= Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		IDТекущейСтроки = IdСтроки;
	
	КонецПроцедуры //ЗаполнитьПеременныеФормыПриОткрытии()
	
	&НаКлиенте
	Процедура ЗаполнитьРеквизитыФормыТекущимиДаннымТаблицыДокументов(ТекущиеДанные)
		
		Если  ТекущиеДанные.ЭтоФайл
			И ТекущиеДанные.DocumentType = DocumentType Тогда
			
			Возврат;
			
		КонецЕсли;
		
		DocumentType			= ТекущиеДанные.DocumentType;
		Документ1С				= ТекущиеДанные.Документ1С;
		ТипДокумента			= ТекущиеДанные.ТипДокумента;
		ДопСведения				= ТекущиеДанные.ДопСведения;
		ВнешняяПечатнаяФорма 	= ?(ТекущиеДанные.ЭтоФайл, Неопределено, ТекущиеДанные.ВнешняяПечатнаяФорма);
		ФункцияУПД				= ТекущиеДанные.ФункцияУПД;
		
	КонецПроцедуры //ЗаполнитьРеквизитыФормыТекущимиДаннымТаблицыДокументов()
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ТЕЛО МОДУЛЯ

	&НаКлиенте
	Процедура СоздатьДокумент(Режим) Экспорт
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
		ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
		ПараметрыФормы.Вставить("Direction", 			ЭДОбъект.Direction);
		ПараметрыФормы.Вставить("Type",					ЭДОбъект.type);
		ПараметрыФормы.Вставить("CounteragentBoxID", 	ЭДОбъект.Counteragent.ID);
		
		ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
		ПараметрыФормы.Вставить("Организация", 			Организация);
		
		Если ЭДОбъект.Type = "UniversalTransferDocument" Тогда
			ПараметрыФормы.Вставить("Function",			МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function));
		КонецЕсли;
		
		Если Режим = "Ввод" Тогда
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаНакладной", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаНакладной");

		ИначеЕсли Режим = "Сопоставление" Тогда
			
			БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭДОбъект.Version);
			
			Если БазовыйФормат = БазовыеФорматы().ucd Тогда
				
				ПоказатьПредупреждение( , "Сопоставление УКД не предусмотрено", 120, Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы);
				Возврат;
				
			КонецЕсли;
			
			ПараметрыФормы.Вставить("DocumentDate", 	ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 	ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Режим", 			Режим);
			Если ЭДОбъект.Direction = "Outbound" И Найти(ЭДОбъект.Type, "Invoice") = 0 Тогда 
				ПараметрыФормы.Вставить("СкрытьВозможностьСоздаватьДокумент", Истина);
			КонецЕсли;
			
			Если ЭДОбъект.Type = "InvoiceCorrection" ИЛИ ЭДОбъект.Type = "InvoiceCorrectionRevision" Тогда
				ПараметрыФормы.Вставить("TotalInc",		ЭДОбъект.TotalInc);
				ПараметрыФормы.Вставить("TotalDec",		ЭДОбъект.TotalDec);
			Иначе
				ПараметрыФормы.Вставить("Total",		ЭДОбъект.Total);
			КонецЕсли;
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокумента");
			
		ИначеЕсли Режим = "ВводСВыборомОснований" Тогда
			
			ПараметрыФормы.Вставить("DocumentDate", 	ЭДОбъект.DocumentDate);
			ПараметрыФормы.Вставить("DocumentNumber", 	ЭДОбъект.DocumentNumber);
			ПараметрыФормы.Вставить("Режим", 			Режим);
						
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокументаСОснованием");

		ИначеЕсли Режим = "ВводУПД" Тогда
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаУПД", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаУПД");

		КонецЕсли;
		
	КонецПроцедуры
	
//} ТЕЛО МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА СОБЫТИЙ

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОшибокВалидации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		ПровестиВалидациюДокументовПакета();
		ПодключитьОбработчикОжидания("ПросмотрФормы", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаНакладной(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			Если РезультатЗакрытия.Свойство("Документ1С") Тогда
				
				ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
				
			ИначеЕсли РезультатЗакрытия.Свойство("Режим") Тогда
				
				СоздатьДокумент(РезультатЗакрытия.Режим);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если ЗначениеЗаполнено(РезультатЗакрытия.Документ1С) Тогда
				ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокументаСОснованием(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			Если РезультатЗакрытия.СписокСсылокРНК.Количество() > 0 Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, РезультатЗакрытия.СписокСсылокРНК.ВыгрузитьЗначения());
			Иначе
				СоздатьДокумент(РезультатЗакрытия.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаУПД(ПараметрыФормы, ДополнительныеПараметры) Экспорт
		
		Если НЕ ПараметрыФормы = Неопределено Тогда
			Если ЗначениеЗаполнено(ПараметрыФормы.Документ1С) Тогда
				ОбновитьДокумент1С();
				ПросмотрФормы();
			Иначе
				СоздатьДокумент(ПараметрыФормы.Режим);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикЗакрытиеФормыСФ(РезультатЗакрытия, ДокументОбъект) Экспорт
		
		Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			ОбработчикСозданиеДокумента(ДокументОбъект.Ссылка);
		КонецЕсли;
		
		МассивСсылокРНК=	Новый Массив;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикСозданиеДокумента(ДокументССылка) Экспорт
		
		Если ЗначениеЗаполнено(ДокументССылка) Тогда
			МетодКлиента("Модуль_Клиент","ОбработчикСозданиеДокумента", ДокументССылка, ЭДОбъект);
			ОбновитьДокумент1С();
			ПросмотрФормы();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Если НЕ РезультатЗакрытия.DepartmentID = ТекущийDepartmentId Тогда
				
				ЭДОбъект.Move(РезультатЗакрытия.DepartmentID);
				
				ОбновитьЭДОбъект();
				
				ПараметрыОповещения=	Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", 			ЭДОбъект.OrganizationID);
				ПараметрыОповещения.Вставить("DocumentId", 		ЭДОбъект.DocumentID);
				ПараметрыОповещения.Вставить("DepartmentName", 	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Name));
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеПодразделения", ПараметрыОповещения);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораПолучателя(ПараметрыОтправкиНаСогласование, НаборДанных) Экспорт
		
		Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
						
			ОтправкаПрошлаУспешно= ВыполнитьОтправку(ПараметрыОтправкиНаСогласование);
			Если ОтправкаПрошлаУспешно = Истина Тогда
				Закрыть(ТаблицаДокументов);
			Иначе
				ВывестиОшибкуОтправкиНаФорму();
			КонецЕсли;
			
		Иначе
			МетодКлиента("Модуль_Клиент", "ОтправитьНаОбработку", ЭДОбъект, ПараметрыОтправкиНаСогласование);
			ОбновитьЭДОбъект();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказаВПодписи(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			Попытка
				МетодКлиента("Модуль_Клиент", "ОтказатьВПодписи", ЭДОбъект, РезультатЗакрытия.Комментарий);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				СообщениеОбОшибкеДиадок(ОписаниеОшибки);
			Иначе
				Элементы.ГруппаКнопокПодписания.Видимость = Истина;
				ОбновитьЭДОбъект();
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаСогласовать(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка 
				ЭДОбъект.Approve(РезультатЗакрытия.Комментарий);
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторное согласование не возможно", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете согласовать документ", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
				Возврат;
			КонецПопытки;
			ОбновитьЭДОбъект();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			Попытка
				ЭДОбъект.DisApprove(РезультатЗакрытия.Комментарий);
				ОбновитьЭДОбъект();
			Исключение
				ТекстОшибкиПодписания=	ОписаниеОшибки();
				Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Повторный отказ в согласовании не возможен", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
					ПоказатьПредупреждение(, "Вы не можете отказать в согласовании", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
					Возврат;
				КонецЕсли;
				СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
			КонецПопытки;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикУдалитьДокумент(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			ПараметрУдаляемогоДокумента=	Новый Структура();
			ПараметрУдаляемогоДокумента.Вставить("DocumentId", 	ЭДОбъект.DocumentId);
			ПараметрУдаляемогоДокумента.Вставить("BoxID", 		ЭДОбъект.Organization.Id);
			
			МассивДокументов=	Новый Массив();
			МассивДокументов.Добавить(ПараметрУдаляемогоДокумента);
			
			Если ЗначениеЗаполнено(Документ1С) Тогда
				
				ОчиститьИД_Документов1СсОдинаковымDocumentID = ЭДОбъект.Type = "Invoice"
				ИЛИ	МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП" , ЭДОбъект)
				ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФ"	  , ЭДОбъект)
				ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФДИС", ЭДОбъект)
				ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФ"	  , ЭДОбъект);
				
				Установить_DocumentID_Для_Документ(Документ1С,,,, ОчиститьИД_Документов1СсОдинаковымDocumentID);
				ОчиститьCustomDocumentId(Документ1С);
				
			КонецЕсли;
			
			Если НЕ ЭДОбъект.IsDeleted Тогда
				Попытка
					ЭДОбъект.Delete();
					ПоказатьПредупреждение(, "Документ " + МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект) + " перемещен в удаленные.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Исключение
					
					ОписаниеОшибки=	ОписаниеОшибки();
					ТекстОшибки=	ОписаниеОшибки;
					Если Найти(ТекстОшибки, "is already delete") Тогда
						ТекстОшибки=	"Документ " + МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект) + " уже был удален.";
					Иначе
						ТекстОшибки=	"Ошибка удаления документа";
					КонецЕсли;
					
					ПараметрыФормы=	Новый Структура();
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка удаления");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	ТекстОшибки);
					ПараметрыФормы.Вставить("Подробности", 		ОписаниеОшибки);
					
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
				КонецПопытки;
				
			КонецЕсли;
			
			ПросмотрФормы();
			МетодКлиента(,"ОповеститьФормы","УдалениеДокументов", МассивДокументов);
		КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтменитьСопоставление(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодвозвратаДиалога.Да Тогда
			
			ОчиститьИД_Документов1СсОдинаковымDocumentID = ЭДОбъект.Type = "Invoice"
			ИЛИ	МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП" , ЭДОбъект)
			ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФ"	  , ЭДОбъект)
			ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФДИС", ЭДОбъект)
			ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФ"	  , ЭДОбъект);
			
			Установить_DocumentID_Для_Документ(Документ1С,,,, ОчиститьИД_Документов1СсОдинаковымDocumentID);
			ОчиститьCustomDocumentId(Документ1С);

			Документ1С=	Неопределено;
			
			ОбновитьДокумент1С();
			ПросмотрФормы();
			
			ПараметрыОповещения=	Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
			ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
			ПараметрыОповещения.Вставить("Документ1С", Документ1С);
			
			МетодКлиента(,"ОповеститьФормы","ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыПодписанияДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			Попытка
				МетодКлиента("Модуль_Клиент", "ПодписатьВДиадоке", ЭДОбъект, РезультатЗакрытия.ОтветныйТитул);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				СообщениеОбОшибкеДиадок(ОписаниеОшибки);
			КонецПопытки;
			
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Элементы.ГруппаКнопокПодписания.Видимость = Ложь;
				ОбновитьЭДОбъект();
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапросАннулирования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				
				ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type);
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
				
				ЭДОбъект.SendRevocationRequest(РезультатЗакрытия.Комментарий);
				
				ОбновитьЭДОбъект();
				
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры = Истина Тогда
			ПереотправитьДокумент();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаАннулироватьДокумент(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				
				ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type);
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
				
				ЭДОбъект.AcceptRevocationRequest();
				
				ОбновитьЭДОбъект();
				
			Исключение 
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				
				ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type);
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
				
				ЭДОбъект.RejectRevocationRequest(РезультатЗакрытия.Комментарий);
				
				ОбновитьЭДОбъект();
				
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыНастройкиПодписи(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
						
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			
			ИмяФормыПодписи = "";
			ДополнительныеПараметры.Свойство("ИмяФормыПодписи", ИмяФормыПодписи);
			
			Если ЗначениеЗаполнено(ИмяФормыПодписи) 
				И ИмяФормыПодписи = "НастройкаПодписиУПД"
				И ТипЗнч(РезультатЗакрытия) = Тип("Структура") //были сохранены изменения
				И ЗначениеЗаполнено(РезультатЗакрытия) Тогда
				
				Ошибки 			= "";
				ОшибкиОтправки 	= "";
			КонецЕсли;
			
		КонецЕсли;
				
		ПодключитьОбработчикОжидания("ПросмотрФормы", 0.1, Истина);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыОтветаЗапроситьУточнение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если НЕ РезультатЗакрытия = Неопределено Тогда
			
			Попытка
				
				МетодКлиента("Модуль_Клиент", "ЗапроситьУточнение", ЭДОбъект, РезультатЗакрытия.Комментарий);
				
				ОбновитьЭДОбъект();
				
			Исключение
				СообщениеОбОшибкеДиадок(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьОтправкуДокумента(ПодтверждениеОтправки, РежимОтправки) Экспорт
		
		Если ПодтверждениеОтправки <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Если РежимОтправки = "ПодписатьИОтправить" Тогда
			
			ОтправкаПрошлаУспешно = ВыполнитьОтправку();
			
			Если ОтправкаПрошлаУспешно = Истина Тогда
				
				ТекстОповещения = НСтр("ru = 'Документы успешно отправлены'");
				МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", ТекстОповещения, DocumentID);
				
				МетодКлиента(, "ОповеститьФормы", "ДиадокЗакрытьФормуДокумента", DocumentID);
				
			Иначе
				ВывестиОшибкуОтправкиНаФорму();
			КонецЕсли;
			
		ИначеЕсли РежимОтправки = "ПередатьНаСогласование" Тогда
			
			МетодКлиента("Модуль_Клиент", "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, Организация, "ApprovementRequest");
			
		ИначеЕсли РежимОтправки = "ПередатьНаПодписание" Тогда
			
			МетодКлиента("Модуль_Клиент", "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, Организация, "SignatureRequest");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОповещенияВопросВыбраныНеВсеФайлы(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ПередатьФайлыДляДобавленияВПакеты();	
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОтветаВопросаЗапросаАннулирования(РезультатВопроса, ДополнительныеПараметры) Экспорт 
		
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			ПереотправитьДокумент();
			Возврат;
		КонецЕсли;
		
		ЗапроситьАннулированиеДокумента(Истина);
		
	КонецПроцедуры
	
//}	ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ

	&НаСервере
	Процедура ПрочитатьПараметрыФормы()
		
		Параметры.Свойство("ТочкаВызова", ТочкаВызова);
		Параметры.Свойство("Операция"	, Операция);
		Параметры.Свойство("Организация", Организация);
		Параметры.Свойство("КаталогВыбораФайлов", КаталогВыбораФайлов);	
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ДекорацияПодробноНажатие(Элемент)
		
		HTMLДокумент= МетодКлиента("Модуль_Клиент","СформироватьHTMLПредставлениеРезолюций", ЭДОбъект, Организация);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("HTMLДокумент",	HTMLДокумент);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтатусДокументаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "RoamingNotificationStatusError" Тогда
			
			СтандартнаяОбработка= Ложь;
			
			Если НРег(Лев(ПредставлениеСтатусаРоуминг, 6)) = "ошибка" Тогда
				
				ПараметрыФормы= Новый Структура("Заголовок, ОписаниеОшибки, Подробности",
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоуминг,
				ПредставлениеСтатусаРоумингДетали);
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				
			Иначе
				ОбновитьСтатусЭД();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
		
	&НаСервере
	Процедура НастроитьКнопкиКоманднойПанелиНаСервере()
		
		Команды.ПерейтиВДиадок.Подсказка= СтрЗаменить("Перейти в %НаименованиеСистемы%"
			, "%НаименованиеСистемы%"
			, МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьТаблицуДокументовПоДаннымВыбранныхФайлов(МассивАдресовФайлов)
		
		ТекущиеДанныеУказаны= Ложь;
		Для каждого ПутьКФайлу из МассивАдресовФайлов Цикл
			
			НоваяСтрока= ТаблицаДокументов.Добавить();
			
			НоваяСтрока.Вкл= 			Истина;
			
			НоваяСтрока.IdСтроки= 		Новый УникальныйИдентификатор;
			НоваяСтрока.DocumentType= 	"Nonformalized";
			
			Если ТекущиеДанныеУказаны Тогда
				НоваяСтрока.ТекущиеДанные= 	Ложь;
			Иначе
				НоваяСтрока.ТекущиеДанные= 	Истина;
				ТекущиеДанныеУказаны= 		Истина;
			КонецЕсли;
			
			НоваяСтрока.ЭтоФайл= 	Истина;
			СвойстваФайла= Новый_СвойстваФайла();
			СвойстваФайла.ПолноеИмя= ПутьКФайлу;
			НоваяСтрока.СвойстваФайла= СвойстваФайла;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Производит заполнение полей таблицы документов данными по умолчанию
	//
	&НаКлиенте
	Процедура ЗаполнитьТаблицуДокументовДаннымиПоУмолчанию()

		Для каждого ЭлементТаблицыДокументов из ТаблицаДокументов Цикл
				
			ФайлДанных = Новый Файл(ЭлементТаблицыДокументов.СвойстваФайла.ПолноеИмя);
			
			ЭлементТаблицыДокументов.Представление  = "Неформализованный";
			ЭлементТаблицыДокументов.DocumentType   = "Nonformalized"; //по умолчанию новый файл имеет тип "Nonformalized" 
			ЭлементТаблицыДокументов.ФорматОтправки = МетодКлиента("Модуль_Выгрузка", "ОписаниеФорматаДляОтправкиФайла", ЭлементТаблицыДокументов.DocumentType);
			
			ЭлементТаблицыДокументов.ДанныеФайла    = МетодКлиента("Модуль_Клиент", "Новый_NonformalizedDocumentToSend");
			ЗаполнитьСвойстваФайла(ЭлементТаблицыДокументов.СвойстваФайла, ФайлДанных);
										
		КонецЦикла;	

	КонецПроцедуры // ЗаполнитьТаблицуДокументовДаннымиПоУмолчанию()
	
	&НаСервере
	Процедура ЗаполнитьТаблицуДокументов(ТочкаВызова, МассивДокументовПакета, ТекущиеДанные)
		
		ВПакетеОдинДокумент = МассивДокументовПакета.Количество()=1;
		
		Для каждого СтрокаМассива из МассивДокументовПакета Цикл
			
			ПредставлениеДокумента = СформироватьПредставлениеДокумента(СтрокаМассива);
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
			
			НоваяСтрока.Вкл = ВПакетеОдинДокумент Или СтрокаМассива.Вкл;
			НоваяСтрока.Представление = ПредставлениеДокумента;
			НоваяСтрока.ТекущиеДанные = СтрокаМассива.ЭтоТекущиеДанные;
			НоваяСтрока.ТекстОшибкиВалидации = СтрокаМассива.ОшибкаВалидации;
			
			Если СтрокаМассива.ЭтоТекущиеДанные Тогда
				ТекущиеДанные = СтрокаМассива; 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбора_ТипДокумента()
		
		ТипыНеформализованных = ТипыНеформализованныхДокументов();
		
		Для каждого КлючЗначение Из ТипыНеформализованных Цикл
			Элементы.ТипДокумента.СписокВыбора.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
		Элементы.ТипДокумента.СписокВыбора.СортироватьПоПредставлению();
								
	КонецПроцедуры
	
	&НаКлиенте
	Функция ТипыНеформализованныхДокументов() 
		
		Результат = Новый Соответствие;
			
		Результат.Вставить("Nonformalized"			, "Неформализованный");
		Результат.Вставить("PriceListAgreement"		, "Протокол согласования цены");
		Результат.Вставить("CertificateRegistry"	, "Реестр сертификатов");
		Результат.Вставить("ServiceDetails"			, "Детализация");
		Результат.Вставить("ReconciliationAct"		, "Акт сверки");
		Результат.Вставить("NonformalizedProforma"	, "Счет на оплату");
		Результат.Вставить("AcceptanceCertificate"	, "Акт выполненных работ");
		Результат.Вставить("Contract"				, "Договор");
		Результат.Вставить("Torg12"					, "Накладная");
		
		Возврат Результат;
					
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьСписокВыбора_Организация()
		
		Элементы.Организация.СписокВыбора.Очистить();
		Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(МетодКлиента("Модуль_Клиент","ПолучитьОрганизацииНезаблокированныеПоAPI"));		
		
	КонецПроцедуры //ЗаполнитьСписокВыбора_Организация()
		
	&НаСервере
	Функция СформироватьПредставлениеДокумента(СтрокаМассива)
		
		ПредставлениеДокумента= "";
		Если СтрокаМассива.DocumentType = "XmlTorg12" Тогда
			ПредставлениеДокумента= "Накладная № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "XmlAcceptanceCertificate" Тогда
			ПредставлениеДокумента= "Акт № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "Invoice" Тогда
			ПредставлениеДокумента= "Счет-фактура № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "InvoiceRevision" Тогда
			ПредставлениеДокумента= "Исправление № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "InvoiceCorrection" Тогда
			ПредставлениеДокумента= "Корректировочный счет-фактура № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "InvoiceCorrectionRevision" Тогда
			ПредставлениеДокумента= "ИКСФ № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "NonformalizedProforma" Тогда
			ПредставлениеДокумента= "Счет " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "UniversalTransferDocument" Тогда
			ПредставлениеДокумента= "УПД " + МетодСервера(, "ФункцияУПД", СтрокаМассива.ТипДокумента) + " № " + СтрокаМассива.НомерДокумента + " от " + Формат(СтрокаМассива.ДатаДокумента, "ДЛФ=Д");
		ИначеЕсли СтрокаМассива.DocumentType = "Nonformalized" И СтрокаМассива.ЭтоФайл Тогда
			ПредставлениеДокумента= СтрокаМассива.ТипДокумента;
			Если НЕ СтрокаМассива.ДанныеФайла = Неопределено Тогда
				ДанныеФайла= СтрокаМассива.ДанныеФайла;
				Если ДанныеФайла.Свойство("DocumentNumber") И ЗначениеЗаполнено(ДанныеФайла.DocumentNumber) Тогда
					ПредставлениеДокумента= ПредставлениеДокумента + " № " + ДанныеФайла.DocumentNumber;
				КонецЕсли;
				Если ДанныеФайла.Свойство("DocumentDate") И ЗначениеЗаполнено(ДанныеФайла.DocumentDate) Тогда
					ПредставлениеДокумента= ПредставлениеДокумента + " от " + Формат(ДанныеФайла.DocumentDate, "ДЛФ=Д");
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПредставлениеДокумента= СтрокаМассива.ТипДокумента;
		КонецЕсли;
		
		Возврат ПредставлениеДокумента; 
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПерейтиВДиадок(Команда)
		
		Если НЕ ЭдОбъект = Неопределено Тогда
			ПоказатьДокументВДиадоке(ЭдОбъект);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура  ПоказатьДокументВДиадоке(ДокументДиадока)
		
		МетодКлиента("Модуль_Клиент","ПоказатьДокументВДиадоке", ДокументДиадока.OrganizationId, ДокументДиадока.DocumentId);
		
	КонецПроцедуры 
	
	// Устанавливает/снимает доступность для элемента формы "НастроитьПараметрыПодписи"
	//
	// Параметры:
	//  ТипДокумента - Строка	- тип обрабатываемого документа 
	//  ФункцияУПД	 - Строка	- функция универсального документа
	//
	&НаКлиенте	
	Процедура УправлениеДоступностью_Кнопка_НастроитьПараметрыПодписи(ТипДокумента, ФункцияУПД)
		
		ВидАвторизации = ?(Organization = Неопределено, "", Organization.AuthenticateType);
		
		Элементы.НастроитьПараметрыПодписи.Видимость = ТочкаВызова = "ТаблицаДокументовНаОтправку"
		                                                	И НЕ (Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты")
															И (Найти(ТипДокумента, "Торг-12")>0
																ИЛИ (Найти(ТипДокумента, "УПД")>0 И ВидАвторизации = "Certificate")
																ИЛИ (Найти(ТипДокумента, "УКД")>0 И ВидАвторизации = "Certificate")
																ИЛИ (Найти(ТипДокумента, "Акт")>0 И Найти(ТипДокумента, "Акт сверки")=0)
																ИЛИ (Найти(ТипДокумента, "Счет-фактура")>0 
																	И (ФункцияУПД = "СЧФ" ИЛИ ФункцияУПД = "КСЧФ")));	
							
	КонецПроцедуры // УправлениеДоступностью_Кнопка_НастроитьПараметрыПодписи()
					
	&НаКлиенте
	Функция ПоказатьКнопкуПерейтиВДиадок()
		
		Возврат НЕ ЭДОбъект = Неопределено;

	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСтруктураПодчиненности()
		
		Возврат НЕ ЭДОбъект = Неопределено;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтправитьСвязанныеДокументы()
		
		Возврат НЕ ЭДОбъект = Неопределено;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокПодписания(UserPermissions)
		
		DocumentStatus= ?(ЭДОбъект <> Неопределено, ЭДОбъект.Status, "");
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И ЭДОбъект.Direction = "Inbound"
		И ЭДОбъект.RevocationStatus = "RevocationStatusNone"
		И UserPermissions.CanSignDocuments
		
		И 	  DocumentType 	   <> "NonformalizedProforma"
		И Лев(DocumentType, 7) <> "Invoice"
		
		И (		DocumentStatus = "InboundWaitingForRecipientSignature" 
		   ИЛИ  DocumentStatus = "InboundInvalidRecipientSignature"
		   ИЛИ (DocumentStatus = "InboundNoRecipientSignatureRequest" И DocumentType = "Nonformalized"))
		   
		И (ЭДОбъект.IsTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate");

	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтменитьСопоставление()
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И ЗначениеЗаполнено(Документ1С)
		И ЭДОбъект.Direction <> "Internal";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппуКнопокСогласования(UserPermissions)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если	ЭДОбъект <> Неопределено
				И UserPermissions.CanAddResolutions // Пользователь имеет право согласовывать документы
		Тогда
		
		Если ЭДОбъект.ResolutionStatus = Неопределено
			Или ЭДОбъект.ResolutionStatus.Type = "None" Тогда
				
				//Такой кейс возможен в двух случаях:
				//1. По документу еще не запрашивали согласование
				//2. Документ был согласован, далее подписан и отправлен. После этого ResolutionStatus возвращается Неопределено, как будто бы и не согласовывался. 
				
				Возврат МетодКлиента("Модуль_Клиент", "ДокументНеСогласованРанее", ЭДОбъект);
				
			ИначеЕсли 	ЭДОбъект.ResolutionStatus.Type = "ApprovementRequested" 	 		// Документ в состоянии согласования
				 		И (ЭДОбъект.ResolutionStatus.TargetUser = Неопределено    	 		// Документ отправлен на согласование любому пользователю подразделения
					 		ИЛИ ЭДОбъект.ResolutionStatus.TargetUser.IsCurrentUser) Тогда 	// Документ отправлен на согласование текущему пользователю
							
				Возврат Истина;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
		
		Иначе
			Возврат Ложь;
		КонецЕсли;
				
	КонецФункции
				
	&НаКлиенте
	Функция ПоказатьКнопкуПередачиНаПодпись(UserPermissions)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Ложь;
			ИначеЕсли Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ОткрытьПакет" Тогда
				Если UserPermissions = Неопределено Тогда
					Возврат Ложь;
				Иначе
					Возврат UserPermissions.CanRequestResolutions;	// Пользователь имеет право запросить согласование или подписание документа
				КонецЕсли;
			Иначе
				Возврат Ложь; 			
			КонецЕсли;
			
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовИсходящих" Тогда 
			
			Возврат Ложь;
			
		ИначеЕсли ТочкаВызова = "ПереотправкаДокумента" Тогда 
			
			Результат = UserPermissions.CanRequestResolutions;
			
			Возврат Результат;
			
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовВнутренних"
			Или ТочкаВызова = "ТаблицаДокументовВходящих" Тогда
			
			Если ЭДОбъект = Неопределено Тогда
				Результат = Ложь;
			Иначе
				
				ЕстьПрава = UserPermissions.CanRequestResolutions;
				
				СтатусСогласованияПодходит = ЭДОбъект.ResolutionStatus = Неопределено
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "None"
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "Approved"
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "Disapproved"
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "SignatureDenied";
				
				СтатусПодходит = ЭДОбъект.Status = "OutboundWaitingForSenderSignature"
									Или ЭДОбъект.Status = "InboundWaitingForRecipientSignature";
				
				ТипПодходит = DocumentType = "XmlTorg12" 
							ИЛИ DocumentType = "XmlAcceptanceCertificate"
							ИЛИ DocumentType = "NonformalizedProforma"
							ИЛИ DocumentType = "Nonformalized"
							ИЛИ (DocumentType = "UniversalTransferDocument" 
								И (МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаДОП", ЭДОбъект)
									ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", ЭДОбъект)));
				
				Результат = ЕстьПрава
							И СтатусСогласованияПодходит
							И СтатусПодходит
							И ТипПодходит;
				
			КонецЕсли;				
			
			Возврат Результат;	
			
		Иначе
			
			Если ЭДОбъект = Неопределено Тогда
				Результат = Ложь;
			Иначе
				
				ЕстьПрава = UserPermissions.CanRequestResolutions;
				
				ДокументНеСогласовывался = ЭДОбъект.ResolutionStatus = Неопределено
										ИЛИ ЭДОбъект.ResolutionStatus.Type = "None";
				
				СтатусПодходит = ЭДОбъект.Status = "InboundWaitingForRecipientSignature";
				
				ТипПодходит = DocumentType = "XmlTorg12" 
							ИЛИ DocumentType = "XmlAcceptanceCertificate"
							ИЛИ DocumentType = "NonformalizedProforma"
							ИЛИ DocumentType = "Nonformalized"
							ИЛИ (DocumentType = "UniversalTransferDocument" 
								И (МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаДОП", ЭДОбъект)
									ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП", ЭДОбъект)));
				
				Результат = ЕстьПрава
							И ДокументНеСогласовывался
							И СтатусПодходит
							И ТипПодходит;
				
			КонецЕсли;				
			
			Возврат Результат;
						
		КонецЕсли;
				
	КонецФункции
			
	&НаКлиенте
	Функция ПоказатьКнопкуПередачиНаСогласование(UserPermissions)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Ложь;
			ИначеЕсли Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ОткрытьПакет" Тогда
				Если UserPermissions = Неопределено Тогда
					Возврат Ложь;
				Иначе
					Возврат UserPermissions.CanRequestResolutions;	// Пользователь имеет право запросить согласование или подписание документа
				КонецЕсли;
			Иначе
				Возврат Ложь; 			
			КонецЕсли;
			
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовИсходящих" Тогда 
			
			Возврат Ложь;
			
		ИначеЕсли ТочкаВызова = "ПереотправкаДокумента" Тогда 
			
			Результат = UserPermissions.CanRequestResolutions;
			
			Возврат Результат;
			
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовВнутренних"
			Или ТочкаВызова = "ТаблицаДокументовВходящих" Тогда 
			
			Если ЭДОбъект = Неопределено Тогда
				Результат = Ложь;
			Иначе
				
				ЕстьПрава = UserPermissions.CanRequestResolutions;
				
				СтатусСогласованияПодходит = ЭДОбъект.ResolutionStatus = Неопределено
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "None"
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "Approved"
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "Disapproved"
											ИЛИ ЭДОбъект.ResolutionStatus.Type = "SignatureDenied";
											
				Результат = ЕстьПрава И СтатусСогласованияПодходит;
							
			КонецЕсли;
										
			Возврат Результат;							
							
		Иначе
			
			Возврат ЭДОбъект <> Неопределено
					И UserPermissions.CanRequestResolutions		// Пользователь имеет право запросить согласование или подписание документа
				 	И (ЭДОбъект.ResolutionStatus = Неопределено ИЛИ ЭДОбъект.ResolutionStatus.Type = "None")	// Документ еще не согласован
				    			
		КонецЕсли;		
				
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуУдалить(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignDocuments
		И НЕ ЭДОбъект.IsDeleted;
		
	КонецФункции
	
	&НаКлиенте
	Функция НужноПоказатьКнопкуДобавитьВВыделенныеПакеты()
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И Операция = "ДобавитьВВыделенныеПакеты" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСоздатьДокумент1С()
		
		Результат = Ложь;
		
		Если СоздаватьДокументыУчетаСПредварительнымПросмотром()
			И ЭтоВходящийДокумент()
			И Не СуществуетСвязьСДокументомУчета() Тогда 
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуОтразитьДокументВУчете()
		
		Результат = Ложь;
		
		Если ИспользоватьНовуюМеханикуОтраженияВУчете()
			И ЭтоВходящийДокумент()
			И Не СуществуетСвязьСДокументомУчета() Тогда
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуСопоставитьДокумент1С()
		
		Результат = Ложь;
		
		Если ЭДОбъект <> Неопределено
			И Не ИспользоватьНовуюМеханикуОтраженияВУчете()
			И Не СуществуетСвязьСДокументомУчета() Тогда 
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаАннулирования(UserPermissions)
		
		DocumentStatus			 = ?(ЭДОбъект <> Неопределено, ЭДОбъект.Status			, "");
		DocumentRevocationStatus = ?(ЭДОбъект <> Неопределено, ЭДОбъект.RevocationStatus, "");
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignDocuments
		И ЭДОбъект.SenderSignatureStatus = "SenderSignatureCheckedAndValid" // Подпись отправителя проверена и валидна
		И ЭДОбъект.Organization.AuthenticateType = "Certificate"
		
		И (		DocumentRevocationStatus = "RevocationStatusNone"           // Документ не аннулирован и не было предложений об аннулировании
			ИЛИ DocumentRevocationStatus = "RevocationRejected")            // В предложении об аннулировании отказано
			
		И (		DocumentStatus = "InboundWithRecipientSignature" 
			ИЛИ DocumentStatus = "InboundRecipientSignatureRequestRejected"
			ИЛИ DocumentStatus = "OutboundWithRecipientSignature" 
			ИЛИ DocumentStatus = "OutboundRecipientSignatureRequestRejected"
			ИЛИ DocumentStatus = "OutboundWaitingForRecipientSignature"
			ИЛИ DocumentStatus = "OutboundWaitingForInvoiceReceiptAndRecipientSignature"
			ИЛИ DocumentStatus = "InboundFinished"
			ИЛИ DocumentStatus = "OutboundFinished"
			ИЛИ DocumentStatus = "Outbound"
			ИЛИ DocumentStatus = "Inbound"
			ИЛИ DocumentStatus = "OutboundWaitingForInvoiceReceipt"
			ИЛИ DocumentStatus = "OutboundWaitingForReceipt")
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьКнопкуАннулирования(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignDocuments
		И ЭДОбъект.RevocationStatus = "RequestsMyRevocation"
		И ЭДОбъект.Organization.AuthenticateType = "Certificate"
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуОтказаАннулирования(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		
		И UserPermissions.CanSignDocuments
		И ЭДОбъект.RevocationStatus = "RequestsMyRevocation"
		И ЭДОбъект.Organization.AuthenticateType = "Certificate"
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуЗапросаУточнения(UserPermissions)
		
		Если ЭДОбъект = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" Тогда
			
			Возврат ЭДОбъект.Status = "InboundFinished"
					И НЕ ЭДОбъект.Corrected
					И НЕ ЭДОбъект.Revised
					И НЕ ЭДОбъект.AmendmentRequested
					И ЭДОбъект.Organization.AuthenticateType = "Certificate";
			
		ИначеЕсли ЭДОбъект.Type = "UniversalTransferDocument" ИЛИ ЭДОбъект.Type = "UniversalCorrectionDocument" Тогда
			
			Возврат ЭДОбъект.Direction = "Inbound"
					И НЕ ЭДОбъект.AmendmentRequested
					И ЭДОбъект.Organization.AuthenticateType = "Certificate";
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура НастроитьКнопкиКоманднойПанели()
		
		Если ЭДОбъект <> Неопределено Тогда
			UserPermissions= ЭДОбъект.Organization.GetUserPermissions();
		ИначеЕсли Organization <> Неопределено Тогда
			UserPermissions= Organization.GetUserPermissions();
		КонецЕсли;
		
		МассивНастройкиВидимости= Новый Массив;
				
		Если ПоказатьКнопкуПерейтиВДиадок() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПерейтиВДиадок", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПерейтиВДиадок", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуСтруктураПодчиненности() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ФормаСтруктураПодчиненности", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ФормаСтруктураПодчиненности", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуОтправитьСвязанныеДокументы() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтправитьСвязанныйДокумент", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтправитьСвязанныйДокумент", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьГруппуКнопокПодписания(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопокПодписания", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопокПодписания", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуОтменитьСопоставление() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтменитьСопоставление", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтменитьСопоставление", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьГруппуКнопокСогласования(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Истина, Истина);
		Иначе
			Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Ложь, Ложь);
			Иначе
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Истина, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		НужноПоказатьКнопкуПередачиНаСогласование= 	ПоказатьКнопкуПередачиНаСогласование(UserPermissions);
		НужноПоказатьКнопкуПередачиНаПодпись= 		ПоказатьКнопкуПередачиНаПодпись(UserPermissions);
		
		Если НужноПоказатьКнопкуПередачиНаСогласование И НужноПоказатьКнопкуПередачиНаПодпись Тогда
			
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", Истина, Истина);
			
		ИначеЕсли НужноПоказатьКнопкуПередачиНаСогласование И НЕ НужноПоказатьКнопкуПередачиНаПодпись Тогда
			
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", 	Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", 	Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", 		Ложь, 	Ложь);
			
		ИначеЕсли НЕ НужноПоказатьКнопкуПередачиНаСогласование И НужноПоказатьКнопкуПередачиНаПодпись Тогда
			
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", 	Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", 	Ложь,	Ложь);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", 		Истина, Истина);
			
		Иначе
			Если Операция = "СоздатьНовыйПакет" Тогда
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Истина, Ложь);
			Иначе
				ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Ложь, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		Если НужноПоказатьКнопкуДобавитьВВыделенныеПакеты() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаДобавитьВВыделенныеПакеты", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаДобавитьВВыделенныеПакеты", Ложь, Ложь);
		КонецЕсли;
				
		Если ПоказатьКнопкуУдалить(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаУдалить", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаУдалить", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуСоздатьДокумент1С() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСоздатьДокумент1С", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСоздатьДокумент1С", Ложь, Ложь);
		КонецЕсли;
		
		ФлагВидимости = ПоказатьКнопкуОтразитьДокументВУчете();
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтразитьДокументВУчете", ФлагВидимости, ФлагВидимости);
		
		Если ПоказатьКнопкуСопоставитьДокумент1С() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСопоставитьДокумент1С", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСопоставитьДокумент1С", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуЗапросаАннулирования(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьАннулирование", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьАннулирование", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуАннулирования(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаАннулировать", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаАннулировать", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуОтказаАннулирования(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтказатьВАннулировании", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтказатьВАннулировании", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуЗапросаУточнения(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьУточнение", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьУточнение", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуПереотправить(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПереотправить", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПереотправить", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуПодписатьИОтправить(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьИОтправить", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьИОтправить", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьКнопкуПодписатьЗапрошенный(UserPermissions) Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьЗапрошенный", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьЗапрошенный", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьСодержимоеПакета() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСодержимоеПакета", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопкиКоманднойПанелиТаблицыДокументов", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСодержимоеПакета", Ложь, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопкиКоманднойПанелиТаблицыДокументов", Ложь, Истина);
		КонецЕсли;
		
		Если ПоказатьГруппаДокументыПакетаКнопкиВыделения() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиВыделения", Истина, Истина);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиВыделения", Ложь, Ложь);
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСкрытьПоказатьСоставПакета", Ложь, Ложь);
		КонецЕсли;
		
		Если ПоказатьГруппаДокументыПакетаКнопкиРедактированияСостоваПакета() Тогда
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиРедактированияСостоваПакета", Истина, Истина);
		Иначе
			ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаДокументыПакетаКнопкиРедактированияСостоваПакета", Ложь, Ложь);
		КонецЕсли;
		
		НастроитьВидимостьЭлементовФормыНаСервере(МассивНастройкиВидимости);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеДоступностью_Кнопки_РедактированиеСоставаПакета(ЗначениеДоступности)
		
		Элементы.ЗаменитьФайлВПакете.Доступность= 	ЗначениеДоступности;
		Элементы.УдалитьФайлИзПакета.Доступность= 	ЗначениеДоступности;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ДобавитьНастройкуВидимости(МассивНастройкиВидимости, ИмяРеквизита, Видимость, Доступность)
		
		НастройкаВидимости = Новый Структура("ИмяРеквизита, Видимость, Доступность", ИмяРеквизита, Видимость, Доступность);
		МассивНастройкиВидимости.Добавить(НастройкаВидимости);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура НастроитьВидимостьЭлементовФормыНаСервере(МассивНастройкиВидимости)
		
		Для каждого НастройкаВидимости из МассивНастройкиВидимости Цикл
			
			ИмяРеквизита		= НастройкаВидимости.ИмяРеквизита;
			НастройкаВидимость 	= НастройкаВидимости.Видимость;
			НастройкаДоступность= НастройкаВидимости.Доступность;
			
			Элементы[ИмяРеквизита].Видимость 	= НастройкаВидимость;
			Элементы[ИмяРеквизита].Доступность 	= НастройкаДоступность;
			
		КонецЦикла;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура НастроитьЭлементыФормы()
		
		Элементы.Ошибки.Видимость = ЗначениеЗаполнено(Ошибки) ИЛИ ЗначениеЗаполнено(ОшибкиОтправки);
		
		Если ЭДОбъект <> Неопределено Тогда
			
			Элементы.ГруппаКоманднаяПанельПодвал.Видимость=	  Истина;
			Если ЭДОбъект.Direction = "Inbound" Тогда
				
				ПредставлениеКнопкиСоздать=	МетодКлиента("Модуль_Клиент","СформироватьПредставлениеКнопкиСоздатьДокументВ1С", Документ1С, ЭДОбъект, МассивСсылокРНК, ПодходящаяСФ);
				Если ЗначениеЗаполнено(ПредставлениеКнопкиСоздать) Тогда
					Элементы.КнопкаСоздатьДокумент1С.Заголовок=	ПредставлениеКнопкиСоздать;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.РамкаСтатуса.Видимость= Истина;
			Элементы.ДекорацияПодробно.Видимость= ЭДОбъект.Resolutions.Count > 0;
			
			Если ЗначениеЗаполнено(Документ1С) Тогда
				Элементы.ДокументВ1С.Заголовок= Новый ФорматированнаяСтрока(Строка(Документ1С),,,,ПолучитьНавигационнуюСсылку(Документ1С));
			Иначе
				Элементы.ДокументВ1С.Заголовок= "";
			КонецЕсли;
			
			Элементы.ГруппаПодразделениеПодвал.Видимость= (ЗначениеЗаполнено(Документ1С));
			Элементы.ГруппаПодразделениеТело.Видимость=	  (НЕ ЗначениеЗаполнено(Документ1С));
			
			ПредставлениеПодразделения=	?(ЭДОбъект.Department = Неопределено, "Головное подразделение", ЭДОбъект.Department.Name);
			
		Иначе
			
			Элементы.РамкаСтатуса.Видимость= Ложь;
			Элементы.Группа1.Видимость= Ложь;
			Элементы.ГруппаПодразделениеПодвал.Видимость= Ложь;
			
			Если ТочкаВызова = "ТаблицаДокументовНаОтправку" И Операция = "СоздатьНовыйПакет" Тогда
				Элементы.ГруппаАдресаты.Видимость= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты" Тогда 
			
			Элементы.ГруппаПредупреждениеОНовомФормате.Видимость = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(IDТекущейСтроки) Тогда
			
			Массив = ТаблицаДокументов.НайтиСтроки(Новый Структура("IdСтроки", IDТекущейСтроки));
			Если ЗначениеЗаполнено(Массив) И Массив[0].ЭтоФайл Тогда
				Элементы.ГруппаПредупреждениеОНовомФормате.Видимость = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтаФорма.Элементы.КнопкаПерейтиВДиадок.Заголовок = "Перейти в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
		НастроитьЗаголовок();
		Если Элементы.ГруппаСодержимоеПакета.Видимость = Истина Тогда
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= "<<";
		Иначе
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= ">>";
		КонецЕсли;
						
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		ОбновитьСтатусЭД();
		НастроитьЗаголовок();
		НастроитьКнопкиКоманднойПанели();
		НастроитьЭлементыФормы();
		
	КонецПроцедуры	 
	
	&НаКлиенте
	Процедура ОбновитьСтатусЭД()
		
		Если НЕ ЭДОбъект = Неопределено Тогда
			
			ПредставлениеСтатуса=		 МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса"			, ЭДОбъект);
			ПредставлениеСогласования=	 МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаСогласования", ЭДОбъект);
			
			ПредставлениеСтатусаРоуминг= МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаРоуминг"		, ЭДОбъект);
			ПредставлениеСтатусаРоумингДетали= ?(ЭДОбъект.RoamingNotificationStatus = "RoamingNotificationStatusError", ЭДОбъект.RoamingNotificationStatusDescription, "");
			
			СводныйСтатус= Новый Массив;
			Разделитель= "";
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатусаРоуминг) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатусаРоуминг);
				Разделитель= " ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСтатуса) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСтатуса);
				Разделитель= ". ";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ПредставлениеСогласования) Тогда
				СводныйСтатус.Добавить(Разделитель);
				СводныйСтатус.Добавить(ПредставлениеСогласования);
				Разделитель= ". ";
			КонецЕсли;
			
			Элементы.СтатусДокумента.Заголовок=	Новый ФорматированнаяСтрока(СводныйСтатус);
			
			Если НЕ Элементы.ДекорацияДокументЗашифрован.Видимость И ЭДОбъект.IsEncryptedContent Тогда
				Элементы.ДекорацияДокументЗашифрован.Видимость = ЭДОбъект.IsEncryptedContent;
			КонецЕсли;
			
		Иначе
			
			Элементы.СтатусДокумента.Заголовок=	 ""; 
			
			ПредставлениеСтатусаРоуминг=	   "";
			ПредставлениеСтатусаРоумингДетали= "";
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Функция ПолучитьСсылкуНаОбъект(ТекстСсылки)
		
		Результат = Новый Структура("Форма, Объект");
		
		СсылкаНаЭлементДанных = СсылкаНаЭлементДанныхИзГиперссылки(ТекстСсылки);
		
		Если СсылкаНаЭлементДанных <> Неопределено Тогда
			
			Если ЭтоСемействоУТКАERP()
				И ТипЗнч(СсылкаНаЭлементДанных) = Тип("СправочникСсылка.Контрагенты")
				И ИспользоватьПартнеровКакКонтрагентов() Тогда
				
				СсылкаНаЭлементДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭлементДанных, "Партнер");
				
			КонецЕсли;
			
			Результат.Объект = СсылкаНаЭлементДанных;
			Результат.Форма	 = СсылкаНаЭлементДанных.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
			
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКВАЛЮТ") > 0 Тогда
			
			Результат.Форма = "Справочник.Валюты.ФормаСписка";
			
		ИначеЕсли Найти(ТекстСсылки, "ОКВ") > 0 Тогда
			
			Результат.Форма = "Справочник.Валюты.Форма.ПодборВалютИзКлассификатора";
			
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКЕДИНИЦ") > 0 Тогда // TODO странно
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				
				Если НЕ Метаданные.Справочники.Найти("УпаковкиЕдиницыИзмерения") = Неопределено Тогда
					Результат.Форма = "Справочник.УпаковкиЕдиницыИзмерения.Форма.ФормаВыбораЕдиницыИзмерения";
				Иначе
					Результат.Форма = "Справочник.ЕдиницыИзмерения.ФормаСписка";
				КонецЕсли;
				
			Иначе
				Результат.Форма = "Справочник.КлассификаторЕдиницИзмерения.ФормаСписка";
			КонецЕсли;
			
		ИначеЕсли Найти(ТекстСсылки, "ОКЕИ") > 0 Тогда
			
			//Справочники.КлассификаторЕдиницИзмерения.ПолучитьФорму("ФормаПодбораИзКлассификатора",,ЭтаФорма).Открыть();  // TODO что-то не то
			
		ИначеЕсли Найти(ТекстСсылки, "СПРАВОЧНИКСТРАН") > 0 Тогда
			
			Результат.Форма = "Справочник.СтраныМира.ФормаСписка";
			
		ИначеЕсли Найти(текстСсылки, "ОКСМ") > 0 Тогда
			
			Результат.Форма = "Справочник.СтраныМира.Форма.Классификатор";
			
		ИначеЕсли Найти(ТекстСсылки, "КАРТОЧКА:") > 0 Тогда
			
			СтрокаИД = Прав(ТекстСсылки, СтрДлина(ТекстСсылки)-9);
			Если Найти(строкаИД, ":") > 0 Тогда
				BoxID = лев(строкаИД, найти(строкаИД, ":")-1);
				DocID = прав(строкаИД, стрДлина(СтрокаИД) - найти(строкаИД, ":"));
			КонецЕсли;
			
		ИначеЕсли Найти(Текстссылки, "НАСТРОЙКАПОДПИСИ") > 0 Тогда
			
			гуид = Прав(ТекстСсылки, СтрДлина(ТекстСсылки) - 17);
			СсылкаНаЭлемент = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Гуид));
			Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
				//если Найти(ТипДокумента, "Акт") <> 0  тогда 
				//	фрм = ЭтаФорма.ПолучитьФорму("ФормаНастройкиПодписиАкт");
				//Иначе 	
				//	фрм = ЭтаФорма.ПолучитьФорму("ФормаНастройкиПодписиТОРГ12");
				//КонецЕсли;	
				//фрм.ОткрытьКарточку(СсылкаНаЭлемент);
				//ОбновитьРНК();
			КонецЕсли;
			
		Иначе
			
			Результат = Неопределено;
			
		КонецЕсли;	
		
		Возврат Результат;
		
	КонецФункции
	
	// Преобразует текст вида
	// "СПРАВОЧНИК.ДОГОВОРЫКОНТРАГЕНТОВ:35C3C512-6B05-11E9-9239-D46D6D51F7B5"
	// в ссылку на элемент справочника/документа
	// Если текст не указывает на элемент данных, вернет Неопределено
	&НаСервере
	Функция СсылкаНаЭлементДанныхИзГиперссылки(ЗНАЧ ТекстГиперссылки)
		
		Результат = Неопределено;
		
		ВидМетаданных = Неопределено;
		
		Если Лев(ТекстГиперссылки, 11) = "СПРАВОЧНИК." Тогда
			ГруппаМетаданных = Справочники;
			ТекстГиперссылки = Сред(ТекстГиперссылки, 12);
		ИначеЕсли Лев(ТекстГиперссылки, 9) = "ДОКУМЕНТ." Тогда
			ГруппаМетаданных = Документы;
			ТекстГиперссылки = Сред(ТекстГиперссылки, 10);
		КонецЕсли;	
		
		Если ГруппаМетаданных = Неопределено Тогда
			Возврат Результат;  // не удалось вычислить ссылку
		КонецЕсли;
		
		ПодгруппаМетаданных = Лев(ТекстГиперссылки, СтрДлина(ТекстГиперссылки) - 37);  // конкретный вид справочника/документа.
		ГуидСтрокой = Прав(ТекстГиперссылки, 36);
		Гуид = Новый УникальныйИдентификатор(ГуидСтрокой);
		
		Результат = ГруппаМетаданных[ПодгруппаМетаданных].ПолучитьСсылку(Гуид);
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Процедура НастроитьЗаголовок()
		
		Если ЭДОбъект = Неопределено Тогда
			Заголовок = Заголовок();
		Иначе
			Заголовок =	МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект);	
		КонецЕсли;
				
	КонецПроцедуры
	
	// Возвращает заголовок для формы "ФормаДокумента" в зависимости от количества документов, отображаемых в форме
	// 
	// Возвращаемое значение:
	//   - Строка 
	//
	&НаКлиенте
	Функция Заголовок()
		
		Результат = "";
		
		КоличествоДокументов = ТаблицаДокументов.Количество();
		
		Если КоличествоДокументов = 0 Тогда
			
			Результат = "Пустой пакет";
			
		Иначе
			
			Если Операция = "ДобавитьВВыделенныеПакеты" Тогда
				
				Результат = "Количество документов: " + КоличествоДокументов;
				
			Иначе
				
				Результат = "В пакете " + МетодКлиента("Модуль_Клиент", "СтрокаКоличествоДокументов", КоличествоДокументов);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ПолучитьРеквизитСсылки(СсылкаНаОбъект, ИмяРеквизита) Экспорт
		
		ЗначениеРеквизита=	Неопределено;
		
		ОбъектИзСсылки=	СсылкаНаОбъект.ПолучитьОбъект();
		Если НЕ ОбъектИзСсылки.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			ЗначениеРеквизита=	ОбъектИзСсылки[ИмяРеквизита];
		КонецЕсли;
		
		Возврат ЗначениеРеквизита;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Функция ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля_Сервер()
		
		СписокОрганизаций = новый списокЗначений;
		//Авто (тестовая)
		СписокОрганизаций.Добавить("c19b1b8c75ab4ca3a2ab8ea3771631ab@diadoc.ru");
		
		Возврат СписокОрганизаций;
		
	КонецФункции
	
	&НаСервере
	Функция Организация_2_BoxID_Форма(Организация)
		Возврат МетодСервера(,"Организация_2_BoxID", Организация);
	КонецФункции	
	
	&НаКлиенте
	Функция ВизуализироватьДопПоля(ИсточникИДОтправителя) Экспорт
		
		ВизуализироватьДопПоля=	Истина;
		
		СписокОрганизацийНеТребующихВизуализацииДопПоля=	ВернутьСписокОрганизацийНеТребующихВизуализацииДопПоля_Сервер();
		
		Если ТипЗнч(ИсточникИДОтправителя) = Тип("COMОбъект") Тогда

			Если ИсточникИДОтправителя.Direction = "Outbound"  тогда
				ИДОтправителя=	ИсточникИДОтправителя.Organization.Id;
			Иначе
				ИДОтправителя=	ИсточникИДОтправителя.Counteragent.Id;
			КонецЕсли;
			
			Если НЕ СписокОрганизацийНеТребующихВизуализацииДопПоля.НайтиПоЗначению(ИДОтправителя) = Неопределено Тогда
				ВизуализироватьДопПоля=	Ложь;
			КонецЕсли;
			
		Иначе
			
			ИДОтправителя=	Организация_2_BoxID_Форма(ПолучитьРеквизитСсылки(ИсточникИДОтправителя, "Организация"));
			Если НЕ СписокОрганизацийНеТребующихВизуализацииДопПоля.НайтиПоЗначению(ИДОтправителя) = Неопределено Тогда
				ВизуализироватьДопПоля=	Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ВизуализироватьДопПоля;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВизуализацияПечатнойФормыПоСтруктуре()
		
		ПоказыватьПредупрежденияОСтаромФормате = Ложь;
		
		Если ЭДОбъект = Неопределено Тогда
			
			ВизуализироватьДопПоля=	ВизуализироватьДопПоля(Документ1С);
			
			ФИОПодписанта= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization.Id);
			
			СформироватьПечатнуюФормуПоДокументу(ФИОПодписанта, ВизуализироватьДопПоля);
			
		Иначе
			
			ТабПоле = СформироватьПечатнуюФормуПоДокументуДиадока(ЭДОбъект);
				
		КонецЕсли;
		
		Если ЭДОбъект <> Неопределено И ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" Тогда
			
			БазовыеФорматы = БазовыеФорматы();
			БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭДОбъект.Version);
			
			Если НЕ ЗначениеЗаполнено(БазовыйФормат)
				ИЛИ БазовыйФормат = БазовыеФорматы.invoice
				ИЛИ БазовыйФормат = БазовыеФорматы.invoicecor Тогда
				
				ПротоКонтент = МетодКлиента("Модуль_Клиент", "ПротоКонтентДокумента", ЭДОбъект);
				
				ПоказыватьПредупрежденияОСтаромФормате = МетодКлиента("Модуль_ЛогикаПоведениеФорм","ПредупреждатьОСтаромФормате", ЭДОбъект.ConfirmationDate, ПротоКонтент.InvoiceVersion);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ГруппаПредупреждениеОНовомФормате.Видимость = ПоказыватьПредупрежденияОСтаромФормате;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПросмотрФормы()
		
		ВизуализацияПечатнойФормыПоСтруктуре();
		
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьПараметрыПодписи(Команда)
		
		ТекСтрока = ТекущаяСтрокаТаблицыДокументов();
		ВерсияФормата = ТекСтрока.ФорматОтправки.ВерсияФормата;
		БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ВерсияФормата);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("BoxId"			   , BoxId);
		ПараметрыФормы.Вставить("AttachmentVersion", БазовыйФормат);
		ПараметрыФормы.Вставить("Организация"	   , Организация);
		
		Если ТипДокумента = "XmlTorg12" Тогда
			
			ИмяФормыПодписи = "НастройкаПодписиТОРГ12";
			
		ИначеЕсли ТипДокумента = "XmlAcceptanceCertificate" Тогда
			
			ПараметрыФормы.Вставить("Заголовок", "Параметры формирования подписи Акта выполненных работ");
			ИмяФормыПодписи = "НастройкаПодписиАкт";
			
		ИначеЕсли ЗначениеЗаполнено(ФункцияУПД) Тогда
			
			ПараметрыФормы.Вставить("Исходящие", Истина);
			ИмяФормыПодписи = "НастройкаПодписиУПД";
			
		КонецЕсли;
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ИмяФормыПодписи", ИмяФормыПодписи);
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально"
			, ИмяФормыПодписи
			, ПараметрыФормы
			, ЭтаФорма
			, "ОбработчикОткрытиеФормыНастройкиПодписи"
			, ПараметрыОбработчика);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодразделениеНажатие(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка=	Ложь;
		
		ТекущийDepartmentId=	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Id);
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("DepartmentId", 	ТекущийDepartmentId);
		ПараметрыФормы.Вставить("OrganizationId",	ЭДОбъект.Organization.Id);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущийDepartmentId);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОшибкиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		href = "";
		Если (ДанныеСобытия.Anchor<> Неопределено) И ЗначениеЗаполнено(ДанныеСобытия.Anchor.NameProp) Тогда 
			href = ДанныеСобытия.Anchor.NameProp;  // поведение платформы до 8.3.14
		ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
			href = ДанныеСобытия.href;  // начиная с 8.3.14 и переезда на WebKit
		Иначе
			Возврат;
		КонецЕсли;	
		
		Если Найти(href, "НАСТРОЙКАПАРАМЕТРОВПОДПИСАНИЯ" ) > 0 Тогда
			
			НастроитьПараметрыПодписи("");
			
		ИначеЕсли Найти(href, "НАСТРОЙКДОЛЖНОСТИПОДПИСАНТА") > 0 Тогда
			
			ПутьПослеСлэша = МетодКлиента("Модуль_Клиент", "РазвернутьGUID", BoxId) + "/EmployeesList";
			ТекстURL = МетодСервера(, "ПолучитьПутьКWEBСерверу") + ПутьПослеСлэша;
			ЗапуститьПриложение(ТекстURL);
			
		ИначеЕсли Найти(href, "УВЕДОМЛЕНИЕОСМЕНЕФОРМАТА") > 0 Тогда
			
			ТекстИнформацииОНовомФормате = МетодКлиента("Модуль_Клиент", "ТекстИнформацииОНовомФормате", ТекущаяДата());
			ПараметрыФормы = Новый Структура("ЗаголовокФормы, HTMLДокумент", "Уведомление о смене формата", ТекстИнформацииОНовомФормате);
			МетодКлиента(, "ОткрытьФормуОбработки", "ФормаВыводаHTMLДокумента", ПараметрыФормы);
		
		ИначеЕсли Найти(href, "ИНСТРУКЦИЯКАКЗАПОЛНИТЬОСНОВАНИЕ") > 0 Тогда
			
			ЗапуститьПриложение("https://wiki.diadoc.ru/pages/viewpage.action?pageId=19105636");
		
		Иначе
			
			ПараметрыСсылки = ПолучитьСсылкуНаОбъект(href);
			
			Если ЗначениеЗаполнено(ПараметрыСсылки) Тогда 
				
				МетодКлиента(, "ОткрытьФормуОбъектаИБМодально", ПараметрыСсылки.Объект, ПараметрыСсылки.Форма, , ЭтаФорма, "ОбработчикОткрытиеФормыОшибокВалидации");
				
			ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
				
				ЗапуститьПриложение(ДанныеСобытия.Href, , Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
//} УПРАВЛЕНИЕ ФОРМОЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ
	
	&НаКлиенте
	Процедура Подписать(Команда)
		
		БазовыеФорматы = БазовыеФорматы();
		
		БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭдОбъект.Version);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
		
		Если БазовыйФормат = БазовыеФорматы.utd820
			Или БазовыйФормат = БазовыеФорматы.utd
			Или БазовыйФормат = БазовыеФорматы.ucd
			Или БазовыйФормат = БазовыеФорматы.tovtorg
			Или БазовыйФормат = БазовыеФорматы.rezru Тогда
			
			ПараметрыФормы.Вставить("BoxId", Organization.ID);
			ПараметрыФормы.Вставить("AttachmentVersion", БазовыйФормат);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокументаУПД", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокумента");
			
		Иначе
			
			ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization.Id);
			
			ПараметрыФормы.Вставить("ФИО", 					ФИОПодписанта);
			ПараметрыФормы.Вставить("ПредставлениеПодписи", Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
			ПараметрыФормы.Вставить("DocumentType", 		ЭдОбъект.Type);
			ПараметрыФормы.Вставить("Организация", 			МетодСервераБезКонтекста(,"BoxID_2_Организация", Organization.Id, ?(ЭДОбъект.Department <> Неопределено, ЭДОбъект.Department.Kpp, "")));
			ПараметрыФормы.Вставить("ИНН",					Organization.INN);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокумента");
			
        КонецЕсли;

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВПодписи(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization.Id);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		1);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказаВПодписи");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Согласовать(Команда)
		
		ФИОПодписанта=	?(НЕ Organization.Certificate = Неопределено,  Organization.Certificate.Name, "");
		
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		2);
		ПараметрыФормы.Вставить("AuthenticateType", 		Organization.AuthenticateType);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаСогласовать");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаСогласование(Команда)
		
		МассивПомеченныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если МассивПомеченныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Нет документов, отмеченных для передачи на согласование", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовНаОтправку" И НЕ МассивПомеченныеСтроки.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все документы пакета. Передать на согласование только отмеченные?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ВыполнитьОтправкуДокумента", ЭтаФорма, "ПередатьНаСогласование");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 	
		Иначе
			ВыполнитьОтправкуДокумента(КодВозвратаДиалога.Да, "ПередатьНаСогласование");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПередатьНаПодписание(Команда)
		
		МассивПомеченныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если МассивПомеченныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Нет документов, отмеченных для передачи на подпись", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли ТочкаВызова = "ТаблицаДокументовНаОтправку" И НЕ МассивПомеченныеСтроки.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все документы пакета. Передать на подписание только отмеченные?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ВыполнитьОтправкуДокумента", ЭтаФорма, "ПередатьНаПодписание");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 	
		Иначе
			ВыполнитьОтправкуДокумента(КодВозвратаДиалога.Да, "ПередатьНаПодписание");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказатьВСогласовании(Команда)
		
		ФИОПодписанта=	?(НЕ Organization.Certificate = Неопределено,  Organization.Certificate.Name, "");
		
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		3);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура Удалить(Команда)
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикУдалитьДокумент", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтменитьСопоставление(Команда)
		
		Оповещение=	Новый ОписаниеОповещения("ОбработчикОтменитьСопоставление", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Вы действительно хотите отменить сопоставление с документом 1С?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);

	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтруктураПодчиненности(Команда)
		
		ПараметрыФормы=	Новый Структура();
		ПараметрыФормы.Вставить("Режим", "СтруктураПодчиненности");
		
		ФормаСвязейДокументов= МетодКлиента(,"ПолучитьФормуОбработки", "ФормаСвязейДокументов", ПараметрыФормы, ЭтаФорма, СокрЛП(ЭДОбъект.DocumentID) + "/" + СокрЛП(ЭДОбъект.OrganizationID));
		ФормаСвязейДокументов.ЭДОбъект=		ЭДОбъект;
		ФормаСвязейДокументов.Organization=	Organization;
		
		ОткрытьФорму(ФормаСвязейДокументов);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтразитьДокументВУчете(Команда)
		
		МетодКлиента("Модуль_Клиент", "ОтразитьДокументВУчете", ЭтаФорма, ЭДОбъект);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздатьДокументУчетаЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт 
		
		ОбновитьДокумент1С();
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздатьДокумент1С(Команда)
		
		БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭДОбъект.Version);

		Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument" 
			И МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФ") Тогда

			Если ЗначениеЗаполнено(ПодходящаяСФ) Тогда
				
				СозданныйДокумент=	ПодходящаяСФ;
				Если ЗначениеЗаполнено(СозданныйДокумент) Тогда
					ОбработчикСозданиеДокумента(СозданныйДокумент);
				КонецЕсли;
			ИначеЕсли (ЭДОбъект.Type = "Invoice" ИЛИ ЭДОбъект.Type = "UniversalTransferDocument") И МассивСсылокРНК <> Неопределено И МассивСсылокРНК.Количество() > 0 Тогда
				МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, МассивСсылокРНК);
			Иначе
				СоздатьДокумент("ВводСВыборомОснований");
			КонецЕсли;

		ИначеЕсли ЭДОбъект.Type = "UniversalTransferDocument" И МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ЭДОбъект.Function) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФДОП") Тогда
			
			СоздатьДокумент("ВводУПД");
			
		ИначеЕсли БазовыйФормат = БазовыеФорматы().ucd Тогда
			
			ПоказатьПредупреждение( , "Создание УКД не предусмотрено", 120, Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы);
				
		Иначе
			
			СоздатьДокумент("Ввод");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СопоставитьДокумент1С(Команда)
		
		СоздатьДокумент("Сопоставление");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтправитьСвязанныйДокумент(Команда)

		Если ЗначениеЗаполнено(Контрагент)=Ложь тогда
			ПоказатьПредупреждение(, "С "+ЭДОбъект.Counteragent.Name+" не сопоставлено ни одной карточки контрагента в 1С", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;		
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("InitialDocumentID", ЭДОбъект.DocumentID);
		
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ОписаниеКонтрагента", Новый структура("Контрагент, CounteragentName, CounteragentID",  Контрагент, ЭДОбъект.Counteragent.Name, ЭДОбъект.Counteragent.ID));
		
		Форма_Выгрузка = МетодКлиента(,"ОткрытьФормуОбработки", "Форма_Выгрузка", ПараметрыФормы, ЭтаФорма,,,, истина);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ЗапроситьАннулирование(Команда)
		
		ЗапроситьАннулированиеДокумента();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗапроситьАннулированиеДокумента(ПереотправитьДокумент = Ложь)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization.Id);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования",		 5);
		ПараметрыФормы.Вставить("ПредставлениеДокумента",	 Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи",		 Organization.Name + ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаЗапросАннулирования", ПереотправитьДокумент);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура АннулироватьДокумент(Команда)
				
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization.Id);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		1);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументуБезКомментария", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаАннулироватьДокумент");

	КонецПроцедуры

	&НаКлиенте
	Процедура ОтказатьВАннулировании(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization.Id);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		6);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании");

	КонецПроцедуры

	&НаКлиенте
	Процедура ЗапроситьУточнение(Команда)
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок","ПолучитьФИОПодписанта", Organization.Id);
						
		ПараметрыФормы=		Новый Структура;
		ПараметрыФормы.Вставить("РежимИспользования", 		7);
		ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
		ПараметрыФормы.Вставить("ПредставлениеПодписи", 	Organization.Name+ ?(ПустаяСтрока(ФИОПодписанта), "", ", " + ФИОПодписанта));
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаОтветаПоДокументу", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыОтветаЗапроситьУточнение", Новый Структура("Organization", Organization));

	КонецПроцедуры

	&НаКлиенте
	Процедура Декорация4Нажатие(Элемент)
				
		ТекстИнформацииОНовомФормате = МетодКлиента("Модуль_Клиент", "ТекстИнформацииОНовомФормате", ЭДОбъект.ConfirmationDate);
		ПараметрыФормы = Новый Структура("ЗаголовокФормы, HTMLДокумент", "Уведомление о смене формата", ТекстИнформацииОНовомФормате);
		МетодКлиента(,"ОткрытьФормуОбработки", "ФормаВыводаHTMLДокумента", ПараметрыФормы);
		
	КонецПроцедуры
	
	&НаКлиенте 
	Функция ПропатчитьInvoice(DocumentType)
		Если Лев( DocumentType, 7) = "Invoice" Тогда 
			Возврат  Лев( DocumentType, 7)
		Иначе	
			Возврат  DocumentType;
		КонецЕсли;	
	КонецФункции	
	
	&НаКлиенте
	Процедура Переотправить(Команда)
		
		Если НЕ ЗначениеЗаполнено(Документ1С) Тогда
			ПоказатьПредупреждение(, "Для переотправки следует создать документ в 1С.", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		КонецЕсли;
		
		Если НужноПредложитьЗапросНаАннулирование() Тогда
			ТекстВопроса = "Запросить аннулирование предыдущего документа?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОтветаВопросаЗапросаАннулирования", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120,, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		Иначе
			ПереотправитьДокумент();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция НужноПредложитьЗапросНаАннулирование()
		
		Результат = Ложь;
		
		// для зашифрованных документов в статусах, отличных от "Подпись отправителя проверена и валидна",
		// отправку запроса на аннулирование предлагать не нужно
		Если ЭДОбъект.IsEncryptedContent 
			И ЭДОбъект.SenderSignatureStatus <> "SenderSignatureCheckedAndValid" Тогда
			Возврат Результат;
		КонецЕсли;
		
		// если ранее по документу уже отправлялся/получался запрос на аннулирование,
		// то новый запрос на аннулирование предлагать не нужно
		Если СтатусыАнулированияДокументовДиадок()[ЭДОбъект.RevocationStatus] <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		ПроверяемыеСтатусы = Новый Соответствие;
		
		ПроверяемыеСтатусы.Вставить("Outbound" 	, Истина); //"Отправлен"
		
		ПроверяемыеСтатусы.Вставить("OutboundNotFinished"	, Истина); //"Документооборот не завершен"
		ПроверяемыеСтатусы.Вставить("OutboundFinished"		, Истина); //"Документооборот завершен"
		
		ПроверяемыеСтатусы.Вставить("OutboundWithRecipientSignature"	, Истина); //"Подписан"
		ПроверяемыеСтатусы.Вставить("OutboundWaitingForInvoiceReceipt"	, Истина); //"Ожидается извещение от покупателя"
		ПроверяемыеСтатусы.Вставить("OutboundWaitingForReceipt"			, Истина); //"Ожидается извещение от покупателя"
		
		ПроверяемыеСтатусы.Вставить("OutboundWaitingForRecipientSignature" 	, Истина); //"Требуется подпись"
		ПроверяемыеСтатусы.Вставить("OutboundNoRecipientSignatureRequest"	, Истина); //"Доставлен"
		
		ПроверяемыеСтатусы.Вставить("OutboundWaitingForInvoiceReceiptAndRecipientSignature"	, Истина); //"Ожидается извещение и подпись от покупателя"
		
		// если документ находится в перечисленных выше статусах,
		// то нужно предложить отправку запроса на аннулирование
		Если ПроверяемыеСтатусы[ЭДОбъект.Status] <> Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция СтатусыАнулированияДокументовДиадок() Экспорт
		
		Результат= Новый Соответствие;
		
		Результат.Вставить("RevocationIsRequestedByMe",	 "Ожидается аннулирование");
		Результат.Вставить("RequestsMyRevocation",		 "Требуется аннулирование");
		Результат.Вставить("RevocationRejected",		 "Отказано в аннулировании");
		Результат.Вставить("RevocationAccepted",		 "Аннулирован");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция НовоеОписаниеДокументаПакета()
		
		Результат = МетодКлиента("Модуль_Клиент", "НовоеОписаниеДокументаПакета");
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПереотправитьДокумент() Экспорт 
		
		МассивДокументовПакета = Новый Массив;
		
		ФорматОтправки = МетодКлиента("Модуль_Клиент", "ФорматЭлектронногоДокумента", ЭДОбъект);
		
		ЭлементМассива = НовоеОписаниеДокументаПакета();
		
		ЭлементМассива.Вкл = Ложь;
		ЭлементМассива.DocumentType		 = ПропатчитьInvoice(DocumentType);
		ЭлементМассива.Документ1С		 = Документ1С;
		ЭлементМассива.ТипДокумента		 = ТипДокумента;
		ЭлементМассива.ДопСведения		 = ДопСведения;
		ЭлементМассива.CounteragentBoxID = CounteragentBoxID;
		ЭлементМассива.DepartmentID		 = BoxID;
		ЭлементМассива.isTest			 = ЭДОбъект.isTest;
		ЭлементМассива.DocumentID		 = ЭДОбъект.documentID;
		ЭлементМассива.ФорматОтправки	 = ФорматОтправки;
		ЭлементМассива.ФункцияУПД		 = МетодКлиента("Модуль_Клиент", "ФункцияДокументаДляСбораКонтента", ФорматОтправки);
		
		МассивДокументовПакета.Добавить(ЭлементМассива);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("BoxID",					BoxID);
		ПараметрыФормы.Вставить("CounteragentBoxID",		CounteragentBoxID);
		ПараметрыФормы.Вставить("МассивДокументовПакета",	МассивДокументовПакета);
		ПараметрыФормы.Вставить("ТочкаВызова",				"ПереотправкаДокумента");
		
		МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПоказатьКнопкуПодписатьЗапрошенный(UserPermissions)
		
		Результат = Ложь;
		
		Если Истина
			И ТочкаВызова = "ТаблицаДокументовВнутренних"
			И UserPermissions.CanSignDocuments // есть право подписи документов
			И ЭДОбъект <> Неопределено
			И ЭДОбъект.Status = "OutboundWaitingForSenderSignature" // Документ ожидает подписания перед отправкой (не отправлен и не подписан)
			Тогда 
			
			// основные условия выполнены, проверим, доступно ли подписание в текущем статусе согласования
			СтатусСогласования = ЭДОбъект.ResolutionStatus;
			
			Если СтатусСогласования = Неопределено Тогда 
				
				// согласование не требуется
				Результат = Истина;
				
			ИначеЕсли СтатусСогласования.type = "Approved" Тогда 
				
				// документ уже согласован
				Результат = Истина;
				
			ИначеЕсли СтатусСогласования.type = "SignatureRequested" Тогда
				
				// Документ отправлен на подпись - проверяем, может ли его подписать текущий пользователь
				Результат = СтатусСогласования.TargetUser = Неопределено 		// направлен на подпись любому пользователю подразделения
							Или СтатусСогласования.TargetUser.IsCurrentUser; 	// направлен на подпись текущему пользователю
				
			Иначе 
				
				Результат = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
						
	КонецФункции
		
	&НаКлиенте
	Функция ПоказатьКнопкуПереотправить(UserPermissions)
		
		Возврат
		
		ЭДОбъект <> Неопределено
		И ЭДОбъект.Direction = "Outbound"
		И UserPermissions.CanSignDocuments
		И (ЭДОбъект.isTest ИЛИ ЭДОбъект.Organization.AuthenticateType = "Certificate")
		
		И (		DocumentType = "XmlTorg12"
			ИЛИ DocumentType = "XmlAcceptanceCertificate"
			ИЛИ DocumentType = "NonformalizedProforma"
			ИЛИ DocumentType = "UniversalTransferDocument"
			ИЛИ DocumentType = "UniversalCorrectionDocument"
			ИЛИ Лев(DocumentType, 7) = "Invoice");
		
	КонецФункции

	&НаКлиенте
	Функция ПоказатьКнопкуПодписатьИОтправить(UserPermissions)
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			Если Операция = "СоздатьНовыйПакет" Тогда 
				Возврат Истина;
			ИначеЕсли Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;	
		ИначеЕсли ТочкаВызова = "ПереотправкаДокумента" Тогда
			Если ЗначениеЗаполнено(DocumentID) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьСодержимоеПакета()
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "СоздатьНовыйПакет" ИЛИ Операция = "ДобавитьВВыделенныеПакеты" Тогда
				Возврат Истина;
			Иначе
				
				// Панель со списком документов пакета покажем в двух случаях:
				ЭтоЕдиничныйДокумент = (ТаблицаДокументов.Количество() = 1);
				
				Если ЭтоЕдиничныйДокумент
					И ЗначениеЗаполнено(ТаблицаДокументов[0].ТекстОшибкиВалидации) Тогда
					
					Возврат Истина;  // Если единственный документ пакета содержит ошибки валидации
					
				Иначе
					
					Возврат (ТаблицаДокументов.Количество() > 1);  // Или в пакете несколько документов
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппаДокументыПакетаКнопкиВыделения()
		
		Возврат ТочкаВызова = "ТаблицаДокументовНаОтправку";
		
	КонецФункции
	
	&НаКлиенте
	Функция ПоказатьГруппаДокументыПакетаКнопкиРедактированияСостоваПакета()
		
		Возврат ТочкаВызова = "ТаблицаДокументовНаОтправку";
		
	КонецФункции
		
	&НаКлиенте
	Процедура ПодписатьИОтправить(Команда)
		
		ТекстОшибки = НеЗаполненныеПоляФайла();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Ошибки = МетодКлиента("Модуль_Клиент", "ОформитьОшибкиВHTML", ТекстОшибки, "Перед отправкой необходимо:");
			Элементы.Ошибки.Видимость = Истина;
			Возврат;
		КонецЕсли;
		
		Если Organization = Неопределено Тогда 
			Organization = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
		КонецЕсли;
				
		Counteragent = 	Organization.GetCounteragentById(CounteragentBoxID);
		
		ЭтоТестоваяОрганизация	= МетодКлиента("Модуль_Клиент", "ЭтоТестоваяОрганизация", Organization);
		ЭтоТестовыйКонтрагент 	= МетодКлиента("Модуль_Клиент", "ЭтоТестоваяОрганизация", Counteragent);
		
		ЭтоТестовый = (ЭтоТестоваяОрганизация ИЛИ ЭтоТестовыйКонтрагент);
		
		Если  НЕ ЭтоТестовый 
			И НЕ Organization.AuthenticateType = "Certificate" Тогда
			
			ПоказатьПредупреждение(,"Отправка юридически значимого документа возможна только по сертификату", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
			
		КонецЕсли;
				
		МассивПомеченныеСтроки= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если МассивПомеченныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(,"Нет документов, отмеченных для отправки", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли НЕ МассивПомеченныеСтроки.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все документы пакета. Продолжить отправку?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ВыполнитьОтправкуДокумента", ЭтаФорма, "ПодписатьИОтправить");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 	
		Иначе
			ВыполнитьОтправкуДокумента(КодВозвратаДиалога.Да, "ПодписатьИОтправить");
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция НеЗаполненныеПоляФайла()
		
		СписокОшибок = "";
		
		Если ТочкаВызова = "ТаблицаДокументовНаОтправку" Тогда
			
			Если Операция = "СоздатьНовыйПакет" Тогда
			
				Если НЕ ЗначениеЗаполнено(Организация) Тогда
					СписокОшибок = СписокОшибок + "<p> - Организация</p>";
				КонецЕсли;
							
				Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
					СписокОшибок = СписокОшибок + "<p> - Контрагент</p>";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СписокОшибок) Тогда
					СписокОшибок = "<p> </p>" + "<H3>Заполнить общие поля:</H3>" + СписокОшибок;
				КонецЕсли;
				
			КонецЕсли;
			
			ВсеОшибкиДокументов = "";
			
			Для каждого Документ из ТаблицаДокументов Цикл
				
				ОшибкиДокумента = ВалидироватьДанныеФайла(Документ.DocumentType, Документ.ДанныеФайла);
				
				Если ЗначениеЗаполнено(ОшибкиДокумента) Тогда
					ТекстЗаголовка = "<H3>" + Документ.Представление + "</H3>"; 
					Если ЗначениеЗаполнено(ВсеОшибкиДокументов) Тогда
						ВсеОшибкиДокументов = ВсеОшибкиДокументов + "<p> </p>";
					КонецЕсли;
					ВсеОшибкиДокументов = ВсеОшибкиДокументов + ТекстЗаголовка + ОшибкиДокумента;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ВсеОшибкиДокументов) Тогда
				Если ЗначениеЗаполнено(СписокОшибок) Тогда
					СписокОшибок = СписокОшибок + "<p> </p>"; 
				КонецЕсли;
				
				СписокОшибок = СписокОшибок + "<H3>Для следующих документов заполнить поля:</H3>" + ВсеОшибкиДокументов;		
			КонецЕсли;
									
		КонецЕсли;
					
		Возврат СписокОшибок;
				
	КонецФункции
		
	&НаКлиенте
	Функция ВыполнитьОтправку(ПараметрыОтправкиНаСогласование = Неопределено)
		
		Результат = Истина;
		
		Попытка 
			
			ПараметрыPackageSendTask = ПараметрыPackageSendTask(ПараметрыОтправкиНаСогласование);

			Если ПараметрыОтправкиНаСогласование = Неопределено Тогда
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификатПоМассивуДокументов", ПараметрыPackageSendTask.МассивДокументовПакета, Organization.Id);
			КонецЕсли;
			
			СоответствиеCustomIdСсылке1С = Новый Соответствие;
			
			ЗаполненныйPackageSendTask = МетодКлиента("Модуль_Выгрузка", "ПолучитьЗаполненныйPackageSendTask", ПараметрыPackageSendTask, СоответствиеCustomIdСсылке1С);
			
			СоответствиеВПФСсылке = МетодКлиента("Модуль_Выгрузка", "PackageSendTask_В_Соответствие", ЗаполненныйPackageSendTask.PackageSendTask, СоответствиеCustomIdСсылке1С);
			
			МетодКлиента("Модуль_Выгрузка", "ПередОтправкойСервер", СоответствиеВПФСсылке, ЗаполненныйPackageSendTask.PackageSendTask.DocumentsToSend.Count, ЗаполненныйPackageSendTask.PackageSendTask.OperationId);
			
			DocumentPackage = ЗаполненныйPackageSendTask.PackageSendTask.Send();
			
			ПослеОтправкиПакета(DocumentPackage, СоответствиеCustomIdСсылке1С, СоответствиеВПФСсылке, ПараметрыОтправкиНаСогласование);
			
		Исключение
			
			Результат	 = Ложь;
			
			Ошибка = ИнформацияОбОшибке();
			ТекстОшибки = КраткоеПредставлениеОшибки(Ошибка);
			
			Если МетодКлиента("Модуль_Клиент", "ЭтоИнформацияОбОшибкахВалидации", Ошибка) Тогда
				
				Ошибки = ТекстОшибки;
				
			Иначе
				
				ОшибкиОтправки = МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок"	, ТекстОшибки);
				ОшибкиОтправки = МетодКлиента("Модуль_Клиент", "HTMLТекстОшибкиОтправки"		, ОшибкиОтправки);
				
			КонецЕсли;
			
			Если НЕ ЗаполненныйPackageSendTask = Неопределено Тогда
				МетодКлиента("Модуль_Выгрузка", "ПриОшибкеОтправкиСервер", ТекстОшибки, СоответствиеВПФСсылке, ЗаполненныйPackageSendTask.PackageSendTask.DocumentsToSend.Count);
			КонецЕсли;
			
			Для каждого ДокументПакета из ТаблицаДокументов Цикл
				ДокументПакета.Вкл = Ложь;
			КонецЦикла;
			
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПараметрыPackageSendTask(ПараметрыОтправкиНаСогласование)
		
		ПараметрыPackageSendTask= Новый Структура();
		
		ПараметрыPackageSendTask.Вставить("Получатель", 						Контрагент);
		
		FnsParticipantIdПолучателя = МетодСервера(, "ПолучитьИдентификаторЭДОДляКонтрагента", Контрагент);
		ПараметрыPackageSendTask.Вставить("FnsParticipantIdПолучателя", ?(ЗначениеЗаполнено(FnsParticipantIdПолучателя), FnsParticipantIdПолучателя, ""));
		
		ПараметрыPackageSendTask.Вставить("ПараметрыОтправкиНаСогласование", 	ПараметрыОтправкиНаСогласование);
		ПараметрыPackageSendTask.Вставить("ФИОПодписанта",                    	МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization.Id));
		
		ПараметрыPackageSendTask.Вставить("IdОтправленого", 					"");
		ПараметрыPackageSendTask.Вставить("Организация", 						Организация);
		
		ПараметрыPackageSendTask.Вставить("Organization", 						Organization);
		ПараметрыPackageSendTask.Вставить("CounteragentID",						CounteragentBoxID);
		
		СтруктураПодразделения= Неопределено;
		
		МассивДокументовПакета= Новый Массив;
		Для каждого ДокументТаблицы из ТаблицаДокументов Цикл
			
			Если ДокументТаблицы.Вкл Тогда
				СтрокаМассива= Новый Структура();
				СтрокаМассива.Вставить("Документ", 						ДокументТаблицы.Документ1С);
				СтрокаМассива.Вставить("DocumentType", 					ДокументТаблицы.DocumentType);
				СтрокаМассива.Вставить("ТипДокумента", 					ДокументТаблицы.ТипДокумента);
				СтрокаМассива.Вставить("ДопПоле", 						ДокументТаблицы.ДопСведения);
				СтрокаМассива.Вставить("ВнешняяПечатнаяФорма", 			ДокументТаблицы.ВнешняяПечатнаяФорма);
				СтрокаМассива.Вставить("CustomDocumentId", 				"");
				СтрокаМассива.Вставить("DocumentId", 					ДокументТаблицы.DocumentId);
				СтрокаМассива.Вставить("СвязующийИдентификаторСтроки", 	ДокументТаблицы.IdСтроки);
				СтрокаМассива.Вставить("ФункцияУПД", 					ДокументТаблицы.ФункцияУПД);
				СтрокаМассива.Вставить("Организация", 					Организация);
				
				МассивДокументовПакета.Добавить(СтрокаМассива);
				
				Если СтруктураПодразделения = Неопределено И ЗначениеЗаполнено(ДокументТаблицы.Документ1С) Тогда
					СтруктураПодразделения= МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьПодразделениеПолучателя", ДокументТаблицы.Документ1С, Контрагент);	
				КонецЕсли;
				
				СтрокаМассива.Вставить("ЭтоФайл", 		ДокументТаблицы.ЭтоФайл);
				СтрокаМассива.Вставить("ДанныеФайла", 	ДокументТаблицы.ДанныеФайла);
				СтрокаМассива.Вставить("СвойстваФайла",	ДокументТаблицы.СвойстваФайла);
				
				СтрокаМассива.Вставить("ФорматОтправки", ДокументТаблицы.ФорматОтправки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыPackageSendTask.Вставить("МассивДокументовПакета", 			МассивДокументовПакета);
		
		Если СтруктураПодразделения = Неопределено Тогда
			ПараметрыPackageSendTask.Вставить("ReceiverDepartmentId", "");
		Иначе
			ПараметрыPackageSendTask.Вставить("ReceiverDepartmentId", СтруктураПодразделения.ToDepartmentID);
		КонецЕсли;
		
		ПараметрыPackageSendTask.Вставить("ЭтоПереотправка", ТочкаВызова = "ПереотправкаДокумента");
		
		ДобавитьСертификатыДляШифрования(ПараметрыPackageSendTask);
		
		Возврат ПараметрыPackageSendTask; 
		
	КонецФункции
	
	&НаКлиенте
	Процедура ДобавитьСертификатыДляШифрования(ПараметрыPackageSendTask)
		
		ШифроватьДокументы			 = МетодСервераБезКонтекста(,"ПолучитьЗначениеСвойства", ПараметрыPackageSendTask.Организация, "ДиадокШифроватьДокументы");
		ШифроватьДокументыКонтрагент = МетодСервераБезКонтекста(,"ПолучитьЗначениеСвойства", ПараметрыPackageSendTask.Получатель, "ДиадокШифроватьДокументыКонтрагент");
		
		Если ШифроватьДокументыКонтрагент = "ДА" ИЛИ (ШифроватьДокументы = "ДА" И ШифроватьДокументыКонтрагент <> "НЕТ") Тогда
			
			ПараметрыPackageSendTask.Вставить("СертификатыДляШифрования", Новый Структура("СертификатыОтправителя, СертификатыПолучателя"));
			
			ПараметрыPackageSendTask.СертификатыДляШифрования.СертификатыОтправителя = МетодКлиента("Модуль_РаботаССерверомДиадок", "СертификатыДляШифрования", ПараметрыPackageSendTask.Организация);
			ПараметрыPackageSendTask.СертификатыДляШифрования.СертификатыПолучателя  = МетодКлиента("Модуль_РаботаССерверомДиадок", "СертификатыДляШифрования", ПараметрыPackageSendTask.Организация, ПараметрыPackageSendTask.CounteragentID);
			
		КонецЕсли;
		
	КонецПроцедуры	
	
	&НаКлиенте
	Процедура ПослеОтправкиПакета(DocumentPackage, СоответствиеCustomIdСсылке1С, СоответствиеВПФСсылке, ПараметрыОтправкиНаСогласование)
		
		МетодКлиента("Модуль_Выгрузка", "ОбработатьОтправленныйПакетДокументов", DocumentPackage, СоответствиеCustomIdСсылке1С, ПараметрыОтправкиНаСогласование); 
		
		Для каждого СтрокаТЧ из ТаблицаДокументов Цикл
			
			Если СтрокаТЧ.Вкл Тогда
				
				// Для очистки списка документов на отправку на форме выгрузки.
				СтрокаТЧ.Действие = "удалить";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытияФормыОшибки(РезультатВыбора, ЗакрытьФорму) Экспорт
		
		Если ЗакрытьФорму = Истина Тогда
			Закрыть();
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПодписатьЗапрошенный(Команда)
				
		СтруктураSigner = МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
		
		Если НЕ ЗначениеЗаполнено(СтруктураSigner.ДолжностьПодписанта) Тогда
			
			БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭдОбъект.Version);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("BoxId"			   , BoxId);
			ПараметрыФормы.Вставить("AttachmentVersion", БазовыйФормат);
			ПараметрыФормы.Вставить("Организация"	   , Организация);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиАкт", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного", Новый Структура("Document", ЭДОбъект));
			
		Иначе
			ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ЭДОбъект);	
		КонецЕсли;
				
	КонецПроцедуры
	
	&НаКлиенте
	Функция ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
			ФИОПодписанта= 		РезультатЗакрытия.ФИО; 
			СтруктураSigner= 	МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
			ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ДополнительныеПараметры.Document);
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, Document) 
		
		СтруктураРезультатОперации= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПодписатьИОтправить_ПодписаниеЗапрошенного", СтруктураSigner, Document);
				
		Если СтруктураРезультатОперации.ВыполненоУспешно Тогда
			
			Если ЛЕВ(Document.type, 7) = "Invoice" Тогда
			
				ДокументСсылка1С = МетодСервера(,"DocumentID_2_Документ", Document.documentId, Document.OrganizationId, Document.type = "Invoice");
				Если ЗначениеЗаполнено(ДокументСсылка1С) Тогда
					
					ТекстОшибки= ВнестиИзмененияВДокумент(ДокументСсылка1С);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						Сообщить("Не удалось изменить реквизиты документа Счет-фактура по причине: " + ТекстОшибки);	
					КонецЕсли;
					
				КонецЕсли;
							
			КонецЕсли;
			
			ОбновитьЭДОбъект();
			
		Иначе
			ТекстОшибкиПодписания= СтруктураРезультатОперации.ТекстОшибки;
			
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Заголовок", 		"Ошибка при подписании документа");
			ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось подписать документ");
			ПараметрыФормы.Вставить("Подробности", 		МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ТекстОшибкиПодписания)
														+ Символы.ПС + "BoxId: " + Document.OrganizationId
														+ Символы.ПС + "DocumentId: " + Document.DocumentId);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста	
	Функция ВнестиИзмененияВДокумент(ДокументСсылка1С)
		
		ТекстОшибки= 		"";
		ВнесеныИзменения= 	Ложь;
		
		Попытка
			ДокументОбъект1С= ДокументСсылка1С.ПолучитьОбъект();
			
			Если НЕ ДокументОбъект1С.Метаданные().Реквизиты.Найти("КодСпособаВыставления") = Неопределено Тогда 
				Если НЕ ДокументОбъект1С.КодСпособаВыставления = 2 Тогда 
					ДокументОбъект1С.КодСпособаВыставления= 2;
					ВнесеныИзменения= Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ДокументОбъект1С.Метаданные().Реквизиты.Найти("ДатаВыставления") = Неопределено Тогда 
				Если НЕ ДокументОбъект1С.ДатаВыставления = НачалоДня(ТекущаяДата()) Тогда
					ДокументОбъект1С.ДатаВыставления= НачалоДня(ТекущаяДата());
					ВнесеныИзменения= Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ВнесеныИзменения Тогда 
				Если ДокументОбъект1С.Проведен Тогда
					ДокументОбъект1С.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокументОбъект1С.Записать();
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			ТекстОшибки= ОписаниеОшибки();
		КонецПопытки;
		
		Возврат ТекстОшибки;
		
	КонецФункции
			
	&НаКлиенте
	Процедура Скрыть_Показать_Список(Команда)
		
		Если Элементы.ГруппаСодержимоеПакета.Видимость = Истина Тогда
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= ">>";
			УстановитьПодсказкуКомандыНаСервере("Скрыть_Показать_Список", "Показать список документов пакета");
			
			Элементы.ГруппаСодержимоеПакета.Видимость= 		Ложь;
			Элементы.ГруппаКнопкиКоманднойПанелиТаблицыДокументов.Видимость= Ложь;
		Иначе
			Элементы.КнопкаСкрытьПоказатьСоставПакета.Заголовок= "<<";
			УстановитьПодсказкуКомандыНаСервере("Скрыть_Показать_Список", "Скрыть список документов пакета");
			
			Элементы.ГруппаСодержимоеПакета.Видимость= 		Истина;
			Элементы.ГруппаКнопкиКоманднойПанелиТаблицыДокументов.Видимость= Истина;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура УстановитьПодсказкуКомандыНаСервере(ИмяКоманды, ТекстПодсказки)
		
		НашаКоманда= Команды.Найти(ИмяКоманды);
		НашаКоманда.Подсказка= ТекстПодсказки;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаПриАктивизацииСтроки(Элемент)
				
		//перезаполняем реквизиты формы и кэшируем результат визуализации
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УправлениеДоступностью_Кнопка_НастроитьПараметрыПодписи(ТекущиеДанные.ТипДокумента, ТекущиеДанные.ФункцияУПД);
		УправлениеДоступностью_Кнопки_РедактированиеСоставаПакета(ТекущиеДанные.ЭтоФайл);
				
		Если IDТекущейСтроки = ТекущиеДанные.IdСтроки Тогда
			Возврат;
		КонецЕсли;
				
		IDТекущейСтроки = ТекущиеДанные.IdСтроки;
				
		ЗаполнитьРеквизитыФормыТекущимиДаннымТаблицыДокументов(ТекущиеДанные);
				
		Если ТекущиеДанные.ЭтоФайл Тогда
			
			Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница = Элементы.СтраницаБезВизуализации;
												
			ДанныеФайлаНаФорму(ТекущиеДанные);
			
			УстановитьВидимостьПоТипуДокумента();
					
			Если ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации) Тогда
				Ошибки = ТекущиеДанные.ТекстОшибкиВалидации;
			Иначе
				Ошибки = "";
			КонецЕсли;
			
			Элементы.Ошибки.Видимость = ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации);
								
		Иначе
			
			Элементы.ГруппаВизуализацияДокумента.ТекущаяСтраница = Элементы.СтраницаТабличноеПоле;
			
			Если КэшТабличныеДокументы = Неопределено Тогда
				ТабДокументЗакэширован = Ложь;
			Иначе
				ТабДокументЗакэширован = (НЕ КэшТабличныеДокументы.Получить(IDТекущейСтроки) = Неопределено);
			КонецЕсли;
			
			Ошибки = "";
			
			//При наличии ошибки, сознательно повторяем валидацию и построение табличного документа
			Если НЕ ТабДокументЗакэширован
				ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации)
				ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиФормата) Тогда
				
				ВизуализацияПечатнойФормыПоСтруктуре();
				
			Иначе
				
				ТабПоле = КэшТабличныеДокументы.Получить(IDТекущейСтроки);
				
				ТекстПолнойОшибки 	= ТекстПолнойОшибки();
				Ошибки 				= ТекстПолнойОшибки; 
				
			КонецЕсли;
			
			
			Элементы.Ошибки.Видимость = 	ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиВалидации)
									   	ИЛИ ЗначениеЗаполнено(ОшибкиОтправки) 
									   	ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТекстОшибкиФормата);
						
		КонецЕсли;
						
		НастроитьЗаголовок();
								
	КонецПроцедуры

	&НаКлиенте
	Процедура ВыделитьВсеДокументыПакета(Команда)
		
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
						
			Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.ВнешняяПечатнаяФорма) Тогда
							
				НаборСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ1С", СтрокаТаблицыДокументов.Документ1С));
				
				Для каждого Строка из НаборСтрок Цикл
														
					Если ЗначениеЗаполнено(Строка.ТекстОшибкиВалидации) Тогда
						Строка.Вкл= 				 Ложь;
						СтрокаТаблицыДокументов.Вкл= Ложь;
					ИначеЕсли МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", СтрокаТаблицыДокументов.Документ1С, СтрокаТаблицыДокументов.ВнешняяПечатнаяФорма, СтрокаТаблицыДокументов.Проведен) Тогда
						Строка.Вкл= 				 Ложь;
						СтрокаТаблицыДокументов.Вкл= Ложь;
					Иначе
						Строка.Вкл= ?(ЗначениеЗаполнено(Строка.DocumentID) = Истина, Строка.Вкл, Истина);	
					КонецЕсли;
										
				КонецЦикла;
				
			Иначе
				
				Если МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", СтрокаТаблицыДокументов.Документ1С, СтрокаТаблицыДокументов.ВнешняяПечатнаяФорма, СтрокаТаблицыДокументов.Проведен) Тогда 
					СтрокаТаблицыДокументов.Вкл= Ложь;
				Иначе
					СтрокаТаблицыДокументов.Вкл= ?(ЗначениеЗаполнено(СтрокаТаблицыДокументов.ТекстОшибкиВалидации), Ложь, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура СнятьВыделениеСДокументовПакета(Команда)
		
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
			СтрокаТаблицыДокументов.Вкл= Ложь;
		КонецЦикла;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		Отказ= Истина;
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаПередУдалением(Элемент, Отказ)
		Отказ= Истина;
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаДокументовПакетаВклПриИзменении(Элемент)
		
		ТекущаяСтрока= 	Элементы.ТаблицаДокументов.ТекущиеДанные;
		Документ= 		ТекущаяСтрока.Документ1С;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.DocumentID) = Ложь Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ТекстОшибкиВалидации) И ТекущаяСтрока.Вкл = Истина Тогда
				ТекущаяСтрока.Вкл= Ложь;
				ТекстПредупреждения= "При проверке документа: """ +  ТекущаяСтрока.Представление + """ обнаружены ошибки. После исправления ошибок, документ будет доступен для отправки.";
				ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма) = Истина И ТекущаяСтрока.Вкл = Истина Тогда
							
				НаборСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ1С", Документ));
				
				Для каждого Строка из НаборСтрок Цикл
					
					Если ЗначениеЗаполнено(Строка.ТекстОшибкиВалидации) Тогда
						
						Строка.Вкл= 		Ложь;
						ТекущаяСтрока.Вкл= 	Ложь;
																		
						ТекстПредупреждения= "При проверке документа основания: """ + Строка.Представление + """ обнаружены ошибки. "
											 "После исправления ошибок, внешняя печатная форма и документ основание будут доступны для отправки.";
						ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
						
						Возврат;
					
					ИначеЕсли МетодКлиента("Модуль_Клиент", "НеобходимоОграничениеНаОтправку", Документ, ТекущаяСтрока.ВнешняяПечатнаяФорма, ТекущаяСтрока.Проведен) Тогда
						
						Строка.Вкл= 		Ложь;
						ТекущаяСтрока.Вкл= 	Ложь;
						
						ТекстПредупреждения= "Документ основание: """ + Строка.Представление + """ валютный и не проведен." + Символы.ПС +
											 "Для отправки валютного документа, необходимо выполнить его проведение.";
						
						ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
						
						Возврат;
					Иначе
						Строка.Вкл= ?(ЗначениеЗаполнено(Строка.DocumentID) = Истина, Строка.Вкл, Истина);	
					КонецЕсли;
										
				КонецЦикла;
										
			ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВнешняяПечатнаяФорма) = Ложь И ТекущаяСтрока.Вкл = Ложь Тогда
									
				НаборСтрок= ТаблицаДокументов.НайтиСтроки(Новый Структура("Документ1С", Документ));
									
				Для каждого Строка из НаборСтрок Цикл
					Если ЗначениеЗаполнено(Строка.ВнешняяПечатнаяФорма) = Истина Тогда
						Строка.Вкл= Ложь;
					КонецЕсли;
				КонецЦикла;
								
			КонецЕсли;
					
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьФайлыВПакет(Команда)
		
		Каталог= ?(КаталогВыбораФайлов = "", "C:\", КаталогВыбораФайлов);
		
		ДиалогВыбора= МетодКлиента("Модуль_Клиент", "ЗаполненныйДиалогВыбораФайла", Истина, Каталог);
		
		ДополнительныеПараметры= Новый Структура("ДиалогВыбораФайла", ДиалогВыбора);
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ВыполнитьДействиеПослеВыбораФайла", ЭтаФорма, ДополнительныеПараметры));
			
	КонецПроцедуры
			
	&НаКлиенте
	Процедура ЗаменитьФайлВПакете(Команда)
		
		Каталог= ?(КаталогВыбораФайлов = "", "C:\", КаталогВыбораФайлов);
		
		ДиалогВыбора= МетодКлиента("Модуль_Клиент", "ЗаполненныйДиалогВыбораФайла", Ложь, Каталог);
		
		ДополнительныеПараметры= Новый Структура("ДиалогВыбораФайла", ДиалогВыбора);
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ВыполнитьДействиеПослеРедактированияВыбранногоФайла", ЭтаФорма, ДополнительныеПараметры));
				
	КонецПроцедуры
		
	&НаКлиенте
	Процедура УдалитьФайлВПакете(Команда)
		
		ТекстВопроса= "Вы действительно хотите удалить файл из пакета?";
		ДополнительныеПараметры= Новый Структура("ИдентификаторТекущейСтроки", Элементы.ТаблицаДокументов.ТекущаяСтрока);
		
		ОписаниеОповещения= Новый ОписаниеОповещения("ОбработчикОповещенияВопросУдалитьФайлИзПакета", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ДобавитьВВыделенныеПакеты(Команда)
		
		ТекстОшибки= НеЗаполненныеПоляФайла();
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Ошибки= МетодКлиента("Модуль_Клиент", "ОформитьОшибкиВHTML", ТекстОшибки, "Перед добавлением в пакет необходимо:");
			Элементы.Ошибки.Видимость= Истина;
			Возврат;
		КонецЕсли;
				
		ОтмеченныеФайлы= ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл", Истина));
		Если ОтмеченныеФайлы.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Укажите флажками документы, которые необходимо добавить в выделенные ранее пакеты", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			Возврат;
		ИначеЕсли НЕ ОтмеченныеФайлы.Количество() = ТаблицаДокументов.Количество() Тогда
			ТекстВопроса= 		"Были отмечены не все файлы в списке. Продолжить операцию?";
			ОписаниеОповещения= Новый ОписаниеОповещения("ОбработчикОповещенияВопросВыбраныНеВсеФайлы", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 120, , Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);	
		Иначе
			ПередатьФайлыДляДобавленияВПакеты(Истина);
		КонецЕсли;
		
	КонецПроцедуры
	
	
//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

//{ РЕДАКТИРОВАНИЕ ПАКЕТА
////////////////////////////////////////////////////////////////////////////////

	&НаКлиенте
	Процедура УстановитьВидимостьПоТипуДокумента()
		
		Элементы.ГруппаNonformalized.Видимость 			= Видимость_ГруппаNonformalized();
		Элементы.ГруппаNonformalizedProforma.Видимость	= (DocumentType = "NonformalizedProforma");
		Элементы.Группа_PriceList.Видимость				= (DocumentType = "PriceList");
		Элементы.Группа_AcceptanceCertificate.Видимость	= Видимость_ГруппаAcceptanceCertificate();
		Элементы.Группа_Contract.Видимость				= (DocumentType = "Contract");
		
		Элементы.Неформализованный_ЗапроситьПодписьКонтрагента.Видимость = Видимость_НеформализованныйЗапроситьПодписьКонтрагента();
		
		Если DocumentType = "Contract" Тогда 
			Элементы.Договор_Цена.Доступность = НЕ Договор_ЦенаНеУказана;
		КонецЕсли;
					
	КонецПроцедуры
	
	&НаКлиенте
	Функция Видимость_ГруппаNonformalized()
		
		Результат = 	DocumentType = "Nonformalized" 
					ИЛИ DocumentType = "PriceListAgreement" 
					ИЛИ DocumentType = "CertificateRegistry" 
					ИЛИ DocumentType = "ServiceDetails" 
					ИЛИ DocumentType = "ReconciliationAct";
					
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Видимость_НеформализованныйЗапроситьПодписьКонтрагента()
		
		Результат = 	DocumentType = "Nonformalized" 
					ИЛИ DocumentType = "PriceListAgreement" 
					ИЛИ DocumentType = "CertificateRegistry";
					
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция Видимость_ГруппаAcceptanceCertificate()
		
		Результат = 	DocumentType = "Torg12"
					ИЛИ DocumentType = "AcceptanceCertificate";  // у этих документов идентичные метаданные
					
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ОчиститьРеквизитыФормы(ОбрабатываемыйТип)
		
		Если 	ОбрабатываемыйТип = "Torg12"
			ИЛИ ОбрабатываемыйТип = "AcceptanceCertificate" Тогда
				
			ЗапроситьПодписьКонтрагента = Ложь;
			
			ДокументНомер		= "";
			ДокументДата		= '00010101';
			ДокументСуммаСНДС	= 0;
			ДокументСуммаНДС	= 0;
			ДокументОснования	= "";
			ДокументБезНДС		= Ложь;
			Комментарий			= "";		
			
		ИначеЕсли ОбрабатываемыйТип = "Contract" Тогда
			
			Договор_Тип		= "";
			ДокументНомер	= "";
			ДокументДата	= '00010101';
			ДокументЦена	= 0;
			Комментарий		= "";
			Договор_ЦенаНеУказана = Ложь;
			
		ИначеЕсли ОбрабатываемыйТип = "NonformalizedProforma" Тогда
			
			ДокументНомер		= "";
			ДокументДата		= '00010101';
			ДокументСуммаСНДС	= 0;
			ДокументСуммаНДС	= 0;
			ДокументОснования	= "";
			ДокументБезНДС		= Ложь;
			Комментарий			= "";
			
		ИначеЕсли ОбрабатываемыйТип = "PriceList" Тогда
			
			ДокументНомер				= "";
			ДокументДата				= '00010101';
			ЦеновойЛист_ВступаетВСилу	= '00010101';
			ДокументНомерДоговора		= "";
			ДокументДатаДоговора		= "";
			Комментарий					= "";		
			
		ИначеЕсли 	ОбрабатываемыйТип = "Nonformalized"
			ИЛИ 	ОбрабатываемыйТип = "PriceListAgreement"
			ИЛИ		DocumentType = "CertificateRegistry" Тогда
			
			ЗапроситьПодписьКонтрагента = Ложь;
			ДокументНомер	= "";
			ДокументДата	= '00010101';
			Комментарий		= ""; 
			
		ИначеЕсли DocumentType = "ServiceDetails" ИЛИ DocumentType = "ReconciliationAct" Тогда 	
			
			ДокументНомер	= "";
			ДокументДата	= '00010101';
			Комментарий		= "";
			
		Иначе
			
			СообщитьОбОтсутствииКэширования();
									
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ИзменитьПредставлениеДокументаВТаблице()
		
		ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТипыНеформализованных = ТипыНеформализованныхДокументов();
		
		Представление = ТипыНеформализованных.Получить(DocumentType);
		
		Если Представление = Неопределено Тогда
			Представление = ТипыНеформализованных.Получить("Nonformalized");
		КонецЕсли;
								
		Если ЗначениеЗаполнено(ДокументНомер) Тогда
			Представление = Представление + " № " + ДокументНомер;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументДата) Тогда
			Представление = Представление + " от " + Формат(ДокументДата, "ДЛФ=Д");	
		КонецЕсли;
		
		ТекущиеДанные.Представление = Представление; 
							
	КонецПроцедуры
	
	&НаКлиенте
	Функция ПредставлениеРазмераФайла(РазмерВБайтах)
		
		Если РазмерВБайтах >= 1048576 Тогда // Размер больше или равен 1 мегабайт
			Возврат Строка(ОКР(РазмерВБайтах / 1048576, 1)) + " МБ";
		ИначеЕсли РазмерВБайтах >= 1024 Тогда // Размер больше или равен 1 килобайт
			Возврат Строка(ОКР(РазмерВБайтах / 1024, 1)) + " КБ";
		Иначе
			Возврат Строка(РазмерВБайтах) + " Б";
		КонецЕсли;
		
	КонецФункции
				
	&НаКлиенте
	Процедура ПередатьФайлыДляДобавленияВПакеты(ПередатьВсе= Ложь)
		
		ПараметрЗакрытия= Новый Структура;
						
		КоллекцияФайлов= Новый Массив;
				
		Для каждого СтрокаТаблицыДокументов из ТаблицаДокументов Цикл
			
			Если НЕ ПередатьВсе И НЕ СтрокаТаблицыДокументов.Вкл Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементКоллекции= Новый Структура("IdСтроки, СвойстваФайла, ДанныеФайла, DocumentType, ФорматОтправки");
			
			ЭлементКоллекции.Вставить("IdСтроки", 		СтрокаТаблицыДокументов.IdСтроки);
			ЭлементКоллекции.Вставить("СвойстваФайла", 	СтрокаТаблицыДокументов.СвойстваФайла);
			ЭлементКоллекции.Вставить("ДанныеФайла", 	СтрокаТаблицыДокументов.ДанныеФайла);
			ЭлементКоллекции.Вставить("DocumentType", 	СтрокаТаблицыДокументов.DocumentType);
			ЭлементКоллекции.Вставить("ФорматОтправки", СтрокаТаблицыДокументов.ФорматОтправки);
			
			КоллекцияФайлов.Добавить(ЭлементКоллекции);
			
		КонецЦикла;
		
		ПараметрЗакрытия.Вставить("МассивНеформализованныхДокументов", КоллекцияФайлов);
				
		Закрыть(ПараметрЗакрытия);
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ЗАГОТОВКИ

		&НаКлиентеНаСервереБезКонтекста
		Функция Новый_СвойстваФайла()
			
			Возврат Новый Структура("Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение, РазмерВБайтах");
			
		КонецФункции
		
		&НаКлиенте
		Процедура ОрганизацияПриИзменении(Элемент)
			
			ОбработатьИзменениеОрганизации();
								
		КонецПроцедуры
		
		&НаКлиенте
		Процедура КонтрагентПриИзменении(Элемент)
			
			CounteragentBoxID= МетодСервера(, "Контрагент_2_CounteragentBoxID", Контрагент);
			
			Если Organization = Неопределено ИЛИ НЕ ЗначениеЗаполнено(CounteragentBoxID) Тогда
				// только для операции "СоздатьНовыйПакет"
				Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
				Элементы.ГруппаПередачаНаСогласование.Доступность=  Ложь;	
			Иначе
				Если UserPermissions = Неопределено Тогда
					UserPermissions= Organization.GetUserPermissions();	
				КонецЕсли;
				Если ПоказатьКнопкуПередачиНаСогласование(UserPermissions) ИЛИ ПоказатьКнопкуПередачиНаПодпись(UserPermissions) Тогда
					Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
					Элементы.ГруппаПередачаНаСогласование.Доступность=  Истина;	
				Иначе
					Элементы.ГруппаПередачаНаСогласование.Видимость=  	Истина;
					Элементы.ГруппаПередачаНаСогласование.Доступность=  Ложь;	
				КонецЕсли;
			КонецЕсли;
								
		КонецПроцедуры
	
		&НаКлиенте
		Процедура БезВизуализации_FileNameНажатие(Элемент)
			
			Если НЕ Элементы.ТаблицаДокументов.ТекущиеДанные = Неопределено Тогда
				
				СтруктураСвойстваФайла= Элементы.ТаблицаДокументов.ТекущиеДанные.СвойстваФайла;
				ЗапуститьПриложение(СтруктураСвойстваФайла.ПолноеИмя);
				
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ТипДокументаПриИзменении(Элемент)
			
			ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
			
			Если ТекущиеДанные = Неопределено Тогда
				
				DocumentType = ТипДокумента;
				УстановитьВидимостьПоТипуДокумента();
				
				Возврат;
				
			КонецЕсли;
						
			Если НЕ ТекущиеДанные.DocumentType = ТипДокумента Тогда
				
				ОчиститьРеквизитыФормы(ТекущиеДанные.DocumentType);
				
				ТекущиеДанные.DocumentType = ТипДокумента;
				DocumentType = ТипДокумента;
				
				ТекущиеДанные.ДанныеФайла    = Новый_ДанныеФайла();
				ТекущиеДанные.ФорматОтправки = МетодКлиента("Модуль_Выгрузка", "ОписаниеФорматаДляОтправкиФайла", ТекущиеДанные.DocumentType);
				
				УстановитьВидимостьПоТипуДокумента();
				
				ДанныеФайлаНаФорму(ТекущиеДанные);
				
				ИзменитьПредставлениеДокументаВТаблице();
				
				СообщитьОЗаполненииОбязательныхПолей(ТекущиеДанные,DocumentType);
								
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура СообщитьОЗаполненииОбязательныхПолей(ТекущиеДанные, DocumentType)
			
			ДанныеФайла= ТекущиеДанные.ДанныеФайла;
			
			СписокОшибок = ВалидироватьДанныеФайла(DocumentType, ДанныеФайла);
														
			Если ЗначениеЗаполнено(СписокОшибок) Тогда
				ОшибкиОтправки= МетодКлиента("Модуль_Клиент", "ОформитьОшибкиВHTML", СписокОшибок, "Необходимо заполнить поля:");	
				ТекущиеДанные.ТекстОшибкиВалидации= ОшибкиОтправки;
				Ошибки= ОшибкиОтправки;
			Иначе
				ТекущиеДанные.ТекстОшибкиВалидации= "";
				Ошибки= "";
			КонецЕсли;
						
			Элементы.Ошибки.Видимость= ЗначениеЗаполнено(СписокОшибок);
			
		КонецПроцедуры
			
		// Nonfomalized
	
		&НаКлиенте
		Процедура Неформализованный_ЗапроситьПодписьКонтрагентаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("NeedRecipientSignature", ЗапроситьПодписьКонтрагента);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Неформализованный_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
										
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Неформализованный_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
										
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Неформализованный_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", СокрЛП(Элемент.ТекстРедактирования));
			
		КонецПроцедуры
	
		//Nonfomalized Proforma
	
		&НаКлиенте
		Процедура Счет_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
								
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_СуммаСНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Total", ДокументСуммаСНДС);
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_СуммаНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Vat", ДокументСуммаНДС);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_БезНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("БезНДС", ДокументБезНДС);
			
			Если ДокументБезНДС Тогда
				ДокументСуммаНДС= 0;
			КонецЕсли;
			
			Элементы.Счет_СуммаНДС.Доступность= НЕ ДокументБезНДС;
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_ОснованиеПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Grounds", ДокументОснования);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Счет_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", Комментарий);
			
		КонецПроцедуры
	
		//Acceptance Certificate
	
		&НаКлиенте
		Процедура АктВыпРабот_ЗапроситьПодписьКонтрагентаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("NeedRecipientSignature", ЗапроситьПодписьКонтрагента);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_СуммаСНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Total", ДокументСуммаСНДС);
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_СуммаНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Vat", ДокументСуммаНДС);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ДокументБезНДСПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("БезНДС", ДокументБезНДС);
			
			Если ДокументБезНДС Тогда
				ДокументСуммаНДС= 0;
			КонецЕсли;
			
			Элементы.АктВыпРабот_СуммаНДС.Доступность= НЕ ДокументБезНДС;
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_ОснованиеПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Grounds", ДокументОснования);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура АктВыпРабот_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", Комментарий);	
			
		КонецПроцедуры
	
		//Contract
	
		&НаКлиенте
		Процедура Договор_ТипПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("ContractType", Договор_Тип);	
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_НомерПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentNumber", ДокументНомер);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_ДатаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("DocumentDate", ДокументДата);
			ИзменитьПредставлениеДокументаВТаблице();
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_ЦенаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("ContractPrice", ДокументЦена);
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_КомментарийПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("Comment", Комментарий);
			
		КонецПроцедуры
	
		&НаКлиенте
		Процедура Договор_ЦенаНеУказанаПриИзменении(Элемент)
			
			ИзменитьДанныеФайла("ЦенаНеУказана", Договор_ЦенаНеУказана);
			
			Если Договор_ЦенаНеУказана Тогда
				ДокументЦена= 0;
			КонецЕсли;
			
			Элементы.Договор_Цена.Доступность= НЕ Договор_ЦенаНеУказана;
			
			СообщитьОЗаполненииОбязательныхПолей(Элементы.ТаблицаДокументов.ТекущиеДанные, DocumentType);
						
		КонецПроцедуры

	
	////////////////////////////////////////////////////////////////////////////////
	//} ОБРАБОТЧИКИ СОБЫТИЙ
	
	////////////////////////////////////////////////////////////////////////////////
	//{ ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ

		&НаКлиенте
		Процедура ВыполнитьДействиеПослеВыбораФайла(МассивАдресовФайлов, ДополнительныеПараметры) Экспорт
			
			Если МассивАдресовФайлов = Неопределено Тогда
				Возврат;	
			Иначе
				
				МассивБольшиеФайлы= Новый Массив;
				МетодКлиента("Модуль_Клиент", "ПроверитьРазмерВыбранныхФайлов", МассивАдресовФайлов, МассивБольшиеФайлы);
				
				Если МассивБольшиеФайлы.Количество() > 0 Тогда
					МетодКлиента("Модуль_Клиент", "ОбработатьМассивБольшихФайлов", МассивБольшиеФайлы, ЭтаФорма);
					МассивБольшиеФайлы= Неопределено;
				КонецЕсли;
												
				КаталогВыбораФайлов= ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
								
				Для каждого ВыбранныйФайл из МассивАдресовФайлов Цикл
										
					ФайлДанных= Новый Файл(ВыбранныйФайл);
					
					НоваяСтрока= ТаблицаДокументов.Добавить();
					
					НоваяСтрока.Вкл                  = Истина;
					НоваяСтрока.Представление        = "Неформализованный";
					НоваяСтрока.DocumentType         = "Nonformalized"; //по умолчанию добавляемый файл имеет тип "Nonformalized", далее пользователь настраивает сам
					НоваяСтрока.ТекущиеДанные        = Ложь;
					НоваяСтрока.IdСтроки             = Новый УникальныйИдентификатор;
					НоваяСтрока.ТекстОшибкиВалидации = "";
					НоваяСтрока.ЭтоФайл              = Истина; 
					
					НоваяСтрока.ДанныеФайла          = МетодКлиента("Модуль_Клиент", "Новый_NonformalizedDocumentToSend");
					НоваяСтрока.СвойстваФайла        = Новый_СвойстваФайла();
					НоваяСтрока.ФорматОтправки       = МетодКлиента("Модуль_Выгрузка", "ОписаниеФорматаДляОтправкиФайла", НоваяСтрока.DocumentType);
										
					ЗаполнитьСвойстваФайла(НоваяСтрока.СвойстваФайла, ФайлДанных);
																		
				КонецЦикла;
				
				НастроитьЗаголовок();
				
			КонецЕсли;
									
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ВыполнитьДействиеПослеРедактированияВыбранногоФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
			
			Если ВыбранныеФайлы = Неопределено Тогда
				Возврат;
			Иначе
				Если ВыбранныеФайлы.Количество()>0 Тогда
					
					ФайлДанных= Новый Файл(ВыбранныеФайлы[0]);
					
					Если ФайлДанных.Размер() > (5*1024*1024) Тогда
						
						ТекстПредупреждения= "Размер отправляемого файла не должен превышать 5Мб. Размер выбранного файла " + ПредставлениеРазмераФайла(ФайлДанных.Размер());
						ПоказатьПредупреждение(, ТекстПредупреждения, 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы); 
						
					Иначе
						КаталогВыбораФайлов= ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
											
						ТекущиеДанные= Элементы.ТаблицаДокументов.ТекущиеДанные;
						СтруктураСвойстваФайла= ТекущиеДанные.СвойстваФайла;
						
						СтруктураСвойстваФайла.Имя= 				ФайлДанных.Имя;
						СтруктураСвойстваФайла.ИмяБезРасширения= 	ФайлДанных.ИмяБезРасширения;
						СтруктураСвойстваФайла.ПолноеИмя= 			ФайлДанных.ПолноеИмя;
						СтруктураСвойстваФайла.Путь= 				ФайлДанных.Путь;
						СтруктураСвойстваФайла.Расширение= 			ФайлДанных.Расширение;
						СтруктураСвойстваФайла.РазмерВБайтах= 		ФайлДанных.Размер();
					
						ТекущиеДанные.СвойстваФайла= СтруктураСвойстваФайла; 
								
						Элементы.БезВизуализации_FileName.Заголовок= 	ФайлДанных.Имя;
						Элементы.БезВизуализации_РазмерФайла.Заголовок= ПредставлениеРазмераФайла(ФайлДанных.Размер());
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
					
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ОбработчикОповещенияВопросУдалитьФайлИзПакета(РезультатВопроса, ДополнительныеПараметры) Экспорт
			
			Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
				
				ИдентификаторТекущейСтроки= ДополнительныеПараметры.ИдентификаторТекущейСтроки;
				
				ТекущаяСтрока= ТаблицаДокументов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
				
				ТаблицаДокументов.Удалить(ТекущаяСтрока);
							
				НастроитьЗаголовок();
				
				Если ТаблицаДокументов.Количество() = 0 Тогда
					ОчиститьРеквизитыФормы(ТипДокумента);
					Элементы.БезВизуализации_FileName.Заголовок= 	"";
					Элементы.БезВизуализации_РазмерФайла.Заголовок= "";
				КонецЕсли;
								
			КонецЕсли;
			
		КонецПроцедуры
		
	
	////////////////////////////////////////////////////////////////////////////////
	//} ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ
	
	////////////////////////////////////////////////////////////////////////////////
	//{ РАБОТА С КЭШ

		&НаКлиенте
		Процедура ИнициализироватьКэшТабличныеДокументы()
			
			Если КэшТабличныеДокументы = Неопределено Тогда
				КэшТабличныеДокументы= Новый Соответствие;
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ЗаполнитьСвойстваФайла(СтруктураСвойстваФайла, ФайлДанных)
							
			ЗаполнитьЗначенияСвойств(СтруктураСвойстваФайла, ФайлДанных);
			СтруктураСвойстваФайла.РазмерВБайтах= ФайлДанных.Размер();
										
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ИзменитьДанныеФайла(ИмяСвойстваОбъекта, ЗначениеСвойства)
			
			ДанныеТекущейСтроки= Элементы.ТаблицаДокументов.ТекущиеДанные;
			
			Если ДанныеТекущейСтроки = Неопределено Тогда
				Возврат;
			КонецЕсли;
						
			ДанныеТекущейСтроки.ДанныеФайла[ИмяСвойстваОбъекта]= ЗначениеСвойства;
						
		КонецПроцедуры
	
		&НаКлиенте
		Процедура ДанныеФайлаНаФорму(ТекущиеДанные)
			
			ТипДокумента = DocumentType;
			
			СтруктураДанныеФайла	= ТекущиеДанные.ДанныеФайла;
			СтруктураСвойстваФайла	= ТекущиеДанные.СвойстваФайла;
			
			Если 	DocumentType = "AcceptanceCertificate"
				Или DocumentType = "Torg12" Тогда
				
				ЗапроситьПодписьКонтрагента = СтруктураДанныеФайла.NeedRecipientSignature;
			
				ДокументНомер		= СтруктураДанныеФайла.DocumentNumber;
				ДокументДата		= СтруктураДанныеФайла.DocumentDate;
				ДокументСуммаСНДС	= СтруктураДанныеФайла.Total;
				ДокументСуммаНДС	= СтруктураДанныеФайла.Vat;
				ДокументБезНДС		= СтруктураДанныеФайла.БезНДС;
				ДокументОснования	= СтруктураДанныеФайла.Grounds;
				Комментарий			= СтруктураДанныеФайла.Comment;
				
			ИначеЕсли DocumentType = "Contract" Тогда
				
				Договор_Тип				= СтруктураДанныеФайла.ContractType;
				ДокументНомер			= СтруктураДанныеФайла.DocumentNumber;
				ДокументДата			= СтруктураДанныеФайла.DocumentDate;
				ДокументЦена			= СтруктураДанныеФайла.ContractPrice;
				Договор_ЦенаНеУказана	= СтруктураДанныеФайла.ЦенаНеУказана;
				Комментарий				= СтруктураДанныеФайла.Comment;
				
			ИначеЕсли DocumentType = "NonformalizedProforma" Тогда
				
				ДокументНомер		= СтруктураДанныеФайла.DocumentNumber;
				ДокументДата		= СтруктураДанныеФайла.DocumentDate;
				ДокументСуммаНДС	= СтруктураДанныеФайла.Vat;
				ДокументСуммаСНДС	= СтруктураДанныеФайла.Total;
				ДокументОснования	= СтруктураДанныеФайла.Grounds;
				ДокументБезНДС		= СтруктураДанныеФайла.БезНДС;
				Комментарий			= СтруктураДанныеФайла.Comment;
				
			ИначеЕсли DocumentType = "Nonformalized" 
				ИЛИ DocumentType = "PriceListAgreement" 
				ИЛИ DocumentType = "CertificateRegistry" Тогда
				
				ЗапроситьПодписьКонтрагента = СтруктураДанныеФайла.NeedRecipientSignature;
				ДокументНомер	= СтруктураДанныеФайла.DocumentNumber;
				ДокументДата	= СтруктураДанныеФайла.DocumentDate;
				Комментарий		= СтруктураДанныеФайла.Comment; 
										
			ИначеЕсли DocumentType = "ServiceDetails" 
				ИЛИ DocumentType = "ReconciliationAct" Тогда
				
				ДокументНомер	= СтруктураДанныеФайла.DocumentNumber;
				ДокументДата	= СтруктураДанныеФайла.DocumentDate;
				Комментарий		= СтруктураДанныеФайла.Comment;	
				
			Иначе
				
				СообщитьОбОтсутствииКэширования();
				
			КонецЕсли;
			
			Элементы.БезВизуализации_FileName.Заголовок = СтруктураСвойстваФайла.Имя;
				
			РазмерФайлаНаФорму = "";
			РазмерФайлаНаФорму = ПредставлениеРазмераФайла(СтруктураСвойстваФайла.РазмерВБайтах);
			
			Элементы.БезВизуализации_РазмерФайла.Заголовок = РазмерФайлаНаФорму;
						
		КонецПроцедуры
		
		&НаКлиенте
		Процедура СообщитьОбОтсутствииКэширования()
			
			ТекстСообщения = НСтр("ru = 'Кэширование для данного типа документа еще не реализовано'");
			МетодКлиента("Модуль_Клиент", "СообщитьПользователю", ТекстСообщения);
			
		КонецПроцедуры
			
		&НаКлиенте
		Функция Новый_ДанныеФайла()
			
			Если ТипДокумента = "Nonformalized" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_NonformalizedDocumentToSend");
				
			ИначеЕсли ТипДокумента = "PriceListAgreement" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_NonformalizedDocumentToSend");
				Результат.NeedRecipientSignature = Истина;
				
			ИначеЕсли ТипДокумента = "CertificateRegistry" Тогда 
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_NonformalizedDocumentToSend");
				
			ИначеЕсли ТипДокумента = "ServiceDetails" ИЛИ ТипДокумента = "ReconciliationAct" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_ServiceDetails");
				
			ИначеЕсли ТипДокумента = "NonformalizedProforma" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_NonformalizedProforma");
				
			ИначеЕсли ТипДокумента = "PriceList" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_PriceList");
				
			ИначеЕсли ТипДокумента = "AcceptanceCertificate" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_AcceptanceCertificate");
				
			ИначеЕсли ТипДокумента = "Torg12" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_Torg12");
				
			ИначеЕсли ТипДокумента = "Contract" Тогда
				
				Результат = МетодКлиента("Модуль_Клиент", "Новый_Contract");
				
			Иначе
				
				Результат = Неопределено;
										
			КонецЕсли;
			
			Возврат Результат;
									
		КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	//} РАБОТА С КЭШ 


//} РЕДАКТИРОВАНИЕ ПАКЕТА
////////////////////////////////////////////////////////////////////////////////
