
#Область ПЕРЕМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		Параметры.Свойство("Организация"		, Организация);
		Параметры.Свойство("ТелефонТехподдержки", ТелефонТехподдержки);
		
		СловарьWL 		= МетодСервера(,"ПолучитьСловарь");
		Заголовок 		= СловарьWL.КраткоеНаименованиеСистемы + ": Техническая поддержка";
		ЭтоСервисДиадок = ВРег(СловарьWL.КраткоеНаименованиеСистемы) = ВРег("Диадок");
		
		Элементы.ГруппаПомощь.Видимость = ЭтоСервисДиадок;
		Элементы.НадписьТелефонТехподдержки.Заголовок = ?(стрДлина(ТелефонТехподдержки)<20, "Телефон техподдержки: " + ТелефонТехподдержки, ТелефонТехподдержки);
				
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриОткрытии(Отказ)

		ПлатформаПриОткрытии(Отказ);
		
		ЗаполнитьРеквизитыФормыТехническойИнформацией();
		
		Если ПустаяСтрока(Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции) Тогда
			ИмяМодуляИнтеграции = "Модуль интеграции не определен!";
			Элементы.ИмяМодуляИнтеграции.ЦветТекста= WebЦвета.Красный;
		КонецЕсли;
			
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

	// Сохраняет на рабочий стол пользователя текстовый файл, содержащий техническую информацию 
	&НаКлиенте
	Процедура СохранитьТехИнформацию(Команда)
		
		ТекстовыйДокумент 	= Новый ТекстовыйДокумент;
		ПарОрганизация 		= ?(ЗначениеЗаполнено(Организация), Организация, Неопределено);
		МетодКлиента("Модуль_Клиент", "ДобавитьВТекстовыйДокументИнформациюДляТехПоддержки", ТекстовыйДокумент, ПарОрганизация);
			
		Попытка
			
			Wscript 	= Новый COMobject("Wscript.Shell");
			ПутьКФайлу 	= "C:\" + Wscript.ExpandEnvironmentStrings("%HomePath%") + "\Desktop\ТехническаяИнформацияДиадок.txt";
			ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
			
			ТекстСообщения = НСтр("ru = 'Техническая информация сохранена на Рабочий Стол в файл ТехническаяИнформацияДиадок.txt
	                              |Отправьте этот файл специалисту технической поддержки.'");
			
			ПоказатьПредупреждение(, ТекстСообщения, 120, "Диадок");
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось сохранить файл с технической информацией!
	                              |Описание ошибки:
	                              |%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецПроцедуры //СохранитьТехИнформацию()

	&НаКлиенте
	Процедура ИмяМодуляИнтеграцииНажатие(Элемент, СтандартнаяОбработка)
		
		СтандартнаяОбработка = Ложь;
		
		ВыборМодуляИнтеграции();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура НадписьОнлайнКонсультантНажатие(Элемент)
		
		ОбработатьНажатие_ОткрытьОнлайнЧат();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура КартинкаОнлайнКонсультантНажатие(Элемент)
		
		ОбработатьНажатие_ОткрытьОнлайнЧат();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура НадписьНаписатьПисьмоНажатие(Элемент)
		
		ОбработатьНажатие_ОтправитьEmail();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура КартинкаEmailНажатие(Элемент)
		
		ОбработатьНажатие_ОтправитьEmail();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура НадписьУдаленноеПодключениеVNCНажатие(Элемент)
		
		ОбработатьНажатие_УдаленноеПодключениеVNC();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура КартинкаУдаленноеПодключениеVNCНажатие(Элемент)
		
		ОбработатьНажатие_УдаленноеПодключениеVNC();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура НадписьПровестиДиагностикуНажатие(Элемент)
		
		ОбработатьНажатие_ПровестиДиагностику();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура КартинкаПровестиДиагностикуНажатие(Элемент)
		
		ОбработатьНажатие_ПровестиДиагностику();
		
	КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

	// Заполняет реквизиты формы данными о технической информации
	// см. метод "ТехническаяИнформация" в модуле "Модуль_Клиент" 
	&НаКлиенте
	Процедура ЗаполнитьРеквизитыФормыТехническойИнформацией()

		ТехническаяИнформация = МетодКлиента("Модуль_Клиент", "ТехническаяИнформация");
				
		ВидКлиента 			= ТехническаяИнформация.ТипКлиента;
		ТипПлатформы 		= Строка(ТехническаяИнформация.ТипПлатформы);
		МодульТиповой 		= ТехническаяИнформация.МодульТиповой;
		ВерсияОбработки 	= ТехническаяИнформация.ВерсияМодуля;
		ВерсияПлатформы 	= ТехническаяИнформация.ВерсияПлатформы;
		ВерсияКомпоненты	= ТехническаяИнформация.ВерсияКомпоненты;
		СтрокаСоединения 	= ТехническаяИнформация.СтрокаСоединенияИБ;
		ПодключаемыйМодуль 	= ?(Объект.ПараметрыКлиентСервер.ПодключаемыйМодуль.ИспользоватьМодуль, "Используется", "Не используется");
		ИмяМодуляИнтеграции = Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции;
		
		ИнформацияОКонфигурации 	= ТехническаяИнформация.ОписаниеКонфигурации; 
		ВерсияОперационнойСистемы 	= ТехническаяИнформация.ВерсияОС;

	КонецПроцедуры // ЗаполнитьРеквизитыФормыТехническойИнформацией()

	&НаКлиенте
	Процедура ОбработатьНажатие_ПровестиДиагностику()
		
		МетодКлиента("Модуль_Клиент", "ПровестиКонтурДиагностику");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_УдаленноеПодключениеVNC()
		
		МетодКлиента("Модуль_Клиент", "ЗапуститьУдаленноеПодключениеVNC");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_ОтправитьEmail() Экспорт
		
		ОбработкаВыбораОрганизации = Новый ОписаниеОповещения("ОтправитьEmailПродолжение", ЭтотОбъект);
		
		ВыбратьОрганизациюДляОбращения(ОбработкаВыбораОрганизации);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОтправитьEmailПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт 
		
		Если ВыбранныйЭлемент = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Организация = ВыбранныйЭлемент.Значение;
				
		МетодКлиента("Модуль_Клиент", "НаписатьПисьмоВТехПоддержку", Организация);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьНажатие_ОткрытьОнлайнЧат() Экспорт
		
		ОбработкаВыбораОрганизации = Новый ОписаниеОповещения("ОткрытьОнлайнЧатПродолжение", ЭтотОбъект);
		ВыбратьОрганизациюДляОбращения(ОбработкаВыбораОрганизации);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОткрытьОнлайнЧатПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры = Неопределено) Экспорт
		
		Если ВыбранныйЭлемент = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Организация = ВыбранныйЭлемент.Значение;
			
		МетодКлиента("Модуль_Клиент", "ОткрытьОнлайнЧат", Организация);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ВыбратьОрганизациюДляОбращения(ОписаниеОповещения)
		
		ДоступныеОрганизации 		= МетодКлиента("Модуль_Клиент", "ПолучитьОрганизацииНезаблокированныеПоAPI");
		ЗаголовокВыбораОрганизации 	= НСтр("ru = 'Выберите организацию, от которой идет обращение'");
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(ДоступныеОрганизации);
		СписокВыбора.СортироватьПоПредставлению();
		
		Если СписокВыбора.Количество() = 0 Тогда 
			
			ТекстСообщения = НСтр("ru = 'Список организаций пуст!'");
			ПоказатьПредупреждение(, ТекстСообщения, 60);
			
		ИначеЕсли СписокВыбора.Количество() = 1 Тогда 
			
			ВыбранныйЭлемент = СписокВыбора[0];
			
			Если ВРег(ОписаниеОповещения.ИмяПроцедуры) = ВРег("ОтправитьEmailПродолжение") Тогда 
				ОтправитьEmailПродолжение(ВыбранныйЭлемент);
			ИначеЕсли ВРег(ОписаниеОповещения.ИмяПроцедуры) = ВРег("ОткрытьОнлайнЧатПродолжение") Тогда 
				ОткрытьОнлайнЧатПродолжение(ВыбранныйЭлемент);
			КонецЕсли;
			
		Иначе 
			
			НачальныйЭлемент = СписокВыбора.НайтиПоЗначению(Организация);
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, ЗаголовокВыбораОрганизации, НачальныйЭлемент);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ВыборМодуляИнтеграции()
		
		ДопустимыеМаркерыКонфигураций = МетодСервераБезКонтекста(,"ДопустимыеМаркерыКонфигураций");
		
		ДопустимыеМаркерыКонфигурацийТекущийЭлемент= ДопустимыеМаркерыКонфигураций.НайтиПоЗначению(Объект.ПараметрыКлиентСервер.МаркерКонфигурации);
		
		ДопустимыеМаркерыКонфигураций.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыборМодуляИнтеграции_ОбработкаВыбораМаркераКонфигурации", ЭтаФорма) , Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы + ": Выбор базовой конфигурации", ДопустимыеМаркерыКонфигурацийТекущийЭлемент);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ВыборМодуляИнтеграции_ОбработкаВыбораМаркераКонфигурации(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
		
		Если ВыбранныйЭлемент = Неопределено ИЛИ ВыбранныйЭлемент.Значение = Объект.ПараметрыКлиентСервер.МаркерКонфигурации Тогда
			Возврат;
		КонецЕсли;
		
		СохранитьНастройки("МаркерКонфигурации", ВыбранныйЭлемент.Значение);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации <> МетодСервераБезКонтекста(,"ПолучитьМаркерКонфигурации") Тогда
			
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ПерезапускМодуля", ЭтаФорма),
			"Необходима повторная инициализация!
			| Модуль закрыт и открыт повторно.",,Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемы);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПерезапускМодуля(ДополнительныеПараметры) Экспорт
		
		ВладелецФормыИмяФормы = ВладелецФормы.ИмяФормы;
		
		ВладелецФормы.Закрыть();
		
		ОткрытьФорму(ВладелецФормыИмяФормы);
		
	КонецПроцедуры

	&НаСервереБезКонтекста
	Процедура СохранитьНастройки(КлючНастроек, Настройки)
		
		ХранилищеОбщихНастроек.Сохранить("МодульДиадок", КлючНастроек, Настройки, , ""); // Сохраняем для "пустого" пользователя, чтобы избежать разночтений.
		
	КонецПроцедуры


#КонецОбласти
