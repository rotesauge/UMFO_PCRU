////////////////////////////////////////////////////////////////////////////////
//{ ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем UserPermissions;
&НаКлиенте
Перем Organization Экспорт; 

&НаКлиенте
Перем МассивСсылокРНК Экспорт;
&НаКлиенте
Перем ПодходящаяСФ;

&НаКлиенте
Перем ЭДОбъект Экспорт; 

&НаКлиенте
Перем ПредставлениеСтатусаРоуминг, ПредставлениеСтатусаРоумингДетали;

//} ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
	Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
	Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
	Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
	Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
	Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
	Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
			
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
	
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция СуществуетСвязьСДокументомУчета()
	
	Результат = ЗначениеЗаполнено(Документ1С);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИспользоватьНовуюМеханикуОтраженияВУчете()
	
	Если ЭДОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БазовыеФорматы = БазовыеФорматы();
	
	ВерсияФормата = ЭДОбъект.Version;
	БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ВерсияФормата);
	
	Результат = Ложь;
	
	Если БазовыйФормат = БазовыеФорматы.utd820
		Или БазовыйФормат = БазовыеФорматы.ucd
		Или БазовыйФормат = БазовыеФорматы.invoicecor Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭтоВходящийДокумент()
	
	Результат = Ложь;
	
	Если ЭДОбъект <> Неопределено
		И ЭДОбъект.Direction = "Inbound" Тогда 
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция БазовыеФорматы()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыКонтента()
	
	Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Организация	 = МетодСервера(,"BoxID_2_Организация", Параметры.BoxID, Параметры.DepartmentKpp);
	Контрагент	 = МетодСервера(,"CounteragentBoxID_2_Контрагент", Параметры.CounteragentBoxID);
	ТочкаВызова	 = Параметры.ТочкаВызова;
	BoxID		 = Параметры.BoxID;
	
	Параметры.Свойство("DepartmentId", DepartmentId);
	
	ПрочитатьПараметрыТекущегоДокумента();
	
	ЭтаФорма.Команды.ПерейтиВДиадок.Подсказка = "Перейти в " + МетодСервера(,"ПолучитьСловарь").НаименованиеСистемы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПлатформаПриОткрытии(Отказ);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = МетодКлиента("Модуль_Клиент", "НайтиОрганизациюВИерархииОрганизацийDiadoc", BoxID, DepartmentId);
	КонецЕсли;
	
	Organization = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(BoxID);
	
	ПросмотрФормы();
	
	
	Попытка
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
		Если ЭДОбъект.HasCustomPrintForm = Ложь Тогда
			ЭДОбъект.SaveSenderContent(ИмяВременногоФайла);
		Иначе
			ЭДОбъект.GetPrintForm(ИмяВременногоФайла, 30);
		КонецЕсли;
		ЭтаФорма.PCRU_ДвоичныеДанныеДокумента = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));
		ЭтаФорма.PCRU_РасширениеФайла = Прав(ЭДОбъект.FileName,3);
		ЭтаФорма.PCRU_ИмяФайла = ЭДОбъект.FileName;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры

//} СОБЫТИЯ ФОРМЫ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СообщениеОбОшибкеДиадок(текстОшибки) экспорт 
	
	ПоказатьПредупреждение(, МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ТекстОшибки), 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
	
конецПроцедуры	

&НаКлиенте
Процедура ОбновитьЭДОбъект()
	
	ЭДОбъект=	ЭДОбъект.Organization.GetDocumentById(ЭДОбъект.DocumentId);
	ПросмотрФормы();
	ОбновитьСтатусЭД();
	
	ПараметрыОповещения=	Новый Структура;
	ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
	ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
	
	МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокумент1С()
	
	ОграничитьРезультатСчетФактурой = ЭДОбъект.Type = "Invoice"
	ИЛИ	МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП" , ЭДОбъект)
	ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФ"	  , ЭДОбъект)
	ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФДИС", ЭДОбъект)
	ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФ"	  , ЭДОбъект);
	
	Документ1С = ПолучитьDocumentID_2_Документ(ЭДОбъект.DocumentID, ЭДОбъект.OrganizationID, ОграничитьРезультатСчетФактурой);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьDocumentID_2_Документ(DocumentID, BoxID, ОграничитьРезультатСчетФактурой)
	
	Возврат МетодСервера(,"DocumentID_2_Документ", DocumentID, BoxID, ОграничитьРезультатСчетФактурой);
	
КонецФункции

&НаСервере
Процедура Установить_DocumentID_Для_Документ(Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета = Ложь, ОчиститьИД_Документов1СсОдинаковымDocumentID)
	
	МетодСервера(,"Установить_DocumentID_Для_Документ", Документ, DocumentID, BoxID, ИспользоватьИдентификаторСчета, ОчиститьИД_Документов1СсОдинаковымDocumentID);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьCustomDocumentId(Документ, ИспользоватьИдентификаторСчета = Ложь)
	
	МетодСервера(,"ОчиститьCustomDocumentId", Документ, ИспользоватьИдентификаторСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Режим) Экспорт
	
	Если Режим = "Ввод" Тогда
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
		ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
		ПараметрыФормы.Вставить("Direction", 			ЭДОбъект.Direction);
		ПараметрыФормы.Вставить("Type",					ЭДОбъект.type);
		ПараметрыФормы.Вставить("CounteragentBoxID",	ЭДОбъект.Counteragent.ID);
		
		ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
		ПараметрыФормы.Вставить("Организация", 			Организация);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаНакладной", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаНакладной");
		
	ИначеЕсли Режим = "Сопоставление" Тогда
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
		ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
		ПараметрыФормы.Вставить("Type", 				ЭДОбъект.Type);
		ПараметрыФормы.Вставить("CounteragentBoxID", 	ЭДОбъект.Counteragent.ID);
		ПараметрыФормы.Вставить("DocumentDate", 		ЭДОбъект.DocumentDate);
		ПараметрыФормы.Вставить("DocumentNumber", 		ЭДОбъект.DocumentNumber);
		ПараметрыФормы.Вставить("Total",				ЭДОбъект.Total);
		ПараметрыФормы.Вставить("Режим", 				Режим);
		ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
		ПараметрыФормы.Вставить("Организация", 			Организация);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокумента");
		
	ИначеЕсли Режим = "ВводСВыборомОснований" Тогда
		
		ПараметрыФормы=	Новый Структура;
		ПараметрыФормы.Вставить("BoxID", 				ЭДОбъект.OrganizationID);
		ПараметрыФормы.Вставить("DocumentID", 			ЭДОбъект.DocumentID);
		ПараметрыФормы.Вставить("Type", 				ЭДОбъект.Type);
		ПараметрыФормы.Вставить("CounteragentBoxID",	ЭДОбъект.Counteragent.ID);
		ПараметрыФормы.Вставить("DocumentDate", 		ЭДОбъект.DocumentDate);
		ПараметрыФормы.Вставить("DocumentNumber", 		ЭДОбъект.DocumentNumber);
		ПараметрыФормы.Вставить("Режим", 				Режим);
		ПараметрыФормы.Вставить("Контрагент", 			Контрагент);
		ПараметрыФормы.Вставить("Организация", 			Организация);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокументаСОснованием");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеПодписи()
	
	ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization.Id);
	
	Результат = Organization.Name;
	
	Если НЕ ПустаяСтрока(ФИОПодписанта) Тогда
		
		Результат = Результат + ", " + ФИОПодписанта;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ УПРАВЛЕНИЕ ФОРМОЙ

&НаСервере
Процедура ПрочитатьПараметрыТекущегоДокумента()
	
	ДокументыПакета = Параметры.МассивДокументовПакета;
	
	Если Не ЗначениеЗаполнено(ДокументыПакета) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокумент = Неопределено;
	Для Каждого Элемент Из ДокументыПакета Цикл
		
		Если Элемент.ЭтоТекущиеДанные Тогда
			ТекущийДокумент = Элемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ТекущийДокумент = ДокументыПакета[0];
	КонецЕсли;
	
	Документ1С = ТекущийДокумент.Документ1С;
	РасширениеФайлаДиадок = ТекущийДокумент.РасширениеФайлаДиадок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДокументВДиадоке(ДокументДиадока)
	
	МетодКлиента("Модуль_Клиент","ПоказатьДокументВДиадоке", ДокументДиадока.OrganizationId, ДокументДиадока.DocumentId);
	
КонецПроцедуры 

&НаКлиенте
Функция ПоказатьКнопкуПерейтиВДиадок()
	
	Возврат НЕ ЭДОбъект = Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуСтруктураПодчиненности()
	
	Возврат НЕ ЭДОбъект = Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуОтправитьСвязанныеДокументы()
	
	Возврат ЭДОбъект <> Неопределено И МетодКлиента("Модуль_Клиент","ЭтоФормализованныйДокумент", ЭДОбъект.Type);
	
КонецФункции

&НаКлиенте
Функция ПоказатьГруппуКнопокПодписания(UserPermissions)
	
	Возврат
	
	ЭДОбъект <> Неопределено
	И UserPermissions.CanSignDocuments
	И ЭДОбъект.RevocationStatus = "RevocationStatusNone"
	И (ЭДОбъект.Status = "InboundWaitingForRecipientSignature" ИЛИ ЭДОбъект.Status = "InboundInvalidRecipientSignature")
	И (ЭДОбъект.Organization.AuthenticateType = "Certificate" ИЛИ ЭДОбъект.IsTest)
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуОтменитьСопоставление()
	
	Возврат
	
	ЭДОбъект <> Неопределено
	И ЗначениеЗаполнено(Документ1С)
	И (ЭДОбъект.Direction = "Inbound"
	ИЛИ ЭДОбъект.Direction = "Outbound")
	И МетодКлиента("Модуль_Клиент","ЭтоФормализованныйДокумент", ЭДОбъект.Type);
	
КонецФункции

&НаКлиенте
Функция ПоказатьГруппуКнопокСогласования(UserPermissions, MyUser)
	
	Если ЭДОбъект <> Неопределено
		И UserPermissions.CanAddResolutions // Пользователь имеет право согласовывать документы
		Тогда
		
		Если ЭДОбъект.ResolutionStatus = Неопределено
			Или ЭДОбъект.ResolutionStatus.Type = "None" Тогда
			
			//Такой кейс возможен в двух случаях:
			//1. По документу еще не запрашивали согласование
			//2. Документ был согласован, далее подписан и отправлен. После этого ResolutionStatus возвращается Неопределено, как будто бы и не согласовывался. 
			
			Возврат МетодКлиента("Модуль_Клиент", "ДокументНеСогласованРанее", ЭДОбъект);
			
		ИначеЕсли 	ЭДОбъект.ResolutionStatus.Type = "ApprovementRequested" 	  		// Документ в состоянии согласования
			И (ЭДОбъект.ResolutionStatus.TargetUser = Неопределено    	  		// Согласовать может любой пользователь
			ИЛИ ЭДОбъект.ResolutionStatus.TargetUser.Id = MyUser.Id) Тогда	// Согласовать может текущий пользователь
			
			Возврат Истина;
		Иначе
			Возврат Ложь;			
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуПередачиНаСогласование(UserPermissions)
	
	Если ТочкаВызова = "ТаблицаДокументовИсходящих" Тогда
		
		ПоказатьКнопку = Ложь;
		
	ИначеЕсли ТочкаВызова = "ПереотправкаДокумента" Тогда 
		
		ПоказатьКнопку = UserPermissions.CanRequestResolutions;
		
	ИначеЕсли ТочкаВызова = "ТаблицаДокументовВнутренних"
		ИЛИ ТочкаВызова = "ТаблицаДокументовВходящих" Тогда 
		
		Если ЭДОбъект = Неопределено Тогда
			ПоказатьКнопку = Ложь;
		Иначе
			
			ЕстьПрава = UserPermissions.CanRequestResolutions;
			
			СтатусСогласованияПодходит = 	ЭДОбъект.ResolutionStatus = Неопределено
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "None"
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "Approved"
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "Disapproved"
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "SignatureDenied";
			
			ПоказатьКнопку = ЕстьПрава И СтатусСогласованияПодходит;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ЭДОбъект = Неопределено
		И UserPermissions.CanRequestResolutions 		// могу запросить согласование или подписание
		И (		ЭДОбъект.ResolutionStatus = Неопределено 
		ИЛИ ЭДОбъект.ResolutionStatus.Type = "None"	) Тогда
		
		ПоказатьКнопку = Истина;
		
	Иначе
		
		ПоказатьКнопку = Ложь;
		
	КонецЕсли; 
	
	Возврат ПоказатьКнопку;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуПередачиНаПодпись(UserPermissions)
	
	Если ТочкаВызова = "ТаблицаДокументовИсходящих" Тогда
		
		ПоказатьКнопку = Ложь;
		
	ИначеЕсли ТочкаВызова = "ПереотправкаДокумента" Тогда 
		
		ПоказатьКнопку = UserPermissions.CanRequestResolutions;
		
	ИначеЕсли ТочкаВызова = "ТаблицаДокументовВнутренних"
		Или ТочкаВызова = "ТаблицаДокументовВходящих" Тогда
		
		Если ЭДОбъект = Неопределено Тогда
			ПоказатьКнопку = Ложь;
		Иначе
			
			ЕстьПрава = UserPermissions.CanRequestResolutions;
			
			СтатусСогласованияПодходит = 	ЭДОбъект.ResolutionStatus = Неопределено
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "None"
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "Approved"
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "Disapproved"
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "SignatureDenied";
			
			СтатусПодходит = 	ЭДОбъект.Status = "OutboundWaitingForSenderSignature"
			ИЛИ ЭДОбъект.Status = "InboundWaitingForRecipientSignature";;
			
			ТипПодходит = 	ЭДОбъект.Type = "XmlTorg12" 
			ИЛИ ЭДОбъект.Type = "XmlAcceptanceCertificate"
			ИЛИ ЭДОбъект.Type = "NonformalizedProforma"
			ИЛИ ЭДОбъект.Type = "Nonformalized"
			ИЛИ ЭДОбъект.Type = "ServiceDetails"
			ИЛИ ЭДОбъект.Type = "PriceListAgreement"
			ИЛИ ЭДОбъект.Type = "ReconciliationAct"
			ИЛИ ЭДОбъект.Type = "CertificateRegistry"
			ИЛИ ЭДОбъект.Type = "PriceList"
			ИЛИ ЭДОбъект.Type = "NonformalizedAcceptanceCertificate"
			ИЛИ ЭДОбъект.Type = "Contract";
			
			ПоказатьКнопку =  ЕстьПрава
			И СтатусСогласованияПодходит
			И СтатусПодходит
			И ТипПодходит;
			
		КонецЕсли;				
		
	Иначе 
		
		Если ЭДОбъект = Неопределено Тогда
			ПоказатьКнопку = Ложь;
		Иначе
			
			ЕстьПрава = UserPermissions.CanRequestResolutions;
			
			ДокументНеСогласовывался = 	ЭДОбъект.ResolutionStatus = Неопределено
			ИЛИ ЭДОбъект.ResolutionStatus.Type = "None";
			
			СтатусПодходит = ЭДОбъект.Status = "InboundWaitingForRecipientSignature";
			
			ТипПодходит = 	ЭДОбъект.Type = "XmlTorg12" 
			ИЛИ ЭДОбъект.Type = "XmlAcceptanceCertificate"
			ИЛИ ЭДОбъект.Type = "NonformalizedProforma"
			ИЛИ ЭДОбъект.Type = "Nonformalized"
			ИЛИ ЭДОбъект.Type = "ServiceDetails"
			ИЛИ ЭДОбъект.Type = "PriceListAgreement"
			ИЛИ ЭДОбъект.Type = "ReconciliationAct"
			ИЛИ ЭДОбъект.Type = "CertificateRegistry"
			ИЛИ ЭДОбъект.Type = "PriceList"
			ИЛИ ЭДОбъект.Type = "NonformalizedAcceptanceCertificate"
			ИЛИ ЭДОбъект.Type = "Contract";
			
			ПоказатьКнопку =  ЕстьПрава
			И ДокументНеСогласовывался
			И СтатусПодходит
			И ТипПодходит;
			
		КонецЕсли;				
		
	КонецЕсли;
	
	Возврат ПоказатьКнопку;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуУдалить(UserPermissions)
	
	Если НЕ ЭДОбъект = Неопределено
		И НЕ ЭДОбъект.IsDeleted 
		И (UserPermissions.CanSignDocuments) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуСоздатьДокумент1С()
	
	Результат = Ложь;
	
	Если Не ИспользоватьНовуюМеханикуОтраженияВУчете()
		И ЭтоВходящийДокумент()
		И Не СуществуетСвязьСДокументомУчета()
		И МетодКлиента("Модуль_Клиент","ЭтоФормализованныйДокумент", ЭДОбъект.Type) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуОтразитьДокументВУчете()
	
	Результат = Ложь;
	
	Если ИспользоватьНовуюМеханикуОтраженияВУчете()
		И ЭтоВходящийДокумент()
		И Не СуществуетСвязьСДокументомУчета()
		И МетодКлиента("Модуль_Клиент","ЭтоФормализованныйДокумент", ЭДОбъект.Type) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуЗапросаАннулирования(UserPermissions)
	
	DocumentStatus			 = ?(ЭДОбъект <> Неопределено, ЭДОбъект.Status			, "");
	DocumentRevocationStatus = ?(ЭДОбъект <> Неопределено, ЭДОбъект.RevocationStatus, "");
	
	Возврат
	
	ЭДОбъект <> Неопределено
	
	И UserPermissions.CanSignDocuments
	И ЭДОбъект.SenderSignatureStatus = "SenderSignatureCheckedAndValid" // Подпись отправителя проверена и валидна
	И ЭДОбъект.Organization.AuthenticateType = "Certificate"
	
	И (		DocumentRevocationStatus = "RevocationStatusNone"           // Документ не аннулирован и не было предложений об аннулировании
	ИЛИ DocumentRevocationStatus = "RevocationRejected")            // В предложении об аннулировании отказано
	
	И (		DocumentStatus = "InboundWithRecipientSignature" 
	ИЛИ DocumentStatus = "InboundRecipientSignatureRequestRejected"
	ИЛИ DocumentStatus = "OutboundWithRecipientSignature" 
	ИЛИ DocumentStatus = "OutboundRecipientSignatureRequestRejected"
	ИЛИ DocumentStatus = "OutboundWaitingForRecipientSignature"
	ИЛИ DocumentStatus = "InboundFinished"
	ИЛИ DocumentStatus = "OutboundFinished"
	ИЛИ DocumentStatus = "Outbound"
	ИЛИ DocumentStatus = "Inbound"
	ИЛИ DocumentStatus = "OutboundWaitingForInvoiceReceipt"
	ИЛИ DocumentStatus = "OutboundWaitingForReceipt")
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуАннулирования(UserPermissions)
	
	Если НЕ ЭДОбъект = Неопределено Тогда
		Если UserPermissions.CanSignDocuments И ЭДОбъект.Organization.AuthenticateType = "Certificate" Тогда
			Если ЭДОбъект.RevocationStatus = "RequestsMyRevocation" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуОтказаАннулирования(UserPermissions)
	
	Если НЕ ЭДОбъект = Неопределено Тогда
		Если UserPermissions.CanSignDocuments И ЭДОбъект.Organization.AuthenticateType = "Certificate" Тогда
			Если ЭДОбъект.RevocationStatus = "RequestsMyRevocation" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуЗапросаУточнения(ЭДОбъект, UserPermissions)
	
	Возврат
	
	ЭДОбъект <> Неопределено
	И ЛЕВ(ЭДОбъект.Type, 7) = "Invoice"
	И ЭДОбъект.Direction = "Inbound"
	И ЭДОбъект.Status = "InboundFinished"
	И НЕ ЭДОбъект.Corrected 
	И НЕ ЭДОбъект.Revised 
	И НЕ ЭДОбъект.AmendmentRequested
	И ЭДОбъект.Organization.AuthenticateType = "Certificate";
	
КонецФункции

&НаКлиенте
Функция ПоказатьКнопкуПодписатьЗапрошенный(Document, UserPermissions)
	
	Результат = Ложь;
	
	Если Истина
		И ТочкаВызова = "ТаблицаДокументовВнутренних"
		И UserPermissions.CanSignDocuments // есть право подписи документов
		И Document <> Неопределено
		И Document.Status = "OutboundWaitingForSenderSignature" // Документ ожидает подписания перед отправкой (не отправлен и не подписан)
		Тогда
		
		// основные условия выполнены, проверим, доступно ли подписание в текущем статусе согласования
		СтатусСогласования = Document.ResolutionStatus;
		
		Если СтатусСогласования = Неопределено Тогда 
			
			// согласование не требуется
			Результат = Истина;
			
		ИначеЕсли СтатусСогласования.type = "Approved" Тогда 
			
			// документ уже согласован
			Результат = Истина;
			
		ИначеЕсли СтатусСогласования.type = "SignatureRequested" Тогда
			
			// Документ отправлен на подпись - проверяем, может ли его подписать текущий пользователь
			Результат = СтатусСогласования.TargetUser = Неопределено 		// направлен на подпись любому пользователю подразделения
			Или СтатусСогласования.TargetUser.IsCurrentUser; 	// направлен на подпись текущему пользователю
			
		Иначе 
			
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Процедура НастроитьКнопкиКоманднойПанели()
	
	Если НЕ ЭДОбъект = Неопределено Тогда
		UserPermissions = ЭДОбъект.Organization.GetUserPermissions();
	КонецЕсли;
	
	MyUser = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetMyUser();
	
	МассивНастройкиВидимости = Новый Массив;
	
	Если ПоказатьКнопкуПерейтиВДиадок() Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПерейтиВДиадок", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПерейтиВДиадок", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуСтруктураПодчиненности() Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ФормаСтруктураПодчиненности", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ФормаСтруктураПодчиненности", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуОтправитьСвязанныеДокументы() Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтправитьСвязанныйДокумент", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтправитьСвязанныйДокумент", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьГруппуКнопокПодписания(UserPermissions) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопокПодписания", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаКнопокПодписания", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуОтменитьСопоставление() Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтменитьСопоставление", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтменитьСопоставление", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьГруппуКнопокСогласования(UserPermissions, MyUser) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаСогласование", Ложь, Ложь);
	КонецЕсли;
	
	НужноПоказатьКнопкуПередачиНаСогласование= 	ПоказатьКнопкуПередачиНаСогласование(UserPermissions);
	НужноПоказатьКнопкуПередачиНаПодпись= 		ПоказатьКнопкуПередачиНаПодпись(UserPermissions);
	
	Если НужноПоказатьКнопкуПередачиНаСогласование И НужноПоказатьКнопкуПередачиНаПодпись Тогда
		
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Истина, Истина);
		
	ИначеЕсли НужноПоказатьКнопкуПередачиНаСогласование И НЕ НужноПоказатьКнопкуПередачиНаПодпись Тогда
		
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", 	Истина,	Истина);	
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", 	Истина,	Истина);
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", 		Ложь, 	Ложь);
		
	ИначеЕсли НЕ НужноПоказатьКнопкуПередачиНаСогласование И НужноПоказатьКнопкуПередачиНаПодпись Тогда
		
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", 	Истина,	Истина);	
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", 	Ложь,	Ложь);
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", 		Истина, Истина);
		
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "ГруппаПередачаНаСогласование", Ложь, Ложь);
	КонецЕсли;
	
	Если НужноПоказатьКнопкуПередачиНаСогласование Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаСогласование", Ложь, Ложь);
	КонецЕсли;
	
	Если НужноПоказатьКнопкуПередачиНаПодпись Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПередатьНаПодписание", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуУдалить(UserPermissions) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаУдалить", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаУдалить", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуСоздатьДокумент1С() Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСоздатьДокумент1С", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаСоздатьДокумент1С", Ложь, Ложь);
	КонецЕсли;
	
	ФлагВидимости = ПоказатьКнопкуОтразитьДокументВУчете() или (Прав(ЭДОбъект.FileName,3) = "pdf" );
	
	//+asevryugin@PCRU.LOCAL, 2020-09-15 11:01:51
	Если Прав(ЭДОбъект.FileName,3) = "pdf" и не ЗначениеЗаполнено(ЭтотОбъект.Документ1С) тогда
		Элементы.PCRU_ОтразитьДокументВУчете.Видимость = Истина;
	Иначе
		Элементы.PCRU_ОтразитьДокументВУчете.Видимость = Ложь;
	КонецЕсли; 
	//+/asevryugin@PCRU.LOCAL, 2020-09-15 11:01:51
	
	
	
	ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтразитьДокументВУчете", ФлагВидимости, ФлагВидимости);
	
	Если ПоказатьКнопкуЗапросаАннулирования(UserPermissions) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьАннулирование", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьАннулирование", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуАннулирования(UserPermissions) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаАннулировать", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаАннулировать", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуОтказаАннулирования(UserPermissions) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтказатьВАннулировании", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаОтказатьВАннулировании", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуЗапросаУточнения(ЭДОбъект, UserPermissions) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьУточнение", Истина, Истина);
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаЗапроситьУточнение", Ложь, Ложь);
	КонецЕсли;
	
	Если ПоказатьКнопкуПодписатьЗапрошенный(ЭДОбъект, UserPermissions) Тогда
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьЗапрошенный", Истина, Истина);	
	Иначе
		ДобавитьНастройкуВидимости(МассивНастройкиВидимости, "КнопкаПодписатьЗапрошенный", Ложь, Ложь);	
	КонецЕсли;
	
	НастроитьВидимостьЭлементовФормыНаСервере(МассивНастройкиВидимости);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкуВидимости(МассивНастройкиВидимости, ИмяРеквизита, Видимость, Доступность)
	
	НастройкаВидимости = Новый Структура("ИмяРеквизита, Видимость, Доступность", ИмяРеквизита, Видимость, Доступность);
	МассивНастройкиВидимости.Добавить(НастройкаВидимости);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовФормыНаСервере(МассивНастройкиВидимости)
	
	Для каждого НастройкаВидимости из МассивНастройкиВидимости Цикл
		
		ИмяРеквизита 		= НастройкаВидимости.ИмяРеквизита;
		НастройкаВидимость 	= НастройкаВидимости.Видимость;
		НастройкаДоступность= НастройкаВидимости.Доступность;
		
		Элементы[ИмяРеквизита].Видимость 	= НастройкаВидимость;
		Элементы[ИмяРеквизита].Доступность 	= НастройкаДоступность;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЭлементыФормы()
	
	Если ЭДОбъект <> Неопределено Тогда
		
		Если ЭДОбъект.Direction = "Inbound" Тогда
			
			МассивСсылокРНК	= МетодКлиента("Модуль_Клиент", "ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадок", ЭДОбъект);
			ПодходящаяСФ	= МетодКлиента("Модуль_Клиент", "ПолучитьПодходящуюСФ", МассивСсылокРНК);
			
			ПредставлениеКнопкиСоздать = МетодКлиента(	"Модуль_Клиент",
			"СформироватьПредставлениеКнопкиСоздатьДокументВ1С",
			Документ1С,
			ЭДОбъект,
			МассивСсылокРНК,
			ПодходящаяСФ	);
			
			Если ЗначениеЗаполнено(ПредставлениеКнопкиСоздать) Тогда
				Элементы.КнопкаСоздатьДокумент1С.Заголовок = ПредставлениеКнопкиСоздать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type) Тогда
			Элементы.Сумма.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ДекорацияПодробно.Видимость = ЭДОбъект.Resolutions.Count > 0;
		
		Если ЗначениеЗаполнено(Документ1С) Тогда
			Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
		Иначе
			Элементы.ДокументВ1С.Заголовок = "";
		КонецЕсли;
		
		Элементы.РамкаСтатуса.Видимость = Истина;
		
		Если ЭДОбъект.Department = Неопределено Тогда
			ПредставлениеПодразделения = "Головное подразделение";
		Иначе
			ПредставлениеПодразделения = ЭДОбъект.Department.Name;
		КонецЕсли;
		
	Иначе
		
		Элементы.РамкаСтатуса.Видимость = Ложь;
		
	КонецЕсли;
	
	ЭтаФорма.Элементы.КнопкаПерейтиВДиадок.Заголовок = "Перейти в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	ОбновитьСтатусЭД();
	НастроитьЗаголовок();
	НастроитьКнопкиКоманднойПанели();
	НастроитьЭлементыФормы();
	
КонецПроцедуры	 

&НаКлиенте
Процедура ОбновитьСтатусЭД()
	
	Если НЕ ЭДОбъект = Неопределено Тогда
		
		ПредставлениеСтатуса=		 МетодКлиента("Модуль_Клиент","ПредставлениеСтатуса"			, ЭДОбъект);
		ПредставлениеСогласования=	 МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаСогласования", ЭДОбъект);
		
		ПредставлениеСтатусаРоуминг= МетодКлиента("Модуль_Клиент","ПредставлениеСтатусаРоуминг"		, ЭДОбъект);
		ПредставлениеСтатусаРоумингДетали= ?(ЭДОбъект.RoamingNotificationStatus = "RoamingNotificationStatusError", ЭДОбъект.RoamingNotificationStatusDescription, "");
		
		СводныйСтатус= Новый Массив;
		Разделитель= "";
		
		Если НЕ ПустаяСтрока(ПредставлениеСтатуса) Тогда
			СводныйСтатус.Добавить(Разделитель);
			СводныйСтатус.Добавить(ПредставлениеСтатуса);
			Разделитель= " ";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПредставлениеСогласования) Тогда
			СводныйСтатус.Добавить(Разделитель);
			СводныйСтатус.Добавить(ПредставлениеСогласования);
			Разделитель= ". ";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПредставлениеСтатусаРоуминг) Тогда
			СводныйСтатус.Добавить(Разделитель);
			СводныйСтатус.Добавить(ПредставлениеСтатусаРоуминг);
			Разделитель= ". ";
		КонецЕсли;
		
		Элементы.СтатусДокумента.Заголовок=	Новый ФорматированнаяСтрока(СводныйСтатус); 
		
	Иначе
		
		Элементы.СтатусДокумента.Заголовок=	""; 
		
		ПредставлениеСтатусаРоуминг= 		"";
		ПредставлениеСтатусаРоумингДетали=  "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаголовок()
	
	Заголовок=	МетодКлиента("Модуль_Клиент","ПредставлениеЭД", ЭДОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрФормы()
	
	СтруктураПредставленияЭД = МетодКлиента("Модуль_Клиент", "ПолучитьСтруктуруПредставленияЭД", ЭДОбъект);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПредставленияЭД);
	
	Если Дата < '20000101' Тогда 
		Дата = "";
	КонецЕсли;
	
	ПоказыватьПредупрежденияОСтаромФормате = Ложь;
	Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice" Тогда
		
		БазовыеФорматы	= БазовыеФорматы();
		БазовыйФормат	= МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭДОбъект.Version);
		
		Если Не ЗначениеЗаполнено(БазовыйФормат)
			Или БазовыйФормат = БазовыеФорматы.invoice
			Или БазовыйФормат = БазовыеФорматы.invoicecor Тогда
			
			ПротоКонтент = МетодКлиента("Модуль_Клиент", "ПротоКонтентДокумента", ЭДОбъект);
			
			ПоказыватьПредупрежденияОСтаромФормате = МетодКлиента(	"Модуль_ЛогикаПоведениеФорм",
			"ПредупреждатьОСтаромФормате",
			ЭДОбъект.ConfirmationDate,
			ПротоКонтент.InvoiceVersion	);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПредупреждениеОНовомФормате.Видимость = ПоказыватьПредупрежденияОСтаромФормате;
	
	Элементы.FileName.Заголовок 			= ЭДОбъект.FileName;
	Элементы.AttachmentComment.Заголовок 	= ЭДОбъект.GetAnyComment("AttachmentComment");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура FileNameНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЭДОбъект.HasCustomPrintForm = Ложь Тогда
		ИмяВременногоФайла=	ПолучитьИмяВременногоФайла(РасширениеФайлаДиадок);
		ЭДОбъект.SaveSenderContent(ИмяВременногоФайла);
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
		ЭДОбъект.GetPrintForm(ИмяВременногоФайла, 30);
	КонецЕсли;
	
	ЗапуститьПриложение(ИмяВременногоФайла);
	
КонецПроцедуры

//} УПРАВЛЕНИЕ ФОРМОЙ И ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА СОБЫТИЙ

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда 
		Если НЕ РезультатЗакрытия.DepartmentID = ТекущийDepartmentId Тогда
			
			ЭДОбъект.Move(РезультатЗакрытия.DepartmentID);
			
			ОбновитьЭДОбъект();
			
			ПараметрыОповещения=	Новый Структура;
			ПараметрыОповещения.Вставить("BoxID", 			ЭДОбъект.OrganizationID);
			ПараметрыОповещения.Вставить("DocumentId", 		ЭДОбъект.DocumentID);
			ПараметрыОповещения.Вставить("DepartmentName", 	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Name));
			
			МетодКлиента(,"ОповеститьФормы", "ИзменениеПодразделения", ПараметрыОповещения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВыбораПолучателя(ПараметрыОтправкиНаСогласование, ТекущиеДанные) Экспорт
	
	МетодКлиента("Модуль_Клиент","ОтправитьНаОбработку", ЭДОбъект, ПараметрыОтправкиНаСогласование);
	ОбновитьЭДОбъект();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыПодписанияДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Попытка
			МетодКлиента("Модуль_Клиент", "ПодписатьВДиадоке", ЭДОбъект, РезультатЗакрытия.ОтветныйТитул);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			СообщениеОбОшибкеДиадок(ОписаниеОшибки);
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Элементы.ГруппаКнопокПодписания.Видимость = Ложь;
			ОбновитьЭДОбъект();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОтменитьСопоставление(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодвозвратаДиалога.Да Тогда
		
		ОчиститьИД_Документов1СсОдинаковымDocumentID = ЭДОбъект.Type = "Invoice"
		ИЛИ	МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП" , ЭДОбъект)
		ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФ"	  , ЭДОбъект)
		ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФДИС", ЭДОбъект)
		ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФ"	  , ЭДОбъект);
		
		Установить_DocumentID_Для_Документ(Документ1С,,,, ОчиститьИД_Документов1СсОдинаковымDocumentID);
		ОчиститьCustomDocumentId(Документ1С);
		
		Документ1С=	Неопределено;
		
		ОбновитьДокумент1С();
		ПросмотрФормы();
		
		ПараметрыОповещения=	Новый Структура;
		ПараметрыОповещения.Вставить("ТипСущности", "Документ");
		ПараметрыОповещения.Вставить("BoxID", ЭДОбъект.OrganizationID);
		ПараметрыОповещения.Вставить("DocumentID", ЭДОбъект.DocumentID);
		ПараметрыОповещения.Вставить("Документ1С", Документ1С);
		
		МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыОтветаЗапроситьУточнение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		Попытка
			
			ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type);
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
			
			ЭДОбъект.SendCorrectionRequest(РезультатЗакрытия.Комментарий);
			
			ОбновитьЭДОбъект();
			
		Исключение
			СообщениеОбОшибкеДиадок(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВводаНакладной(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Если РезультатЗакрытия.Свойство("Документ1С") Тогда
			
			ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
			
		ИначеЕсли РезультатЗакрытия.Свойство("Режим") Тогда
			
			СоздатьДокумент(РезультатЗакрытия.Режим);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВыбораДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Если ЗначениеЗаполнено(РезультатЗакрытия.Документ1С) Тогда
			ОбработчикСозданиеДокумента(РезультатЗакрытия.Документ1С);
		Иначе
			СоздатьДокумент(РезультатЗакрытия.Режим);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыВыбораДокументаСОснованием(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		Если РезультатЗакрытия.СписокСсылокРНК.Количество() > 0 Тогда
			МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, РезультатЗакрытия.СписокСсылокРНК.ВыгрузитьЗначения());
		Иначе
			СоздатьДокумент(РезультатЗакрытия.Режим);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикЗакрытиеФормыСФ(РезультатЗакрытия, ДокументОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ОбработчикСозданиеДокумента(ДокументОбъект.Ссылка);
	КонецЕсли;
	
	МассивСсылокРНК=	Новый Массив;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСозданиеДокумента(ДокументССылка) Экспорт
	
	Если ЗначениеЗаполнено(ДокументССылка) Тогда
		МетодКлиента("Модуль_Клиент","ОбработчикСозданиеДокумента", ДокументССылка, ЭДОбъект);
		ОбновитьДокумент1С();
		ПросмотрФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУдалитьДокумент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПараметрУдаляемогоДокумента = Новый Структура();
		ПараметрУдаляемогоДокумента.Вставить("DocumentId", 	ЭДОбъект.DocumentId);
		ПараметрУдаляемогоДокумента.Вставить("BoxID", 		ЭДОбъект.Organization.Id);
		
		МассивДокументов = Новый Массив();
		МассивДокументов.Добавить(ПараметрУдаляемогоДокумента);
		
		Если ЗначениеЗаполнено(Документ1С) Тогда
			
			ОчиститьИД_Документов1СсОдинаковымDocumentID = ЭДОбъект.Type = "Invoice"
			ИЛИ	МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФДОП" , ЭДОбъект)
			ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУПД_ТипаСЧФ"	  , ЭДОбъект)
			ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФДИС", ЭДОбъект)
			ИЛИ МетодКлиента("Модуль_Клиент", "ЭтоУКД_ТипаКСЧФ"	  , ЭДОбъект);
			
			Установить_DocumentID_Для_Документ(Документ1С,,, ЭДОбъект.Type = "NonformalizedProforma", ОчиститьИД_Документов1СсОдинаковымDocumentID);
			ОчиститьCustomDocumentId(Документ1С, ЭДОбъект.Type = "NonformalizedProforma");
			
		КонецЕсли;
		
		Если НЕ ЭДОбъект.IsDeleted Тогда
			
			ПредставлениеЭД = МетодКлиента("Модуль_Клиент", "ПредставлениеЭД", ЭДОбъект);
			
			Попытка
				ЭДОбъект.Delete();
				НаименованиеСистемы = Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
				ПоказатьПредупреждение(, "Документ " + ПредставлениеЭД + " перемещен в удаленные.", 120, НаименованиеСистемы);
			Исключение
				
				Подробно		= ОписаниеОшибки();
				ОписаниеОшибки	= Подробно;
				Если Найти(ОписаниеОшибки, "is already delete") Тогда
					ОписаниеОшибки = "Документ " + ПредставлениеЭД + " уже был удален.";
				Иначе
					ОписаниеОшибки = "Ошибка удаления документа";
				КонецЕсли;
				
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Заголовок"		, "Ошибка удаления");
				ПараметрыФормы.Вставить("ОписаниеОшибки", ОписаниеОшибки);
				ПараметрыФормы.Вставить("Подробности"	, Подробно);
				
				МетодКлиента( , "ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
				
			КонецПопытки;
			
		КонецЕсли;
		
		ПросмотрФормы();
		МетодКлиента( , "ОповеститьФормы", "УдалениеДокументов", МассивДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

//} ОБРАБОТКА СОБЫТИЙ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМАНДЫ

&НаКлиенте
Процедура ПерейтиВДиадок(Команда)
	
	Если НЕ ЭдОбъект = Неопределено Тогда
		ПоказатьДокументВДиадоке(ЭдОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	БазовыеФорматы = БазовыеФорматы();
	БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭдОбъект.Version);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
	
	Если БазовыйФормат = БазовыеФорматы.utd820
		Или БазовыйФормат = БазовыеФорматы.utd
		Или БазовыйФормат = БазовыеФорматы.ucd
		Или БазовыйФормат = БазовыеФорматы.tovtorg
		Или БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		ПараметрыФормы.Вставить("BoxId", Organization.ID);
		ПараметрыФормы.Вставить("AttachmentVersion", БазовыйФормат);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаПодписанияДокументаУПД",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыПодписанияДокумента" );
		
	Иначе
		
		ФИОПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", Organization.Id);
		
		ПараметрыФормы.Вставить("ФИО"				  , ФИОПодписанта);
		
		ПредставлениеПодписи = ПредставлениеПодписи();
		ПараметрыФормы.Вставить("ПредставлениеПодписи", ПредставлениеПодписи);
		
		ПараметрыФормы.Вставить("DocumentType"		  , ЭдОбъект.Type);
		
		Если ЭДОбъект.Department <> Неопределено Тогда
			КПППодразделения = ЭДОбъект.Department.Kpp;
		Иначе
			КПППодразделения = "";
		КонецЕсли;
		
		ПараметрФормыОрганизация = МетодСервераБезКонтекста( , "BoxID_2_Организация", Organization.Id, КПППодразделения);
		ПараметрыФормы.Вставить("Организация"		  , ПараметрФормыОрганизация);
		ПараметрыФормы.Вставить("ИНН"				  , Organization.INN);
		
		МетодКлиента( , "ОткрытьФормуОбработкиМодально",
		"ФормаПодписанияДокумента",
		ПараметрыФормы,
		ЭтаФорма,
		"ОбработчикОткрытиеФормыПодписанияДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВПодписи(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимИспользования"	, 1);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
	
	ПредставлениеПодписи = ПредставлениеПодписи();
	ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
	
	МетодКлиента( , "ОткрытьФормуОбработкиМодально",
	"ФормаОтветаПоДокументу",
	ПараметрыФормы,
	ЭтаФорма,
	"ОбработчикОткрытиеФормыОтветаОтказаВПодписи"	);
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимИспользования"	, 2);
	ПараметрыФормы.Вставить("AuthenticateType"		, Organization.AuthenticateType);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
	
	ПредставлениеПодписи = ПредставлениеПодписи();
	ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
	
	МетодКлиента( , "ОткрытьФормуОбработкиМодально",
	"ФормаОтветаПоДокументу",
	ПараметрыФормы,
	ЭтаФорма,
	"ОбработчикОткрытиеФормыОтветаСогласовать"	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВСогласовании(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимИспользования"	, 3);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
	
	ПредставлениеПодписи = ПредставлениеПодписи();
	ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
	
	МетодКлиента( , "ОткрытьФормуОбработкиМодально",
	"ФормаОтветаПоДокументу",
	ПараметрыФормы,
	ЭтаФорма,
	"ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании"	);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Оповещение=	Новый ОписаниеОповещения("ОбработчикУдалитьДокумент", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Вы действительно хотите удалить документ?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСопоставление(Команда)
	
	Оповещение=	Новый ОписаниеОповещения("ОбработчикОтменитьСопоставление", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Вы действительно хотите отменить сопоставление с документом 1С?", РежимДиалогаВопрос.ДаНет, 120, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	ПараметрыФормы=	Новый Структура("Режим", "СтруктураПодчиненности");
	
	ФормаСвязейДокументов= МетодКлиента(,"ПолучитьФормуОбработки", "ФормаСвязейДокументов", ПараметрыФормы, ЭтаФорма, СокрЛП(ЭДОбъект.DocumentID) + "/" + СокрЛП(ЭДОбъект.OrganizationID));
	ФормаСвязейДокументов.ЭДОбъект=		ЭДОбъект;
	ФормаСвязейДокументов.Organization=	Organization;
	
	ОткрытьФорму(ФормаСвязейДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодробноНажатие(Элемент)
	
	HTMLДокумент	= МетодКлиента("Модуль_Клиент", "СформироватьHTMLПредставлениеРезолюций", ЭДОбъект, Организация);
	ПараметрыФормы	= Новый Структура("HTMLДокумент", HTMLДокумент);
	МетодКлиента(, "ОткрытьФормуОбработкиМодально", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "RoamingNotificationStatusError" Тогда
		
		СтандартнаяОбработка= Ложь;
		
		Если НРег(Лев(ПредставлениеСтатусаРоуминг, 6)) = "ошибка" Тогда
			
			ПараметрыФормы= Новый Структура("Заголовок, ОписаниеОшибки, Подробности",
			ПредставлениеСтатусаРоуминг,
			ПредставлениеСтатусаРоуминг,
			ПредставлениеСтатусаРоумингДетали);
			
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
			
		Иначе
			ОбновитьСтатусЭД();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьНаСогласование(Команда)
	
	МетодКлиента("Модуль_Клиент", "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, Организация, "ApprovementRequest");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьНаПодписание(Команда)
	
	МетодКлиента("Модуль_Клиент", "ВыбратьПараметрыПолучателяПриОтправкеНаСогласование", ЭтаФорма, Организация, "SignatureRequest");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьАннулирование(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимИспользования", 		5);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
	
	ПредставлениеПодписи = ПредставлениеПодписи();
	ПараметрыФормы.Вставить("ПредставлениеПодписи", 	ПредставлениеПодписи);
	
	МетодКлиента( , "ОткрытьФормуОбработкиМодально",
	"ФормаОтветаПоДокументу",
	ПараметрыФормы,
	ЭтаФорма,
	"ОбработчикОткрытиеФормыОтветаЗапросАннулирования");
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьДокумент(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимИспользования"	, 1);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
	
	ПредставлениеПодписи = ПредставлениеПодписи();
	ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
	
	МетодКлиента(, "ОткрытьФормуОбработкиМодально",
	"ФормаОтветаПоДокументуБезКомментария",
	ПараметрыФормы,
	ЭтаФорма,
	"ОбработчикОткрытиеФормыОтветаАннулироватьДокумент");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьВАннулировании(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимИспользования"	, 6);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
	
	ПредставлениеПодписи = ПредставлениеПодписи();
	ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
	
	МетодКлиента( , "ОткрытьФормуОбработкиМодально",
	"ФормаОтветаПоДокументу",
	ПараметрыФормы,
	ЭтаФорма,
	"ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент1С(Команда)
	
	Если ЛЕВ(ЭДОбъект.Type, 7) = "Invoice"  Тогда
		
		Если ЗначениеЗаполнено(ПодходящаяСФ) Тогда
			ОбработчикСозданиеДокумента(ПодходящаяСФ);
		ИначеЕсли МассивСсылокРНК.Количество() > 0 И ЭДОбъект.Type = "Invoice" Тогда
			МетодКлиента("Модуль_ЛогикаПоведениеФорм","СоздатьНовыйСчетФактуру", ЭтаФорма, Контрагент, Организация, ЭДОбъект, МассивСсылокРНК);
		Иначе
			СоздатьДокумент("ВводСВыборомОснований");
		КонецЕсли;
		
	Иначе
		СоздатьДокумент("Ввод");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьУточнение(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("РежимИспользования"	, 7);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", Заголовок);
	
	ПредставлениеПодписи = ПредставлениеПодписи();
	ПараметрыФормы.Вставить("ПредставлениеПодписи"	, ПредставлениеПодписи);
	
	МетодКлиента( , "ОткрытьФормуОбработкиМодально",
	"ФормаОтветаПоДокументу",
	ПараметрыФормы,
	ЭтаФорма,
	"ОбработчикОткрытиеФормыОтветаЗапроситьУточнение");
	
КонецПроцедуры

//} КОМАНДЫ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ИНТЕГРАЦИЯ

&НаКлиенте
Процедура ОбработчикОткрытиеФормыОтветаОтказаВПодписи(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Попытка
			МетодКлиента("Модуль_Клиент", "ОтказатьВПодписи", ЭДОбъект, РезультатЗакрытия.Комментарий);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			СообщениеОбОшибкеДиадок(ОписаниеОшибки);
		Иначе
			Элементы.ГруппаКнопокПодписания.Видимость = Истина;
			ОбновитьЭДОбъект();
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыОтветаСогласовать(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Попытка
			ЭДОбъект.Approve(РезультатЗакрытия.Комментарий);
			Элементы.ГруппаКнопокСогласования.Доступность=	Ложь;
			Элементы.ГруппаКнопокСогласования.Видимость= 	Истина;
			ОбновитьЭДОбъект();
		Исключение
			ТекстОшибкиПодписания=	ОписаниеОшибки();
			Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
				ПоказатьПредупреждение(, "Повторное согласование не возможно", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
				ПоказатьПредупреждение(, "Вы не можете согласовать документ", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыОтветаОтказатьВСогласовании(РезультатЗакрытия, ТекущийDepartmentId) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		Попытка
			ЭДОбъект.DisApprove(РезультатЗакрытия.Комментарий);
			ОбновитьЭДОбъект();
		Исключение
			ТекстОшибкиПодписания=	ОписаниеОшибки();
			Если НЕ Найти(ТекстОшибкиПодписания, "Duplicate resolution") = 0 Тогда
				ПоказатьПредупреждение(, "Повторный отказ в согласовании не возможен", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			ИначеЕсли НЕ Найти(ТекстОшибкиПодписания, "User cannot add resolution") = 0 Тогда
				ПоказатьПредупреждение(, "Вы не можете отказать в согласовании", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				Возврат;
			КонецЕсли;
			СообщениеОбОшибкеДиадок(ТекстОшибкиПодписания);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыОтветаЗапросАннулирования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		Попытка
			
			ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type);
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
			
			ЭДОбъект.SendRevocationRequest(РезультатЗакрытия.Комментарий);
			
			ОбновитьЭДОбъект();
			
		Исключение
			СообщениеОбОшибкеДиадок(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыОтветаАннулироватьДокумент(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		Попытка  
			
			ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type);
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
			
			ЭДОбъект.AcceptRevocationRequest();
			
			ОбновитьЭДОбъект();
			
		Исключение 
			СообщениеОбОшибкеДиадок(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыОтветаОтказатьВАннулировании(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		
		Попытка
			
			ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", ЭДОбъект.Type);
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", ЭДОбъект.OrganizationID, ЭтоФормализованныйДокумент);
			
			ЭДОбъект.RejectRevocationRequest(РезультатЗакрытия.Комментарий);
			
			ОбновитьЭДОбъект();
			
		Исключение
			СообщениеОбОшибкеДиадок(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=	Ложь;
	
	ТекущийDepartmentId=	?(ЭДОбъект.Department = Неопределено, "", ЭДОбъект.Department.Id);
	
	ПараметрыФормы=	Новый Структура();
	ПараметрыФормы.Вставить("DepartmentId", 	ТекущийDepartmentId);
	ПараметрыФормы.Вставить("OrganizationId",	ЭДОбъект.Organization.Id);
	
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ВыборПодразделенияОрганизации", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораПодразделенияОрганизации", ТекущийDepartmentId);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьсвязанныйДокумент(Команда)
	
	Если ЗначениеЗаполнено(Контрагент)=Ложь тогда
		ПоказатьПредупреждение(, "С "+ЭДОбъект.Counteragent.Name+" не сопоставлено ни одной карточки контрагента в 1С", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		возврат
	КонецЕсли;		
	
	ПараметрыФормы=	Новый Структура;
	ПараметрыФормы.Вставить("InitialDocumentID", ЭДОбъект.DocumentID);
	
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ОписаниеКонтрагента", Новый структура("Контрагент, CounteragentName, CounteragentID",  Контрагент, ЭДОбъект.Counteragent.Name, ЭДОбъект.Counteragent.ID));
	
	Форма_Выгрузка = МетодКлиента(,"ОткрытьФормуОбработки", "Форма_Выгрузка", ПараметрыФормы, ЭтаФорма, СокрЛП(ЭДОбъект.DocumentID) + "/" + СокрЛП(ЭДОбъект.OrganizationID));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчете(Команда)
	
	МетодКлиента("Модуль_Клиент", "ОтразитьДокументВУчете", ЭтаФорма, ЭДОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУчетаЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт 
	
	ОбновитьДокумент1С();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация4Нажатие(Элемент)
	
	ТекстИнформацииОНовомФормате = МетодКлиента("Модуль_Клиент", "ТекстИнформацииОНовомФормате", ЭДОбъект.ConfirmationDate);
	ПараметрыФормы = Новый Структура("ЗаголовокФормы, HTMLДокумент", "Уведомление о смене формата", ТекстИнформацииОНовомФормате);
	МетодКлиента(, "ОткрытьФормуОбработки", "ФормаВыводаHTMLДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗапрошенный(Команда)
	
	СтруктураSigner = МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
	
	Если НЕ ЗначениеЗаполнено(СтруктураSigner.ДолжностьПодписанта) Тогда
		
		БазовыйФормат = МетодКлиента("Модуль_Клиент", "БазовыйФорматВерсииКонтента", ЭДОбъект.Version);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("BoxId"			   , BoxId);
		ПараметрыФормы.Вставить("AttachmentVersion", БазовыйФормат);
		ПараметрыФормы.Вставить("Организация"	   , Организация);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "НастройкаПодписиАкт",, ЭтаФорма, "ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного", Новый Структура("Document", ЭДОбъект));
		
	Иначе
		ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ЭДОбъект);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыНастройкиПодписи_ПодписаниеЗапрошенного(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		
		СтруктураSigner = МетодСервера(, "ПолучитьДанныеПодписиСогласующим", Организация);
		ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, ДополнительныеПараметры.Document);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить_ПодписаниеЗапрошенного(СтруктураSigner, Document) 
	
	СтруктураРезультатОперации= МетодКлиента("Модуль_РаботаССерверомДиадок", "ПодписатьИОтправить_ПодписаниеЗапрошенного", СтруктураSigner, Document);
	
	Если СтруктураРезультатОперации.ВыполненоУспешно Тогда 
		ОбновитьЭДОбъект();
	Иначе
		ТекстОшибкиПодписания= СтруктураРезультатОперации.ТекстОшибки;
		
		ПараметрыФормы= Новый Структура();
		ПараметрыФормы.Вставить("Заголовок", 		"Ошибка при подписании документа");
		ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось подписать документ");
		ПараметрыФормы.Вставить("Подробности", 		ТекстОшибкиПодписания+Символы.ПС+"BoxId: "+Document.OrganizationId+Символы.ПС+"DocumentId: "+Document.DocumentId);
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

//} ИНТЕГРАЦИЯ
////////////////////////////////////////////////////////////////////////////////

//+asevryugin@PCRU.LOCAL, 2020-09-15 11:04:59
&НаСервере
Процедура PCRU_ОтразитьДокументВУчетеНаСервере(СтруктураДокумента)
	
	Если СтруктураДокумента.ТипДокумента = "СчетФактура" Тогда
		НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
		Если СтруктураДокумента.Свойство("Дата") Тогда
			НовыйДокумент .Дата                                      =  СтруктураДокумента.Дата ;
		КонецЕсли; 
		НовыйДокумент .Организация                                   =  Справочники.Организации.ОрганизацияПоУмолчанию();
		НовыйДокумент .ВидСчетаФактуры                               =  Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
		НовыйДокумент .Контрагент                                    =  Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураДокумента.ИНН);
		НовыйДокумент .ДоговорКонтрагента                            =  Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Организация",НовыйДокумент.Организация,,НовыйДокумент.Контрагент);
		НовыйДокумент .НомерВходящегоДокумента                       =  СтруктураДокумента.Номер;
		НовыйДокумент .ДатаВходящегоДокумента                        =  СтруктураДокумента.Дата;
		НовыйДокумент .КодВидаОперации                               =  "01";
		НовыйДокумент .КППКонтрагента                                =  СтруктураДокумента.КПП;
		НовыйДокумент .Ответственный                                 =  ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент .Комментарий                                   =  "Передано из диадок";
		//НовыйДокумент .Исправление                                   =  ;
		//НовыйДокумент .НомерИсправления                              =  ;
		//НовыйДокумент .ДатаИсправления                               =  ;
		//НовыйДокумент .ИсправляемыйСчетФактура                       =  ;
		//НовыйДокумент .НомерИсходногоДокумента                       =  ;
		//НовыйДокумент .ДатаИсходногоДокумента                        =  ;
		//НовыйДокумент .УдалитьУчитыватьИсправлениеИсходногоДокумента =  ;
		//НовыйДокумент .УдалитьНомерИсправленияИсходногоДокумента     =  ;
		//НовыйДокумент .УдалитьДатаИсправленияИсходногоДокумента      =  ;
		//НовыйДокумент .НДСПредъявленКВычету                          =  ;
		//НовыйДокумент .Продавец                                      =  ;
		//НовыйДокумент .Комитент                                      =  ;
		//НовыйДокумент .ДоговорКомитента                              =  ;
		//НовыйДокумент .ДокументОснование                             =  ;
		//НовыйДокумент .СчетФактураБезНДС                             =  ;
		//НовыйДокумент .КодСпособаПолучения                           =  ;
		НовыйДокумент .СуммаДокумента                                =  СтруктураДокумента.ИТОГО;
		//НовыйДокумент .СуммаУвеличение                               =  ;
		//НовыйДокумент .СуммаУменьшение                               =  ;
		//НовыйДокумент .СуммаНДСДокумента                             =  ;
		//НовыйДокумент .СуммаНДСУвеличение                            =  ;
		//НовыйДокумент .СуммаНДСУменьшение                            =  ;
		НовыйДокумент .ВалютаДокумента                               =   pcru_УМФО.ВалютаРубль();
		//НовыйДокумент .РучнаяКорректировка                           =  ;
		//НовыйДокумент .СформированПриВводеНачальныхОстатковНДС       =  ;
		//НовыйДокумент .УдалитьКорректировочныйСчетФактура            =  ;
		//НовыйДокумент .УдалитьНаАванс                                =  ;
		//НовыйДокумент .БланкСтрогойОтчетности                        =  ;
		//НовыйДокумент .СводныйКорректировочный                       =  ;
		//НовыйДокумент .ПредставлениеНомера                           =  ;
		//НовыйДокумент .ВозвратЧерезКомиссионера                      =  ;
		//НовыйДокумент .Субкомиссионер                                =  ;
		//НовыйДокумент .СчетФактураВыданныйПокупателю                 =  ;
		//НовыйДокумент .СуммаДокументаКомиссия                        =  ;
		//НовыйДокумент .СуммаНДСДокументаКомиссия                     =  ;
		//НовыйДокумент .СуммаУвеличениеКомиссия                       =  ;
		//НовыйДокумент .СуммаУменьшениеКомиссия                       =  ;
		//НовыйДокумент .СуммаНДСУвеличениеКомиссия                    =  ;
		//НовыйДокумент .СуммаНДСУменьшениеКомиссия                    =  ;
		//НовыйДокумент .СводныйКомиссионный                           =  ;
		//НовыйДокумент .ИсправлениеСобственнойОшибки                  =  ;
		//НовыйДокумент .НомерВходящегоДокументаДоИзменения            =  ;
		//НовыйДокумент .ДатаВходящегоДокументаДоИзменения             =  ;
		//НовыйДокумент .НомерИсправленияДоИзменения                   =  ;
		//НовыйДокумент .ДатаИсправленияДоИзменения                    =  ;
		//НовыйДокумент .КодВидаОперацииДоИзменения                    =  ;
		//НовыйДокумент .ИННКонтрагентаДоИзменения                     =  ;
		//НовыйДокумент .КППКонтрагентаДоИзменения                     =  ;
		//НовыйДокумент .ИННКонтрагента                                =  ;
		//НовыйДокумент .КодВидаОперацииНаУменьшение                   =  ;
		//НовыйДокумент .КодВидаОперацииНаУменьшениеДоИзменения        =  ;
		
		//ИдентификаторДокументаВДиадок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторДокументаВДиадок", Истина);
		//ИдентификаторЯщикДокументаВДиадок = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ИдентификаторЯщикДокументаВДиадок", Истина);
		//
		//МассивСтруктур = Новый Массив;
		//МассивСтруктур.Добавить(Новый Структура("Свойство, Значение", ИдентификаторДокументаВДиадок,СтруктураДокумента.documentId));
		//МассивСтруктур.Добавить(Новый Структура("Свойство, Значение", ИдентификаторЯщикДокументаВДиадок, СтруктураДокумента.OrganizationId));
		//
		//УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НовыйДокумент.Ссылка, МассивСтруктур);
		
		НовыйДокумент.Записать();
		ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);
		адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
		СтрПарам.ВладелецФайлов = НовыйДокумент.Ссылка;
		СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
		СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
		РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
		
		Документ1С = НовыйДокумент.Ссылка;
		Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
	КонецЕсли; 
	//	
	Если СтруктураДокумента.ТипДокумента = "ПоступлениеТоваровИУслуг" Тогда
		НовыйДокумент = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		Если СтруктураДокумента.Свойство("Дата") Тогда
			НовыйДокумент .Дата                              =  СтруктураДокумента.Дата ;
		КонецЕсли;
		НовыйДокумент.ВидОперации                            =  Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		НовыйДокумент .Организация                           =  Справочники.Организации.ОрганизацияПоУмолчанию();
		НовыйДокумент .Контрагент                            =  Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СтруктураДокумента.ИНН);
		НовыйДокумент .ДоговорКонтрагента                    =  Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("Организация",НовыйДокумент.Организация,,НовыйДокумент.Контрагент);
		НовыйДокумент .НомерВходящегоДокумента               =  СтруктураДокумента.Номер;
		НовыйДокумент .ДатаВходящегоДокумента                =  СтруктураДокумента.Дата;
		НовыйДокумент .Ответственный                         =  ПараметрыСеанса.ТекущийПользователь;
		НовыйДокумент .Комментарий                           =  "Передано из диадок";
		НовыйДокумент.Склад                                  =  Справочники.Склады.ПолучитьСкладПоУмолчанию();
		НовыйДокумент.ПодразделениеОрганизации               =  pcru_УМФО.ФинОтдел();
		НовыйДокумент.СпособЗачетаАвансов                    =  Перечисления.СпособыЗачетаАвансов.Автоматически ;
	    //БНФО
		НовыйДокумент.СчетУчетаРасчетовСКонтрагентом         =  pcru_УМФО.ПолучитьСчетПоАналитике("60311",НовыйДокумент.Контрагент);
		НовыйДокумент.СчетУчетаРасчетовПоАвансам             =  pcru_УМФО.ПолучитьСчетПоАналитике("60312",НовыйДокумент.Контрагент);
		НовыйДокумент.СчетУчетаРасчетовПоТаре                =  pcru_УМФО.ПолучитьСчетПоАналитике("60311",НовыйДокумент.Контрагент);
		//БНФО
		НовыйДокумент.ВалютаДокумента                        =  pcru_УМФО.ВалютаРубль();
		НовыйДокумент.КурсВзаиморасчетов                     =  1;
		НовыйДокумент.НДСВключенВСтоимость                   =  Истина;
		НовыйДокумент.СуммаВключаетНДС                       =  Истина;
		НовыйДокумент .СуммаДокумента                                =  СтруктураДокумента.ИТОГО;
		НовыйДокумент.НДСНеВыделять                          =  Ложь;
		НовыйДокумент.БНФОПризнакДоверительногоУправления    =  Перечисления.БНФОПризнакиДоверительногоУправления.СобственныеОперации;
		
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент КАК Контрагент,
		               |	ПоступлениеТоваровУслугУслуги.СчетЗатрат КАК СчетЗатрат,
		               |	КОЛИЧЕСТВО(ПоступлениеТоваровУслугУслуги.Ссылка) КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_КОНТРСчет
		               |ИЗ
		               |	Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		               |ГДЕ
		               |	ПоступлениеТоваровУслугУслуги.Ссылка.ВидОперации = &ВидОперации
		               |	И ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент = &Контрагент
		               |	И ПоступлениеТоваровУслугУслуги.Ссылка.Дата >= &Дата
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
		               |	ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка УБЫВ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		               |	ПоступлениеТоваровУслугУслуги.СчетЗатрат КАК СчетЗатрат,
		               |	ПоступлениеТоваровУслугУслуги.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
		               |	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ КАК СчетЗатратНУ,
		               |	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС КАК СчетУчетаНДС,
		               |	ПоступлениеТоваровУслугУслуги.СпособУчетаНДС КАК СпособУчетаНДС,
		               |	ПоступлениеТоваровУслугУслуги.БНФОСтатьяЗатрат КАК БНФОСтатьяЗатрат,
		               |	ПоступлениеТоваровУслугУслуги.БНФОСубконто1 КАК БНФОСубконто1,
		               |	ПоступлениеТоваровУслугУслуги.БНФОСубконто2 КАК БНФОСубконто2,
		               |	ПоступлениеТоваровУслугУслуги.БНФОСубконто3 КАК БНФОСубконто3,
		               |	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ1 КАК БНФОСубконтоНУ1,
		               |	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ2 КАК БНФОСубконтоНУ2,
		               |	ПоступлениеТоваровУслугУслуги.БНФОСубконтоНУ3 КАК БНФОСубконтоНУ3
		               |ИЗ
		               |	ВТ_КОНТРСчет КАК ВТ_КОНТРСчет
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
		               |		ПО ВТ_КОНТРСчет.Контрагент = ПоступлениеТоваровУслугУслуги.Ссылка.Контрагент
		               |			И ВТ_КОНТРСчет.СчетЗатрат = ПоступлениеТоваровУслугУслуги.СчетЗатрат
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПоступлениеТоваровУслугУслуги.Ссылка УБЫВ";
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
		Запрос.УстановитьПараметр("Контрагент",НовыйДокумент .Контрагент  );
	    Запрос.УстановитьПараметр("Дата",НачалоГода(ТекущаяДата()) );
		ВыборкаПараметровСтроки = Запрос.Выполнить().Выбрать();                                                              
		ЕстьВыборка = ВыборкаПараметровСтроки.Следующий();
		Если СтруктураДокумента.Свойство("Таблица") Тогда
			Для каждого СтрокаУслуги Из СтруктураДокумента.Таблица Цикл
				//Если СтрокаУслуги.Свойство("Номер") Тогда
				Если СтрокаУслуги.Количество() > 0 Тогда
					НоваяСтрокаУслуг = НовыйДокумент.Услуги.Добавить();    
					Если ЕстьВыборка Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуг,ВыборкаПараметровСтроки);
					КонецЕсли; 
					Для каждого Элемент Из СтрокаУслуги Цикл
						Единицы = "";
						Наименование = "";
						Если Элемент.Ключ = "Цена" Тогда
							//НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(Элемент.Значение," ",""));
							НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));	
						ИначеЕсли Элемент.Ключ = "Сумма" Тогда
							//НоваяСтрокаУслуг.Сумма    = Число(СтрЗаменить(Элемент.Значение," ",""));	
							НоваяСтрокаУслуг.Сумма = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));	
							//НоваяСтрокаУслуг.СуммаНДС = НоваяСтрокаУслуг.Сумма*0.2;	
						ИначеЕсли Элемент.Ключ = "Цена" Тогда
							//НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(Элемент.Значение," ",""));	
							НоваяСтрокаУслуг.Цена = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));	
						ИначеЕсли Элемент.Ключ = "Колво" или Элемент.Ключ = "Количество" Тогда
							//НоваяСтрокаУслуг.Количество = Число(СтрЗаменить(Элемент.Значение," ",""));
							НоваяСтрокаУслуг.Количество = Число(СтрЗаменить(СтрЗаменить(Элемент.Значение," ",""), ",", "."));	
						ИначеЕсли Элемент.Ключ = "Ед" или Элемент.Ключ = "Единицы"  Тогда
							Единицы = Элемент.Значение;	
						ИначеЕсли Элемент.Ключ = "Номер" Тогда
							//
						Иначе
							Наименование = Элемент.Значение;	
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Наименование)  Тогда
							Номенклатура = Неопределено;
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							|	Номенклатура.Ссылка КАК Ссылка
							|ИЗ
							|	Справочник.Номенклатура КАК Номенклатура
							|ГДЕ
							|	Номенклатура.НаименованиеПолное = &НаименованиеПолное";
							Запрос.УстановитьПараметр("НаименованиеПолное",Наименование );
							Выборка = Запрос.Выполнить().Выбрать();
							Пока Выборка.Следующий() Цикл
								Номенклатура =  Выборка.Ссылка;
							КонецЦикла;	
							Если не ЗначениеЗаполнено(Номенклатура)  Тогда
  								НоменклатураОб                            = Справочники.Номенклатура.СоздатьЭлемент();
	                            НоменклатураОб.ВидНоменклатуры            = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга");
							   	НоменклатураОб.Наименование               = Наименование;
                                НоменклатураОб.НаименованиеПолное         = Наименование;
								НоменклатураОб.БНФОГруппаФинансовогоУчета = Справочники.БНФОГруппыФинансовогоУчетаАктивов.НайтиПоНаименованию("Услуги");
								//НоменклатураОб.ЕдиницаИзмерения
								НоменклатураОб.Записать();
								Номенклатура = НоменклатураОб.Ссылка;
							КонецЕсли; 
							НоваяСтрокаУслуг.Номенклатура = Номенклатура;
						КонецЕсли; 
					КонецЦикла; 
					
					
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;

		//  Число(СтрЗаменить(СтрокаУслуги.Сумма," ",""))
			 
		
		//НовыйДокумент.СчетНаОплатуПоставщика                 =  ;
		//
		//НовыйДокумент.Грузоотправитель                       =  ;
		//НовыйДокумент.Грузополучатель                        =  ;
		//НовыйДокумент.КратностьВзаиморасчетов                =  1;
		//
		//НовыйДокумент.ТипЦен                                 =  ;
		////НовыйДокумент.РучнаяКорректировка                    =  ;
		////НовыйДокумент.КодВидаТранспорта                      =  ;
		//НовыйДокумент.БНФОСПОД                               =  ;
		//НовыйДокумент.БНФОСтатьяРасходовНДС                  =  ;
		//
		//НовыйДокумент.БНФОСчетРасходовНДС                    =  ;
		//
		//НовыйДокумент.БНФОВидДеятельностиНПФ                 =  ;
		//НовыйДокумент.ЕстьМаркируемаяПродукцияГИСМ           =  ;
		//НовыйДокумент.МОЛ                                    =  ;
		//НовыйДокумент.МестонахождениеОС                      =  ;
		//НовыйДокумент.ГруппаОС                               =  ;
		//НовыйДокумент.СпособОтраженияРасходовПоАмортизации   =  ;
		//НовыйДокумент.ОбъектыПредназначеныДляСдачиВАренду    =  ;
		//НовыйДокумент.БНФОАвтоматическиОпределятьПарныеСчета =  ;
		//
		//НовыйДокумент.АЭ_Идентификатор                       =  ;
		//НовыйДокумент.АЭ_РежимИнтеграции                     =  ;
		//НовыйДокумент.АЭ_ДанныеИнтеграции                    =  ;
		//НовыйДокумент.БНФОСчетАрендныеОбязательства          =  ;
		//НовыйДокумент.ЕстьРасхождения                        =  ;
		
		НовыйДокумент.СуммаДокумента = НовыйДокумент.Услуги.Итог("Сумма");
		НовыйДокумент.Записать();
		ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);
		адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
		СтрПарам.ВладелецФайлов = НовыйДокумент.Ссылка;
		СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
		СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
		РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
		
		Документ1С = НовыйДокумент.Ссылка;
		Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаСервере
Функция PCRU_ПолучитьКомпоненту()
	ДД =  РеквизитФормыВЗначение("Объект").ПолучитьМакет("PCRU_pdftotext");
	Возврат Base64Строка(ДД); 
КонецФункции 

&НаКлиенте 
Процедура ВыполнитьПослеВыбораТипаДокумента(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Прав(ЭДОбъект.FileName,3) = "pdf"  Тогда
		ДД =  Base64Значение(PCRU_ПолучитьКомпоненту());
		ПутьКPDFtoTEXT = ПолучитьИмяВременногоФайла("exe");
		ДД.Записать(ПутьКPDFtoTEXT);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
		ИмяВременногоФайлаТекст = ПолучитьИмяВременногоФайла("txt");
		Если ЭДОбъект.HasCustomPrintForm = Ложь Тогда
			ЭДОбъект.SaveSenderContent(ИмяВременногоФайла);
		Иначе
			ЭДОбъект.GetPrintForm(ИмяВременногоФайла, 30);
		КонецЕсли;
		ЭтаФорма.PCRU_ДвоичныеДанныеДокумента = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));
		ЭтаФорма.PCRU_РасширениеФайла = "pdf";
		ЭтаФорма.PCRU_ИмяФайла = ЭДОбъект.FileName;
		Команд = ПутьКPDFtoTEXT  + " -layout -table -enc UTF-8 -nodiag " + ИмяВременногоФайла + " " + ИмяВременногоФайлаТекст; 
		ЗапуститьПриложение(Команд,,Истина);
		ТД = Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяВременногоФайлаТекст,КодировкаТекста.UTF8);
		СтрокаПДФ = ТД.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ИмяВременногоФайлаТекст);
		МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПДФ,Символы.ПС,Истина,Истина);
		МассивСтруктур = Новый Массив;
		СтруктураСтроки = Новый Структура;
		МассивКолонок = Новый Массив;
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("ИНН",ЭДОбъект.Counteragent.Inn);
		СтруктураДокумента.Вставить("КПП",ЭДОбъект.Counteragent.Kpp);
		СтруктураДокумента.Вставить("Наименование",ЭДОбъект.Counteragent.Name);
		СтруктураДокумента.Вставить("Дата",ЭДОбъект.Timestamp);
		НачалоШапки = Истина;
		НачалоТаблицы = Ложь;
		НачалоПодвала = Ложь;
		ТекущийНомерСтроки = 0;
		Для каждого Строка Из МассивСтрок Цикл
			Строка = ОбработатьСтрокуНаИсключения(Строка);
			
			ТекущийНомерСтроки = ТекущийНомерСтроки +1;
			//СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МассивСтрок[11],"  ",Истина,Истина);
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка,"  ",Истина,Истина);
			Если НачалоПодвала Тогда
			// 	
			КонецЕсли; 
			Если НачалоТаблицы Тогда
				Если  СтрЧислоВхождений(ВРЕГ(МассивПодстрок[0]),"ИТОГО") > 0 Тогда
					НачалоТаблицы = Ложь;
					НачалоПодвала = Истина;
					МассивСтруктур.Добавить(СтруктураСтроки);
					СтруктураДокумента.Вставить("Таблица",МассивСтруктур);
					СтруктураДокумента.Вставить("Итого",Число(СтрЗаменить(МассивПодстрок[1]," ","")));
				ИначеЕсли  МассивПодстрок.Количество() = 1 Тогда 
					СтруктураСтроки[МассивКолонок[1]] = СтруктураСтроки[МассивКолонок[1]] + " " + МассивПодстрок[0]; 
				ИначеЕсли  МассивПодстрок.Количество() =   МассивКолонок.Количество() Тогда
					Если СтруктураСтроки <> Неопределено Тогда
						МассивСтруктур.Добавить(СтруктураСтроки);
					КонецЕсли; 
					СтруктураСтроки = Новый Структура;
					Для каждого Колонка Из МассивКолонок Цикл
						СтруктураСтроки.Вставить(Колонка,"");
					КонецЦикла;
					ТекущийНомерСтроки = МассивПодстрок[0];
					Для Итер = 0 По МассивПодстрок.Количество()-1 Цикл
						СтруктураСтроки[МассивКолонок[Итер]] = МассивПодстрок[Итер]; 
					КонецЦикла; 
				ИначеЕсли  МассивПодстрок.Количество() =   МассивКолонок.Количество() Тогда
    				Если СтруктураСтроки <> Неопределено Тогда
						МассивСтруктур.Добавить(СтруктураСтроки);
					КонецЕсли; 
					СтруктураСтроки = Новый Структура;
					
					СтруктураСтроки.Вставить(МассивКолонок[1],МассивПодстрок[1]);
					СтруктураСтроки.Вставить(МассивКолонок[2],МассивПодстрок[2]);
					
					СтруктураСтроки.Вставить("Колво",1);
					СтруктураСтроки.Вставить("Ед","шт");

					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-2],МассивПодстрок[МассивПодстрок.Количество()-2]);
					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-1],МассивПодстрок[МассивПодстрок.Количество()-1]);					
				ИначеЕсли МассивПодстрок.Количество() + 1 = МассивКолонок.Количество() Тогда
					Если СтрНайти(МассивПодстрок[2], "мес") = 0 Тогда
						Продолжить;
					КонецЕсли;
					
    				Если СтруктураСтроки <> Неопределено Тогда
						МассивСтруктур.Добавить(СтруктураСтроки);
					КонецЕсли; 
					СтруктураСтроки = Новый Структура;
					
					СтруктураСтроки.Вставить(МассивКолонок[1],МассивПодстрок[1]);
					СтруктураСтроки.Вставить(МассивКолонок[2], СокрЛП(СтрЗаменить(СтрЗаменить(МассивПодстрок[2], "мес", ""), "шт", "")));
					
					СтруктураСтроки.Вставить("Колво",1);
					
					Если СтрНайти(МассивПодстрок[2], "мес") Тогда
						СтруктураСтроки.Вставить("Ед","мес");
					Иначе
						СтруктураСтроки.Вставить("Ед","шт");
					КонецЕсли;

					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-2],МассивПодстрок[МассивПодстрок.Количество()-2]);
					СтруктураСтроки.Вставить(МассивКолонок[МассивКолонок.Количество()-1],МассивПодстрок[МассивПодстрок.Количество()-1]);					
				
				КонецЕсли;
			КонецЕсли; 
			Если НачалоШапки Тогда
				Если (СтрЧислоВхождений(ВРЕГ(Строка),"№") > 0) и (СтрЧислоВхождений(ВРЕГ(Строка),"ОТ") > 0) и (Лев(Строка,1) <> "№") Тогда
					Если  (СтрЧислоВхождений(ВРЕГ(Строка),"ОСНОВАНИЕ") > 0)  Тогда
						МассивПодстрокОснования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка," ",Истина,Истина);
					Иначе
						МассивПодстрокНомера = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка," ",Истина,Истина);
						ИндексНомера = МассивПодстрокНомера.Найти("№");
						Если ИндексНомера <> Неопределено Тогда
							СтруктураДокумента.Вставить("Номер",МассивПодстрокНомера[ИндексНомера+1]); 
						КонецЕсли;
						ИндексДаты = МассивПодстрокНомера.Найти("от");
						Если ИндексДаты <> Неопределено Тогда
							Попытка
								ДатаЧисло = МассивПодстрокНомера[ИндексДаты + 1];
								ДатаИзСтроки = pcru_ex_РаботаСоСтроками.ПолучитьДатуИзСтроки(ДатаЧисло);
								Если  ЗначениеЗаполнено(ДатаИзСтроки)  Тогда
									СтруктураДокумента.Вставить("Дата",ДатаИзСтроки);
								КонецЕсли;
							Исключение
								ДатаЧисло = МассивПодстрокНомера[ИндексДаты + 1];
								СтрокаМесяц = МассивПодстрокНомера[ИндексДаты + 2];
								ЧислоГод = МассивПодстрокНомера[ИндексДаты + 3];
								ДатаИзСтроки = Дата(ЧислоГод, pcru_ex_РаботаСоСтроками.МесяцИзСтрокиВЧисло(СтрокаМесяц), ДатаЧисло);
								Если  ЗначениеЗаполнено(ДатаИзСтроки)  Тогда
									СтруктураДокумента.Вставить("Дата",ДатаИзСтроки);
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Лев(Строка,1) = "№" Тогда
					
					Для каждого Колонка Из МассивПодстрок Цикл
						Если СокрЛП(Колонка) = "№" Тогда
							МассивКолонок.Добавить("Номер");
						Иначе
							МассивКолонок.Добавить(pcru_ex_РаботаСоСтроками.ПолучитьТолькоБуквы(Колонка));
						КонецЕсли;
					КонецЦикла; 
					
					Если МассивКолонок.Количество() > 1 Тогда						
						НачалоТаблицы = Истина;
						НачалоШапки = Ложь;
					Иначе
						МассивКолонок.Очистить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
		СтруктураДокумента.Вставить("documentId",МетодСервера(, "КонвертироватьГуидВЧисло64",ЭДОбъект.documentId));
		СтруктураДокумента.Вставить("OrganizationId",ЭДОбъект.OrganizationId);
		СтруктураДокумента.Вставить("FileName",ЭДОбъект.FileName);
		СтруктураДокумента.Вставить("ТипДокумента",Результат.Значение);
		PCRU_ОтразитьДокументВУчетеНаСервере(СтруктураДокумента);
		Если ЗначениеЗаполнено(Документ1С) Тогда
			ОбработчикСозданиеДокумента(Документ1С);
			Элементы.PCRU_ОтразитьДокументВУчете.Доступность =Ложь;
			Элементы.PCRU_ОтразитьДокументВУчете.Доступность =Ложь;
			ПоказатьЗначение(,Документ1С);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ОбработатьСтрокуНаИсключения(ВхСтрока)
	Строка = СтрЗаменить(ВхСтрока,"шт"," шт");
	Строка = СтрЗаменить(Строка,"ед"," ед");
	Строка = СтрЗаменить(Строка," года","года");
	Строка = СтрЗаменить(Строка," за","за");
	Строка = СтрЗаменить(Строка,"1ч","1  ч");
	Строка = СтрЗаменить(Строка,"2ч","2  ч");
	Строка = СтрЗаменить(Строка,"3ч","3  ч");
	Строка = СтрЗаменить(Строка,"4ч","4  ч");
	Строка = СтрЗаменить(Строка,"5ч","5  ч");
	Строка = СтрЗаменить(Строка,"6ч","6  ч");
	Строка = СтрЗаменить(Строка,"7ч","7  ч");
	Строка = СтрЗаменить(Строка,"8ч","8  ч");
	Строка = СтрЗаменить(Строка,"9ч","9  ч");
	Строка = СтрЗаменить(Строка,"0ч","0  ч");
    Строка = СтрЗаменить(Строка,", ",",");
	Строка = СтрЗаменить(Строка,"усл ","  усл ");
	Возврат Строка;
КонецФункции // ОбработатьСтрокуНаИсключения()
 

&НаКлиенте
Процедура PCRU_ОтразитьДокументВУчете(Команда)
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеВыбораТипаДокумента", ЭтаФорма);
	СписокВидовОбъектов = Новый СписокЗначений;
	СписокВидовОбъектов.Добавить("СчетФактура","Счет-Фактура");
	СписокВидовОбъектов.Добавить("ПоступлениеТоваровИУслуг","Поступление Товаров И Услуг");
	//СписокВидовОбъектов.Добавить("ПоступлениеТоваровИУслугТовары","Поступление Товаров И Услуг (Товары)");
	//СписокВидовОбъектов.Добавить("ПоступлениеТоваровИУслугУслуги","Поступление Товаров И Услуг (Услуги)");
	ПоказатьВыборИзМеню(Оповещение, СписокВидовОбъектов);
КонецПроцедуры

&НаКлиенте
Процедура PCRU_ВыбратьДокументДляПривязки(Команда)
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора",ПараметрыВыбора,ЭтаФорма);
КонецПроцедуры
//+/asevryugin@PCRU.LOCAL, 2020-09-15 11:04:59


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) ///Событие формы
	Документ1С =  ВыбранноеЗначение;
	Элементы.ДокументВ1С.Заголовок = Новый ФорматированнаяСтрока(Строка(Документ1С), , , , ПолучитьНавигационнуюСсылку(Документ1С));
	ПривязатьФайлКДокументу(Документ1С);
	ОбработчикСозданиеДокумента(Документ1С);
	ВернутьРеквизитыДокументу(Документ1С);
КонецПроцедуры



// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПривязатьФайлКДокументу(Документ1С)
	
	ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);	
	адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
	СтрПарам.ВладелецФайлов = Документ1С;
	СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
	СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
	РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
	
	PCRU_СвойстваДокумента = Новый Структура;
	Если ЗначениеЗаполнено(Документ1С.НомерВходящегоДокумента) Тогда
		PCRU_СвойстваДокумента.Вставить("НомерВходящегоДокумента", Документ1С.НомерВходящегоДокумента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ1С.ДатаВходящегоДокумента) Тогда
		PCRU_СвойстваДокумента.Вставить("ДатаВходящегоДокумента", Документ1С.ДатаВходящегоДокумента);
	КонецЕсли;
	
КонецПроцедуры // ПривязатьФайлКДокументу()

&НаСервере
Процедура ВернутьРеквизитыДокументу(Документ1С)
	
	ПроверкаДатЗапретаОтключена = ДатыЗапретаИзменения.ПроверкаДатЗапретаОтключена();

	УстановитьПривилегированныйРежим(Истина);
	ДатыЗапретаИзменения.ОтключитьПроверкуДатЗапрета(Истина);
	УстановитьПривилегированныйРежим(Ложь); 

	ОбъектДокумент1С = Документ1С.ПолучитьОбъект();
	ОбъектДокумент1С.ОбменДанными.Загрузка = Ложь;
	Если НЕ ЗначениеЗаполнено(Документ1С.НомерВходящегоДокумента) И PCRU_СвойстваДокумента.Свойство("НомерВходящегоДокумента") Тогда
		ОбъектДокумент1С.НомерВходящегоДокумента = PCRU_СвойстваДокумента.НомерВходящегоДокумента;
	КонецЕсли;
	Если Документ1С.ДатаВходящегоДокумента < '20000101' И PCRU_СвойстваДокумента.Свойство("ДатаВходящегоДокумента") Тогда
		ОбъектДокумент1С.ДатаВходящегоДокумента = PCRU_СвойстваДокумента.ДатаВходящегоДокумента;
	КонецЕсли;		
	ОбъектДокумент1С.Записать();
	
	//	Включаем контроль
	УстановитьПривилегированныйРежим(Истина);
	ДатыЗапретаИзменения.ОтключитьПроверкуДатЗапрета(ПроверкаДатЗапретаОтключена);
	УстановитьПривилегированныйРежим(Ложь);


	Если ТипЗнч(Документ1С) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		НаборРег = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
		НаборРег.Отбор.Документ.Установить(Документ1С.Ссылка);
		НаборРег.Прочитать();
		Если НаборРег.Количество() > 0 Тогда
			Для Каждого стрНабора Из НаборРег Цикл
				стрНабора.Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
			КонецЦикла;
		Иначе
			стрНабора = НаборРег.Добавить();
			стрНабора.Организация = Документ1С.Организация;
			стрНабора.Документ = Документ1С.Ссылка;
			стрНабора.Статус = Перечисления.СтатусыДокументовПоступления.ОригиналПолучен;
		КонецЕсли;
		
		НаборРег.Записать();
	КонецЕсли;

КонецПроцедуры
