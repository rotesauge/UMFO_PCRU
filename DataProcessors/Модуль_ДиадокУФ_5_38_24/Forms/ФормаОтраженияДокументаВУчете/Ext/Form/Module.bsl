#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	ПрочитатьОбработатьПараметрыФормы();
	
	РолиДокументов = РолиДокументовУчета();
	
	УстановитьЗаголовокГруппыРолиДокумента(РолиДокументов.ПервичныйДокумент);
	УстановитьЗаголовокГруппыРолиДокумента(РолиДокументов.СчетФактура);
	
	ОбновитьКэшКандидатовНаСопоставление();
	
	ОбновитьНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПлатформаПриОткрытии(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныеДокументы = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РолиДокументовУчета().СчетФактура);
	
	Если Не ЗначениеЗаполнено(СвязанныеДокументы) Тогда 
		СвязанныеДокументы = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РолиДокументовУчета().ПервичныйДокумент);
	КонецЕсли;
	
	ДокументУчета = Неопределено;
	Если ЗначениеЗаполнено(СвязанныеДокументы) Тогда 
		ДокументУчета = СвязанныеДокументы[0];
	КонецЕсли;
	
	ОповеститьФормыОбИзмененииСвязейДокументов(ДокументУчета);
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("Документ1С", ДокументУчета);
	
	Закрыть(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ТекстПервичныйДокументОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбщаяОбработкаНавигационнойСсылки(РолиДокументовУчета().ПервичныйДокумент
		, НавигационнаяСсылкаФорматированнойСтроки
		, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбщаяОбработкаНавигационнойСсылки(РолиДокументовУчета().СчетФактура
		, НавигационнаяСсылкаФорматированнойСтроки
		, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначенияКлиентСервер

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  ЗначениеИлиМассив - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВМассиве(ЗначениеИлиМассив)
	
	Если ТипЗнч(ЗначениеИлиМассив) = Тип("Массив") Тогда
		Результат = ЗначениеИлиМассив;
	Иначе
		Результат = Новый Массив;
		Результат.Добавить(ЗначениеИлиМассив);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение свойства структуры или значение по умолчанию,
// если указанное свойство не существует. 
// 
// Параметры:
// 	СложнаяСтруктура	 - Структура	 - Структура, которая может содержать вложенные структуры.
// 	ПолныйКлюч			 - Строка		 - Полное имя ключа с учетом вложенности структур. 
// 										   Имена свойств вложенных структур отделяются точкой)
// 	ЗначениеПоУмолчанию	 - Произвольный	 - Необязательный. Возвращается когда в структуре нет значения по указанному
// 										   ключу. Для скорости рекомендуется передавать только быстро вычисляемые 
// 										   значения (например примитивные типы),а инициализацию более тяжелых значений
// 										   выполнять после проверки полученного значения (только если это требуется).
// 
// Возвращаемое значение:
// 	Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
&НаКлиентеНаСервереБезКонтекста
Функция СвойствоСтруктуры(СложнаяСтруктура, ПолныйКлюч, ЗначениеПоУмолчанию = Неопределено)
	
	Результат = ЗначениеПоУмолчанию;
	
	Если Не ЗначениеЗаполнено(ПолныйКлюч) Или СложнаяСтруктура = Неопределено Тогда // ЗначениеЗаполнено не применять, т.к. это может быть объект ДанныеФормыСтруктура
		Возврат Результат;
	КонецЕсли;
	
	ПростыеКлючи = РазложитьСтрокуВМассивСлов(ПолныйКлюч, ".");
	
	ЗначениеПолучено = Ложь;
	ТекущееЗначение	 = Неопределено;
	ТекущаяСтруктура = СложнаяСтруктура;
	
	ВГраница = ПростыеКлючи.ВГраница();
	
	Для Сч = 0 По ВГраница Цикл
		
		ТекущийКлюч = ПростыеКлючи[Сч];
		
		Если ТекущаяСтруктура.Свойство(ТекущийКлюч, ТекущееЗначение) Тогда
			
			Если Сч = ВГраница Тогда
				
				// Это последний ПолныйКлюч в массиве
				ЗначениеПолучено = Истина;
				
			ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Структура") Тогда
				
				// Есть подчиненная СложнаяСтруктура для получения следующего значения
				ТекущаяСтруктура = ТекущееЗначение;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеПолучено Тогда
		Результат = ТекущееЗначение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора,
//                                                                 например, Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - Произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - элемент компоновки.
//
&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено)
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления
				, ИмяПоля
				, ВидСравнения
				, ПравоеЗначение
				, Представление
				, Использование
				, РежимОтображения
				, ИдентификаторПользовательскойНастройки);
	
КонецФункции

#КонецОбласти

#Область СтроковыеФункции

// Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаИзМассиваПодстрок(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;
		
		Результат = Результат + Подстрока;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей.
//
// Возвращаемое значение:
//  Булево - истина, если символ является разделителем.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено)
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Строка          - Строка - строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - строка, содержащая символы-разделители.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - отдельные слова
//
// Пример:
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один", "два2_", "три";
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив значений: "один-", "два2", "три".
//
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = Неопределено)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Строка, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
//
&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаНавигационныхСсылок

// Общий обработчик события элементов формы "ОбработкаНавигационнойСсылки".
//
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - Значение гиперссылки форматированной строки;
//  СтандартнаяОбработка					 - Булево - Ложь, если нужно отключить стандартную обработку;
//
&НаКлиенте
Процедура ОбщаяОбработкаНавигационнойСсылки(РольДокумента, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Команда = ВРег(НавигационнаяСсылкаФорматированнойСтроки);
	
	Если Команда = ВРег("Создать") Тогда 
		
		СтандартнаяОбработка = Ложь;
		НачатьСозданиеДокументаУчета(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Выбрать") Тогда 
		
		СтандартнаяОбработка = Ложь;
		НачатьПодборДокументаУчета(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Отменить") Тогда 
		
		СтандартнаяОбработка = Ложь;
		ОтменитьСопоставлениеДокументов(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Показать") Тогда 
		
		СтандартнаяОбработка = Ложь;
		ДокументыУчета = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РольДокумента);
		ПоказатьКоллекциюДокументов(ДокументыУчета);
		
	ИначеЕсли Команда = ВРег("Найти") Тогда 
		
		СтандартнаяОбработка = Ложь;
		НачатьПоискИСопоставлениеДокументовУчета(РольДокумента);
		
	ИначеЕсли Команда = ВРег("Сопоставить") Тогда 
		
		СтандартнаяОбработка = Ложь;
		СопоставитьСПодходящимДокументомУчета(РольДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокБлокирующихОкон()
	
	Возврат НСтр("ru = 'Диадок'");
	
КонецФункции

&НаСервере
Процедура ПрочитатьОбработатьПараметрыФормы()
	
	// Получаем значения параметров формы
	Организация		 = СвойствоСтруктуры(Параметры, "Организация");
	Контрагент		 = СвойствоСтруктуры(Параметры, "Контрагент");
	ПротоКонтент	 = СвойствоСтруктуры(Параметры, "ПротоКонтент");
	ИдентификаторЭД	 = СвойствоСтруктуры(Параметры, "ИдентификаторЭД");
	
	// Структуру с контентом ЭД нужно немного доработать
	Контент = ПротоКонтент.Контент;
	Контент.Вставить("type", ПротоКонтент.ТипКонтента); // МодульКлиент.ПолучитьТипКонтента(AttachmentVersion, DocumentType)
	
	// Преобразовываем контент в универсальную структуру
	ОписаниеЭД = ДанныеЭлектронногоДокумента(ИдентификаторЭД, Контент);
	
	// TODO: Перетащить создание и заполнение структуры МетаданныеЭД в универсальный модуль
	МетаданныеЭД = МетаданныеЭлектронногоДокумента();
	ЗаполнитьЗначенияСвойств(МетаданныеЭД, ОписаниеЭД);
	МетаданныеЭД.ЕстьФункцияПД = ЕстьФункцияПервичногоДокумента(ОписаниеЭД.ФункцияЭД);
	МетаданныеЭД.ЕстьФункцияСФ = ЕстьФункцияСчетаФактуры(ОписаниеЭД.ФункцияЭД);
	
	// Если ссылки на организацию и контрагента переданы через параметры, сразу дополним данные ЭД
	Если ЗначениеЗаполнено(Организация)
		И ТипЗнч(ОписаниеЭД.Покупатель) = Тип("Структура") Тогда // Документ содержит сведения об одном покупателе
		ОписаниеЭД.Покупатель.Ссылка = Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент)
		И ТипЗнч(ОписаниеЭД.Продавец) = Тип("Структура") Тогда // Документ содержит сведения об одном продавце
		ОписаниеЭД.Продавец.Ссылка = Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РолиДокументовУчета()
	
	РолиДокументов = Новый Структура;
	РолиДокументов.Вставить("СчетФактура"		, "СчетФактура");
	РолиДокументов.Вставить("ПервичныйДокумент"	, "ПервичныйДокумент");
	
	Результат = Новый ФиксированнаяСтруктура(РолиДокументов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРолиДокумента(РольДокумента, ЭтоКорректировка)
	
	Результат = РольДокумента;
	
	Если РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда 
		
		Если ЭтоКорректировка Тогда 
			Результат = НСтр("ru = 'Соглашение об изменении стоимости'");
		Иначе 
			Результат = НСтр("ru = 'Передаточный документ'");
		КонецЕсли;
		
	ИначеЕсли РольДокумента = РолиДокументовУчета().СчетФактура Тогда 
		
		Если ЭтоКорректировка Тогда 
			Результат = НСтр("ru = 'Корректировочный счет-фактура'");
		Иначе 
			Результат = НСтр("ru = 'Счет-фактура'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЭД(ДанныеЭД, РольДокумента = Неопределено)
	
	Если ЗначениеЗаполнено(РольДокумента) Тогда 
		НазваниеДокумента = ПредставлениеРолиДокумента(РольДокумента, ДанныеЭД.ЭтоКорректировка);
	Иначе 
		НазваниеДокумента = ДанныеЭД.ТипЭД;
	КонецЕсли;
	
	Результат = ПодставитьПараметрыВСтроку("%1 %2 от %3", НазваниеДокумента, ДанныеЭД.Номер, Формат(ДанныеЭД.Дата, "ДЛФ=D"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СвязанныйЭлементУправления(РольДокумента)
	
	Результат = Неопределено;
	
	Если РольДокумента = РолиДокументовУчета().СчетФактура Тогда 
		Результат = Элементы.ТекстСчетФактура;
	ИначеЕсли РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда 
		Результат = Элементы.ТекстПервичныйДокумент;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГиперссылкаДействиеСДокументом(Действие, Знач Текст = "")
	
	Если Не ЗначениеЗаполнено(Текст) Тогда 
		Текст = ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), НРег(Действие));
	КонецЕсли;
	
	ЦветТекста = WebЦвета.ТемноКрасный;
	Если ВРег(Действие) = ВРег("Показать") Тогда 
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Текст,,ЦветТекста,, Действие);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КомандыДляОтраженияДокументаВУчете()

	Результат = Новый Структура;
	Результат.Вставить("Создать"		, Ложь); // Создать новый документ учета
	Результат.Вставить("Выбрать"		, Ложь); // Выбрать существующий документ учета
	Результат.Вставить("Сопоставить"	, Ложь); // Сопоставить с предложенным документом учета
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ТекстНадписиДокументаУчета(ДокументыУчета, КомандыДляНовогоЭД, КандидатДляСопоставления = Неопределено)
	
	Подстроки = Новый Массив;
	
	Если ЗначениеЗаполнено(ДокументыУчета) Тогда 
		
		ПредставлениеДокументов = ПредставлениеКоллекцииДокументов(ДокументыУчета);
		Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Показать", ПредставлениеДокументов));
		//Подстроки.Добавить("   ");
		//Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Выбрать", "Добавить"));
		Подстроки.Добавить("   ");
		Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Отменить", "Отменить"));
		
	ИначеЕсли КомандыДляНовогоЭД.Сопоставить И ЗначениеЗаполнено(КандидатДляСопоставления) Тогда
		
		СопоставитьС = Строка(КандидатДляСопоставления);
		
		Подстроки.Добавить(НСтр("ru = 'Сопоставить с '"));
		Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Сопоставить", СопоставитьС));
		
	Иначе
		
		// Требуется <Найти>, <Создать> или <Выбрать>
		Подстроки.Добавить(НСтр("ru = 'Требуется '"));
		//Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Найти"));
		//Подстроки.Добавить(НСтр("ru = ', '"));
		
		Если КомандыДляНовогоЭД.Создать И КомандыДляНовогоЭД.Выбрать Тогда
			
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Создать"));
			Подстроки.Добавить(НСтр("ru = ' или '"));
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Выбрать"));
			
		ИначеЕсли КомандыДляНовогоЭД.Создать Тогда
			
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Создать"));
			
		ИначеЕсли КомандыДляНовогоЭД.Выбрать Тогда
			
			Подстроки.Добавить(ГиперссылкаДействиеСДокументом("Выбрать"));
			
		КонецЕсли;
		
		Подстроки.Добавить(НСтр("ru = '.'"));
		
	КонецЕсли;
	
	Результат = Новый ФорматированнаяСтрока(Подстроки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстНадписиПД()
	
	Если Не МетаданныеЭД.ЕстьФункцияПД Тогда
		ТекстПервичныйДокумент = Новый ФорматированнаяСтрока(НСтр("ru = 'Не требуется.'"));
		Возврат;
	КонецЕсли;
	
	КандидатДляСопоставления = ПервичныйДокументСчетаФактуры;
	СопоставленныеДокументы	 = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РолиДокументовУчета().ПервичныйДокумент);
	
	КомандыДляНовогоЭД = КомандыДляОтраженияДокументаВУчете();
	
	Если ЗначениеЗаполнено(КандидатДляСопоставления) Тогда
		
		КомандыДляНовогоЭД.Сопоставить = Истина;
		
	Иначе
		
		КомандыДляНовогоЭД.Выбрать = Истина;
		КомандыДляНовогоЭД.Создать = Истина;
		
	КонецЕсли;
	
	ТекстПервичныйДокумент = ТекстНадписиДокументаУчета(СопоставленныеДокументы, КомандыДляНовогоЭД, КандидатДляСопоставления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиСФ()
	
	Если Не МетаданныеЭД.ЕстьФункцияСФ Тогда
		ТекстСчетФактура = Новый ФорматированнаяСтрока(НСтр("ru = 'Не требуется.'"));
		Возврат;
	КонецЕсли;
	
	РолиДокументов = РолиДокументовУчета();
	
	КандидатДляСопоставления = СчетФактураПервичногоДокумента;
	СопоставленныеДокументы	 = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РолиДокументов.СчетФактура);
	ОснованияСчетаФактуры	 = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РолиДокументов.ПервичныйДокумент);
	
	КомандыДляНовогоЭД = КомандыДляОтраженияДокументаВУчете();
	
	Если ЗначениеЗаполнено(КандидатДляСопоставления) Тогда
		
		КомандыДляНовогоЭД.Сопоставить = Истина;
		
	ИначеЕсли МетаданныеЭД.ЕстьФункцияПД Тогда
		
		Если ЗначениеЗаполнено(ОснованияСчетаФактуры) Тогда
			КомандыДляНовогоЭД.Создать = Истина;
		Иначе
			КомандыДляНовогоЭД.Выбрать = Истина;
		КонецЕсли;
		
	Иначе
		
		КомандыДляНовогоЭД.Создать = Истина;
		КомандыДляНовогоЭД.Выбрать = Истина;
		
	КонецЕсли;
	
	ТекстСчетФактура = ТекстНадписиДокументаУчета(СопоставленныеДокументы, КомандыДляНовогоЭД, КандидатДляСопоставления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГруппыРолиДокумента(РольДокумента)
	
	ПредставлениеРоли = ПредставлениеРолиДокумента(РольДокумента, МетаданныеЭД.ЭтоКорректировка);
	
	ЭлементФормы = Элементы["Группа" + РольДокумента];
	ЭлементФормы.Заголовок = ПредставлениеРоли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСчетФактуруПервичногоДокумента()
	
	ДокументыУчета = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РолиДокументовУчета().ПервичныйДокумент);
	
	Если Не ЗначениеЗаполнено(ДокументыУчета) Тогда 
		СчетФактураПервичногоДокумента = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументыУчета) = Тип("Массив") Тогда 
		ОснованиеСФ = ДокументыУчета[0];
	Иначе 
		ОснованиеСФ = ДокументыУчета;
	КонецЕсли;
	
	НайденныеСФ = СчетаФактурыПоОснованию(ОснованиеСФ);
	
	Если ЗначениеЗаполнено(НайденныеСФ) Тогда 
		СчетФактураПервичногоДокумента = НайденныеСФ[0];
	Иначе 
		СчетФактураПервичногоДокумента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПервичныйДокументСчетаФактуры()
	
	ДокументыУчета = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РолиДокументовУчета().СчетФактура);
	
	Если Не ЗначениеЗаполнено(ДокументыУчета) Тогда 
		ПервичныйДокументСчетаФактуры = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументыУчета) = Тип("Массив") Тогда 
		СчетФактура = ДокументыУчета[0];
	Иначе 
		СчетФактура = ДокументыУчета;
	КонецЕсли;
	
	НайденныеОснования = ДокументыОснованияСчетаФактуры(СчетФактура);
	
	Если ЗначениеЗаполнено(НайденныеОснования) Тогда 
		ПервичныйДокументСчетаФактуры = НайденныеОснования[0];
	Иначе 
		ПервичныйДокументСчетаФактуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшКандидатовНаСопоставление()
	
	ПолучитьСчетФактуруПервичногоДокумента();
	ПолучитьПервичныйДокументСчетаФактуры();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписи(РольДокумента = Неопределено)
	
	Если РольДокумента = РолиДокументовУчета().ПервичныйДокумент
		Или Не ЗначениеЗаполнено(РольДокумента) Тогда
		УстановитьТекстНадписиПД();
	КонецЕсли;
	
	Если РольДокумента = РолиДокументовУчета().СчетФактура
		Или Не ЗначениеЗаполнено(РольДокумента) Тогда
		УстановитьТекстНадписиСФ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоллекцииДокументов(Коллекция)
	
	Результат = "";
	
	Если Не ЗначениеЗаполнено(Коллекция) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	МаксИндекс	 = Коллекция.Количество() - 1;
	Результат	 = Строка(Коллекция[МаксИндекс]);
	
	Если Коллекция.Количество() > 1 Тогда 
		
		Окончание = Строка(Коллекция.Количество() - 1);
		
		Результат = ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (+ еще %2)'")
					, Результат
					, НРег(Окончание));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьФормыОбИзмененииСвязейДокументов(ДокументИлиМассив)
	
	Если Не ЗначениеЗаполнено(ДокументИлиМассив) Тогда 
		ДокументУчета = Неопределено;
	ИначеЕсли ТипЗнч(ДокументИлиМассив) = Тип("Массив") Тогда 
		ДокументУчета = ДокументИлиМассив[0];
	Иначе 
		ДокументУчета = ДокументИлиМассив;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТипСущности"	, "Документ");
	ПараметрыОповещения.Вставить("BoxID"		, ИдентификаторЭД.ИдентификаторОрганизации);
	ПараметрыОповещения.Вставить("DocumentID"	, ИдентификаторЭД.ИдентификаторТранзакции);
	ПараметрыОповещения.Вставить("Документ1С"	, ДокументУчета);
	
	МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерактивныеДействия

&НаКлиенте
Процедура ПоказатьКоллекциюДокументов(КоллекцияДокументов)
	
	КоличествоДокументов = КоллекцияДокументов.Количество();
	
	Если КоличествоДокументов = 0 Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Электронный документ не отражен в учете'"), 30, ЗаголовокБлокирующихОкон());
		
	ИначеЕсли КоличествоДокументов = 1 Тогда 
		
		ПоказатьЗначение(, КоллекцияДокументов[0]);
		
	Иначе 
		
		ПоказатьЗначение(, КоллекцияДокументов); // TODO: показать список документов
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодборДокументаУчета(РольДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РольДокумента", РольДокумента);
	Обработчик = Новый ОписаниеОповещения("ПродолжитьПодборДокументаУчетаПослеВыбораТипа", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВыборТипаДокументаУчета(РольДокумента, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодборДокументаУчетаПослеВыбораТипа(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда 
		ОбъектМетаданных = ВыбранныйЭлемент.Значение;
	Иначе 
		ОбъектМетаданных = ВыбранныйЭлемент;
	КонецЕсли;
	
	ПоказатьФормуВыбораДокументаУчета(ОбъектМетаданных, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВыбораДокументаУчета(ОбъектМетаданных, ДополнительныеПараметры)
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("Организация", ОписаниеЭД.Покупатель.Ссылка);
	ЗначенияОтбора.Вставить("Контрагент", ОписаниеЭД.Продавец.Ссылка);
	
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
	
	Для Каждого Элемент Из ЗначенияОтбора Цикл 
		
		ЭлементОтбора = ДобавитьЭлементКомпоновки(НастройкиКД.Отбор
			, Элемент.Ключ
			, ВидСравненияКомпоновкиДанных.Равно
			, Элемент.Значение
			, 
			, Истина
			, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	КонецЦикла;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ФиксированныеНастройки", НастройкиКД);
	
	ИмяФормыВыбора = ПодставитьПараметрыВСтроку("%1.ФормаВыбора", ПолноеИмяТаблицы(ОбъектМетаданных));
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ЗавершитьПодборДокументаУчета", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ИмяФормыВыбора
				, ПараметрыВыбора
				, ЭтаФорма
				,
				,
				,
				, ОбработчикВыбора
				, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодборДокументаУчета(ДокументУчета, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда 
		Возврат;
	КонецЕсли;
	
	НачатьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьСПодходящимДокументомУчета(РольДокумента)
	
	ЧтоСопоставить = Неопределено;
	Если РольДокумента = РолиДокументовУчета().СчетФактура Тогда
		ЧтоСопоставить = СчетФактураПервичногоДокумента;
	ИначеЕсли РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда
		ЧтоСопоставить = ПервичныйДокументСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧтоСопоставить) Тогда
		НачатьУстановкуСвязиСЭлектроннымДокументом(ЧтоСопоставить);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры = Неопределено)
	
	ДокументУжеСопоставленСДругимЭД = Не МожноУстановитьСвязьСЭлектроннымДокументом(ДокументУчета, ИдентификаторЭД);
	
	Если ДокументУжеСопоставленСДругимЭД Тогда 
		
		ПредставлениеДокумента = Строка(ДокументУчета);
		Отказ = Истина;
		
		ТекстПредупреждения = НСтр("ru = 'Документ %1 уже сопоставлен с другим электронным документом!'");
		ТекстПредупреждения = ПодставитьПараметрыВСтроку(ТекстПредупреждения, ПредставлениеДокумента);
		ПоказатьПредупреждение(, ТекстПредупреждения
			, 30
			, ЗаголовокБлокирующихОкон());
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУстановкуСвязиСЭлектроннымДокументом(ДокументУчета, ДополнительныеПараметры = Неопределено)
	
	РеквизитыЭД = Новый Структура;
	РеквизитыЭД.Вставить("НомерВходящегоДокумента"	, ОписаниеЭД.Номер);
	РеквизитыЭД.Вставить("ДатаВходящегоДокумента"	, ОписаниеЭД.Дата);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДокументУчета", ДокументУчета);
	ПараметрыОбработчика.Вставить("РеквизитыЭД", РеквизитыЭД);
	СледующийОбработчик = Новый ОписаниеОповещения("ЗавершитьУстановкуСвязиСЭлектроннымДокументом", ЭтотОбъект, ПараметрыОбработчика);
	
	РеквизитыДокументаУчета = РеквизитыДокументаУчета(ДокументУчета);
	
	Если РеквизитыДокументаУчета.НомерВходящегоДокумента = РеквизитыЭД.НомерВходящегоДокумента
		И РеквизитыДокументаУчета.ДатаВходящегоДокумента = РеквизитыЭД.ДатаВходящегоДокумента Тогда 
		
		ВыполнитьОбработкуОповещения(СледующийОбработчик, КодВозвратаДиалога.Нет);
		
	ИначеЕсли Не ЗначениеЗаполнено(РеквизитыДокументаУчета.НомерВходящегоДокумента)
		И Не ЗначениеЗаполнено(РеквизитыДокументаУчета.ДатаВходящегоДокумента) Тогда 
		
		ВыполнитьОбработкуОповещения(СледующийОбработчик, КодВозвратаДиалога.Да);
		
	Иначе 
		
		ПредставлениеДокумента = Строка(ДокументУчета);
		
		ОтличияВНомере = ПодставитьПараметрыВСтроку("Номер входящего документа: %1; номер электронного документа: %2"
							, РеквизитыДокументаУчета.НомерВходящегоДокумента
							, РеквизитыЭД.НомерВходящегоДокумента);
		
		ОтличияВДате = ПодставитьПараметрыВСтроку("Дата входящего документа: %1; дата электронного документа: %2"
							, Формат(РеквизитыДокументаУчета.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy; ДП=-")
							, Формат(РеквизитыЭД.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy; ДП=-"));
		
		ТекстВопроса = НСтр("ru = 'Значения реквизитов ""%1"" отличаются от данных электронного документа:
                             |%2
                             |%3
                             |Обновить реквизиты?'");
		
		ТекстВопроса = ПодставитьПараметрыВСтроку(ТекстВопроса
						, ПредставлениеДокумента
						, ОтличияВНомере
						, ОтличияВДате);
		
		ПоказатьВопрос(СледующийОбработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 30,, ЗаголовокБлокирующихОкон());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьУстановкуСвязиСЭлектроннымДокументом(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	ДокументУчета = ДополнительныеПараметры.ДокументУчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда 
		
		РеквизитыЭД = СвойствоСтруктуры(ДополнительныеПараметры, "РеквизитыЭД");
		ОбновитьРеквизитыДокументаУчета(ДокументУчета, РеквизитыЭД);
		
	КонецЕсли;
	
	УстановитьСвязьСЭлектроннымДокументом(ДокументУчета, ИдентификаторЭД);
	ОбновитьКэшКандидатовНаСопоставление();
	ОбновитьНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискИСопоставлениеДокументовУчета(РольДокумента)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Организация", ОписаниеЭД.Покупатель.Ссылка);
	ПараметрыПоиска.Вставить("Контрагент", ОписаниеЭД.Продавец.Ссылка);
	ПараметрыПоиска.Вставить("Дата", ОписаниеЭД.Дата);
	ПараметрыПоиска.Вставить("Номер", ОписаниеЭД.Номер);
	
	НайденныеДокументы = НайтиПодходящиеДокументыУчета(РольДокумента, ПараметрыПоиска);
	
	Если Не ЗначениеЗаполнено(НайденныеДокументы) Тогда 
		ПредложитьРучнойВыборДокументаУчета(РольДокумента);
	Иначе
		ПредложитьСопоставлениеСНайденнымиДокументами(НайденныеДокументы, РольДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьРучнойВыборДокументаУчета(РольДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РольДокумента", РольДокумента);
	
	Обработчик = Новый ОписаниеОповещения("ПредложитьРучнойВыборДокументаУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Не найдено ни одного подходящего документа учета!
                        |Продолжить выбор документа вручную?'");
	
	ТекстЗаголовка = НСтр("ru = 'Электронный документ не сопоставлен с документом учета.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ОткрытьФормуПодбора", "Да");
	Кнопки.Добавить(КодВозвратаДиалога.Нет);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 30, Кнопки[0].Значение, ТекстЗаголовка, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьСопоставлениеСНайденнымиДокументами(НайденныеДокументы, РольДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РольДокумента"		, РольДокумента);
	ДополнительныеПараметры.Вставить("НайденныеДокументы"	, НайденныеДокументы);
	
	Обработчик = Новый ОписаниеОповещения("ПредложитьРучнойВыборДокументаУчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Найдены подходящие варианты для сопоставления:
                         |%1
                         |Выберите дальнейшее действие.'");
	ТекстВопроса = ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеКоллекцииДокументов(НайденныеДокументы));
	
	ТекстЗаголовка = НСтр("ru = 'Документы для сопоставления.'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("СопоставитьСНайденными", "Сопоставить с найденными");
	Кнопки.Добавить("ОткрытьФормуПодбора", "Указать документ вручную");
	Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 30, Кнопки[0].Значение, ТекстЗаголовка, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьРучнойВыборДокументаУчетаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	НайденныеДокументы	 = СвойствоСтруктуры(ДополнительныеПараметры, "НайденныеДокументы");
	РольДокумента		 = СвойствоСтруктуры(ДополнительныеПараметры, "РольДокумента");
	
	Если ВРег(КодВозврата) = ВРег("ОткрытьФормуПодбора") Тогда 
		
		НачатьПодборДокументаУчета(РольДокумента);
		
	ИначеЕсли ВРег(КодВозврата) = ВРег("СопоставитьСНайденными") Тогда 
		
		УстановитьСвязьСЭлектроннымДокументом(НайденныеДокументы, ИдентификаторЭД);
		ОбновитьКэшКандидатовНаСопоставление();
		ОбновитьНадписи(РольДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

//+asevryugin@PCRU.LOCAL, 2020-09-15 08:56:48
&НаКлиенте
// Параметры:
//	Document				- СОМ Объект	- обрабатываемый электронный документ
//	СтруктураSellerContent	- Структура 	- контент отправителя, соответствующий SellerContent, обрабатываемого электронного документа
//	СтруктураBuyerContent 	- Структура 	- контент получателя, соответствующий BuyerContent, обрабатываемого электронного документа 
Функция СформироватьДанныеОПодписях(Document, Content, BuyerContent)
	
	Результат = Новый Структура;
	
	Результат.Вставить("SellerSigner", МетодКлиента("Модуль_Клиент", "Новый_Signer"));
	Результат.Вставить("BuyerSigner" , МетодКлиента("Модуль_Клиент", "Новый_Signer"));
	
	Результат.Вставить("SenderSignature"   , МетодКлиента("Модуль_Клиент", "Новый_Signature"));
	Результат.Вставить("RecipientSignature", МетодКлиента("Модуль_Клиент", "Новый_Signature"));
	
	Результат.Вставить("DocumentMetaData", Новый Структура("Timestamp, DocumentID, SenderSignatureStatus, SenderName, RecipientName"));
	
	Результат.DocumentMetaData.DocumentID			 = Document.DocumentID;
	Результат.DocumentMetaData.TimeStamp			 = Document.TimeStamp;
	Результат.DocumentMetaData.SenderSignatureStatus = Document.SenderSignatureStatus;
	
	SenderSignature = Document.GetSenderSignature();
	Если SenderSignature <> Неопределено Тогда
		Результат.DocumentMetaData.SenderName = SenderSignature.Certificate.OrganizationName;
	КонецЕсли;
	
	RecipientSignature = Document.GetRecipientSignature();
	Если RecipientSignature <> Неопределено Тогда
		Результат.DocumentMetaData.RecipientName = RecipientSignature.Certificate.OrganizationName;
	КонецЕсли;
	
	Если Content.Свойство("Signer") Тогда
		
		Результат.SellerSigner = Content.Signer;
		
	ИначеЕсли Content.Свойство("Signers") И ЗначениеЗаполнено(Content.Signers) Тогда
		
		Результат.SellerSigner = Content.Signers[0].SignerDetails;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(BuyerContent) Тогда
		
		Если BuyerContent.Свойство("Signer") Тогда
			
			Результат.BuyerSigner = BuyerContent.Signer;
			
		ИначеЕсли BuyerContent.Свойство("Signers") И ЗначениеЗаполнено(BuyerContent.Signers) Тогда
			
			Результат.BuyerSigner = BuyerContent.Signers[0].SignerDetails;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetSenderSignature()	  , Результат.SenderSignature);
	МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", Document.GetRecipientSignature(), Результат.RecipientSignature);
	
	Возврат Результат;
	
КонецФункции	
&НаКлиенте
Функция СформироватьПечатнуюФормуПоДокументуДиадока(Document)
	
	Результат = Неопределено;
	
	ПротоСтруктура		 = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Ложь);
	ПротоСтруктураОтвета = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document, Истина);
	
	Если ПротоСтруктура.Свойство("Контент") Тогда
		
		
		ПротоКонтентОтвета = Неопределено;
		ПротоСтруктураОтвета.Свойство("Контент", ПротоКонтентОтвета);
		
		ПротоКонтент		 = ПротоСтруктура.Контент;
		ТипКонтента			 = ПротоСтруктура.ТипКонтента;
		ТипДокумента		 = Document.Type;
		ДанныеШтампа		 = СформироватьДанныеОПодписях(Document, ПротоКонтент, ПротоКонтентОтвета);
		
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПротоКонтентОтвета"	, ПротоКонтентОтвета);
		ДопПараметры.Вставить("ДанныеШтампа"		, ДанныеШтампа);
		ДопПараметры.Вставить("ПоказатьДопСведения"	, Истина);
		
		Результат = МетодСервераБезКонтекста("ПечатныеФормы", "ПечатнаяФормаПротоКонтента", ПротоКонтент, ТипКонтента, ТипДокумента, ДопПараметры);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//+/asevryugin@PCRU.LOCAL, 2020-09-15 08:56:48

&НаКлиенте
Процедура НачатьСозданиеДокументаУчета(РольДокумента)
	
	Если ВЭлектронномДокументеУказаноНесколькоУчастниковЭДО() Тогда
		
		ТекстСообщения = НСтр("ru = 'Электронный документ содержит сведения о нескольких
                               |покупателях или продавцах! Автоматическое создание
                               |документов информационной базы на основании таких 
                               |электронных документов не поддерживается.
                               |Сопоставьте документы вручную.'");
		
		ПоказатьПредупреждение(, ТекстСообщения, 30, ЗаголовокБлокирующихОкон());
		
		Возврат;
		
	КонецЕсли;
	
	ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(ОписаниеЭД);
	//+asevryugin@PCRU.LOCAL, 2020-09-15 08:31:48
	Document= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ОписаниеЭД.Идентификатор.ИдентификаторОрганизации).GetDocumentById(ОписаниеЭД.Идентификатор.ИдентификаторТранзакции);
	PCRU_ИмяФайла = Document.Title;
	//FileName	
	Если Document.type <> "Nonformalized" и Document.type <> "NonformalizedProforma"  Тогда
			PCRU_РасширениеФайла = "XLSX";
			ТД =   СформироватьПечатнуюФормуПоДокументуДиадока(Document);
			ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(PCRU_РасширениеФайла);
			ТД.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.XLSX) ;
			ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
			PCRU_ДвоичныеДанныеДокумента = 	Base64Строка(ДД);
			УдалитьФайлы(ИмяВременногоФайла);
		Иначе
			PCRU_РасширениеФайла = СтрПолучитьСтроку(СтрЗаменить(Document.FileName,".",Символы.ПС),СтрЧислоСтрок(СтрЗаменить(Document.FileName,".",Символы.ПС)));    
			Если Document.HasCustomPrintForm = Ложь Тогда
				ИмяВременногоФайла=	ПолучитьИмяВременногоФайла(PCRU_РасширениеФайла);
				Document.SaveSenderContent(ИмяВременногоФайла);
			Иначе
				PCRU_РасширениеФайла = "pdf";
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(PCRU_РасширениеФайла);
				Document.GetPrintForm(ИмяВременногоФайла, 30);
			КонецЕсли;
			ДД = новый ДвоичныеДанные(ИмяВременногоФайла);
			PCRU_ДвоичныеДанныеДокумента = 	Base64Строка(ДД);
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЕсли; 
	//+/asevryugin@PCRU.LOCAL, 2020-09-15 08:31:48
	ОшибкиЗаполнения = Неопределено;
	Если ЕстьОшибкиЗаполненияЭД(РольДокумента, ОшибкиЗаполнения) Тогда 
		
		ТекстСообщения = НСтр("ru = 'Не удалось отразить ""%1"" в учете по причине:
                               |%2
                               |Сопоставьте документы вручную.'");
		
		ТекстСообщения = ПодставитьПараметрыВСтроку(ТекстСообщения
							, ПредставлениеЭД(ОписаниеЭД, РольДокумента)
							, СтрокаИзМассиваПодстрок(ОшибкиЗаполнения, Символы.ПС));
		
		ПоказатьПредупреждение(, ТекстСообщения, 30, ЗаголовокБлокирующихОкон());
		
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьНоменклатураНаКонтроле() Тогда 
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПродолжитьСозданиеДокументаУчета", Истина);
		ДополнительныеПараметры.Вставить("РольДокумента", РольДокумента);
		
		ПоказатьПомощникСопоставленияНоменклатуры(ДополнительныеПараметры);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыСозданияДокумента = Новый Структура;
	ПараметрыСозданияДокумента.Вставить("РольДокумента", РольДокумента);
	Обработчик = Новый ОписаниеОповещения("ПродолжитьСозданиеДокументаУчетаПослеВыбораТипа", ЭтотОбъект, ПараметрыСозданияДокумента);
	
	ПоказатьВыборТипаДокументаУчета(РольДокумента, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеДокументаУчетаПослеВыбораТипа(ВыбранныйЭлемент, ПараметрыСозданияДокумента) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("ЭлементСпискаЗначений") Тогда 
		ОбъектМетаданных = ВыбранныйЭлемент.Значение;
	Иначе 
		ОбъектМетаданных = ВыбранныйЭлемент;
	КонецЕсли;
	
	ПараметрыСозданияДокумента.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	
	ЗапроситьПодтверждениеПередСозданиемДокументаУчета(ПараметрыСозданияДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПодтверждениеПередСозданиемДокументаУчета(ПараметрыСозданияДокумента)
	
	Обработчик = Новый ОписаниеОповещения("ЗавершитьСозданиеДокументаУчета", ЭтаФорма, ПараметрыСозданияДокумента);
	
	ЗапрашиватьПодтверждение = ЗапрашиватьПодтверждениеПередСозданиемДокумента();
	
	Если Не ЗапрашиватьПодтверждение Тогда 
		
		ВыполнитьОбработкуОповещения(Обработчик, "Продолжить");
		
	Иначе 
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru = 'ОК'"));
		Кнопки.Добавить("ПродолжитьИБольшеНеСпрашивать", НСтр("ru = 'ОК (запомнить выбор)'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Документ ""%1"" будет заполнен и записан автоматически. Продолжить?'");
		ТекстВопроса = ПодставитьПараметрыВСтроку(ТекстВопроса
							, ПредставлениеОбъектаМетаданых(ПараметрыСозданияДокумента.ОбъектМетаданных));
		
		ПоказатьВопрос(Обработчик
			, ТекстВопроса
			, Кнопки
			, 60
			, Кнопки[0].Значение
			, ЗаголовокБлокирующихОкон()
			, КодВозвратаДиалога.Отмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСозданиеДокументаУчета(ОтветПользователя, ПараметрыСозданияДокумента) Экспорт
	
	Если ОтветПользователя <> "Продолжить" 
		И ОтветПользователя <> "ПродолжитьИБольшеНеСпрашивать" Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОтветПользователя = "ПродолжитьИБольшеНеСпрашивать" Тогда 
		ОтключитьЗапросПодтвержденияПередСозданиемДокумента();
	КонецЕсли;
	
	ЗавершитьСозданиеДокументаУчетаНаСервере(ПараметрыСозданияДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьСозданиеДокументаУчетаНаСервере(ПараметрыСозданияДокумента)
	
	СоздатьДокументУчета(ОписаниеЭД, ПараметрыСозданияДокумента.ОбъектМетаданных);
	ОбновитьКэшКандидатовНаСопоставление();
	ОбновитьНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборТипаДокументаУчета(РольДокумента, Обработчик)
	
	ВидыМетаданных = ДоступныеВидыМетаданных(РольДокумента);
	
	Если Не ЗначениеЗаполнено(ВидыМетаданных) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВидыМетаданных.Количество() = 1 Тогда 
		
		ВыполнитьОбработкуОповещения(Обработчик, ВидыМетаданных[0]);
		
	Иначе 
		
		ЭлементФормы = СвязанныйЭлементУправления(РольДокумента);
		
		СписокМетаданных = Новый СписокЗначений;
		СписокМетаданных.ЗагрузитьЗначения(ВидыМетаданных);
		ПоказатьВыборИзМеню(Обработчик, СписокМетаданных, ЭлементФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомощникСопоставленияНоменклатуры(ДополнительныеПараметры = Неопределено)
	
	ДанныеНоменклатуры = ПодготовитьДанныеНоменклатурыДляСопоставления(ОписаниеЭД);
	
	Если Не ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("АдресНоменклатураДляСопоставления",  ДанныеНоменклатуры);
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповоеСопоставлениеНоменклатуры"
		, ПараметрыФормы
		, ЭтаФорма
		, "ЗавершитьСопоставлениеНоменклатуры"
		, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСопоставлениеНоменклатуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.СопоставлениеВыполнено Тогда
		ПрочитатьРезультатыСопоставленияНоменклатуры(ОписаниеЭД, РезультатЗакрытия.РезультатСопоставления);
	КонецЕсли;
	
	ПродолжитьСозданиеДокументаУчета = СвойствоСтруктуры(ДополнительныеПараметры, "ПродолжитьСозданиеДокументаУчета", Ложь);
	Если ПродолжитьСозданиеДокументаУчета Тогда 
		РольДокумента = СвойствоСтруктуры(ДополнительныеПараметры, "РольДокумента");
		НачатьСозданиеДокументаУчета(РольДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМетаданными

&НаСервере
Функция ПравилаЗагрузки(РольДокумента)
	
	ТипДокумента	 = МетаданныеЭД.ТипЭД;
	ФункцияДокумента = Неопределено;
	
	Если РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда // Первичный документ можно создавать по данным входящего СФ
		
		ФункцияДокумента = "Basic";
		
	ИначеЕсли РольДокумента = РолиДокументовУчета().СчетФактура
		И МетаданныеЭД.ЕстьФункцияСФ Тогда // СФ можно создавать только на основании СЧФ/КСЧФ
		
		ФункцияДокумента = "Invoice";
		
	КонецЕсли;
	
	Результат = ПравилаЗагрузкиПоТипуКонтента(ТипДокумента, ФункцияДокумента);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДоступныеВидыМетаданных(РольДокумента)
	
	ПравилаЗагрузки = ПравилаЗагрузки(РольДокумента);
	
	Результат = Новый Массив;
	
	Для Каждого Правило Из ПравилаЗагрузки Цикл 
		
		ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Правило.Ключ);
		Результат.Добавить(ИдентификаторОМ);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеИмяТаблицы(ОписаниеОбъектаМетаданных)
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ОписаниеОбъектаМетаданных);
	
	Возврат ОбъектМетаданных.ПолноеИмя();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеОбъектаМетаданых(ОписаниеОбъектаМетаданных)
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ОписаниеОбъектаМетаданных);
	
	Возврат ОбъектМетаданных.Синоним;
	
КонецФункции

#КонецОбласти

#Область ПоискСозданиеИСпоставлениеДокументов

&НаКлиенте
Функция ВЭлектронномДокументеУказаноНесколькоУчастниковЭДО()
	
	Результат = Ложь;
	
	Если ТипЗнч(ОписаниеЭД.Покупатель) = Тип("Массив")
		Или ТипЗнч(ОписаниеЭД.Продавец) = Тип("Массив") Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЕстьОшибкиЗаполненияЭД(РольДокумента, Ошибки = Неопределено)
	
	Результат = Ложь;
	
	Если Ошибки = Неопределено Тогда 
		Ошибки = Новый Массив;
	КонецЕсли;
	
	Если МетаданныеЭД.ЭтоКорректировка И РольДокумента = РолиДокументовУчета().ПервичныйДокумент Тогда 
		
		ДокументОснованиеКорректировки		 = СвойствоСтруктуры(ОписаниеЭД, "КорректируемыйДокумент.ПервичныйДокумент");
		СчетФактураОснованиеКорректировки	 = СвойствоСтруктуры(ОписаниеЭД, "КорректируемыйДокумент.СчетФактура");
		
		КорректируемыйДокументНомер	 = СвойствоСтруктуры(ОписаниеЭД, "КорректируемыйДокумент.Номер");
		КорректируемыйДокументДата	 = СвойствоСтруктуры(ОписаниеЭД, "КорректируемыйДокумент.Дата");
		КорректируемыйДокументДата	 = Формат(КорректируемыйДокументДата, "ДФ=dd.MM.yyyy; ДП=-");
		
		Если Не ЗначениеЗаполнено(ДокументОснованиеКорректировки) Тогда 
			
			ОписаниеОш = НСтр("ru = 'Для корректировки не найден документ-основание №%1 от %2!'");
			ОписаниеОш = ПодставитьПараметрыВСтроку(ОписаниеОш, КорректируемыйДокументНомер, КорректируемыйДокументДата);
			Ошибки.Добавить(ОписаниеОш);
			
		ИначеЕсли ТипЗнч(ДокументОснованиеКорректировки) = Тип("Массив") И ДокументОснованиеКорректировки.Количество() > 1 Тогда 
			
			ОписаниеОш = НСтр("ru = 'Для корректировки найдено несколько документов-оснований №%1 от %2.'");
			ОписаниеОш = ПодставитьПараметрыВСтроку(ОписаниеОш, КорректируемыйДокументНомер, КорректируемыйДокументДата);
			Ошибки.Добавить(ОписаниеОш);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ЗначениеЗаполнено(Ошибки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитыДокументаУчета(ДокументУчета)
	
	ЗапрашиваемыеРеквизиты = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПроверяемыеРеквизитыДокументаУчета", ДокументУчета);
	
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУчета, ЗапрашиваемыеРеквизиты);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыДокументаУчета(ДокументУчета, ЗначенияРеквизитов)
	
	МетаданныеОбъекта = ДокументУчета.Метаданные();
	
	СоответствиеРеквизитов = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПроверяемыеРеквизитыДокументаУчета", ДокументУчета);
	
	ИзменяемыеРеквизиты = Новый Структура;
	
	ИмяРеквизитаНомер = СоответствиеРеквизитов.НомерВходящегоДокумента;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаНомер, МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизитаНомер) Тогда
		ИзменяемыеРеквизиты.Вставить(ИмяРеквизитаНомер, ЗначенияРеквизитов.НомерВходящегоДокумента);
	КонецЕсли;
	
	ИмяРеквизитаДата = СоответствиеРеквизитов.ДатаВходящегоДокумента;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизитаДата, МетаданныеОбъекта)
		Или ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, ИмяРеквизитаДата) Тогда
		ИзменяемыеРеквизиты.Вставить(ИмяРеквизитаДата, ЗначенияРеквизитов.ДатаВходящегоДокумента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИзменяемыеРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ДокументУчета.ПолучитьОбъект();
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ДокументОбъект.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Заблокировать();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ИзменяемыеРеквизиты);
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		ШаблонКомментария = НСтр("ru = 'Не удалось обновить реквизиты входящего документа:
                                  |%1'");
		
		КомментарийЖР = СтрШаблон(ШаблонКомментария, ПодробноеПредставлениеОшибки(Ошибка));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Диадок'")
			, УровеньЖурналаРегистрации.Ошибка
			, МетаданныеОбъекта
			, ДокументУчета
			, КомментарийЖР);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НайтиПодходящиеДокументыУчета(РольДокумента, ПараметрыПоиска)
	
	Результат = Новый Массив;
	
	ПравилаЗагрузки = ПравилаЗагрузки(РольДокумента);
	
	Для Каждого Правило Из ПравилаЗагрузки Цикл 
		
		ОбъектМетаданных = Правило.Ключ;
		СоответствиеРеквизитов = Правило.Значение;
		
		ЗначенияРеквизитов = Новый Структура;
		
		Для Каждого ПараметрПоиска Из ПараметрыПоиска Цикл 
			
			ИмяРеквизита = СоответствиеРеквизитов[ПараметрПоиска.Ключ];
			ЗначениеРеквизита = ПараметрПоиска.Значение;
			
			ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЦикла;
		
		Буфер = НайтиСсылкиПоЗначениямРеквизитов(ОбъектМетаданных, ЗначенияРеквизитов);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Буфер, Истина);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив учетных документов, сопоставленных с электронным документом.
//
// Параметры:
//  Идентификатор - Структура - содержит поля:
//     * ИдентификаторТранзакции	 - Строка - messageId+entityId
//     * ИдентификаторОрганизации	 - Строка - boxId
// 
// Возвращаемое значение:
//  Массив - содержит ссылки на документы учета (первичные документы и СФ).
//
&НаСервере
Функция СопоставленныеУчетныеДокументы(Идентификатор, РольДокумента = Неопределено)
	
	НайденныеДокументы = МетодСервера("Модуль_ИнтеграцияУниверсальный", "СопоставленныеУчетныеДокументы", Идентификатор);
	
	Если РольДокумента = Неопределено Тогда 
		Возврат НайденныеДокументы;
	КонецЕсли;
	
	ОтборПоМетаданным = ДоступныеВидыМетаданных(РольДокумента);
	
	Результат = Новый Массив;
	
	Для Каждого ДокументУчета Из НайденныеДокументы Цикл 
		
		ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ДокументУчета.Метаданные());
		
		Если ОтборПоМетаданным.Найти(ОбъектМетаданных) <> Неопределено Тогда 
			Результат.Добавить(ДокументУчета);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьДокументУчета(ДанныеЭД, ОписаниеОбъектаМетаданных)
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ОписаниеОбъектаМетаданных);
	
	НовыйОбъект = НовыйДокументИнформационнойБазы(ДанныеЭД, ОбъектМетаданных);
	
	НачатьТранзакцию();
	Попытка
	
		НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
		//+asevryugin@PCRU.LOCAL, 2020-09-15 07:41:16
		
		ДвоичныеДанные = Base64Значение(ЭтаФорма.PCRU_ДвоичныеДанныеДокумента);
        адресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	    СтрПарам = РаботаСФайлами.ПараметрыДобавленияФайла();
		СтрПарам.ВладелецФайлов = НовыйОбъект.Ссылка;
		СтрПарам.ИмяБезРасширения  = ЭтаФорма.PCRU_ИмяФайла;
		СтрПарам.РасширениеБезТочки  = ЭтаФорма.PCRU_РасширениеФайла;
		
		РаботаСФайлами.ДобавитьФайл(СтрПарам,адресВХранилище);
		//+/asevryugin@PCRU.LOCAL, 2020-09-15 07:41:16
		УстановитьСвязьСЭлектроннымДокументом(НовыйОбъект.Ссылка, ИдентификаторЭД);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОш = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ учета по причине:
                           |%1'");
		ТекстОшибки = ПодставитьПараметрыВСтроку(ТекстОшибки, ОписаниеОш);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСопоставлениеДокументов(РольДокумента)
	
	ДокументыУчета = СопоставленныеУчетныеДокументы(ИдентификаторЭД, РольДокумента);
	РазорватьСвязьСЭлектроннымДокументом(ДокументыУчета);
	ОбновитьКэшКандидатовНаСопоставление();
	ОбновитьНадписи();
	
КонецПроцедуры

// Устанавливает связь учетных документов с электронным документом.
//
// Параметры:
//  ДокументИлиМассив	 - ДокументСсылка, Массив - документы учета, которые нужно сопоставить с ЭД;
//  Идентификатор		 - Структура	 - идентификатор электронного документа, с которым нужно сопоставить учетные документы;
//                         Неопределено	 - учетные документы будут отвязаны от электронного документа;
//
&НаСервере
Процедура УстановитьСвязьСЭлектроннымДокументом(ДокументИлиМассив, Идентификатор)
	
	Если ТипЗнч(ДокументИлиМассив) = Тип("Массив") Тогда 
		ДокументыДляОбработки = ДокументИлиМассив;
	Иначе 
		ДокументыДляОбработки = Новый Массив;
		ДокументыДляОбработки.Добавить(ДокументИлиМассив);
	КонецЕсли;
	
	Для Каждого ДокументУчета Из ДокументыДляОбработки Цикл 
		
		Если Не ЗначениеЗаполнено(ДокументУчета) Тогда 
			Продолжить;
		КонецЕсли;
		
		МетодСервера(, "Установить_DocumentID_Для_Документ"
			, ДокументУчета
			, ИдентификаторЭД.ИдентификаторТранзакции
			, ИдентификаторЭД.ИдентификаторОрганизации);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет связь учетных документов с электронным документом.
//
// Параметры:
//  ДокументИлиМассив	 - ДокументСсылка, Массив - документы учета, которые нужно сопоставить с ЭД;
//  Идентификатор		 - Структура	 - идентификатор электронного документа, с которым нужно сопоставить учетные документы;
//                         Неопределено	 - учетные документы будут отвязаны от электронного документа;
//
&НаСервере
Процедура РазорватьСвязьСЭлектроннымДокументом(ДокументИлиМассив)
	
	Если ТипЗнч(ДокументИлиМассив) = Тип("Массив") Тогда 
		ДокументыДляОбработки = ДокументИлиМассив;
	Иначе 
		ДокументыДляОбработки = Новый Массив;
		ДокументыДляОбработки.Добавить(ДокументИлиМассив);
	КонецЕсли;
	
	Для Каждого ДокументУчета Из ДокументыДляОбработки Цикл 
		
		МетодСервера(, "Установить_DocumentID_Для_Документ"
			, ДокументУчета
			, ""
			, "");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МожноУстановитьСвязьСЭлектроннымДокументом(ДокументУчета, Идентификатор)
	
	ИдентификаторСвязанногоЭД = ИдентификаторСвязанногоЭлектронногоДокумента(ДокументУчета);
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторСвязанногоЭД.ИдентификаторТранзакции)
		Или ИдентификаторСвязанногоЭД.ИдентификаторТранзакции = Идентификатор.ИдентификаторТранзакции Тогда 
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИдентификаторСвязанногоЭлектронногоДокумента(ДокументУчета)
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторОрганизации");
	Результат.Вставить("ИдентификаторТранзакции");
	
	Результат.ИдентификаторТранзакции = МетодСервера(, "Документ_2_DocumentID", ДокументУчета);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПоискСозданиеИСопоставлениеНоменклатуры

&НаСервере
Функция ЕстьНоменклатураНаКонтроле()
	
	НоменклатураНаКонтроле = НоменклатураНаКонтроле(ОписаниеЭД);
	
	Возврат ЗначениеЗаполнено(НоменклатураНаКонтроле);
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеНоменклатурыДляСопоставления(ДанныеЭД)
	
	ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(ДанныеЭД);
	
	Результат = Неопределено;
	
	ДанныеНоменклатуры = ТаблицаНоменклатурыДляСопоставления(ДанныеЭД);
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда 
		Результат = ПоместитьВоВременноеХранилище(ДанныеНоменклатуры, ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПрочитатьРезультатыСопоставленияНоменклатуры(ДанныеЭД, АдресРезультатаСопоставления)
	
	ТаблицаСопоставления = ПолучитьИзВременногоХранилища(АдресРезультатаСопоставления);
	
	Для Каждого Стр Из ДанныеЭД.ТоварнаяЧасть Цикл 
		
		ДанныеНоменклатуры = Стр.Номенклатура;
		
		Если ЗначениеЗаполнено(ДанныеНоменклатуры.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("КлючСтроки", Стр.КлючСтроки);
		
		НайденныеСтроки = ТаблицаСопоставления.НайтиСтроки(ОтборСтрок);
		
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда 
			ДанныеНоменклатуры.Номенклатура = НайденныеСтроки[0].Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтентом

&НаКлиентеНаСервереБезКонтекста
Функция МетаданныеЭлектронногоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ТипЭД");
	Результат.Вставить("ФункцияЭД");
	Результат.Вставить("ЭтоКорректировка", Ложь);
	Результат.Вставить("ЭтоИсправление", Ложь);
	Результат.Вставить("ЭтоАванс", Ложь);
	
	Результат.Вставить("ЕстьФункцияСФ", Ложь);
	Результат.Вставить("ЕстьФункцияПД", Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФункцияСчетаФактуры(Знач ФункцияЭД)
	
	Результат = Ложь;
	
	ФункцияЭД = ВРег(ФункцияЭД);
	
	ПодстрокиПоиска = Новый Массив;
	ПодстрокиПоиска.Добавить("Invoice");
	ПодстрокиПоиска.Добавить("СЧФ");
	ПодстрокиПоиска.Добавить("КСЧФ");
	
	Для Каждого Подстрока Из ПодстрокиПоиска Цикл 
		
		Если Найти(ФункцияЭД, ВРег(Подстрока)) > 0 Тогда 
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФункцияПервичногоДокумента(Знач ФункцияЭД)
	
	Результат = Ложь;
	
	ФункцияЭД = ВРег(ФункцияЭД);
	
	ПодстрокиПоиска = Новый Массив;
	ПодстрокиПоиска.Добавить("Basic");
	ПодстрокиПоиска.Добавить("ДОП");
	ПодстрокиПоиска.Добавить("ДИС");
	
	Для Каждого Подстрока Из ПодстрокиПоиска Цикл 
		
		Если Найти(ФункцияЭД, ВРег(Подстрока)) > 0 Тогда 
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкиПользователей

&НаСервереБезКонтекста
Функция ЗапрашиватьПодтверждениеПередСозданиемДокумента()
	
	КлючНастроек = КлючНастроек_ЗапрашиватьПодтверждениеПередСозданиемДокумента();
	Результат	 = НастройкиПользователяЗагрузить(КлючНастроек, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтключитьЗапросПодтвержденияПередСозданиемДокумента()
	
	КлючНастроек = КлючНастроек_ЗапрашиватьПодтверждениеПередСозданиемДокумента();
	НастройкиПользователяСохранить(КлючНастроек, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючОбъектаНастроек()
	
	Возврат "ДиадокСтандарт/НастройкиПользователя";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек_ЗапрашиватьПодтверждениеПередСозданиемДокумента()
	
	Возврат "ЗапрашиватьПодтверждениеПередСозданиемДокумента";
	
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиПользователяЗагрузить(КлючНастроек, ЗначениеПоУмолчанию)
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъектаНастроек()
					, КлючНастроек
					, ЗначениеПоУмолчанию);
	
	Возврат Результат;
	
КонецФункции // НастройкиПользователяЗагрузить()

&НаСервереБезКонтекста
Процедура НастройкиПользователяСохранить(КлючНастроек, Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъектаНастроек()
		, КлючНастроек
		, Настройки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОберткиДляВызоваУниверсальныхМетодов

&НаСервере
Функция Перечисление_ВидыЭД()
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "Перечисление_ВидыЭД");
	
КонецФункции

&НаСервере
Функция НайтиСсылкиПоЗначениямРеквизитов(ОбъектыМетаданных, ПараметрыПоиска)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "НайтиСсылкиПоЗначениямРеквизитов", ОбъектыМетаданных, ПараметрыПоиска);
	
КонецФункции

&НаСервере
Функция ВидыВходящихДокументов()
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "ВидыВходящихДокументов");
	
КонецФункции

&НаСервере
Функция ПравилаЗагрузкиПоТипуКонтента(Знач ТипЭД, Знач ФункцияЭД)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПравилаЗагрузкиПоТипуКонтента", ТипЭД, ФункцияЭД);
	
КонецФункции

&НаСервере
Функция СсылкаОбъектаПоСвойствам(СвойстваОбъекта, ВариантыПоиска, ОписаниеОбъектаМетаданных)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "СсылкаОбъектаПоСвойствам"
				, СвойстваОбъекта
				, ВариантыПоиска
				, ОписаниеОбъектаМетаданных);
	
КонецФункции

&НаСервере
Процедура ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ(ДанныеЭД)
	
	МетодСервера("Модуль_ИнтеграцияУниверсальный", "ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ", ДанныеЭД);
	//+asevryugin@PCRU.LOCAL, 2020-09-09 12:13:05
	Для каждого Элемент Из ДанныеЭД.ТоварнаяЧасть Цикл
	    НаименованиеНоменклатуры =  Элемент.НоменклатураПоставщика.Наименование;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	ИЛИ Номенклатура.НаименованиеПолное = &Наименование";
		Запрос.УстановитьПараметр("Наименование",НаименованиеНоменклатуры);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			 Элемент.Номенклатура.Номенклатура =  Выборка.Ссылка;
		КонецЦикла;
		// 
		Если не ЗначениеЗаполнено(Элемент.Номенклатура.Номенклатура)  Тогда
		   СправочникН                     = Справочники.Номенклатура.СоздатьЭлемент();
		   СправочникН.Наименование        = НаименованиеНоменклатуры;
		   //СправочникН.ПолноеНаименование  = НаименованиеНоменклатуры;
		   СправочникН.ЕдиницаИзмерения    = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		   Если СтрЧислоВхождений(НаименованиеНоменклатуры,"Услуг") > 0 Тогда
               СправочникН.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
		   Иначе	
	 		   СправочникН.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары");
		   КонецЕсли; 
		   СправочникН.Записать();
		   Элемент.Номенклатура.Номенклатура = СправочникН.Ссылка;
	   КонецЕсли; 
	КонецЦикла; 
	//+/asevryugin@PCRU.LOCAL, 2020-09-09 12:13:05
	
КонецПроцедуры

&НаСервере
Функция НовыйДокументИнформационнойБазы(ДанныеЭД, ОписаниеОбъектаМетаданных)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "НовыйДокументИнформационнойБазы"
				, ДанныеЭД
				, ОписаниеОбъектаМетаданных);
	
КонецФункции

&НаСервере
Функция СчетаФактурыПоОснованию(ДокументОснование)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "СчетаФактурыПоОснованию"
				, ДокументОснование);
	
КонецФункции

&НаСервере
Функция ДокументыОснованияСчетаФактуры(СчетФактура)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "ДокументыОснованияСчетаФактуры"
				, СчетФактура);
	
КонецФункции

&НаСервере
Функция ДанныеЭлектронногоДокумента(ИдентификаторДокумента, Контент)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "ДанныеЭлектронногоДокумента"
				, ИдентификаторДокумента
				, Контент);
	
КонецФункции

&НаСервере
Функция НоменклатураНаКонтроле(ДанныеЭД)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "НоменклатураНаКонтроле", ДанныеЭД);
	
КонецФункции

&НаСервере
Функция ТаблицаНоменклатурыДляСопоставления(ДанныеЭД)
	
	Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "ТаблицаНоменклатурыДляСопоставления", ДанныеЭД);
	
КонецФункции

&НаСервере
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	
	Возврат МетодСервера(, "ПреобразоватьМассивСтруктурВТаблицуЗначений", МассивСтруктур);
	
КонецФункции

#КонецОбласти