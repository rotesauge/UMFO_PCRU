
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

//{ События формы

	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		СпособФормированияПечатнойФормы		= Параметры.СпособФормированияПечатнойФормы;
		ВнешняяПечатнаяФорма				= Параметры.ВнешняяПечатнаяФорма;
		ФормироватьСчетНаОсновании			= Параметры.ФормироватьСчетНаОсновании;
		СписокФормироватьСчетНаОсновании	= Параметры.СписокФормироватьСчетНаОсновании;
		
		Параметры.Свойство("СтандартнаяФормаСчетаНаОплату", СтандартнаяФормаСчетаНаОплату);
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриОткрытии(Отказ)

		ПлатформаПриОткрытии(Отказ);

		Если НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			СпособФормированияПечатнойФормы	= 0;
		Иначе
			СпособФормированияПечатнойФормы	= 1;
		КонецЕсли;
		
		УстановитьЗаголовокФормы();
		ЗаполнитьСписки();
		УправлениеФормой();
		ПереключитьСтраницуПанелиСпособыФормированияПФ();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
	КонецПроцедуры

//} События формы

//{ Обработчики событий

	&НаКлиенте
	Процедура СпособФормированияПечатнойФормыПриИзменении(Элемент)
		
		ПереключитьСтраницуПанелиСпособыФормированияПФ();
		НастроитьВидимость_ГруппаСтандартнаяФормаСчетаНаОплату();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ФормироватьСчетНаОснованииПриИзменении(Элемент)
		
		НастроитьВидимость_ГруппаСтандартнаяФормаСчетаНаОплату();
		УправлениеЗаголовками_ИнформацияПоСтандартнаяПФ();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СтандартнаяФормаСчетаНаОплатуПриИзменении(Элемент)
		
		УправлениеЗаголовками_ИнформацияПоСтандартнаяПФ();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Ок(Команда)
						
		Если СпособФормированияПечатнойФормы <> 1 Тогда
			
			ВнешняяПечатнаяФорма = Неопределено;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ВнешняяПечатнаяФорма) Тогда
			
			СообщениеПользователю		= Новый СообщениеПользователю;
			СообщениеПользователю.Текст	= НСтр("ru = 'Необходимо выбрать внешнюю печатную форму!'");
			СообщениеПользователю.Сообщить();
			
			Возврат;
			
		ИначеЕсли МетодСервера("Модуль_РаботаСВнешнимиПечатнымиФормами", "ВнешняяПечатнаяФормаЯвляетсяМодулемДиадок", ВнешняяПечатнаяФорма) Тогда	
			
			СообщениеПользователю		= Новый СообщениеПользователю;
			СообщениеПользователю.Текст	= НСтр("ru = 'Выбранную обработку нельзя использовать в качестве печатной формы!'");
			СообщениеПользователю.Сообщить();
			
			ВнешняяПечатнаяФорма = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		Если Не ОпцияСтандартнаяФормаСчетаНаОплатуДоступна() Тогда
			СтандартнаяФормаСчетаНаОплату = Ложь;
		КонецЕсли;
		
		ПараметрыЗакрытия = ПараметрыЗакрытияФормы();
		ЗаполнитьЗначенияСвойств(ПараметрыЗакрытия, ЭтаФорма);
		ПараметрыЗакрытия.Ок = Истина;
		ПараметрыЗакрытия.ТипДокумента = Параметры.ТипДокумента;
		
		Закрыть(ПараметрыЗакрытия);
			
	КонецПроцедуры

//} Обработчики событий

//{ Управление формой

	&НаКлиенте
	Процедура УправлениеФормой()
		
		Элементы.Группа_ФормироватьНаОсновании.Видимость = (Параметры.ТипДокумента = "Счет");
		
		НастроитьВидимость_ГруппаСтандартнаяФормаСчетаНаОплату();
		
		Если Параметры.ТипДокумента = "Акт" Тогда
			
			Элементы.Декорация_ИнформацияПоСтандартнаяПФ.Заголовок = "Будет использована печатная форма модуля Диадок";
			
		ИначеЕсли Параметры.ТипДокумента = "АктСверки" Тогда
			
			Элементы.Декорация_ИнформацияПоСтандартнаяПФ.Заголовок = "Будет использована печатная форма, рекомендованная ФНС";
			
		ИначеЕсли Параметры.ТипДокумента = "Счет" Тогда
			УправлениеЗаголовками_ИнформацияПоСтандартнаяПФ();
		КонецЕсли;
		
		Элементы.Декорация_ИнформацияПоВПФ.Заголовок = "Выберите внешнюю печатную форму, которая будет использована для отправки документа контрагенту";
		
		ОграничитьТипПоляВнешняяПечатнаяФорма();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьЗаголовокФормы()
		
		Если Параметры.ТипДокумента = "Акт" Тогда
			ЭтаФорма.Заголовок = "Акт выполненных работ";
		ИначеЕсли Параметры.ТипДокумента = "АктСверки" Тогда	
			ЭтаФорма.Заголовок = "Акт сверки";
		Иначе
			ЭтаФорма.Заголовок = "Счет на оплату";
		КонецЕсли;
		
	КонецПроцедуры
	
	// Заполняет списки выбора элементов формы
	&НаКлиенте
	Процедура ЗаполнитьСписки()
		
		Элементы.СпособФормированияПечатнойФормы.СписокВыбора.Очистить();
						
		Элементы.СпособФормированияПечатнойФормы.СписокВыбора.Вставить(0, 0, "Стандартная");
		Элементы.СпособФормированияПечатнойФормы.СписокВыбора.Вставить(1, 1, "Внешняя");
		
		Для каждого ЭлементСписка Из СписокФормироватьСчетНаОсновании Цикл
			Элементы.ФормироватьСчетНаОсновании.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
	КонецПроцедуры //ЗаполнитьСписки()
	
	&НаКлиенте
	Процедура ОграничитьТипПоляВнешняяПечатнаяФорма()
		
		МассивТипов = Новый Массив();
		
		Если 	Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" 
			ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" 
			ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20"
			ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
			
			МассивТипов.Добавить(Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
			
		КонецЕсли;
				
		Если МассивТипов.Количество() > 0 Тогда
			ОписаниеТипов =	Новый ОписаниеТипов(МассивТипов,,);
			Элементы.ВнешняяПечатнаяФорма.ОграничениеТипа	= ОписаниеТипов;
			Элементы.ВнешняяПечатнаяФорма.ВыбиратьТип		= Ложь;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьВидимость_ГруппаСтандартнаяФормаСчетаНаОплату()
		
		Элементы.ГруппаСтандартнаяФормаСчетаНаОплату.Видимость = ОпцияСтандартнаяФормаСчетаНаОплатуДоступна();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УправлениеЗаголовками_ИнформацияПоСтандартнаяПФ()
					
		Если ФормироватьСчетНаОсновании = 0 И СтандартнаяФормаСчетаНаОплату Тогда
			Элементы.Декорация_ИнформацияПоСтандартнаяПФ.Заголовок = "Будет использована стандартная печатная форма, заданная в текущей конфигурации";	
		Иначе
			Элементы.Декорация_ИнформацияПоСтандартнаяПФ.Заголовок = "По умолчанию будет использована печатная форма модуля Диадок";
		КонецЕсли;
		
	КонецПроцедуры
			
//} Управление формой

&НаКлиенте
Процедура ПереключитьСтраницуПанелиСпособыФормированияПФ()
	
	Если СпособФормированияПечатнойФормы = 0 Тогда
		Элементы.Группа_СпособыФормированияПФ.ТекущаяСтраница = Элементы.Группа_ФормированиеТиповойПФ;
	Иначе
		Элементы.Группа_СпособыФормированияПФ.ТекущаяСтраница = Элементы.Группа_ФормированиеВнешнейПФ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗакрытияФормы()
	
	Результат = Новый Структура();
	
	Результат.Вставить("ВнешняяПечатнаяФорма");
	Результат.Вставить("Ок");
	Результат.Вставить("СписокФормироватьСчетНаОсновании");
	Результат.Вставить("СпособФормированияПечатнойФормы");
	Результат.Вставить("ТипДокумента");
	Результат.Вставить("ФормироватьСчетНаОсновании");
	Результат.Вставить("СтандартнаяФормаСчетаНаОплату");
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Функция ОпцияСтандартнаяФормаСчетаНаОплатуДоступна()
	
	Результат = Параметры.ТипДокумента = "Счет"
				И ФормироватьСчетНаОсновании = 0 		// "На основании счета"
				И СпособФормированияПечатнойФормы = 0;	// Не внешняя печатная форма
										
	Возврат Результат;
									
КонецФункции
