
#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПеременныеМодуля

&НаКлиенте
Перем ДанныеСертификата;
&НаКлиенте
Перем ДанныеПодписанта;
&НаКлиенте
Перем ПодписантИП;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция БазовыеФорматыНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипыКонтентаНаКлиенте()
	
	Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция БазовыеФорматыНаСервере()
	
	Результат = МетодСервера(, "БазовыеФорматы");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипыКонтентаНаСервере()
	
	Результат = МетодСервера(, "ТипыКонтента");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	УстановитьОбязательныеСвойстваЭлементов();
	
	Параметры.Свойство("BoxId"	  		  , BoxId);
	Параметры.Свойство("Исходящие"		  , Исходящие);
	Параметры.Свойство("AttachmentVersion", AttachmentVersion);
	Параметры.Свойство("ДанныеПодписанта" , ДанныеПодписантаСервер);
	
	Форма_УстановитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПлатформаПриОткрытии(Отказ);
	
	НаименованиеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", BoxId, "ДанныеОрганизации").Name;
	
	ПолучитьДанныеСертификатаИПодписанта();
	
	ЗаполнитьСписокВыбора_ОбластьПолномочий();
	ЗаполнитьСписокВыбора_СтатусРаботника();
	
	ЗаполнитьФормуДаннымиПодписанта();
	ЗаполнитьСтрокуСертификата();
	ЗаполнитьФормуДаннымиПоУмолчанию();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПлатформаПриЗакрытии();
	
КонецПроцедуры


&НаКлиенте
Процедура Сохранить(Команда)
	
	МетодКлиента("Модуль_РаботаССерверомДиадок", "ЗаписатьДанныеПодписанта", НовыеДанныеПодписанта(), BoxId, AttachmentVersion, Исходящие);
	
	ОбновитьДанныеПодписанта();
	
	Закрыть(ДанныеПодписанта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвидетельствоОРегистрацииИП(Команда)
	
	Организация = МетодСервераБезКонтекста(,"BoxID_2_Организация", BoxId);
	
	СвидетельствоОРегистрацииИП = МетодСервераБезКонтекста("Модуль_ИнтеграцияУниверсальный", "ПолучитьДатуНомерСвидетельстваОГосРегистрацииИП", Организация);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбластьПолномочийПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРаботникаПриИзменении(Элемент)
	
	ЗаполнитьФормуДаннымиПоУмолчанию();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийОрганизацииПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийСотрудникаПриИзменении(Элемент)
	
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры


&НаКлиенте
Процедура УправлениеФормой()
	
	ПоказатьДолжностьИлиСвидетельствоОРегистрацииИП();
	ОснованияПолномочийСотрудника_УстановитьЗаголовок();
	ОснованияПолномочийОрганизации_УстановитьВидимость();
	КнопкаСохранить_УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДолжностьИлиСвидетельствоОРегистрацииИП()
	
	ОбновитьСвойствоЭлементаФормы(Элементы.Должность, "Видимость", НЕ ПодписантИП);
	ОбновитьСвойствоЭлементаФормы(Элементы.ГруппаСвидетельствоОРегистрацииИП, "Видимость", ПодписантИП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийСотрудника_УстановитьЗаголовок()
	
	НовыйЗаголовок = Элементы.ОснованияПолномочийСотрудника.Заголовок;
	
	Если СтатусРаботника = "OtherOrganizationEmployee" Тогда
		
		НовыйЗаголовок = "Основания полномочий
						 |сотрудника";
		
	Иначе
		НовыйЗаголовок = "Основания";
	КонецЕсли; 
	
	ОбновитьСвойствоЭлементаФормы(Элементы.ОснованияПолномочийСотрудника, "Заголовок", НовыйЗаголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПолномочийОрганизации_УстановитьВидимость()
	
	НоваяВидимость = СтатусРаботника = "OtherOrganizationEmployee";
	ОбновитьСвойствоЭлементаФормы(Элементы.ОснованияПолномочийОрганизации, "Видимость", НоваяВидимость);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСохранить_УстановитьДоступность()
	
	Элементы.Сохранить.Доступность =
	
	ЗначениеЗаполнено(ОбластьПолномочий)
	И ЗначениеЗаполнено(СтатусРаботника)
	И ЗначениеЗаполнено(ОснованияПолномочийСотрудника)
	И (ЗначениеЗаполнено(Должность) ИЛИ ПодписантИП)
	И (ЗначениеЗаполнено(ОснованияПолномочийОрганизации)
		ИЛИ СтатусРаботника <> "OtherOrganizationEmployee")
	
КонецПроцедуры

&НаСервере
Процедура Форма_УстановитьЗаголовок()
	
	БазовыеФорматы = БазовыеФорматыНаСервере();
	
	Если Исходящие Тогда
		Заголовок = "Полномочия для подписания исходящих ";
	Иначе
		Заголовок = "Полномочия для подписания входящих ";
	КонецЕсли; 
	
	Если AttachmentVersion = БазовыеФорматы.utd820 Или AttachmentVersion = БазовыеФорматы.utd Тогда
		
		Заголовок = Заголовок + "УПД";
		
	ИначеЕсли AttachmentVersion = БазовыеФорматы.ucd Тогда
		
		Заголовок = Заголовок + "УКД";
		
	ИначеЕсли AttachmentVersion = БазовыеФорматы.tovtorg Тогда
		
		Заголовок = Заголовок + "накладных";
		
	ИначеЕсли AttachmentVersion = БазовыеФорматы.rezru Тогда
		
		Заголовок = Заголовок + "актов";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуСертификата()
	
	Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
		
		Элементы.СтрокаСертификат.Заголовок =
		ДанныеСертификата.OrganizationName + "
		|" + ДанныеСертификата.Name + "
		|" + "ИНН: " + ДанныеСертификата.INN + ", Годен до " + Формат(ДанныеСертификата.EndDate, "ДФ='dd MMMM yyyy'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора_ОбластьПолномочий()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	ОбластиПолномочий = ОбластиПолномочийПодписанта();
	
	СписокВыбора = Элементы.ОбластьПолномочий.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	Если Исходящие Тогда
		
		Если AttachmentVersion = БазовыеФорматы.utd820 Или AttachmentVersion = БазовыеФорматы.utd Тогда
			
			СписокВыбора.Добавить("PersonMadeOperation"							  , ОбластиПолномочий["PersonMadeOperation"]);
			СписокВыбора.Добавить("PersonDocumentedOperation"					  , ОбластиПолномочий["PersonDocumentedOperation"]);
			СписокВыбора.Добавить("MadeAndSignOperation"						  , ОбластиПолномочий["MadeAndSignOperation"]);
			СписокВыбора.Добавить("MadeOperationAndSignedInvoice"				  , ОбластиПолномочий["MadeOperationAndSignedInvoice"]);
			СписокВыбора.Добавить("MadeAndResponsibleForOperationAndSignedInvoice", ОбластиПолномочий["MadeAndResponsibleForOperationAndSignedInvoice"]);
			СписокВыбора.Добавить("ResponsibleForOperationAndSignerForInvoice"	  , ОбластиПолномочий["ResponsibleForOperationAndSignerForInvoice"]);
			СписокВыбора.Добавить("InvoiceSigner"								  , ОбластиПолномочий["InvoiceSigner"]);
			
		ИначеЕсли AttachmentVersion = БазовыеФорматы.ucd Тогда
			
			СписокВыбора.Добавить("InvoiceSigner"							  , ОбластиПолномочий["InvoiceSigner"]);
			СписокВыбора.Добавить("PersonDocumentedOperation"				  , ОбластиПолномочий["PersonDocumentedOperation"]);
			СписокВыбора.Добавить("ResponsibleForOperationAndSignerForInvoice", ОбластиПолномочий["ResponsibleForOperationAndSignerForInvoice"]);
			
		КонецЕсли;
		
	Иначе
		
		Если AttachmentVersion = БазовыеФорматы.ucd Тогда
			
			СписокВыбора.Добавить("PersonDocumentedOperation", 	ОбластиПолномочий["PersonDocumentedOperation"]);
			
		Иначе
			
			СписокВыбора.Добавить("PersonMadeOperation"		 , ОбластиПолномочий["PersonMadeOperation"]);
			СписокВыбора.Добавить("MadeAndSignOperation"	 , ОбластиПолномочий["MadeAndSignOperation"]);
			СписокВыбора.Добавить("PersonDocumentedOperation", ОбластиПолномочий["PersonDocumentedOperation"]);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбора_СтатусРаботника()
	
	СтатусыПодписанта = СтатусыПодписанта();
	
	СписокВыбора = Элементы.СтатусРаботника.СписокВыбора;
	
	СписокВыбора.Очистить();
	
	Если НРег(AttachmentVersion) = "utd820" И НЕ Исходящие Тогда
		СписокВыбора.Добавить("BuyerEmployee",						СтатусыПодписанта["BuyerEmployee"]);
		СписокВыбора.Добавить("InformationCreatorBuyerEmployee",	СтатусыПодписанта["InformationCreatorBuyerEmployee"]);
	Иначе
		СписокВыбора.Добавить("SellerEmployee", 					СтатусыПодписанта["SellerEmployee"]);
		СписокВыбора.Добавить("InformationCreatorEmployee",			СтатусыПодписанта["InformationCreatorEmployee"]);
	КонецЕсли;
	
	СписокВыбора.Добавить("OtherOrganizationEmployee" , СтатусыПодписанта["OtherOrganizationEmployee"]);
	
	Если ПодписантИП Тогда
		СписокВыбора.Добавить("AuthorizedPerson", СтатусыПодписанта["AuthorizedPerson"]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатаИПодписанта()
	
	ДанныеСертификата = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", BoxId, "ДанныеОрганизации").Certificate;
	
	Если ЗначениеЗаполнено(ДанныеПодписантаСервер) Тогда
		
		ДанныеПодписанта = ДанныеПодписантаСервер;
		ДанныеПодписантаСервер = Неопределено;
		
	Иначе
		
		БазовыеФорматы = БазовыеФорматыНаКлиенте();
		
		ДанныеПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта", BoxId, AttachmentVersion, Исходящие);
		
		// ДанныеПодписанта для TovTorg и Act552 пересекаются с UniversalTransferDocument, пробуем их получить.
		Если НЕ ЗначениеЗаполнено(ДанныеПодписанта) И (AttachmentVersion = БазовыеФорматы.tovtorg ИЛИ AttachmentVersion = БазовыеФорматы.rezru) Тогда
			ДанныеПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта", BoxId, БазовыеФорматы.utd, Исходящие);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписантИП = ЗначениеЗаполнено(ДанныеСертификата) И СтрДлина(ДанныеСертификата.INN) = 12;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФормуДаннымиПодписанта()
	
	Если ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		
		ОбластьПолномочий = ДанныеПодписанта.Powers;
		СтатусРаботника	  = ДанныеПодписанта.Status;
		ИныеСведения	  = ДанныеПодписанта.SignerInfo;
		ОснованияПолномочийСотрудника = ДанныеПодписанта.PowersBase;
		
		Если ДанныеПодписанта.Status = "OtherOrganizationEmployee" Тогда
			ОснованияПолномочийОрганизации = ДанныеПодписанта.OrganizationPowersBase;
		КонецЕсли;
		
		Если ПодписантИП Тогда
			СвидетельствоОРегистрацииИП	= ДанныеПодписанта.RegistrationCertificate;
		Иначе
			Должность = ДанныеПодписанта.JobTitle;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФормуДаннымиПоУмолчанию()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	Если НЕ ЗначениеЗаполнено(ОбластьПолномочий) И AttachmentVersion = БазовыеФорматы.ucd Тогда
		ОбластьПолномочий = "PersonDocumentedOperation";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОснованияПолномочийСотрудника) Тогда
		ОснованияПолномочийСотрудника = "Должностные обязанности";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПодписанта()
	
	Если НЕ ЗначениеЗаполнено(ДанныеПодписанта) Тогда
		
		ДанныеПодписанта = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПрочитатьДанныеПодписанта", BoxId, AttachmentVersion, Исходящие);
		
	Иначе
		
		ДанныеПодписанта.Powers		= ОбластьПолномочий;
		ДанныеПодписанта.Status	 	= СтатусРаботника;
		ДанныеПодписанта.SignerInfo = ИныеСведения;
		ДанныеПодписанта.PowersBase = ОснованияПолномочийСотрудника;
		
		Если СтатусРаботника = "OtherOrganizationEmployee" Тогда
			ДанныеПодписанта.OrganizationPowersBase = ОснованияПолномочийОрганизации;
		Иначе
			ДанныеПодписанта.OrganizationPowersBase = "";
		КонецЕсли;
		
		Если ПодписантИП Тогда
			ДанныеПодписанта.JobTitle	= "";
			ДанныеПодписанта.SignerType = "IndividualEntity";
			ДанныеПодписанта.RegistrationCertificate = СвидетельствоОРегистрацииИП;
		Иначе
			ДанныеПодписанта.JobTitle	= Должность;
			ДанныеПодписанта.SignerType = "LegalEntity";
			ДанныеПодписанта.RegistrationCertificate = "";
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция НовыеДанныеПодписанта()
	
	Результат = МетодКлиента("Модуль_Клиент", "Новый_ExtendedSignerDetailsToPost");
	
	Результат.Powers	 = ОбластьПолномочий;
	Результат.Status	 = СтатусРаботника;
	Результат.SignerInfo = ИныеСведения;
	Результат.PowersBase = ОснованияПолномочийСотрудника;
	
	Если СтатусРаботника = "OtherOrganizationEmployee" Тогда
		Результат.OrganizationPowersBase = ОснованияПолномочийОрганизации;
	КонецЕсли;
	
	Если ПодписантИП Тогда
		Результат.JobTitle   = "";
		Результат.SignerType = "IndividualEntity";
		Результат.RegistrationCertificate = СвидетельствоОРегистрацииИП;
	Иначе
		Результат.JobTitle   = Должность;
		Результат.SignerType = "LegalEntity";
		Результат.RegistrationCertificate = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ОбластиПолномочийПодписанта()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	Результат = Новый Соответствие;
	
	Если Исходящие Тогда
		
		Если AttachmentVersion = БазовыеФорматы.utd820
			Или AttachmentVersion = БазовыеФорматы.utd Тогда
			
			Результат.Вставить("PersonMadeOperation"						   , "Лицо, совершившее сделку");
			Результат.Вставить("PersonDocumentedOperation"					   , "Лицо, ответственное за оформление сделки");
			Результат.Вставить("MadeAndSignOperation"						   , "Лицо, совершившее сделку и ответственное за оформление");
			Результат.Вставить("MadeOperationAndSignedInvoice"				   , "Лицо, совершившее сделку и ответственное за подписание счетов-фактур");
			Результат.Вставить("MadeAndResponsibleForOperationAndSignedInvoice", "Лицо, совершившее сделку и ответственное за оформление и за подписание счетов-фактур");
			Результат.Вставить("ResponsibleForOperationAndSignerForInvoice"	   , "Лицо, ответственное за оформление сделки и за подписание счетов-фактур");
			Результат.Вставить("InvoiceSigner"								   , "Лицо, ответственное за подписание счетов-фактур");
			
		ИначеЕсли AttachmentVersion = БазовыеФорматы.ucd Тогда
			
			Результат.Вставить("InvoiceSigner"							   , "Лицо, ответственное за подписание счетов-фактур");
			Результат.Вставить("PersonDocumentedOperation"				   , "Лицо, ответственное за оформление свершившегося события");
			Результат.Вставить("ResponsibleForOperationAndSignerForInvoice", "Лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур");
			
		КонецЕсли;
		
	Иначе
		
		Если AttachmentVersion = БазовыеФорматы.utd820
			Или AttachmentVersion = БазовыеФорматы.utd Тогда
			
			Результат.Вставить("PersonMadeOperation"	  , "Лицо, совершившее сделку");
			Результат.Вставить("PersonDocumentedOperation", "Лицо, ответственное за оформление сделки");
			Результат.Вставить("MadeAndSignOperation"	  , "Лицо, совершившее сделку и ответственное за оформление");
			
		ИначеЕсли AttachmentVersion = БазовыеФорматы.ucd Тогда
			
			Результат.Вставить("PersonDocumentedOperation", "Лицо, ответственное за оформление свершившегося события");
			
		Иначе
			
			Результат.Вставить("PersonMadeOperation"	  , "Лицо, совершившее сделку, операцию");
			Результат.Вставить("PersonDocumentedOperation", "Лицо, ответственное за оформление свершившегося события");
			Результат.Вставить("MadeAndSignOperation"	  , "Лицо, совершившее сделку, операцию и ответственное за ее оформление");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Функция СтатусыПодписанта()
	
	БазовыеФорматы = БазовыеФорматыНаКлиенте();
	
	Результат = Новый Соответствие;
	
	Если Исходящие Тогда
		
		Если AttachmentVersion = БазовыеФорматы.utd820
			Или AttachmentVersion = БазовыеФорматы.utd
			Или AttachmentVersion = БазовыеФорматы.ucd Тогда
			
			Результат.Вставить("SellerEmployee"			   , "Работник организации - продавца");
			Результат.Вставить("InformationCreatorEmployee", "Работник организации - составителя информации продавца");
			
		КонецЕсли;
		
	Иначе
		
		Если AttachmentVersion = БазовыеФорматы.rezru Тогда
			
			Результат.Вставить("SellerEmployee"			   , "Работник организации - заказчика работ (услуг)");
			Результат.Вставить("InformationCreatorEmployee", "Работник организации - составителя информации заказчика");
			
		ИначеЕсли AttachmentVersion = БазовыеФорматы.utd820	Тогда
			
			Результат.Вставить("BuyerEmployee",						"Работник организации - покупателя");
			Результат.Вставить("InformationCreatorBuyerEmployee",	"Работник организации - составителя файла обмена информации покупателя, если составитель файла обмена информации покупателя не является покупателем");
			
		Иначе
			
			Результат.Вставить("SellerEmployee"			   , "Работник организации - покупателя");
			Результат.Вставить("InformationCreatorEmployee", "Работник организации - составителя информации покупателя");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("OtherOrganizationEmployee", "Работник иной уполномоченной организации");
	Результат.Вставить("AuthorizedPerson", "Уполномоченное физическое лицо (в том числе индивидуальный предприниматель)");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьОбязательныеСвойстваЭлементов()
	
	// Устанавливаем свойства программно, на случай если обработку сохранят платформой младше 8.3.7
	
	СвойствоАвтоМаксимальнаяШирина = Новый Структура("АвтоМаксимальнаяШирина", Ложь);
	ЗаполнитьЗначенияСвойств(Элементы.СтрокаСертификат, СвойствоАвтоМаксимальнаяШирина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСвойствоЭлементаФормы(Элемент, СвойствоЭлемента, ЗначениеСвойства)
	
	Если Элемент[СвойствоЭлемента] <> ЗначениеСвойства Тогда
		Элемент[СвойствоЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры
