#Область ПЕРМЕННЫЕ_ФОРМЫ

&НаКлиенте
Перем СтруктураДействийПоДокументу;
&НаКлиенте
Перем СтруктураРаботаСНомеромАкта;
&НаКлиенте
Перем МассивЗадачНаОтказ;
&НаКлиенте
Перем МассивЗаданийОтправкаТитулаПокупателя;
&НаКлиенте
Перем МаксимальноеКоличествоЗаданий;
&НаКлиенте
Перем КонтекстАсинхроннойОбработки;

&НаКлиенте
Перем СтатистикаСобытий;
&НаКлиенте
Перем ДатаСтартаПроцесса;
&НаКлиенте
Перем ДатаСтартаОбработкиДокумента;
&НаКлиенте
Перем ДатаСтартаОперации;
&НаКлиенте
Перем ТекущаяОперация;
&НаКлиенте
Перем КоличествоОбработанныхДокументов;
&НаКлиенте
Перем ОбрабатываемыйДокументСсылка;

&НаКлиенте
Перем КэшЗаголовковСтраниц;
&НаКлиенте
Перем СоответствиеВидаОперацииДействию; 
&НаСервере
Перем КэшФормы;

#КонецОбласти

#Область ПЕРМЕННЫЕ_ПЛАТФОРМЫ

&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем ОбработкаОбъект;

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ПЛАТФОРМЫ

&НаКлиенте
Функция МетодКлиента(ИмяМодуля= "", ИмяМетода, 
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL,
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат  Платформа.МетодКлиента(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаКлиенте
Функция МетодСервераБезКонтекста(ИмяМодуля= "", ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат Платформа.МетодСервераБезКонтекста(ИмяМодуля, ИмяМетода,
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция МетодСервера(Знач ИмяМодуля= "", Знач ИмяМетода,
		Параметр0= NULL, Параметр1= NULL, Параметр2= NULL, Параметр3= NULL, Параметр4= NULL, 
		Параметр5= NULL, Параметр6= NULL, Параметр7= NULL, Параметр8= NULL, Параметр9= NULL) Экспорт
	
	Возврат ОбработкаОбъект().МетодСервера(ИмяМодуля, ИмяМетода, 
	Параметр0, Параметр1, Параметр2, Параметр3, Параметр4,
	Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
КонецФункции

&НаСервере
Функция ОбработкаОбъект() Экспорт
	
	Если ОбработкаОбъект = Неопределено Тогда
		
		СтруктураОбработки= ПолучитьИзВременногоХранилища(Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
		
		Если СтруктураОбработки <> Неопределено Тогда
			ОбработкаОбъект= СтруктураОбработки.ОбработкаОбъект;
		КонецЕсли;
		
		Если ОбработкаОбъект = Неопределено Тогда
			
			ОбработкаОбъект= РеквизитФормыВЗначение("Объект");
			
			Попытка
				ПоместитьВоВременноеХранилище(Новый Структура("ОбработкаОбъект", ОбработкаОбъект), Объект.ПараметрыКлиентСервер.ВременноеХранилище.АдресОбработкаОбъект);
			Исключение КонецПопытки;
		
		Иначе
			ОбработкаОбъект.ПараметрыКлиентСервер= Объект.ПараметрыКлиентСервер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма(ТекущийВладелецФормы)
	
	Если ТекущийВладелецФормы = Неопределено Тогда
		Возврат Неопределено
	ИначеЕсли Прав(ТекущийВладелецФормы.ИмяФормы, 14) = "Форма_Основная" Тогда
		Возврат ТекущийВладелецФормы;
	Иначе
		Возврат ОсновнаяФорма(ТекущийВладелецФормы.ВладелецФормы);
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектПараметрыКлиентСервер", Объект.ПараметрыКлиентСервер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриОткрытии(Отказ)
	
	ОсновнаяФорма= ОсновнаяФорма(ВладелецФормы);
	
	Если ОсновнаяФорма <> Неопределено Тогда
		Платформа= ОсновнаяФорма.Платформа;
	КонецЕсли;
		
	Платформа.ПриОткрытииФормыОбработки(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатформаПриЗакрытии()
	
	Платформа.ПриЗакрытииФормыОбработки(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
//{ ФОРМА

#ОБЛАСТЬ ОБРАБОТЧИКИ_ФОРМЫ

	&НаСервере
	Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
		ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
		
		ИдентификаторДокументаВДиадок =	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"));
		
		Режим				= Параметры.Режим;
		ТекущийСценарий		= Параметры.ТекущийСценарий;
		Организация			= Параметры.Организация;
		ТекущийПериод		= Параметры.ТекущийПериод;
		КонтрагентID		= Параметры.КонтрагентID;
		ПараметрыВыборки	= Параметры.ПараметрыВыборки;

		стПрофильКонфигурации 					= МетодСервера(,"СформироватьПрофильКонфигурации");
		ВидОперацииСоздаваемогоПоступления 		= ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ГрупповаяОбработка_ВидОперацииСоздаваемогоПоступления");
		СоздаватьПоступлениеПоДаннымСФ 			= ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СоздаватьПоДаннымСФ");
		СуммаВключаетНДС 						= ХранилищеОбщихНастроек.Загрузить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СуммаВключаетНДС");
		ЗначениеСоздаватьПоДаннымСФ_ДоИзменения = СоздаватьПоступлениеПоДаннымСФ;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПриОткрытии(Отказ)
		
		ПлатформаПриОткрытии(Отказ);
		
		ЗаполнитьСтруктуруДействийПоДокументу();
		ЗаполнитьТаблицы();
		ЗаполнитьКэшЗаголовковСтраниц();
		
		УправлениеФормой();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработкаОповещения(ИмяСобытия, ПараметрыОповещения, Источник) Экспорт
		
		Если ИмяСобытия = "ИзменениеСтатусаДокументаДиадок"
			И Тип(Источник) = Тип("УправляемаяФорма") 
			И (Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаДокумента" 
				ИЛИ Источник.ИмяФормы = Платформа.ПараметрыКлиент.ПутьКФормам+"ФормаГрупповаяОбработка")
			И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
			И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
			
			Попытка
				Док = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ПараметрыОповещения.BoxID).GetDocumentById(ПараметрыОповещения.DocumentID);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Док = Неопределено;
			КонецПопытки;
					
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("BoxID", 		ПараметрыОповещения.BoxID);
			ОтборСтрок.Вставить("DocumentID", 	ПараметрыОповещения.DocumentID);

			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаПодписать, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаСоздатьДокументыПоступления, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаСоздатьСчетФактуры, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаОбработкаЗавершена, ОтборСтрок, Док, ТекстОшибки);
			ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ТаблицаДокументов, ОтборСтрок, Док, ТекстОшибки);

		ИначеЕсли ИмяСобытия = "ИзменениеСвязиДД1С"
			И ЗначениеЗаполнено(ПараметрыОповещения.BoxID)
			И ЗначениеЗаполнено(ПараметрыОповещения.DocumentID) Тогда
			
			Если ПараметрыОповещения.ТипСущности = "Документ"
				И ПараметрыОповещения.Свойство("Документ1С") Тогда
				
				ОтборСтрок=	Новый Структура;
				ОтборСтрок.Вставить("BoxID", 		ПараметрыОповещения.BoxID);
				ОтборСтрок.Вставить("DocumentID", 	ПараметрыОповещения.DocumentID);

				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаПодписать, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаСоздатьДокументыПоступления, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаСоздатьСчетФактуры, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаОбработкаЗавершена, ОтборСтрок, ПараметрыОповещения.Документ1С);
				ОбработатьСобытиеИзменениеСвязиДД1С(ТаблицаДокументов, ОтборСтрок, ПараметрыОповещения.Документ1С, Истина);

			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "УдалениеДокументов" Тогда
			
			Для каждого ПараметрыДокумента Из ПараметрыОповещения Цикл
				
				ОтборСтрок =	Новый Структура;
				ОтборСтрок.Вставить("BoxID", 		ПараметрыДокумента.BoxID);
				ОтборСтрок.Вставить("DocumentID", 	ПараметрыДокумента.DocumentID);

				ОбработатьСобытиеУдалениеДокументов(ТаблицаПодписать, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаСоздатьДокументыПоступления, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаСоздатьСчетФактуры, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаОбработкаЗавершена, ОтборСтрок);
				ОбработатьСобытиеУдалениеДокументов(ТаблицаДокументов, ОтборСтрок);

			КонецЦикла;

		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПриЗакрытии()
		
		ПлатформаПриЗакрытии();
		
		ПриЗакрытииНаСервере();
		
	КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("НастройкаОпций_Диадок", "ГрупповаяОбработка_ВидОперацииСоздаваемогоПоступления", ВидОперацииСоздаваемогоПоступления);
	ХранилищеОбщихНастроек.Сохранить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СоздаватьПоДаннымСФ", СоздаватьПоступлениеПоДаннымСФ);
	ХранилищеОбщихНастроек.Сохранить("НастройкаОпций_Диадок", "ГрупповаяОбработка_СуммаВключаетНДС", СуммаВключаетНДС);
	
КонецПроцедуры

#ОБЛАСТЬ ОПИСАНИЕ_ОПОВЕЩЕНИЯ

	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВыбораДокументаСОснованием(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			Если РезультатЗакрытия.СписокСсылокРНК.Количество() > 0 Тогда
				ТекущиеДанные.СписокСсылок1С = РезультатЗакрытия.СписокСсылокРНК;
				СоздатьДокументСФ_НаОснованииВыбранного(ТаблицаСоздатьСчетФактуры.Индекс(ТекущиеДанные), ПолучитьПараметрыСозданияСФ());
				ОбработатьПроведениеДокументаСФ(ТекущиеДанные);
				ОбновитьФормуПослеПроведенияДокументовСФ();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеФормыВводаНакладной(РезультатЗакрытия, ТекущиеДанные) Экспорт
		
		Если РезультатЗакрытия <> Неопределено И РезультатЗакрытия.Свойство("Документ1С") Тогда
			
			ТекущиеДанные.ПервичныйДокумент = РезультатЗакрытия.Документ1С;
			
			Если МетодКлиента("Модуль_Клиент", "ДокументПроведен", ТекущиеДанные.ПервичныйДокумент) Тогда
				ОбработатьПроведениеДокументаПоступления(ТекущиеДанные);
				ОбновитьФормуПослеПроведенияДокументовПоступления();
			Иначе
				ТекущиеДанные.СостояниеОбработки 	= СтруктураДействийПоДокументу.ПроведитеДокумент;
				ТекущиеДанные.КомментарийКДействию 	= "Проведите документ";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ПервичныйДокумент) Тогда
			
				МетодСервера(,"Установить_DocumentID_Для_Документ", ТекущиеДанные.ПервичныйДокумент, ТекущиеДанные.DocumentID, ТекущиеДанные.BoxID);
				
				Если Не ТекущиеДанные.ЭтоЕдиныйДокументСФ И Не ТекущиеДанные.ЭтоУПД_СЧФДОП Тогда
					ПараметрыОповещения	= Новый Структура;
					ПараметрыОповещения.Вставить("ТипСущности", "Документ");
					ПараметрыОповещения.Вставить("BoxID", 		ТекущиеДанные.BoxID);
					ПараметрыОповещения.Вставить("DocumentID", 	ТекущиеДанные.DocumentID);
					ПараметрыОповещения.Вставить("Документ1С",	ТекущиеДанные.ПервичныйДокумент);
					МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗавершениеЗаполненияШаблонаОтветногоТитула(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия <> Неопределено Тогда
			
			КлючШаблона			   = ДополнительныеПараметры.КлючШаблона;
			ШаблоныОтветныхТитулов = ДополнительныеПараметры.ШаблоныОтветныхТитулов;
			
			Шаблон = ШаблоныОтветныхТитулов[КлючШаблона];
			
			Шаблон.Удалить("ФормаТитула");
			Шаблон.Удалить("ПараметрыФормы");
			
			Шаблон.Вставить("ОтветныйТитул", РезультатЗакрытия.ОтветныйТитул);
			
			ЗаполнитьШаблоныОтветныхТитуловИПодписатьДокументы(ШаблоныОтветныхТитулов);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикОткрытиеДокументаДляПроведения(РезультатЗакрытия, ТекущиеДанные) Экспорт
			
		Если МетодКлиента("Модуль_Клиент", "ДокументПроведен", ТекущиеДанные.ПервичныйДокумент) Тогда
			
			ОбработатьПроведениеДокументаПоступления(ТекущиеДанные);
			ОбновитьФормуПослеПроведенияДокументовПоступления();
			
		КонецЕсли;
		
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ УПРАВЛЕНИЕ_ФОРМОЙ
	
	&НаКлиенте
	Процедура УправлениеФормой()
		
		Заголовок = "Групповая обработка документов";

		Если ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
			Заголовок = Заголовок + ". Комплексная обработка для торговых сетей";
		ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
			Заголовок = Заголовок + ". Подписать и создать";
		ИначеЕсли ТекущийСценарий = "СохранитьНаДиск" Тогда
			Заголовок = Заголовок + ". Сохранить на диск";
		Иначе
			Заголовок = Заголовок + ". " + ТекущийСценарий;
		КонецЕсли;
		
		ЗаполнитьПолеСценариев();
		ДоступностьПолеСценариев();
		
		УстановитьВидимостьЗакладок();
		
		Если ТекущийСценарий = "Подписать" Тогда
			НастроитьФормуПодписать();
			НастроитьФормуОбработкаЗавершена();
		ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда 
			НастроитьФормуСопоставить();
		ИначеЕсли ТекущийСценарий = "СохранитьНаДиск" Тогда
			НастроитьФормуСохранитьНаДиск();
		ИначеЕсли ТекущийСценарий = "Создать" Тогда 
			НастроитьФормуСоздать();
			НастроитьФормуОбработкаЗавершена();
		ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
			НастроитьФормуПодписать();
			НастроитьФормуСоздать();
			НастроитьФормуОбработкаЗавершена();
		ИначеЕсли ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
			НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей(Истина);	
		КонецЕсли;

		ЭтаФорма.Элементы.КонтрольнаяСуммаДокументовДД.Заголовок= "документы " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ЗаполнитьПолеСценариев()
		
		Элементы.ПолеВыбораСценарий.СписокВыбора.Очистить();

		Если ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
			Если Режим = "ОбработкаДокументов" Тогда
				Элементы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьВсеАвтоматически",		"Выполнить все действия автоматически");
				Элементы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьКорректныеДокументы",	"Обработать корректные документы");
				Элементы.ПолеВыбораСценарий.СписокВыбора.Добавить("ОбработатьДокументыСОшибками",	"Обработать документы с ошибками");
			КонецЕсли;
			ПолеВыбораСценарий = ?(ПолеВыбораСценарий = Неопределено, "ОбработатьВсеАвтоматически", ПолеВыбораСценарий);
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура УстановитьВидимостьЗакладок()
		
		Если ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" ИЛИ ТекущийСценарий = "Сопоставить" ИЛИ ТекущийСценарий = "СохранитьНаДиск" Тогда
			
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница    = Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСтарыйИнтерфейс;
			
		Иначе
			
			ЭтоПодпись  = ТекущийСценарий = "Подписать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать";
			ЭтоСоздание = ТекущийСценарий = "Создать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать";
			
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаПодписать.Видимость 					 = ЭтоПодпись;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьДокументыПоступления.Видимость = ЭтоСоздание;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьСчетФактуры.Видимость 		 = ЭтоСоздание;
			
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаОбработкаЗавершена.Видимость = Истина;
			Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСтарыйИнтерфейс.Видимость 	= Ложь;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуСохранитьНаДиск()
		
		Режим = "Сохранить";

		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаДокументов", Ложь);
		ОбработатьПометки(ТаблицаДокументов, "ТаблицаДокументов");

		Элементы.ТаблицаДокументовОбработать.Заголовок = "Скачать выделенные";
		
		ТаблицаДокументов_Подчиненные = Элементы.ТаблицаДокументов.ПодчиненныеЭлементы;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость	= Ложь;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность	= Ложь;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Видимость	= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Доступность	= Истина;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Видимость		= Ложь;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Доступность 	= Ложь;
					
		Элементы.ГруппаКС.Видимость		= Ложь;
		Элементы.ГруппаКС.Доступность	= Ложь;
		
		Для Каждого Стр Из ТаблицаДокументов Цикл
			Стр.СостояниеОбработки 		= "";			
			Стр.КомментарийКДействию 	= "";
		КонецЦикла;
		
		ЗапретитьРедактированиеПанелейПриИнтерактивнойНастройкеФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуСопоставить()
										   
		Режим = "АнализДокументов";

		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаДокументов", Ложь);
		ОбработатьПометки(ТаблицаДокументов, "ТаблицаДокументов");

		Элементы.ТаблицаДокументовОбработать.Заголовок 		= "Анализ документов";
		Элементы.ТаблицаДокументовОбработать.Отображение	= ОтображениеКнопки.Текст;
		
		ТаблицаДокументов_Подчиненные = Элементы.ТаблицаДокументов.ПодчиненныеЭлементы;
				
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСтатусСогласования.Видимость		= Ложь;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСтатусСогласования.Доступность	= Ложь;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость	= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность	= Истина;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Видимость	= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаДокумент1С.Доступность	= Истина;
		
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Видимость		= Истина;
		ТаблицаДокументов_Подчиненные.ТаблицаДокументовГруппаСумма.ПодчиненныеЭлементы.ТаблицаДокументовСуммаДокумента1С.Доступность 	= Истина;
				
		Элементы.ГруппаКС.Видимость		= Истина;
		Элементы.ГруппаКС.Доступность	= Истина;
		
		Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
			СтрокаТаблицы.СостояниеОбработки = "";
		КонецЦикла;
		
		ЗапретитьРедактированиеПанелейПриИнтерактивнойНастройкеФормы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуПодписать()
		
		Режим = "АнализДокументов";
		
		УстановитьЗаголовокСтраницы("СтраницаПодписать", ТаблицаПодписать);
		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаПодписать", Ложь);
		ОбработатьПометки(ТаблицаПодписать, "ТаблицаПодписать");

	КонецПроцедуры

	&НаКлиенте
	Процедура НастроитьФормуСоздать()
		
		Режим = "АнализДокументов";
		
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления",  ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", 			ТаблицаСоздатьСчетФактуры);
		
		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаСоздатьДокументыПоступления", Ложь);
		УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаСоздатьСчетФактуры", 			Ложь);
		
		ОбработатьПометки(ТаблицаСоздатьДокументыПоступления, 	"ТаблицаСоздатьДокументыПоступления");	
		ОбработатьПометки(ТаблицаСоздатьСчетФактуры, 			"ТаблицаСоздатьСчетФактуры");
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
			Элементы.ВидОперацииСоздаваемогоПоступления.Видимость = Ложь;
			ЭтоПоступление = Истина;
		Иначе
			ЗаполнитьСписокВыбораВидОперацииСоздаваемогоПоступления();
			ЭтоПоступление = СоответствиеВидаОперацииДействию.Получить(ВидОперацииСоздаваемогоПоступления) = "Поступление";
		КонецЕсли;
			
	КонецПроцедуры
	
	&НаКлиенте
	Процедура НастроитьФормуОбработкаЗавершена()
		
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		
	КонецПроцедуры

	&НаКлиенте 
	Процедура НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей(ОткрытиеФормы = Ложь)
		
		Если ОткрытиеФормы Тогда
			Режим = "АнализДокументов";
		КонецЕсли;
		
		Если Режим = "АнализДокументов" Тогда
			
			Элементы.ТаблицаДокументовОбработать.Заголовок = "Выполнить анализ";
			ДоступностьПолеСценариев();

			УстановитьКартинкуИЗаголовокКнопкиПометки("ТаблицаДокументов", Ложь);
			ОбработатьПометки(ТаблицаДокументов, "ТаблицаДокументов");
		
			Элементы.ТаблицаДокументовОбработать.Заголовок	= "Анализ документов";
			
			Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Видимость		= Истина;
			Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСопоставляемыйДокумент1С.Доступность	= Истина;
			
			Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
				СтрокаТаблицы.СостояниеОбработки = "";
			КонецЦикла;
			
		ИначеЕсли Режим = "ОбработкаДокументов" Тогда
			
			Элементы.ТаблицаДокументовОбработать.Заголовок = "Выполнить обработку";
			
			ДоступностьПолеСценариев();
			ЗаполнитьПолеСценариев();
		КонецЕсли;
		
		ЗапретитьРедактированиеПанелейПриИнтерактивнойНастройкеФормы();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ДоступностьПолеСценариев()

		Если НЕ ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
			Элементы.ПолеВыбораСценарий.СписокВыбора.Очистить();
			Элементы.ПолеВыбораСценарий.Доступность = Ложь;
		Иначе
			Если ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" 
				И Режим = "АнализДокументов" Тогда 
				Элементы.ПолеВыбораСценарий.СписокВыбора.Очистить();
				Элементы.ПолеВыбораСценарий.Доступность = Ложь;
			Иначе
				Элементы.ПолеВыбораСценарий.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЗаполнитьСтруктуруДействийПоДокументу()
		
		СтруктураДействийПоДокументу = Новый Структура;

		Если ТекущийСценарий = "СохранитьНаДиск" Тогда
			
			СтруктураДействийПоДокументу.Вставить("Сохранение", 		"Сохранение...");
			СтруктураДействийПоДокументу.Вставить("УспешноСохранен", 	"Успешно сохранен");
			СтруктураДействийПоДокументу.Вставить("ОшибкаСохранения", 	"Ошибка сохранения");
			
		ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда
			
			СтруктураДействийПоДокументу.Вставить("ГотовКСопоставлению", 				"Готов к сопоставлению");
			СтруктураДействийПоДокументу.Вставить("ДокументВ1СНеНайден", 				"Документ в 1С не найден");
			СтруктураДействийПоДокументу.Вставить("НайденоНесколькоДокументовВ1С", 		"Найдено подходящих документов");
			СтруктураДействийПоДокументу.Вставить("НеСопоставленоПоступление", 			"Не сопоставлено поступление");
			СтруктураДействийПоДокументу.Вставить("БылСопоставленРанее",			 	"Сопоставлен ранее");
			СтруктураДействийПоДокументу.Вставить("Обработано",			 				"Обработано");
			
		ИначеЕсли ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
			
			СтруктураДействийПоДокументу.Вставить("СопоставитьИПодписать", 	"Сопоставить и подписать");
			СтруктураДействийПоДокументу.Вставить("СопоставитьСФ",		 	"Сопоставить");
			СтруктураДействийПоДокументу.Вставить("СоздатьОтсутствующиеСФ", "Создать СФ и сопоставить");
			СтруктураДействийПоДокументу.Вставить("ОтказатьВПодписи", 		"Отказать в подписи");
			СтруктураДействийПоДокументу.Вставить("ЗапроситьУточнение",		"Запросить уточнение");
			СтруктураДействийПоДокументу.Вставить("Пропустить",		 		"Не обрабатывать");
			СтруктураДействийПоДокументу.Вставить("Обработано", 			"Обработано");
			
		Иначе
			
			Если ТекущийСценарий = "Подписать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать" Тогда
				
				СтруктураДействийПоДокументу.Вставить("ГотовКПодписанию",	 				"Готов к подписи");
				СтруктураДействийПоДокументу.Вставить("ПодписанРанее", 						"Подписан ранее");
				СтруктураДействийПоДокументу.Вставить("УспешноПодписан",	 				"Подписан");
				СтруктураДействийПоДокументу.Вставить("НеТребуетПодписания",				"Не требует подписи");
				СтруктураДействийПоДокументу.Вставить("ОшибкаПриПодписании",				"Ошибка");
				
			КонецЕсли;
				
			Если ТекущийСценарий = "Создать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать" Тогда
				
				СтруктураДействийПоДокументу.Вставить("ПроведитеДокумент", 					"Проведите документ");
				СтруктураДействийПоДокументу.Вставить("ЗаполнитеДанные", 					"Заполните данные");
				СтруктураДействийПоДокументу.Вставить("ВыберитеДокументПоступления", 		"Выберите документ поступления");
				СтруктураДействийПоДокументу.Вставить("НеСопоставленаНоменклатура", 		"Не сопоставлена номенклатура");
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДействийПоДокументу.Вставить("ОшибкаОбработки", "Ошибка");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ЗаполнитьСписокВыбораВидОперацииСоздаваемогоПоступления()
		
		СоответствиеВидаОперацииДействию = Новый Соответствие;
		Элемент = Элементы.ВидОперацииСоздаваемогоПоступления;
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента"));
			Если Не ЗначениеЗаполнено(ВидОперацииСоздаваемогоПоступления) Тогда
				ВидОперацииСоздаваемогоПоступления = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
			КонецЕсли;
			
			СоответствиеВидаОперацииДействию.Вставить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"), "Поступление");
			СоответствиеВидаОперацииДействию.Вставить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента"), "Возврат");
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
			
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия"), "Возврат товаров от покупателя");
			Если Не ЗначениеЗаполнено(ВидОперацииСоздаваемогоПоступления) Тогда
				ВидОперацииСоздаваемогоПоступления = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия");
			КонецЕсли;
			
			СоответствиеВидаОперацииДействию.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия"), "Поступление");
			СоответствиеВидаОперацииДействию.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия"), "Возврат");
			
		ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"));
			Элемент.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"));
			Если Не ЗначениеЗаполнено(ВидОперацииСоздаваемогоПоступления) Тогда
				ВидОперацииСоздаваемогоПоступления = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика");
			КонецЕсли;
			
			СоответствиеВидаОперацииДействию.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика"), "Поступление");
			СоответствиеВидаОперацииДействию.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"), "Возврат");
			
		КонецЕсли;
		
	КонецПроцедуры
	 
	&НаКлиенте
	Процедура ЗаполнитьКэшЗаголовковСтраниц()
		
		КэшЗаголовковСтраниц = Новый Соответствие;
		СтраницыПанели = Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы;
		Для Каждого Страница из СтраницыПанели Цикл
			НайденноеЗначение = КэшЗаголовковСтраниц.Получить(Страница.Имя);
			Если НайденноеЗначение = Неопределено Тогда
				КэшЗаголовковСтраниц.Вставить(Страница.Имя, Страница.Заголовок);
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьЗаголовокСтраницыИзКэш(ИмяСтраницы)
		
		НайденноеЗначение = КэшЗаголовковСтраниц.Получить(ИмяСтраницы);
		
		Если НайденноеЗначение = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат НайденноеЗначение;
		КонецЕсли;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ВыполнитьПереключениеВкладок()
		
		СтраницаПодписать 					= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаПодписать;
		СтраницаСоздатьДокументыПоступления	= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьДокументыПоступления;
		СтраницаСоздатьСчетФактуры 			= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаСоздатьСчетФактуры; 
		СтраницаОбработкаЗавершена 			= Элементы.ПанельМассовойОбработкиВходящихДокументов.ПодчиненныеЭлементы.СтраницаОбработкаЗавершена;
		
		АктивнаяСтраница 					= Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница;
		
		Если ТекущийСценарий = "Подписать" Тогда
			
			Если ТаблицаПодписать.Количество() = 0 Тогда
				Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;					
			КонецЕсли;
			
		ИначеЕсли ТекущийСценарий = "Создать" Тогда
			
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаСоздатьДокументыПоступления;
			КонецЕсли;
			
			Если АктивнаяСтраница = СтраницаСоздатьДокументыПоступления Тогда
				
				Если ТаблицаСоздатьДокументыПоступления.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьСчетФактуры;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьСчетФактуры Тогда						
				
				Если ТаблицаСоздатьСчетФактуры.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;	
				
			КонецЕсли;
			
		ИначеЕсли ТекущийСценарий = "ПодписатьИСоздать" Тогда
			
			Если АктивнаяСтраница = Неопределено Тогда
				АктивнаяСтраница = СтраницаПодписать;
			КонецЕсли;				
			
			Если АктивнаяСтраница = СтраницаПодписать Тогда
				
				Если ТаблицаПодписать.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьДокументыПоступления;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьДокументыПоступления Тогда
				
				Если ТаблицаСоздатьДокументыПоступления.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаСоздатьСчетФактуры;
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			ИначеЕсли АктивнаяСтраница = СтраницаСоздатьСчетФактуры Тогда
				
				Если ТаблицаСоздатьСчетФактуры.Количество() = 0 Тогда
					Элементы.ПанельМассовойОбработкиВходящихДокументов.ТекущаяСтраница = СтраницаОбработкаЗавершена;					
					ВыполнитьПереключениеВкладок();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	КонецПроцедуры
				
	&НаКлиенте
	Процедура ОткрытьДокумент1С(ИмяТаблицы, ЭтоСопоставление = Ложь)

		Перем ДокументСсылка;

		ТекущиеДанные= Элементы[ИмяТаблицы].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПервичныйДокумент) Тогда
			ДокументСсылка = ТекущиеДанные.ПервичныйДокумент; 	
		ИначеЕсли ЭтоСопоставление И ЗначениеЗаполнено(ТекущиеДанные.СопоставляемыйДокумент1С) Тогда
			ДокументСсылка = ТекущиеДанные.СопоставляемыйДокумент1С;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
		Иначе
			МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", НСтр( "ru = 'Не сопоставлен с документом из 1С'"));
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СнятьУстановитьПометки(ОбрабатываемаяТаблица, Пометка)
		
		Для Каждого СтрокаСпискаДокументов Из ОбрабатываемаяТаблица Цикл

			Если Пометка Тогда
				
				Если ТекущийСценарий = "СохранитьНаДиск" ИЛИ ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
					СтрокаСпискаДокументов.Вкл = Пометка;
				ИначеЕсли ТекущийСценарий = "Сопоставить" Тогда
					Если Режим = "АнализДокументов" Тогда
						СтрокаСпискаДокументов.Вкл = ?(НЕ ЗначениеЗаполнено(СтрокаСпискаДокументов.ПервичныйДокумент), Истина, Ложь);	
					Иначе //Режим = "ОбработкаДокументов"
						СтрокаСпискаДокументов.Вкл = ?(ЗначениеЗаполнено(СтрокаСпискаДокументов.СопоставляемыйДокумент1С), Истина, Ложь);	
					КонецЕсли;
				ИначеЕсли ОбрабатываемаяТаблица = ТаблицаСоздатьДокументыПоступления ИЛИ ОбрабатываемаяТаблица = ТаблицаСоздатьСчетФактуры Тогда 
					СтрокаСпискаДокументов.Вкл = ?(НЕ ЗначениеЗаполнено(СтрокаСпискаДокументов.ПервичныйДокумент), Истина, Ложь);
				ИначеЕсли ОбрабатываемаяТаблица = ТаблицаПодписать Тогда
					СтрокаСпискаДокументов.Вкл = ?(НЕ СтрокаСпискаДокументов.Подписан, Истина, Ложь);
				КонецЕсли;
				
			Иначе
				СтрокаСпискаДокументов.Вкл = Пометка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьКартинкуИЗаголовокКнопкиПометки(ИмяОбрабатываемойТаблицы, Пометка)
		
		ИмяЭлементаПометки = ИмяОбрабатываемойТаблицы + "СнятьУстановитьПометки";

		Если Пометка Тогда
			Элементы[ИмяЭлементаПометки].Картинка 	= БиблиотекаКартинок.СнятьФлажки;
			Элементы[ИмяЭлементаПометки].Заголовок 	= "Снять пометку со всех документов";
		Иначе
			Элементы[ИмяЭлементаПометки].Картинка 	= БиблиотекаКартинок.УстановитьФлажки;
			Элементы[ИмяЭлементаПометки].Заголовок 	= "Пометить все документы";
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура УстановитьЗаголовокСтраницы(ИмяСтраницы, ОбрабатываемаяТаблица)
		
		Элементы[ИмяСтраницы].Заголовок = ПолучитьЗаголовокСтраницыИзКэш(ИмяСтраницы) + " (" + ОбрабатываемаяТаблица.Количество() + ")";
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьПометки(ОбрабатываемаяТаблица, ИмяОбрабатываемойТаблицы)

		Если НЕ ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" ИЛИ Режим = "АнализДокументов" Тогда
		
			ИмяЭлементаПометки = ИмяОбрабатываемойТаблицы + "СнятьУстановитьПометки";
						
			ТекущаяПометка = Элементы[ИмяЭлементаПометки].Картинка = БиблиотекаКартинок.УстановитьФлажки;
			
			УстановитьКартинкуИЗаголовокКнопкиПометки(ИмяОбрабатываемойТаблицы, ТекущаяПометка);
			
			Пометка = Элементы[ИмяЭлементаПометки].Картинка = БиблиотекаКартинок.УстановитьФлажки;
			
			СнятьУстановитьПометки(ОбрабатываемаяТаблица, Пометка);
			
			Пометка 		= Неопределено;
			ТекущаяПометка	= Неопределено;
			
		КонецЕсли;
	
	КонецПроцедуры
		
	&НаКлиенте
	Процедура ЗапретитьРедактированиеПанелейПриИнтерактивнойНастройкеФормы() 
		
		Элементы.СтраницаПодписать.Видимость 					= Ложь;
		Элементы.СтраницаСоздатьДокументыПоступления.Видимость 	= Ложь;
		Элементы.СтраницаСоздатьСчетФактуры.Видимость 			= Ложь;
		Элементы.СтраницаОбработкаЗавершена.Видимость 			= Ложь;
		
	КонецПроцедуры
	
#КонецОбласти

//} ФОРМА
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

	// TODO: отсортировать по предназначению

	&НаКлиенте
	Функция БазовыеФорматыНаКлиенте()
		
		Результат = МетодКлиента("Модуль_Клиент", "БазовыеФорматы");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция ТипыКонтентаНаКлиенте()
		
		Результат = МетодКлиента("Модуль_Клиент", "ТипыКонтента");
		
		Возврат Результат;
		
	КонецФункции

	&НаСервере
	Функция БазовыеФорматыНаСервере()
		
		Результат = МетодСервера(, "БазовыеФорматы");
		
		Возврат Результат;
		
	КонецФункции

	&НаСервере
	Функция ТипыКонтентаНаСервере()
		
		Результат = МетодСервера(, "ТипыКонтента");
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиентеНаСервереБезКонтекста
	Функция РеквизитыПродавца(СтруктураКонтента)
		
		Результат = Неопределено;
		
		Если СтруктураКонтента.Свойство("Sellers") Тогда
			Результат = СтруктураКонтента.Sellers[0];
		Иначе
			Результат = СтруктураКонтента.Seller;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиентеНаСервереБезКонтекста
	Функция РеквизитыПокупателя(СтруктураКонтента)
		
		Результат = Неопределено;
		
		Если СтруктураКонтента.Свойство("Buyers") Тогда
			Результат = СтруктураКонтента.Buyers[0];
		Иначе
			Результат = СтруктураКонтента.Buyer;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	&НаСервереБезКонтекста
	Функция ПолучитьОписаниеТипаЗначение(ЗначениеЭл)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		
		ТипКолонки = ТипЗнч(ЗначениеЭл);
		МассивТ= Новый массив;
		МД = метаданные.найтипотипу(типзнч(ЗначениеЭл));
		Если МД = Неопределено Тогда
			ПолноеИмяТипа = Строка(ТипЗнч(ЗначениеЭл));
		Иначе
			ПолноеИмяТипа = МД.ПолноеИмя();
			Для Каждого стрхх из СтрЗаменТипов цикл
				Если Найти(ПолноеИмяТипа,стрхх.Ключ) <> 0 Тогда
					ПолноеИмяТипа = СтрЗаменить(ПолноеИмяТипа, стрхх.Ключ, стрхх.Значение);
					прервать;
				КонецЕсли;
			конеццикла;
		КонецЕсли;
		Если ПолноеИмяТипа = "Не определено" Тогда
			//ПолноеИмяТипа = "Строка"; //проверить - заглушка пока!!!
			ПолноеИмяТипа= Неопределено;
		КонецЕсли;
		
		Если найти( ПолноеИмяТипа, "ДокументСсылка")>0 Тогда
			возврат Документы.ТипВсеСсылки();
		иначе;	
			возврат  новый ОписаниеТипов(ПолноеИмяТипа)
		КонецЕсли;	
	КонецФункции	

	&НаСервереБезКонтекста
	Функция МассивСтруктур_2_ТаблицаЗначений(МассивСтруктур)
		СтрЗаменТипов = Новый Структура("Справочник,Документ,Перечисление","СправочникСсылка","ДокументСсылка","ПеречислениеСсылка");
		Результат = Новый ТаблицаЗначений;
		Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
			Возврат Результат;
		Иначе 
			Образец = МассивСтруктур[0];
			Для Каждого  Стр из Образец Цикл
				Результат.Колонки.Добавить(Стр.Ключ, ПолучитьОписаниеТипаЗначение(Стр.Значение) );
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Стр Из МассивСтруктур Цикл
			СтрТ = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
		КонецЦикла;
		Возврат Результат;
	КонецФункции
	
	&НаКлиентеНаСервереБезКонтекста
	Функция НайтиСтрокиВМассивеСтруктур(МассивСтруктур, ПараметрыОтбора) //вместо НайтиСтроки таблицы значений
		Результат = Новый Массив;
		Для Каждого Стр из МассивСтруктур Цикл
			БылоНесоответствие = Ложь;
			Для Каждого Стр1 из ПараметрыОтбора Цикл
				Если СокрЛП(ПараметрыОтбора[Стр1.Ключ]) <>  СокрЛП(Стр[Стр1.Ключ]) Тогда
					БылоНесоответствие = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если БылоНесоответствие = Ложь Тогда
				Результат.Добавить(Стр);
			КонецЕсли;
			
		КонецЦикла;
		Возврат Результат;
	КонецФункции

	&НаСервере
	Функция КэшФормы()
		
		Если КэшФормы = Неопределено Тогда
			
			КэшФормы = Новый Структура();
			КэшФормы.Вставить("ОрганизацииДД_1С", Новый Соответствие);
			КэшФормы.Вставить("КонтрагентыДД_1С", Новый Соответствие);
			КэшФормы.Вставить("ДоговорыДД_1С", Новый Соответствие);
			КэшФормы.Вставить("НоменклатураДД_1С", Новый Соответствие);
			КэшФормы.Вставить("ЕИ_ДД_1С", Новый Соответствие);
			КэшФормы.Вставить("СтавкиНДС_ДД_1С", Новый Соответствие);
			КэшФормы.Вставить("СтраныДД_1С", Новый Соответствие);
			КэшФормы.Вставить("НомераГТД_ДД_1С", Новый Соответствие);
			КэшФормы.Вставить("Номенклатура1С_ЯвляетсяУслугой", Новый Соответствие);
			КэшФормы.Вставить("ДопДанныеДляСозданияНакладной", Новый Соответствие);
			КэшФормы.Вставить("ЕстьРеквизитБС_Организации", Новый Соответствие);
			КэшФормы.Вставить("ЕстьРеквизитБС_Контрагента", Новый Соответствие);
			КэшФормы.Вставить("ДанныеДоговора", Новый Соответствие);
			КэшФормы.Вставить("ТипыЦенПоДоговорам", Новый Соответствие);
			КэшФормы.Вставить("ДанныеНоменклатурыБГУ", Новый Соответствие);
			КэшФормы.Вставить("СчетаУчетаРасчетов", Новый Соответствие);
			КэшФормы.Вставить("СчетаУчетаНоменклатуры", Новый Соответствие);
			КэшФормы.Вставить("ЕстьРеквизитТЧ_Склад", Новый Соответствие);
			КэшФормы.Вставить("НоменклатураДляСопоставления", Новый_НоменклатураДляСопоставления());
			
		КонецЕсли;
		
		Возврат КэшФормы;
		
	КонецФункции

	&НаСервереБезКонтекста
	Функция ПолучитьРеквизитСсылки(СсылкаНаОбъект, ИмяРеквизита) Экспорт
		
		ЗначениеРеквизита=	Неопределено;
		
		ОбъектИзСсылки=	СсылкаНаОбъект.ПолучитьОбъект();
		Если НЕ ОбъектИзСсылки.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			ЗначениеРеквизита=	ОбъектИзСсылки[ИмяРеквизита];
		КонецЕсли;
		
		Возврат ЗначениеРеквизита;
		
	КонецФункции

	&НаСервере
Функция НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК)
	
	Запрос=	Новый Запрос;
	Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
		
		Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ВсегоПоДокументу") <> Неопределено Тогда
			
			Запрос.Текст=	
			"ВЫБРАТЬ
			|	СчетФактура.Ссылка,
			|	ЕСТЬNULL(ВсегоПоДокументу.СуммаСНДС, 0) КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
			|				ИЛИ УжеСопоставленные.Значение = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ДополнительныеСведения.Объект КАК Объект,
			|			ДополнительныеСведения.Свойство КАК Свойство,
			|			ДополнительныеСведения.Значение КАК Значение
			|		ИЗ
			|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|		ГДЕ
			|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
			|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(СчетФактураПолученныйВсегоПоДокументу.СуммаСНДС) КАК СуммаСНДС,
			|			СчетФактураПолученныйВсегоПоДокументу.Ссылка КАК Ссылка
			|		ИЗ
			|			Документ.СчетФактураПолученный.ВсегоПоДокументу КАК СчетФактураПолученныйВсегоПоДокументу
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СчетФактураПолученныйВсегоПоДокументу.Ссылка) КАК ВсегоПоДокументу
			|		ПО СчетФактура.Ссылка = ВсегоПоДокументу.Ссылка
			|ГДЕ
			|	СчетФактура.ДокументОснование В(&МассивСсылокРНК)";
			
		Иначе
			
			Запрос.Текст=	
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Ссылка,
			|	0 КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
			|		ПО Т.Ссылка = ДС.Объект
			|			И (ДС.Свойство = &Свойство)
			|			И (ДС.Значение <> """")
			|ГДЕ
			|	Т.ДокументОснование В(&МассивСсылокРНК)";
			
		КонецЕсли;
		
	ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
		
		ОснованиеВШапке = МетодСервера(, "ЕстьМетаданныеКонфигурации_ДД", "Метаданные.Документы.СчетФактураПолученный.Реквизиты.ДокументОснование");
		
		Если ОснованиеВШапке Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Ссылка,
			|	0 КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
			|		ПО Т.Ссылка = ДС.Объект
			|			И (ДС.Свойство = &Свойство)
			|			И (ДС.Значение <> """")
			|ГДЕ
			|	Т.ДокументОснование В(&МассивСсылокРНК)";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Ссылка КАК Ссылка,
			|	0 КАК СуммаДокумента,
			|	ВЫБОР
			|		КОГДА ДС.Объект ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК УжеСопоставлен
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
			|		ПО Т.Ссылка = ДС.Объект
			|			И (ДС.Свойство = &Свойство)
			|			И (ДС.Значение <> """")
			|ГДЕ
			|	Т.ДокументОснование В(&МассивСсылокРНК)";
			
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст=	
		"ВЫБРАТЬ
		|	СчетФактура.Ссылка,
		|	ЕСТЬNULL(СчетФактура.Ссылка.СуммаДокумента, 0) КАК СуммаДокумента,
		|	ВЫБОР
		|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
		|				ИЛИ УжеСопоставленные.Значение = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УжеСопоставлен
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ДополнительныеСведения.Объект КАК Объект,
		|			ДополнительныеСведения.Свойство КАК Свойство,
		|			ДополнительныеСведения.Значение КАК Значение
		|		ИЗ
		|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ГДЕ
		|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
		|		ПО СчетФактура.Ссылка = УжеСопоставленные.Объект
		|ГДЕ
		|	СчетФактура.ДокументОснование В (&МассивСсылокРНК)";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылокРНК", МассивСсылокРНК);
	Запрос.УстановитьПараметр("Свойство", ИдентификаторДокументаВДиадок);
	
	РезультатЗапроса=	Запрос.Выполнить();
	Выборка=			РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

	&НаСервере
	Функция ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(СписокСсылок, BoxID)
		
		Результат=	Новый Массив;
		
		Для Каждого InitialDocumentId Из СписокСсылок Цикл
			СсылкаРНК=	МетодСервера(,"DocumentID_2_Документ", InitialDocumentId.Значение, BoxID);
			Если СсылкаРНК <> Неопределено И ТипЗнч(СсылкаРНК) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				Результат.Добавить(СсылкаРНК);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Процедура ЗаполнитьТаблицы(ОбрабатываемаяТаблица = Неопределено)
		
		ТекстСостояния = НСтр("ru = 'Заполнение списка документов'");
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", ТекстСостояния);
		
		ТаблицаДокументовВходящих = ВладелецФормы.ТаблицаДокументовВходящих;
		
		Если ОбрабатываемаяТаблица = Неопределено Тогда
			ТаблицаПодписать.Очистить();
			ТаблицаСоздатьДокументыПоступления.Очистить();
			ТаблицаСоздатьСчетФактуры.Очистить();
			ТаблицаОбработкаЗавершена.Очистить();
			ТаблицаДокументов.Очистить();
		Иначе
			ОбрабатываемаяТаблица.Очистить();
		КонецЕсли;
		
		МетодСервераБезКонтекста(,"ЗаполнитьТаблицуДокументовДиадокДокументами1С", ТаблицаДокументовВходящих);
		
		ВсегоСтрок = ТаблицаДокументовВходящих.Количество();
		
		Для Сч = 1 По ВсегоСтрок Цикл
			
			МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
			
			ОбработкаПрерыванияПользователя();
			
			СтрокаТЧ = ТаблицаДокументовВходящих[Сч-1];
			
			СтатусСогласования 	= "";
			ResolutionType 		= "";
			
			Если СтрокаТЧ.DocumentType <> "NonformalizedProforma" И (СтрокаТЧ.СостояниеДокументооборота = "Требуется подпись" ИЛИ СтрокаТЧ.СостояниеДокументооборота = "Ошибка подписи")Тогда
				
				Resolutions = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьДокументДиадок", СтрокаТЧ.DocumentId, СтрокаТЧ.BoxId).Resolutions;
				
				Если Resolutions.Count > 0 Тогда
					
					Resolution = Resolutions.GetItem(Resolutions.Count - 1);
				
					Если Resolution.ResolutionType = "ResolutionRequest" Тогда
						ТекстСогласовано = "Согласование запросил";
					ИначеЕсли Resolution.ResolutionType = "ResolutionApprove" Тогда
						ТекстСогласовано = "Согласовано";
					ИначеЕсли Resolution.ResolutionType = "ResolutionDisapprove" Тогда
						ТекстСогласовано = "В согласовании отказано";
					ИначеЕсли Resolution.ResolutionType = "SignatureRequest" Тогда
						ТекстСогласовано = "Запросил подпись";
					ИначеЕсли Resolution.ResolutionType = "SignatureApprove" Тогда
						ТекстСогласовано = "Подписано";
					ИначеЕсли Resolution.ResolutionType = "SignatureDisapprove" Тогда
						ТекстСогласовано = "Отказано в подписи";
					КонецЕсли;
					
					Если НЕ Resolution.Author = Неопределено И ЗначениеЗаполнено(Resolution.Author) Тогда
						
						АвторРезолюции 		= Resolution.Author;
						ФамилияАвтора 		= МетодКлиента("Модуль_Клиент", "ВыделитьСлово", АвторРезолюции);
						ИмяАвтора 			= МетодКлиента("Модуль_Клиент", "ВыделитьСлово", АвторРезолюции);
						ОтчествоАвтора 		= МетодКлиента("Модуль_Клиент", "ВыделитьСлово", АвторРезолюции);
						ПредставлениеАвтора = ФамилияАвтора + " " + ?(СтрДлина(ИмяАвтора)>0, Сред(ИмяАвтора,1,1)+?(СтрДлина(ОтчествоАвтора)>0, ". "+Сред(ОтчествоАвтора,1,1)+".", ""), "");
						
					КонецЕсли;

					СтатусСогласования 	= ТекстСогласовано + " " + ПредставлениеАвтора + " (" + Формат(Resolution.CreationDate, "ДФ=dd.MM.yy")+");";
					ResolutionType 		= Resolution.ResolutionType;

				КонецЕсли; 
				
			КонецЕсли;

			ДокументПодписан 						= СтрокаТЧ.Status = "InboundWithRecipientSignature " ИЛИ СтрокаТЧ.Status = "InboundWithRecipientSignature";
			ПараметрыОбработкиЕдиногоДокументаДД	= ПолучитьПараметрыОбработкиЕдиногоДокументаДД(СтрокаТЧ);
			НужноПровестиПоступление 				= НужноПровестиПоступление(СтрокаТЧ, ПараметрыОбработкиЕдиногоДокументаДД);
			
			Если ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" ИЛИ ТекущийСценарий = "Сопоставить" ИЛИ ТекущийСценарий = "СохранитьНаДиск" Тогда
				
				НоваяСтрока = ТаблицаДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.Сумма = СтрокаТЧ.СуммаДокументаЗначение;
				
				НоваяСтрока.Номер = СокрЛП(НоваяСтрока.Номер);
				НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
				НоваяСтрока.ResolutionType		= ResolutionType;

				Если СтрокаТЧ.DocumentType = "XmlTorg12" 
				  ИЛИ СтрокаТЧ.DocumentType = "XmlAcceptanceCertificate" Тогда
					Если СтрокаТЧ.Status = "InboundWithRecipientSignature" Тогда
						НоваяСтрока.Подписан = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Найти(СтрокаТЧ.DocumentType, "Invoice") > 0
				  ИЛИ СтрокаТЧ.DocumentType = "XmlTorg12" 
				  ИЛИ СтрокаТЧ.DocumentType = "XmlAcceptanceCertificate" Тогда
					ЭДОбъект=	Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(СтрокаТЧ.BoxID).GetDocumentById(СтрокаТЧ.DocumentID);
					Для Индекс = 0 По ЭДОбъект.InitialDocumentIds.Count - 1 Цикл
						НоваяСтрока.СписокСсылок.Добавить(ЭДОбъект.InitialDocumentIds.GetItem(Индекс));
					КонецЦикла;
				КонецЕсли;
				
			Иначе
			
				Если (ТекущийСценарий = "Подписать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать")
				   И (ОбрабатываемаяТаблица = Неопределено ИЛИ ОбрабатываемаяТаблица = ТаблицаПодписать)
				   И СтрокаТЧ.DocumentType <> "NonformalizedProforma"
				   И СтрокаТЧ.Status = "InboundWaitingForRecipientSignature"
				   И СтрокаТЧ.RevocationStatus <> "RevocationAccepted" Тогда
				   
					НоваяСтрока = ТаблицаПодписать.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					
					НоваяСтрока.Сумма				= СтрокаТЧ.СуммаДокументаЗначение;
					НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
					НоваяСтрока.ResolutionType		= ResolutionType;
					НоваяСтрока.ЭтоУПД_СЧФДОП		= ПараметрыОбработкиЕдиногоДокументаДД.ЭтоУПД_СЧФДОП;
					
					НоваяСтрока.ПараметрыОбработкиЕдиногоДокументаДД = ПараметрыОбработкиЕдиногоДокументаДД;
					
					ПроверитьНеобходимостьПодписи(НоваяСтрока);
					
				ИначеЕсли (ТекущийСценарий = "Создать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать")
				   И (ОбрабатываемаяТаблица = Неопределено ИЛИ ОбрабатываемаяТаблица = ТаблицаСоздатьДокументыПоступления)
				   И (НужноСоздатьПоступление(СтрокаТЧ, ДокументПодписан, ПараметрыОбработкиЕдиногоДокументаДД) 
				      ИЛИ НужноПровестиПоступление) Тогда
				   
					НоваяСтрока = ТаблицаСоздатьДокументыПоступления.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					
					НоваяСтрока.Сумма				= СтрокаТЧ.СуммаДокументаЗначение;
					НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
					НоваяСтрока.ResolutionType		= ResolutionType;
					НоваяСтрока.ЭтоЕдиныйДокументСФ = ПараметрыОбработкиЕдиногоДокументаДД.ЭтоЕдиныйДокументСФ;
					НоваяСтрока.ЭтоУПД_СЧФДОП		= ПараметрыОбработкиЕдиногоДокументаДД.ЭтоУПД_СЧФДОП;
					
					Если НужноПровестиПоступление Тогда
						НоваяСтрока.СостояниеОбработки 		= СтруктураДействийПоДокументу.ПроведитеДокумент;
						НоваяСтрока.КомментарийКДействию 	= "Проведите документ";
						Если ПараметрыОбработкиЕдиногоДокументаДД.ПоступлениеВ_1С_СозданоНеПроведено Тогда
							НоваяСтрока.ПервичныйДокумент 	= ПараметрыОбработкиЕдиногоДокументаДД.ДокументОснованиеДляСФ;
						КонецЕсли;
					КонецЕсли;
				   
				ИначеЕсли (ТекущийСценарий = "Создать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать")
				   И (ОбрабатываемаяТаблица = Неопределено ИЛИ ОбрабатываемаяТаблица = ТаблицаСоздатьСчетФактуры)
				   И (СтрокаТЧ.DocumentType = "Invoice" ИЛИ ПараметрыОбработкиЕдиногоДокументаДД.СчетФактураВ_1С_НеСоздана)
				   И НЕ ЗначениеЗаполнено(СтрокаТЧ.ПервичныйДокумент) Тогда
				   
					НоваяСтрока = ТаблицаСоздатьСчетФактуры.Добавить();
						
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					
					НоваяСтрока.Сумма				= СтрокаТЧ.СуммаДокументаЗначение;
					НоваяСтрока.СтатусСогласования 	= СтатусСогласования;
					НоваяСтрока.ResolutionType		= ResolutionType;
					
					Если ПараметрыОбработкиЕдиногоДокументаДД.СчетФактураВ_1С_НеСоздана
					 И ПараметрыОбработкиЕдиногоДокументаДД.ДокументОснованиеДляСФ <> Неопределено Тогда
						НоваяСтрока.СписокСсылок1С.Добавить(ПараметрыОбработкиЕдиногоДокументаДД.ДокументОснованиеДляСФ);
					Иначе
						ЭДОбъект = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(СтрокаТЧ.BoxID).GetDocumentById(СтрокаТЧ.DocumentID);
						Для Индекс = 0 По ЭДОбъект.InitialDocumentIds.Count - 1 Цикл
							НоваяСтрока.СписокСсылок.Добавить(ЭДОбъект.InitialDocumentIds.GetItem(Индекс));
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТаблицаДокументов) Тогда 
			ДополнитьТаблицуДокументовНаСервере();
		КонецЕсли;
		
		Если ОбрабатываемаяТаблица = Неопределено Тогда
			ТаблицаПодписать.Сортировать("Покупатель Возр, ДатаУчета Возр");
			ТаблицаСоздатьДокументыПоступления.Сортировать("Покупатель Возр, ДатаУчета Возр");
			ТаблицаСоздатьСчетФактуры.Сортировать("Покупатель Возр, ДатаУчета Возр");
			ТаблицаДокументов.Сортировать("Покупатель Возр, ДатаУчета Возр");
		Иначе
			Если ОбрабатываемаяТаблица.Количество() = 0 Тогда
				СообщениеПользователю =	Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Нет документов для обработки";
				СообщениеПользователю.Сообщить();
			Иначе
				ОбрабатываемаяТаблица.Сортировать("Покупатель Возр, ДатаУчета Возр");
			КонецЕсли;
		КонецЕсли;

	КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьПараметрыОбработкиЕдиногоДокументаДД(ВходящийДокумент)
		
		ЭтоУПД_СЧФДОП 	= МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ВходящийДокумент.DocumentFunction) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФДОП");
		ЭтоУПД_ДОП 		= МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ВходящийДокумент.DocumentFunction) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "ДОП");
		ЭтоУПД_СЧФ 		= МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ВходящийДокумент.DocumentFunction) = МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", "СЧФ");
		
		ЭтоЕдиныйДокументСФ = СоздаватьПоступлениеПоДаннымСФ 
								И ((ВходящийДокумент.DocumentType = "Invoice" ИЛИ ЭтоУПД_СЧФ)
								И НЕ ВходящийДокумент.ЕстьInitialDocuments); // только для СФ и УПД счф без родительских документов (ТОРГ-12, УПД доп)
		
		ДокументОснованиеДляСФ 				= Неопределено;
		ПоступлениеВ_1С_НеСоздано			= Ложь; 
		ПоступлениеВ_1С_СозданоНеПроведено	= Ложь;
		СчетФактураВ_1С_НеСоздана 			= Ложь;
		
		Если (ТекущийСценарий = "Создать" ИЛИ ТекущийСценарий = "ПодписатьИСоздать") 
			И (ВходящийДокумент.DocumentType = "UniversalTransferDocument"
		  	ИЛИ ЭтоЕдиныйДокументСФ) Тогда
		  
			СчетФактура	 = Неопределено;
		  
			МассивДокументов = МетодСервера(, "DocumentID_2_МассивДокументов", ВходящийДокумент.DocumentID, ВходящийДокумент.BoxID);
			Для Каждого Документ ИЗ МассивДокументов Цикл
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					СчетФактура = Документ;
				Иначе
					ДокументОснованиеДляСФ = Документ;
				КонецЕсли;
			КонецЦикла;
			
			Если (ЭтоУПД_ДОП ИЛИ ЭтоУПД_СЧФДОП ИЛИ ЭтоЕдиныйДокументСФ) И ДокументОснованиеДляСФ = Неопределено Тогда
				ПоступлениеВ_1С_НеСоздано = Истина;
			ИначеЕсли ((ЭтоУПД_СЧФДОП ИЛИ ЭтоЕдиныйДокументСФ) И ДокументОснованиеДляСФ <> Неопределено И НЕ МетодКлиента("Модуль_Клиент", "ДокументПроведен", ДокументОснованиеДляСФ)) Тогда
				ПоступлениеВ_1С_СозданоНеПроведено = Истина;
			ИначеЕсли (((ЭтоУПД_СЧФДОП ИЛИ ЭтоЕдиныйДокументСФ) И ДокументОснованиеДляСФ <> Неопределено) ИЛИ ЭтоУПД_СЧФ) И СчетФактура = Неопределено Тогда
				СчетФактураВ_1С_НеСоздана = Истина;
			КонецЕсли;
		  
		КонецЕсли;
		
		Возврат Новый Структура("ПоступлениеВ_1С_НеСоздано, ПоступлениеВ_1С_СозданоНеПроведено, СчетФактураВ_1С_НеСоздана, ДокументОснованиеДляСФ, ЭтоЕдиныйДокументСФ, ЭтоУПД_СЧФДОП",
								 ПоступлениеВ_1С_НеСоздано, ПоступлениеВ_1С_СозданоНеПроведено, СчетФактураВ_1С_НеСоздана, ДокументОснованиеДляСФ, ЭтоЕдиныйДокументСФ, ЭтоУПД_СЧФДОП);

	КонецФункции
						 
	&НаКлиенте
	Функция НужноСоздатьПоступление(ВходящийДокумент, ДокументПодписан, ПараметрыОбработкиЕдиногоДокументаДД)

		НужноСоздатьПоступлениеПоАктИлиТОРГ = ДокументПодписан 
												И (ЭтоФормализованныйТОРГ12(ВходящийДокумент.DocumentType) 
			    								ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ВходящийДокумент.DocumentType));
		НужноСоздатьПоступлениеПоСФ			= ПараметрыОбработкиЕдиногоДокументаДД.ЭтоЕдиныйДокументСФ И ПараметрыОбработкиЕдиногоДокументаДД.ПоступлениеВ_1С_НеСоздано;
		НужноСоздатьПоступлениеПоУПД 		= ДокументПодписан И ВходящийДокумент.DocumentType = "UniversalTransferDocument" И ПараметрыОбработкиЕдиногоДокументаДД.ПоступлениеВ_1С_НеСоздано;
		
		Возврат НЕ ЗначениеЗаполнено(ВходящийДокумент.ПервичныйДокумент) 
				И ВходящийДокумент.RevocationStatus <> "RevocationAccepted" 
			    И ВходящийДокумент.Status <> "InboundRecipientSignatureRequestRejected"
				И (НужноСоздатьПоступлениеПоАктИлиТОРГ ИЛИ НужноСоздатьПоступлениеПоСФ ИЛИ НужноСоздатьПоступлениеПоУПД);

	КонецФункции
			
	&НаКлиенте
	Функция НужноПровестиПоступление(ВходящийДокумент, ПараметрыОбработкиЕдиногоДокументаДД)	
		
		Возврат (ЗначениеЗаполнено(ВходящийДокумент.ПервичныйДокумент) 
				И (ЭтоФормализованныйТОРГ12(ВходящийДокумент.DocumentType) 
				ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ВходящийДокумент.DocumentType)) 
				И НЕ МетодКлиента("Модуль_Клиент", "ДокументПроведен", ВходящийДокумент.ПервичныйДокумент))
				ИЛИ ПараметрыОбработкиЕдиногоДокументаДД.ПоступлениеВ_1С_СозданоНеПроведено;
		
	КонецФункции

	&НаСервере
	Процедура ДополнитьТаблицуДокументовНаСервере()
		
		Для Каждого Стр Из ТаблицаДокументов Цикл 
			
			Стр.Организация = ПолучитьОрганизацию1С_ПоДаннымДД(Стр.BoxID);
			Стр.Контрагент 	= ПолучитьКонтрагента1С_ПоДаннымДД(Стр.CounteragentID);
			Стр.base64DocId = МетодСервера(,"КонвертироватьГуидВЧисло64", Стр.DocumentId);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПодписатьВДиадокеАсинхронно(Document, Подписать, BoxID, DocumentID, ТекстОтказа = "", СтруктураДляТитула = Неопределено, СтрокаТаблицы)
		
		Если НЕ Document = Неопределено Тогда
			
			ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", Document.Type);
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", BoxID, ЭтоФормализованныйДокумент);
			
			Если Подписать Тогда 
				
				Если Document.Type = "Nonformalized" Тогда
					
					МетодКлиента("Модуль_Клиент", "ПодписатьВДиадоке", Document, СтруктураДляТитула, Ложь);
					
				Иначе
					
					AsyncResult = МетодКлиента("Модуль_Клиент", "ПодписатьВДиадоке", Document, СтруктураДляТитула, Истина);
					
					СтруктураЗадания = Новый Структура;
					СтруктураЗадания.Вставить("DocumentId"		, Document.DocumentId);
					СтруктураЗадания.Вставить("BoxId"			, Document.OrganizationId);
					СтруктураЗадания.Вставить("ReplySendTask"	, AsyncResult);
					СтруктураЗадания.Вставить("СтрокаТаблицы"	, СтрокаТаблицы);
					
					МассивЗаданийОтправкаТитулаПокупателя.Добавить(СтруктураЗадания);
					
				КонецЕсли;
				
			Иначе
				МетодКлиента("Модуль_Клиент", "ОтказатьВПодписи", Document, ТекстОтказа);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиентеНаСервереБезКонтекста
	Функция ПомеченныеСтрокиТаблицы(Таблица)
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Вкл", Истина);
		
		Результат = Таблица.НайтиСтроки(СтруктураОтбора);
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ПроверитьНеобходимостьПодписи(СтрокаТаблицы)
		
		Если СтрокаТаблицы.DocumentType="XmlTorg12" 
			ИЛИ СтрокаТаблицы.DocumentType = "XmlAcceptanceCertificate" 
			ИЛИ СтрокаТаблицы.DocumentType = "ReconciliationAct"
			ИЛИ СтрокаТаблицы.СостояниеДокументооборота = "Требуется подпись" Тогда
			
			Если СтрокаТаблицы.Status = "InboundWaitingForRecipientSignature" Тогда
				СтрокаТаблицы.Вкл = Истина;
				СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ГотовКПодписанию;
				СтрокаТаблицы.КомментарийКДействию 	= "Документ готов к подписи. Нажмите кнопку ""Подписать выделенные""";
			ИначеЕсли СтрокаТаблицы.Status = "InboundWithRecipientSignature" Тогда
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ПодписанРанее;
				СтрокаТаблицы.КомментарийкДействию 	= "Документ уже был подписан ранее";
			ИначеЕсли СтрокаТаблицы.Status = "InboundRecipientSignatureRequestRejected" Тогда
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.НеТребуетПодписания;
				СтрокаТаблицы.КомментарийКДействию 	= "Документ не требует подписи";
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.Вкл 					= Ложь;
			СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.НеТребуетПодписания;
			СтрокаТаблицы.КомментарийКДействию 	= "Документ не требует подписи";
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Функция ПолучитьРасширениеФайлаДиадок(ИмяФайла)
		КолСим = СтрДлина(ИмяФайла);
		Для ИндЦикла = 1 По КолСим Цикл
			Инд = КолСим + 1 - ИндЦикла;
			Если Сред(ИмяФайла, Инд, 1) = "." Тогда
				Возврат ?(КолСим = Инд, 0, Сред(ИмяФайла, Инд + 1, КолСим - Инд));
			КонецЕсли;
		КонецЦикла;
	КонецФункции
	
	&НаКлиенте
	Процедура ПересчитатьКонтрольныеСуммы()
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаДокументов);
		
		БуферСумма1С = 0;
		БуферСуммаДД = 0;
		
		Для каждого Строка Из НайденныеСтроки Цикл
			БуферСуммаДД = БуферСуммаДД + Строка.Сумма;
			БуферСумма1С = БуферСумма1С + Строка.СуммаДокумента1С;
		КонецЦикла;
		
		КонтрольнаяСуммаДокументовДД = БуферСуммаДД;
		КонтрольнаяСуммаДокументов1С = БуферСумма1С;
		КонтрольнаяСуммаДокументовДельта = БуферСуммаДД - БуферСумма1С;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОтработатьИзменениеВкл(ИмяОбрабатываемойТаблицы)
		
		Таблица = ЭтаФорма[ИмяОбрабатываемойТаблицы];
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Вкл", Ложь);
		
		ВклНеВсе = ЗначениеЗаполнено(Таблица.НайтиСтроки(СтруктураОтбора));
		
		УстановитьКартинкуИЗаголовокКнопкиПометки(ИмяОбрабатываемойТаблицы, ВклНеВсе);
			
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеИзменениеСтатусаДокументаДиадок(ОбрабатываемаяТаблица, ОтборСтрок, Док, ТекстОшибки)
			
		Если НЕ Док = Неопределено Тогда
			НовыйСтатус = МетодКлиента("Модуль_Клиент", "ПредставлениеСтатуса", Док);
		КонецЕсли;
			
		НайденныеСтроки = ОбрабатываемаяТаблица.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаДокумента = НайденныеСтроки[0];
			
			Если НовыйСтатус <> Неопределено Тогда
				СтрокаДокумента.СостояниеДокументооборота 	= НовыйСтатус;
				СтрокаДокумента.Status						= Док.Status;
			Иначе
				СтрокаДокумента.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаДокумента.КомментарийКДействию = "Не удалось изменить статус документа по причине:" + ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;

	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеИзменениеСвязиДД1С(ОбрабатываемаяТаблица, ОтборСтрок, Документ1С, ОбновитьСопоставляемыйДокумент1С = Ложь)
		
		НайденныеСтроки = ОбрабатываемаяТаблица.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаДокумента = НайденныеСтроки[0];
			СтрокаДокумента.ПервичныйДокумент =	Документ1С;
			Если ОбновитьСопоставляемыйДокумент1С Тогда
				СтрокаДокумента.СопоставляемыйДокумент1С =	Документ1С;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Документ1С)
				И Режим = "Сопоставление" Тогда
				СтрокаДокумента.СуммаДокумента1С = ПолучитьРеквизитСсылки(Документ1С, "СуммаДокумента");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеУдалениеДокументов(ОбрабатываемаяТаблица, ОтборСтрок)
		
		НайденныеСтроки = ОбрабатываемаяТаблица.НайтиСтроки(ОтборСтрок);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаДокумента = НайденныеСтроки[0];
			ИндексСтроки    = ОбрабатываемаяТаблица.Индекс(СтрокаДокумента);
			ОбрабатываемаяТаблица.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, ИмяТаблицы)
		
		Если Поле.Имя = ИмяТаблицы + "СостояниеОбработки" Тогда
			
			Если Элемент.ТекущиеДанные.СостояниеОбработки = "Проведите документ" Тогда
				ОбработатьСостояниеПроведитеДокумент(Элемент.ТекущиеДанные);
			ИначеЕсли Элемент.ТекущиеДанные.СостояниеОбработки = "Заполните данные" Тогда
				ОбработатьСостояниеЗаполнитеДанные(Элемент.ТекущиеДанные);
			ИначеЕсли Элемент.ТекущиеДанные.СостояниеОбработки = "Выберите документ поступления" Тогда
				ОбработатьСостояниеВыберитеДокументПоступления(Элемент.ТекущиеДанные, ВыбраннаяСтрока);
			Иначе
				МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", Элемент.ТекущиеДанные.КомментарийКДействию);
			КонецЕсли;
			
		ИначеЕсли Поле.Имя = ИмяТаблицы + "ПервичныйДокумент" Тогда
			
			ДокументСсылка= Элемент.ДанныеСтроки(ВыбраннаяСтрока).ПервичныйДокумент;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
			КонецЕсли;
			
		ИначеЕсли Поле.Имя = ИмяТаблицы + "СопоставляемыйДокумент1С" Тогда
			
			ДокументСсылка= Элемент.ДанныеСтроки(ВыбраннаяСтрока).СопоставляемыйДокумент1С;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				МетодКлиента(,"ОткрытьФормуОбъектаИБ", ДокументСсылка);
			КонецЕсли;
			
		Иначе
			
			СформироватьПечатнуюФормуПоФайлуДиадок(ИмяТаблицы);
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСостояниеПроведитеДокумент(ТекущиеДанные)

		МетодКлиента(,"ОткрытьФормуОбъектаИБМодально", ТекущиеДанные.ПервичныйДокумент,,, ЭтаФорма, "ОбработчикОткрытиеДокументаДляПроведения", ТекущиеДанные);
	   			
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьПроведениеДокументаПоступления(СтрокаТаблицы)
		
		Если СтрокаТаблицы.ЭтоУПД_СЧФДОП ИЛИ СтрокаТаблицы.ЭтоЕдиныйДокументСФ Тогда
			НоваяСтрока = ТаблицаСоздатьСчетФактуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "СостояниеОбработки, ПервичныйДокумент");
			НоваяСтрока.СписокСсылок1С.Добавить(СтрокаТаблицы.ПервичныйДокумент);
		Иначе
			НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "СостояниеОбработки");
		КонецЕсли;
		
		ИндексСтроки = ТаблицаСоздатьДокументыПоступления.Индекс(СтрокаТаблицы);
		ТаблицаСоздатьДокументыПоступления.Удалить(ИндексСтроки);
			
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбновитьФормуПослеПроведенияДокументовПоступления()
		
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления", ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", ТаблицаСоздатьСчетФактуры); // если было проведение поступления для УПД СЧФДОП, то документ перешел на закладку СоздатьСчетФактуры
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		
		ОтработатьИзменениеВкл("ТаблицаСоздатьДокументыПоступления");
		ОтработатьИзменениеВкл("ТаблицаСоздатьСчетФактуры");
		
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьПроведениеДокументаСФ(СтрокаТаблицы)
		
		НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,, "СостояниеОбработки");
		
		ИндексСтроки = ТаблицаСоздатьСчетФактуры.Индекс(СтрокаТаблицы);
		ТаблицаСоздатьСчетФактуры.Удалить(ИндексСтроки);
			
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбновитьФормуПослеПроведенияДокументовСФ()
		
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", ТаблицаСоздатьСчетФактуры); // если было проведение поступления для УПД СЧФДОП, то документ перешел на закладку СоздатьСчетФактуры
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСостояниеЗаполнитеДанные(ТекущиеДанные)
		
		ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
		ЗаготовкаДокумента1С = ПолучитьЗаготовкуДляСозданияДокументаПоступленияВ_1С(ИдентификаторСтрокиТаблицы);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("BoxID"			  , ТекущиеДанные.BoxID);
		ПараметрыФормы.Вставить("DocumentID"	  , ТекущиеДанные.DocumentID);
		ПараметрыФормы.Вставить("Type"			  , ТекущиеДанные.DocumentType);
		ПараметрыФормы.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
		ПараметрыФормы.Вставить("Режим"			  , "ГрупповоеСоздание");
		ПараметрыФормы.Вставить("ЗаготовкаДокумента1С", ЗаготовкаДокумента1С);
		
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВводаНакладной", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВводаНакладной", ТекущиеДанные);	
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ОбработатьСостояниеВыберитеДокументПоступления(ТекущиеДанные, ВыбраннаяСтрока)
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("BoxID", 				ТекущиеДанные.BoxID);
		ПараметрыФормы.Вставить("DocumentID", 			ТекущиеДанные.DocumentID);
		ПараметрыФормы.Вставить("Direction", 			"Inbound");
		ПараметрыФормы.Вставить("Type",					ТекущиеДанные.DocumentType);
		ПараметрыФормы.Вставить("CounteragentBoxID", 	ТекущиеДанные.CounteragentID);
		
		Если ТекущиеДанные.DocumentType = "UniversalTransferDocument" Тогда
			ПараметрыФормы.Вставить("Function",			МетодКлиента("Модуль_Клиент", "ТипДокументаУПД", ТекущиеДанные.DocumentFunction));
		КонецЕсли;

		ПараметрыФормы.Вставить("DocumentDate", 	ТекущиеДанные.Дата);
		ПараметрыФормы.Вставить("DocumentNumber", 	ТекущиеДанные.Номер);
		ПараметрыФормы.Вставить("Режим", 			"ВводСВыборомОснований");
					
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыВыбораДокументаСОснованием", ТекущиеДанные);
		
	КонецПроцедуры

	&НаСервере
	Процедура СоздатьДокументСФ_НаОснованииВыбранного(ИндексТекСтроки, ПараметрыСозданияСФ)
		
		СтрокаТаблицы = ТаблицаСоздатьСчетФактуры.Получить(ИндексТекСтроки);
		СоздатьДокументСФ_НаОсновании(СтрокаТаблицы, ПараметрыСозданияСФ);
		
	КонецПроцедуры
	
	// Обертка. Вызывает метод "СвойствоСтруктуры" см. тело функции
	//
	// Параметры:
	//	Коллекция	- Структура	- структура из которой читаем свойство
	//	Свойство	- Строка	- ключ, по которому читаем свойство
	//
	// Возвращаемое значение:
	//	Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
	&НаСервере
	Функция СвойствоСтруктуры(Коллекция, Свойство)
		
		Результат = МетодСервера("Модуль_ИнтеграцияУниверсальный", "СвойствоСтруктуры", Коллекция, Свойство);
		
		Возврат Результат;
		
	КонецФункции // СвойствоСтруктуры()
	
	// Обертка. Вызывает метод "ЕстьРеквизитИлиСвойствоОбъекта" см. тело функции
	//
	// Параметры:
	//	ПарамОбъект		- Произвольный	 - объект, у которого нужно проверить наличие реквизита или свойства;
	//	ИмяРеквизита	- Строка		 - имя реквизита или свойства.
	//
	// Возвращаемое значение:
	//	Булево - Истина, если есть.
	//
	&НаСервере
	Функция ЕстьРеквизитИлиСвойствоОбъекта(ПарамОбъект, ИмяРеквизита)
		
		Результат = МетодСервера(, "ЕстьРеквизитИлиСвойствоОбъекта", ПарамОбъект, ИмяРеквизита);
		
		Возврат Результат;
		
	КонецФункции // ЕстьРеквизитИлиСвойствоОбъекта()
	
	// Обертка. Устанавливает связь между документом 1С и электронным документом
	//
	// Параметры:
	//	Документ1С		- ДокументСсылка	- сопоставляемый документ 1С
	//	DocumentId		- Строка			- идентификатор электронного документа в рамках организации
	//	BoxID			- Строка			- идентификатор ящика организации в сервисе Диадок
	&НаСервере
	Процедура СопоставитьЭлектронныйДокументДокументу1СНаСервере(Документ1С, DocumentId, BoxID)
		
		МетодСервера(, "Установить_DocumentID_Для_Документ", Документ1С, DocumentId, BoxID);
		
	КонецПроцедуры // СопоставитьЭлектронныйДокументДокументу1СНаСервере()
	
//} СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ КОМПЛЕКСНАЯ ОБРАБОТКА ТОРГОВЫЕ СЕТИ

#ОБЛАСТЬ ТОРГОВЫЕ_СЕТИ

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСчетФактура(ТипДокумента)
	Возврат ?(ЛЕВ(ТипДокумента, 7)="Invoice", Истина, Ложь);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФормализованныйТОРГ12(ТипДокумента)
	Возврат ?(ТипДокумента="XmlTorg12", Истина, Ложь);
КонецФункции

&НаКлиенте
Функция ЭтоНеформализованныйДокумент(ТипДокумента)
	Возврат ?(НЕ Найти(ТипДокумента,"Nonformalized")=0 ИЛИ ТипДокумента="Contract", Истина, Ложь);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФормализованныйАктОВыполненииРабот(ТипДокумента)
	Возврат ?(ТипДокумента="XmlAcceptanceCertificate", Истина, Ложь);
КонецФункции

&НаСервереБезКонтекста
Функция ФорматироватьТекстОшибки(ТекстОшибки)
		
	Маркер ="Ошибка валидации:";
	Результат = ТекстОшибки;
	Если Найти(Врег(Результат), Врег(Маркер))>0 Тогда
		Результат = Прав(Результат, СтрДлина(Результат) - Найти(Врег(Результат), Врег(Маркер)) - СтрДлина(Маркер)+1);
	КонецЕсли;
	
	Возврат СокрЛП(результат);
	
КонецФункции

&НаКлиенте
Функция ЭтоВходящийДокумент(Направление)
	Возврат ?(Направление="Inbound", Истина, Ложь);	
КонецФункции

&НаКлиенте
Функция ЭтоИсходящийДокумент(Направление)
	Возврат ?(Направление="Outbound", Истина, Ложь);
КонецФункции

&НаКлиенте
Функция НовоеОписаниеДокументаПакета()
	
	Результат = МетодКлиента("Модуль_Клиент", "НовоеОписаниеДокументаПакета");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СформироватьПечатнуюФормуПоФайлуДиадок(ИмяТаблицы)
	
	ТекущиеДанные =	Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", НСтр( "ru = 'Выберите документ'"));
		Возврат;
	КонецЕсли;

	Document = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(ТекущиеДанные.BoxID).GetDocumentById(ТекущиеДанные.DocumentID);

	ПараметрыФормы = Новый Структура;
		
	Если Document.Department <> Неопределено Тогда
		ПараметрыФормы.Вставить("DepartmentKpp", 	Document.Department.Kpp);
		ПараметрыФормы.Вставить("DepartmentId",		Document.Department.Id);
	КонецЕсли;

	ДокументИБ = ТекущиеДанные.ПервичныйДокумент;
	Если Не ЗначениеЗаполнено(ДокументИБ)
		И ТекущиеДанные.Свойство("СопоставляемыйДокумент1С") Тогда
		ДокументИБ = ТекущиеДанные.СопоставляемыйДокумент1С;
	КонецЕсли;

	ЭлементМассива = НовоеОписаниеДокументаПакета();
	ЭлементМассива.CounteragentBoxID = Document.Counteragent.ID;
	ЭлементМассива.РасширениеФайлаДиадок = ПолучитьРасширениеФайлаДиадок(Document.FileName);
	ЭлементМассива.DocumentType = Document.Type;
	ЭлементМассива.Документ1С = ДокументИБ;
	ЭлементМассива.ТипДокумента = ТекущиеДанные.ТипДокумента;

	МассивДокументовПакета = Новый Массив;
	МассивДокументовПакета.Добавить(ЭлементМассива);

	ПараметрыФормы.Вставить("BoxID", 					Document.OrganizationID);
	ПараметрыФормы.Вставить("CounteragentBoxID", 		Document.Counteragent.ID);
	ПараметрыФормы.Вставить("МассивДокументовПакета", 	МассивДокументовПакета);
	ПараметрыФормы.Вставить("ТочкаВызова", 				"ГрупповаяОбработкаВходящих");
		
	ИмяФормыПросмотра	= МетодКлиента("Модуль_Клиент","ПолучитьИмяФормыДокумента", Document);
	ФормаПросмотра		= МетодКлиента(,"ПолучитьФормуОбработки", ИмяФормыПросмотра, ПараметрыФормы, ЭтаФорма, СокрЛП(Document.DocumentID) + "/" + СокрЛП(Document.OrganizationID));

	ФормаПросмотра.ЭДОбъект = Document;

	ОткрытьФорму(ФормаПросмотра);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//{ Сети анализ документов

&НаКлиенте
Процедура ПровестиАнализДокументов(ПомеченныеСтроки)
	
	МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Анализ документов'"));
	
	ПодготовитьДанныеДляАнализаНаСервере(ПомеченныеСтроки);
	
	ПровестиАнализДокументовНаСервере(СтруктураДействийПоДокументу, СтруктураРаботаСНомеромАкта);
	
	Режим = "ОбработкаДокументов";
	
	НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей();
	
	МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Анализ документов завершен'"), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДанныеДляАнализаНаСервере(ПомеченныеСтроки)
	
	СтруктураРаботаСНомеромАкта	 = МетодКлиента("МодульСетиМестоХраненияНомераАктаПриемки","ЗаполнитьСтруктуруРаботаСНомеромАкта");
	ТекстСостояния				 = НСтр("ru = 'Чтение контента электронных документов'");
	ВсегоСтрок					 = ПомеченныеСтроки.Количество();
	
	Для Сч = 1 По ВсегоСтрок Цикл
	
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
		
		СтрокаТЧ = ПомеченныеСтроки[Сч-1];
		
		Если Истина
			И СтрокаТЧ.DocumentType <> "XmlTorg12"
			И СтрокаТЧ.DocumentType <> "XmlAcceptanceCertificate"
			И СтрокаТЧ.DocumentType <> "Invoice" Тогда
			
			СтрокаТЧ.Вкл				 = Ложь;
			СтрокаТЧ.СостояниеОбработки	 = СтруктураДействийПоДокументу.Пропустить;
			
			Окончание = "";
			Если СтрокаТЧ.DocumentType = "Nonformalized" Тогда
				Окончание = "неформализованных документов";
			ИначеЕсли СтрокаТЧ.DocumentType = "NonformalizedProforma" Тогда
				Окончание = "документа ""Счет на оплату""";
			ИначеЕсли СтрокаТЧ.DocumentType = "Contract" Тогда
				Окончание = "договоров";
			ИначеЕсли СтрокаТЧ.DocumentType = "ReconciliationAct" Тогда
				Окончание = "актов сверки";
			ИначеЕсли СтрокаТЧ.DocumentType = "TrustConnectionRequest" Тогда
				Окончание = "приглашений";
			ИначеЕсли СтрокаТЧ.DocumentType = "ServiceDetails" Тогда
				Окончание = "детализаций";
			ИначеЕсли СтрокаТЧ.DocumentType = "InvoiceCorrection" Тогда
				Окончание = "корректировочных счетов-фактур";
			ИначеЕсли СтрокаТЧ.DocumentType = "InvoiceRevision" Тогда
				Окончание = "исправлений счетов-фактур";
			ИначеЕсли СтрокаТЧ.DocumentType = "InvoiceCorrectionRevision" Тогда
				Окончание = "исправлений корректировочных счетов-фактур";
			ИначеЕсли СтрокаТЧ.DocumentType = "PriceListAgreement" Тогда
				Окончание = "протоколов согласования цены";
			ИначеЕсли СтрокаТЧ.DocumentType = "CertificateRegistry" Тогда
				Окончание = "реестров сертификатов";
			ИначеЕсли СтрокаТЧ.DocumentType = "SupplementaryAgreement" Тогда
				Окончание = "дополнительного соглашения к договору";
			Иначе
				Окончание = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Окончание) Тогда
				СтрокаТЧ.КомментарийКДействию = "Текущая версия интеграционного модуля не поддерживает групповую обработку "+Окончание+".";
			Иначе
				СтрокаТЧ.КомментарийКДействию = "Не определено тип документа";
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Найти(СтрокаТЧ.СостояниеДокументооборота, "Аннулирован") > 0 Тогда
			СтрокаТЧ.Вкл 					 = Ложь;
			СтрокаТЧ.СостояниеОбработки		 = СтруктураДействийПоДокументу.Пропустить;
			СтрокаТЧ.КомментарийКДействию	 = "Документ аннулирован";
		КонецЕсли;
		
		Если Истина
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.КонтентДокумента)
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.СвязанныйДокументId)
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.КонтентСвязанногоДокумента) Тогда
		
			КонтентКэш		 = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId);
			Document		 = КонтентКэш.Document;
			DocumentContent	 = КонтентКэш.Content;

			СтруктураКонтента = ПолучитьКонтентДокументаСтруктурой(СтрокаТЧ, Document);
			Если СтруктураКонтента = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			СтрокаТЧ.КонтентДокумента = СтруктураКонтента; 
									
			МассивДанныхПодчиненныхДокументов = ПолучитьДанныеСвязанныхDocument(Document);
			Если НЕ МассивДанныхПодчиненныхДокументов.Количество()=0 Тогда
				
				Если ЭтоФормализованныйТОРГ12(СтрокаТЧ.DocumentType) 
					ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТЧ.DocumentType) Тогда
					
					КонтентНайден = Ложь;
					
					Если ДокументБезНДС(СтрокаТЧ.КонтентДокумента) Тогда	
						Попытка
							СтрокаТЧ.НомерАкта = ПолучитьНомерАктаПоDocument(Document, СтрокаТЧ.КонтентДокумента);
						Исключение
							Сообщить(ОписаниеОшибки());	
						КонецПопытки;
						
						Если ЗначениеЗаполнено(СтрокаТЧ.НомерАкта) Тогда
							КонтентНайден = Истина;
						КонецЕсли; 
					КонецЕсли;
					
					Если НЕ КонтентНайден Тогда
						
						Для каждого ДанныеПодчиненныйДокумент из МассивДанныхПодчиненныхДокументов Цикл
							ТипСвязанногоДокумента = ДанныеПодчиненныйДокумент.Document.Type;
							Если ЭтоСчетФактура(ТипСвязанногоДокумента) Тогда
								
								Попытка
									СтрокаТЧ.НомерАкта = ПолучитьНомерАктаПоDocument(ДанныеПодчиненныйДокумент.Document, ДанныеПодчиненныйДокумент.Content);
								Исключение
									Сообщить(ОписаниеОшибки());	
								КонецПопытки;
								
								Попытка
									
									Если ТипСвязанногоДокумента = "Invoice" ИЛИ ТипСвязанногоДокумента = "InvoiceRevision" Тогда
										СтруктураКонтентаСвязанного = МетодКлиента("Модуль_Клиент", "Новый_InvoiceContent");
										МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "InvoiceContent");
									ИначеЕсли ТипСвязанногоДокумента = "InvoiceCorrection" ИЛИ ТипСвязанногоДокумента = "InvoiceCorrectionRevision" Тогда
										СтруктураКонтентаСвязанного = МетодКлиента("Модуль_Клиент", "Новый_InvoiceCorrectionContent");
										МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "InvoiceCorrectionContent");
									КонецЕсли;
									
									КонтентНайден = Истина;
									
								Исключение
									ТекстОшибки = ОписаниеОшибки();
									
									СтрокаТЧ.Вкл = Ложь;
									СтрокаТЧ.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
									СтрокаТЧ.КомментарийКДействию = ТекстОшибки;
									Продолжить;
								КонецПопытки;
								
								ДополнитьСтруктуруКонтентаСвязанногоДокумента(Document, DocumentContent, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
								ЗакэшироватьСтруктуруСКонтентомСвязанногоДокумента(СтрокаТЧ, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
								
							КонецЕсли;
							
							Если КонтентНайден Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли ЭтоСчетФактура(СтрокаТЧ.DocumentType) Тогда
					
					Попытка
						СтрокаТЧ.НомерАкта = ПолучитьНомерАктаПоDocument(Document, DocumentContent);
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
					КонтентНайден = Ложь;
					
					Для каждого ДанныеПодчиненныйДокумент из МассивДанныхПодчиненныхДокументов Цикл
						
						ТипСвязанногоДокумента = ДанныеПодчиненныйДокумент.Document.Type;
						
						Если ЭтоФормализованныйТОРГ12(ТипСвязанногоДокумента) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ТипСвязанногоДокумента) Тогда
							
							Если ДокументБезНДС(СтрокаТЧ.КонтентДокумента) Тогда
								Попытка
									НомерАкта = ПолучитьНомерАктаПоDocument(ДанныеПодчиненныйДокумент.Document, ДанныеПодчиненныйДокумент.Content);
									Если ЗначениеЗаполнено(НомерАкта) Тогда
										СтрокаТЧ.НомерАкта = НомерАкта;
									КонецЕсли;
								Исключение
									Сообщить(ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли;
							
							Попытка
								
								Если ЭтоФормализованныйАктОВыполненииРабот(ТипСвязанногоДокумента) Тогда
									СтруктураКонтентаСвязанного = МетодКлиента("Модуль_Клиент", "Новый_AcceptanceCertificateSellerContent");
									МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "XmlAcceptanceCertificate");
									КонтентНайден = Истина;
								КонецЕсли;
								Если ЭтоФормализованныйТОРГ12(ТипСвязанногоДокумента) Тогда
									СтруктураКонтентаСвязанного = МетодКлиента("Модуль_Клиент", "Новый_Torg12SellerContent");
									МетодКлиента("Модуль_Клиент", "ЗаполнитьСтруктуруПоКонтенту", ДанныеПодчиненныйДокумент.Content, СтруктураКонтентаСвязанного, "XmlTorg12Content");
									КонтентНайден = Истина;
								КонецЕсли;	
								
							Исключение
								
								ТекстОшибки = ОписаниеОшибки();
								
								СтрокаТЧ.Вкл					 = Ложь;
								СтрокаТЧ.СостояниеОбработки		 = СтруктураДействийПоДокументу.ОшибкаОбработки;
								СтрокаТЧ.КомментарийКДействию	 = ТекстОшибки;
								
								Продолжить;	
								
							КонецПопытки;
							
							ДополнитьСтруктуруКонтентаСвязанногоДокумента(Document, DocumentContent, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
							ЗакэшироватьСтруктуруСКонтентомСвязанногоДокумента(СтрокаТЧ, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент);
							
						КонецЕсли;
						
						Если КонтентНайден Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ЭтоФормализованныйТОРГ12(СтрокаТЧ.DocumentType) И ДокументБезНДС(СтрокаТЧ.КонтентДокумента) Тогда
				
				Попытка
					СтрокаТЧ.НомерАкта = ПолучитьНомерАктаПоDocument(Document, СтрокаТЧ.КонтентДокумента);
				Исключение
					Сообщить(ОписаниеОшибки());	
				КонецПопытки;
				
			Иначе
				
				СтрокаТЧ.Вкл					 = Ложь;
				СтрокаТЧ.СостояниеОбработки		 = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаТЧ.КомментарийКДействию	 = "Не найден связанный документ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументБезНДС(DocumentContent) Экспорт
	
	// Документ "Акт о выполнении работ в формате ФНС" не содержит поле "Ставка НДС" (TaxRate), поэтому ориентируемся на поле "Сумма НДС" (Vat).
	Если DocumentContent.Type = "XmlAcceptanceCertificate" Тогда
		ИмяПоля= "Vat";
	Иначе
		ИмяПоля= "TaxRate";
	КонецЕсли;
	
	ВГраница= DocumentContent.Items.ВГраница();
	
	Для Каждого Item ИЗ DocumentContent.Items Цикл
		
		ЗначениеПоля= Item[ИмяПоля];
		
		Если ЗначениеЗаполнено(ЗначениеПоля) 
			 И (ИмяПоля= "Vat" 							   // Для поля "Vat" достаточно того что значение заполнено.
				ИЛИ НРег(СокрЛП(ЗначениеПоля))<>"без ндс") // Для поля "TaxRate" нужно проверить, что ставка НДС не равна "без ндс".
		Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКонтентДокументаСтруктурой(СтрокаТаблицы, Document)
	
	Попытка
		Прото = МетодКлиента("Модуль_Клиент", "ПолучитьProto", Document);
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		СтрокаТаблицы.Вкл = Ложь;
		СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
		СтрокаТаблицы.КомментарийКДействию = ТекстОшибки;
		
		Возврат Неопределено;
		
	КонецПопытки; 
	
	СтруктураКонтента = Прото.Контент;
	СтруктураКонтента.Вставить("Type", СтрокаТаблицы.ContentType);
	СтруктураКонтента.Вставить("DocumentId", Document.DocumentId);
	
	Если ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
		
		Если СтруктураКонтента.Свойство("Organization") Тогда
			СтруктураКонтента.Вставить("OrganizationInn", СтруктураКонтента.Organization.Inn);
			СтруктураКонтента.Вставить("OrganizationKpp", СтруктураКонтента.Organization.Kpp);
		Иначе
			// В актах 172 формата в принципе нет поля "Покупатель / Плательщик", поэтому возьмем ИНН/КПП из организации - получателя документа.
			// В дальнейшем эти 2 поля нужны для проверки совпадения ИНН/КПП в текущей базе 1С и в электронном документе.
			СтруктураКонтента.Вставить("OrganizationInn", Document.Organization.Inn);
			СтруктураКонтента.Вставить("OrganizationKpp", Document.Organization.Kpp);
		КонецЕсли;
		
	Иначе
		
		Покупатель = РеквизитыПокупателя(СтруктураКонтента);
		СтруктураКонтента.Вставить("OrganizationInn", Покупатель.Inn);
		СтруктураКонтента.Вставить("OrganizationKpp", Покупатель.KPP);
		
	КонецЕсли;
	
	Если ЭтоСчетФактура(СтрокаТаблицы.DocumentType) Тогда
		СтруктураКонтента.Вставить("ВыставленЗапросНаУточнение", Document.AmendmentRequested);
	КонецЕсли;
	
	Возврат СтруктураКонтента;
	
КонецФункции

&НаКлиенте
Процедура ЗакэшироватьСтруктуруСКонтентомСвязанногоДокумента(СтрокаТаблицы, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент)
	
	//ищем связанный документ в таблице документов
	НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", ДанныеПодчиненныйДокумент.DocumentId, ДанныеПодчиненныйДокумент.BoxId));
	Если НайденныеСтроки.Количество()=0 Тогда
		//не нашли - записываем в текущюю строку
		СтрокаТаблицы.КонтентСвязанногоДокумента = СтруктураКонтентаСвязанного;
	Иначе
		//нашли - делаем ссылку на связанный док
		СтрокаТаблицы.СвязанныйДокументId = ДанныеПодчиненныйДокумент.DocumentId;
		
		//в строке связанного - делаем ссылку на связанный и запоминаем контент
		НайденнаяСтрока = НайденныеСтроки[0];
		Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.КонтентДокумента) Тогда
			НайденнаяСтрока.КонтентДокумента = СтруктураКонтентаСвязанного;
		КонецЕсли;
		НайденнаяСтрока.СвязанныйДокументId = СтрокаТаблицы.DocumentId;
		НайденнаяСтрока.НомерАкта = СтрокаТаблицы.НомерАкта;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтруктуруКонтентаСвязанногоДокумента(Document, DocumentContent, СтруктураКонтентаСвязанного, ДанныеПодчиненныйДокумент)
	
	Если СтруктураКонтентаСвязанного = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКонтентаСвязанного.Вставить("Type", ДанныеПодчиненныйДокумент.Document.Type);
	СтруктураКонтентаСвязанного.Вставить("DocumentId", ДанныеПодчиненныйДокумент.Document.DocumentId);
	
	Если ЭтоФормализованныйАктОВыполненииРабот(Document.Type) Тогда
		
		СтруктураКонтентаСвязанного.Вставить("OrganizationInn", Document.Organization.Inn);
		СтруктураКонтентаСвязанного.Вставить("OrganizationKpp", Document.Organization.Kpp);
		
	Иначе
		
		Покупатель = РеквизитыПокупателя(DocumentContent);
		СтруктураКонтентаСвязанного.Вставить("OrganizationInn", Покупатель.Inn);
		СтруктураКонтентаСвязанного.Вставить("OrganizationKpp", Покупатель.KPP);
		
	КонецЕсли;
	
	Если ЭтоСчетФактура(ДанныеПодчиненныйДокумент.Document.Type) Тогда
		СтруктураКонтентаСвязанного.Вставить("ВыставленЗапросНаУточнение", ДанныеПодчиненныйДокумент.Document.AmendmentRequested);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПровестиАнализДокументовНаСервере(СтруктураДействийПоДокументу, СтруктураРаботаСНомеромАкта)
	
	ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаДокументов);
		
	Для каждого СтрокаТаблицы из ПомеченныеСтроки Цикл
						
		Попытка
			НайтиСопоставяемыйДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, СтруктураДействийПоДокументу);
			
			Если (СтрокаТаблицы.КомментарийКДействию = "") И (НЕ СтрокаТаблицы.СопоставляемыйДокумент1С = Неопределено) Тогда
				
				РезультатПроверкиПакета = ВыполнитьПроверкуПакета(СтрокаТаблицы, ОбработкаОбъект);
				
				ИнтерпритироватьРезультатПроверкиПакета(СтрокаТаблицы, РезультатПроверкиПакета, СтруктураДействийПоДокументу);
								
			КонецЕсли;
		Исключение
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаОбработки;
			СтрокаТаблицы.КомментарийКДействию 	= ОписаниеОшибки();
		КонецПопытки;
						
	КонецЦикла;
	
КонецПроцедуры


	////////////////////////////////////////////////////////////////////////////////
	//{ Поиск сопоставляемого документа
	
	&НаСервере
	Процедура НайтиСопоставяемыйДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, СтруктураДействийПоДокументу)
		
		Если СтрокаТаблицы.DocumentType = "XmlTorg12"
			ИЛИ СтрокаТаблицы.DocumentType = "XmlAcceptanceCertificate" Тогда
			
			Если СтрокаТаблицы.Status = "InboundWaitingForRecipientSignature" Тогда //ЭтоВходящийДокЕщеБезПодписиИОтказа
				
				Попытка
					Если ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта) = Истина Тогда
						ДанныеDocument = Новый Структура;
						ДанныеDocument.Вставить("DocumentDate", 	СтрокаТаблицы.КонтентДокумента.Date);
						ДанныеDocument.Вставить("DocumentNumber", 	СтрокаТаблицы.КонтентДокумента.Number);
						ДанныеDocument.Вставить("DocumentType", 	СтрокаТаблицы.КонтентДокумента.Type);
						СтрокаТаблицы.СопоставляемыйДокумент1С = НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
					Иначе
						СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОтказатьВПодписи;
						СтрокаТаблицы.КомментарийКДействию 	= "В электронном документе не указан номер акта приемки.";	
					КонецЕсли;
				Исключение 
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "Ошибка валидации")=0 Тогда
						ВызватьИсключение(ТекстОшибки);
					Иначе

						Если НЕ Найти(ТекстОшибки, "не сопоставлен контрагенту в 1С")=0 Тогда
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.Пропустить;
						Иначе
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.ОтказатьВПодписи;
						КонецЕсли;
						
						ТекстКомментария = ФорматироватьТекстОшибки(ТекстОшибки);
											
						ПодстрокаПоиска = "В счете-фактуре не указан дополнительный параметр";
						Если НЕ Найти(ТекстКомментария, ПодстрокаПоиска)=0 Тогда
							ПодстрокаЗамены = "В связанном счете-фактуре не указан дополнительный параметр"; //! отследить замену
							ТекстКомментария = СтрЗаменить(ТекстКомментария, ПодстрокаПоиска, ПодстрокаЗамены);
						КонецЕсли;
						СтрокаТаблицы.КомментарийКДействию = ТекстКомментария;
						СтрокаТаблицы.ТекстОшибки = ТекстКомментария;
						
					КонецЕсли;
				КонецПопытки;
				
			Иначе
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.Пропустить;
			    СтрокаТаблицы.КомментарийКДействию 	= "Документ был обработан ранее.";
			КонецЕсли;		
			
		ИначеЕсли ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
			
			ВыставленЗапросНаУточнение = ?(НЕ СтрокаТаблицы.КонтентДокумента.ВыставленЗапросНаУточнение=Неопределено, СтрокаТаблицы.КонтентДокумента.ВыставленЗапросНаУточнение, Ложь);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) И (НЕ ВыставленЗапросНаУточнение И СтрокаТаблицы.СостояниеДокументооборота<>"Документооборот завершен. Требует уточнения") Тогда
				Попытка
					Если ЗначениеЗаполнено(СтрокаТаблицы.НомерАкта)=Истина Тогда
						СтрокаТаблицы.СопоставляемыйДокумент1С = НайтиРасходнуюНакладнуюОснованиеДляСчетаФактуры(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект);
					Иначе
						СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ЗапроситьУточнение;
						СтрокаТаблицы.КомментарийКДействию 	= "В электронном документе не указан номер акта приемки.";
					КонецЕсли;
				Исключение 
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "Ошибка валидации")=0 Тогда
						ВызватьИсключение(ТекстОшибки);
					Иначе 
						Если НЕ Найти(ТекстОшибки, "не сопоставлен контрагенту в 1С")=0 Тогда
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.Пропустить;
						Иначе
							СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.ЗапроситьУточнение;
						КонецЕсли;
						
						ТекстКомментария = ФорматироватьТекстОшибки(ТекстОшибки);
						СтрокаТаблицы.КомментарийКДействию = ТекстКомментария;
						СтрокаТаблицы.ТекстОшибки = ФорматироватьТекстОшибки(ТекстОшибки);
											
					КонецЕсли;
				КонецПопытки;
			Иначе
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Пропустить;
				Если ВыставленЗапросНаУточнение или СтрокаТаблицы.СостояниеДокументооборота = "Документооборот завершен. Требует уточнения" Тогда
					СтрокаТаблицы.КомментарийКДействию = "По документу выставлен запрос на уточнение";
				Иначе
					СтрокаТаблицы.КомментарийКДействию = "Документ уже сопоставлен";
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;	
		
	КонецПроцедуры

	&НаСервере
	Функция НайтиРасходнуюНакладнуюОснованиеДляСчетаФактуры(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект)
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.СвязанныйДокументId) Тогда
			
			НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", СтрокаТаблицы.СвязанныйДокументId, СтрокаТаблицы.BoxId));
			Если НЕ НайденныеСтроки.Количество()=0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				ДанныеDocument = Новый Структура;
				ДанныеDocument.Вставить("DocumentDate", 	НайденнаяСтрока.КонтентДокумента.Date);
				ДанныеDocument.Вставить("DocumentNumber", 	НайденнаяСтрока.КонтентДокумента.Number);
				ДанныеDocument.Вставить("DocumentType", 	НайденнаяСтрока.КонтентДокумента.Type);
				СсылкаРНК =	НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
				Если НЕ СсылкаРНК = Неопределено Тогда
					Возврат СсылкаРНК;
				КонецЕсли;
			Иначе
				ВызватьИсключение("Ошибка валидации: Для счет-фактуры нет связанного Торг-12");
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтентСвязанногоДокумента) Тогда
			
			ДанныеDocument = Новый Структура;
			ДанныеDocument.Вставить("DocumentDate", 	СтрокаТаблицы.КонтентСвязанногоДокумента.Date);
			ДанныеDocument.Вставить("DocumentNumber", 	СтрокаТаблицы.КонтентСвязанногоДокумента.Number);
			ДанныеDocument.Вставить("DocumentType", 	СтрокаТаблицы.КонтентСвязанногоДокумента.Type);
			СсылкаРНК =	НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
			
			Если НЕ СсылкаРНК = Неопределено Тогда
				Возврат СсылкаРНК;
			КонецЕсли;
			
		КонецЕсли;
			
		ВызватьИсключение("Ошибка валидации: Для счет-фактуры нет связанного Торг-12");
		
	КонецФункции

	&НаСервере
	Функция НайтиДокументВ1С(СтрокаТаблицы, СтруктураРаботаСНомеромАкта=Неопределено, ОбработкаОбъект=Неопределено, ДанныеDocument)
		
		ТипДокументов =	?(Найти(ДанныеDocument.DocumentType, "Invoice") > 0, "СчетФактураПолученный", "ПоступлениеТоваровУслуг");
			
		СтруктураПервичныйДокумент = НайтиПервичныйДокументНаСервере(СтрокаТаблицы, ТипДокументов, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
						
		Если СтруктураПервичныйДокумент.ТекстОшибки="" Тогда
			Возврат СтруктураПервичныйДокумент.ПервичныйДокумент;
		Иначе
			ВызватьИсключение(СтруктураПервичныйДокумент.ТекстОшибки);
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция НайтиПервичныйДокументНаСервере(СтрокаТаблицы, ТипДокументов, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument)
		
		МассивФильтровДляЗапроса = СформироватьМассивФильтровДляЗапроса(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument);
		Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
			Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта = "ДополнительнымРеквизитом" Тогда
				МассивФильтровПоДопСвойству = СформироватьМассивФильтровПоДопСвойству(СтрокаТаблицы, СтруктураРаботаСНомеромАкта);	
			КонецЕсли;
		КонецЕсли;
		
		Запрос = "";
		ТекстОшибки = "";
		ПервичныйДокумент = "";
		
		Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
			
			Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта = "ДополнительнымРеквизитом" Тогда
				Запрос = ПолучитьЗапросДопРеквизит(ТипДокументов, МассивФильтровДляЗапроса, МассивФильтровПоДопСвойству);
			Иначе
				Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
			КонецЕсли;
			
		Иначе
			Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
		КонецЕсли;
		
		Если НЕ Запрос="" Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Количество()=0 Тогда
				Выборка.Следующий();
				
				ПервичныйДокумент =	Выборка.Док;
			Иначе
				ТекстОшибки = "Ошибка валидации: В нашей базе не найден документ по номеру акта приемки: " + СтрокаТаблицы.НомерАкта;	
			КонецЕсли;
		Иначе
			ТекстОшибки = "Не сформирован текст запроса";	
		КонецЕсли;
		
		Возврат Новый Структура("ПервичныйДокумент, ТекстОшибки", ПервичныйДокумент, ТекстОшибки);
		
	КонецФункции

	&НаСервере
	Функция СформироватьМассивФильтровДляЗапроса(СтрокаТаблицы, СтруктураРаботаСНомеромАкта, ОбработкаОбъект, ДанныеDocument)
				
		МассивФильтров = Новый Массив();
		
		ДобавитьОбщиеФильтры(МассивФильтров, СтрокаТаблицы, ОбработкаОбъект);
		ДобавитьКастомныеФильтры(МассивФильтров, ДанныеDocument, СтрокаТаблицы, СтруктураРаботаСНомеромАкта);
		
		Возврат МассивФильтров;
		
	КонецФункции

	&НаСервере
	Процедура ДобавитьОбщиеФильтры(МассивФильтров, СтрокаТаблицы, ОбработкаОбъект)
			
		ДобавитьФильтр(МассивФильтров, "Организация", 	МетодСервера(,"BoxID_2_Организация", СтрокаТаблицы.BoxID));
		ДобавитьФильтр(МассивФильтров, "Контрагент", 	МетодСервера(,"CounteragentBoxID_2_Контрагент", СтрокаТаблицы.CounteragentID));
		
	КонецПроцедуры

	&НаСервере
	Процедура ДобавитьКастомныеФильтры(МассивФильтров, ДанныеDocument, СтрокаТаблицы, СтруктураРаботаСНомеромАкта)
				
		Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
			Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта="ДополнительнымРеквизитом" Тогда
				ДобавитьФильтрыДопРеквизит(МассивФильтров, ДанныеDocument);
			ИначеЕсли СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта="СпециальнымРеквизитом" Тогда
				ДобавитьФильтрыСпециальныйРеквизит(МассивФильтров, СтрокаТаблицы, ДанныеDocument, СтруктураРаботаСНомеромАкта);
			КонецЕсли;
		Иначе
			ДобавитьФильтрыНомерВходящегоДокумента(МассивФильтров, СтрокаТаблицы, ДанныеDocument);
		КонецЕсли;
		
	КонецПроцедуры

	&НаСервере
	Процедура ДобавитьФильтрыДопРеквизит(МассивФильтров, ДанныеDocument)
		
		Если ЭтоФормализованныйТОРГ12(ДанныеDocument.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ДанныеDocument.DocumentType) Тогда 
			
			ДопУсловие = Новый Структура("Условие, ПараметрУсловия", "НАЧАЛОПЕРИОДА", "ГОД");
			ДобавитьФильтр(МассивФильтров, "Дата", НачалоГода(ДанныеDocument.DocumentDate), ДопУсловие);
			
		ИначеЕсли ЭтоСчетФактура(ЛЕВ(ДанныеDocument.DocumentType, 7)) Тогда	
			
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", ДанныеDocument.DocumentNumber);
			ДобавитьФильтр(МассивФильтров, "ДатаВходящегоДокумента", НачалоГода(ДанныеDocument.DocumentDate));
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ДобавитьФильтрыСпециальныйРеквизит(МассивФильтров, СтрокаТаблицы, ДанныеDocument, СтруктураРаботаСНомеромАкта)
		
		Если ЭтоФормализованныйТОРГ12(ДанныеDocument.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(ДанныеDocument.DocumentType) Тогда
			
			ПараметрыХраненияНомераАкта = СтруктураРаботаСНомеромАкта.ПараметрыХраненияНомераАкта;
			ИмяРеквизита = ПараметрыХраненияНомераАкта.ИмяРеквизита;
			
			ДопУсловие = Новый Структура("Условие, ПараметрУсловия", "ВЫРАЗИТЬ", "СТРОКА(255)");
			ДобавитьФильтр(МассивФильтров, ИмяРеквизита, СтрокаТаблицы.НомерАкта, ДопУсловие);
						
			ДопУсловие = Новый Структура("Условие, ПараметрУсловия", "НАЧАЛОПЕРИОДА", "ГОД");
			ДобавитьФильтр(МассивФильтров, "Дата", НачалоГода(ДанныеDocument.DocumentDate), ДопУсловие);
			
		ИначеЕсли ЭтоСчетФактура(Лев(ДанныеDocument.DocumentType, 7)) Тогда	
			
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", ДанныеDocument.DocumentNumber);
			ДобавитьФильтр(МассивФильтров, "ДатаВходящегоДокумента", НачалоГода(ДанныеDocument.DocumentDate));
			
			ДобавитьФильтр(МассивФильтров, ИмяРеквизита, СтрокаТаблицы.НомерАкта);
			
		КонецЕсли;	
	КонецПроцедуры

	&НаСервере
	Процедура ДобавитьФильтрыНомерВходящегоДокумента(МассивФильтров, СтрокаТаблицы, ДанныеDocument)
				
		Если ДанныеDocument.DocumentType = "XmlAcceptanceCertificate" 
			ИЛИ ДанныеDocument.DocumentType = "XmlTorg12" Тогда
							
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", СтрокаТаблицы.НомерАкта);
					
			ДопУсловие=	Новый Структура("Условие, ПараметрУсловия", "НАЧАЛОПЕРИОДА", "ГОД");
			ДобавитьФильтр(МассивФильтров, "Дата", НачалоГода(ДанныеDocument.DocumentDate), ДопУсловие);
			
		ИначеЕсли Лев(ДанныеDocument.DocumentType, 7) = "Invoice" Тогда	
			
			ДобавитьФильтр(МассивФильтров, "НомерВходящегоДокумента", ДанныеDocument.DocumentNumber);
			ДобавитьФильтр(МассивФильтров, "ДатаВходящегоДокумента", НачалоГода(ДанныеDocument.DocumentDate));
			
		КонецЕсли;
		
	КонецПроцедуры

	&НаСервере
	Функция СформироватьМассивФильтровПоДопСвойству(СтрокаТаблицы, СтруктураРаботаСНомеромАкта)
		
		МассивФильтровПоДопСвойствам = Новый Массив();
		
		ПараметрыХраненияНомераАкта = СтруктураРаботаСНомеромАкта.ПараметрыХраненияНомераАкта;
		ЗначениеСвойства = ПараметрыХраненияНомераАкта.ИмяРеквизита;
		
		ДобавитьФильтр(МассивФильтровПоДопСвойствам, "Свойство", ЗначениеСвойства);
		
		НомерАктаПриемки = СтрокаТаблицы.НомерАкта;
				
		ДобавитьФильтр(МассивФильтровПоДопСвойствам, "Значение", НомерАктаПриемки);
		
		Возврат МассивФильтровПоДопСвойствам;
		
	КонецФункции
	
	&НаСервереБезКонтекста
	Процедура ДобавитьФильтр(НаборФильтров, Поле, Значение, ДопУсловие =  Неопределено, ИспользоватьВхождение =  Ложь)
		
		Фильтр=	Новый Структура();
		Фильтр.Вставить("Поле", 		Поле);
		Фильтр.Вставить("Значение", 	Значение);
		Фильтр.Вставить("ДопУсловие", 	ДопУсловие);
		Фильтр.Вставить("ВидСравнения", ?(ИспользоватьВхождение, "В", "="));
		
		НаборФильтров.Добавить(Фильтр);
		
	КонецПроцедуры
	
	&НаСервереБезКонтекста
	Функция ПолучитьСтандартныйЗапрос(ТипДокументов, НаборФильтров)
				
		Запрос = Новый Запрос;
		
		Если ТипДокументов = "ПоступлениеТоваровУслуг" Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ." + ТипДокументов + " КАК Док
			|ГДЕ
			|	Док.пометкаУдаления = Ложь";
			Для каждого Фильтр Из НаборФильтров Цикл
				
				Если НЕ Фильтр.ДопУсловие = Неопределено
					И Фильтр.ДопУсловие.Условие = "ВЫРАЗИТЬ" Тогда
					
					Запрос.Текст = Запрос.Текст + "
					| И " + Фильтр.ДопУсловие.Условие 
					+ "(Док." + Фильтр.Поле +  " КАК " + Фильтр.ДопУсловие.ПараметрУсловия
					+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					
				Иначе
					Запрос.Текст = Запрос.Текст + "
					| И " + ?(Фильтр.ДопУсловие = Неопределено, "", Фильтр.ДопУсловие.Условие) 
					+ "(Док." + Фильтр.Поле +  ?(Фильтр.ДопУсловие = Неопределено, "", ", " + Фильтр.ДопУсловие.ПараметрУсловия)
					+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
									
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ." + ТипДокументов + ".ДокументыОснования КАК Док
			|ГДЕ
			|   Док.Ссылка.пометкаУдаления  = Ложь";
			Для каждого Фильтр Из НаборФильтров Цикл
				Если Фильтр.Значение <> Неопределено Тогда
					Если Найти(Фильтр.Поле, "Склад") > 0 Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И Док.ДокументОснование." + Фильтр.Поле + " " + Фильтр.ВидСравнения + " " + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					Иначе	
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка." + Фильтр.Поле + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат Запрос;
		
	КонецФункции
	
	&НаСервере
	Функция ПолучитьЗапросДопРеквизит(ТипДокументов, МассивФильтровДляЗапроса, МассивФильтровПоДопСвойству)
		
		Запрос = Новый Запрос;
		
		Если ТипДокументов = "ПоступлениеТоваровУслуг" Тогда
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.Док КАК Док,
			|	ЗначенияСвойствОбъектов.Значение КАК ВнешнийНомер
			|ИЗ
			|	(ВЫБРАТЬ
			|		Док.Ссылка Док
			|	ИЗ
			|		Документ." + ТипДокументов + " КАК Док
			|	ГДЕ
			|		Док.Проведен";
			Для каждого Фильтр Из МассивФильтровДляЗапроса Цикл
				Запрос.Текст = Запрос.Текст + "
				| И " + ?(Фильтр.ДопУсловие = Неопределено, "", Фильтр.ДопУсловие.Условие) 
				+ "(Док." + Фильтр.Поле +  ?(Фильтр.ДопУсловие = Неопределено, "", ", " + Фильтр.ДопУсловие.ПараметрУсловия)
				+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
				Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
			КонецЦикла;
			Запрос.Текст = Запрос.Текст + ") КАК ВложенныйЗапрос
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
			|	ПО ВложенныйЗапрос.Док = ЗначенияСвойствОбъектов.Объект";
			Если НЕ МассивФильтровПоДопСвойству=Неопределено И НЕ МассивФильтровПоДопСвойству.Количество()=0 Тогда
				Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	1=1";
				Для каждого Фильтр из МассивФильтровПоДопСвойству Цикл
					Запрос.Текст = Запрос.Текст + "
					| И " + ?(Фильтр.ДопУсловие = Неопределено, "", Фильтр.ДопУсловие.Условие) 
					+ "(ЗначенияСвойствОбъектов." + Фильтр.Поле +  ?(Фильтр.ДопУсловие = Неопределено, "", ", " + Фильтр.ДопУсловие.ПараметрУсловия)
					+ ")" + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
					Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
				КонецЦикла;
			КонецЕсли;
				
		Иначе
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка Док
			|ИЗ
			|	Документ." + ТипДокументов + ".ДокументыОснования КАК Док
			|ГДЕ
			|   Док.Ссылка.Проведен";
			
			Для каждого Фильтр Из МассивФильтровДляЗапроса Цикл
				Если Фильтр.Значение <> Неопределено Тогда
					Если Найти(Фильтр.Поле, "Склад") > 0 Тогда
						Запрос.Текст = Запрос.Текст + "
						|	И Док.ДокументОснование." + Фильтр.Поле + " " + Фильтр.ВидСравнения + " " + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					Иначе	
						Запрос.Текст = Запрос.Текст + "
						|	И Док.Ссылка." + Фильтр.Поле + Фильтр.ВидСравнения + "(&пар" + Фильтр.Поле + ")";
						Запрос.УстановитьПараметр("пар" + Фильтр.Поле, Фильтр.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Возврат Запрос;	
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	//} Поиск сопоставляемого документа
	
	
&НаСервере
Функция НайтиПервичныйДокумент(Знач ТипДокументов, Знач МассивФильтровДляЗапроса, Знач СтруктураРаботаСНомеромАкта, Знач МассивФильтровПоДопСвойству=Неопределено)
	
	Запрос = "";
	ТекстОшибки = "";
	ПервичныйДокумент = "";
	
	Если СтруктураРаботаСНомеромАкта.Свойство("МестоХраненияНомераАкта") Тогда
		
		Если СтруктураРаботаСНомеромАкта.МестоХраненияНомераАкта = "ДополнительнымРеквизитом" Тогда
			Запрос = ПолучитьЗапросДопРеквизит(ТипДокументов, МассивФильтровДляЗапроса, МассивФильтровПоДопСвойству);
		Иначе
			Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
		КонецЕсли;
		
	Иначе
		Запрос = ПолучитьСтандартныйЗапрос(ТипДокументов, МассивФильтровДляЗапроса);		
	КонецЕсли;
	
	Если НЕ Запрос="" Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Количество()=0 Тогда
			Выборка.Следующий();
			
			ПервичныйДокумент =	Выборка.Док;
		Иначе
			ТекстОшибки = "Ошибка валидации: В нашей базе не найден документ по номеру акта приемки: ";
		КонецЕсли;
	Иначе
		ТекстОшибки = "Не сформирован текст запроса";	
	КонецЕсли;
	
	Возврат Новый Структура("ПервичныйДокумент, ТекстОшибки", ПервичныйДокумент, ТекстОшибки);
	
КонецФункции


	////////////////////////////////////////////////////////////////////////////////
	//{ Проверка пакета

	&НаСервере
	Функция ВыполнитьПроверкуПакета(СтрокаТаблицы, ОбработкаОбъект)
		
		СписокОшибок = "";
		РезультатПроверкиПакета = Новый Структура("ПрошлаУспешно, СписокОшибок", Истина, СписокОшибок);
							
		ВыполнитьПроверку(РезультатПроверкиПакета, Ложь, "", СтрокаТаблицы, СтрокаТаблицы.КонтентДокумента, ОбработкаОбъект);                                                 
		
		Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
			
			Если ОрганизацияНаУСН(СтрокаТаблицы.BoxID) = Ложь Тогда
				
				КонтентСвязанногоДокумента = "";
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СвязанныйДокументId) Тогда
					НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", СтрокаТаблицы.СвязанныйДокументId, СтрокаТаблицы.BoxId));
					Если НЕ НайденныеСтроки.Количество()=0 Тогда
						НайденнаяСтрока = НайденныеСтроки[0];
						КонтентСвязанногоДокумента = НайденнаяСтрока.КонтентДокумента;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтентСвязанногоДокумента) Тогда
					
					КонтентСвязанногоДокумента = СтрокаТаблицы.КонтентСвязанногоДокумента;
					
				ИначеЕсли ДокументБезНДС(СтрокаТаблицы.КонтентДокумента) Тогда
					
					РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Истина);
					РезультатПроверкиПакета.Вставить("СписокОшибок", "");
					
				Иначе
					
					РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Ложь);
					СписокОшибок = РезультатПроверкиПакета.СписокОшибок + Символы.ПС + " Не найдена связанная СФ.";
					РезультатПроверкиПакета.Вставить("СписокОшибок", СписокОшибок);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КонтентСвязанногоДокумента) И ЭтоСчетФактура(КонтентСвязанногоДокумента.Type) Тогда
					ВыполнитьПроверку(РезультатПроверкиПакета, Истина, "Ошибка в связанной СФ:", СтрокаТаблицы, КонтентСвязанногоДокумента, ОбработкаОбъект);
				КонецЕсли;
										
			КонецЕсли;	
			
		ИначеЕсли ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
			
			КонтентСвязанногоДокумента = "";
			СостояниеДокументооборотаСвязанногоДокумента = "";	
			Если ЗначениеЗаполнено(СтрокаТаблицы.СвязанныйДокументId) Тогда
				НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(Новый Структура("DocumentId, BoxId", СтрокаТаблицы.СвязанныйДокументId, СтрокаТаблицы.BoxId));
				Если НЕ НайденныеСтроки.Количество()=0 Тогда
					НайденнаяСтрока = НайденныеСтроки[0];
					КонтентСвязанногоДокумента = НайденнаяСтрока.КонтентДокумента;
					СостояниеДокументооборотаСвязанногоДокумента = НайденнаяСтрока.СостояниеДокументооборота;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КонтентСвязанногоДокумента) Тогда
				
				КонтентСвязанногоДокумента = СтрокаТаблицы.КонтентСвязанногоДокумента;
				
			Иначе
				РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиПакета.СписокОшибок + Символы.ПС + " Не найден связанный торг-12.";
				РезультатПроверкиПакета.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
			Если Найти(СостояниеДокументооборотаСвязанногоДокумента, "Аннулирован")>0 Тогда
				РезультатПроверкиПакета.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиПакета.СписокОшибок + Символы.ПС + " Связанный торг-12 аннулирован";
				РезультатПроверкиПакета.Вставить("СписокОшибок", СписокОшибок);
				
			ИначеЕсли ЗначениеЗаполнено(КонтентСвязанногоДокумента) 
				И (ЭтоФормализованныйТОРГ12(КонтентСвязанногоДокумента.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(КонтентСвязанногоДокумента.Type)) Тогда
				
				Если ДокументБезНДС(СтрокаТаблицы.КонтентДокумента) Тогда	
					
					Если РезультатПроверкиПакета.ПрошлаУспешно = Истина Тогда
						
						РезультатПроверкиПакета.Вставить("СчетФактураБезНДС", Истина);
						
					КонецЕсли;
					
				Иначе	
					ВыполнитьПроверку(РезультатПроверкиПакета, Истина, "Ошибка в связанной торг-12:", СтрокаТаблицы, КонтентСвязанногоДокумента, ОбработкаОбъект);
				КонецЕсли;	
					
			КонецЕсли;
						
		КонецЕсли;	
		
		РезультатПроверкиПакета.СписокОшибок = СокрЛП(РезультатПроверкиПакета.СписокОшибок);
		
		Возврат РезультатПроверкиПакета;
		
	КонецФункции

	&НаСервере
	Функция ВыполнитьПроверку(РезультатПроверкиПакета, ПроверкаСвязанногоДокумента, КонтекстПроверки, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
		СписокОшибок = "";
		РезультатПроверкиДокумента = Новый Структура("ПрошлаУспешно, СписокОшибок", Истина, СписокОшибок);
							
		Если НЕ СтруктураКонтент = Неопределено Тогда
			РезультатПроверкиДокумента = ПроверитьДокумент(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
		    РезультатПроверкиДокумента = ПроверитьОрганизацию(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			РезультатПроверкиДокумента = ПроверитьКонтрагента(РезультатПроверкиДокумента,  СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
		Иначе
			РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверкиДокумента.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Не удалось получить данные из документа";
			РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);	
		КонецЕсли;
		
		РезультатПроверкиПакета.ПрошлаУспешно = РезультатПроверкиПакета.ПрошлаУспешно И РезультатПроверкиДокумента.ПрошлаУспешно;
		Если РезультатПроверкиДокумента.ПрошлаУспешно = Ложь Тогда 
			РезультатПроверкиПакета.СписокОшибок = РезультатПроверкиПакета.СписокОшибок+" "+?(ЗначениеЗаполнено(КонтекстПроверки), Символы.ПС+КонтекстПроверки, "")+" "+РезультатПроверкиДокумента.СписокОшибок;
		Иначе
			
			Если РезультатПроверкиДокумента.Свойство("ЕстьОтклоненияПоНДС") Тогда
				РезультатПроверкиПакета.Вставить("ЕстьОтклоненияПоНДС", РезультатПроверкиДокумента.ЕстьОтклоненияПоНДС);
			КонецЕсли;
			Если РезультатПроверкиДокумента.Свойство("ЕстьОтклонениеПоСуммеСНДС") Тогда
				РезультатПроверкиПакета.Вставить("ЕстьОтклонениеПоСуммеСНДС", РезультатПроверкиДокумента.ЕстьОтклонениеПоСуммеСНДС);
			КонецЕсли;
			Если РезультатПроверкиДокумента.Свойство("СчетФактураВБазе1СОтсутствует") Тогда
				РезультатПроверкиПакета.Вставить("СчетФактураВБазе1СОтсутствует", РезультатПроверкиДокумента.СчетФактураВБазе1СОтсутствует);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат РезультатПроверкиПакета;
		
	КонецФункции

	&НаСервере
	Функция ПроверитьДокумент(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
		
		Если ЭтоФормализованныйТОРГ12(СтруктураКонтент.Type) ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтруктураКонтент.Type) Тогда
			
			ПроверитьУчетТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьСуммуНДСТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьДатуПолученияГруза(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент);
			
		ИначеЕсли ЭтоСчетФактура(Лев(СтруктураКонтент.Type, 7)) Тогда
			
			ПроверитьПериодУчетаСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьУчетСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьДатуПоставкиСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент);
			ПроверитьПолеКодВалюты(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент);
			ПроверитьСуммуНДССчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьГТД(РезультатПроверкиДокумента, СтруктураКонтент, ОбработкаОбъект);
			ПроверитьСвидетельство(РезультатПроверкиДокумента, СтруктураКонтент);
			
		КонецЕсли;
		
		Возврат РезультатПроверкиДокумента;
		
	КонецФункции

		&НаСервере
		Процедура ПроверитьУчетТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			DocID = ПолучитьIDСопоставленногоДокумента1С(ОбработкаОбъект, СтрокаТаблицы.СопоставляемыйДокумент1С);
			Если ЗначениеЗаполнено(DocID) И (НЕ СтруктураКонтент.Documentid = DocID) Тогда 
								
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиДокумента.СписокОшибок + "Данный документ уже был учтен в электронном виде";		
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьСуммуНДСТорг12Акта(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			СуммаДокумента = СтрокаТаблицы.СопоставляемыйДокумент1С.СуммаДокумента;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
				СуммаДокумента = СуммаДокумента + СтрокаТаблицы.СопоставляемыйДокумент1С.ВозвратнаяТара.Итог("Сумма");
			КонецЕсли;
			
			Если ЭтоФормализованныйАктОВыполненииРабот(СтруктураКонтент.Type) Тогда
				СуммаDocument = 0;
				Для каждого Item из СтруктураКонтент.Items Цикл
					СуммаDocument = СуммаDocument + Item.Total;
				КонецЦикла;
			Иначе
				СуммаDocument = СтруктураКонтент.Totals.Total;
			КонецЕсли;
			ОтклонениеПоСуммеСНДС = Окр(СуммаDocument, 2) - Окр(СуммаДокумента, 2);
			Если Макс(ОтклонениеПоСуммеСНДС, -ОтклонениеПоСуммеСНДС)> ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеСНДС(ОбработкаОбъект, СтрокаТаблицы.СопоставляемыйДокумент1С.Организация) Тогда
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиДокумента.СписокОшибок +"
					|Ошибка в сумме с НДС. Ожидаемое значение: "+  СуммаДокумента;
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
				
			ИначеЕсли НЕ ОтклонениеПоСуммеСНДС=0 Тогда
				РезультатПроверкиДокумента.Вставить("ЕстьОтклонениеПоСуммеСНДС", Истина);
			КонецЕсли;	
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьДатуПолученияГруза(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент)
				
			Если НачалоДня(СтрокаТаблицы.СопоставляемыйДокумент1С.Дата) < НачалоДня(СтруктураКонтент.Date) Тогда 
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Дата электронного документа ("+формат(СтруктураКонтент.Date, "ДФ=dd.MM.yyyy")+") больше даты фактического получения груза ("+формат(СтрокаТаблицы.СопоставляемыйДокумент1С.Дата, "ДФ=dd.MM.yyyy")+")";
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
				
			КонецЕсли;	
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьПериодУчетаСчетФактура(РезультатПроверкиДокумента,СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
			
			ПриходнаяНакладная 					= СтрокаТаблицы.СопоставляемыйДокумент1С;
			ЕстьБумажнаяСчетФактура 			= ЕстьБумажныйСФ(ПриходнаяНакладная);
			
			РазницаВМесяцах 					= ?(Месяц(ТекущаяДата())-Месяц(ПриходнаяНакладная.Дата), Месяц(ТекущаяДата())-Месяц(ПриходнаяНакладная.Дата), -1*(Месяц(ТекущаяДата())-Месяц(ПриходнаяНакладная.Дата)));
			ПервичныйДокументНеИзЭтогоМесяца 	= ?(ПриходнаяНакладная.Дата < НачалоМесяца(ТекущаяДата()), Истина, Ложь);
			ДатаЗапретаИзмененияБумажнойСчетФактурыНаступила = ?(НачалоДня(ТекущаяДата()) >= НачалоМесяца(ТекущаяДата()) + МетодСервера(,"ПолучитьКоличествоДнейОтсрочки", ПриходнаяНакладная.Организация)*24*60*60, Истина, Ложь);
			
			Если ЕстьБумажнаяСчетФактура И ПервичныйДокументНеИзЭтогоМесяца И (ДатаЗапретаИзмененияБумажнойСчетФактурыНаступила ИЛИ РазницаВМесяцах>1) Тогда
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Бумажный экземпляр документа был учтен в прошлом периоде";
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;	
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьУчетСчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			СчетФактура = НайтиПодходящийСчетФактуруИзПриходнойНакладной(СтрокаТаблицы.СопоставляемыйДокумент1С);
			Если НЕ СчетФактура=Неопределено Тогда 
				DocID = ПолучитьIDСопоставленногоДокумента1С(ОбработкаОбъект, СчетФактура);
				Если ЗначениеЗаполнено(DocID) И (НЕ СтруктураКонтент.Documentid = DocID) Тогда 
										
					РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
					СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"Данный документ уже был учтен в электронном виде";
					РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
				КонецЕсли;
				
			Иначе
				РезультатПроверкиДокумента.Вставить("СчетФактураВБазе1СОтсутствует", Истина);	
			КонецЕсли;
				
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьДатуПоставкиСчетФактура(РезультатПроверкиДокумента,СтрокаТаблицы, СтруктураКонтент)
			
			ПриходнаяНакладная = СтрокаТаблицы.СопоставляемыйДокумент1С;
			Если НачалоДня(СтруктураКонтент.Date)>НачалоДня(ПриходнаяНакладная.Дата)+5*24*60*60 Тогда
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Дата счета-фактуры превышает дату поставки более чем на 5 дней. Дата поставки:"+  формат(ПриходнаяНакладная.Дата, "ДФ=dd.MM.yyyy");
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьПолеКодВалюты(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент)
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				КодВалютыДокумента = СтрокаТаблицы.СопоставляемыйДокумент1С.Валюта.Код;
			Иначе
				КодВалютыДокумента = СтрокаТаблицы.СопоставляемыйДокумент1С.ВалютаДокумента.Код;
			КонецЕсли;
			
			Если НЕ СтруктураКонтент.Currency = КодВалютыДокумента Тогда 
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
					|Неверно заполнено поле ""код валюты"". Ожидаемое значение:" + КодВалютыДокумента;
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьСуммуНДССчетФактура(РезультатПроверкиДокумента, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
				
			Если СтруктураКонтент.Type = "InvoiceCorrection" Тогда
				СуммаНДСПоDocument = 0;
				Для каждого Item из СтруктураКонтент.Items Цикл
					СуммаНДСПоDocument = СуммаНДСПоDocument + Item.CorrectedValues.Vat;
				КонецЦикла;
				СуммаНДСПоDocument = Окр(СуммаНДСПоDocument, 2);
			Иначе
				СуммаНДСПоDocument = Окр(СтруктураКонтент.Totals.Vat, 2);
			КонецЕсли;
			
			ПриходнаяНакладная		= СтрокаТаблицы.СопоставляемыйДокумент1С;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда 
				ТоварыИтогПоСуммеНДС 	= ПриходнаяНакладная.Товары.Итог("СуммаНДС");
				ИтогСуммаНДС 			= ТоварыИтогПоСуммеНДС;
			Иначе	
				ТоварыИтогПоСуммеНДС 	= ПриходнаяНакладная.Товары.Итог("СуммаНДС");
				УслугиИтогПоСуммеНДС 	= ПриходнаяНакладная.Услуги.Итог("СуммаНДС");
				ИтогСуммаНДС 			= ТоварыИтогПоСуммеНДС + УслугиИтогПоСуммеНДС;
			КонецЕсли;
			
			СуммаНДСПо1С = Окр(ИтогСуммаНДС,2);
			
			ОтклонениеНДС = СуммаНДСПоDocument - СуммаНДСПо1С; 
				
			Если Макс(ОтклонениеНДС, -ОтклонениеНДС) > ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеНДС(ОбработкаОбъект, ПриходнаяНакладная.Организация) Тогда 
				
				РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
				СписокОшибок = РезультатПроверкиДокумента.СписокОшибок +"
					|Неверная сумма НДС. По данным сети сумма НДС - "+формат(СуммаНДСПо1С, "ЧДЦ=2")+", в электронном документе поставщика - "
					+?(ЗначениеЗаполнено(формат(СуммаНДСПоDocument, "ЧДЦ=2")), формат(СуммаНДСПоDocument, "ЧДЦ=2"), 0) ;
				РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			ИначеЕсли ОтклонениеНДС <> 0 Тогда
				РезультатПроверкиДокумента.Вставить("ЕстьОтклоненияПоНДС", Истина);	
			КонецЕсли;
			
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьГТД(РезультатПроверкиДокумента, СтруктураКонтент, ОбработкаОбъект)
			
			Если НЕ СтруктураКонтент.Type = "InvoiceCorrection" Тогда
				
				НомерСтроки = 0;
				
				Для каждого Item из СтруктураКонтент.Items Цикл
					
					НомерСтроки = НомерСтроки + 1;
					Если СтранаПроисхожденияЗаполнена(Item.CountriesOfOrigin) 
						И НЕ МетодСервера(,"СтранаЧленТС", Item.CountriesOfOrigin) Тогда 
						
						Если НЕ ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) Тогда 
							РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
							СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
								|Для товара "+item.Product +" в строке "+формат(НомерСтроки, "ЧЦ=10")+" указана страна происходения, но не указан номер ГТД";
							РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
						КонецЕсли;
						
					ИначеЕсли НЕ СтранаПроисхожденияЗаполнена(Item.CountriesOfOrigin)
							И ЗначениеЗаполнено(Item.CustomsDeclarationNumbers) Тогда 
						
						РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
						СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
							|Для товара "+item.Product +" в строке "+формат(НомерСтроки, "ЧЦ=10")+" указан номер ГТД, но не указана страна происходения";
						РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
					
		КонецПроцедуры
	
		&НаСервере
		Процедура ПроверитьСвидетельство(РезультатПроверкиДокумента, СтруктураКонтент)
				
			//Если СтруктураКонтент.Signer.IsSoleProprietor 
			//	И ЗначениеЗаполнено(СтруктураКонтент.Signer.SoleProprietorRegistrationCertificate)=Ложь Тогда 
			//	
			//	РезультатПроверкиДокумента.Вставить("ПрошлаУспешно", Ложь);
			//	СписокОшибок =  РезультатПроверкиДокумента.СписокОшибок +"
			//		|Не заполнено поле ""свидетельство о регистрации Индивидуального Предпринимателя""" ;
			//	РезультатПроверкиДокумента.Вставить("СписокОшибок", СписокОшибок);
			//КонецЕсли;
			
		КонецПроцедуры


	&НаСервере
	Функция ПроверитьОрганизацию(РезультатПроверки, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		СопоставленнаяОрганизация = МетодСервера(,"BoxID_2_Организация", СтрокаТаблицы.BoxId);
			
		Если НЕ СтрокаТаблицы.СопоставляемыйДокумент1С.Организация = СопоставленнаяОрганизация Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Разные организации документа 1С и " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		ИННОрганизации = СтрокаТаблицы.СопоставляемыйДокумент1С.Организация.Инн;
		Если НЕ ИННОрганизации = СтруктураКонтент.OrganizationInn Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный ИНН у покупателя. Ожидаемое значение: "+ИННОрганизации;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		КППОрганизации = СтрокаТаблицы.СопоставляемыйДокумент1С.Организация.Кпп;
		Если НЕ КППОрганизации = СтруктураКонтент.OrganizationKpp Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный КПП у покупателя. Ожидаемое значение: "+КППОрганизации;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
			
		Возврат РезультатПроверки;
		
	КонецФункции

	&НаСервере
	Функция ПроверитьКонтрагента(РезультатПроверки, СтрокаТаблицы, СтруктураКонтент, ОбработкаОбъект)
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		СопоставленныйКонтрагент = МетодСервера(,"CounteragentBoxID_2_Контрагент", СтрокаТаблицы.CounteragentId, СтрокаТаблицы.BoxId);
		
		Контрагент = СтрокаТаблицы.СопоставляемыйДокумент1С.Контрагент;
		Если НЕ Контрагент = СопоставленныйКонтрагент Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Разные контрагенты документа 1С и " + СловарьWL.КраткоеНаименованиеСистемыРодительныйПадеж;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		Продавец = РеквизитыПродавца(СтруктураКонтент);
		
		ИННКонтрагента = Контрагент.Инн;
		Если НЕ ИННКонтрагента = Продавец.Inn Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный ИНН поставщика. Ожидаемое значение: "+ИННКонтрагента;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		
		КППКонтрагента = Контрагент.Кпп;
		Если НЕ КППКонтрагента = Продавец.Kpp Тогда
			РезультатПроверки.Вставить("ПрошлаУспешно", Ложь);
			СписокОшибок = РезультатПроверки.СписокОшибок + ?(ПустаяСтрока(СписокОшибок), "", Символы.ПС) + "Неверный КПП поставщика. Ожидаемое значение: "+КППКонтрагента;
			РезультатПроверки.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
			
		Возврат РезультатПроверки;
		
	КонецФункции

	&НаСервере
	Процедура ИнтерпритироватьРезультатПроверкиПакета(СтрокаТаблицы, РезультатПроверкиПакета, СтруктураДействийПоДокументу)
		
		СловарьWL= МетодСервера(,"ПолучитьСловарь");
		
		НаименованиеСистемы = СловарьWL.НаименованиеСистемы;
		
		Если РезультатПроверкиПакета.ПрошлаУспешно = Истина Тогда
			Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
				
				Если РезультатПроверкиПакета.Свойство("СчетФактураБезНДС") 
					И РезультатПроверкиПакета.СчетФактураБезНДС = Истина Тогда
					
					СтрокаТаблицы.Вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Пропустить;
					СтрокаТаблицы.КомментарийКДействию = "Счет-фактура не обработана, т.к. связанная накладная без НДС";
					
				ИначеЕсли РезультатПроверкиПакета.Свойство("СчетФактураВБазе1СОтсутствует") 
					И РезультатПроверкиПакета.СчетФактураВБазе1СОтсутствует = Истина Тогда
					
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ;
					ДокументПоступления = СтрокаТаблицы.СопоставляемыйДокумент1С;
					ТекстКомментария = "По поступлению №"+ДокументПоступления.Номер+" от "+ДокументПоступления.Дата+" не найдено подчиненной счет фактуры, соответствующей текущему документу " + НаименованиеСистемы + ".
						|Для создания в базе 1С нового документа счет фактуры и его сопоставления документу " + НаименованиеСистемы + " нажмите кнопку ""Выполнить обработку"".";
					СтрокаТаблицы.КомментарийКДействию = ТекстКомментария;
					
				ИначеЕсли (РезультатПроверкиПакета.Свойство("ЕстьОтклоненияПоНДС") И РезультатПроверкиПакета.ЕстьОтклоненияПоНДС = Истина)
					ИЛИ (РезультатПроверкиПакета.Свойство("ЕстьОтклонениеПоСуммеСНДС") И РезультатПроверкиПакета.ЕстьОтклонениеПоСуммеСНДС = Истина) Тогда
					
					СтрокаТаблицы.ЕстьОтклонения = Истина;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьСФ;
					СтрокаТаблицы.КомментарийКДействию = "Расхождение между документом " + НаименованиеСистемы + " и Документом 1С.";
					
				Иначе
					
					СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.СопоставитьСФ;
					СтрокаТаблицы.КомментарийКДействию = "В документе ошибок не найдено. Для того, чтобы сопоставить его документу в 1С нажмите кнопку ""Выполнить обработку"".";;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаТаблицы.СостояниеОбработки =	СтруктураДействийПоДокументу.СопоставитьИПодписать;
				СтрокаТаблицы.КомментарийКДействию = "В документе ошибок не найдено. Для того, чтобы подписать документ " + НаименованиеСистемы + " и сопоставить его документу в 1С нажмите кнопку ""Выполнить обработку"".";
																
			КонецЕсли;
		Иначе
			Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ЗапроситьУточнение;
			Иначе
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи;
			КонецЕсли;
			СтрокаТаблицы.КомментарийКДействию = РезультатПроверкиПакета.СписокОшибок;
		КонецЕсли;
			
	КонецПроцедуры

	&НаСервере
	Функция ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеСНДС(ОбработкаОбъект, Организация)
		
		МаскимальноеОтклонение = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, "МаксимальноеОтклонениеСуммыСНДС");
		
		Если ЗначениеЗаполнено(МаскимальноеОтклонение) Тогда
			Возврат Число(МаскимальноеОтклонение)/100;
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция ПолучитьМаксимальноДопустимоеОтклонениеПоСуммеНДС(ОбработкаОбъект, Организация)
		
		МаскимальноеОтклонение = МетодСервера(,"ПолучитьЗначениеСвойства", Организация, "МаксимальноеОтклонениеСуммыНДС");
		
		Если ЗначениеЗаполнено(МаскимальноеОтклонение) Тогда
			Возврат Число(МаскимальноеОтклонение)/100;
		Иначе 
			Возврат 0;
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция ОрганизацияНаУСН(OrganizationID)
		
		Если Метаданные.РегистрыСведений.Найти("УчетнаяПолитикаОрганизаций")=Неопределено Тогда 
			Возврат Ложь;
		Иначе 		
			
			Организация = МетодСервера(,"BoxID_2_Организация", OrganizationID);
			
			Запрос = Новый Запрос;
			
			Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
				Запрос.Текст = "ВЫБРАТЬ
				               |	УчетнаяПолитикаОрганизацийСрезПоследних.УчетнаяПолитика.СистемаНалогообложения КАК СистемаНалогообложения
				               |ИЗ
				               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
				
			Иначе
				Запрос.Текст = "ВЫБРАТЬ
				               |	УчетнаяПолитикаОрганизацийСрезПоследних.СистемаНалогообложения
				               |ИЗ
				               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
			КонецЕсли;
						   
			Запрос.УстановитьПараметр("Организация", Организация);
			
			РезультатВыполненияЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатВыполненияЗапроса.Следующий() Тогда
				Возврат (РезультатВыполненияЗапроса.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
			Иначе 
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецФункции

	&НаСервере
	Функция ЕстьБумажныйСФ(ПриходнаяНакладная)
	
		Если ПриходнаяНакладная = Неопределено Тогда
			Возврат Ложь;
		ИначеЕсли (НЕ ПриходнаяНакладная.Метаданные().Реквизиты.Найти("ПредъявленСчетФактура") = Неопределено) 
			И (ПриходнаяНакладная.ПредъявленСчетФактура) Тогда
			
			Возврат Истина;
		КонецЕсли;

		СчетФактура = НайтиПодходящийСчетФактуруИзПриходнойНакладной(ПриходнаяНакладная);
		
		Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
			Если (НЕ СчетФактура = Неопределено)
				И (НЕ СчетФактура.ПолученВЭлектронномВиде) Тогда
				
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если (НЕ СчетФактура = Неопределено) 
				И (СчетФактура.КодСпособаПолучения=1) Тогда 
			
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;

		Возврат Ложь;
	
	КонецФункции
	
	&НаСервере
	Функция НайтиПодходящийСчетФактуруИзПриходнойНакладной(ПриходнаяНакладная)
		
		Запрос = Новый Запрос;
		
		Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетФактура.Ссылка 
				|ИЗ
				|	Документ.СчетФактураПолученный КАК СчетФактура
				|ГДЕ
				|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		Иначе 
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетФактура.ССылка 
				|ИЗ
				|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
				|ГДЕ
				|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		КонецЕсли;    	
		
			
		Запрос.УстановитьПараметр("ПриходнаяНакладная", ПриходнаяНакладная);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
		
	КонецФункции
	
	&НаСервере
	Функция СтранаПроисхожденияЗаполнена(КодСтраныПроисхождения)
		Возврат (ЗначениеЗаполнено(КодСтраныПроисхождения));	
	КонецФункции
	
	&НаСервере
	Функция ПолучитьIDСопоставленногоДокумента1С(ОбработкаОбъект, ПервичныйДокумент)
					
		DocID = МетодСервера(,"Документ_2_DocumentID", ПервичныйДокумент);
		Если ЗначениеЗаполнено(DocID) Тогда
			Возврат DocID;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
					
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	//} Проверка пакета

	////////////////////////////////////////////////////////////////////////////////
	//{ Сети общие процедуры	
			
	&НаКлиенте
	Функция ПолучитьДанныеПодчиненныхDocument(Document)
		
		Результат = Новый Массив;
		
		SubordinateDocumentIds = Document.SubordinateDocumentIds;
		Для ц=0 по SubordinateDocumentIds.count-1 Цикл 
			id = SubordinateDocumentIds.GetItem(ц);
			
			КэшКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", Document.Organization.Id, id);
			Если НЕ КэшКонтент = Неопределено Тогда
				Результат.Добавить(КэшКонтент);
			Иначе
				Попытка
					SubordinateDocument = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(Document.Organization.Id).GetDocumentById(Id);
					Если ДокументСодержитКонтент(SubordinateDocument.Type) Тогда
						ПротоКонтент = МетодКлиента("Модуль_Клиент", "ПротоКонтентДокумента", SubordinateDocument);
						Результат.Добавить(Новый Структура("DocumentId, BoxId, Document, Content", id, Document.Organization.Id, SubordinateDocument, ПротоКонтент));
					КонецЕсли;
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "code:403") > 0
						ИЛИ Найти(ТекстОшибки, "code:404") > 0 Тогда
						ПодчиненныйДокумент = Неопределено;
					Иначе
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецПопытки;
								
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
			
	&НаКлиенте
	Функция ПолучитьДанныеРодительскихDocument(Document)
		
		Результат = Новый Массив;
		
		InitialDocumentIds = Document.InitialDocumentIds;
		Для ц=0 по InitialDocumentIds.count-1 Цикл 
			id = InitialDocumentIds.GetItem(ц);
			
			КэшКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", Document.Organization.Id, id);
			Если НЕ КэшКонтент = Неопределено Тогда
				Результат.Добавить(КэшКонтент);
			Иначе
				Попытка
					InitialDocument = Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(Document.Organization.Id).GetDocumentById(Id);
					
					Если InitialDocument.type <> "Nonformalized" И InitialDocument.type <> "NonformalizedProforma" Тогда
						ПротоКонтент = МетодКлиента("Модуль_Клиент", "ПротоКонтентДокумента", InitialDocument);
						Результат.Добавить(Новый Структура("DocumentId, BoxId, Document, Content", id, Document.Organization.Id, InitialDocument, ПротоКонтент));
					КонецЕсли;
					
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					Если Найти(ТекстОшибки, "code:403") > 0
						ИЛИ Найти(ТекстОшибки, "code:404") > 0 Тогда
						ПодчиненныйДокумент = Неопределено;
					Иначе
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
				КонецПопытки;
								
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьДанныеСвязанныхDocument(Document)
		
		Результат = Новый Массив;
		
		Результат = ПолучитьДанныеПодчиненныхDocument(Document);
		
		Добавка = ПолучитьДанныеРодительскихDocument(Document);
		
		Для каждого СтрокаСтруктура из Добавка Цикл
			Результат.Добавить(СтрокаСтруктура);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	Функция ДокументСодержитКонтент(DocumentType)
		
		Если	DocumentType = "XmlAcceptanceCertificate"
			ИЛИ DocumentType = "XmlTorg12"
			ИЛИ DocumentType = "Invoice"
			ИЛИ DocumentType = "InvoiceRevision"
			ИЛИ DocumentType = "InvoiceCorrection"
			ИЛИ DocumentType = "InvoiceCorrectionRevision"
			
		Тогда
		
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
		
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	////////// Процедуры и функции получения номера акта

	&НаКлиенте
	Функция ПолучитьНомерАктаИзСчетФактуры(Document)
		
		Organization = Document.Organization;
		
		SubordinateDocumentIds =  Document.SubordinateDocumentIds;
		Для ц = 0 по SubordinateDocumentIds.count-1 Цикл
			Попытка
				ПодчиненныйДок = Organization.GetDocumentByID(SubordinateDocumentIds.GetItem(ц));
				Если ЭтоСчетФактура(ПодчиненныйДок.Type) Тогда
					Возврат ПолучитьНомерАктаПоDocument(ПодчиненныйДок);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		InitialDocumentIds = Document.InitialDocumentIds;
		Для ц = 0 по InitialDocumentIds.count-1 Цикл
			Попытка
				ПодчиненныйДок = Organization.GetDocumentByID(InitialDocumentIds.GetItem(ц));
				Если ЭтоСчетФактура(ПодчиненныйДок.Type) Тогда
					Возврат ПолучитьНомерАктаПоDocument(ПодчиненныйДок);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;	

		ВызватьИсключение("Ошибка валидации: Для Торг-12 не нашли связанную счет-фактуру"); 
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьНомерАктаПоDocument(Document, ПротоКонтент = Неопределено)
		
		Результат = "";
		
		Если ПротоКонтент = Неопределено Тогда
			ПротоКонтент = МетодКлиента("Модуль_Клиент", "ПротоКонтентДокумента", Document);
		КонецЕсли;
		
		Если ПротоКонтент.Свойство("StructedAdditionalInfos") Тогда
			Результат = ПолучитьДопСвойство(ПротоКонтент.StructedAdditionalInfos, "номер_акта");
		ИначеЕсли ПротоКонтент.Свойство("AdditionalInfo") Тогда
			Результат = ПолучитьДопСвойствоИзСтроки(ПротоКонтент.AdditionalInfo, "номер_акта");
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция ПолучитьДопСвойствоИзСтроки(СтрокаДопИнфо, НаименованиеСвойства)
		Если Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства))>0 Тогда
			Результат = Прав(СтрокаДопИнфо, СтрДлина(СтрокаДопИнфо)-Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства))-СтрДлина(НаименованиеСвойства)+1);
			Если Лев(Результат, 1)=":" ИЛИ Лев(Результат, 1)="=" Тогда
				Результат = Прав(Результат, СтрДлина(Результат)-1);
			КонецЕсли;	
			Если Найти(Результат, ";")>0 Тогда
				Результат = Лев(Результат, Найти(Результат, ";")-1);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;	
	КонецФункции
	
	
	&НаКлиенте
	Функция ПолучитьДопСвойство(StructedAdditionalInfos, НаименованиеСвойства)
		
		Результат = "";
		
		Для Каждого AdditionalInfo Из StructedAdditionalInfos Цикл
			Если AdditionalInfo.Key = НаименованиеСвойства Тогда
				Результат = AdditionalInfo.Value;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции

	
	////////////////////////////////////////////////////////////////////////////////
	//} Сети общие процедуры	

	
////////////////////////////////////////////////////////////////////////////////
//} Сети анализ документов	
	
////////////////////////////////////////////////////////////////////////////////
//{ Сети обработка документов	
	
&НаКлиенте	
Процедура ВыполнитьОбработкуДокументов(РезультатВопроса, ДополнительныеПараметры)  экспорт 
	
	Если  РезультатВопроса = КодВозвратаДиалога.Да тогда 
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаДокументов);
		
		Если НЕ НайденныеСтроки.Количество()=0 Тогда
			
			ЛогироватьНачалоПроцесса();
			
			Если ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
				
				ДокументыНаПодпись = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл, СостояниеОбработки", Истина, СтруктураДействийПоДокументу.СопоставитьИПодписать));
				Если ДокументыНаПодпись.Количество()>0 Тогда
					ОткрытьФормуПодписанияДокумента(ДокументыНаПодпись);
				Иначе
					ОбработатьВсеДокументыАвтоматически();	
				КонецЕсли;			
				
			ИначеЕсли ПолеВыбораСценарий = "ОбработатьКорректныеДокументы" Тогда
				
				ДокументыНаПодпись = ТаблицаДокументов.НайтиСтроки(Новый Структура("Вкл, СостояниеОбработки", Истина, СтруктураДействийПоДокументу.СопоставитьИПодписать));
				
				Если ДокументыНаПодпись.Количество()>0 Тогда
					ОткрытьФормуПодписанияДокумента(ДокументыНаПодпись);
				Иначе
					ОбработатьКорректныеДокументы(НайденныеСтроки);
				КонецЕсли;
				
			ИначеЕсли ПолеВыбораСценарий = "ОбработатьДокументыСОшибками" Тогда
				
				ДокументовКОбработке = НайденныеСтроки.Количество();
				ДокументовОбработано = 0;
				
				Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
					
					СтруктураКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТаблицы.BoxId, СтрокаТаблицы.DocumentId);
					
					Если СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ Тогда
						СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы, СтруктураКонтент);
					ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи 
						ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
						
						ОтказВПодписи(СтрокаТаблицы, СтруктураКонтент);
					КонецЕсли;
					
					ДокументовКОбработке = ДокументовКОбработке + 1;
					
					МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка"
					, НСтр("ru = 'Обработка документов с ошибками'")
					, ДокументовОбработано
					, ДокументовКОбработке);
					
				КонецЦикла;
				
				Если НЕ МассивЗадачНаОтказ = Неопределено Тогда
					Пока НЕ МассивЗадачНаОтказ.Количество()=0 Цикл
						ОбработатьМассивЗадачНаОтказ();	
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ЛогироватьКонецПроцесса();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодписанияДокумента(НайденныеСтроки)
	
	BoxId			= НайденныеСтроки[0].BoxID;
	DepartmentKpp	= НайденныеСтроки[0].DepartmentKpp;
	DocumentType	= НайденныеСтроки[0].DocumentType;
	
	ДанныеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", BoxId, "ДанныеОрганизации");
	ФИОПодписанта	  = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", BoxId);
					
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФИО", 						ФИОПодписанта);
	ПараметрыФормы.Вставить("ПредставлениеДокумента", 	Заголовок);
	ПараметрыФормы.Вставить("ПредставлениеПодписи", 	ФИОПодписанта);
	ПараметрыФормы.Вставить("Организация", 				МетодСервераБезКонтекста(,"BoxID_2_Организация", BoxId, DepartmentKpp));
	ПараметрыФормы.Вставить("DocumentType", 			DocumentType);
	ПараметрыФормы.Вставить("ИНН", 						ДанныеОрганизации.Inn);
	
	МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаПодписанияДокумента", ПараметрыФормы, ЭтаФорма, "ОбработчикОткрытиеФормыПодписанияДокументаСети");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОткрытиеФормыПодписанияДокументаСети(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Если ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
			ОбработатьВсеДокументыАвтоматически(РезультатЗакрытия.ОтветныйТитул);
		ИначеЕсли ПолеВыбораСценарий = "ОбработатьКорректныеДокументы" Тогда
			ОбработатьКорректныеДокументы(РезультатЗакрытия.ОтветныйТитул);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВсеДокументыАвтоматически(ОтветныйТитул=Неопределено)
	
	НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаДокументов);
	
	ДокументовКОбработке = НайденныеСтроки.Количество();
	ДокументовОбработано = 0;
	
	Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
		
		СтруктураКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТаблицы.BoxId, СтрокаТаблицы.DocumentId);
		
		Если СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьИПодписать
			ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СопоставитьСФ Тогда
					
			СопоставитьИПодписать(СтрокаТаблицы, СтруктураКонтент, ОтветныйТитул);
			
		ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.СоздатьОтсутствующиеСФ Тогда 
			
			СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы, СтруктураКонтент);
			
		ИначеЕсли СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОтказатьВПодписи 
			ИЛИ СтрокаТаблицы.СостояниеОбработки = СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
						
			ОтказВПодписи(СтрокаТаблицы, СтруктураКонтент);
			
		КонецЕсли;
		
		ДокументовОбработано = ДокументовОбработано + 1;
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка"
		, НСтр("ru = 'Автоматическая обработка документов'")
		, ДокументовОбработано
		, ДокументовКОбработке);
		
	КонецЦикла;
	
	Если НЕ МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
		Пока НЕ МассивЗаданийОтправкаТитулаПокупателя.Количество()=0 Цикл
			ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ МассивЗадачНаОтказ = Неопределено Тогда
		Пока НЕ МассивЗадачНаОтказ.Количество()=0 Цикл
			ОбработатьМассивЗадачНаОтказ();	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

	//////////////////////////////////////////////////
	//{ Документы с ошибками
	
	&НаКлиенте
	Процедура СоздатьОтсутствующуюСФиСопоставить(СтрокаТаблицы, СтруктураКонтент)
			
		Если ЭтоСчетФактура(ЛЕВ(СтрокаТаблицы.DocumentType, 7)) Тогда	
			
			ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.СопоставляемыйДокумент1С);
			
			Document = СтруктураКонтент.Document;
			
			Если Document.Type = "InvoiceCorrection" Тогда
				
				Content = СтруктураКонтент.Content;
				
				Vat = 0;
				Для Ц=0 по Content.Items.Count-1 Цикл
					Item = Content.Items.GetItem(ц);
					Vat = Vat + Item.CorrectedValues.Vat;
				КонецЦикла;
				
			Иначе
				Vat = Document.Vat;
			КонецЕсли;
			
 			Если НЕ Vat = 0 Тогда
				
				ЛогироватьНачалоОперации("Подготовить исходные данные");
				
				ИсходныеДанные = Новый Структура();
				МассивСсылокДокументовОснований = Новый Массив;
				МассивСсылокДокументовОснований.Добавить(СтрокаТаблицы.СопоставляемыйДокумент1С);
								
				ИсходныеДанные.Вставить("Type",			СтрокаТаблицы.DocumentType);
				ИсходныеДанные.Вставить("ДатаУчета",	СтрокаТаблицы.ДатаУчета);
				
				ИсходныеДанные.Вставить("МассивСсылокДокументовОснований", МассивСсылокДокументовОснований);
				ИсходныеДанные.Вставить("ConfirmationDate", Document.ConfirmationDate);
				Если ЭтоВходящийДокумент(Document.Direction) Тогда       
					ИсходныеДанные.Вставить("Направление", "Входящий");
				ИначеЕсли ЭтоИсходящийДокумент(Document.Direction) Тогда
					ИсходныеДанные.Вставить("Направление", "Исходящий");
				КонецЕсли;
				
				ИсходныеДанные.Вставить("DocumentNumber", Document.DocumentNumber);
				ИсходныеДанные.Вставить("DocumentDate", Document.DocumentDate);
				
				Если СтрокаТаблицы.DocumentType = "InvoiceRevision" Тогда
					
					ИсходныеДанные.Вставить("OriginalDocumentNumber",	Document.OriginalDocumentNumber);
					ИсходныеДанные.Вставить("OriginalDocumentDate",		Document.OriginalDocumentDate);

				КонецЕсли;	
				
				ИсходныеДанные.Вставить("ВероятныйКонтрагент", МетодСервераБезКонтекста(,"CounteragentBoxID_2_Контрагент", Document.CounterAgent.Id, Document.Organization.Id));
				ИсходныеДанные.Вставить("ВероятнаяОрганизация", МетодСервераБезКонтекста(,"BoxID_2_Организация", Document.Organization.Id));
				
				ЛогироватьКонецОперации();
				
				ЛогироватьНачалоОперации("Редактирование_проведение ПНК");
				
				МетодКлиента("Модуль_ГрупповаяОбработка", "ПровестиПриходнуюНакладную", ИсходныеДанные.МассивСсылокДокументовОснований[0]);
				
				ЛогироватьКонецОперации();
				
				ЛогироватьНачалоОперации("Создание новой счет фактуры");
				СтруктураРезультатОперации= МетодКлиента("Модуль_ГрупповаяОбработка","СоздатьНовыйСчетФактуру", ИсходныеДанные);
				ЛогироватьКонецОперации();
				
				Если СтруктураРезультатОперации.ПрошлоУспешно = Истина Тогда
					СтрокаТаблицы.СопоставляемыйДокумент1С = СтруктураРезультатОперации.СчетФактураПолученный;
					ЛогироватьНачалоОперации("Сопоставить документ");
					СопоставитьДокумент(СтрокаТаблицы);
					ЛогироватьКонецОперации();
				Иначе
					СтрокаТаблицы.Вкл = Ложь;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = "На основании поступления не удалось создать новую счет фактуру "+СтруктураРезультатОперации.ОписаниеОшибки();
				КонецЕсли;
			Иначе
				// сф без ндс не обрабатываем
			КонецЕсли;
			
			ЛогироватьКонецОбработкиДокумента();
			
		КонецЕсли;
									
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОтказВПодписи(СтрокаТаблицы, СтруктураКонтент)
		
		ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.СопоставляемыйДокумент1С);
		
		ЗаголовокОперации = "";
		Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
			
			ЗаголовокОперации = "Отказать в подписи в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		ИначеЕсли ЭтоСчетФактура(СтрокаТаблицы.DocumentType) Тогда
			ЗаголовокОперации = "Запросить уточнение в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаголовокОперации)=Истина Тогда
			ОбработатьЗадачуОтказа(СтрокаТаблицы, СтруктураКонтент);
		КонецЕсли;
		
		ЛогироватьКонецОбработкиДокумента();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьЗадачуОтказа(СтрокаТаблицы, СтруктураКонтент)
		
		Если МассивЗадачНаОтказ = Неопределено Тогда
			МассивЗадачНаОтказ = Новый Массив;
		КонецЕсли;
		
		Пока МассивЗадачНаОтказ.Количество() = МаксимальноеКоличествоЗаданий Цикл
			ОбработатьМассивЗадачНаОтказ();
		КонецЦикла;
		
		Document = СтруктураКонтент.Document;
		
		Попытка
			
			ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", Document.Type);
			МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", СтрокаТаблицы.BoxID, ЭтоФормализованныйДокумент);
			
			Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
				ЛогироватьНачалоОперации("Запросить уточнение в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				RejectTask=	Document.SendCorrectionRequestAsync(СтрокаТаблицы.КомментарийКДействию);
			Иначе
				ЛогироватьНачалоОперации("Отказать в подписи в " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
				RejectTask=	Document.RejectAsync(СтрокаТаблицы.КомментарийКДействию);
			КонецЕсли;
			СтруктураЗадачи=	Новый Структура("СтрокаТаблицы, Task", СтрокаТаблицы, RejectTask);
			МассивЗадачНаОтказ.Добавить(СтруктураЗадачи);
		Исключение
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
			СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
			Сообщить(ОписаниеОшибки());
		КонецПопытки;

		ЛогироватьКонецОперации();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработатьМассивЗадачНаОтказ()
		
		ЛогироватьНачалоОперации("Обработка задач отказа " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
		МассивУдаляемых=	Новый Массив();
		
		Индекс=	0;
		Для каждого ЭлементМассива Из МассивЗадачНаОтказ Цикл
			
			Task=	ЭлементМассива.Task;
			
			Если Task.IsCompleted = Истина Тогда
				
				СтрокаТаблицы=	ЭлементМассива.СтрокаТаблицы;
				Попытка
					Result=	Task.Result;
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
					Если ЭтоСчетФактура(Лев(СтрокаТаблицы.DocumentType, 7)) Тогда
						СтрокаТаблицы.КомментарийКДействию = "Сформирован запрос на уточнение";
					Иначе
						СтрокаТаблицы.КомментарийКДействию = "Сформирован отказ в подписи";
					КонецЕсли;
				Исключение
					СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки()+символы.ПС+"BoxId: "+СтрокаТаблицы.BoxId+символы.ПС+"DocumentId: "+СтрокаТаблицы.DocumentId;
				КонецПопытки;
				
				СтрокаТаблицы.Вкл = Ложь;
				
				МассивУдаляемых.Добавить(ЭлементМассива);
												
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxID);
				ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentID);
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
							
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдаляемыйЭлемент Из МассивУдаляемых Цикл
			Индекс=	МассивЗадачНаОтказ.Найти(УдаляемыйЭлемент);
			Если НЕ Индекс = Неопределено Тогда
				МассивЗадачНаОтказ.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
		ЛогироватьКонецОперации();
		
	КонецПроцедуры
	
	//} Документы с ошибками
	//////////////////////////////////////////////////
	
	//////////////////////////////////////////////////
	//{ Корректные документы
	
	&НаКлиенте
	Процедура ОбработатьКорректныедокументы(СтруктураПараметрыТитулаПолучателя=Неопределено)
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаДокументов); 
		
		ДокументовКОбработке = НайденныеСтроки.Количество();
		ДокументовОбработано = 0;
		
		Для каждого СтрокаТаблицы из НайденныеСтроки Цикл
			
			СтруктураКонтент = МетодКлиента("Модуль_Клиент","ПолучитьЗначениеКонтентаКэш", СтрокаТаблицы.BoxId, СтрокаТаблицы.DocumentId);
			СопоставитьИПодписать(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя);
			
			ДокументовОбработано = ДокументовОбработано + 1;
			
			МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка"
			, НСтр("ru = 'Обработка корректных документов'")
			, ДокументовОбработано
			, ДокументовКОбработке);
			
		КонецЦикла;
		
		Если НЕ МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
			Пока НЕ МассивЗаданийОтправкаТитулаПокупателя.Количество()=0 Цикл
				ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
			КонецЦикла;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СопоставитьИПодписать(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя=Неопределено)
			
		ЛогироватьНачалоОбработкиДокумента(СтрокаТаблицы.СопоставляемыйДокумент1С);
		
		Если МассивЗаданийОтправкаТитулаПокупателя = Неопределено Тогда
			МассивЗаданийОтправкаТитулаПокупателя = Новый Массив;
		КонецЕсли;
		
		Если ЭтоФормализованныйТОРГ12(СтрокаТаблицы.DocumentType) 
			ИЛИ ЭтоФормализованныйАктОВыполненииРабот(СтрокаТаблицы.DocumentType) Тогда
			
			Пока МассивЗаданийОтправкаТитулаПокупателя.Количество()=МаксимальноеКоличествоЗаданий Цикл
				ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети();	
			КонецЦикла;
			
			Попытка
				ПодписатьДокумент(СтрокаТаблицы, СтруктураКонтент, СтруктураПараметрыТитулаПолучателя);
				СтрокаТаблицы.Вкл = Ложь;
			Исключение
				
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаТаблицы.КомментарийКДействию = ОписаниеОшибки();
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
														
		ИначеЕсли ЭтоСчетФактура(ЛЕВ(СтрокаТаблицы.DocumentType, 7)) Тогда
			
			ПриходнаяНакладнаяСсылка 	= СтрокаТаблицы.СопоставляемыйДокумент1С;
			СчетФактураДляСопоставления = НайтиПодходящийСчетФактуруИзСуществующихПоступлений(ПриходнаяНакладнаяСсылка);
			СтрокаТаблицы.СопоставляемыйДокумент1С = СчетФактураДляСопоставления;
			
			Если НЕ СтрокаТаблицы.СопоставляемыйДокумент1С=Неопределено Тогда
				СопоставитьДокумент(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаОбработки;
				СтрокаТаблицы.КомментарийКДействию = "Для документа поступления не найдено подчиненной счет-фактуры";
			КонецЕсли;
						
		КонецЕсли;
		
		ЛогироватьКонецОбработкиДокумента();
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ПодписатьДокумент(СтрокаТаблицы, СтруктураКонтент, ОтветныйТитул)
		
		ЛогироватьНачалоОперации("Подписание документа в ДД");	
		
		Попытка
			
			Если НЕ СтруктураКонтент.Document = Неопределено Тогда
				Document 		= СтруктураКонтент.Document;
				Organization 	= Document.Organization;
			Иначе
				Document 		= Organization.GetDocumentById(СтрокаТаблицы.DocumentID);	
				Organization 	= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(СтрокаТаблицы.BoxID);
			КонецЕсли;
									
			UserPermissions		= Organization.GetUserPermissions();
			
			Если (Document.IsTest ИЛИ Document.Organization.AuthenticateType = "Certificate") И UserPermissions.CanSignDocuments Тогда
							
				ПодписатьВДиадокеАсинхронно(Document, Истина, Document.OrganizationID, Document.documentID,, ОтветныйТитул, СтрокаТаблицы);
				
				СтрокаТаблицы.Подписан 	= Истина;
				СтрокаТаблицы.Вкл		= Ложь;
				
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
				СтрокаТаблицы.КомментарийКДействию = "Документ успешно подписан";
				
				ПараметрыОповещения=	Новый Структура;
				ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxID);
				ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentID);
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", ПараметрыОповещения, ЭтаФорма);
							
			Иначе
				
				ТекстОшибкиПодписания=	"Документ " + СтрокаТаблицы.ТипДокумента + " " + СтрокаТаблицы.Номер + " от " + СтрокаТаблицы.Дата
				+ " не подписан. Подписание юридически значимых документов возможно только с сертификатом";
				Сообщить(ТекстОшибкиПодписания);
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаПриПодписании;
							
			КонецЕсли;
			
		Исключение
			
			Сообщить(МетодКлиента("Модуль_Клиент","СформироватьТекстОшибкиДиадок", ОписаниеОшибки()));
						
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.ОшибкаПриПодписании;
			
		КонецПопытки;
			
		ЛогироватьКонецОперации();	
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ПроверитьВыполнениеЗаданийОтправкаТитулаПокупателяСети()
				
		ц = 0;
		Пока ц < МассивЗаданийОтправкаТитулаПокупателя.Количество() Цикл 
			СтрокаМассиваЗаданий = МассивЗаданийОтправкаТитулаПокупателя[ц];
			Если СтрокаМассиваЗаданий.ReplySendTask.isCompleted Тогда 
							
				Попытка
					Result = СтрокаМассиваЗаданий.ReplySendTask.Result;
					
					Если Result Тогда 
						СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы; 
					
						СопоставитьДокумент(СтрокаТаблицы);
					
						СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
						СтрокаТаблицы.КомментарийКДействию = "Документ успешно подписан и сопоставлен";
											
						МассивЗаданийОтправкаТитулаПокупателя.Удалить(ц);
					    						
					Иначе
						ц = ц+1;
					КонецЕсли;
						
				Исключение
					
					СтрокаТаблицы = СтрокаМассиваЗаданий.СтрокаТаблицы;
					
					ТекстОшибкиПодписания= ОписаниеОшибки();
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Заголовок", 		"Ошибка при подписании документа");
					ПараметрыФормы.Вставить("ОписаниеОшибки", 	"Не удалось подписать документ");
					ПараметрыФормы.Вставить("Подробности", 		ТекстОшибкиПодписания+символы.ПС+"BoxId: "+СтрокаТаблицы.BoxId+символы.ПС+"DocumentId: "+СтрокаТаблицы.DocumentId);
					МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
					
					СтрокаТаблицы.СостояниеОбработки 	= СтруктураДействийПоДокументу.ОшибкаОбработки;
					СтрокаТаблицы.КомментарийКДействию 	= ТекстОшибкиПодписания;						
					
					МассивЗаданийОтправкаТитулаПокупателя.Удалить(ц);
					
				КонецПопытки;
				
			Иначе 
				ц = ц+1;
			КонецЕсли;
		КонецЦикла;	
		
	КонецПроцедуры
	
	&НаСервере
	Функция НайтиПодходящийСчетФактуруИзСуществующихПоступлений(ПриходнаяНакладнаяСсылка)
			
		Запрос = Новый Запрос;
		Если Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.Найти("ДокументыОснования") = Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактура.Ссылка 
			|ИЗ
			|	Документ.СчетФактураПолученный КАК СчетФактура
			|ГДЕ
			|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		Иначе 
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактура.ССылка 
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактура
			|ГДЕ
			|	СчетФактура.ДокументОснование = (&ПриходнаяНакладная)";
		КонецЕсли;    	
				
		Запрос.УстановитьПараметр("ПриходнаяНакладная", ПриходнаяНакладнаяСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			
	КонецФункции
	
	//////////////////////////////////////////////////
	//} Корректные документы
	
	
	&НаКлиенте
	Процедура СопоставитьДокумент(СтрокаТаблицы)
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) Тогда
			
			МетодСервераБезКонтекста(,"Установить_DocumentID_Для_Документ", СтрокаТаблицы.СопоставляемыйДокумент1С, СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxId);
			
			МетодКлиента("Модуль_ГрупповаяОбработка","ОбновитьКодСпособаПолучения", СтрокаТаблицы.СопоставляемыйДокумент1С, СтрокаТаблицы.DocumentType);
						
			СтрокаТаблицы.Вкл = Ложь;
			СтрокаТаблицы.СостояниеОбработки = СтруктураДействийПоДокументу.Обработано;
			
			СтрокаТаблицы.КомментарийКДействию = "Документ успешно сопоставлен";
						
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", СтрокаТаблицы.BoxId);
			ПараметрыОповещения.Вставить("DocumentID", СтрокаТаблицы.DocumentId);
			ПараметрыОповещения.Вставить("Документ1С", СтрокаТаблицы.СопоставляемыйДокумент1С);
			
			МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
					
		КонецЕсли;
			
	КонецПроцедуры
	
	//////////////////////////////////////////////////
	//{ Логирование
	
	&НаКлиенте
	Процедура ОбновитьСтатистикуСобытия(ТекущаяОперация, ДлительностьОбработки)
		
		Перем МассивИтераций;
		
		КлючСобытия= СтрЗаменить(ТекущаяОперация, " ", "");
		
		СтатистикаСобытий.Свойство(КлючСобытия, МассивИтераций);
		
		Если МассивИтераций = Неопределено Тогда
			МассивИтераций= Новый Массив;
			СтатистикаСобытий.Вставить(КлючСобытия, МассивИтераций);
		КонецЕсли;
		
		МассивИтераций.Добавить(ДлительностьОбработки);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьНачалоПроцесса()
		
		ДатаСтартаПроцесса= ТекущаяДата();
		
		КоличествоОбработанныхДокументов= 0;
		
		СтатистикаСобытий= Новый Структура;
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Начало массовой обработки документов");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьКонецПроцесса()
		
		Если ДатаСтартаПроцесса <> Неопределено Тогда
			
			ДлительностьОбработки= ТекущаяДата() - ДатаСтартаПроцесса;
			
			МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "КонецМассовойобработкиДокументов", "Обработано документов - "+КоличествоОбработанныхДокументов+", Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки));
			
			ВывестиДанныеСтатистики();	
			
			ДатаСтартаПроцесса= Неопределено;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьНачалоОбработкиДокумента(ДокументСсылка)
		
		ОбрабатываемыйДокументСсылка = ДокументСсылка;
		ДатаСтартаОбработкиДокумента = ТекущаяДата();
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "КонецМассовойобработкиДокументов", "Начало обработки документа", ДокументСсылка);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьКонецОбработкиДокумента()
		
		КоличествоОбработанныхДокументов = КоличествоОбработанныхДокументов + 1;
		ДлительностьОбработки = ТекущаяДата() - ДатаСтартаОбработкиДокумента;
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Конец обработки документа", "Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки), ОбрабатываемыйДокументСсылка);
		
		Если КоличествоОбработанныхДокументов % 10 = 0 Тогда 
			ВывестиДанныеСтатистики();
		КонецЕсли;	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьНачалоОперации(ИдентификаторОперации)
		
		ДатаСтартаОперации = ТекущаяДата();
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Начало операции", ИдентификаторОперации, ОбрабатываемыйДокументСсылка);
		
		ТекущаяОперация = ИдентификаторОперации;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ЛогироватьКонецОперации()
		
		ДлительностьОбработки = ТекущаяДата() - ДатаСтартаОперации;
		
		МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Конец операции", ТекущаяОперация+", Длительность обработки - "+ДлительностьСтрока(ДлительностьОбработки), ОбрабатываемыйДокументСсылка);
		
		ОбновитьСтатистикуСобытия(ТекущаяОперация, ДлительностьОбработки);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВывестиДанныеСтатистики()
		
		РезультатыСтатистики= "";
		Разделитель= "";
		
		Для Каждого КлючИЗначение ИЗ СтатистикаСобытий Цикл
			
			МассивИтераций= КлючИЗначение.Значение;
			
			ОбщаяДлительностьСобытия=  0;
			КоличествоИтерацийСобытия= 0;
			
			Для Каждого ДлительностьСобытия ИЗ МассивИтераций Цикл
				ОбщаяДлительностьСобытия=  ОбщаяДлительностьСобытия + ДлительностьСобытия;
				КоличествоИтерацийСобытия= КоличествоИтерацийСобытия + 1;
			КонецЦикла;
			
			РезультатыСтатистики = РезультатыСтатистики + Разделитель +
			" Событие " + КлючИЗначение.Ключ + " обработано " + КоличествоИтерацийСобытия + " раз,
			|общая длительность "+ ДлительностьСтрока(ОбщаяДлительностьСобытия) + ", средняя длительность " + ДлительностьСтрока(?(КоличествоИтерацийСобытия = 0, 0, ОбщаяДлительностьСобытия / КоличествоИтерацийСобытия));
			
			Разделитель= Символы.ПС;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(РезультатыСтатистики) Тогда
			МетодКлиента("Модуль_Клиент","ЗаписатьВЛог", "Данные статистики", РезультатыСтатистики);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Функция ДлительностьСтрока(Длительность)
		
		Возврат Формат('00010101' + Длительность, "ДФ=HH:mm:ss");
		
	КонецФункции

	//////////////////////////////////////////////////
	//} Логирование
	
&НаКлиенте
Функция ЭтоУсловноКорректныйДокумент(СтрокаТаблицыДокументов)
		
	ВозвращаемоеЗначение = Ложь;
	
	Если СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СопоставитьИПодписать
		ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СопоставитьСФ Тогда
		
		ВозвращаемоеЗначение = Истина;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Функция ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицыДокументов)
		
	ВозвращаемоеЗначение = Ложь;
	
	Если СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.СоздатьОтсутствующиеСФ
		ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.ОтказатьВПодписи 
		ИЛИ СтрокаТаблицыДокументов.СостояниеОбработки=СтруктурадействийПоДокументу.ЗапроситьУточнение Тогда
		
		ВозвращаемоеЗначение = Истина;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции
	
//} Сети обработка документов
////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

//} КОМПЛЕКСНАЯ ОБРАБОТКА ТОРГОВЫЕ СЕТИ
////////////////////////////////////////////////////////////////////////////////

	
////////////////////////////////////////////////////////////////////////////////
//{ МАССОВОЕ ПОДПИСАНИЕ

#ОБЛАСТЬ ПОДПИСАНИЕ_КОМАНДЫ_

	&НаКлиенте
	Процедура ТаблицаПодписатьСнятьУстановитьПометки(Команда)

		ОбработатьПометки(ТаблицаПодписать, "ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьВыполнитьПодписание(Команда)
		
		ВыполнитьПодписаниеДокументов();	
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьОбновить(Команда)

		ЗаполнитьТаблицы(ТаблицаПодписать);
		УстановитьЗаголовокСтраницы("СтраницаПодписать",  ТаблицаПодписать);				
				
	КонецПроцедуры
	
#КонецОбласти	
	
#ОБЛАСТЬ ПОДПИСАНИЕ_СОБЫТИЯ_ЭЛЕМЕНТОВ_ФОРМЫ

	&НаКлиенте
	Процедура ТаблицаПодписатьВклПриИзменении(Элемент)

		ОтработатьИзменениеВкл("ТаблицаПодписать");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаПодписатьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, "ТаблицаПодписать");

	КонецПроцедуры

#КонецОбласти
	
	&НаКлиенте
	Процедура ВыполнитьПодписаниеДокументов()
		
		ПроверитьВозможностьПодписанияДокументов();
		
		ШаблоныОтветныхТитулов = ПодготовитьШаблоныОтветныхТитулов();
		
		ЗаполнитьШаблоныОтветныхТитуловИПодписатьДокументы(ШаблоныОтветныхТитулов);

	КонецПроцедуры
		
#ОБЛАСТЬ Перед_подписанием
		
	&НаКлиенте
	Процедура ПроверитьВозможностьПодписанияДокументов()
		
		ОшибкиBoxId_ПраваДоступа 	= Новый Соответствие;
		ОшибкиBoxId_Сертификат		= Новый Соответствие;
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаПодписать);
		
		Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			ОписаниеОшибки = ОписаниеОшибки_ПраваДоступа(ОшибкиBoxId_ПраваДоступа, СтрокаТЧ);
			
			Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				ОписаниеОшибки = ОписаниеОшибки_Сертификат(ОшибкиBoxId_Сертификат, СтрокаТЧ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				
				СтрокаТЧ.Вкл 				  = Ложь;
				СтрокаТЧ.СостояниеОбработки	  = СтруктураДействийПоДокументу.ОшибкаПриПодписании;
				СтрокаТЧ.КомментарийКДействию = ОписаниеОшибки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры

	&НаКлиенте
	Функция ОписаниеОшибки_ПраваДоступа(кэшОшибки, СтрокаТЧ)
		
		Результат = кэшОшибки[СтрокаТЧ.BoxId];
		
		Если Результат = Неопределено Тогда
			
			CanSignDocuments = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", СтрокаТЧ.BoxId, "ДанныеСотрудника").ПраваДоступа.CanSignDocuments;
			
			Если CanSignDocuments = Ложь Тогда
				
				Результат = "Документ " + СтрокаТЧ.ТипДокумента + " " + СтрокаТЧ.Номер + " от " + СтрокаТЧ.Дата + 
				" не подписан. Недостаточно прав для подписания";
				
			Иначе
				Результат = "";			
			КонецЕсли;
			
			кэшОшибки.Вставить(СтрокаТЧ.BoxId, Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции

	&НаКлиенте
	Функция ОписаниеОшибки_Сертификат(кэшОшибки, СтрокаТЧ)
			
		ЭтоФормализованныйДокумент = МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", СтрокаТЧ.DocumentType);
		
		КлючОшибкиBoxId_Сертификат = "" + СтрокаТЧ.BoxId + "_" + ЭтоФормализованныйДокумент;
	
		Результат = кэшОшибки[КлючОшибкиBoxId_Сертификат];
	
		Если Результат = Неопределено Тогда
		
			Результат = "";
	
			Попытка
				МетодКлиента("Модуль_Клиент", "ПроверитьСертификат", СтрокаТЧ.BoxId, ЭтоФормализованныйДокумент);
			Исключение
				Результат = МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ОписаниеОшибки());
			КонецПопытки;
		
			кэшОшибки.Вставить(КлючОшибкиBoxId_Сертификат, Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Функция ПодготовитьШаблоныОтветныхТитулов()
		
		Результат = Новый Соответствие;
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаПодписать);
		
		Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			ТипКонтента = СтрокаТЧ.ContentType;
			КлючШаблона = СтрокаТЧ.BoxID + "_" + ТипКонтента;
			
			Если Результат[КлючШаблона] = Неопределено Тогда
				
				Шаблон = Новый Структура;
				
				Если НЕ МетодКлиента("Модуль_Клиент", "ЭтоФормализованныйДокумент", СтрокаТЧ.DocumentType) Тогда
					
					Шаблон.Вставить("ОтветныйТитул");
					
				Иначе
					
					ПредставлениеДокумента = "Подпись документов """ + МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", СтрокаТЧ.BoxId, "ДанныеОрганизации").Name + """";
					
					ТипыКонтента = ТипыКонтентаНаКлиенте();
					
					Если ТипКонтента = ТипыКонтента.Utd820SellerContent
						Или ТипКонтента = ТипыКонтента.UtdSellerContent
						Или ТипКонтента = ТипыКонтента.UcdSellerContent
						Или ТипКонтента = ТипыКонтента.Act552SellerContent
						Или ТипКонтента = ТипыКонтента.TovTorgSellerContent Тогда
						
						Шаблон.Вставить("ФормаТитула", "ФормаПодписанияДокументаУПД");
						
						Шаблон.Вставить("ПараметрыФормы", Новый Структура);
						Шаблон.ПараметрыФормы.Вставить("BoxId"			  	   , СтрокаТЧ.BoxId);
						Шаблон.ПараметрыФормы.Вставить("AttachmentVersion"	   , СтрокаТЧ.AttachmentVersion);
						Шаблон.ПараметрыФормы.Вставить("ПредставлениеДокумента", ПредставлениеДокумента);
						
					Иначе
						
						ДанныеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", СтрокаТЧ.BoxId, "ДанныеОрганизации");
						ФИОПодписанта	  = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьФИОПодписанта", СтрокаТЧ.BoxId);
						
						Шаблон.Вставить("ФормаТитула", "ФормаПодписанияДокумента");
						
						Шаблон.Вставить("ПараметрыФормы", Новый Структура);
						Шаблон.ПараметрыФормы  = Новый Структура;
						Шаблон.ПараметрыФормы.Вставить("ФИО", 					 ФИОПодписанта);
						Шаблон.ПараметрыФормы.Вставить("ПредставлениеДокумента", ПредставлениеДокумента);
						Шаблон.ПараметрыФормы.Вставить("ПредставлениеПодписи", 	 ФИОПодписанта);
						Шаблон.ПараметрыФормы.Вставить("Организация", 			 МетодСервераБезКонтекста(,"BoxID_2_Организация", СтрокаТЧ.BoxId, СтрокаТЧ.DepartmentKpp));
						Шаблон.ПараметрыФормы.Вставить("DocumentType", 			 СтрокаТЧ.DocumentType);
						Шаблон.ПараметрыФормы.Вставить("ИНН", 					 ДанныеОрганизации.Inn);
						
					КонецЕсли;
				КонецЕсли;
				
				Результат.Вставить(КлючШаблона, Шаблон);
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаКлиенте
	Процедура ЗаполнитьШаблоныОтветныхТитуловИПодписатьДокументы(ШаблоныОтветныхТитулов)
		
		Для каждого КлючИЗначение Из ШаблоныОтветныхТитулов Цикл
			
			КлючШаблона = КлючИЗначение.Ключ;
			Шаблон		= КлючИЗначение.Значение;
			
			Если НЕ Шаблон.Свойство("ОтветныйТитул") Тогда
				
				МетодКлиента(,"ОткрытьФормуОбработкиМодально", Шаблон.ФормаТитула,
				Шаблон.ПараметрыФормы, ЭтаФорма, "ЗавершениеЗаполненияШаблонаОтветногоТитула",
				Новый Структура("ШаблоныОтветныхТитулов, КлючШаблона", ШаблоныОтветныхТитулов, КлючШаблона));
				
				Возврат; // Нужно заполнить все шаблоны и только после этого запустить подписание документов.
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПодписатьДокументы(ШаблоныОтветныхТитулов);

	КонецПроцедуры
	
#КонецОбласти
	
#ОБЛАСТЬ При_подписании

	&НаКлиенте
	Процедура ПодписатьДокументы(ШаблоныОтветныхТитулов)
		
		ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаПодписать);
		ПодходящиеСтроки = Новый Массив;
		
		Для каждого СтрокаТЧ Из ПомеченныеСтроки Цикл
			
			КлючШаблона = СтрокаТЧ.BoxID + "_" + СтрокаТЧ.ContentType;
			Шаблон = ШаблоныОтветныхТитулов[КлючШаблона];
			
			Если Шаблон <> Неопределено Тогда
				ПодходящиеСтроки.Добавить(Новый Структура("СтрокаТЧ, ОтветныйТитул", СтрокаТЧ, Шаблон.ОтветныйТитул));
			КонецЕсли;
			
		КонецЦикла;
		
		ПомеченныеСтроки		 = Неопределено;
		ШаблоныОтветныхТитулов	 = Неопределено;
		
		КолУспешно		 = 0;
		КолОшибок		 = 0;
		ВсегоСтрок		 = ПодходящиеСтроки.Количество();
		ТекстСостояния	 = НСтр("ru = 'Подписание документов'");
		
		Для Сч = 1 По ВсегоСтрок Цикл
			
			МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
			
			ОбработкаПрерыванияПользователя();
			
			ОписаниеОшибки	 = "";
			ПодходящаяСтрока = ПодходящиеСтроки[Сч-1];
			ОтветныйТитул	 = ПодходящаяСтрока.ОтветныйТитул;
			СтрокаТЧ		 = ПодходящаяСтрока.СтрокаТЧ;
			
			Попытка  
				Document = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьДокументДиадок", СтрокаТЧ.DocumentId, СтрокаТЧ.BoxId);
				МетодКлиента("Модуль_Клиент", "ПодписатьВДиадоке", Document, ОтветныйТитул);
			Исключение 
				ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				
				СтрокаТЧ.Вкл 				  = Ложь;
				СтрокаТЧ.СостояниеОбработки   = СтруктураДействийПоДокументу.ОшибкаПриПодписании;
				СтрокаТЧ.КомментарийКДействию = МетодКлиента("Модуль_Клиент", "СформироватьТекстОшибкиДиадок", ОписаниеОшибки);
				
				КолОшибок = КолОшибок + 1;
				
			Иначе
				
				СтрокаТЧ.Вкл	  = Ложь;
				СтрокаТЧ.Подписан = Истина;
				СтрокаТЧ.СостояниеОбработки   = СтруктураДействийПоДокументу.УспешноПодписан;
				СтрокаТЧ.КомментарийКДействию = "Документ успешно подписан";
				
				КолУспешно = КолУспешно + 1;
				
				МетодКлиента(,"ОповеститьФормы", "ИзменениеСтатусаДокументаДиадок", Новый Структура("BoxId, DocumentId", СтрокаТЧ.BoxId, СтрокаТЧ.DocumentId), ЭтаФорма);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ПередвинутьДальшеСтрокиТаблицыПодписать();
			
	КонецПроцедуры
	
#КонецОбласти
	
#ОБЛАСТЬ После_подписания
		
	&НаКлиенте
	Процедура ПередвинутьДальшеСтрокиТаблицыПодписать()

		НайденныеСтрокиПодписан = ТаблицаПодписать.НайтиСтроки(Новый Структура("Подписан", Истина));
		
		Для Каждого СтрокаТаблицыПодписать Из НайденныеСтрокиПодписан Цикл
			
			Если НужноСоздатьПоступление(СтрокаТаблицыПодписать, Истина, СтрокаТаблицыПодписать.ПараметрыОбработкиЕдиногоДокументаДД) Тогда
				Если ТекущийСценарий = "Подписать" Тогда
					НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
				Иначе //это сценарий ПодписатьИСоздать
					НоваяСтрока = ТаблицаСоздатьДокументыПоступления.Добавить();
				КонецЕсли;
			Иначе
				НоваяСтрока = ТаблицаОбработкаЗавершена.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПодписать,, "СостояниеОбработки, СостояниеДокументооборота");
			НоваяСтрока.СостояниеДокументооборота = "Подписан";
			
			ТаблицаПодписать.Удалить(СтрокаТаблицыПодписать);
			
		КонецЦикла;
		
		УстановитьЗаголовокСтраницы("СтраницаПодписать", ТаблицаПодписать);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления", ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаОбработкаЗавершена", ТаблицаОбработкаЗавершена);
		
		ОтработатьИзменениеВкл("ТаблицаПодписать");
		ОтработатьИзменениеВкл("ТаблицаСоздатьДокументыПоступления");
		
		ВыполнитьПереключениеВкладок();
		
	КонецПроцедуры
	
#КонецОбласти
	
////////////////////////////////////////////////////////////////////////////////
//} МАССОВОЕ ПОДПИСАНИЕ


////////////////////////////////////////////////////////////////////////////////
//{ МАССОВОЕ СОЗДАНИЕ ВХОДЯЩИХ ДОКУМЕНТОВ

#ОБЛАСТЬ СОЗДАНИЕ_КОМАНДЫ_
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияСнятьУстановитьПометки(Команда)
		
		ОбработатьПометки(ТаблицаСоздатьДокументыПоступления, "ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияСоздать(Команда)
		
		ПрочитатьКонтентВыбранныхДокументовПоступления();
		
		СоздатьДокументыПоступления();
		
		ПоказатьФормуСопоставленияНоменклатуры();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыСоздать(Команда)
			
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаСоздатьСчетФактуры);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			ОбработкаПрерыванияПользователя();
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СписокСсылок1С) Тогда
				МассивСсылокРНК_1С = ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(СтрокаТаблицы.СписокСсылок, СтрокаТаблицы.BoxID);
				Для Каждого Ссылка1С_РНК Из МассивСсылокРНК_1С Цикл
					СтрокаТаблицы.СписокСсылок1С.Добавить(Ссылка1С_РНК);
				КонецЦикла;
			КонецЕсли;
			
	    КонецЦикла;
		
		СоздатьДокументыСФ_НаСервере(ПолучитьПараметрыСозданияСФ());
		
		НайденныеСтрокиДокументСоздан = ТаблицаСоздатьСчетФактуры.НайтиСтроки(Новый Структура("Создан", Истина));
		Для Каждого СтрокаТаблицыСозданныйДокумент Из НайденныеСтрокиДокументСоздан Цикл
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ТипСущности", "Документ");
			ПараметрыОповещения.Вставить("BoxID", 		СтрокаТаблицыСозданныйДокумент.BoxID);
			ПараметрыОповещения.Вставить("DocumentID", 	СтрокаТаблицыСозданныйДокумент.DocumentID);
			ПараметрыОповещения.Вставить("Документ1С",	СтрокаТаблицыСозданныйДокумент.ПервичныйДокумент);
			МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
			Если СтрокаТаблицыСозданныйДокумент.Проведен Тогда
				ОбработатьПроведениеДокументаСФ(СтрокаТаблицыСозданныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьФормуПослеПроведенияДокументовСФ();
		
		ТекстОповещения = НСтр("ru = 'Создание счетов-фактур завершено'");
		МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", ТекстОповещения, УникальныйИдентификатор);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияОбновить(Команда)

		ЗаполнитьТаблицы(ТаблицаСоздатьДокументыПоступления);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления",  ТаблицаСоздатьДокументыПоступления);				
				
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыСнятьУстановитьПометки(Команда)

		ОбработатьПометки(ТаблицаСоздатьСчетФактуры, "ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыОбновить(Команда)

		ЗаполнитьТаблицы(ТаблицаСоздатьСчетФактуры);
		УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры",  ТаблицаСоздатьСчетФактуры);				
	
	КонецПроцедуры
	
#КонецОбласти	
	
#ОБЛАСТЬ СОЗДАНИЕ_ОБРАБОТЧИКИ_СОБЫТИЙ_

	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияВклПриИзменении(Элемент)

		Если ЗначениеЗаполнено(Элементы.ТаблицаСоздатьДокументыПоступления.ТекущиеДанные.ПервичныйДокумент) Тогда
			Если Элементы.ТаблицаСоздатьДокументыПоступления.ТекущиеДанные.Вкл Тогда
				Сообщить("Данную строку нельзя отметить для создания: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " в 1С уже создан");
			КонецЕсли;
			Элементы.ТаблицаСоздатьДокументыПоступления.ТекущиеДанные.Вкл = Ложь;	
		КонецЕсли;
		
		ОтработатьИзменениеВкл("ТаблицаСоздатьДокументыПоступления");
		
	КонецПроцедуры

	&НаКлиенте
	Процедура ВидОперацииСоздаваемогоПоступленияПриИзменении(Элемент)
		
		ЭтоПоступление = СоответствиеВидаОперацииДействию.Получить(ВидОперацииСоздаваемогоПоступления) = "Поступление";

	КонецПроцедуры
	
	&НаКлиенте
	Процедура СоздаватьПоДаннымСФПриИзменении(Элемент)
		
		Оповещение = Новый ОписаниеОповещения("ПерезаполнитьТаблицы", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Перезаполнить таблицы по изменившимся настройкам?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыВклПриИзменении(Элемент)

		Если ЗначениеЗаполнено(Элементы.ТаблицаСоздатьСчетФактуры.ТекущиеДанные.ПервичныйДокумент) Тогда
			Сообщить("Данную строку нельзя отметить для создания: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " в 1С уже создан");
			Элементы.ТаблицаСоздатьСчетФактуры.ТекущиеДанные.Вкл = Ложь;	
		КонецЕсли;

		ОтработатьИзменениеВкл("ТаблицаСоздатьСчетФактуры");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьДокументыПоступленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, "ТаблицаСоздатьДокументыПоступления");

	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаСоздатьСчетФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, "ТаблицаСоздатьСчетФактуры");

	КонецПроцедуры
	
#КонецОбласти
	
#ОБЛАСТЬ СОЗДАНИЕ_ОБРАБОТЧИКИ_ОПОВЕЩЕНИЯ_

	&НаКлиенте
	Процедура ПерезаполнитьТаблицы(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ЗначениеСоздаватьПоДаннымСФ_ДоИзменения = СоздаватьПоступлениеПоДаннымСФ;
			ЗаполнитьТаблицы();
			УстановитьЗаголовокСтраницы("СтраницаСоздатьДокументыПоступления", ТаблицаСоздатьДокументыПоступления);
			УстановитьЗаголовокСтраницы("СтраницаСоздатьСчетФактуры", ТаблицаСоздатьСчетФактуры);				
		Иначе
			СоздаватьПоступлениеПоДаннымСФ = ЗначениеСоздаватьПоДаннымСФ_ДоИзменения;
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикСопоставлениеНоменклатуры(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
		Если РезультатЗакрытия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если РезультатЗакрытия.СопоставлениеВыполнено Тогда
			
			СоздатьДокументыПоступления();
			ПоказатьФормуСопоставленияНоменклатуры();
			
		КонецЕсли;
		
	КонецПроцедуры
		
#КонецОбласти
	
#ОБЛАСТЬ СОЗДАНИЕ_ОБЩЕГО_НАЗНАЧЕНИЯ_
		
	// Инициализирует общие параметры для определения ед. изм. номенклатуры.
	// 
	// Возвращаемое значение:
	//  Структура - см. тело функции.
	//
	&НаСервере
	Функция ПараметрыОпределенияЕИ()
		
		Результат = Новый Структура("ИмяСправочникаЕИ, UnitCode, UnitName, Номенклатура");
		
		Если МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.ЕдиницыИзмерения") Тогда
			ИмяСправочникаЕИ = "ЕдиницыИзмерения";
		ИначеЕсли МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.УпаковкиЕдиницыИзмерения") Тогда
			ИмяСправочникаЕИ = "УпаковкиЕдиницыИзмерения";
		ИначеЕсли МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.КлассификаторЕдиницИзмерения") Тогда
			ИмяСправочникаЕИ = "КлассификаторЕдиницИзмерения";
		Иначе
			ИмяСправочникаЕИ = "";
		КонецЕсли;
		Результат.ИмяСправочникаЕИ = ИмяСправочникаЕИ;
		
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ИспользоватьДоговорыСоглашенияСПоставщиками()
		
		Результат = Новый Структура("ИспользоватьДоговорыСПоставщиками, ИспользоватьСоглашенияСПоставщиками");
		
		МаркерКонфигурации = Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		Если МаркерКонфигурации = "УТ11" Тогда
			
			ИспользоватьДоговорыСПоставщиками 	= МетодСервера(	, 
																"ПолучитьФункциональнуюОпциюНаСервере",
																"ИспользоватьДоговорыСПоставщиками"	);
			
			Если ИспользоватьДоговорыСПоставщиками = Неопределено Тогда
				ИспользоватьДоговорыСПоставщиками = Ложь;
			КонецЕсли;
			
			Результат.ИспользоватьДоговорыСПоставщиками	= ИспользоватьДоговорыСПоставщиками;
			
			ИспользоватьСоглашенияСПоставщиками = МетодСервера(	,
																"ПолучитьФункциональнуюОпциюНаСервере",
																"ИспользоватьСоглашенияСПоставщиками"	);
			
			Если ИспользоватьСоглашенияСПоставщиками = Неопределено Тогда
				ИспользоватьСоглашенияСПоставщиками = Ложь;
			КонецЕсли;
			
			Результат.ИспользоватьСоглашенияСПоставщиками = ИспользоватьСоглашенияСПоставщиками;
			
		Иначе
			
			Результат.ИспользоватьДоговорыСПоставщиками		= Истина;
			Результат.ИспользоватьСоглашенияСПоставщиками	= Ложь;	
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
		
	&НаСервере
	Функция Новый_СтруктураСтрокаТЧ()
		
		СтруктураДляТЧ_Шаблон = Новый Структура;
		СтруктураДляТЧ_Шаблон.Вставить("НомерСтроки");	
		СтруктураДляТЧ_Шаблон.Вставить("Тип");	
		СтруктураДляТЧ_Шаблон.Вставить("АртикулЭД");	
		СтруктураДляТЧ_Шаблон.Вставить("НоменклатураИзЭД");	
		СтруктураДляТЧ_Шаблон.Вставить("ЕдиницаИзЭД");	
		СтруктураДляТЧ_Шаблон.Вставить("Артикул");	
		СтруктураДляТЧ_Шаблон.Вставить("Номенклатура");
		СтруктураДляТЧ_Шаблон.Вставить("ЭтоУслуга");
		СтруктураДляТЧ_Шаблон.Вставить("ЕдиницаИзмерения");	
		СтруктураДляТЧ_Шаблон.Вставить("Количество");	
		СтруктураДляТЧ_Шаблон.Вставить("Цена");	
		СтруктураДляТЧ_Шаблон.Вставить("Сумма");	
		СтруктураДляТЧ_Шаблон.Вставить("СтавкаНДС");	
		СтруктураДляТЧ_Шаблон.Вставить("СуммаНДС");	
		СтруктураДляТЧ_Шаблон.Вставить("Всего");	
		СтруктураДляТЧ_Шаблон.Вставить("СтранаПроисхожденияЭД");	
		СтруктураДляТЧ_Шаблон.Вставить("СтранаПроисхождения");	
		СтруктураДляТЧ_Шаблон.Вставить("ГТД");	
		СтруктураДляТЧ_Шаблон.Вставить("НомерГТД");
		СтруктураДляТЧ_Шаблон.Вставить("XmlTorg12_Item"); // понадобится, если придется заполнять данные в форме накладной
		СтруктураДляТЧ_Шаблон.Вставить("НДСИсчисляетсяНалоговымАгентом");
		
		Возврат СтруктураДляТЧ_Шаблон;
		
	КонецФункции
	
	&НаСервере
	Функция Номенклатура1С_ЯвляетсяУслугой(Номенклатура)
		
		НоменклатураЯвляетсяУслугой = Ложь;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			НоменклатураЯвляетсяУслугой = КэшФормы().Номенклатура1С_ЯвляетсяУслугой.Получить(Номенклатура);
			Если НоменклатураЯвляетсяУслугой = Неопределено Тогда
				НоменклатураЯвляетсяУслугой = МетодСервера(,"НоменклатураЯвляетсяУслугой", Номенклатура);
				КэшФормы().Номенклатура1С_ЯвляетсяУслугой.Вставить(Номенклатура, НоменклатураЯвляетсяУслугой);
			КонецЕсли;
		КонецЕсли;
		
		Возврат НоменклатураЯвляетсяУслугой;
		
	КонецФункции
	
	// Обертка. Проверяет две строки на подобие
	&НаСервере
	Функция СтрокиПодобны(Строка1, Строка2)
		
		Результат = МетодСервера(, "СтрокиПодобны", Строка1, Строка2);
		
		Возврат Результат;
							
	КонецФункции // СтрокиПодобны()
	
	&НаСервере
	Функция ЕстьРеквизитБС_Организации(ВидДокумента)
		
		ЕстьРеквизитБС_Организации = КэшФормы().ЕстьРеквизитБС_Организации.Получить(ВидДокумента);
		Если ЕстьРеквизитБС_Организации = Неопределено Тогда
			ЕстьРеквизитБС_Организации = Метаданные.Документы[ВидДокумента].Реквизиты.Найти("БанковскийСчетОрганизации") <> Неопределено;
			КэшФормы().ЕстьРеквизитБС_Организации.Вставить(ВидДокумента, ЕстьРеквизитБС_Организации);
		КонецЕсли;
		
		Возврат ЕстьРеквизитБС_Организации;
		
	КонецФункции

	&НаСервере
	Функция ЕстьРеквизитБС_Контрагента(ВидДокумента)
		
		ЕстьРеквизитБС_Контрагента = КэшФормы().ЕстьРеквизитБС_Контрагента.Получить(ВидДокумента);
		Если ЕстьРеквизитБС_Контрагента = Неопределено Тогда
			ЕстьРеквизитБС_Контрагента = Метаданные.Документы[ВидДокумента].Реквизиты.Найти("БанковскийСчетКонтрагента") <> Неопределено;
			КэшФормы().ЕстьРеквизитБС_Контрагента.Вставить(ВидДокумента, ЕстьРеквизитБС_Контрагента);
		КонецЕсли;
		
		Возврат ЕстьРеквизитБС_Контрагента;
		
	КонецФункции
	
	&НаСервере
	Функция ЕстьРеквизитТЧ_Склад(ИмяДокумента, МаркерКонфигурации)
		
		ЕстьРеквизитТЧ_Склад = КэшФормы().ЕстьРеквизитТЧ_Склад.Получить(ИмяДокумента);
		Если ЕстьРеквизитТЧ_Склад = Неопределено Тогда
			Если МаркерКонфигурации = "УТ11" Тогда
				ЕстьРеквизитТЧ_Склад = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти.Товары.Реквизиты.Найти("Склад") <> Неопределено;
			Иначе
				ЕстьРеквизитТЧ_Склад = Ложь;
			КонецЕсли;
			КэшФормы().ЕстьРеквизитТЧ_Склад.Вставить(ИмяДокумента, ЕстьРеквизитТЧ_Склад);
		КонецЕсли;
		
		Возврат ЕстьРеквизитТЧ_Склад;
		
	КонецФункции
	
	&НаСервере
	Функция Новый_НоменклатураДляСопоставления()
		
		Возврат МетодСервера("Модуль_ИнтеграцияУниверсальный", "НоваяТаблицаНоменклатурыДляСопоставления");
		
	КонецФункции
			
	// Проверяет что в ДанныеЭД заполнены все поля, значения которых необходимы для создания документа
	//
	// Параметры:
	//	ДанныеЭД	- Структура	- см. метод "ДанныеЭлектронногоДокумента"
	//
	// Возвращаемое значение:
	//	Структура	- ключи "Разрешено" и "Комментарий"
	&НаСервере
	Функция МожноСоздаватьДокумент(ДанныеЭД, ДопПараметрыСоздания, ПараметрыДоговораСоглашения)
		
		Результат = Новый Структура;
		Результат.Вставить("Разрешено"		, Истина);
		Результат.Вставить("Комментарий"	, "");
						
		МаркерКонфигурации = Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		Если МаркерКонфигурации = "БГУ20"
		  И НЕ ДопПараметрыСоздания.ТолькоТовары 
		  И НЕ ДопПараметрыСоздания.ТолькоУслуги Тогда
		  
		 	Результат.Разрешено		= Ложь;
			Результат.Комментарий	= "При групповой обработке возможно создание документов, если в них содержатся только товары или только услуги";
			
		Иначе	
			
			ПоляШапки = Новый Структура;
			ПоляШапки.Вставить("Покупатель"	, СвойствоСтруктуры(ДанныеЭД.Покупатель, "Ссылка"));
			ПоляШапки.Вставить("Продавец"	, ДанныеЭД.Продавец.Ссылка);
			
			ЕстьОшибкаЗаполнения = ЕстьОшибкиЗаполненияВШапкеЭД(ПоляШапки, ДопПараметрыСоздания, ПараметрыДоговораСоглашения);
			
			Если НЕ ЕстьОшибкаЗаполнения Тогда
				ЕстьОшибкаЗаполнения = ЕстьОшибкиЗаполненияВТоварнойЧастиЭД(ДанныеЭД.ТоварнаяЧасть);
			КонецЕсли;
			
			Если ЕстьОшибкаЗаполнения Тогда
				Результат.Вставить("Разрешено"		, Ложь);
				Результат.Вставить("Комментарий"	, "Заполните данные");	
			КонецЕсли;
					
		КонецЕсли;
						
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция ЕстьОшибкиЗаполненияВШапкеЭД(ПоляШапки, ДопПараметрыСоздания, ПараметрыДоговораСоглашения)
		
		ЕстьОшибкаЗаполнения = Ложь;
						
		Если НЕ ЗначениеЗаполнено(ПоляШапки.Покупатель) Тогда
			ЕстьОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьОшибкаЗаполнения
			И НЕ ЗначениеЗаполнено(ПоляШапки.Продавец) Тогда
			
			ЕстьОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Если НЕ ЕстьОшибкаЗаполнения
			И ПараметрыДоговораСоглашения.ИспользоватьСоглашенияСПоставщиками
			И НЕ ЗначениеЗаполнено(ДопПараметрыСоздания.Соглашение) Тогда
			
			ЕстьОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		НужнаПроверкаЗаполненностиДоговора = ПараметрыДоговораСоглашения.ИспользоватьДоговорыСПоставщиками;
		Если ЗначениеЗаполнено(ДопПараметрыСоздания.Соглашение) 
			И НЕ ДопПараметрыСоздания.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
			НужнаПроверкаЗаполненностиДоговора = Ложь;
		КонецЕсли;
		
		Если НужнаПроверкаЗаполненностиДоговора 
			И НЕ ЗначениеЗаполнено(ДопПараметрыСоздания.Договор) Тогда
			
			ЕстьОшибкаЗаполнения = Истина;
		КонецЕсли;
		
		Возврат ЕстьОшибкаЗаполнения;
		
	КонецФункции
	
	// Контролирует, что все необходимые данные товарной части заполнены
	&НаСервере
	Функция ЕстьОшибкиЗаполненияВТоварнойЧастиЭД(ТоварнаяЧасть)
		
		ЕстьОшибкаЗаполнения = Ложь;
		
		Для каждого ЭлементТоварнойЧасти Из ТоварнаяЧасть Цикл
									
			Номенклатура	= ЭлементТоварнойЧасти.Номенклатура.Номенклатура;
			ЭтоУслуга		= Номенклатура1С_ЯвляетсяУслугой(Номенклатура);
			
			Если НЕ ЭтоУслуга И НЕ ЗначениеЗаполнено(Номенклатура) Тогда
				ЕстьОшибкаЗаполнения = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЭлементТоварнойЧасти.СтавкаНДС.Ссылка) Тогда
				ЕстьОшибкаЗаполнения = Истина;
			КонецЕсли;
			
			Если НЕ ЭтоУслуга 
				И НЕ ЗначениеЗаполнено(ЭлементТоварнойЧасти.ЕдиницаИзмерения.Ссылка) Тогда
				
				ЕстьОшибкаЗаполнения = Истина;
			КонецЕсли;
			
			ДанныеГТД = ЭлементТоварнойЧасти.ДанныеГТД;
			
			Если ЗначениеЗаполнено(ДанныеГТД) Тогда
										
				НомерГТД 			= ДанныеГТД[0].НомерГТД;
				СтранаПроисхождения = ДанныеГТД[0].СтранаПроисхождения;
				
				РегистрационныйНомер	= НомерГТД.РегистрационныйНомер;
				СтранаПроисхождения		= СтранаПроисхождения.Ссылка;
				
				ЕстьОшибкаЗаполнения = НеВерноЗаполненыДанныеГТД(РегистрационныйНомер, СтранаПроисхождения);
											
			КонецЕсли;
			
			Если ЕстьОшибкаЗаполнения Тогда
				Прервать;
			КонецЕсли;
									
		КонецЦикла;
		
		Возврат ЕстьОшибкаЗаполнения;
		
	КонецФункции
	
	&НаСервере
	Функция НеВерноЗаполненыДанныеГТД(РегистрационныйНомер, СтранаПроисхождения)
		
		НомерЗаполнен_СтранаНеЗаполнена = ЗначениеЗаполнено(РегистрационныйНомер)
											И НЕ ЗначениеЗаполнено(СтранаПроисхождения);
											
		НомерНеЗаполнен_СтранаЗаполнена = НЕ ЗначениеЗаполнено(РегистрационныйНомер)
											И ЗначениеЗаполнено(СтранаПроисхождения);
											
		ЕстьОшибкаЗаполнения = НомерЗаполнен_СтранаНеЗаполнена 
								ИЛИ НомерНеЗаполнен_СтранаЗаполнена;
								 
		Возврат ЕстьОшибкаЗаполнения;		
		
	КонецФункции
	
	&НаКлиенте
	Функция ПолучитьПараметрыСозданияСФ()
		
		ПараметрыСозданияСФ = Новый Структура();
		ПараметрыСозданияСФ.Вставить("МаркерКонфигурации", Объект.ПараметрыКлиентСервер.МаркерКонфигурации);
		Если ПараметрыСозданияСФ.МаркерКонфигурации <> "УТ11" Тогда
			ЭтоУТ_ВерсияМладше11_2 = Ложь;
		Иначе
			ЭтоУТ_ВерсияМладше11_2 = МетодКлиента("Модуль_Клиент", "СравнитьВерсии", Объект.ПараметрыКлиентСервер.ВерсияКонфигурации, "11.2") < 0;
		КонецЕсли;
		ПараметрыСозданияСФ.Вставить("ЭтоУТ_ВерсияМладше11_2", ЭтоУТ_ВерсияМладше11_2);
		
		Возврат ПараметрыСозданияСФ; 
		
	КонецФункции
	
#КонецОбласти
	
	#ОБЛАСТЬ СОЗДАНИЕ_ПОЛУЧЕНИЕ_ДАННЫХ_
		
		&НаСервере
		Функция ПолучитьОрганизацию1С_ПоДаннымДД(BoxID)
					
			Организация1С = КэшФормы().ОрганизацииДД_1С.Получить(BoxID);
			Если Организация1С = Неопределено Тогда
				Организация1С = МетодСервера(,"BoxID_2_Организация", BoxID); 
				КэшФормы().ОрганизацииДД_1С.Вставить(BoxID, Организация1С);
			КонецЕсли;
			
			Возврат Организация1С;
			
		КонецФункции

		&НаСервере
		Функция ПолучитьКонтрагента1С_ПоДаннымДД(CounteragentID)
			
			Контрагент1С = КэшФормы().КонтрагентыДД_1С.Получить(CounteragentID);
			Если Контрагент1С = Неопределено Тогда
				Контрагент1С = МетодСервера(,"CounteragentBoxID_2_Контрагент", CounteragentID); 
				КэшФормы().КонтрагентыДД_1С.Вставить(CounteragentID, Контрагент1С);
			КонецЕсли;
			
			Возврат Контрагент1С;
			
		КонецФункции

		&НаСервере
Функция ПолучитьДоговор1С_ПоДаннымДД(AttachmentVersion, КонтентДокумента, Организация1С, Контрагент1С)
	
	БазовыеФорматы			= БазовыеФорматыНаСервере();
	ДоговорКонтрагента		= Неопределено;
	СписокВидовДоговоров	= МетодСервера(,"ПолучитьСписокВидовДоговоров", Не ЭтоПоступление);
	
	Если AttachmentVersion = БазовыеФорматы.torg12 Тогда
		
		ДатаДоговораДД 			= ?(Строка(КонтентДокумента.GroundDate) = "", "", Строка(КонтентДокумента.GroundDate) + "_");
		НомерДоговораДД 		= ?(Строка(КонтентДокумента.GroundNumber) = "", "", Строка(КонтентДокумента.GroundNumber) + "_");
		НаименованиеДоговораДД 	= ?(Строка(КонтентДокумента.GroundName) = "", "", Строка(КонтентДокумента.GroundName));
		ПредставлениеДоговораДД = Прав(СокрЛП(ДатаДоговораДД + НомерДоговораДД + НаименованиеДоговораДД),50);
		
		ДоговорКонтрагента = КэшФормы().ДоговорыДД_1С.Получить(ПредставлениеДоговораДД);
		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = МетодСервера(, "ПолучитьДоговорКонтрагента", Организация1С, Контрагент1С, СписокВидовДоговоров, ПредставлениеДоговораДД);
			КэшФормы().ДоговорыДД_1С.Вставить(ПредставлениеДоговораДД, ДоговорКонтрагента);
		КонецЕсли;
		
	Иначе
		ДоговорКонтрагента = МетодСервера(, "ПолучитьДоговорКонтрагента", Организация1С, Контрагент1С, СписокВидовДоговоров);
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции
		
		&НаСервере
		Функция ПолучитьНоменклатуру1С_ПоДаннымДД(Контрагент, ItemCode, ItemArticle, ItemName, ДобавлятьНенайденнуюВ_ТаблицуДляСопоставления = Истина)
			
			КодНоменклатурыДД 			= ?(ПустаяСтрока(ItemCode), "", Строка(СокрЛП(ItemCode)) + "_");
			АртикулНоменклатурыДД 		= ?(ПустаяСтрока(ItemArticle), "", Строка(СокрЛП(ItemArticle)) + "_");
			НаименованиеНоменклатурыДД 	= ?(ПустаяСтрока(ItemName), "", Строка(СокрЛП(ItemName)));
			ПредставлениеНоменклатурыДД = КодНоменклатурыДД + АртикулНоменклатурыДД + НаименованиеНоменклатурыДД;
			НоменклатураСсылка = КэшФормы().НоменклатураДД_1С.Получить(ПредставлениеНоменклатурыДД);
			
			Если НоменклатураСсылка = Неопределено Тогда
				
				НоменклатураСсылка = МетодСервера(, "ПолучитьНоменклатуруПоставщика", стПрофильКонфигурации, Контрагент, ItemCode, ItemArticle, ItemName);
				
				Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) И ЗначениеЗаполнено(ItemArticle) Тогда
					НоменклатураСсылка = МетодСервера(, "ПолучитьНоменклатуруПоАртикулу", стПрофильКонфигурации, ItemArticle);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) И ЗначениеЗаполнено(ItemCode) Тогда
					НоменклатураСсылка = МетодСервера(, "ПолучитьНоменклатуруПоАртикулу", стПрофильКонфигурации, ItemCode);
				КонецЕсли;
			
				КэшФормы().НоменклатураДД_1С.Вставить(ПредставлениеНоменклатурыДД, НоменклатураСсылка);
				
				// добавляем данные по несопоставленной номенклатуре в таблицу для возможности массового сопоставления в конце процедуры создания документов
				Если Не ЗначениеЗаполнено(НоменклатураСсылка) И ДобавлятьНенайденнуюВ_ТаблицуДляСопоставления Тогда
					ОтборСтрок = Новый Структура("Контрагент,КодЭД,АртикулЭД,НоменклатураЭД", Контрагент, ItemCode, ItemArticle, ItemName);
					СтрокиТЗ = КэшФормы().НоменклатураДляСопоставления.НайтиСтроки(ОтборСтрок);
					Если СтрокиТЗ.Количество() = 0 Тогда
						СтрокаТЗ_НоменклатураДляСопоставления = КэшФормы().НоменклатураДляСопоставления.Добавить();
						СтрокаТЗ_НоменклатураДляСопоставления.Контрагент 		= Контрагент;
						СтрокаТЗ_НоменклатураДляСопоставления.КодЭД 			= ItemCode;
						СтрокаТЗ_НоменклатураДляСопоставления.АртикулЭД 		= ItemArticle;
						СтрокаТЗ_НоменклатураДляСопоставления.НоменклатураЭД 	= ItemName;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат НоменклатураСсылка;
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьЕИ_1С_ПоДаннымДД(ПараметрыОпределенияЕИ, НоменклатураСсылка, ItemUnitCode, ItemUnitName)
			
			Если ЗначениеЗаполнено(НоменклатураСсылка) Тогда
				
				КодЕИ_ДД 			= ?(Строка(ItemUnitCode) = "", "", Строка(СокрЛП(ItemUnitCode)) + "_");
				НаименованиеЕИ_ДД	= ?(Строка(ItemUnitName) = "", "", Строка(СокрЛП(ItemUnitName)) + "_");
				УИД_Номенклатуры1С 	= Строка(НоменклатураСсылка.УникальныйИдентификатор());
				ПредставлениеКлюча 	= КодЕИ_ДД + НаименованиеЕИ_ДД + УИД_Номенклатуры1С;
				ЕИ_Ссылка = КэшФормы().ЕИ_ДД_1С.Получить(ПредставлениеКлюча);
				
				Если ЕИ_Ссылка = Неопределено И ЗначениеЗаполнено(НоменклатураСсылка) Тогда
						
					СтрокаGUID = МетодСервера(,"ПолучитьЗначениеСвойства", НоменклатураСсылка, МетодСервера(,"ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры"));
					Если ЗначениеЗаполнено(СтрокаGUID) Тогда
						Если НЕ ПустаяСтрока(ПараметрыОпределенияЕИ.ИмяСправочникаЕИ) Тогда
							ЕдиницаИзмерения = Вычислить("Справочники."+ПараметрыОпределенияЕИ.ИмяСправочникаЕИ+".ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаGUID))");
							Если МетодСервера(,"СсылкаСуществует", ЕдиницаИзмерения) Тогда
								ЕИ_Ссылка = ЕдиницаИзмерения;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Номенклатура1С_ЯвляетсяУслугой(НоменклатураСсылка) Тогда
						ЕИ_Ссылка = МетодСервера(,"ПолучитьЕдиницуИзмерения", "", "", НоменклатураСсылка);
				 	Иначе	
						ЕИ_Ссылка = МетодСервера(,"ПолучитьЕдиницуИзмерения", ItemUnitCode, ItemUnitName, НоменклатураСсылка);
					КонецЕсли;
					
					КэшФормы().ЕИ_ДД_1С.Вставить(ПредставлениеКлюча, ЕИ_Ссылка);
					
				КонецЕсли;
				
				Возврат ЕИ_Ссылка;
				
			КонецЕсли;
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСтавкуНДС_1С_ПоДаннымДД(ItemTaxRate)
					
			СтавкаНДС_Ссылка = КэшФормы().СтавкиНДС_ДД_1С.Получить(ItemTaxRate);
			Если СтавкаНДС_Ссылка = Неопределено Тогда
				СтавкаНДС_Ссылка = МетодСервера(, "ОпределитьСтавкуНДС_1С_ПоСтавкеНДС_ДД", ItemTaxRate);
				КэшФормы().СтавкиНДС_ДД_1С.Вставить(ItemTaxRate, СтавкаНДС_Ссылка);
			КонецЕсли;
			
			Возврат СтавкаНДС_Ссылка;
			
		КонецФункции

		&НаСервере
		Функция ПолучитьСтрануПоКлассификаторуИ_СправочникуСтранМира1С_ПоДаннымДД(ItemCountryCode)
					
			СтранаПроисхожденияСтруктурой = КэшФормы().СтраныДД_1С.Получить(ItemCountryCode);
			
			Если СтранаПроисхожденияСтруктурой = Неопределено Тогда
				
				СтранаПоКлассификатору = МетодСервера("ГенерацияXML", "НаименованиеСтраны", ItemCountryCode);
				СтранаИзСправочникаСтранМира = МетодСервера("Модуль_ИнтеграцияУниверсальный", "НайтиСтрануПоКоду", ItemCountryCode);
				
				СтранаПроисхожденияСтруктурой = Новый Структура;
				СтранаПроисхожденияСтруктурой.Вставить("СтранаПроисхожденияПоКлассификатору"		, СтранаПоКлассификатору);
				СтранаПроисхожденияСтруктурой.Вставить("СтранаПроисхожденияИзСправочникаСтранМира"	, СтранаИзСправочникаСтранМира);
				
				КэшФормы().СтраныДД_1С.Вставить(ItemCountryCode, СтранаПроисхожденияСтруктурой);
			КонецЕсли;
			
			Возврат СтранаПроисхожденияСтруктурой;
			
		КонецФункции

		&НаСервере
		Функция ПолучитьНомерГТД_1С_ПоДаннымДД(ItemTDNumber, СтранаПроисхождения)
			
			Если НЕ ЗначениеЗаполнено(ItemTDNumber) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			НомерГТД_Ссылка = КэшФормы().НомераГТД_ДД_1С.Получить(ItemTDNumber);
			Если НомерГТД_Ссылка = Неопределено Тогда
				НомерГТД_Ссылка = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ВернутьСсылкуНаГТД", ItemTDNumber, СтранаПроисхождения);
				КэшФормы().НомераГТД_ДД_1С.Вставить(ItemTDNumber, НомерГТД_Ссылка);
			КонецЕсли;
			
			Возврат НомерГТД_Ссылка;
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьДопДанныеДляСозданияНакладной(ДоговорКонтрагента, ЭтоУНФ)

			ДопДанныеССервера = Новый Структура();

			Если ЭтоУНФ Тогда
				ДопДанныеССервера = КэшФормы().ДопДанныеДляСозданияНакладной.Получить(ДоговорКонтрагента);
				Если ДопДанныеССервера = Неопределено Тогда
					СтруктураВходящиеДанные = Новый Структура();
					СтруктураВходящиеДанные.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
					ДопДанныеССервера = МетодСервера(Объект.ПараметрыКлиентСервер.ИмяФормыИнтеграции, "ПодготовитьДопДанныеДляСозданияНакладной", СтруктураВходящиеДанные);
					КэшФормы().ДопДанныеДляСозданияНакладной.Вставить(ДоговорКонтрагента, ДопДанныеССервера);
				КонецЕсли;
			КонецЕсли;
			
			Возврат ДопДанныеССервера;
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьДанныеДоговора(ДоговорКонтрагента)
			
			ДанныеДоговора = КэшФормы().ДанныеДоговора.Получить(ДоговорКонтрагента);
			Если ДанныеДоговора = Неопределено Тогда
				ДанныеДоговора = МетодСервера(, "ПолучитьДанныеПоДоговору", ДоговорКонтрагента);
				КэшФормы().ДанныеДоговора.Вставить(ДоговорКонтрагента, ДанныеДоговора);
			КонецЕсли;
			
			Возврат ДанныеДоговора; 
			
		КонецФункции

		&НаСервере
		Функция ПолучитьТипЦенПоДоговору(ДоговорКонтрагента)
			
			ТипЦен = КэшФормы().ТипыЦенПоДоговорам.Получить(ДоговорКонтрагента);
			Если ТипЦен = Неопределено Тогда
				ТипЦен = МетодСервера("Модуль_ИнтеграцияУниверсальный", "ПолучитьТипЦенПоДоговору", ДоговорКонтрагента);
				КэшФормы().ТипыЦенПоДоговорам.Вставить(ДоговорКонтрагента, ТипЦен);
			КонецЕсли;
			
			Возврат ТипЦен; 
			
		КонецФункции
		
	#КонецОбласти	
		
//***********************************
#ОБЛАСТЬ СОЗДАНИЕ_ЗАГОТОВКА_ДОКУМЕНТА_1С_
	
	&НаСервере
	Функция ПолучитьЗаготовкуДляСозданияДокументаПоступленияВ_1С(СтрокаТаблицыИлиИдентификатор, ПараметрыОпределенияЕИ = Неопределено)
		
		Если ТипЗнч(СтрокаТаблицыИлиИдентификатор) = Тип("Число") Тогда
			СтрокаТаблицы = ТаблицаСоздатьДокументыПоступления.НайтиПоИдентификатору(СтрокаТаблицыИлиИдентификатор);
		Иначе
			СтрокаТаблицы = СтрокаТаблицыИлиИдентификатор;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыОпределенияЕИ) Тогда
			ПараметрыОпределенияЕИ = ПараметрыОпределенияЕИ();
		КонецЕсли;
		
		МаркерКонфигурации = Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		ЗаготовкаДокумента1С = Новый Структура;
		ЗаготовкаДокумента1С.Вставить("МаркерКонфигурации", МаркерКонфигурации);
		ЗаготовкаДокумента1С.Вставить("ВидОперации", 		ВидОперацииСоздаваемогоПоступления);
		ЗаготовкаДокумента1С.Вставить("Дата",		 		СтрокаТаблицы.Дата);
		ЗаготовкаДокумента1С.Вставить("Номер", 				СтрокаТаблицы.Номер);
		ЗаготовкаДокумента1С.Вставить("Организация", 		ПолучитьОрганизацию1С_ПоДаннымДД(СтрокаТаблицы.BoxID));
		ЗаготовкаДокумента1С.Вставить("Контрагент", 		ПолучитьКонтрагента1С_ПоДаннымДД(СтрокаТаблицы.CounteragentID));
		
		ДоговорКонтрагента = ПолучитьДоговор1С_ПоДаннымДД(	СтрокаТаблицы.AttachmentVersion,
															СтрокаТаблицы.КонтентДокумента,
															ЗаготовкаДокумента1С.Организация,
															ЗаготовкаДокумента1С.Контрагент);
		
		ЗаготовкаДокумента1С.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
		
		Если ЗначениеЗаполнено(ЗаготовкаДокумента1С.Контрагент) Тогда
			Если МаркерКонфигурации = "УТ11" Тогда
				Соглашение = МетодСервера(, "ПолучитьСоглашениеКонтрагента", ЗаготовкаДокумента1С.Организация, ЗаготовкаДокумента1С.Контрагент);
				ЗаготовкаДокумента1С.Вставить("Соглашение", Соглашение);
			КонецЕсли;
		КонецЕсли;
		
		ПреобразоватьТаблицуТоваровДД_В_ТЧ_1С(ЗаготовкаДокумента1С, СтрокаТаблицы, ПараметрыОпределенияЕИ);
		
		ДополнитьЗаготовкуДокументаСведениямиПоУчетуАгентскогоНДС(ЗаготовкаДокумента1С);
		
		ТабличнаяЧастьКоличествоСтрок = ЗаготовкаДокумента1С.ТабличнаяЧасть.Количество();
		
		ОтборСтрок = Новый Структура("ЭтоУслуга", Ложь);
		МассивСтрокЭтоТовар = НайтиСтрокиВМассивеСтруктур(ЗаготовкаДокумента1С.ТабличнаяЧасть, ОтборСтрок);
		
		ОтборСтрок = Новый Структура("ЭтоУслуга", Истина);
		МассивСтрокЭтоУслуга = НайтиСтрокиВМассивеСтруктур(ЗаготовкаДокумента1С.ТабличнаяЧасть, ОтборСтрок);
		
		ЗаготовкаДокумента1С.Вставить("ТолькоТовары", МассивСтрокЭтоТовар.Количество() = ТабличнаяЧастьКоличествоСтрок);
		ЗаготовкаДокумента1С.Вставить("ТолькоУслуги", МассивСтрокЭтоУслуга.Количество() = ТабличнаяЧастьКоличествоСтрок);
		
		Возврат ЗаготовкаДокумента1С;
		
	КонецФункции
	
	&НаСервере
	Процедура ДополнитьЗаготовкуДокументаСведениямиПоУчетуАгентскогоНДС(ЗаготовкаДокумента1С)
		
		СтавкаНДСНалоговогоАгента = 18; // п.8 ст.161 НК РФ
		
		НалоговыйАгент = Ложь; // Истина, если хотя бы в одной строке указано, что НДС исчисляется налоговым агентом
		
		Для Каждого Стр Из ЗаготовкаДокумента1С.ТабличнаяЧасть Цикл 
			
			TaxRate = МетодСервера(, "ЗначениеСвойстваЭлементаXmlTorg12", Стр.XmlTorg12_Item, "TaxRate");
			Стр.НДСИсчисляетсяНалоговымАгентом = МетодСервера(, "НДСИсчисляетсяНалоговымАгентом", TaxRate);
			НалоговыйАгент = НалоговыйАгент Или Стр.НДСИсчисляетсяНалоговымАгентом;
			
			Если Стр.НДСИсчисляетсяНалоговымАгентом Тогда 
				
				СуммаБезНДС = МетодСервера(, "ЗначениеСвойстваЭлементаXmlTorg12", Стр.XmlTorg12_Item, "SubtotalWithVatExcluded");
				СуммаБезНДС = МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", СуммаБезНДС);
				СуммаНДС 	= СуммаБезНДС * СтавкаНДСНалоговогоАгента / 100;
				
				Стр.СуммаНДС 	= СуммаНДС;
				Стр.Сумма 		= СуммаБезНДС; // НДС налоговый агент начисляет сверх суммы поставщика
				Стр.Всего 		= СуммаБезНДС + СуммаНДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаготовкаДокумента1С.Вставить("НалоговыйАгент", НалоговыйАгент);
		
		Если НалоговыйАгент Тогда 
			ЗаготовкаДокумента1С.Вставить("СуммаВключаетНДС", Ложь);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
Процедура ПреобразоватьТаблицуТоваровДД_В_ТЧ_1С(ЗаготовкаДокумента1С, СтрокаТаблицы, ПараметрыОпределенияЕИ)
	
	Контрагент 		= ЗаготовкаДокумента1С.Контрагент;
	ТабличнаяЧасть 	= Новый Массив();
	ЗаполнениеГТД  	= Ложь;
	
	БазовыеФорматы = БазовыеФорматыНаСервере();
	БазовыйФормат = СтрокаТаблицы.AttachmentVersion;
	
	Если БазовыйФормат = БазовыеФорматы.torg12 Тогда
		
		СоответствиеСтрокС_ГТД = СоответствиеСтрокС_ГТД(СтрокаТаблицы.КонтентДокумента.Items, СтрокаТаблицы.КонтентСвязанногоInvoice);
		
		НомерСтроки = 1;
		
		Для Каждого Item Из СтрокаТаблицы.КонтентДокумента.Items Цикл
			
			СтрокаТЧ = СтрокаТЧПоXmlTorg12(Item, НомерСтроки, Контрагент, ПараметрыОпределенияЕИ);
					
			// заполнение данных ГТД по данным из связанного Invoice
			Если СоответствиеСтрокС_ГТД = Неопределено ИЛИ СоответствиеСтрокС_ГТД[Item].МассивСтрокиItemInvoice.Количество() = 0 Тогда
				ТабличнаяЧасть.Добавить(СтрокаТЧ);
			Иначе
				СоздатьСтрокиТЧ_ПоСтрокамС_ГТД(ТабличнаяЧасть, СтрокаТЧ, СоответствиеСтрокС_ГТД[Item], ЗаполнениеГТД);
			КонецЕсли;			
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
				
	ИначеЕсли БазовыйФормат = БазовыеФорматы.tovtorg Тогда
		
		СоответствиеСтрокС_ГТД = СоответствиеСтрокС_ГТД(СтрокаТаблицы.КонтентДокумента.Table.Items, СтрокаТаблицы.КонтентСвязанногоInvoice);
		
		НомерСтроки = 1;
		
		Для Каждого Item Из СтрокаТаблицы.КонтентДокумента.Table.Items Цикл
			
			СтрокаТЧ = СтрокаТЧПоTovTorg(Item, НомерСтроки, Контрагент, ПараметрыОпределенияЕИ);
					
			// заполнение данных ГТД по данным из связанного Invoice
			Если СоответствиеСтрокС_ГТД = Неопределено ИЛИ СоответствиеСтрокС_ГТД[Item].МассивСтрокиItemInvoice.Количество() = 0 Тогда
				ТабличнаяЧасть.Добавить(СтрокаТЧ);
			Иначе
				СоздатьСтрокиТЧ_ПоСтрокамС_ГТД(ТабличнаяЧасть, СтрокаТЧ, СоответствиеСтрокС_ГТД[Item], ЗаполнениеГТД);
			КонецЕсли;			
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
				
	ИначеЕсли БазовыйФормат = БазовыеФорматы.act Тогда
		
		НомерСтроки = 1;
		
		Для Каждого Item Из СтрокаТаблицы.КонтентДокумента.items Цикл
			
			СтрокаТЧ = СтрокаТЧПоXmlAcceptanceCertificate(Item, НомерСтроки, Контрагент, ЗаготовкаДокумента1С.МаркерКонфигурации, ПараметрыОпределенияЕИ);
									
			ТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	ИначеЕсли БазовыйФормат = БазовыеФорматы.rezru Тогда
		
		НомерСтроки = 1;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.КонтентДокумента.Works) Тогда
			
			Work_0 = СтрокаТаблицы.КонтентДокумента.Works[0]; 
			
			Для каждого Item из Work_0.Items Цикл
				
				СтрокаТЧ = СтрокаТЧПоXmlAcceptanceCertificate(Item, НомерСтроки, ЗаготовкаДокумента1С.Контрагент, ЗаготовкаДокумента1С.МаркерКонфигурации, ПараметрыОпределенияЕИ);
							
				ТабличнаяЧасть.Добавить(СтрокаТЧ);
				
				НомерСтроки = НомерСтроки + 1;
							
			КонецЦикла;
			
		КонецЕсли;
				
	ИначеЕсли БазовыйФормат = БазовыеФорматы.invoice Тогда
		
		НомерСтроки = 1;
		
		Для Каждого Item Из СтрокаТаблицы.КонтентДокумента.items Цикл
			
			НоменклатураСсылка 	= ПолучитьНоменклатуру1С_ПоДаннымДД(Контрагент, "", "", Item.Product);
			ЕИ_Ссылка 			= ПолучитьЕИ_1С_ПоДаннымДД(ПараметрыОпределенияЕИ, НоменклатураСсылка, Item.UnitCode, "");
			СтавкаНДС_Ссылка 	= ПолучитьСтавкуНДС_1С_ПоДаннымДД(Item.TaxRate);
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
			
			СтрокаТЧ.НоменклатураИзЭД	= Item.Product;
			СтрокаТЧ.Номенклатура 		= НоменклатураСсылка;
			СтрокаТЧ.ЭтоУслуга			= Номенклатура1С_ЯвляетсяУслугой(НоменклатураСсылка);
			СтрокаТЧ.ЕдиницаИзмерения	= ЕИ_Ссылка;	
			СтрокаТЧ.Количество			= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Quantity);
			СтрокаТЧ.Цена				= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Price);
			СтрокаТЧ.СтавкаНДС 			= СтавкаНДС_Ссылка;	
			СтрокаТЧ.СуммаНДС			= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Vat);
			СтрокаТЧ.Всего				= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Total);
			ПересчитатьПоляСУчетомНДС(СтрокаТЧ, Item);
			
			ЗаполнитьСтрануНомерГТД_В_Строке(СтрокаТЧ, Item.CountriesOfOrigin, Item.CustomsDeclarationNumbers, ЗаполнениеГТД);
			
			XmlTorg12_Item = Новый Структура("Code,NomenclatureArticle,Name,UnitCode,UnitName,Subtotal,SubtotalWithVatExcluded,TaxRate",
											 "", "", Item.Product, Item.UnitCode, "", Item.Total, Item.TotalWithVatExcluded, Item.TaxRate);
			ДобавитьИнфоXmlTorg12_Item(СтрокаТЧ, XmlTorg12_Item);
			
			ТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;

	ИначеЕсли БазовыйФормат = БазовыеФорматы.utd820
		Или БазовыйФормат = БазовыеФорматы.utd Тогда
		
		ЭтоУПД820 = (БазовыйФормат = БазовыеФорматы.utd820);
		
		ЭтоАктВ155Формате = СтрокаТаблицы.DocumentType = "XmlAcceptanceCertificate";
		ДобавлятьНоменклатуруВТаблицуДляСопоставления = Не (ЭтоАктВ155Формате И ЗаготовкаДокумента1С.МаркерКонфигурации = "БП30");
		НомерСтроки = 1;
		
		ИмяТЧ = ?(ЭтоУПД820, "Table", "InvoiceTable");
		
		Для Каждого Item Из СтрокаТаблицы.КонтентДокумента[ИмяТЧ].Items Цикл
			
			Если ЭтоУПД820 Тогда
				Артикул = Item.ItemVendorCode;
				КодЕдИзм = Item.Unit;
			Иначе
				Артикул = Item.VendorCode;
				КодЕдИзм = Item.UnitCode;
			КонецЕсли;
			
			НоменклатураСсылка 	= ПолучитьНоменклатуру1С_ПоДаннымДД(Контрагент, "", Артикул, Item.Product, ДобавлятьНоменклатуруВТаблицуДляСопоставления);
			ЕИ_Ссылка 			= ПолучитьЕИ_1С_ПоДаннымДД(ПараметрыОпределенияЕИ, НоменклатураСсылка, КодЕдИзм, Item.UnitName);
			СтавкаНДС_Ссылка 	= ПолучитьСтавкуНДС_1С_ПоДаннымДД(Item.TaxRate);
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
						
			СтрокаТЧ.АртикулЭД			= ?(ЗначениеЗаполнено(Артикул), Артикул, Неопределено);
			СтрокаТЧ.НоменклатураИзЭД	= Item.Product;
			СтрокаТЧ.ЕдиницаИзЭД		= ?(ЗначениеЗаполнено(КодЕдИзм), КодЕдИзм, Неопределено);
			СтрокаТЧ.Номенклатура 		= НоменклатураСсылка;
			СтрокаТЧ.ЭтоУслуга			= ЭтоАктВ155Формате Или Номенклатура1С_ЯвляетсяУслугой(НоменклатураСсылка);
			СтрокаТЧ.ЕдиницаИзмерения	= ЕИ_Ссылка;	
			СтрокаТЧ.Количество			= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Quantity);
			СтрокаТЧ.Цена				= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Price);
			СтрокаТЧ.СтавкаНДС 			= СтавкаНДС_Ссылка;
			СтрокаТЧ.СуммаНДС			= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Vat);
			СтрокаТЧ.Всего				= МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Subtotal);
			ПересчитатьПоляСУчетомНДС_УПД(СтрокаТЧ, Item);
			
			CustomDeclarations = Item.CustomDeclarations;
			КоличествоCustomDeclarations = CustomDeclarations.Количество();
			Если КоличествоCustomDeclarations = 1 Тогда
				СтрокаCustomDeclarations = CustomDeclarations.Получить(0);
				ЗаполнитьСтрануНомерГТД_В_Строке(СтрокаТЧ, СтрокаCustomDeclarations.CountryCode, СтрокаCustomDeclarations.DeclarationNumber, ЗаполнениеГТД);
			КонецЕсли;
			
			XmlTorg12_Item = Новый Структура("Code,NomenclatureArticle,Name,UnitCode,UnitName,Subtotal,SubtotalWithVatExcluded,TaxRate",
											 Артикул, "", Item.Product, КодЕдИзм, Item.UnitName, Item.Subtotal, Item.SubtotalWithVatExcluded, Item.TaxRate);
			ДобавитьИнфоXmlTorg12_Item(СтрокаТЧ, XmlTorg12_Item);
			
			ТабличнаяЧасть.Добавить(СтрокаТЧ);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;

	Иначе
		
		ТекстОшибки = НСтр("ru = 'Неизвестный формат электронного документа (тип документа:  %1; функция: %2; базовый формат: %3)!'");
		ТекстОшибки = СтрШаблон(ТекстОшибки
						, СтрокаТаблицы.DocumentType
						, СтрокаТаблицы.DocumentFunction
						, БазовыйФормат);
		
		КомментарийЖР = НСтр("ru = 'Не удалось прочитать табличную часть электронного документа %1 (boxId = %2):
                              |%3'");
		КомментарийЖР = СтрШаблон(КомментарийЖР
							, СтрокаТаблицы.DocumentId
							, СтрокаТаблицы.BoxID
							, ТекстОшибки);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Диадок'")
			, УровеньЖурналаРегистрации.Ошибка
			,
			,
			, КомментарийЖР);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаготовкаДокумента1С.Вставить("ТабличнаяЧасть"	, ТабличнаяЧасть);
	ЗаготовкаДокумента1С.Вставить("ЗаполнениеГТД"	, ЗаполнениеГТД);
	
КонецПроцедуры
	
	
		//** { Конвертация контента в Табличную часть заготовки
		
		&НаСервере
		Функция СтрокаТЧПоXmlTorg12(Item, НомерСтроки, Контрагент, ПараметрыОпределенияЕИ)
			
			НоменклатураСсылка 	= ПолучитьНоменклатуру1С_ПоДаннымДД(Контрагент, Item.ProductCode, Item.Article, Item.Product);
			ЕИ_Ссылка 			= ПолучитьЕИ_1С_ПоДаннымДД(ПараметрыОпределенияЕИ, НоменклатураСсылка, Item.UnitCode, Item.UnitName);
			СтавкаНДС_Ссылка 	= ПолучитьСтавкуНДС_1С_ПоДаннымДД(Item.TaxRate);
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
					
			СтрокаТЧ.НомерСтроки 		= НомерСтроки;
			СтрокаТЧ.АртикулЭД 			= ?(ЗначениеЗаполнено(Item.ProductCode), Item.ProductCode, Неопределено);
			СтрокаТЧ.НоменклатураИзЭД 	= ?(ЗначениеЗаполнено(Item.Product), Item.Product, Неопределено);
			СтрокаТЧ.ЕдиницаИзЭД 		= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
			СтрокаТЧ.Номенклатура 		= НоменклатураСсылка;
			СтрокаТЧ.ЭтоУслуга			= Номенклатура1С_ЯвляетсяУслугой(НоменклатураСсылка);
			СтрокаТЧ.ЕдиницаИзмерения 	= ЕИ_Ссылка;	
			СтрокаТЧ.Количество 		= ?(ТипЗнч(Item.Quantity) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Quantity), Item.Quantity);
			СтрокаТЧ.Цена 				= ?(ТипЗнч(Item.Price) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Price), Item.Price);
			СтрокаТЧ.СтавкаНДС 			= СтавкаНДС_Ссылка;	
			СтрокаТЧ.СуммаНДС 			= ?(ТипЗнч(Item.Vat) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Vat), Item.Vat);
			СтрокаТЧ.Всего 				= ?(ТипЗнч(Item.Total) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Total), Item.Total);
					
			ПересчитатьПоляСУчетомНДС(СтрокаТЧ, Item);
			
			XmlTorg12_Item = Новый Структура("Code, NomenclatureArticle, Name, UnitCode, UnitName, Total, TotalWithVatExcluded, TaxRate",
											 Item.ProductCode, Item.Article, Item.Product, Item.UnitCode, Item.UnitName, Item.Total, Item.TotalWithVatExcluded, Item.TaxRate);
											 
			ДобавитьИнфоXmlTorg12_Item(СтрокаТЧ, XmlTorg12_Item);
			
			Возврат СтрокаТЧ; 
			
		КонецФункции
		
		&НаСервере
		Функция СтрокаТЧПоTovTorg(Item, НомерСтроки, Контрагент, ПараметрыОпределенияЕИ)
			
			НоменклатураСсылка 	= ПолучитьНоменклатуру1С_ПоДаннымДД(Контрагент, Item.ProductCode, Item.VendorCode, Item.Product);
			ЕИ_Ссылка 			= ПолучитьЕИ_1С_ПоДаннымДД(ПараметрыОпределенияЕИ, НоменклатураСсылка, Item.Unit, Item.UnitName);
			СтавкаНДС_Ссылка 	= ПолучитьСтавкуНДС_1С_ПоДаннымДД(Item.TaxRate);
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
					
			СтрокаТЧ.НомерСтроки 		= НомерСтроки;
			СтрокаТЧ.АртикулЭД 			= ?(ЗначениеЗаполнено(Item.ProductCode), Item.ProductCode, Неопределено);
			СтрокаТЧ.НоменклатураИзЭД 	= ?(ЗначениеЗаполнено(Item.Product), Item.Product, Неопределено);
			СтрокаТЧ.ЕдиницаИзЭД 		= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
			СтрокаТЧ.Номенклатура 		= НоменклатураСсылка;
			СтрокаТЧ.ЭтоУслуга			= Номенклатура1С_ЯвляетсяУслугой(НоменклатураСсылка);
			СтрокаТЧ.ЕдиницаИзмерения 	= ЕИ_Ссылка;	
			СтрокаТЧ.Количество 		= ?(ТипЗнч(Item.Net) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Net), Item.Net);
			СтрокаТЧ.Цена 				= ?(ТипЗнч(Item.Price) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Price), Item.Price);
			СтрокаТЧ.СтавкаНДС 			= СтавкаНДС_Ссылка;	
			СтрокаТЧ.СуммаНДС 			= ?(ТипЗнч(Item.Vat) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Vat), Item.Vat);
			СтрокаТЧ.Всего 				= ?(ТипЗнч(Item.Subtotal) = Тип("Строка"), МетодСервера(,"ЧислоИзЗначенияОтКомпоненты", Item.Subtotal), Item.Subtotal);
					
			ПересчитатьПоляСУчетомНДС(СтрокаТЧ, Item);
			
			XmlTorg12_Item = Новый Структура("Code, NomenclatureArticle, Name, UnitCode, UnitName, Subtotal, SubtotalWithVatExcluded, TaxRate",
											 Item.ProductCode, Item.VendorCode, Item.Product, Item.Unit, Item.UnitName, Item.Subtotal, Item.SubtotalWithVatExcluded, Item.TaxRate);
											 
			ДобавитьИнфоXmlTorg12_Item(СтрокаТЧ, XmlTorg12_Item);
			
			Возврат СтрокаТЧ; 
			
		КонецФункции
		
		&НаСервере
		Функция СтрокаТЧПоXmlAcceptanceCertificate(Item, НомерСтроки, Контрагент, МаркерКонфигурации, ПараметрыОпределенияЕИ)
			
			Subtotal_Представление = ?(Item.Свойство("Subtotal"), "Subtotal", "Total");
			SubtotalWithVatExcluded_Представление = ?(Item.Свойство("SubtotalWithVatExcluded"), "SubtotalWithVatExcluded", "TotalWithVatExcluded");
			
			
			СтрокаТЧ = Новый_СтруктураСтрокаТЧ();
						
			СтрокаТЧ.НомерСтроки = НомерСтроки;
			
			Если ЗначениеЗаполнено(Item.Name) Тогда
				СтрокаТЧ.НоменклатураИзЭД = Item.Name;
			ИначеЕсли ЗначениеЗаполнено(Item.Description) Тогда
				СтрокаТЧ.НоменклатураИзЭД =	Item.Description;
			Иначе
				СтрокаТЧ.НоменклатураИзЭД =	Неопределено;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.НоменклатураИзЭД) Тогда
				// для услуг в БП 3.0 номенклатура необязательна
				СтрокаТЧ.Номенклатура 		= ПолучитьНоменклатуру1С_ПоДаннымДД(Контрагент, "", "", СтрокаТЧ.НоменклатураИзЭД, МаркерКонфигурации <> "БП30");
				СтрокаТЧ.ЕдиницаИзмерения	= ПолучитьЕИ_1С_ПоДаннымДД(ПараметрыОпределенияЕИ, СтрокаТЧ.Номенклатура, Item.UnitCode, Item.UnitName);
			КонецЕсли;
			
			Если Item.Свойство("TaxRate") Тогда
				Item_TaxRate = Item.TaxRate;		
			Иначе
				Item_TaxRate = МетодСервера(, "ОпределитьСтавкуНДСПоУслуге", ?(ЗначениеЗаполнено(Item[SubtotalWithVatExcluded_Представление]), Item[SubtotalWithVatExcluded_Представление], 0), ?(ЗначениеЗаполнено(Item.Vat), Item.Vat, 0));	
			КонецЕсли;
						
			СтрокаТЧ.АртикулЭД		= "";
			СтрокаТЧ.ЭтоУслуга		= Истина;
			СтрокаТЧ.ЕдиницаИзЭД	= ?(ЗначениеЗаполнено(Item.UnitName), Item.UnitName, Неопределено);
			СтрокаТЧ.Количество		= ?(ЗначениеЗаполнено(Item.Quantity), МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Quantity), 0);
			СтрокаТЧ.Цена			= ?(ЗначениеЗаполнено(Item.Price), МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Price), 0);
			СтрокаТЧ.СтавкаНДС		= ПолучитьСтавкуНДС_1С_ПоДаннымДД(Item_TaxRate);
			СтрокаТЧ.СуммаНДС		= ?(ЗначениеЗаполнено(Item.Vat), МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item.Vat), 0);
			СтрокаТЧ.Всего			= ?(ЗначениеЗаполнено(Item[Subtotal_Представление]), МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", Item[Subtotal_Представление]), 0);
			ПересчитатьПоляСУчетомНДС(СтрокаТЧ, Item);
			
			XmlTorg12_Item = Новый Структура("Code,NomenclatureArticle,Name,UnitCode,UnitName,"+Subtotal_Представление+","+SubtotalWithVatExcluded_Представление+",TaxRate",
											 "", "", СтрокаТЧ.НоменклатураИзЭД, Item.UnitCode, Item.UnitName, Item[Subtotal_Представление], Item[SubtotalWithVatExcluded_Представление], Item_TaxRate);
			ДобавитьИнфоXmlTorg12_Item(СтрокаТЧ, XmlTorg12_Item);
			
			Возврат СтрокаТЧ; 
				
		КонецФункции
		
		&НаСервере
		Функция СоответствиеСтрокС_ГТД(DocumentItems, КонтентСвязанногоInvoice)
			
			Если КонтентСвязанногоInvoice = Неопределено Тогда
				Возврат Неопределено;	
			Иначе
				Если КонтентСвязанногоInvoice.Свойство("InvoiceTable") Тогда
					Возврат ПолучитьСоответствиеСтрокС_ГТД(DocumentItems, КонтентСвязанногоInvoice.InvoiceTable.Items);
				Иначе
					Возврат ПолучитьСоответствиеСтрокС_ГТД(DocumentItems, КонтентСвязанногоInvoice.Items);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецФункции
		
		&НаСервере
		Функция ПолучитьСоответствиеСтрокС_ГТД(itemsДокумента, ItemsСвязанногоInvoice)
			
			Если ItemsСвязанногоInvoice.Количество() > 0 Тогда
			
				ПустаяСтруктураItemInvoice= Новый Структура;
				Для каждого Элемент из ItemsСвязанногоInvoice[0] Цикл
					ПустаяСтруктураItemInvoice.Вставить(Элемент.Ключ, Неопределено);	
				КонецЦикла;
				
				СоответствиеГТД = Новый Соответствие;
				
				Для каждого СтрокаDocument из itemsДокумента Цикл
					СоответствиеГТД.Вставить(СтрокаDocument, Новый Структура("МассивСтрокиItemInvoice, ИтоговоеКоличество, ПустаяСтруктураItemInvoice", Новый Массив, 0, ПустаяСтруктураItemInvoice));
				КонецЦикла;
				
				НеОбработанныеItemsСвязанногоInvoice = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ItemsСвязанногоInvoice));
				
				Для каждого itemДокумента из itemsДокумента Цикл
					
					Если НеОбработанныеItemsСвязанногоInvoice.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если itemДокумента.Свойство("Net") Тогда // TovTorg
						DocumentItem_Quantity = МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", itemДокумента.Net);
					Иначе
						DocumentItem_Quantity = МетодСервера(, "ЧислоИзЗначенияОтКомпоненты", itemДокумента.Quantity);
					КонецЕсли; 
								
					СтруктураОтделенныеInvoiceItems = ОтделитьСтрокиВInvoiceДляNameИQuantity(НеОбработанныеItemsСвязанногоInvoice, itemДокумента.Product, DocumentItem_Quantity);
					ОтделенныеInvoiceItems 			= СтруктураОтделенныеInvoiceItems.МассивОтделенныхСтрок;
					ОбщееКоличествоВОтделенных 		= СтруктураОтделенныеInvoiceItems.ОбщееКоличествоВОтделенных;
					
					Если ОбщееКоличествоВОтделенных = DocumentItem_Quantity Тогда
						СоответствиеГТД.Вставить(itemДокумента, Новый Структура("МассивСтрокиItemInvoice, ИтоговоеКоличество", ОтделенныеInvoiceItems, ОбщееКоличествоВОтделенных));	
					КонецЕсли;
					
				КонецЦикла;
				
				Возврат СоответствиеГТД;
				
			КонецЕсли;
			
		КонецФункции
		
		&НаСервере
		Функция ОтделитьСтрокиВInvoiceДляNameИQuantity(НеОбработанныеItemsСвязанногоInvoice, DocumentItem_Name, DocumentItem_Quantity)
			
			МассивОтделенныхСтрок 	= Новый Массив;
			ОбщееКоличество 		= 0;
			
			Пока НеОбработанныеItemsСвязанногоInvoice.Количество()>0 Цикл	
				
				СтрокаInvoice = НеОбработанныеItemsСвязанногоInvoice[0]; 
				
				Если ОбщееКоличество >= DocumentItem_Quantity Тогда
					Прервать;
				КонецЕсли;
				Если НЕ СтрокиПодобны(СтрокаInvoice.Product, DocumentItem_Name) Тогда
					Прервать;			
				КонецЕсли;
				
				СтрокаОтделенных = Новый Структура;
				Для каждого КлючЗначение из СтрокаInvoice Цикл
					СтрокаОтделенных.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЦикла;
				МассивОтделенныхСтрок.Добавить(СтрокаОтделенных);
				
				ОбщееКоличество = ОбщееКоличество + Число(СтрокаОтделенных["Quantity"]);
				
				НеОбработанныеItemsСвязанногоInvoice.Удалить(0);
				
			КонецЦикла;
			
			Возврат Новый Структура("МассивОтделенныхСтрок, ОбщееКоличествоВОтделенных", МассивОтделенныхСтрок, ОбщееКоличество);
			
		КонецФункции
		
		&НаСервере
		Процедура СоздатьСтрокиТЧ_ПоСтрокамС_ГТД(ТабличнаяЧасть, СтрокаТЧ, СтруктураОтобранныеInvoiceItem, ЗаполнениеГТД)
			
			InvoiceItemsПоГТД 				= СтруктураОтобранныеInvoiceItem.МассивСтрокиItemInvoice;
			ИтоговоеКоличествоВОтделенных 	= СтруктураОтобранныеInvoiceItem.ИтоговоеКоличество; 
			
			Для каждого СтрокаInvoice из InvoiceItemsПоГТД Цикл
				
				НоваяСтрокаТЧ = Новый_СтруктураСтрокаТЧ();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ,, "Количество,СуммаНДС,Всего");

				НоваяСтрокаТЧ.Количество 	= СтрокаInvoice.Quantity;
				НоваяСтрокаТЧ.СуммаНДС 		= ?(ЗначениеЗаполнено(СтрокаТЧ.СуммаНДС) И ИтоговоеКоличествоВОтделенных <> 0, СтрокаТЧ.СуммаНДС*СтрокаInvoice.Quantity/ИтоговоеКоличествоВОтделенных, 0);
				НоваяСтрокаТЧ.Всего 		= ?(ИтоговоеКоличествоВОтделенных <> 0, СтрокаТЧ.Всего*СтрокаInvoice.Quantity/ИтоговоеКоличествоВОтделенных, 0);
				
				Если СтрокаInvoice.Свойство("CustomDeclarations") Тогда
					Если СтрокаInvoice.CustomDeclarations.Количество() = 1 Тогда
						СтранаКод 	= СтрокаInvoice.CustomDeclarations[0].CountryCode;
						НомерГТД 	= СтрокаInvoice.CustomDeclarations[0].DeclarationNumber; 
					КонецЕсли;
				Иначе
					СтранаКод 	= СтрокаInvoice.CountriesOfOrigin;
					НомерГТД 	= СтрокаInvoice.CustomsDeclarationNumbers;	
				КонецЕсли;
						
				ЗаполнитьСтрануНомерГТД_В_Строке(НоваяСтрокаТЧ, СтранаКод, НомерГТД, ЗаполнениеГТД);
				
				ТабличнаяЧасть.Добавить(НоваяСтрокаТЧ);
				
			КонецЦикла;
			
		КонецПроцедуры
		
		&НаСервере
Процедура ЗаполнитьСтрануНомерГТД_В_Строке(СтрокаТЧ, СтранаКод, НомерГТД, ЗаполнениеГТД)
	
	Если ЗначениеЗаполнено(СтранаКод)
		И (СтранаКод <> "643" ИЛИ ЗначениеЗаполнено(НомерГТД)) Тогда // Не Россия
		СтранаПроисхожденияСтруктурой 	= ПолучитьСтрануПоКлассификаторуИ_СправочникуСтранМира1С_ПоДаннымДД(СтранаКод);
		СтрокаТЧ.СтранаПроисхожденияЭД	= СтранаПроисхожденияСтруктурой.СтранаПроисхожденияПоКлассификатору;	
		СтрокаТЧ.СтранаПроисхождения	= СтранаПроисхожденияСтруктурой.СтранаПроисхожденияИзСправочникаСтранМира;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТЧ.СтранаПроисхождения) Тогда
		НомерГТД_Ссылка 	= ПолучитьНомерГТД_1С_ПоДаннымДД(НомерГТД, СтранаПроисхожденияСтруктурой.СтранаПроисхожденияИзСправочникаСтранМира);
		СтрокаТЧ.НомерГТД 	= НомерГТД_Ссылка;
	КонецЕсли;
	СтрокаТЧ.ГТД = НомерГТД;
	
	Если Не ЗаполнениеГТД Тогда
		ЗаполнениеГТД = ЗначениеЗаполнено(СтрокаТЧ.СтранаПроисхожденияЭД) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СтранаПроисхождения)
						ИЛИ ЗначениеЗаполнено(СтрокаТЧ.НомерГТД) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.ГТД);
	КонецЕсли;
	
КонецПроцедуры
		
		&НаСервере
		Процедура ПересчитатьПоляСУчетомНДС(СтрокаТЧ, Item)
			
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ.Сумма = ?(Item.Свойство("Subtotal"), Item.Subtotal, Item.Total);
			Иначе
				СтрокаТЧ.Сумма = ?(	Item.Свойство("SubtotalWithVatExcluded"), 
									Item.SubtotalWithVatExcluded, 
									Item.TotalWithVatExcluded	); 
			КонецЕсли;
				
			СтрокаТЧ.Цена =	?(СтрокаТЧ.Количество = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
			
		КонецПроцедуры
		
		&НаСервере
		Процедура ПересчитатьПоляСУчетомНДС_УПД(СтрокаТЧ, Item)
			
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ.Сумма = Item.Subtotal;
			Иначе
				СтрокаТЧ.Сумма = Item.SubtotalWithVatExcluded;
			КонецЕсли;
			
			СтрокаТЧ.Цена =	?(СтрокаТЧ.Количество = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
			
		КонецПроцедуры
		
		&НаСервере
		Процедура ДобавитьИнфоXmlTorg12_Item(СтрокаТЧ, XmlTorg12_Item)
			
			XmlTorg12_ItemСЗ = Новый СписокЗначений;
			XmlTorg12_ItemСЗ.Добавить(XmlTorg12_Item);
			
			СтрокаТЧ.XmlTorg12_Item = XmlTorg12_ItemСЗ;
			
		КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ Перед_созданием

	&НаКлиенте
	Процедура ПрочитатьКонтентВыбранныхДокументовПоступления()
		
		ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаСоздатьДокументыПоступления);
		ТекстСостояния	 = НСтр("ru = 'Чтение контента электронных документов'");
		ВсегоСтрок		 = ПомеченныеСтроки.Количество();
		
		// получаем контенты документов в виде структуры и заполняем их данными из Document
		Для Сч = 1 По ВсегоСтрок Цикл
			
			МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка", ТекстСостояния, Сч, ВсегоСтрок);
			
			ОбработкаПрерыванияПользователя();
			
			СтрокаТЧ = ПомеченныеСтроки[Сч-1];
			
			Если ЭтоФормализованныйАктОВыполненииРабот(СтрокаТЧ.DocumentType) И Не ЭтоПоступление Тогда
				СтрокаТЧ.СостояниеОбработки 	= "Ошибка";
				СтрокаТЧ.КомментарийКДействию 	= "Нельзя создавать документ возврата для акта выполненных работ!";
				СтрокаТЧ.Вкл = Ложь;
				Продолжить;
			КонецЕсли;
			
			Document 			= Платформа.ПараметрыКлиент.КонтекстРаботаССерверомДиадок.DiadocConnection.GetOrganizationById(СтрокаТЧ.BoxID).GetDocumentById(СтрокаТЧ.DocumentID);
			СтруктураКонтента	= ПолучитьКонтентДокументаСтруктурой(СтрокаТЧ, Document);
			
			СтрокаТЧ.КонтентДокумента = СтруктураКонтента;
			
			Если ЭтоФормализованныйТОРГ12(СтрокаТЧ.DocumentType) Тогда
				
				СвязанныйInvoice = МетодКлиента("Модуль_Клиент", "ПолучитьСвязанныйInvoice", Document);
				Если СвязанныйInvoice <> Неопределено Тогда
					
					Попытка
						
						ТипСвязанногоДокумента  = СвязанныйInvoice.Type;
												
						Если ТипСвязанногоДокумента = "Invoice" ИЛИ ТипСвязанногоДокумента = "InvoiceRevision" Тогда
							
							СтруктураКонтент = МетодКлиента("Модуль_Клиент", "ПолучитьProto", СвязанныйInvoice);
							СтруктураКонтентаСвязанногоInvoice = СтруктураКонтент.Контент; 
																					
							СтруктураКонтентаСвязанногоInvoice.Вставить("Type", ТипСвязанногоДокумента);
							СтрокаТЧ.КонтентСвязанногоInvoice = СтруктураКонтентаСвязанногоInvoice;
							
						КонецЕсли;
						
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
#КонецОбласти
	
#ОБЛАСТЬ При_создании
	
	&НаКлиенте
	Процедура СоздатьДокументыПоступления()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Создание документов поступления'"));
		
		СоздатьДокументыПоступленияНаСервере(СтруктураДействийПоДокументу);
		
		ОповеститьФормыОСозданииДокументовПоступления();
		
		ОбновитьФормуПослеПроведенияДокументовПоступления();
		
		МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Создание документов поступления завершено'"), УникальныйИдентификатор);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СоздатьДокументыПоступленияНаСервере(Знач ВозможныеДействия)
		
		Если ЗначениеЗаполнено(АдресНоменклатураДляСопоставления) Тогда
			УдалитьИзВременногоХранилища(АдресНоменклатураДляСопоставления);
			АдресНоменклатураДляСопоставления = "";
		КонецЕсли;
						
		ПараметрыПроверкиДоговораСоглашения = ИспользоватьДоговорыСоглашенияСПоставщиками();
				
		НайденныеСтрокиСоздатьДокументы = ПомеченныеСтрокиТаблицы(ТаблицаСоздатьДокументыПоступления);
		
		Для каждого СтрокаТаблицы Из НайденныеСтрокиСоздатьДокументы Цикл
			
			BoxID 				= СтрокаТаблицы.BoxID;
			DocumentId 			= СтрокаТаблицы.DocumentId;
			КонтентДокумента	= СтрокаТаблицы.КонтентДокумента;
			
			Попытка
			
				// 1. получим данные для создания документа в 1С по данным контентов
				ДанныеЭД = ДанныеЭлектронногоДокумента(BoxID, DocumentId, КонтентДокумента);
				МетодСервера("Модуль_ИнтеграцияУниверсальный", "ДополнитьОписаниеЭлектронногоДокументаДаннымиИБ", ДанныеЭД);
				
				ПослеЗаполненияДанныхЭД(ДанныеЭД, BoxID);
																					
				ДопПараметрыСоздания = ДополнительныеПараметрыСозданияДокумента(ДанныеЭД, 
																				СтрокаТаблицы.AttachmentVersion,
																				СтрокаТаблицы.КонтентДокумента);
								
				// 2. проверим заполнение необходимых данных
				РезультатПроверки = МожноСоздаватьДокумент(ДанныеЭД, ДопПараметрыСоздания, ПараметрыПроверкиДоговораСоглашения);
												
				Если НЕ РезультатПроверки.Разрешено Тогда
					
					СтрокаТаблицы.Вкл = Ложь;
					
					ЗаполнитьСостояниеИКомментарийПослеПроверки(РезультатПроверки,
																ВозможныеДействия,
																СтрокаТаблицы.СостояниеОбработки,
																СтрокаТаблицы.КомментарийКДействию);
					
					Продолжить;
					
				КонецЕсли;
				
				// 3. создадим документ
				НовыйДок = НовыйДокументИнформационнойБазы(ДанныеЭД, ДопПараметрыСоздания);
					
				ПараметрыПМ = Новый Структура;
				ПараметрыПМ.Вставить("ДокументОбъект"	, НовыйДок);
				ПараметрыПМ.Вставить("СтруктураКонтента", КонтентДокумента);
				ПараметрыПМ.Вставить("BoxID"			, BoxID);
				ПараметрыПМ.Вставить("DocumentId"		, DocumentId);
				МетодСервера(, "ОбработкаСобытияПодключаемогоМодуля", "ПослеЗаполненияНовогоДокументаПоступления", ПараметрыПМ);
				
				РезультатСоздания = ЗафиксироватьНовыйДокументВИнформационнойБазе(НовыйДок, BoxID, DocumentId);
												
				СтрокаТаблицы.ПервичныйДокумент = РезультатСоздания.Ссылка;
				СтрокаТаблицы.Создан 			= Истина;
				СтрокаТаблицы.Проведен			= РезультатСоздания.Проведен;
								
				Если НЕ РезультатСоздания.Проведен Тогда
					СтрокаТаблицы.Вкл = Ложь;										
					СтрокаТаблицы.СостояниеОбработки 	= ВозможныеДействия.ПроведитеДокумент;
					СтрокаТаблицы.КомментарийКДействию 	= ВозможныеДействия.ПроведитеДокумент;
				КонецЕсли;

			Исключение
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки	= ВозможныеДействия.ОшибкаОбработки;
				СтрокаТаблицы.КомментарийКДействию 	= ОписаниеОшибки();
								
			КонецПопытки;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КэшФормы().НоменклатураДляСопоставления) Тогда
			АдресНоменклатураДляСопоставления = ПоместитьВоВременноеХранилище(КэшФормы().НоменклатураДляСопоставления, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьСостояниеИКомментарийПослеПроверки(	РезультатПроверки,
															ВозможныеДействия,
															СостояниеОбработки,
															КомментарийКДействию	)
															
		Если РезультатПроверки.Комментарий = "Заполните данные" Тогда
						
			СостояниеОбработки		= ВозможныеДействия.ЗаполнитеДанные;
			КомментарийКДействию 	= ВозможныеДействия.ЗаполнитеДанные;
			
		Иначе
			
			СостояниеОбработки		= ВозможныеДействия.ОшибкаОбработки;
			КомментарийКДействию 	= РезультатПроверки.Комментарий;
			
		КонецЕсли;
															
	КонецПроцедуры
	
	// Записывает и проводит документ в ИБ. Сопоставляет документу 1С электронный документ
	//
	// Параметры:
	//	НовыйДок	- ДокументОбъект	- документ 1С еще не записанный в ИБ.
	//	BoxID		- Строка			- идентификатор организации(ящика) в сервисе Диадок
	//	DocumentId	- Строка			- идентификатор документа в ящике организации
	//
	// Возвращаемое значение:
	//	Структура	- см. тело метода
	&НаСервере
	Функция ЗафиксироватьНовыйДокументВИнформационнойБазе(НовыйДок, BoxID, DocumentId)
		
		Результат = Новый Структура;
		Результат.Вставить("Ссылка"		, Неопределено);
		Результат.Вставить("Проведен"	, Ложь);
		
		НачатьТранзакцию();
		Попытка
			НовыйДок.Записать();
			СопоставитьЭлектронныйДокументДокументу1СНаСервере(НовыйДок.Ссылка, DocumentId, BoxID);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			Если НовыйДок.ЭтоНовый() Тогда
				ИмяСобытия = "Диадок.СозданиеДокумента.ОшибкаЗаписиНовогоДокумента";
			Иначе
				ИмяСобытия = "Диадок.СозданиеДокумента.ОшибкаСопоставления";
			КонецЕсли;
			
			ТекстСообщения = ОписаниеОшибки();
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		Результат.Ссылка = НовыйДок.Ссылка;
		
		Попытка
			НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
			Результат.Проведен = Истина;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Диадок.СозданиеДокумента.ОшибкаПроведения", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецПопытки;
		
		Возврат Результат;
		
	КонецФункции
			
	// Обертка. Возвращает описание электронного документа в виде структуры 
	//
	// Параметры:
	//	BoxID		- Строка	- идентификатор организации в сервисе Диадок
	//	DocumentId	- Строка	- идентификатор документа в организации
	//	Контент		- Структура - см. ПолучитьКонтекстДокументаСтруктурой
	//
	// Возвращаемое значение:
	//	Структура
	&НаСервере
	Функция ДанныеЭлектронногоДокумента(BoxID, DocumentId, Контент)
		
		ИдентификаторДокумента 	= ПолныйИдентификаторДокумента(DocumentId, BoxID);
							
		Результат = МетодСервера(	"Модуль_ИнтеграцияУниверсальный", 
									"ДанныеЭлектронногоДокумента",
									ИдентификаторДокумента,
									Контент	);
		
		Возврат Результат;
		
	КонецФункции // ДанныеЭлектронногоДокумента()
	
	// Метод предназначен для дозаполнения структуры ДанныеЭД
	//
	// Параметры:
	//	ДанныеЭД	- Структура	- см. метод "ДанныеЭлектронногоДокумента"
	//	BoxID		- Строка	- идентификатор организации в сервисе Диадок
	&НаСервере
	Процедура ПослеЗаполненияДанныхЭД(ДанныеЭД, BoxID)
		
		ТипыКонтента = МетодСервера(, "ТипыКонтента");
		
		Если ДанныеЭД.ТипЭД = ТипыКонтента.AcceptanceCertificateSellerContent Тогда
			
			// контент акта в 172@ не содержит данных о покупателе, поэтому необходимо
			// дозаполнить ДанныеЭД
			
			Покупатель = МетодСервера(, "BoxID_2_Организация", BoxID);
																							
			Если ЗначениеЗаполнено(Покупатель) Тогда
				
				ДанныеЭД.Покупатель.Ссылка = Покупатель;
				ДанныеЭД.Покупатель.ИдентификаторОрганизации = BoxID;
																					
			КонецЕсли;
																
		КонецЕсли;
		
	КонецПроцедуры
	
	// Коллекция данных, необходимых для создания документа, но не предусмотренных в ДанныеЭД
	//
	// Параметры:
	//	ДанныеЭД			- Структура	- см. метод "ДанныеЭлектронногоДокумента"
	//  AttachmentVersion	- Строка	- идентификатор версии документа 
	//  КонтентДокумента	- Структура	- титул продавца
	//
	// Возвращаемое значение:
	//	Структура
	&НаСервере
	Функция ДополнительныеПараметрыСозданияДокумента(ДанныеЭД, AttachmentVersion, КонтентДокумента)
		
		Результат = Новый Структура;
		
		Результат.Вставить("ТолькоТовары"	, Ложь);
		Результат.Вставить("ТолькоУслуги"	, Ложь);
		Результат.Вставить("Договор"		, Неопределено);
		Результат.Вставить("Соглашение"		, Неопределено);
		
		ПризнакиТоварУслуга = ЕстьТоварыЕстьУслуги(ДанныеЭД);
		
		Результат.ТолькоТовары = ПризнакиТоварУслуга.ЕстьТовары И НЕ ПризнакиТоварУслуга.ЕстьУслуги;
		Результат.ТолькоУслуги = НЕ ПризнакиТоварУслуга.ЕстьТовары И ПризнакиТоварУслуга.ЕстьУслуги;
		
		Продавец 	= ДанныеЭД.Продавец.Ссылка;
		Покупатель 	= СвойствоСтруктуры(ДанныеЭД.Покупатель, "Ссылка");
		
		Результат.Договор = ПолучитьДоговор1С_ПоДаннымДД(AttachmentVersion, КонтентДокумента, Покупатель, Продавец);
		
		МаркерКонфигурации = Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		Если МаркерКонфигурации = "УТ11" И ЗначениеЗаполнено(Продавец) Тогда
			Результат.Соглашение = МетодСервера(, "ПолучитьСоглашениеКонтрагента", Покупатель, Продавец);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ДополнительныеПараметрыСозданияДокумента()
	
	// Создает новый документ объект и заполняет его данными
	//
	// Параметры:
	//	ДанныеЭД				- Структура	- см. результат метода "ДанныеЭлектронногоДокумента"
	//	ДопПараметрыСоздания	- Структура	- дополнительные данные, необходимые для создания документа в информационной базе
	&НаСервере
	Функция НовыйДокументИнформационнойБазы(ДанныеЭД, ДопПараметрыСоздания)
		
		МаркерКонфигурации = Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		ИмяДокумента = ИмяДокументаВИнформационнойБазе(МаркерКонфигурации, ДопПараметрыСоздания.ТолькоТовары);
		
		Если НЕ ЗначениеЗаполнено(ИмяДокумента) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось определить имя создаваемого документа в текущей конфигурации 1С'");
		КонецЕсли;
		
		Если МожноИспользоватьНовуюАрхитектуруСоздания(ИмяДокумента) Тогда
			
			ПараметрыСоздания = Новый Структура;
			Если ЗначениеЗаполнено(ВидОперацииСоздаваемогоПоступления) Тогда
				ПараметрыСоздания.Вставить("ВидОперации", ВидОперацииСоздаваемогоПоступления);
			КонецЕсли;
			
			НовыйДокумент = МетодСервера(	"Модуль_ИнтеграцияУниверсальный", 
											"НовыйДокументИнформационнойБазы", 
											ДанныеЭД, 
											"Документ." + ИмяДокумента,
											ПараметрыСоздания);
			
		Иначе
			
			НовыйДокумент = СтарыйАлгоритмСозданияДокумента(ДанныеЭД, ДопПараметрыСоздания, ИмяДокумента, МаркерКонфигурации);
			
		КонецЕсли;
		
		Возврат НовыйДокумент;
		
	КонецФункции // НовыйДокументИнформационнойБазы()
	
	// Обертка. Возвращает признак, говорящий по какой архитектурной ветке будем двигаться при создании документа
	//
	// Параметры:
	//	ИмяДокумента		- Строка	- имя документа в текущей конфигурации
	//
	// Возвращаемое значение:
	//	Булево	- Истина, если возможно
	&НаСервере
	Функция МожноИспользоватьНовуюАрхитектуруСоздания(ИмяДокумента)
		
		Результат = МетодСервера(	"Модуль_ИнтеграцияУниверсальный",
									"МожноИспользоватьНовуюАрхитектуруСоздания",
									ИмяДокумента,
									ВидОперацииСоздаваемогоПоступления	);
						
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Функция СтарыйАлгоритмСозданияДокумента(ДанныеЭД, ДопПараметрыСоздания, ИмяДокумента, МаркерКонфигурации)
		
		НовыйДок = Документы[ИмяДокумента].СоздатьДокумент();
						
		ПараметрыШапки = ПараметрыЗаполненияШапкиДокументаПоступления(	ИмяДокумента,
																		ДопПараметрыСоздания.Договор,
																		МаркерКонфигурации	);
		ЗаполнитьШапкуДокумента(НовыйДок, ДанныеЭД, ДопПараметрыСоздания, ПараметрыШапки);
				
		ЗаполнитьТабличнуюЧастьДокумента(НовыйДок, ДанныеЭД, ДопПараметрыСоздания);
		
		Возврат НовыйДок;
		
	КонецФункции
		
	// Возвращает, имя создаваемого документа в текущей конфигурации
	//
	// Параметры:
	//	МаркерКонфигурации	- Строка	- идентификатор конфигурации
	//	ТолькоТовары		- Булево	- признак того, что в товарной части электронного документа присутствуют только товары
	//
	// Возвращаемое значение:
	//	Строка
	&НаСервере
	Функция ИмяДокументаВИнформационнойБазе(МаркерКонфигурации, ТолькоТовары = Ложь)
						
		Если 	МаркерКонфигурации = "БП30"
			ИЛИ МаркерКонфигурации = "УТ11" Тогда
			
			Если ЭтоПоступление Тогда
				Результат = МетодСервера(, "ПредставлениеДокументов").ПоступлениеТоваровУслуг;
			Иначе
				Результат = МетодСервера(, "ПредставлениеДокументов").ВозвратТоваровОтПокупателя;
			КонецЕсли;
							
		ИначеЕсли МаркерКонфигурации = "БГУ20" Тогда
			
			Если ТолькоТовары Тогда
				Результат = "ПоступлениеМЗ";
			Иначе
				Результат = "ПоступлениеУслугРабот";
			КонецЕсли;
									
		ИначеЕсли МаркерКонфигурации = "УНФ16" Тогда
			
			Результат = МетодСервера(, "ПредставлениеДокументов").ПоступлениеТоваровУслуг;
			
		Иначе
			
			Результат = "";
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ИмяДокументаВИнформационнойБазе()
			
	&НаСервере
	Функция ПараметрыЗаполненияШапкиДокументаПоступления(ИмяДокумента, ДоговорКонтрагента, МаркерКонфигурации)
		
		Результат = Новый Структура;
						
		ЕстьРеквизитБС_Организации = ЕстьРеквизитБС_Организации(ИмяДокумента);
		Результат.Вставить("ЕстьРеквизитБС_Организации", ЕстьРеквизитБС_Организации);
		
		ЕстьРеквизитБС_Контрагента = ЕстьРеквизитБС_Контрагента(ИмяДокумента);
		Результат.Вставить("ЕстьРеквизитБС_Контрагента", ЕстьРеквизитБС_Контрагента);
				
		// Пока оставляем для совместимости 
		ДопДанныеССервера = ПолучитьДопДанныеДляСозданияНакладной(ДоговорКонтрагента, МаркерКонфигурации = "УНФ16");
		
		Результат.Вставить("ТипЦен");
		Результат.Вставить("ВалютаРасчетов");
		Результат.Вставить("УчетВалютныхОпераций");
		
		ЗаполнитьЗначенияСвойств(Результат, ДопДанныеССервера);		
				
		Возврат Результат;
		
	КонецФункции
	
	&НаСервере
	Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания, ПараметрыЗаполненияШапки)
		
		МаркерКонфигурации = Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
		
		ДокументОбъект.Заполнить(Неопределено);
		
		Если МаркерКонфигурации = "УТ11" Тогда 
			
			ЗаполнитьШапкуДокумента_УТ11(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания, ПараметрыЗаполненияШапки);
																								
		ИначеЕсли МаркерКонфигурации = "БГУ20" Тогда
		
			ЗаполнитьШапкуДокумента_БГУ20(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания);
																		
		ИначеЕсли МаркерКонфигурации = "УНФ16" Тогда
			
			ЗаполнитьШапкуДокумента_УНФ16(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания, ПараметрыЗаполненияШапки);
														
		Иначе
			
			ЗаполнитьШапкуДокумента_БП30(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания);
			
		КонецЕсли;
				
	КонецПроцедуры
	
		&НаСервере
		Процедура ЗаполнитьШапкуДокумента_УТ11(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания, ПараметрыЗаполненияШапки)
			
			ДокументОбъект.Организация 		= СвойствоСтруктуры(ДанныеЭД.Покупатель, "Ссылка");
			ДокументОбъект.Дата		   		= ТекущаяДата();
			
			Если ЭтоПоступление Тогда // если не возврат
										
				ДокументОбъект.ДатаВходящегоДокумента	= СвойствоСтруктуры(ДанныеЭД, "Дата");
				ДокументОбъект.НомерВходящегоДокумента	= СвойствоСтруктуры(ДанныеЭД, "Номер");
				
			Иначе
				
				Если ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ПокупателемВыставляетсяСчетФактураНаВозврат") Тогда
					ДокументОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОбъект.ЦенаВключаетНДС = СуммаВключаетНДС;
			
			Партнер	= СвойствоСтруктуры(ДанныеЭД.Партнер, "Ссылка");
													
			Если ЗначениеЗаполнено(Партнер) Тогда
					
				ДокументОбъект.Партнер		= Партнер;
				ДокументОбъект.Контрагент	= СвойствоСтруктуры(ДанныеЭД.Продавец, "Ссылка");
				
			КонецЕсли;
			
			ДокументОбъект.ХозяйственнаяОперация = ВидОперацииСоздаваемогоПоступления;
									
			ДокументОбъект.Соглашение = ДопПараметрыСоздания.Соглашение;
			
			Если ЗначениеЗаполнено(ДопПараметрыСоздания.Договор) Тогда
				
				ДокументОбъект.Договор = ДопПараметрыСоздания.Договор;
				
				ЗаполнитьБанковскиеСчетаПоДаннымДоговора_УТ11(	ДокументОбъект,
																ДопПараметрыСоздания.Договор,
																ПараметрыЗаполненияШапки.ЕстьРеквизитБС_Организации,
																ПараметрыЗаполненияШапки.ЕстьРеквизитБС_Контрагента	);
			КонецЕсли;
												
		КонецПроцедуры
						
		&НаСервере
		Процедура ЗаполнитьБанковскиеСчетаПоДаннымДоговора_УТ11(ДокументОбъект, 
																Договор,
																ЗаполнитьБС_Организации,
																ЗаполнитьБС_Контрагента)
			
			ДанныеДоговора = ПолучитьДанныеДоговора(Договор);
			
			Если ЗаполнитьБС_Организации И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчет) Тогда
				
				ДокументОбъект.БанковскийСчетОрганизации = ДанныеДоговора.БанковскийСчет;
				
			КонецЕсли;
			
			Если ЗаполнитьБС_Контрагента И ЗначениеЗаполнено(ДанныеДоговора.БанковскийСчетКонтрагента) Тогда
				
				ДокументОбъект.БанковскийСчетКонтрагента = ДанныеДоговора.БанковскийСчетКонтрагента;
				
			КонецЕсли;
			
		КонецПроцедуры
		
		&НаСервере
		Процедура ЗаполнитьШапкуДокумента_БГУ20(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания)
			
			ДокументОбъект.Организация 		= СвойствоСтруктуры(ДанныеЭД.Покупатель, "Ссылка");
			ДокументОбъект.Дата		   		= ТекущаяДата();
			
			ДокументОбъект.ДатаПервичногоДокумента	= СвойствоСтруктуры(ДанныеЭД, "Дата");
			ДокументОбъект.НомерПервичногоДокумента = СвойствоСтруктуры(ДанныеЭД, "Номер");
				
			ДокументОбъект.СуммаВключаетНДС	= СуммаВключаетНДС;
			
			ТипЦен = ПолучитьТипЦенПоДоговору(ДопПараметрыСоздания.Договор);
			Если ТипЦен <> Неопределено Тогда
				ДокументОбъект.ТипЦен = ТипЦен;
			КонецЕсли;
			
			ДокументОбъект.Контрагент =	СвойствоСтруктуры(ДанныеЭД.Продавец, "Ссылка");
			
			ДокументОбъект.Договор = ДопПараметрыСоздания.Договор;
													
			Если ВидОперацииСоздаваемогоПоступления = "ПоступлениеМЗ" Тогда
				
				ДокументОбъект.СчетУчета = МетодСервера("Модуль_ИнтеграцияБГУ20", "ПолучитьСчетПоКоду", "105.00");
				
			КонецЕсли;	
					
		КонецПроцедуры
		
		&НаСервере
		Процедура ЗаполнитьШапкуДокумента_УНФ16(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания, ПараметрыЗаполненияШапки)
			
			ДокументОбъект.Организация 		= СвойствоСтруктуры(ДанныеЭД.Покупатель, "Ссылка");
			ДокументОбъект.Дата		   		= ТекущаяДата();
			
			Если ЭтоПоступление Тогда // если не возврат
										
				ДокументОбъект.ДатаВходящегоДокумента	= СвойствоСтруктуры(ДанныеЭД, "Дата");
				ДокументОбъект.НомерВходящегоДокумента	= СвойствоСтруктуры(ДанныеЭД, "Номер");
				
			Иначе
				
				Если ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ПокупателемВыставляетсяСчетФактураНаВозврат") Тогда
					ДокументОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОбъект.СуммаВключаетНДС	= СуммаВключаетНДС;
			
			ДокументОбъект.Контрагент =	СвойствоСтруктуры(ДанныеЭД.Продавец, "Ссылка");
														
			ДокументОбъект.ВидОперации = ВидОперацииСоздаваемогоПоступления;
									
			ДокументОбъект.Кратность = ДанныеЭД.Кратность;
			
			Если ПараметрыЗаполненияШапки.ТипЦен <> Неопределено Тогда
				ДокументОбъект.ТипЦен = ПараметрыЗаполненияШапки.ТипЦен;
			КонецЕсли;
			
			ДокументОбъект.Договор = ДопПараметрыСоздания.Договор;
															
		КонецПроцедуры
		
		&НаСервере
		Процедура ЗаполнитьШапкуДокумента_БП30(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания)
			
			ДокументОбъект.Организация 		= СвойствоСтруктуры(ДанныеЭД.Покупатель, "Ссылка");
			ДокументОбъект.Дата		   		= ТекущаяДата();
			
			Если ЭтоПоступление Тогда // если не возврат
										
				ДокументОбъект.ДатаВходящегоДокумента	= СвойствоСтруктуры(ДанныеЭД, "Дата");
				ДокументОбъект.НомерВходящегоДокумента	= СвойствоСтруктуры(ДанныеЭД, "Номер");
				
				ДокументОбъект.СпособЗачетаАвансов = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически");
				
			Иначе
											
				Если ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ПокупателемВыставляетсяСчетФактураНаВозврат") Тогда
					ДокументОбъект.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОбъект.ВидОперации = ВидОперацииСоздаваемогоПоступления;
			
			ДокументОбъект.СуммаВключаетНДС	= СуммаВключаетНДС;
			
			ДокументОбъект.Контрагент =	СвойствоСтруктуры(ДанныеЭД.Продавец, "Ссылка");
													
			ДокументОбъект.КратностьВзаиморасчетов = ДанныеЭД.Кратность;
			
			ТипЦен = ПолучитьТипЦенПоДоговору(ДопПараметрыСоздания.Договор);
			Если ТипЦен <> Неопределено Тогда
				ДокументОбъект.ТипЦен = ТипЦен;
			КонецЕсли;
			
			ДокументОбъект.ДоговорКонтрагента = ДопПараметрыСоздания.Договор;
													
			УстановитьСчетаРасчетовСКонтрагентом(ДокументОбъект);
									
		КонецПроцедуры
					
	// Заполняет табличную часть документа 1С данными электронного документа
	//
	// Параметры:
	//	ДокументОбъект			- ДокументОбъект	- заполняемый документ 1С
	//	ДанныеЭД				- Структура			- данные из электронного документа
	//	ДопПараметрыСоздания	- Структура			- параметры, влияющие на алгоритм запонения табличной части			
	//
	&НаСервере
	Процедура ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, ДанныеЭД, ДопПараметрыСоздания)
		
		МаркерКонфигурации = Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
								
		Для каждого ЭлементТоварнойЧасти Из ДанныеЭД.ТоварнаяЧасть Цикл
			
			Если МаркерКонфигурации = "УТ11" Тогда 
				
				ДобавитьСтрокуТЧДокумента_УТ11(ДокументОбъект, ЭлементТоварнойЧасти);
																				
			ИначеЕсли МаркерКонфигурации = "БГУ20" Тогда
				
				ДобавитьСтрокуТЧДокумента_БГУ20(ДокументОбъект, ЭлементТоварнойЧасти, ДопПараметрыСоздания.ТолькоТовары);
																
			ИначеЕсли МаркерКонфигурации = "УНФ16" Тогда
				
				ДобавитьСтрокуТЧДокумента_УНФ16(ДокументОбъект, ЭлементТоварнойЧасти, ДопПараметрыСоздания.ТолькоУслуги);
												
			Иначе // это БП30
				
				ДобавитьСтрокуТЧДокумента_БП30(ДокументОбъект, ЭлементТоварнойЧасти);
												
			КонецЕсли;
			
		КонецЦикла;
								
	КонецПроцедуры // ЗаполнитьТабличнуюЧастьДокумента()
	
		// Добавляет строку в табличную часть документа 1С и заполняет ее данными электронного документа
		//
		// Параметры:
		//	ДокументОбъект			- ДокументОбъект	- заполняемый документ 1С
		//	ЭлементТоварнойЧастиЭД	- Структура			- элемент товарной части ДанныеЭД
		//
		&НаСервере
		Процедура ДобавитьСтрокуТЧДокумента_БП30(ДокументОбъект, ЭлементТоварнойЧастиЭД)
			
			Если Номенклатура1С_ЯвляетсяУслугой(ЭлементТоварнойЧастиЭД.Номенклатура.Номенклатура) Тогда
				СтрокаТЧ_Док = ДокументОбъект.Услуги.Добавить();
			Иначе
				СтрокаТЧ_Док = ДокументОбъект.Товары.Добавить();
			КонецЕсли;
				
			ЗаполнитьСтрокуТЧДокумента_БП30(СтрокаТЧ_Док, ЭлементТоварнойЧастиЭД);
				
			ЗаполнитьСчетаУчетаНоменклатурыБП(ДокументОбъект, СтрокаТЧ_Док, ЭлементТоварнойЧастиЭД);
				
		КонецПроцедуры // ДобавитьСтрокуТЧДокумента_БП30()
	
		// Заполняет строку табличной части документа 1С данными товарной части электронного документа.
		// Только для конфигурации БП 3.0
		//
		// Параметры:
		//	СтрокаТЧ_Док1С			- ДокументТабличнаяЧастьСтрока	- строка табличной части документа 1С
		//	ЭлементТоварнойЧастиЭД	- Структура						- элемент товарной части ДанныеЭД
		//
		&НаСервере
		Процедура ЗаполнитьСтрокуТЧДокумента_БП30(СтрокаТЧ_Док1С, ЭлементТоварнойЧастиЭД)
			
			СтрокаТЧ_Док1С.Номенклатура	= ЭлементТоварнойЧастиЭД.Номенклатура.Номенклатура;
			СтрокаТЧ_Док1С.Количество	= ЭлементТоварнойЧастиЭД.Количество;
			СтрокаТЧ_Док1С.СтавкаНДС	= ЭлементТоварнойЧастиЭД.СтавкаНДС.Ссылка;
			СтрокаТЧ_Док1С.СуммаНДС		= ЭлементТоварнойЧастиЭД.СуммаНДС;
			
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаСНДС;
			Иначе
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаБезНДС; 
			КонецЕсли;
						
			Если СтрокаТЧ_Док1С.Количество = 0 Тогда
				СтрокаТЧ_Док1С.Цена		= СтрокаТЧ_Док1С.Сумма;
			Иначе
				СтрокаТЧ_Док1С.Цена		= СтрокаТЧ_Док1С.Сумма / СтрокаТЧ_Док1С.Количество;
			КонецЕсли;
			
			Если ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ_Док1С, "ЕдиницаИзмерения") Тогда
				СтрокаТЧ_Док1С.ЕдиницаИзмерения	= ЭлементТоварнойЧастиЭД.ЕдиницаИзмерения.Ссылка;
			КонецЕсли;
			
			Если ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ_Док1С, "Содержание") Тогда
				
				Если ЗначениеЗаполнено(ЭлементТоварнойЧастиЭД.НоменклатураПоставщика.Описание) Тогда
					СтрокаТЧ_Док1С.Содержание = ЭлементТоварнойЧастиЭД.НоменклатураПоставщика.Описание;
				Иначе
					СтрокаТЧ_Док1С.Содержание = ЭлементТоварнойЧастиЭД.НоменклатураПоставщика.Наименование;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецПроцедуры // ЗаполнитьСтрокуТЧДокумента_БП30()
		
		// Добавляет строку в табличную часть документа 1С и заполняет ее данными электронного документа
		//
		// Параметры:
		//	ДокументОбъект			- ДокументОбъект	- заполняемый документ 1С
		//	ЭлементТоварнойЧастиЭД	- Структура			- элемент товарной части ДанныеЭД
		//
		&НаСервере
		Процедура ДобавитьСтрокуТЧДокумента_УТ11(ДокументОбъект, ЭлементТоварнойЧастиЭД)
			
			СтрокаТЧ_Док1С = ДокументОбъект.Товары.Добавить();
			
			ЗаполнитьСтрокуТЧДокумента_УТ11(СтрокаТЧ_Док1С, ЭлементТоварнойЧастиЭД);
			
			МаркерКонфигурации 		= Объект.ПараметрыКлиентСервер.МаркерКонфигурации;
			
			ИмяДокумента 			= ИмяДокументаВИнформационнойБазе(МаркерКонфигурации);
			ЕстьРеквизитТЧ_Склад 	= ЕстьРеквизитТЧ_Склад(ИмяДокумента, МаркерКонфигурации);
			
			Если ЕстьРеквизитТЧ_Склад Тогда
				СтрокаТЧ_Док1С.Склад = ДокументОбъект.Склад;
			КонецЕсли;
			
		КонецПроцедуры // ДобавитьСтрокуТЧДокумента_УТ11()
		
		// Заполняет строку табличной части документа 1С данными товарной части электронного документа.
		// Только для конфигураций УТКАЕРП
		//
		// Параметры:
		//	СтрокаТЧ_Док1С			- ДокументТабличнаяЧастьСтрока	- строка табличной части документа 1С
		//	ЭлементТоварнойЧастиЭД	- Структура						- элемент товарной части ДанныеЭД
		//
		&НаСервере
		Процедура ЗаполнитьСтрокуТЧДокумента_УТ11(СтрокаТЧ_Док1С, ЭлементТоварнойЧастиЭД)
									
			СтрокаТЧ_Док1С.Номенклатура 		= ЭлементТоварнойЧастиЭД.Номенклатура.Номенклатура;
			СтрокаТЧ_Док1С.Характеристика		= ЭлементТоварнойЧастиЭД.Номенклатура.Характеристика;
			СтрокаТЧ_Док1С.Упаковка				= ЭлементТоварнойЧастиЭД.Номенклатура.Упаковка;
			СтрокаТЧ_Док1С.Количество			= ЭлементТоварнойЧастиЭД.Количество;
			СтрокаТЧ_Док1С.КоличествоУпаковок	= ЭлементТоварнойЧастиЭД.Количество;
			
			СтрокаТЧ_Док1С.СтавкаНДС			= ЭлементТоварнойЧастиЭД.СтавкаНДС.Ссылка;
			СтрокаТЧ_Док1С.СуммаНДС				= ЭлементТоварнойЧастиЭД.СуммаНДС;
			
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаСНДС;
			Иначе
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаБезНДС;
			КонецЕсли;
						
			Если СтрокаТЧ_Док1С.Количество = 0 Тогда
				СтрокаТЧ_Док1С.Цена				= СтрокаТЧ_Док1С.Сумма;
			Иначе
				СтрокаТЧ_Док1С.Цена				= СтрокаТЧ_Док1С.Сумма / СтрокаТЧ_Док1С.Количество;
			КонецЕсли;
			
			СтрокаТЧ_Док1С.СуммаСНДС			= ЭлементТоварнойЧастиЭД.СуммаСНДС;
			
			Если ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ_Док1С, "НоменклатураПоставщика") Тогда
				СтрокаТЧ_Док1С.НоменклатураПоставщика = ЭлементТоварнойЧастиЭД.НоменклатураПоставщика.Ссылка;
			КонецЕсли;
															
		КонецПроцедуры // ЗаполнитьСтрокуТЧДокумента_УТ11()
		
		// Добавляет строку в табличную часть документа 1С и заполняет ее данными электронного документа
		//
		// Параметры:
		//	ДокументОбъект			- ДокументОбъект	- заполняемый документ 1С
		//	ЭлементТоварнойЧастиЭД	- Структура			- элемент товарной части ДанныеЭД
		//	ТолькоУслуги			- Булево			- Истина, если в ТЧ содержатся только услуги
		//
		&НаСервере
		Процедура ДобавитьСтрокуТЧДокумента_УНФ16(ДокументОбъект, ЭлементТоварнойЧастиЭД, ТолькоУслуги)
			
			ВыбранВидОперацииВозвратОтПлокупателя = (ДокументОбъект.ВидОперации = 
														ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПокупателя"));
								
			Если ТолькоУслуги И НЕ ВыбранВидОперацииВозвратОтПлокупателя Тогда
				СтрокаТЧ_Док1С = ДокументОбъект.Расходы.Добавить();
			Иначе
				СтрокаТЧ_Док1С = ДокументОбъект.Запасы.Добавить();
			КонецЕсли;
			
			ЗаполнитьСтрокуТЧДокумента_УНФ16(СтрокаТЧ_Док1С, ЭлементТоварнойЧастиЭД);
			
		КонецПроцедуры // ДобавитьСтрокуТЧДокумента_УНФ16()
		
		// Заполняет строку табличной части документа 1С данными товарной части электронного документа.
		// Только для конфигурации УНФ 1.6
		//
		// Параметры:
		//	СтрокаТЧ_Док1С			- ДокументТабличнаяЧастьСтрока	- строка табличной части документа 1С
		//	ЭлементТоварнойЧастиЭД	- Структура						- элемент товарной части ДанныеЭД
		//
		&НаСервере
		Процедура ЗаполнитьСтрокуТЧДокумента_УНФ16(СтрокаТЧ_Док1С, ЭлементТоварнойЧастиЭД)
			
			СтрокаТЧ_Док1С.Номенклатура 	= ЭлементТоварнойЧастиЭД.Номенклатура.Номенклатура;
			СтрокаТЧ_Док1С.ЕдиницаИзмерения	= ЭлементТоварнойЧастиЭД.ЕдиницаИзмерения.Ссылка;
			
			Если ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ_Док1С, "Характеристика") Тогда
				СтрокаТЧ_Док1С.Характеристика	= ЭлементТоварнойЧастиЭД.Номенклатура.Характеристика;
			КонецЕсли;
			
			СтрокаТЧ_Док1С.Количество	= ЭлементТоварнойЧастиЭД.Количество;
			
			СтрокаТЧ_Док1С.СтавкаНДС	= ЭлементТоварнойЧастиЭД.СтавкаНДС.Ссылка;
			СтрокаТЧ_Док1С.СуммаНДС		= ЭлементТоварнойЧастиЭД.СуммаНДС;
			
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаСНДС;
			Иначе
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаБезНДС;
			КонецЕсли;
						
			Если СтрокаТЧ_Док1С.Количество = 0 Тогда
				СтрокаТЧ_Док1С.Цена		= СтрокаТЧ_Док1С.Сумма;
			Иначе
				СтрокаТЧ_Док1С.Цена		= СтрокаТЧ_Док1С.Сумма / СтрокаТЧ_Док1С.Количество;
			КонецЕсли;
			
			СтрокаТЧ_Док1С.Всего		= ЭлементТоварнойЧастиЭД.СуммаСНДС;
			
		КонецПроцедуры // ЗаполнитьСтрокуТЧДокумента_УНФ16()
		
		// Добавляет строку в табличную часть документа 1С и заполняет ее данными электронного документа
		//
		// Параметры:
		//	ДокументОбъект			- ДокументОбъект	- заполняемый документ 1С
		//	ЭлементТоварнойЧастиЭД	- Структура			- элемент товарной части ДанныеЭД
		//	ТолькоТовары			- Булево			- Истина, если в ТЧ содержатся только товары
		//
		&НаСервере
		Процедура ДобавитьСтрокуТЧДокумента_БГУ20(ДокументОбъект, ЭлементТоварнойЧастиЭД, ТолькоТовары)
			
			Если ТолькоТовары Тогда
				СтрокаТЧ_Док1С = ДокументОбъект.Материалы.Добавить();
			Иначе
				СтрокаТЧ_Док1С = ДокументОбъект.УслугиИРаботы.Добавить();
			КонецЕсли;
			
			ЗаполнитьСтрокуТЧДокумента_БГУ20(СтрокаТЧ_Док1С, ЭлементТоварнойЧастиЭД);
			
			Если ТолькоТовары Тогда
				ЗаполнитьСтрокуНоменклатурыБГУ(ДокументОбъект, СтрокаТЧ_Док1С);
			КонецЕсли;
			
		КонецПроцедуры // ДобавитьСтрокуТЧДокумента_БГУ20()
		
		// Заполняет строку табличной части документа 1С данными товарной части электронного документа.
		// Только для конфигурации БГУ 2.0
		//
		// Параметры:
		//	СтрокаТЧ_Док1С			- ДокументТабличнаяЧастьСтрока	- строка табличной части документа 1С
		//	ЭлементТоварнойЧастиЭД	- Структура						- элемент товарной части ДанныеЭД
		//
		&НаСервере
		Процедура ЗаполнитьСтрокуТЧДокумента_БГУ20(СтрокаТЧ_Док1С, ЭлементТоварнойЧастиЭД)
			
			// Поступление МЗ, Поступление Услуг Работ
			СтрокаТЧ_Док1С.Номенклатура 	= ЭлементТоварнойЧастиЭД.Номенклатура.Номенклатура;
			СтрокаТЧ_Док1С.ЕдиницаИзмерения	= ЭлементТоварнойЧастиЭД.ЕдиницаИзмерения.Ссылка;
			СтрокаТЧ_Док1С.Количество		= ЭлементТоварнойЧастиЭД.Количество;
			СтрокаТЧ_Док1С.СтавкаНДС		= ЭлементТоварнойЧастиЭД.СтавкаНДС.Ссылка;
			СтрокаТЧ_Док1С.СуммаНДС			= ЭлементТоварнойЧастиЭД.СуммаНДС;
			
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаСНДС;
			Иначе
				СтрокаТЧ_Док1С.Сумма = ЭлементТоварнойЧастиЭД.СуммаБезНДС;
			КонецЕсли;
			
			СтрокаТЧ_Док1С.Всего			= ЭлементТоварнойЧастиЭД.СуммаСНДС;
									
		КонецПроцедуры // ЗаполнитьСтрокуТЧДокумента_БГУ20()
		
	// Определяет есть ли в товарной части документа товары, услуги
	//
	// Параметры:
	//	ДанныеЭД	- Структура	- см. метод "ДанныеЭлектронногоДокумента"
	//
	// Возвращаемое значение:
	//	Структура	- см. тело метода
	&НаСервере
	Функция ЕстьТоварыЕстьУслуги(ДанныеЭД)
		
		ЕстьТовары = Ложь;
		ЕстьУслуги = Ложь;
		
		Для каждого ЭлементТоварнойЧасти Из ДанныеЭД.ТоварнаяЧасть Цикл
			
			Если Номенклатура1С_ЯвляетсяУслугой(ЭлементТоварнойЧасти.Номенклатура.Номенклатура) Тогда
				ЕстьУслуги = Истина;
			Иначе
				ЕстьТовары = Истина;
			КонецЕсли;
						
		КонецЦикла;
		
		Результат = Новый Структура("ЕстьТовары, ЕстьУслуги", ЕстьТовары, ЕстьУслуги);
		
		Возврат Результат;
		
	КонецФункции // ЕстьТоварыЕстьУслуги()
	
	&НаСервере
Процедура ЗаполнитьСчетаУчетаНоменклатурыБП(ДокументОбъект, СтрокаДокумента, СтрокаЗаготовка)

	УИД_Организации 	= Строка(ДокументОбъект.Организация.УникальныйИдентификатор());
	УИД_Номенклатуры 	= Строка(СтрокаДокумента.Номенклатура.УникальныйИдентификатор());
	УИД_Склада			= Строка(ДокументОбъект.Склад.УникальныйИдентификатор());
	ПредставлениеКлюча = УИД_Организации + УИД_Номенклатуры + УИД_Склада;
	СчетаУчета = КэшФормы().СчетаУчетаНоменклатуры.Получить(ПредставлениеКлюча);
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = МетодСервера(, "БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры", ДокументОбъект.Организация, СтрокаДокумента.Номенклатура, ДокументОбъект.Склад);
		КэшФормы().СчетаУчетаНоменклатуры.Вставить(ПредставлениеКлюча, СчетаУчета);
	КонецЕсли;
	
	Если СтрокаЗаготовка.ЭтоУслуга И ЭтоПоступление Тогда
		
		СтрокаДокумента.СчетЗатрат   	= СчетаУчета.СчетУчета;
		СтрокаДокумента.СчетУчетаНДС 	= СчетаУчета.СчетУчетаНДС;
		СтрокаДокумента.СпособУчетаНДС 	= СчетаУчета.СпособУчетаНДС;
		
		СтрокаДокумента.Субконто1    = СчетаУчета.Субконто1;
		СтрокаДокумента.Субконто2    = СчетаУчета.Субконто2;
		СтрокаДокумента.Субконто3    = СчетаУчета.Субконто3;
		
		СтрокаДокумента.СчетЗатратНУ = СчетаУчета.СчетУчета;
		СтрокаДокумента.СубконтоНУ1  = СчетаУчета.Субконто1;
		СтрокаДокумента.СубконтоНУ2  = СчетаУчета.Субконто2;
		СтрокаДокумента.СубконтоНУ3  = СчетаУчета.Субконто3;
		
	Иначе
		
		Если ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия") Тогда
			Если ДокументОбъект.ДоговорКонтрагента.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")
				И СчетаУчета.СчетУчетаЯвляетсяЗабалансовым <> Истина Тогда
				СтрокаДокумента.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
			Иначе
				СтрокаДокумента.СчетУчета = СчетаУчета.СчетУчета;
				СтрокаДокумента.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			КонецЕсли;
			СтрокаДокумента.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		Иначе
			Если СчетаУчета.СчетУчетаЯвляетсяЗабалансовым <> Истина Тогда
				СтрокаДокумента.СчетУчета = СчетаУчета.СчетУчета;
				СтрокаДокумента.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			Иначе
				СтрокаДокумента.СчетУчета = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДокумента, "СчетУчетаНДС") тогда 
				СтрокаДокумента.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				СтрокаДокумента.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
	&НаСервере
	Процедура ЗаполнитьСтрокуНоменклатурыБГУ(ДокументОбъект, СтрокаДокумента)

		Ключ = Строка(СтрокаДокумента.Номенклатура.УникальныйИдентификатор()) + Строка(ДокументОбъект.СчетУчета.УникальныйИдентификатор());
		
		ДанныеНоменклатуры = КэшФормы().ДанныеНоменклатурыБГУ[Ключ];
		
		Если ДанныеНоменклатуры = Неопределено Тогда
			
			ДанныеНоменклатуры = МетодСервера("Модуль_ИнтеграцияБГУ20", "ПолучитьДанныеНоменклатуры", СтрокаДокумента.Номенклатура, ДокументОбъект.СчетУчета);
			
			КэшФормы().ДанныеНоменклатурыБГУ.Вставить(Ключ, ДанныеНоменклатуры);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, ДанныеНоменклатуры);
		
	КонецПроцедуры
	
	&НаСервере
	Функция УстановитьСчетаРасчетовСКонтрагентом(ДокументОбъект)

		УИД_Организации = Строка(ДокументОбъект.Организация.УникальныйИдентификатор());
		УИД_Контрагента = Строка(ДокументОбъект.Контрагент.УникальныйИдентификатор());
		УИД_Договора	= Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
		ПредставлениеКлюча = УИД_Организации + УИД_Контрагента + УИД_Договора;
		СчетаРасчетов = КэшФормы().СчетаУчетаРасчетов.Получить(ПредставлениеКлюча);
		Если СчетаРасчетов = Неопределено Тогда
			СчетаРасчетов = МетодСервера(, "ПолучитьСчетаРасчетов", ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
			КэшФормы().СчетаУчетаРасчетов.Вставить(ПредставлениеКлюча, СчетаРасчетов);
		КонецЕсли;
		
		ДокументОбъект.СчетУчетаРасчетовСКонтрагентом	= СчетаРасчетов.Поставки;
		ДокументОбъект.СчетУчетаРасчетовПоАвансам		= СчетаРасчетов.Авансы;
		
	КонецФункции
	
	&НаСервере
	Процедура СоздатьДокументыСФ_НаСервере(ПараметрыСозданияСФ)
		
		НайденныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаСоздатьСчетФактуры);
		
		Для каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.СписокСсылок1С) Тогда
				СоздатьДокументСФ_НаОсновании(СтрокаТаблицы, ПараметрыСозданияСФ);
			Иначе
				СтрокаТаблицы.СостояниеОбработки 	= "Выберите документ поступления";
				СтрокаТаблицы.КомментарийКДействию 	= "Выберите документ поступления";
			КонецЕсли;
			
	    КонецЦикла;
		
	КонецПроцедуры
	
&НаСервере
Процедура СоздатьДокументСФ_НаОсновании(СтрокаТаблицы, ПараметрыСозданияСФ)
	
	МаркерКонфигурации = ПараметрыСозданияСФ.МаркерКонфигурации;
	ПервыйДокОснование = СтрокаТаблицы.СписокСсылок1С.Получить(0).Значение;
	
    НовыйДок 		= Документы.СчетФактураПолученный.СоздатьДокумент();
	НовыйДок.Дата 	= ТекущаяДата();

	НовыйДок.Заполнить(ПервыйДокОснование);
	
	Если МаркерКонфигурации = "УТ11" И Не ЗначениеЗаполнено(НовыйДок.Контрагент) Тогда  // в более новых релизах используется другой алгоритм заполнения на основании
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("ДокументОснование", 	ПервыйДокОснование);
		ДанныеЗаполнения.Вставить("Исправление", 		СтрокаТаблицы.DocumentType = "InvoiceRevision");
		ДанныеЗаполнения.Вставить("Корректировочный", 	СтрокаТаблицы.DocumentType = "InvoiceCorrection" ИЛИ СтрокаТаблицы.DocumentType = "InvoiceCorrectionRevision");
		НовыйДок.Заполнить(ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(НовыйДок, ДанныеЗаполнения);
	КонецЕсли;
	
	Если МаркерКонфигурации <> "УНФ16" Тогда
		Для Каждого ТекОснование Из СтрокаТаблицы.СписокСсылок1С Цикл
			Если ТекОснование.Значение <> ПервыйДокОснование Тогда 
				СтрокаТЧ = НовыйДок.ДокументыОснования.Добавить();
				СтрокаТЧ.ДокументОснование = ТекОснование.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МаркерКонфигурации = "УТ11" Тогда
		НовыйДок.ДатаСоставления			= СтрокаТаблицы.Дата;
		НовыйДок.Номер						= СтрокаТаблицы.Номер;
		НовыйДок.ПолученВЭлектронномВиде	= Истина;
	ИначеЕсли МаркерКонфигурации = "БГУ20" Тогда
		НовыйДок.ДатаПервичногоДокумента	= СтрокаТаблицы.Дата;
		НовыйДок.НомерПервичногоДокумента	= СтрокаТаблицы.Номер;
		НовыйДок.КодСпособаВыставления		= 2;
		НовыйДок.КодВидаОперации			= "01";
	Иначе
		НовыйДок.ДатаВходящегоДокумента		= СтрокаТаблицы.Дата;
		НовыйДок.НомерВходящегоДокумента	= СтрокаТаблицы.Номер;
		Если МаркерКонфигурации = "БП30" Тогда
			НовыйДок.КодСпособаПолучения	= 2;
		КонецЕсли;
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	Попытка
		НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
		ДокументПроведен = Истина;
	Исключение
		НовыйДок.Записать();
	КонецПопытки;
	
	СтрокаТаблицы.ПервичныйДокумент = НовыйДок.Ссылка;
	СтрокаТаблицы.Создан = Истина;
	Если ДокументПроведен Тогда
		СтрокаТаблицы.Проведен = Истина;
	Иначе
		СтрокаТаблицы.СостояниеОбработки 	= "Проведите документ";
		СтрокаТаблицы.КомментарийКДействию 	= "Проведите документ";
	КонецЕсли;
	
	СопоставитьЭлектронныйДокументДокументу1СНаСервере(НовыйДок.Ссылка, СтрокаТаблицы.DocumentId, СтрокаТаблицы.BoxID);

КонецПроцедуры
	
#КонецОбласти


//{ СОЗДАНИЕ ЧЕРЕЗ УНИВЕРСАЛЬНУЮ СТРУКТУРУ

	// Функция - Полный идентификатор документа
	//
	// Параметры:
	//   ИдентификаторТранзакции	 - Строка - messageId+entityId;
	//   ИдентификаторОрганизации	 - Строка - boxId;
	// 
	// Возвращаемое значение:
	//  Структура - см. тело функции.
	//
	&НаСервере
	Функция ПолныйИдентификаторДокумента(ИдентификаторТранзакции, ИдентификаторОрганизации)
		
		Результат = Новый Структура;
		
		Результат.Вставить("ИдентификаторТранзакции"	, ИдентификаторТранзакции);
		Результат.Вставить("ИдентификаторОрганизации"	, ИдентификаторОрганизации);
		
		Возврат Результат;
		
	КонецФункции // ПолныйИдентификаторДокумента()
	
//} СОЗДАНИЕ ЧЕРЕЗ УНИВЕРСАЛЬНУЮ СТРУКТУРУ
	
	#ОБЛАСТЬ После_создания
		
		&НаКлиенте
		Процедура ОповеститьФормыОСозданииДокументовПоступления()
			
			НайденныеСтрокиДокументСоздан = ТаблицаСоздатьДокументыПоступления.НайтиСтроки(Новый Структура("Создан", Истина));
			
			Для Каждого СтрокаТаблицыСозданныйДокумент Из НайденныеСтрокиДокументСоздан Цикл
				
				Если Не СтрокаТаблицыСозданныйДокумент.ЭтоЕдиныйДокументСФ И Не СтрокаТаблицыСозданныйДокумент.ЭтоУПД_СЧФДОП Тогда
					
					ПараметрыОповещения = Новый Структура;
					ПараметрыОповещения.Вставить("ТипСущности", "Документ");
					ПараметрыОповещения.Вставить("BoxID", 		СтрокаТаблицыСозданныйДокумент.BoxID);
					ПараметрыОповещения.Вставить("DocumentID", 	СтрокаТаблицыСозданныйДокумент.DocumentID);
					ПараметрыОповещения.Вставить("Документ1С",	СтрокаТаблицыСозданныйДокумент.ПервичныйДокумент);
					
					МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
					
				КонецЕсли;
				
				Если СтрокаТаблицыСозданныйДокумент.Проведен Тогда
					ОбработатьПроведениеДокументаПоступления(СтрокаТаблицыСозданныйДокумент);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецПроцедуры
		
		&НаКлиенте
		Процедура ПоказатьФормуСопоставленияНоменклатуры()
			
			Если Не ЗначениеЗаполнено(АдресНоменклатураДляСопоставления) Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура("АдресНоменклатураДляСопоставления",  АдресНоменклатураДляСопоставления);
			МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаГрупповоеСопоставлениеНоменклатуры", ПараметрыФормы, ЭтаФорма, "ОбработчикСопоставлениеНоменклатуры");
			
		КонецПроцедуры
		
	#КонецОбласти

//} МАССОВОЕ СОЗДАНИЕ ВХОДЯЩИХ ДОКУМЕНТОВ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ ОБРАБОТКА ЗАВЕРШЕНА

#ОБЛАСТЬ ОБРАБОТКА_ЗАВЕРШЕНА_КОМАНДЫ

	&НаКлиенте
	Процедура ТаблицаОбработкаЗавершенаОткрытьКарточкуДокумента(Команда)
		
		СформироватьПечатнуюФормуПоФайлуДиадок("ТаблицаОбработкаЗавершена");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаОбработкаЗавершенаОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаОбработкаЗавершена");
		
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ ОБРАБОТКА_ЗАВЕРШЕНА_СОБЫТИЯ_ЭЛЕМЕНТОВ_ФОРМЫ

	&НаКлиенте
	Процедура ТаблицаОбработкаЗавершенаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, "ТаблицаОбработкаЗавершена");

	КонецПроцедуры
	
#КонецОбласти
	
//} ОБРАБОТКА ЗАВЕРШЕНА
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//{ СТАРЫЙ ИНТЕРФЕЙС

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_КОМАНДЫ

	&НаКлиенте
	Процедура ТаблицаДокументовОткрытьДокумент1С(Команда)
		
		ОткрытьДокумент1С("ТаблицаДокументов", Режим = "Сопоставление");
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовСнятьУстановитьПометки(Команда)

		ОбработатьПометки(ТаблицаДокументов, "ТаблицаДокументов");
		ПересчитатьКонтрольныеСуммы();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура Обработать(Команда)
			
		ЗапуститьОбработкуОтмеченныхДокументов(Режим);
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовОбновить(Команда)
		
		ЗаполнитьТаблицы(ТаблицаДокументов);
		Если ТекущийСценарий = "Сопоставить" Тогда 
			НастроитьФормуСопоставить();	
		ИначеЕсли ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
			НастроитьФормуПодКомплекснуюОбработкуДляТорговыхСетей();	
		КонецЕсли;
				
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_СОБЫТИЯ_ЭЛЕМЕНТОВ_ФОРМЫ

	&НаКлиенте
	Процедура ПолеВыбораСценарийПриИзменении(Элемент)

		Если ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда

			Для каждого СтрокаТаблицы из ТаблицаДокументов Цикл
				
				Если ПолеВыбораСценарий = "ОбработатьКорректныеДокументы" Тогда
					
					Если ЭтоУсловноКорректныйДокумент(СтрокаТаблицы) Тогда
						СтрокаТаблицы.Вкл = Истина;	
					Иначе
						СтрокаТаблицы.Вкл = Ложь;
					КонецЕсли;
					
				ИначеЕсли ПолеВыбораСценарий = "ОбработатьДокументыСОшибками" Тогда
					
					Если ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицы) Тогда
						СтрокаТаблицы.Вкл = Истина;	
					Иначе
						СтрокаТаблицы.Вкл = Ложь;
					КонецЕсли;
					
				ИначеЕсли ПолеВыбораСценарий = "ОбработатьВсеАвтоматически" Тогда
					
					Если ЭтоУсловноНеКорректныйДокумент(СтрокаТаблицы)
						ИЛИ ЭтоУсловноКорректныйДокумент(СтрокаТаблицы) Тогда
						
						СтрокаТаблицы.Вкл = Истина;
					Иначе
						СтрокаТаблицы.Вкл = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВклПриИзменении(Элемент)
		
		Если Элементы.ТаблицаДокументов.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если ТекущийСценарий = "Сопоставить" Тогда
			Если НЕ Режим = "АнализДокументов" Тогда
				Если НЕ ЗначениеЗаполнено(Элементы.ТаблицаДокументов.ТекущиеДанные.СопоставляемыйДокумент1С) Тогда
					Сообщить("Данную строку нельзя отметить для сопоставления: у документа " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " не найдено соответствие документу в 1С");
					Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;
				ИначеЕсли ЗначениеЗаполнено(Элементы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокумент) Тогда
					Сообщить("Данную строку нельзя отметить для сопоставления: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " уже сопоставлен документу в 1С");
					Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Элементы.ТаблицаДокументов.ТекущиеДанные.ПервичныйДокумент) Тогда
					Сообщить("Данную строку нельзя отметить для сопоставления: документ " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы + " уже сопоставлен документу в 1С");
					Элементы.ТаблицаДокументов.ТекущиеДанные.Вкл = Ложь;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ОтработатьИзменениеВкл("ТаблицаДокументов");

		Если ТекущийСценарий = "Сопоставить" Тогда
			ПересчитатьКонтрольныеСуммы();
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

		ОбработатьСобытиеВыборТаблицы(Элемент, ВыбраннаяСтрока, Поле, "ТаблицаДокументов");

	КонецПроцедуры
	
#КонецОбласти

&НаКлиенте
Процедура ЗапуститьОбработкуОтмеченныхДокументов(РежимОбработки)
	
	//уберем флаг для всех строк, которые не попали в отбор
	Для каждого стр из ТаблицаДокументов цикл 
		Если Элементы.ТаблицаДокументов.ПроверитьСтроку(стр.получитьИдентификатор())=ложь Тогда 
			Стр.вкл = ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ ЗначениеЗаполнено(ПомеченныеСтрокиТаблицы(ТаблицаДокументов)) Тогда
		МетодКлиента("Модуль_Клиент", "ПоказатьПростоеПредупреждение", НСтр( "ru = 'Не выбраны документы!'"));
		Возврат;
	КонецЕсли;

	Если ТекущийСценарий = "Сопоставить" Тогда
		Если Режим = "АнализДокументов" Тогда
 			ПроверитьВозможностьСопоставления();	
		ИначеЕсли Режим = "ОбработкаДокументов" Тогда
			ВыполнитьСопоставлениеДокументов();
		КонецЕсли;
	ИначеЕсли ТекущийСценарий = "КомплекснаяОбработкаТорговыеСети" Тогда
		Если Режим = "АнализДокументов" Тогда
			ПомеченныеСтроки = ПомеченныеСтрокиТаблицы(ТаблицаДокументов);
			Если НЕ ПомеченныеСтроки.Количество()=0 Тогда
				МетодКлиента("Модуль_Клиент","ЗаполнитьМассивСтруктурКонтент");
				ПровестиАнализДокументов(ПомеченныеСтроки);	
			КонецЕсли;
			
		ИначеЕсли Режим = "ОбработкаДокументов" Тогда
			Оповещение=	Новый ОписаниеОповещения("ВыполнитьОбработкуДокументов", ЭтаФорма);
			ПоказатьВопрос(Оповещение, "Обработать документы?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
		КонецЕсли;
	ИначеЕсли ТекущийСценарий = "СохранитьНаДиск" Тогда
		МетодКлиента(,"ОткрытьФормуОбработкиМодально", "ФормаВыбораКаталогаСохранения",, ЭтаФорма, "СохранитьНаДиск",, ЭтаФорма, Истина);	
	Иначе
		Сообщить("Неустановленный вид действия");		
	КонецЕсли;
		
КонецПроцедуры

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_СОХРАНИТЬ_НА_ДИСК

	&НаКлиенте
	Процедура СохранитьНаДиск(ПараметрыСохранения, ДополнительныеПараметры) Экспорт 
		
		Если ПараметрыСохранения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВсегоЗадач			 = ПомеченныеСтрокиТаблицы(ТаблицаДокументов).Количество();
		КорневойКаталог		 = ПараметрыСохранения.Каталог;
		СохранятьПротокол	 = ПараметрыСохранения.СохранятьПротокол;
		
		КонтекстАсинхроннойОбработки = Новый Структура;
		КонтекстАсинхроннойОбработки.Вставить("КорневойКаталог"		, КорневойКаталог);
		КонтекстАсинхроннойОбработки.Вставить("СохранятьПротокол"	, СохранятьПротокол);
		КонтекстАсинхроннойОбработки.Вставить("МассивЗадач"			, Новый Массив);
		КонтекстАсинхроннойОбработки.Вставить("ВсегоЗадач"			, ВсегоЗадач);
		КонтекстАсинхроннойОбработки.Вставить("ВыполненоЗадач"		, 0);
			
		ОбработчикСохраненияНаДиск();
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбработчикСохраненияНаДиск()
		
		МассивЗадач			 = КонтекстАсинхроннойОбработки.МассивЗадач;
		СохранятьПротокол	 = КонтекстАсинхроннойОбработки.СохранятьПротокол;
		КорневойКаталог		 = КонтекстАсинхроннойОбработки.КорневойКаталог;
		
		Для Каждого СтрокаТЧ Из ТаблицаДокументов Цикл
			
			Если НЕ СтрокаТЧ.Вкл Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивЗадач.Количество() = МаксимальноеКоличествоЗаданий Тогда
				Прервать;
			КонецЕсли;
			
			ДанныеОрганизации = МетодКлиента("Модуль_РаботаССерверомДиадок", "ДанныеКонтекстаДиадок", СтрокаТЧ.BoxID, "ДанныеОрганизации");
			
			Document		 = МетодКлиента("Модуль_РаботаССерверомДиадок", "ПолучитьДокументДиадок", СтрокаТЧ.DocumentId, СтрокаТЧ.BoxID);
			ИмяПапки		 = "INN_" + ДанныеОрганизации.Inn + "\" + Document.type + "_" + Прав(Document.DocumentId, 36);
			КаталогПакета	 = КорневойКаталог + ПолучитьРазделительПути() + ИмяПапки;
			
			СоздатьКаталог(КаталогПакета);
			
			СформироватьФайлСвязанныхДокументах(Document, КаталогПакета);
			СтрокаТЧ.Вкл					 = Ложь;
			СтрокаТЧ.СостояниеОбработки		 = СтруктураДействийПоДокументу.Сохранение;
			СтрокаТЧ.КомментарийКДействию	 = СтруктураДействийПоДокументу.Сохранение;
			
			AsyncResult = Document.SaveAllContentAsync(КаталогПакета, СохранятьПротокол);
			
			СтруктураЗадачи = Новый Структура;
			СтруктураЗадачи.Вставить("СтрокаТЧ"		, СтрокаТЧ);
			СтруктураЗадачи.Вставить("AsyncResult"	, AsyncResult);
			МассивЗадач.Вставить(0, СтруктураЗадачи);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МассивЗадач) Тогда
			
			ОбновлениеСтатусаСохранения();
			
		Иначе
			
			КонтекстАсинхроннойОбработки.Очистить();
			
			ТекстОповещения = НСтр("ru = 'Скачивание файлов успешно завершено'");
			МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", ТекстОповещения, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура СформироватьФайлСвязанныхДокументах(Document, КаталогПакета, ПризнакОшибки = Неопределено)
		
		Файл = Новый ЗаписьXML;
		
		Файл.ОткрытьФайл(КаталогПакета + "\RelatedDocuments_" + Document.DocumentId + ".xml",  "UTF-8");
		
		Файл.ЗаписатьОбъявлениеXML();
		Файл.ЗаписатьКомментарий("Список связанных документов");
		
		Файл.ЗаписатьНачалоЭлемента("V8Data");
		Файл.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
		
		Файл.ЗаписатьКомментарий("Данный документ");
		Файл.ЗаписатьНачалоЭлемента("Document");
		Файл.ЗаписатьАтрибут("OrganizationId",	Document.OrganizationId);
		Файл.ЗаписатьАтрибут("DocumentId",		Document.DocumentId);
		Файл.ЗаписатьКонецЭлемента(); //Document
		
		Файл.ЗаписатьКомментарий("Список идентификаторов документов, на которые ссылается данный");
		Файл.ЗаписатьНачалоЭлемента("ParentDocumentIds");
		InitialDocumentIds=	Document.InitialDocumentIds;
		Для ц = 0 по  InitialDocumentIds.Count-1 Цикл
			InitialDocument = InitialDocumentIds.GetItem(ц); 
			Файл.ЗаписатьНачалоЭлемента("ParentDocument");
			Файл.ЗаписатьАтрибут("DocumentId", InitialDocument);
			Файл.ЗаписатьКонецЭлемента(); //ParentDocument
		КонецЦикла;
		Файл.ЗаписатьКонецЭлемента(); //ParentDocumentIds
		
		Файл.ЗаписатьКомментарий("Список идентификаторов документов, которые ссылаются на данный");
		Файл.ЗаписатьНачалоЭлемента("SubordinateDocumentIds");
		SubordinateDocumentIds=	Document.SubordinateDocumentIds;
		Для ц = 0 по SubordinateDocumentIds.count-1 Цикл
			SubordinateDocument =  SubordinateDocumentIds.getItem(ц);
			Файл.ЗаписатьНачалоЭлемента("SubordinateDocument");
			Файл.ЗаписатьАтрибут("DocumentId", SubordinateDocument);
			Файл.ЗаписатьКонецЭлемента(); //SubordinateDocument
		КонецЦикла;
		Файл.ЗаписатьКонецЭлемента(); //SubordinateDocumentIds
		
		Файл.ЗаписатьКонецЭлемента();//V8Data
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ОбновлениеСтатусаСохранения()
		
		МассивЗадач = КонтекстАсинхроннойОбработки.МассивЗадач;
		
		Для Сч = -МассивЗадач.ВГраница() По 0 Цикл
		
			СтруктураЗадачи = МассивЗадач[-Сч];
			
			Если СтруктураЗадачи.AsyncResult.IsCompleted Тогда
				
				МассивЗадач.Удалить(-Сч);
				
				СтрокаТЧ = СтруктураЗадачи.СтрокаТЧ;
				СтрокаТЧ.СостояниеОбработки		 = СтруктураДействийПоДокументу.УспешноСохранен;
				СтрокаТЧ.КомментарийКДействию	 = СтруктураДействийПоДокументу.УспешноСохранен;
				
				КонтекстАсинхроннойОбработки.ВыполненоЗадач = КонтекстАсинхроннойОбработки.ВыполненоЗадач + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПодключитьОбработчикОжидания("ОбработчикСохраненияНаДиск", 0.1, Истина);
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработкиСписка"
		, НСтр("ru = 'Скачивание файлов'")
		, КонтекстАсинхроннойОбработки.ВыполненоЗадач
		, КонтекстАсинхроннойОбработки.ВсегоЗадач);
		
	КонецПроцедуры
	
#КонецОбласти

#ОБЛАСТЬ СТАРЫЙ_ИНТЕРФЕЙС_СОПОСТАВИТЬ

	&НаКлиенте
	Процедура ПроверитьВозможностьСопоставления()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Анализ документов'"));
		
		НайтиДокументыДляСопоставленияСервер(СтруктураДействийПоДокументу);
		
		Если ЗначениеЗаполнено(ПомеченныеСтрокиТаблицы(ТаблицаДокументов)) Тогда
			Элементы.ТаблицаДокументовОбработать.Заголовок = "Сопоставить выделенные";
			Режим = "ОбработкаДокументов";		
		КонецЕсли;
		
		МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Анализ документов завершен'"), УникальныйИдентификатор);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура НайтиДокументыДляСопоставленияСервер(СтруктураДействийПоДокументу)
		
		ТабИсходныеДанные=	РеквизитФормыВЗначение("ТаблицаДокументов", Тип("ТаблицаЗначений"));
		ТабДанные=			ТабИсходныеДанные.СкопироватьКолонки();
		
		СписокНайденных = Новый Соответствие;
		
		Для каждого СтрокаДокументаИсходная Из ТабИсходныеДанные Цикл
			
			НоваяСтрока= ТабДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументаИсходная);
			
			Если ЗначениеЗаполнено(СтрокаДокументаИсходная.ПервичныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки = МетодСервера(, "СтрокаТаблицыЗначенийВСтруктуру", НоваяСтрока);
			
			ПараметрыДокумента1С = НайтиДокумент1С(ДанныеСтроки);
			
			Если ЗначениеЗаполнено(ПараметрыДокумента1С.Ссылка) Тогда
				
				Если ПараметрыДокумента1С.УжеСопоставлен
					Или СписокНайденных[ПараметрыДокумента1С.Ссылка] = Истина Тогда
					НоваяСтрока.Дубликат= Истина;
				Иначе
					НоваяСтрока.СопоставляемыйДокумент1С= ПараметрыДокумента1С.Ссылка;
					СписокНайденных.Вставить(ПараметрыДокумента1С.Ссылка, Истина);
				КонецЕсли;
				
				НоваяСтрока.СуммаДокумента1С = ПараметрыДокумента1С.СуммаДокумента;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьСтатусыСопоставленияДокументов(ТабДанные, СтруктураДействийПоДокументу);
		
		ЗначениеВРеквизитФормы(ТабДанные, "ТаблицаДокументов");
		
	КонецПроцедуры
	
	&НаСервере
	Функция НайтиДокумент1С(ПараметрыПоиска)
		
		РезультатПМ = МетодСервера(, "ОбработкаСобытияПодключаемогоМодуля", "НайтиДокумент1С", ПараметрыПоиска);
		Если РезультатПМ <> Неопределено Тогда
			Возврат РезультатПМ;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Ссылка", Неопределено);
		Результат.Вставить("УжеСопоставлен", Ложь);
		Результат.Вставить("СуммаДокумента", 0);
		
		Если Найти(ПараметрыПоиска.DocumentType, "Invoice") > 0 Тогда
			
			ПодходящаяСФ=			Неопределено;
			МассивСсылокРНК=		ПолучитьМассивСсылокРНКПоСчетуФактуреПолученномуДиадокСервер(ПараметрыПоиска.СписокСсылок, ПараметрыПоиска.BoxID);
			ВыборкаПодходящихСФ=	НайтиПодходящийСчетФактуруИзРНК(МассивСсылокРНК);
			
			Если ВыборкаПодходящихСФ.Следующий() Тогда 
				ЗаполнитьЗначенияСвойств(Результат, ВыборкаПодходящихСФ);
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;	
		
		ТекстЗапроса = "";
		
		Если НЕ ПараметрыПоиска.Сумма = 0 Тогда
			
			Если ПараметрыПоиска.DocumentType = "XmlTorg12" ИЛИ ПараметрыПоиска.DocumentType = "XmlAcceptanceCertificate" Тогда
				
				Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11"
					ИЛИ Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					
					ТекстЗапроса =	
						"ВЫБРАТЬ
						|	ПоступлениеТоваровУслуг.Ссылка,
						|	ЕСТЬNULL(ПоступлениеТоваровУслуг.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
						|		ПО ПоступлениеТоваровУслуг.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	ПоступлениеТоваровУслуг.Организация = &Организация
						|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
						|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
						|	И ПоступлениеТоваровУслуг.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
					
						ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПоступлениеТоваровУслуг", "Документ." + МетодСервера(, "ПредставлениеДокументов").ПоступлениеТоваровУслуг);
					
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
						
					Если ПараметрыПоиска.DocumentType = "XmlAcceptanceCertificate" Тогда
						
						ТекстЗапроса=	
						"ВЫБРАТЬ
						|	ПоступлениеУслугРабот.Ссылка,
						|	ПоступлениеУслугРабот.СуммаДокумента,
						|	ВЫБОР
						|		КОГДА Сопоставленные.Значение ЕСТЬ NULL 
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПоступлениеУслугРабот КАК ПоступлениеУслугРабот
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сопоставленные
						|		ПО ПоступлениеУслугРабот.Ссылка = Сопоставленные.Объект
						|			И (Сопоставленные.Свойство = &Свойство)
						|			И (Сопоставленные.Значение <> """")
						|ГДЕ
						|	ПоступлениеУслугРабот.Организация = &Организация
						|	И ПоступлениеУслугРабот.Контрагент = &Контрагент
						|	И НЕ ПоступлениеУслугРабот.ПометкаУдаления
						|	И ПоступлениеУслугРабот.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеУслугРабот.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеУслугРабот.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
						
					Иначе
						
						ТекстЗапроса=	
						"ВЫБРАТЬ
						|	ПоступлениеТоваровУслуг.Ссылка,
						|	ПоступлениеТоваровУслуг.СуммаДокумента,
						|	ВЫБОР
						|		КОГДА Сопоставленные.Значение ЕСТЬ NULL 
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПоступлениеМЗ КАК ПоступлениеТоваровУслуг
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК Сопоставленные
						|		ПО ПоступлениеТоваровУслуг.Ссылка = Сопоставленные.Объект
						|			И (Сопоставленные.Свойство = &Свойство)
						|			И (Сопоставленные.Значение <> """")
						|ГДЕ
						|	ПоступлениеТоваровУслуг.Организация = &Организация
						|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент
						|	И НЕ ПоступлениеТоваровУслуг.ПометкаУдаления
						|	И ПоступлениеТоваровУслуг.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеТоваровУслуг.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеТоваровУслуг.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ПоступлениеОС.Ссылка,
						|	ПоступлениеОС.СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ
						|ИЗ
						|	Документ.ПоступлениеОС КАК ПоступлениеОС
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК УжеСопоставленные
						|		ПО ПоступлениеОС.Ссылка = УжеСопоставленные.Объект
						|			И (УжеСопоставленные.Свойство = &Свойство)
						|			И (УжеСопоставленные.Значение <> """")
						|ГДЕ
						|	ПоступлениеОС.Организация = &Организация
						|	И ПоступлениеОС.Контрагент = &Контрагент
						|	И ПоступлениеОС.СуммаДокумента = &СуммаДокумента
						|	И ПоступлениеОС.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПоступлениеОС.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";
						
					КонецЕсли;
					
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
				
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	ПриходнаяНакладная.Ссылка,
						|	ЕСТЬNULL(ПриходнаяНакладная.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство) КАК УжеСопоставленные
						|		ПО ПриходнаяНакладная.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	ПриходнаяНакладная.Организация = &Организация
						|	И ПриходнаяНакладная.Контрагент = &Контрагент
						|	И НЕ ПриходнаяНакладная.ПометкаУдаления
						|	И ПриходнаяНакладная.СуммаДокумента = &СуммаДокумента
						|	И ПриходнаяНакладная.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И НАЧАЛОПЕРИОДА(ПриходнаяНакладная.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента";	
				КонецЕсли;
				
			ИначеЕсли Найти(ПараметрыПоиска.DocumentType, "Invoice") > 0 Тогда
				
				Если Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УТ11" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(ОснованияСФ.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка,
						|			СчетФактураПолученныйДокументыОснования.ДокументОснование.СуммаДокумента КАК СуммаДокумента
						|		ИЗ
						|			Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования) КАК ОснованияСФ
						|		ПО СчетФактураПолученный.Ссылка = ОснованияСФ.Ссылка
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.Номер = &НомерВходящегоДокумента
						|	И ОснованияСФ.СуммаДокумента = &СуммаДокумента";
						
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БП30" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента
						|	И (УжеСопоставленные.Значение ЕСТЬ NULL 
						|			ИЛИ УжеСопоставленные.Значение = """")";
						
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "БГУ20" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаПервичногоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.НомерПервичногоДокумента = &НомерВходящегоДокумента
						|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента";
						
				ИначеЕсли Объект.ПараметрыКлиентСервер.МаркерКонфигурации = "УНФ16" Тогда
					
					ТекстЗапроса=	
						"ВЫБРАТЬ
						|	СчетФактураПолученный.Ссылка,
						|	ЕСТЬNULL(СчетФактураПолученный.СуммаДокумента, 0) КАК СуммаДокумента,
						|	ВЫБОР
						|		КОГДА УжеСопоставленные.Значение ЕСТЬ NULL 
						|				ИЛИ УжеСопоставленные.Значение = """"
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ КАК УжеСопоставлен
						|ИЗ
						|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
						|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
						|			ДополнительныеСведения.Объект КАК Объект,
						|			ДополнительныеСведения.Свойство КАК Свойство,
						|			ДополнительныеСведения.Значение КАК Значение
						|		ИЗ
						|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
						|		ГДЕ
						|			ДополнительныеСведения.Свойство = &Свойство
						|			И НЕ ДополнительныеСведения.Значение = &base64DocId) КАК УжеСопоставленные
						|		ПО СчетФактураПолученный.Ссылка = УжеСопоставленные.Объект
						|ГДЕ
						|	СчетФактураПолученный.Организация = &Организация
						|	И СчетФактураПолученный.Контрагент = &Контрагент
						|	И НЕ СчетФактураПолученный.ПометкаУдаления
						|	И НАЧАЛОПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаВходящегоДокумента
						|	И СчетФактураПолученный.НомерВходящегоДокумента = &НомерВходящегоДокумента
						|	И СчетФактураПолученный.СуммаДокумента = &СуммаДокумента
						|	И (УжеСопоставленные.Значение ЕСТЬ NULL 
						|			ИЛИ УжеСопоставленные.Значение = """")";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда 
			
			Запрос = Новый Запрос(ТекстЗапроса);
			
			Запрос.УстановитьПараметр("Организация", 				ПараметрыПоиска.Организация);
			Запрос.УстановитьПараметр("Контрагент", 				ПараметрыПоиска.Контрагент);
			Запрос.УстановитьПараметр("ДатаВходящегоДокумента", 	ПараметрыПоиска.Дата);
			Запрос.УстановитьПараметр("НомерВходящегоДокумента", 	ПараметрыПоиска.Номер);
			Запрос.УстановитьПараметр("СуммаДокумента", 			ПараметрыПоиска.Сумма);
			Запрос.УстановитьПараметр("Свойство", 					ИдентификаторДокументаВДиадок);
			Запрос.УстановитьПараметр("base64DocId", 				ПараметрыПоиска.base64DocId);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда 
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(Результат, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
	// Заполняет служебные колонки таблицы сопоставления документов:
	//  * СостояниеОбработки
	//  * КомментарийКДействию
	//  * Вкл
	//
	// Параметры:
	//  ТаблицаДокументов	 - ТаблицаЗначений	 - таблица с данными сопоставления
	//  СтатусыСопоставления - Структура		 - см. инициализацию переменной СтруктураДействийПоДокументу
	//
	&НаСервереБезКонтекста
	Процедура ОбновитьСтатусыСопоставленияДокументов(ТаблицаДокументов, СтатусыСопоставления)
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл 
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПервичныйДокумент) Тогда 
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтатусыСопоставления.БылСопоставленРанее;
				СтрокаТаблицы.КомментарийКДействию 	= "Документ уже сопоставлен";
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) 
				Или СтрокаТаблицы.Дубликат // условие из старой логики метода НайтиДокументыДляСопоставленияСервер()
				Тогда 
				
				СтрокаТаблицы.СостояниеОбработки 	= СтатусыСопоставления.ГотовКСопоставлению;
				СтрокаТаблицы.КомментарийКДействию 	= "Для сопосталения документов необходимо нажать кнопку ""Выполнить"".";
				
			Иначе
				
				СтрокаТаблицы.Вкл = Ложь;
				СтрокаТаблицы.СостояниеОбработки 	= СтатусыСопоставления.ДокументВ1СНеНайден;
				СтрокаТаблицы.КомментарийКДействию 	= "При использовании текущего сценария сопоставления, документ в 1С не найден.";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	&НаКлиенте
	Процедура ВыполнитьСопоставлениеДокументов()
		
		МетодКлиента("Модуль_Клиент", "ПоказатьСостояниеОбработки", НСтр("ru = 'Сопоставление документов'"));
		
		СопоставитьВыделенныеДокументыСервер();
		
		Для каждого СтрокаТЧ Из ТаблицаДокументов Цикл
			
			Если СтрокаТЧ.Вкл Тогда
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СопоставляемыйДокумент1С) Тогда
					
					ПараметрыОповещения = Новый Структура;
					ПараметрыОповещения.Вставить("ТипСущности"	, "Документ");
					ПараметрыОповещения.Вставить("BoxID"		, СтрокаТЧ.BoxId);
					ПараметрыОповещения.Вставить("DocumentID"	, СтрокаТЧ.DocumentId);
					ПараметрыОповещения.Вставить("Документ1С"	, СтрокаТЧ.СопоставляемыйДокумент1С);
					
					МетодКлиента(,"ОповеститьФормы", "ИзменениеСвязиДД1С", ПараметрыОповещения, ЭтаФорма);
					
					СтрокаТЧ.СостояниеОбработки		 = СтруктураДействийПоДокументу.Обработано;
					СтрокаТЧ.КомментарийКДействию	 = "Документ успешно сопоставлен";
					
				КонецЕсли;
				
				СтрокаТЧ.Вкл = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		МетодКлиента("Модуль_Клиент", "ОповеститьПользователя", НСтр("ru = 'Сопоставление документов завершено'"), УникальныйИдентификатор);
		
	КонецПроцедуры
	
	&НаСервере
	Процедура СопоставитьВыделенныеДокументыСервер()
		
		Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
			
			Если СтрокаТаблицы.Вкл И ЗначениеЗаполнено(СтрокаТаблицы.СопоставляемыйДокумент1С) Тогда
				
				МетодСервера(,"УстановитьЗначениеСвойства", СтрокаТаблицы.СопоставляемыйДокумент1С, МетодСервера(,"ИдентификаторСвойстваИдентификаторДокументаВДиадок"), , СтрокаТаблицы.base64DocId);
				МетодСервера(,"УстановитьЗначениеСвойства", СтрокаТаблицы.СопоставляемыйДокумент1С, МетодСервера(,"ИдентификаторСвойстваИдентификаторЯщикДокументаВДиадок"), , СтрокаТаблицы.BoxId);
				
				СтрокаТаблицы.ПервичныйДокумент = СтрокаТаблицы.СопоставляемыйДокумент1С;
				
				МетодСервера(,"ОбновитьДанныеДокумента", СтрокаТаблицы.СопоставляемыйДокумент1С, СтрокаТаблицы.Дата, СтрокаТаблицы.Номер);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
#КонецОбласти

//} СТАРЫЙ ИНТЕРФЕЙС
////////////////////////////////////////////////////////////////////////////////

СписокНайденных = Новый Массив();
МаксимальноеКоличествоЗаданий = 10;
