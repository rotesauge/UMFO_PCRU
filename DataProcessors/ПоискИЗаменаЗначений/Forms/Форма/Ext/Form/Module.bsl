
//ИНТЕРФЕЙС
&НаСервереБезКонтекста
Процедура УстановитьФлагВТзСсылок(Выбран, АдресТзНайденныхСсылок, УникальныйИдентификатор)
	
	Если СокрЛП(АдресТзНайденныхСсылок) = "" Тогда
		//пока не искали ссылки
		Возврат;
	КонецЕсли;
	
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	
	Для Каждого СтрокаНС Из ТзНайденныхСсылок Цикл
		СтрокаНС.Выбран = Выбран;
	КонецЦикла;
	
	АдресТзНайденныхСсылок = ПоместитьВоВременноеХранилище(ТзНайденныхСсылок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеЗначенияВключитьВсе(Команда)
	Для каждого СтрокаЗаменяемыеЗначения Из Объект.ЗаменяемыеЗначения Цикл
		СтрокаЗаменяемыеЗначения.Выбран = Истина;
	КонецЦикла;
	
	УстановитьФлагВТзСсылок(Истина, АдресТзНайденныхСсылок, УникальныйИдентификатор);
	ЗаменяемыеЗначенияПриАктивизацииСтроки(Элементы.ЗаменяемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеЗначенияВыключитьВсе(Команда)
	Для каждого СтрокаЗаменяемыеЗначения Из Объект.ЗаменяемыеЗначения Цикл
		СтрокаЗаменяемыеЗначения.Выбран = Ложь;
	КонецЦикла;
	
	УстановитьФлагВТзСсылок(Ложь, АдресТзНайденныхСсылок, УникальныйИдентификатор);
	ЗаменяемыеЗначенияПриАктивизацииСтроки(Элементы.ЗаменяемыеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДанныеЗаменыПоСтрокеВключитьВсеНаСервере()
	
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	Для каждого СтрокаНайденныхСсылок Из ТзНайденныхСсылок Цикл
		СтрокаНайденныхСсылок.Выбран = Истина;
	КонецЦикла;
	
	Для каждого СтрокаДЗ Из ДанныеЗаменыПоСтроке Цикл
		СтрокаДЗ.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаменыПоСтрокеВключитьВсе(Команда)
	
	ДанныеЗаменыПоСтрокеВключитьВсеНаСервере();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеЗаменыПоСтрокеВыключитьВсеНаСервере()
	
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	Для каждого СтрокаНайденныхСсылок Из ТзНайденныхСсылок Цикл
		СтрокаНайденныхСсылок.Выбран = Ложь;
	КонецЦикла;
	
	Для каждого СтрокаДЗ Из ДанныеЗаменыПоСтроке Цикл
		СтрокаДЗ.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаменыПоСтрокеВыключитьВсе(Команда)
	
	ДанныеЗаменыПоСтрокеВыключитьВсеНаСервере();
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеЗначенияПриАктивизацииСтроки(Элемент)
	
	ДанныеЗаменыПоСтроке.Очистить();
	
	ТекущиеДанные = Элементы.ЗаменяемыеЗначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ЗаменяемыеЗначения.ТекущаяСтрока = 0;
		ТекущиеДанные = Элементы.ЗаменяемыеЗначения.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЧтоЗаменять) Тогда
		Возврат;
	Конецесли;
	
	ЗаменяемыеЗначенияПриАктивизацииСтрокиНаСервере(ТекущиеДанные.ЧтоЗаменять);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменяемыеЗначенияПриАктивизацииСтрокиНаСервере(ЧтоЗаменять)
	
	Если АдресТзНайденныхСсылок =  "" Тогда
		Возврат;
	КонецЕсли;
	
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	
	//найдем данные по этой строке
	СтруктураОтбора = Новый Структура("ЧтоЗаменять", ЧтоЗаменять);
	МассивНайденныхСсылок = ТзНайденныхСсылок.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаНайденныхСсылок Из МассивНайденныхСсылок Цикл
		Новая = ДанныеЗаменыПоСтроке.Добавить();
		ЗаполнитьЗначенияСвойств(Новая, СтрокаНайденныхСсылок);
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеЗначенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//поищем в уже существующих ссылках
	ТекущиеДанные = Элементы.ЗаменяемыеЗначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЧтоЗаменять) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЧтоЗаменять = ТекущиеДанные.НаЧтоЗаменять Тогда
		Сообщить("Ошибка: ссылки совпадают!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЧтоЗаменять", ТекущиеДанные.ЧтоЗаменять);
	МассивЗЗ = Объект.ЗаменяемыеЗначения.НайтиСтроки(СтруктураПоиска);
	Если МассивЗЗ.Количество() > 1 Тогда
		Сообщить("Ошибка: заменяемая ссылка уже указана в колонке ""Что заменять""!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НаЧтоЗаменять", ТекущиеДанные.ЧтоЗаменять);
	МассивЗЗ = Объект.ЗаменяемыеЗначения.НайтиСтроки(СтруктураПоиска);
	Если МассивЗЗ.Количество() > 0 Тогда
		Сообщить("Ошибка: заменяемая ссылка уже указана в колонке ""На что заменять""!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Объект.ОтключитьИспользованиеИтогов = Истина;
	Объект.РежимЗагрузка = Истина;
	Объект.ПометитьНаУдалениеЗаменяемыеСсылки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеЗначенияВыбранПриИзменении(Элемент)
	
	//изменим флаг у найденных ссылок
	ТекущиеДанные = Элементы.ЗаменяемыеЗначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменяемыеЗначенияВыбранПриИзмененииНаСервере(ТекущиеДанные.ЧтоЗаменять, ТекущиеДанные.Выбран, АдресТзНайденныхСсылок, УникальныйИдентификатор);
	
	ЗаменяемыеЗначенияПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаменяемыеЗначенияВыбранПриИзмененииНаСервере(ЧтоЗаменять, Выбран, АдресТзНайденныхСсылок, УникальныйИдентификатор)
	
	Если СокрЛП(АдресТзНайденныхСсылок) = "" Тогда
		//пока не искали ссылки
		Возврат;
	КонецЕсли;

	
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	
	СтруктураОтбора = Новый Структура("ЧтоЗаменять", ЧтоЗаменять);
	МассивНС = ТзНайденныхСсылок.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаНС Из МассивНС Цикл
		СтрокаНС.Выбран = Выбран;
	КонецЦикла;
	
	АдресТзНайденныхСсылок = ПоместитьВоВременноеХранилище(ТзНайденныхСсылок, УникальныйИдентификатор);
	
КонецПроцедуры


&НаКлиенте
Процедура ДанныеЗаменыПоСтрокеВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеЗаменыПоСтроке.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		сообщить("Ошибка: не нашли текущие данные!");
		Возврат;
	КонецЕсли;
	
	ДанныеЗаменыПоСтрокеВыбранПриИзмененииНаСервере(ТекущиеДанные.ЧтоЗаменять, ТекущиеДанные.ГдеЗаменять, ТекущиеДанные.Выбран, АдресТзНайденныхСсылок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеЗаменыПоСтрокеВыбранПриИзмененииНаСервере(ЧтоЗаменять, ГдеЗаменять, Выбран, АдресТзНайденныхСсылок, УникальныйИдентификатор)
	
	Если АдресТзНайденныхСсылок =  "" Тогда
		Возврат;
	КонецЕсли;
	
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	
	//найдем данные по этой строке
	СтруктураОтбора = Новый Структура("ЧтоЗаменять, ГдеЗаменять", ЧтоЗаменять, ГдеЗаменять);
	МассивНайденныхСсылок = ТзНайденныхСсылок.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаНайденныхСсылок Из МассивНайденныхСсылок Цикл
		СтрокаНайденныхСсылок.Выбран = Выбран;
	КонецЦикла;

	АдресТзНайденныхСсылок = ПоместитьВоВременноеХранилище(ТзНайденныхСсылок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВетвьМетаданных(СтрокиДерева, Имя, Синоним)
	
	КоллекцияМетаданных = Метаданные[Имя];
	Если КоллекцияМетаданных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяДерево = СтрокиДерева.Добавить();
	НоваяДерево.Выбран = Истина;
	НоваяДерево.ПолноеИмя = Имя;
	НоваяДерево.Синоним = Синоним;
	
	Если КоллекцияМетаданных = Метаданные.РегистрыСведений Тогда
		ЕстьПроверкаНезависимости = Истина;
	Иначе
		ЕстьПроверкаНезависимости = Ложь;
	КонецЕсли;
	
	Для Каждого мОбъект Из КоллекцияМетаданных Цикл
		
		Если ЕстьПроверкаНезависимости Тогда
			Если мОбъект.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СубСтрока = НоваяДерево.Строки.Добавить();
		СубСтрока.Выбран = Истина;
		СубСтрока.ПолноеИмя = мОбъект.ПолноеИмя();
		СубСтрока.Синоним = мОбъект.Синоним;
		
	КонецЦикла;
	
	НоваяДерево.Строки.Сортировать("Синоним");
	
КонецПроцедуры

Процедура ЗаполнитьДеревоНаСервере()
	
	Дерево = РеквизитФормыВЗначение("Объект.МетаданныеПоиска");
	ДобавитьВетвьМетаданных(Дерево.Строки, "Справочники", "Справочники");
	ДобавитьВетвьМетаданных(Дерево.Строки, "Документы", "Документы");
	ДобавитьВетвьМетаданных(Дерево.Строки, "ПланыВидовХарактеристик", "Планы видов характеристик");
	ДобавитьВетвьМетаданных(Дерево.Строки, "ПланыСчетов", "Планы счетов");
	ДобавитьВетвьМетаданных(Дерево.Строки, "ПланыВидовРасчета", "Планы видов расчета");
	ДобавитьВетвьМетаданных(Дерево.Строки, "РегистрыСведений", "Регистры сведений");
	ДобавитьВетвьМетаданных(Дерево.Строки, "БизнесПроцессы", "Бизнес-процессы");
	ДобавитьВетвьМетаданных(Дерево.Строки, "Задачи", "Задачи");
	
	ЗначениеВРеквизитФормы(Дерево, "Объект.МетаданныеПоиска");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДерево(Команда)
	ЗаполнитьДеревоНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеПоискаВключитьВсе(Команда)
	
	ЭлементыДерева = Объект.МетаданныеПоиска.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Элемент.Выбран = Истина;
		Для Каждого СубЭлемент Из Элемент.ПолучитьЭлементы() Цикл
			СубЭлемент.Выбран = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеПоискаВыключитьВсе(Команда)
	
	ЭлементыДерева = Объект.МетаданныеПоиска.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Элемент.Выбран = Ложь;
		Для Каждого СубЭлемент Из Элемент.ПолучитьЭлементы() Цикл
			СубЭлемент.Выбран = Ложь;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МетаданныеПоискаВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МетаданныеПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Выбран = ТекущиеДанные.Выбран;
	
	ТекущаяСтрока = Элементы.МетаданныеПоиска.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Объект.МетаданныеПоиска.НайтиПоИдентификатору(ТекущаяСтрока);
	Для Каждого СубСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		СубСтрока.Выбран = Выбран;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

//установка флага "Выбран"
&НаКлиенте
Процедура ЗаменяемыеЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаменяемыеЗначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Выбран = Истина;
	
КонецПроцедуры

//приведение типов
&НаКлиенте
Процедура ЗаменяемыеЗначенияНаЧтоЗаменятьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	ТекущиеДанные = Элементы.ЗаменяемыеЗначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЧтоЗаменять) Тогда
		Возврат;
	КонецЕсли;
	
	//определим массив типов, для установки ограничения
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.ЧтоЗаменять));
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
    Элемент.ВыбиратьТип = Ложь;
	
КонецПроцедуры




//ПОИСК ССЫЛОК В БД
&НаСервере
Процедура НайтиСсылкиСервер(МассивЗаменяемых)
	
	//заполним массив метаданных, в которых ищем
	Дерево = РеквизитФормыВЗначение("Объект.МетаданныеПоиска");
	ВключитьОбъекты = Новый Массив;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Для Каждого СубСтрока Из Строка.Строки Цикл
			Если Не СубСтрока.Выбран Тогда
				Продолжить;
			КонецЕсли;
			
			ВключитьОбъекты.Добавить(СубСтрока.ПолноеИмя);
		КонецЦикла;
	КонецЦикла;
	
	Если ВключитьОбъекты.Количество() = 0 Тогда
		//ищем везде
		ТзНайденныхСсылок = НайтиПоСсылкам(МассивЗаменяемых);
	Иначе
		//ищем только в отобранных
		ТзНайденныхСсылок = НайтиПоСсылкам(МассивЗаменяемых, Новый Массив, ВключитьОбъекты);
	КонецЕсли;
	
	//заменим названия колонок на удобные
	ТзНайденныхСсылок.Колонки[0].Имя = "ЧтоЗаменять";
	ТзНайденныхСсылок.Колонки[1].Имя = "ГдеЗаменять";
	ТзНайденныхСсылок.Колонки[2].Имя = "Метаданные";
	
	//добавим дополнительные колонки
	ТзНайденныхСсылок.Колонки.Добавить("Выбран", Новый ОписаниеТипов("Булево"));
	ТзНайденныхСсылок.Колонки.Добавить("ПредставлениеМетаданных", Новый ОписаниеТипов("Строка"));
	ТзНайденныхСсылок.Колонки.Добавить("ГдеЗаменятьПредставление");
	
	СтруктураКлючейРегистровСведений = Новый Структура;
	
	//заполним дополнительные колонки
	МетаданныеРС = Метаданные.РегистрыСведений;
	МетаданныеД = Метаданные.Документы;
	МетаданныеБП = Метаданные.БизнесПроцессы;
	МетаданныеЗ = Метаданные.Задачи;
	
	Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	//узнаем есть ли отбор по периоду
	ЗаполненаДатаНачала = ЗначениеЗаполнено(Объект.ДатаНачалаОтбора);
	ЗаполненаДатаКонца = ЗначениеЗаполнено(Объект.ДатаКонцаОтбора);
	
	ТекущийИндекс = ТзНАйденныхСсылок.Количество() - 1;
	Пока ТекущийИндекс >= 0 Цикл
		
		СтрокаНайденныхСсылок = ТзНайденныхСсылок.Получить(ТекущийИндекс);
		ТекущийИндекс = ТекущийИндекс - 1;
		
		ГдеЗаменять = СтрокаНайденныхСсылок.ГдеЗаменять;
		МетаданныеГдеЗаменять = СтрокаНайденныхСсылок.Метаданные;
		
		Если ЗаполненаДатаНачала ИЛИ ЗаполненаДатаКонца Тогда
			
			Если МетаданныеД.Содержит(МетаданныеГдеЗаменять) ИЛИ
				МетаданныеБП.Содержит(МетаданныеГдеЗаменять) ИЛИ
				МетаданныеЗ.Содержит(МетаданныеГдеЗаменять) Тогда
				
				ЗначениеДаты = ГдеЗаменять.Дата;
			ИначеЕсли МетаданныеРС.Содержит(МетаданныеГдеЗаменять) И МетаданныеГдеЗаменять.Периодичность <> Непериодический Тогда
				ЗначениеДаты = ГдеЗаменять.Период;
			КонецЕсли;
			
			Если ЗаполненаДатаНачала И ЗначениеДаты < Объект.ДатаНачалаОтбора Тогда
				ТзНайденныхСсылок.Удалить(СтрокаНайденныхСсылок);
				Продолжить;
			КонецЕсли;
				
			Если ЗаполненаДатаКонца И ЗначениеДаты > Объект.ДатаКонцаОтбора Тогда
				ТзНайденныхСсылок.Удалить(СтрокаНайденныхСсылок);
				Продолжить;
			КонецЕсли;
				
		КонецЕсли; 
				
		//узнаем выбрана ли замена
		СтруктураОтбора = Новый Структура("ЧтоЗаменять", СтрокаНайденныхСсылок.ЧтоЗаменять);
		МассивЗЗ = Объект.ЗаменяемыеЗначения.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаЗЗ Из МассивЗЗ Цикл
			СтрокаНайденныхСсылок.Выбран = СтрокаЗЗ.Выбран;
		КонецЦикла;
		
		СтрокаНайденныхСсылок.ПредставлениеМетаданных = МетаданныеГдеЗаменять.ПолноеИмя();
		
		//заполним ключ регистра сведений, чтобы можно было идентифицировать место замены
		Если МетаданныеРС.Содержит(МетаданныеГдеЗаменять) Тогда
			
			//сформируем удобное для пользователя представление ключа в виде списка
			СписокКлюча = Новый СписокЗначений;
			Если СтрокаНайденныхСсылок.Метаданные.ПериодичностьРегистраСведений <> Непериодический Тогда
				СписокКлюча.Добавить("Период", ГдеЗаменять.Период);
			КонецЕсли;
			
			Для Каждого Измерение ИЗ МетаданныеГдеЗаменять.Измерения Цикл
				СписокКлюча.Добавить(Измерение.Имя, ГдеЗаменять[Измерение.Имя]);
			КонецЦикла;
			
			СтрокаНайденныхСсылок.ГдеЗаменятьПредставление = СписокКлюча;
		Иначе
			СтрокаНайденныхСсылок.ГдеЗаменятьПредставление = ГдеЗаменять;
		КонецЕсли;
		
	КонецЦикла;
	
	ТзНайденныхСсылок.Индексы.Добавить("ЧтоЗаменять");
	
	АдресТзНайденныхСсылок = ПоместитьВоВременноеХранилище(ТзНайденныхСсылок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСсылки(Команда)

	//заполним массив заменяемых ссылок
	МассивЗаменяемых = Новый Массив;
	Для каждого СтрокаЗаменяемыеЗначения Из Объект.ЗаменяемыеЗначения Цикл
		
		Если СтрокаЗаменяемыеЗначения.ЧтоЗаменять = СтрокаЗаменяемыеЗначения.НаЧтоЗаменять Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивЗаменяемых.Найти(СтрокаЗаменяемыеЗначения.ЧтоЗаменять) = Неопределено Тогда
			МассивЗаменяемых.Добавить(СтрокаЗаменяемыеЗначения.ЧтоЗаменять);
		КонецЕсли;
	КонецЦикла;

	Если МассивЗаменяемых.Количество() = 0 Тогда
		Предупреждение("Не выбрано ни одного значения для поиска!");
		Возврат;
	КонецЕсли;

	НайтиСсылкиСервер(МассивЗаменяемых);
	
	//обновим данные формы
	ЗаменяемыеЗначенияПриАктивизацииСтроки(Элементы.ЗаменяемыеЗначения);
	
КонецПроцедуры



//ЗАМЕНА ССЫЛОК
&НаСервере
Функция ЗакешироватьВспомогательныеДанные()
	
	ВспомогательныеДанные = Новый Структура;
	
	//получим небелансовые измерения регистра бухгалтерии (обращаться с ним будем Имя + "Дт" и Имя + "Кт")
	МетаданныеРБ = Метаданные.РегистрыБухгалтерии;
	Для каждого РегистрБухгалтерии Из МетаданныеРБ Цикл
		
		НебалансовыеИзмерения = Новый Массив();
		Для каждого Измерение Из РегистрБухгалтерии.Измерения Цикл
			Если Измерение.Балансовый Тогда
				Продолжить;
			КонецЕсли;
			
			НебалансовыеИзмерения.Добавить(Измерение.Имя);
		КонецЦикла;
		
		ВспомогательныеДанные.Вставить(РегистрБухгалтерии.Имя + "НебалансовыеИзмерения", НебалансовыеИзмерения);
		
		//для данного регистра бухгалтерии сохраним план счетов
		СтрокаПризнаков = "";
		ПланСчетов = РегистрБухгалтерии.ПланСчетов; 
		Для Каждого Признак Из ПланСчетов.ПризнакиУчета Цикл
			СтрокаПризнаков = СтрокаПризнаков + ", " + Признак.Имя;
		КонецЦикла;
		
		//получим планы счетов
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|Выбрать Ссылка " + СтрокаПризнаков + "
		|Из ПланСчетов." + ПланСчетов.Имя;
		
		ТзПланаСчетов = Запрос.Выполнить().Выгрузить();
		ТзПланаСчетов.Индексы.Добавить("Ссылка");
		
		//записываем с именем регистра бухгалтерии, чтобы потом легко искать
		ВспомогательныеДанные.Вставить(РегистрБухгалтерии.Имя + "ТзПланаСчетов", ТзПланаСчетов);
	КонецЦикла;
		
	Для Каждого РегистрБухгалтерии ИЗ МетаданныеРБ Цикл
		ВспомогательныеДанные.Вставить(РегистрБухгалтерии.Имя + "МаксКоличествоСубконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		ВспомогательныеДанные.Вставить(РегистрБухгалтерии.Имя + "Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ВспомогательныеДанные.Вставить("ОбработкаОбъект", ОбработкаОбъект);
	
	
	АдресВспомогательныеДанные = ПоместитьВоВременноеХранилище(ВспомогательныеДанные, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивГдеЗаменять(АдресТзНайденныхСсылок)
	
	Если Не ЗначениеЗаполнено(АдресТзНайденныхСсылок) Тогда
		Сообщить("Сначала необходимо найти ссылки!");
		Возврат 0;
	КонецЕсли;
		
		
	//получим таблицу с сылками	
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	
	//ищем уникальные данные
	СтруктураОтбора = Новый Структура("Выбран", Истина);
	ТзГдеЗаменять = ТзНайденныхСсылок.Скопировать(СтруктураОтбора, "ГдеЗаменять");
	ТзГдеЗаменять.Свернуть("ГдеЗаменять", "");
	МассивГдеЗаменять = ТзГдеЗаменять.ВыгрузитьКолонку("ГдеЗаменять");
	
	Возврат МассивГдеЗаменять;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтключитьИспользованиеИтогов(ОтключитьИспользованиеИтогов)
	
	Если Не ОтключитьИспользованиеИтогов Тогда
		//если не отключали, то и не включаем
		Возврат 1;
	КонецЕсли;
	
	Попытка
		//регистры бухгалтерии
		Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
			Если РегистрыБухгалтерии[РегистрБухгалтерии.Имя].ПолучитьИспользованиеИтогов() Тогда
				РегистрыБухгалтерии[РегистрБухгалтерии.Имя].УстановитьИспользованиеИтогов(Ложь);
			КонецЕсли;
			
			Если РегистрыБухгалтерии[РегистрБухгалтерии.Имя].ПолучитьИспользованиеТекущихИтогов() Тогда
				РегистрыБухгалтерии[РегистрБухгалтерии.Имя].УстановитьИспользованиеТекущихИтогов(Ложь);
			КонецЕсли;
		КонецЦикла;
		
		//регисты накопления
		Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
			Если РегистрыНакопления[РегистрНакопления.Имя].ПолучитьИспользованиеИтогов() Тогда
				РегистрыНакопления[РегистрНакопления.Имя].УстановитьИспользованиеИтогов(Ложь);
			КонецЕсли;
			
			Если Метаданные.РегистрыНакопления[РегистрНакопления.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				Если РегистрыНакопления[РегистрНакопления.Имя].ПолучитьИспользованиеТекущихИтогов() Тогда
					РегистрыНакопления[РегистрНакопления.Имя].УстановитьИспользованиеТекущихИтогов(Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//регистры сведений
		Для Каждого РегистрСведений Из Метаданные.РегистрыСведений Цикл
			Если (НЕ РегистрСведений.РазрешитьИтогиСрезПервых ) И (НЕ РегистрСведений.РазрешитьИтогиСрезПоследних) Тогда
				Продолжить;
			КонецЕсли;
				
			Если РегистрыСведений[РегистрСведений.Имя].ПолучитьИспользованиеИтогов() Тогда
				РегистрыСведений[РегистрСведений.Имя].УстановитьИспользованиеИтогов(Ложь);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить("Не удалось отключить использование итогов!");
		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВключитьИспользованиеИтогов(ОтключитьИспользованиеИтогов)
	
	Если Не ОтключитьИспользованиеИтогов Тогда
		//если не отключали, то и не включаем
		Возврат 1;
	КонецЕсли;
	
	Попытка
		//регистры бухгалтерии
		Для Каждого РегистрБухгалтерии Из Метаданные.РегистрыБухгалтерии Цикл
			Если НЕ РегистрыБухгалтерии[РегистрБухгалтерии.Имя].ПолучитьИспользованиеИтогов() Тогда
				РегистрыБухгалтерии[РегистрБухгалтерии.Имя].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли;
			
			Если НЕ РегистрыБухгалтерии[РегистрБухгалтерии.Имя].ПолучитьИспользованиеТекущихИтогов() Тогда
				РегистрыБухгалтерии[РегистрБухгалтерии.Имя].УстановитьИспользованиеТекущихИтогов(Истина);
			КонецЕсли;
		КонецЦикла;
		
		//регисты накопления
		Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
			Если НЕ РегистрыНакопления[РегистрНакопления.Имя].ПолучитьИспользованиеИтогов() Тогда
				РегистрыНакопления[РегистрНакопления.Имя].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли;
			
			Если Метаданные.РегистрыНакопления[РегистрНакопления.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				Если НЕ РегистрыНакопления[РегистрНакопления.Имя].ПолучитьИспользованиеТекущихИтогов() Тогда
					РегистрыНакопления[РегистрНакопления.Имя].УстановитьИспользованиеТекущихИтогов(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//регистры сведений
		Для Каждого РегистрСведений Из Метаданные.РегистрыСведений Цикл
			Если РегистрСведений.РазрешитьИтогиСрезПервых ИЛИ РегистрСведений.РазрешитьИтогиСрезПоследних Тогда
				Продолжить;
			КонецЕсли;
				
			Если НЕ РегистрыСведений[РегистрСведений.Имя].ПолучитьИспользованиеИтогов() Тогда
				РегистрыСведений[РегистрСведений.Имя].УстановитьИспользованиеИтогов(Истина);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить("Не удалось включить использование итогов!");
		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

&НаСервере
Функция ПометитьНаУдалениеЧтоЗаменять()
	
	Если НЕ Объект.ПометитьНаУдалениеЗаменяемыеСсылки Тогда
		Возврат 1;
	КонецЕсли;
	
	//получим связку таблиц БД и ссылок
	мСправочники = Метаданные.Справочники;
	мДокументы = Метаданные.Документы;
	мПланыВидовХарактеристик = Метаданные.ПланыВидовХарактеристик;
	мПланыВидовРасчета = Метаданные.ПланыВидовРасчета;
	мПланыСчетов = Метаданные.ПланыСчетов;
	мЗадачи = Метаданные.Задачи;
	мБизнесПроцессы = Метаданные.БизнесПроцессы;
	
	ТзТаблиц = Новый ТаблицаЗначений;
	ТзТаблиц.Колонки.Добавить("ИмяТаблицы", Новый ОписаниеТипов("Строка"));
	ТзТаблиц.Колонки.Добавить("МассивСсылок", Новый ОписаниеТипов("Массив"));
	
	Для Каждого СтрокаЗЗ Из Объект.ЗаменяемыеЗначения Цикл
		
		Если НЕ СтрокаЗЗ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		мСсылки = СтрокаЗЗ.ЧтоЗаменять.Метаданные();
		Если мСправочники.Содержит(мСсылки) Тогда
			ИмяТаблицы = "Справочник." + мСсылки.Имя;	
		ИначеЕсли мДокументы.Содержит(мСсылки) Тогда
			ИмяТаблицы = "Документ." + мСсылки.Имя;
		иначеЕсли мПланыВидовХарактеристик.Содержит(мСсылки) Тогда
			ИмяТаблицы = "ПланВидовХарактеристик." + мСсылки.Имя;
		ИначеЕсли мПланыВидовРасчета.Содержит(мСсылки) Тогда
			ИмяТаблицы = "ПланВидовРасчета." + мСсылки.Имя;
		ИначеЕсли мПланыСчетов.Содержит(мСсылки) Тогда
			ИмяТаблицы = "ПланСчетов." + мСсылки.Имя;
		ИначеЕсли мЗадачи.Содержит(мСсылки) Тогда
			ИмяТаблицы = "Задача." + мСсылки.Имя;
		ИначеЕсли мБизнесПроцессы.Содержит(мСсылки) Тогда
			ИмяТаблицы = "БизнесПроцесс." + мСсылки.Имя;
		Иначе
			Сообщить("Ошибка: ищем ссылку на нессылочный объект! Ссылка = " + СтрокаЗЗ.ЧтоЗаменять);
			Возврат 0;
		КонецЕсли;
		
		//найдем строку, соотвествующую данному имени
		СтрокаТаблиц = ТзТаблиц.Найти(ИмяТаблицы, "ИмяТаблицы");
		Если СтрокаТаблиц = Неопределено Тогда
			
			//добавим новую строку в таблицу таблиц
			СтрокаТаблиц = ТзТаблиц.Добавить();
			СтрокаТаблиц.ИмяТаблицы = ИмяТаблицы;
			СтрокаТаблиц.МассивСсылок = Новый Массив;
		КонецЕсли;
		
		//добавим ссылку в массив
		СтрокаТаблиц.МассивСсылок.Добавить(СтрокаЗЗ.ЧтоЗаменять);
	Конеццикла;
	
	//сформируем текст запроса
	Запрос = Новый Запрос;
	Для Каждого СтрокаТаблиц Из ТзТаблиц Цикл
		
		ИмяТаблицы = СтрокаТаблиц.ИмяТаблицы;
		ИмяТаблицыБезТочки = СтрЗаменить(ИмяТаблицы, ".", "");
		
		Запрос.Текст = Запрос.Текст + " 
		|ОБЪЕДИНИТЬ
		|Выбрать Ссылка
		|Из " + ИмяТаблицы + "
		|ГДЕ (НЕ ПометкаУдаления) И (Ссылка В (&МассивСсылок" + ИмяТаблицыБезТочки + "))";
		
		Запрос.УстановитьПараметр("МассивСсылок" + ИмяТаблицыБезТочки, СтрокаТаблиц.МассивСсылок);
	КонецЦикла;
	Запрос.Текст = Сред(Запрос.Текст, 14);
	
	//получим выборку помеченных на удаление
	ВыборкаСсылок = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСсылок.Следующий() Цикл
		
		Попытка
			ОбъектЧтоЗаменять = ВыборкаСсылок.Ссылка.ПолучитьОбъект();
			
			Если Объект.РежимЗагрузка Тогда
				ОбъектЧтоЗаменять.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			ОбъектЧтоЗаменять.УстановитьПометкуУдаления(Истина, Ложь);
		Исключение
			Сообщить("Не смогли пометить на удаление!");
			возврат 0; 
		КонецПопытки;
		
	КонецЦикла;
			
	Возврат 1;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьЗаменуПоОбъектам(АдресВспомогательныеДанные, АдресТзНайденныхСсылок, МассивГдеЗаменять)
	
	ВспомогательныеДанные = ПолучитьИзВременногоХранилища(АдресВспомогательныеДанные);
	ТзНайденныхСсылок = ПолучитьИзВременногоХранилища(АдресТзНайденныхСсылок);
	ОбработкаОбъект = ВспомогательныеДанные.ОбработкаОбъект;
	
	Для Каждого ГдеЗаменять Из МассивГдеЗаменять Цикл
		
		Если ОбработкаОбъект.ВыполнитьЗаменуПоОбъекту(ВспомогательныеДанные, ТзНайденныхСсылок, ГдеЗаменять) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

&НаКлиенте
Процедура КнопкаВыполнитьНажатие(Команда)
	
	Если ЗакешироватьВспомогательныеДанные() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивГдеЗаменять = ПолучитьМассивГдеЗаменять(АдресТзНайденныхСсылок);
	Если МассивГдеЗаменять = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивГдеЗаменять.Количество() = 0 Тогда
		Если ПометитьНаУдалениеЧтоЗаменять() = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
	
	Если ОтключитьИспользованиеИтогов(Объект.ОтключитьИспользованиеИтогов) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	КоличествоГдеЗаменять = МассивГдеЗаменять.Количество();
	КоличествоШагов = МИН(500, КоличествоГдеЗаменять);
	Элементы.Индикатор.МаксимальноеЗначение = КоличествоШагов;
	
	КонечныйИндекс = -1;
	Для ИндексШага = 1 По КоличествоШагов Цикл
		ОбновитьОтображениеДанных();
		ОбработкаПрерыванияПользователя();
		
		//получим интервал индексов, обрабатываемый на этом шаге
		НачальныйИндекс = КонечныйИндекс + 1;
		Если ИндексШага = КоличествоШагов Тогда
			КонечныйИндекс = КоличествоГдеЗаменять-1;
		Иначе
			КонечныйИндекс = Окр(ИндексШага * КоличествоГдеЗаменять/КоличествоШагов);
			КонечныйИндекс = МИН(КонечныйИндекс, КоличествоГдеЗаменять-1);
		КонецЕсли;
		
		//заполним сокращенный массив для этого шага
		СокращенныйМассив = Новый Массив;
		Для ИндексГдеЗаменять = НачальныйИндекс По КонечныйИндекс Цикл
			СокращенныйМассив.Добавить(МассивГдеЗаменять[ИндексГдеЗаменять]);
		КонецЦикла;
		
		//выполним замену по элементам сокращенного массива
		Если ВыполнитьЗаменуПоОбъектам(АдресВспомогательныеДанные, АдресТзНайденныхСсылок, СокращенныйМассив) = 0 Тогда
			ВключитьИспользованиеИтогов(Объект.ОтключитьИспользованиеИтогов);
			Возврат;
		КонецЕсли;
		
		//обновим данные прогресс- бара :)
		Индикатор = ИндексШага;
	КонецЦикла;
	
	//включим использование итогов	
	ВключитьИспользованиеИтогов(Объект.ОтключитьИспользованиеИтогов);
	
	//обработаем пометку на удаление
	Если ПометитьНаУдалениеЧтоЗаменять() = 0 Тогда
		Возврат;
	КонецЕсли;
			
	Сообщить("Обработка завершена!");
	
КонецПроцедуры











