Функция ПрочитатьДанныеОбъектаИзБД(СтрокаНайденныхСсылок)
	
	СтруктураОбъекта = Новый Структура("Константы, Справочники, ПланыСчетов, ПланыВидовХарактеристик, Задачи, БизнесПроцессы, ПланыВидовРасчета, Документы, РегистрыСведений", Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	
	ГдеЗаменять = СтрокаНайденныхСсылок.ГдеЗаменять;
	СтруктураОбъекта.Вставить("ГдеЗаменять", ГдеЗаменять);
	
	МетаданныеГдеЗаменять = СтрокаНайденныхСсылок.Метаданные;
	СтруктураОбъекта.Вставить("МетаданныеГдеЗаменять", МетаданныеГдеЗаменять);
	СтруктураОбъекта.Вставить("ТзОбъектГдеЗаменять", Неопределено);
	СтруктураОбъекта.Вставить("ОбъектГдеЗаменятьНадоЗаписывать", Ложь);
	
	Если Метаданные.Константы.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.Константы = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", Константы[МетаданныеГдеЗаменять.Имя]);
	
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.Справочники = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", ГдеЗаменять.ПолучитьОбъект());
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.ПланыСчетов = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", ГдеЗаменять.ПолучитьОбъект());
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.ПланыВидовХарактеристик = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", ГдеЗаменять.ПолучитьОбъект());
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.Задачи = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", ГдеЗаменять.ПолучитьОбъект());
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.БизнесПроцессы = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", ГдеЗаменять.ПолучитьОбъект());
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.ПланыВидовРасчета = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", ГдеЗаменять.ПолучитьОбъект());
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеГдеЗаменять) Тогда
		
		СтруктураОбъекта.Документы = Истина;
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", ГдеЗаменять.ПолучитьОбъект());
		Если СтруктураОбъекта.ОбъектГдеЗаменять = Неопределено Тогда
			//битая ссылка
			Возврат СтруктураОбъекта;
		КонецЕсли;
		
		//последовательности
		СтруктураОбъекта.Вставить("СтруктураТзПоследовательностей", Новый Структура);
		СтруктураОбъекта.Вставить("СтруктураТзПоследовательностейНадоЗаписывать", Новый Структура);
		Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
			Если НЕ Последовательность.Документы.Содержит(МетаданныеГдеЗаменять) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
			НаборЗаписи.Отбор.Регистратор.Установить(ГдеЗаменять);
			НаборЗаписи.Прочитать();
			
			СтруктураОбъекта.СтруктураТзПоследовательностей.Вставить(Последовательность.Имя, НаборЗаписи.Выгрузить());
			СтруктураОбъекта.СтруктураТзПоследовательностейНадоЗаписывать.Вставить(Последовательность.Имя, Ложь);
		КонецЦикла;
		
		//движения
		мРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
		мРегистрыНакопления = Метаданные.РегистрыНакопления;
		мРегистрыСведений = Метаданные.РегистрыСведений;
		мРегистрыРасчета = Метаданные.РегистрыРасчета;
		
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровБухгалтерии", Новый Структура);
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровНакопления", Новый Структура);
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровСведений", Новый Структура);
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровРасчета", Новый Структура);
		
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровБухгалтерииНадоЗаписывать", Новый Структура);
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровНакопленияНадоЗаписывать", Новый Структура);
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровСведенийНадоЗаписывать", Новый Структура);
		СтруктураОбъекта.Вставить("СтрукутураТзРегистровРасчетаНадоЗаписывать", Новый Структура);
		
		Для Каждого Движение ИЗ МетаданныеГдеЗаменять.Движения Цикл
			
			НаборЗаписей  = СтруктураОбъекта.ОбъектГдеЗаменять.Движения[Движение.Имя];
			НаборЗаписей.Прочитать();
			
			Если мРегистрыБухгалтерии.Содержит(Движение) Тогда
				СтруктураОбъекта.СтрукутураТзРегистровБухгалтерии.Вставить(Движение.Имя, НаборЗаписей.Выгрузить());
				СтруктураОбъекта.СтрукутураТзРегистровБухгалтерииНадоЗаписывать.Вставить(Движение.Имя, Ложь);
			ИначеЕсли мРегистрыНакопления.Содержит(Движение) Тогда
				СтруктураОбъекта.СтрукутураТзРегистровНакопления.Вставить(Движение.Имя, НаборЗаписей.Выгрузить());
				СтруктураОбъекта.СтрукутураТзРегистровНакопленияНадоЗаписывать.Вставить(Движение.Имя, Ложь);
			ИначеЕсли мРегистрыСведений.Содержит(Движение) Тогда
				СтруктураОбъекта.СтрукутураТзРегистровСведений.Вставить(Движение.Имя, НаборЗаписей.Выгрузить());
				СтруктураОбъекта.СтрукутураТзРегистровСведенийНадоЗаписывать.Вставить(Движение.Имя, Ложь);
			ИначеЕсли мРегистрыРасчета.Содержит(Движение) Тогда
				СтруктураОбъекта.СтрукутураТзРегистровРасчета.Вставить(Движение.Имя, НаборЗаписей.Выгрузить());
				СтруктураОбъекта.СтрукутураТзРегистровРасчетаНадоЗаписывать.Вставить(Движение.Имя, Ложь);
			Иначе
				Сообщить("Ошибка: не смогли определить вид регистра документа!");
				возврат 0;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеГдеЗаменять) Тогда	
		
		СтруктураОбъекта.РегистрыСведений = Истина;
		НаборЗаписей = РегистрыСведений[МетаданныеГдеЗаменять.Имя].СоздатьНаборЗаписей();
		
		Если МетаданныеГдеЗаменять.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			НаборЗаписей.Отбор.Период.Установить(ГдеЗаменять.Период);
		КонецЕсли;
		
		Для Каждого Измерение ИЗ МетаданныеГдеЗаменять.Измерения Цикл
			НаборЗаписей.Отбор[Измерение.Имя].Установить(ГдеЗаменять[Измерение.Имя]);
		КонецЦикла;

		НаборЗаписей.Прочитать();
		
		СтруктураОбъекта.Вставить("ОбъектГдеЗаменять", НаборЗаписей);
		СтруктураОбъекта.Вставить("ТзОбъектГдеЗаменять", НаборЗаписей.Выгрузить());
	КонецЕсли;

	Возврат СтруктураОбъекта;
	
КонецФункции

Процедура ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта)
	
	ОбъектГдеЗаменять = СтруктураОбъекта.ОбъектГдеЗаменять;
	МетаданныеГдеЗаменять = СтруктураОбъекта.МетаданныеГдеЗаменять;
	
	////общие реквизиты
	//ИспользованиеОбщегоРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита;
	//АвтоИспользованиеОбщегоРеквизита =  Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита;
	//
	//Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
	//	
	//	Если НЕ ОбщийРеквизит.Состав.Содержит(МетаданныеГдеЗаменять) Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ЭлементСоставаОбщегоРеквизита = ОбщийРеквизит.Состав.Найти(МетаданныеГдеЗаменять);
	//	Если ЭлементСоставаОбщегоРеквизита.Использование = ИспользованиеОбщегоРеквизита.НеИспользовать Тогда
	//		Продолжить;
	//	ИначеЕсли ЭлементСоставаОбщегоРеквизита.Использование = ИспользованиеОбщегоРеквизита.Авто И ОбщийРеквизит.АвтоИспользование = АвтоИспользованиеОбщегоРеквизита.НеИспользовать Тогда
	//		Продолжить;
	//	КонецЕсли;
	//		
	//	Если ОбъектГдеЗаменять[ОбщийРеквизит.Имя] <> ЧтоЗаменять Тогда
	//		продолжить;
	//	КонецЕсли;
	//	
	//	СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
	//	ОбъектГдеЗаменять[ОбщийРеквизит.Имя] = НаЧтоЗаменять;
	//КонецЦикла;

	//реквизиты
	ТипЧтоЗаменять = ТипЗнч(ЧтоЗаменять);
	Для Каждого Реквизит Из МетаданныеГдеЗаменять.Реквизиты Цикл
		Если НЕ Реквизит.Тип.СодержитТип(ТипЧтоЗаменять) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектГдеЗаменять[Реквизит.Имя] <> ЧтоЗаменять Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектГдеЗаменять[Реквизит.Имя] = НаЧтоЗаменять;
		СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
	КонецЦикла;
	
	//табличные части
	Для Каждого ТЧ ИЗ МетаданныеГдеЗаменять.ТабличныеЧасти Цикл
		
		ТабличнаяЧасть = ОбъектГдеЗаменять[ТЧ.Имя];
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если НЕ Реквизит.Тип.СодержитТип(ТипЧтоЗаменять) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура(Реквизит.Имя, ЧтоЗаменять); 
			МассивТЧ = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТЧ Из МассивТЧ Цикл
				СтрокаТЧ[Реквизит.Имя] = НаЧтоЗаменять;
				СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

Конецпроцедуры

Процедура ЗаменитьВТз(Тз, ИмяКолонки, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
	
	СтруктураОтбора = Новый Структура(ИмяКолонки, ЧтоЗаменять);
	МассивТз = Тз.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаТз Из МассивТз Цикл
		СтрокаТз[ИмяКолонки] = НаЧтоЗаменять;
		НадоЗаписывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьЗаменуЗначений(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта, ВспомогательныеДанные)
	
	ОбъектГдеЗаменять = СтруктураОбъекта.ОбъектГдеЗаменять;
	ГдеЗаменять = СтруктураОбъекта.ГдеЗаменять;
	МетаданныеГдеЗаменять = СтруктураОбъекта.МетаданныеГдеЗаменять;
	МетаданныеЧтоЗаменять = ЧтоЗаменять.Метаданные();
	
	Если СтруктураОбъекта.Константы Тогда
		
		//уже записали, поэтому переменную изменений не меняем
		ОбъектГдеЗаменять.Установить(НаЧтоЗаменять);	
		
	ИначеЕсли СтруктураОбъекта.Справочники Тогда
		
		Если МетаданныеГдеЗаменять.Владельцы.Содержит(МетаданныеЧтоЗаменять) И ОбъектГдеЗаменять.Владелец = ЧтоЗаменять Тогда
			СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
			ОбъектГдеЗаменять.Владелец = НаЧтоЗаменять;
		КонецЕсли;
		
		Если МетаданныеГдеЗаменять.Иерархический И ОбъектГдеЗаменять.Родитель = ЧтоЗаменять Тогда
			СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
			ОбъектГдеЗаменять.Родитель = НаЧтоЗаменять;
		КонецЕсли;
		
		ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта);

	ИначеЕсли СтруктураОбъекта.ПланыВидовХарактеристик Тогда
		
		Если МетаданныеГдеЗаменять.Иерархический И ОбъектГдеЗаменять.Родитель = ЧтоЗаменять Тогда
			СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
			ОбъектГдеЗаменять.Родитель = НаЧтоЗаменять;
		КонецЕсли;
		
		ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта);
		
	ИначеЕсли СтруктураОбъекта.ПланыСчетов Тогда
		
		Если ОбъектГдеЗаменять.Родитель = ЧтоЗаменять Тогда
			СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
			ОбъектГдеЗаменять.Родитель = НаЧтоЗаменять;
		КонецЕсли;
		
		ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта);
		
	ИначеЕсли СтруктураОбъекта.Задачи Тогда
		
		//реквизиты адресации
		ТипЧтоЗаменять = ТипЗнч(ЧтоЗаменять);
		Для Каждого Реквизит Из МетаданныеГдеЗаменять.РеквизитыАдресации Цикл
			Если Реквизит.Тип.СодержитТип(ТипЧтоЗаменять) И ГдеЗаменять[Реквизит.Имя] = ЧтоЗаменять Тогда
				СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать = Истина;
				ОбъектГдеЗаменять[Реквизит.Имя] = НаЧтоЗаменять;
			КонецЕсли;
		КонецЦикла;
	
		ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта);
		
	ИначеЕсли  СтруктураОбъекта.БизнесПроцессы Тогда
		
		ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта);
		
	ИначеЕсли  СтруктураОбъекта.ПланыВидовРасчета Тогда
		
		ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта);
		
	ИначеЕсли СтруктураОбъекта.Документы Тогда
		
		#Область Документы
		ЗаменитьРеквизитыИТабличныеЧасти(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта);		
		
		//последовательности
		мПоследовательности = Метаданные.Последовательности;
		СтруктураТзПоследовательностей = СтруктураОбъекта.СтруктураТзПоследовательностей;
		СтруктураТзПоследовательностейНадоЗаписывать = СтруктураОбъекта.СтруктураТзПоследовательностейНадоЗаписывать;
		
		Для Каждого КлючИЗначение Из СтруктураТзПоследовательностей Цикл
			
			ТзНабораЗаписей = КлючИЗначение.Значение;
			Если ТзНабораЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НадоЗаписывать = Ложь;
			мПоследовательность = мПоследовательности[КлючИЗначение.Ключ];
			Для Каждого Измерение ИЗ мПоследовательность.Измерения Цикл
				ЗаменитьВТз(ТзНабораЗаписей, Измерение.Имя, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
			КонецЦикла;
			
			Если НадоЗаписывать Тогда
				СтруктураТзПоследовательностейНадоЗаписывать.Вставить(КлючИЗначение.Ключ, НадоЗаписывать);
			КонецЕсли;
		КонецЦикла;
		
		//движения
		мРегистрыБухгалтерии = Метаданные.РегистрыБухгалтерии;
		мРегистрыНакопления = Метаданные.РегистрыНакопления;
		мРегистрыСведений = Метаданные.РегистрыСведений;
		мРегистрыРасчета  = Метаданные.РегистрыРасчета;
		мПланыСчетов = Метаданные.ПланыСчетов;
		
		ТипЧтоЗаменять = ТипЗнч(ЧтоЗаменять);
		Для Каждого Движение ИЗ МетаданныеГдеЗаменять.Движения Цикл
			
			ЭтоРБ = Ложь; ЭтоРС = Ложь; ЭтоРР = Ложь;
			
			Если мРегистрыБухгалтерии.Содержит(Движение) Тогда
				ЭтоРБ = Истина;
				СтруктураНабора = СтруктураОбъекта.СтрукутураТзРегистровБухгалтерии;
				СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровБухгалтерииНадоЗаписывать;
			ИначеЕсли мРегистрыНакопления.Содержит(Движение) Тогда
				СтруктураНабора = СтруктураОбъекта.СтрукутураТзРегистровНакопления;
				СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровНакопленияНадоЗаписывать;
			ИначеЕсли мРегистрыСведений.Содержит(Движение) Тогда
				ЭтоРС = Истина;
				СтруктураНабора = СтруктураОбъекта.СтрукутураТзРегистровСведений;
				СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровСведенийНадоЗаписывать;
			ИначеЕсли мРегистрыРасчета.Содержит(Движение) Тогда
				ЭтоРР = Истина;
				СтруктураНабора = СтруктураОбъекта.СтрукутураТзРегистровРасчета;
				СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровРасчетаНадоЗаписывать;
			Иначе
				Сообщить("Ошибка: не смогли определить вид регистра документа!");
				возврат 0;
			КонецЕсли;

			//определим таблицу регистра
			ТзНабора = СтруктураНабора[Движение.Имя];
			Если ТзНабора.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
						
				
			//заменим в измерениях
			Если ЭтоРБ Тогда
				НебалансовыеИзмерения = ВспомогательныеДанные[Движение.Имя + "НебалансовыеИзмерения"];
				ЕстьКорреспонденция = ВспомогательныеДанные[Движение.Имя + "Корреспонденция"];
				МаксКоличествоСубконто = ВспомогательныеДанные[Движение.Имя + "МаксКоличествоСубконто"];
			КонецЕсли;
			
			НадоЗаписывать = Ложь;
			Для Каждого Измерение ИЗ Движение.Измерения Цикл
				Если НЕ Измерение.Тип.СодержитТип(ТипЧтоЗаменять) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоРБ И НебалансовыеИзмерения.Найти(Измерение.Имя) <> Неопределено И ЕстьКорреспонденция Тогда
					ЗаменитьВТз(ТзНабора, Измерение.Имя + "Дт", ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
					ЗаменитьВТз(ТзНабора, Измерение.Имя + "Кт", ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
				Иначе
					ЗаменитьВТз(ТзНабора, Измерение.Имя, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
				КонецЕсли;
			КонецЦикла;
			
			// ссылку в ресурсах заменяем только среди регистров сведений, так как только они могут содержать нечисловые данные
			Если ЭтоРС Тогда
				Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
					Если НЕ Ресурс.Тип.СодержитТип(ТипЧтоЗаменять) Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаменитьВТз(ТзНабора, Ресурс.Имя, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
				КонецЦикла;
			КонецЕсли;
			
			//заменим в ресурсах
			Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
				Если НЕ Реквизит.Тип.СодержитТип(ТипЧтоЗаменять) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаменитьВТз(ТзНабора, Реквизит.Имя, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
			КонецЦикла;
			
			
			//специфические замены для регистра бухгалтерии
			Если ЭтоРБ Тогда
				
				Если мПланыСчетов.Содержит(МетаданныеЧтоЗаменять) Тогда
					//это счет одного из планов счетов
					Если МетаданныеЧтоЗаменять = Движение.ПланСчетов Тогда
						Если ЕстьКорреспонденция Тогда
							ЗаменитьВТз(ТзНабора, "СчетДт", ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
							ЗаменитьВТз(ТзНабора, "СчетКт", ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
						Иначе
							ЗаменитьВТз(ТзНабора, "Счет", ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
						КонецЕсли;
					КонецЕсли;
				Иначе
					//заменяем в субконто
					Для ИндексСубконто = 1 по МаксКоличествоСубконто Цикл
						Если ЕстьКорреспонденция Тогда
							ЗаменитьВТз(ТзНабора, "СубконтоДт"+ИндексСубконто, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
							ЗаменитьВТз(ТзНабора, "СубконтоКт"+ИндексСубконто, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
							
							ЗаменитьВТз(ТзНабора, "ВидСубконтоДт"+ИндексСубконто, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
							ЗаменитьВТз(ТзНабора, "ВидСубконтоКт"+ИндексСубконто, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
						Иначе
							ЗаменитьВТз(ТзНабора, "Субконто"+ИндексСубконто, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
							ЗаменитьВТз(ТзНабора, "ВидСубконто"+ИндексСубконто, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			//специфические замены для регистра расчета
			Если ЭтоРР Тогда
				ЗаменитьВТз(ТзНабора, "ВидРасчета", ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписывать);
			КонецЕсли;
			
			Если НадоЗаписывать Тогда
				СтруктураНадоЗаписывать.Вставить(Движение.Имя, НадоЗаписывать);
			КонецЕсли;
		КонецЦикла;
		#КонецОбласти
		
	ИначеЕсли СтруктураОбъекта.РегистрыСведений Тогда	
		
		#Область РегистрыСведений
		Набор  = ОбъектГдеЗаменять;
		
		//узнаем есть ли изменения по отбору, чтобы не очищать регистр сведений, если этого не надо делать
		МассивИзмерений = Новый Массив;
		НадоЗаписыватьПустойНабор = Ложь;
		Если Набор.Количество() <> 0 Тогда
		
			//значит набор пока не очищали 
			Для Каждого ЭлементОтбора Из Набор.Отбор Цикл
				Если ЭлементОтбора.Представление = "Период" Тогда
					Продолжить;
				КонецЕсли;
				
				МассивИзмерений.Добавить(ЭлементОтбора.Имя);
			КонецЦикла;
			
		КонецЕсли;
			
		//узнаем есть ли изменения
		НадоЗаписывать = Ложь;
		ТзНабора = СтруктураОбъекта.ТзОбъектГдеЗаменять;
		Для Каждого Колонка ИЗ ТзНабора.Колонки Цикл
			
			НадоЗаписыватьПоКолонке = Ложь;
			ЗаменитьВТз(ТзНабора, Колонка.Имя, ЧтоЗаменять, НаЧтоЗаменять, НадоЗаписыватьПоКолонке);
			
			Если НадоЗаписыватьПоКолонке Тогда
				НадоЗаписывать = Истина;
			
				Если МассивИзмерений.Найти(Колонка.Имя) <> Неопределено Тогда
					НадоЗаписыватьПустойНабор = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НадоЗаписыватьПустойНабор Тогда
			Набор.Очистить();
			
			Если РежимЗагрузка Тогда
				Набор.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
				
			Попытка
				Набор.Записать();
			Исключение
				Сообщить("Ошибка: не смогли очистить набор регистра сведений! Имя = " + МетаданныеГдеЗаменять.Имя);
				Возврат 0;
			КонецПопытки;
		КонецЕсли;
		
		Если НадоЗаписывать Тогда
			СтруктураОбъекта.Вставить("ОбъектГдеЗаменятьНадоЗаписывать", НадоЗаписывать);
		КонецЕсли;
		#КонецОбласти
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ЗаменитьЗначенияИзмеренийИРесурсовНаNULL(Запись, ВспомогательныеДанные, ИмяРегистраБухгалтерии)
	
	//найдем строку плана счетов
	ТзПланаСчетов = ВспомогательныеДанные[ИмяРегистраБухгалтерии + "ТзПланаСчетов"];
	
	ЕстьКорреспонденция = ВспомогательныеДанные[ИмяРегистраБухгалтерии + "Корреспонденция"];
	Если ЕстьКорреспонденция Тогда
		СтрокаПланаСчетовДт = ТзПланаСчетов.Найти(Запись.СчетДт, "Ссылка");
		СтрокаПланаСчетовКт = ТзПланаСчетов.Найти(Запись.СчетКт, "Ссылка");
	Иначе
		СтрокаПланаСчетов = ТзПланаСчетов.Найти(Запись.Счет, "Ссылка");
	КонецЕсли;
	
	//пробежимся по признакам учета
	мРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	
	НебалансовыеИзмерения = ВспомогательныеДанные[ИмяРегистраБухгалтерии + "НебалансовыеИзмерения"];
	Для Каждого Колонка Из ТзПланаСчетов.Колонки Цикл
		ПризнакУчета = Колонка.Имя;
		Если ПризнакУчета = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		//заменим измерения
		Для Каждого Измерение ИЗ мРегистра.Измерения Цикл
			Если Измерение.ПризнакУчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Измерение.ПризнакУчета.Имя <> ПризнакУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьКорреспонденция Тогда
				
				Если Измерение.Балансовый = Истина Тогда
					
					Если (СтрокаПланаСчетовДт = Неопределено ИЛИ СтрокаПланаСчетовДт[ПризнакУчета] <> Истина) И 
						(СтрокаПланаСчетовКт = Неопределено ИЛИ СтрокаПланаСчетовКт[ПризнакУчета] <> Истина) Тогда
						
						Запись[Измерение.Имя] = NULL;
					КонецЕсли;
				Иначе
					Если СтрокаПланаСчетовДт = Неопределено ИЛИ СтрокаПланаСчетовДт[ПризнакУчета] <> Истина Тогда
						Запись[Измерение.Имя + "Дт"] = NULL;
					КонецЕсли;
					
					Если СтрокаПланаСчетовКт = Неопределено ИЛИ СтрокаПланаСчетовКт[ПризнакУчета] <> Истина Тогда
						Запись[Измерение.Имя + "Кт"] = NULL;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокаПланаСчетов = Неопределено ИЛИ СтрокаПланаСчетов[ПризнакУчета] <> Истина Тогда
					Запись[Измерение.Имя] = NULL;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//заменим ресурсы
		Для Каждого Ресурс ИЗ мРегистра.Ресурсы Цикл
			Если Ресурс.ПризнакУчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Ресурс.ПризнакУчета.Имя <> ПризнакУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЕстьКорреспонденция Тогда
				
				Если Ресурс.Балансовый = Истина Тогда
					
					Если (СтрокаПланаСчетовДт = Неопределено ИЛИ СтрокаПланаСчетовДт[ПризнакУчета] <> Истина) И 
						(СтрокаПланаСчетовКт = Неопределено ИЛИ СтрокаПланаСчетовКт[ПризнакУчета] <> Истина) Тогда
						
						Запись[Ресурс.Имя] = NULL;
					КонецЕсли;
				Иначе
					Если СтрокаПланаСчетовДт = Неопределено ИЛИ СтрокаПланаСчетовДт[ПризнакУчета] <> Истина Тогда
						Запись[Ресурс.Имя + "Дт"] = NULL;
					КонецЕсли;
					
					Если СтрокаПланаСчетовКт = Неопределено ИЛИ СтрокаПланаСчетовКт[ПризнакУчета] <> Истина Тогда
						Запись[Ресурс.Имя + "Кт"] = NULL;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокаПланаСчетов = Неопределено ИЛИ СтрокаПланаСчетов[ПризнакУчета] <> Истина Тогда
					Запись[Ресурс.Имя] = NULL;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат 1;

КонецФункции

Функция ЗаписатьНаборРегистра(СтрукутураРегистра, СтруктураНадоЗаменять, МенеджерРегистров, Регистратор, ЭтоРегистрыБухгалтерии = Ложь, ВспомогательныеДанные = Неопределено)
	
	Для Каждого КлючИЗначение Из СтруктураНадоЗаменять Цикл
				
		Если КлючИЗначение.Значение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		Ключ = КлючИЗначение.Ключ;
		
		ТзНабора = Неопределено;
		Если НЕ СтрукутураРегистра.Свойство(Ключ, ТзНабора) Тогда
			Сообщить("Ошибка: не нашли ТзНабора! Ключ = " + КлючИЗначение.Ключ);  
			Возврат 0;
		КонецЕсли;
		
		Набор = МенеджерРегистров[Ключ].СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Регистратор);
		Набор.Загрузить(ТзНабора);
		
		Если ЭтоРегистрыБухгалтерии Тогда
			
			//установим значение NULL там где надо (чтобы при ТИИ не было кучи ошибок)
			Для Каждого Запись Из Набор Цикл
				Если ЗаменитьЗначенияИзмеренийИРесурсовНаNULL(Запись, ВспомогательныеДанные, Ключ) = 0 Тогда
					Возврат 0;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
				
		Если РежимЗагрузка Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
			
		Попытка
			Набор.Записать(Истина);
		Исключение
			Сообщить("Не смогли записать объект! " + ОписаниеОшибки());
			Возврат 0;
		КонецПопытки;
		
	КонецЦикла;

	Возврат 1;
	
КонецФункции

Функция ЗаписатьДанныеОбъектаВБД(СтруктураОбъекта, ВспомогательныеДанные)
	
	МетаданныеГдеЗаменять = СтруктураОбъекта.МетаданныеГдеЗаменять;
	
	//запишем объект
	НачатьТранзакцию();
	Если СтруктураОбъекта.ОбъектГдеЗаменятьНадоЗаписывать Тогда
		
		ОбъектГдеЗаменять = СтруктураОбъекта.ОбъектГдеЗаменять;
		Если СтруктураОбъекта.ТзОбъектГдеЗаменять <> Неопределено Тогда
			//это регистр сведений, который хранит как набор, так и ТзОбъектГдеЗаменять
			Запись = СтруктураОбъекта.ТзОбъектГдеЗаменять.Получить(0);
			
			ОбъектГдеЗаменять = РегистрыСведений[МетаданныеГдеЗаменять.Имя].СоздатьНаборЗаписей();
		
			Если МетаданныеГдеЗаменять.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				ОбъектГдеЗаменять.Отбор.Период.Установить(Запись.Период);
			КонецЕсли;
			
			Для Каждого Измерение ИЗ МетаданныеГдеЗаменять.Измерения Цикл
				ОбъектГдеЗаменять.Отбор[Измерение.Имя].Установить(Запись[Измерение.Имя]);
			КонецЦикла;

			ОбъектГдеЗаменять.Загрузить(СтруктураОбъекта.ТзОбъектГдеЗаменять);
		КонецЕсли;
		
		Если РежимЗагрузка Тогда
			ОбъектГдеЗаменять.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		
		Попытка
			ОбъектГдеЗаменять.Записать();
		Исключение
			Сообщить("Не смогли записать объект! " + ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	
	
	ГдеЗаменять = СтруктураОбъекта.ГдеЗаменять;
	
	//последовательности
	СтруктураТз = Неопределено;
	Если СтруктураОбъекта.Свойство("СтруктураТзПоследовательностей", СтруктураТз) Тогда
		СтруктураНадоЗаписывать = СтруктураОбъекта.СтруктураТзПоследовательностейНадоЗаписывать; 
		Если ЗаписатьНаборРегистра(СтруктураТз, СтруктураНадоЗаписывать, Последовательности, ГдеЗаменять) = 0 Тогда
			ОтменитьТранзакцию();
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	//регистры
	Если СтруктураОбъекта.Свойство("СтрукутураТзРегистровБухгалтерии", СтруктураТз) Тогда
		СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровБухгалтерииНадоЗаписывать;
		Если ЗаписатьНаборРегистра(СтруктураТз, СтруктураНадоЗаписывать, РегистрыБухгалтерии, ГдеЗаменять, Истина, ВспомогательныеДанные) = 0 Тогда
			ОтменитьТранзакцию();
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("СтрукутураТзРегистровНакопления", СтруктураТз) Тогда
		СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровНакопленияНадоЗаписывать;
		Если ЗаписатьНаборРегистра(СтруктураТз, СтруктураНадоЗаписывать, РегистрыНакопления, ГдеЗаменять) = 0 Тогда
			ОтменитьТранзакцию();
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("СтрукутураТзРегистровСведений", СтруктураТз) Тогда
		СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровСведенийНадоЗаписывать;
		Если ЗаписатьНаборРегистра(СтруктураТз, СтруктураНадоЗаписывать, РегистрыСведений, ГдеЗаменять) = 0 Тогда
			ОтменитьТранзакцию();
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("СтрукутураТзРегистровРасчета", СтруктураТз) Тогда
		СтруктураНадоЗаписывать = СтруктураОбъекта.СтрукутураТзРегистровРасчетаНадоЗаписывать;
		Если ЗаписатьНаборРегистра(СтруктураТз, СтруктураНадоЗаписывать, РегистрыРасчета, ГдеЗаменять) = 0 Тогда
			ОтменитьТранзакцию();
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ВыполнитьЗаменуПоОбъекту(ВспомогательныеДанные, ТзНайденныхСсылок, ГдеЗаменять) Экспорт
	
	СтруктураОтбора = Новый Структура("ГдеЗаменять", ГдеЗаменять);
	МассивНайденныхСсылок = ТзНайденныхСсылок.НайтиСтроки(СтруктураОтбора);
	
	Если МассивНайденныхСсылок.Количество() = 0 Тогда
		Сообщить("Ошибка: по строке не нашли ссылок!");
		Возврат 0;
	КонецЕсли;
	
	//ОДИН РАЗ прочитаем данные для всех замен во вспомогательную переменную
	СтруктураОбъекта = ПрочитатьДанныеОбъектаИзБД(МассивНайденныхСсылок[0]);
	Если СтруктураОбъекта = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если СтруктураОбъекта.ОбъектГдеЗаменять = Неопределено Тогда
		//битая ссылка
		Возврат 1;
	КонецЕсли;

	
	Для Каждого СтрокаНайденныхСсылок Из МассивНайденныхСсылок Цикл
		
		Если НЕ СтрокаНайденныхСсылок.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтоЗаменять = СтрокаНайденныхСсылок.ЧтоЗаменять;
		
		//найдем на что заменять
		МассивЗЗ = ЗаменяемыеЗначения.НайтиСтроки(Новый Структура("ЧтоЗаменять", ЧтоЗаменять));
		Если МассивЗЗ.Количество() <> 1 Тогда
			Сообщить("Ошибка: для одного значения предложено " + МассивЗЗ.Количество() + " замен!");
			Возврат 0;
		КонецЕсли;
		
		Если НЕ МассивЗЗ[0].Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		НаЧтоЗаменять = МассивЗЗ[0].НаЧтоЗаменять;
		
		Если ВыполнитьЗаменуЗначений(ЧтоЗаменять, НаЧтоЗаменять, СтруктураОбъекта, ВспомогательныеДанные) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьДанныеОбъектаВБД(СтруктураОбъекта, ВспомогательныеДанные) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;	
		
КонецФункции


