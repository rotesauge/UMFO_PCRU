
Функция CreateBill(Param)
	pcru_ex_СозданиеДокументов.СоздатьПлатежноеПОручение(Param);
	
	Возврат "OK";
КонецФункции

Функция CreateMessage(вхСсылка, вхВидСообщения, вхОтправитель, вхТело, вхПользователь, вхКод)
	
	Возврат ргОбменДанными.CreateMessage(вхСсылка, вхВидСообщения, вхОтправитель, вхТело, вхПользователь, вхКод);
	
КонецФункции

Функция ConfirmMessage(вхСсылка, вхКодСвязи, вхТелоОтвета)
	
	Возврат ргОбменДанными.ConfirmMessage(вхСсылка, вхКодСвязи, вхТелоОтвета);
	
КонецФункции

Функция СтруктуруВСтрокуJSON(Структура) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Структура); 
	Возврат ЗаписьJSON.Закрыть();
КонецФункции // СтруктуруВСтрокуJSON()

//<Свойство> - в параметр передается имя свойства, если выполняется запись структуры или соответствия,
//<Значение> - в параметр передается исходное значение,
//<ДополнительныеПараметры> - дополнительные параметры, которые указаны в вызове метода ЗаписатьJSON,
//<Отказ> - отказ от записи свойства.
Функция ПреобразованиеJSON(Свойство,Значение,ДополнительныеПараметры,Отказ) Экспорт
	Возврат Строка(Значение);
КонецФункции // СтруктуруВСтрокуJSON()

Функция QueryToJSON(Query, Parametrs)
	//Godmode ON
	УстановитьПривилегированныйРежим(Истина);
	//Читаем параметры
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(Parametrs); 
	СтруктураПараметров= ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть();
	//Массив ответов
	МассивВыборка = Новый Массив;
	//Создаем запрос
	Запрос = new Запрос;
	Запрос.Текст = Query;
	//Заполняем параметры если есть
	Для каждого Элемент Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла; 
	//Выполняем
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	//перебираем
	Пока Выборка.Следующий() Цикл
		//преобразуем рекорд в структуру строки ответа 
		СтрВыборка = Новый Структура;
		Для каждого Колонка Из Результат.Колонки Цикл
			СтрВыборка.Вставить(Колонка.Имя,Выборка[Колонка.Имя]);
		КонецЦикла; 	
		//и добавляем в масссив ответов
		МассивВыборка.Добавить(СтрВыборка);	
	КонецЦикла;
	//Преобразуем результат в Строку и отдаем
	Возврат  СтруктуруВСтрокуJSON(МассивВыборка);
КонецФункции

Функция GetListSubdivisions()

	ТелоСообщения = "";
	МассивЗапроса = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	спр.Код КАК Код,
	|	спр.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК спр
	|ГДЕ
	|	НЕ спр.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	МассивЗапроса = Новый Массив;
	Для Каждого Выборка ИЗ ТЗ Цикл
		СтрЭл = новый Структура;
		СтрЭл.Вставить("Код",Выборка.Код);
	    СтрЭл.Вставить("Наименование",Выборка.Наименование);		
		МассивЗапроса.Добавить(СтрЭл);
	КонецЦикла;
	
	ТелоСообщения = ргОбменДанными.СтруктуруВСтрокуJSON(МассивЗапроса);
	Возврат ТелоСообщения;
	
КонецФункции

Функция MatchReflectionZP(Param)
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(Param); 
		СтруктураПараметров = ПрочитатьJSON(ЧтениеJSON); 
		ЧтениеJSON.Закрыть();
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;	
	
	НачатьТранзакцию();
	Попытка			
		Мз = РегистрыСведений.pcru_ex_СопоставлениеВнешнихДанных.СоздатьМенеджерЗаписи();
		Мз.КодВнешнихДанных =  СтруктураПараметров.Код;
		Мз.ТипДанных = Справочники.pcru_ex_ТипыВнешнихДанных.НайтиПоНаименованию("Подразделение");
		Мз.Значение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду(СтруктураПараметров.ЗначениеВыбора);
		Мз.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;

КонецФункции
